{"sha":"0ead583e574e126e4363b46a3ce391f9d9fa9ca1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBlYWQ1ODNlNTc0ZTEyNmU0MzYzYjQ2YTNjZTM5MWY5ZDlmYTljYTE=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-11-05T08:22:31Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-11-05T08:22:31Z"},"message":"Centralized notification and auditing message generation. Missing some improvement onto the console .... see issues SYNCOPE-422 & SYNCOPE-423\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1538902 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"da514c9b79c19bd5a9c73489697d85c30e442dac","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/da514c9b79c19bd5a9c73489697d85c30e442dac"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0ead583e574e126e4363b46a3ce391f9d9fa9ca1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0ead583e574e126e4363b46a3ce391f9d9fa9ca1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0ead583e574e126e4363b46a3ce391f9d9fa9ca1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"28c4ac21ab3196a9b8435e477a06f940662f4533","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/28c4ac21ab3196a9b8435e477a06f940662f4533","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/28c4ac21ab3196a9b8435e477a06f940662f4533"}],"stats":{"total":4328,"additions":3012,"deletions":1316},"files":[{"sha":"1f1bba5ebd93c731b78bc3758cd27b2b1fb24c72","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/LoggerServiceProxy.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -25,6 +25,7 @@\n import javax.ws.rs.NotFoundException;\r\n \r\n import org.apache.syncope.common.services.LoggerService;\r\n+import org.apache.syncope.common.to.EventCategoryTO;\r\n import org.apache.syncope.common.to.LoggerTO;\r\n import org.apache.syncope.common.types.AuditLoggerName;\r\n import org.apache.syncope.common.types.LoggerType;\r\n@@ -104,4 +105,9 @@ public void delete(final LoggerType type, final String name) {\n         }\r\n \r\n     }\r\n+\r\n+    @Override\r\n+    public List<EventCategoryTO> events() {\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"logger/events\", EventCategoryTO[].class));\r\n+    }\r\n }\r"},{"sha":"4e3c97cade846d842cbd0188070cdfe32945e9e2","filename":"client/src/test/java/org/apache/syncope/client/test/JSONTest.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -121,8 +121,12 @@ public void testReportletConfImplementations() throws IOException {\n \n     @Test\n     public void testAuditLoggerName() throws IOException {\n-        AuditLoggerName auditLoggerName = new AuditLoggerName(AuditElements.Category.report,\n-                AuditElements.ReportSubCategory.create, AuditElements.Result.failure);\n+        AuditLoggerName auditLoggerName = new AuditLoggerName(\n+                AuditElements.EventCategoryType.REST,\n+                \"ReportController\",\n+                null,\n+                \"create\",\n+                AuditElements.Result.FAILURE);\n \n         ObjectMapper mapper = new ObjectMapper();\n "},{"sha":"0aa12eef20ff14febbecfad178e361f38880a91c","filename":"common/src/main/java/org/apache/syncope/common/services/LoggerService.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -25,6 +25,7 @@\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n+import org.apache.syncope.common.to.EventCategoryTO;\r\n \r\n import org.apache.syncope.common.to.LoggerTO;\r\n import org.apache.syncope.common.types.LoggerType;\r\n@@ -65,4 +66,6 @@ public interface LoggerService {\n     @Path(\"{name}/level\")\r\n     void update(@PathParam(\"type\") LoggerType type, @PathParam(\"name\") String name, LoggerTO logger);\r\n \r\n+    @GET\r\n+    List<EventCategoryTO> events();\r\n }\r"},{"sha":"8dba20171ed1783c5dc0fd9b3d6fb2dced49b8a3","filename":"common/src/main/java/org/apache/syncope/common/to/EventCategoryTO.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEventCategoryTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEventCategoryTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEventCategoryTO.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.types.AuditElements;\n+\n+@XmlRootElement(name = \"user\")\n+@XmlType\n+public class EventCategoryTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -4340060002701633401L;\n+\n+    private AuditElements.EventCategoryType type;\n+\n+    private String category;\n+\n+    private String subcategory;\n+\n+    private List<String> events;\n+\n+    /**\n+     * Constructor for Type.REST event category.\n+     */\n+    public EventCategoryTO() {\n+        this.type = AuditElements.EventCategoryType.REST;\n+    }\n+\n+    /**\n+     * Constructor for the given Type event category.\n+     */\n+    public EventCategoryTO(final AuditElements.EventCategoryType type) {\n+        this.type = type;\n+    }\n+\n+    public AuditElements.EventCategoryType getType() {\n+        return type;\n+    }\n+\n+    public void setType(final AuditElements.EventCategoryType type) {\n+        this.type = type;\n+    }\n+\n+    public String getCategory() {\n+        return category;\n+    }\n+\n+    public void setCategory(final String category) {\n+        this.category = category;\n+    }\n+\n+    public String getSubcategory() {\n+        return subcategory;\n+    }\n+\n+    public void setSubcategory(final String subcategory) {\n+        this.subcategory = subcategory;\n+    }\n+\n+    public List<String> getEvents() {\n+        if (events == null) {\n+            events = new ArrayList<String>();\n+        }\n+        return events;\n+    }\n+\n+    public void setEvents(final List<String> events) {\n+        this.events = events;\n+    }\n+}"},{"sha":"e7087bd18138d97c81536f95eef1cd1af9acddef","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"modified","additions":18,"deletions":225,"changes":243,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,249 +18,42 @@\n  */\r\n package org.apache.syncope.common.types;\r\n \r\n-import java.util.EnumSet;\r\n+import java.io.Serializable;\r\n import javax.xml.bind.annotation.XmlEnum;\r\n+import org.apache.commons.lang.StringUtils;\r\n \r\n-public final class AuditElements {\r\n+public final class AuditElements implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = -4385059255522273254L;\r\n \r\n     private AuditElements() {\r\n     }\r\n \r\n     @XmlEnum\r\n-    public enum Category {\r\n-\r\n-        authentication(AuthenticationSubCategory.class),\r\n-        configuration(ConfigurationSubCategory.class),\r\n-        connector(ConnectorSubCategory.class),\r\n-        logger(LoggerSubCategory.class),\r\n-        notification(NotificationSubCategory.class),\r\n-        policy(PolicySubCategory.class),\r\n-        report(ReportSubCategory.class),\r\n-        resource(ResourceSubCategory.class),\r\n-        role(RoleSubCategory.class),\r\n-        schema(SchemaSubCategory.class),\r\n-        task(TaskSubCategory.class),\r\n-        user(UserSubCategory.class),\r\n-        userRequest(UserRequestSubCategory.class),\r\n-        workflow(WorkflowSubCategory.class);\r\n+    public enum EventCategoryType {\r\n \r\n-        private Class<? extends Enum<?>> subCategory;\r\n+        REST(StringUtils.EMPTY),\r\n+        TASK(StringUtils.EMPTY),\r\n+        PROPAGATION(\"PropagationTask\"),\r\n+        SYNCHRONIZATION(\"SyncTask\");\r\n \r\n-        Category(final Class<? extends Enum<?>> subCategory) {\r\n-            this.subCategory = subCategory;\r\n-        }\r\n+        private final String value;\r\n \r\n-        public Class<? extends Enum> getSubCategory() {\r\n-            return subCategory;\r\n+        EventCategoryType(final String value) {\r\n+            this.value = value;\r\n         }\r\n \r\n-        @SuppressWarnings(\"unchecked\")\r\n-        public EnumSet<? extends Enum<?>> getSubCategoryElements() {\r\n-            return EnumSet.allOf(getSubCategory());\r\n+        @Override\r\n+        public String toString() {\r\n+            return value;\r\n         }\r\n     }\r\n \r\n     @XmlEnum\r\n     public enum Result {\r\n \r\n-        success,\r\n-        failure\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum AuthenticationSubCategory {\r\n-\r\n-        login,\r\n-        getEntitlements\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum ConfigurationSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        getMailTemplates,\r\n-        getValidators,\r\n-        dbExport\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum ConnectorSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        getBundles,\r\n-        getSchemaNames,\r\n-        getSupportedObjectClasses,\r\n-        getConfigurationProperties,\r\n-        check,\r\n-        readConnectorBean,\r\n-        reload\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum LoggerSubCategory {\r\n-\r\n-        list,\r\n-        setLevel,\r\n-        delete\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum NotificationSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        send,\r\n-        retry\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum PolicySubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        getCorrelationRuleClasses\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum ReportSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        readExecution,\r\n-        update,\r\n-        delete,\r\n-        deleteExecution,\r\n-        getReportletConfClasses,\r\n-        execute,\r\n-        exportExecutionResult\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum ResourceSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        getObject,\r\n-        getRoleResourcesMapping,\r\n-        getPropagationActionsClasses\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum RoleSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        selfRead,\r\n-        update,\r\n-        delete,\r\n-        parent,\r\n-        children\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum SchemaSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        listDerived,\r\n-        createDerived,\r\n-        readDerived,\r\n-        updateDerived,\r\n-        deleteDerived,\r\n-        listVirtual,\r\n-        createVirtual,\r\n-        readVirtual,\r\n-        updateVirtual,\r\n-        deleteVirtual\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum TaskSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        getJobClasses,\r\n-        getSyncActionsClasses,\r\n-        readExecution,\r\n-        execute,\r\n-        report,\r\n-        deleteExecution\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum UserSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        verifyPassword,\r\n-        search,\r\n-        setStatus,\r\n-        executeWorkflow,\r\n-        getForms,\r\n-        getFormForUser,\r\n-        claimForm,\r\n-        submitForm\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum UserRequestSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        isCreateAllowed\r\n-\r\n-    }\r\n-\r\n-    @XmlEnum\r\n-    public enum WorkflowSubCategory {\r\n-\r\n-        getDefinition,\r\n-        updateDefinition,\r\n-        getDefinedTasks\r\n+        SUCCESS,\r\n+        FAILURE\r\n \r\n     }\r\n }\r"},{"sha":"f4276c323324b2e9d658e95e5da4e10c52a371a0","filename":"common/src/main/java/org/apache/syncope/common/types/AuditLoggerName.java","status":"modified","additions":47,"deletions":24,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -19,66 +19,88 @@\n package org.apache.syncope.common.types;\r\n \r\n import java.text.ParseException;\r\n+import java.util.Map;\r\n \r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n import org.apache.commons.lang.StringUtils;\r\n import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.types.AuditElements.Category;\r\n+import org.apache.syncope.common.to.EventCategoryTO;\r\n import org.apache.syncope.common.types.AuditElements.Result;\r\n+import org.apache.syncope.common.util.LoggerEventUtils;\r\n import org.codehaus.jackson.annotate.JsonCreator;\r\n import org.codehaus.jackson.annotate.JsonProperty;\r\n import org.codehaus.jackson.annotate.JsonTypeInfo;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n \r\n @XmlType\r\n @XmlRootElement\r\n public class AuditLoggerName extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = -647989486671786839L;\r\n \r\n-    private final Category category;\r\n+    /**\r\n+     * Logger.\r\n+     */\r\n+    private static Logger LOG = LoggerFactory.getLogger(AuditLoggerName.class);\r\n+\r\n+    private final AuditElements.EventCategoryType type;\r\n+\r\n+    private final String category;\r\n+\r\n+    private final String subcategory;\r\n \r\n     @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n-    private final Enum<?> subcategory;\r\n+    private final String event;\r\n \r\n     private final Result result;\r\n \r\n     @JsonCreator\r\n-    public AuditLoggerName(@JsonProperty(\"category\") final Category category,\r\n-            @JsonProperty(\"subcategory\") final Enum<?> subcategory, @JsonProperty(\"result\") final Result result)\r\n+    public AuditLoggerName(\r\n+            @JsonProperty(\"type\") final AuditElements.EventCategoryType type,\r\n+            @JsonProperty(\"category\") final String category,\r\n+            @JsonProperty(\"subcategory\") final String subcategory,\r\n+            @JsonProperty(\"event\") final String event,\r\n+            @JsonProperty(\"result\") final Result result)\r\n             throws IllegalArgumentException {\r\n \r\n-        if (category == null || subcategory == null || result == null) {\r\n+        if (type == null || result == null) {\r\n             throw new IllegalArgumentException(\"Null values not permitted\");\r\n         }\r\n \r\n-        if (!category.getSubCategoryElements().contains(subcategory)) {\r\n-            throw new IllegalArgumentException(category.name() + \" does not contain \" + subcategory.name());\r\n-        }\r\n-\r\n+        this.type = type;\r\n         this.category = category;\r\n         this.subcategory = subcategory;\r\n+        this.event = event;\r\n         this.result = result;\r\n     }\r\n \r\n-    public Category getCategory() {\r\n+    public AuditElements.EventCategoryType getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public String getEvent() {\r\n+        return event;\r\n+    }\r\n+\r\n+    public String getCategory() {\r\n         return category;\r\n     }\r\n \r\n     public Result getResult() {\r\n         return result;\r\n     }\r\n \r\n-    public Enum<?> getSubcategory() {\r\n+    public String getSubcategory() {\r\n         return subcategory;\r\n     }\r\n \r\n     public String toLoggerName() {\r\n-        return new StringBuilder().append(SyncopeLoggerType.AUDIT.getPrefix()).append('.').\r\n-                append(category.name()).append('.').\r\n-                append(subcategory.name()).append('.').\r\n-                append(result.name()).toString();\r\n+        return new StringBuilder().append(\r\n+                SyncopeLoggerType.AUDIT.getPrefix()).append('.').append(\r\n+                LoggerEventUtils.buildEvent(type, category, subcategory, event, result)).toString();\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n@@ -93,15 +115,16 @@ public static AuditLoggerName fromLoggerName(final String loggerName)\n             throw new ParseException(\"Audit logger name must start with \" + SyncopeLoggerType.AUDIT.getPrefix(), 0);\r\n         }\r\n \r\n-        String[] splitted = loggerName.split(\"\\\\.\");\r\n-        if (splitted == null || splitted.length < 5) {\r\n-            throw new ParseException(\"Unparsable logger name\", 0);\r\n-        }\r\n+        final Map.Entry<EventCategoryTO, Result> eventCategory = LoggerEventUtils.parseEventCategory(\r\n+                loggerName.replaceAll(SyncopeLoggerType.AUDIT.getPrefix() + \".\", \"\"));\r\n \r\n-        Category category = Category.valueOf(splitted[2]);\r\n-        Enum<?> subcategory = Enum.valueOf(category.getSubCategory(), splitted[3]);\r\n-        Result result = Result.valueOf(splitted[4]);\r\n+        LOG.debug(\"From logger name {} to event category {}\", loggerName, eventCategory);\r\n \r\n-        return new AuditLoggerName(category, subcategory, result);\r\n+        return new AuditLoggerName(\r\n+                eventCategory.getKey().getType(),\r\n+                eventCategory.getKey().getCategory(),\r\n+                eventCategory.getKey().getSubcategory(),\r\n+                eventCategory.getKey().getEvents().iterator().next(),\r\n+                eventCategory.getValue());\r\n     }\r\n }\r"},{"sha":"ed35ef5458838748086c232757a3a6394a046957","filename":"common/src/main/java/org/apache/syncope/common/util/CollectionWrapper.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -33,10 +33,17 @@\n import org.apache.syncope.common.to.ValidatorTO;\r\n import org.apache.syncope.common.types.AuditLoggerName;\r\n import org.apache.syncope.common.types.SyncopeLoggerLevel;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n import org.springframework.web.servlet.ModelAndView;\r\n \r\n public final class CollectionWrapper {\r\n \r\n+    /**\r\n+     * Logger.\r\n+     */\r\n+    private final static Logger LOG = LoggerFactory.getLogger(CollectionWrapper.class);\r\n+\r\n     private CollectionWrapper() {\r\n         // empty constructor for static utility class\r\n     }\r\n@@ -100,7 +107,7 @@ public static List<AuditLoggerName> wrapLogger(final Collection<LoggerTO> logger\n             try {\r\n                 respons.add(AuditLoggerName.fromLoggerName(l.getName()));\r\n             } catch (Exception e) {\r\n-                //TODO log event\r\n+                LOG.error(\"Error wrapping logger\", e);\r\n             }\r\n         }\r\n         return respons;\r"},{"sha":"0b8a1c244b66b246e5f2694be3db211490656ff0","filename":"common/src/main/java/org/apache/syncope/common/util/LoggerEventUtils.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.common.util;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.syncope.common.to.EventCategoryTO;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.EventCategoryType;\n+import org.apache.syncope.common.types.AuditElements.Result;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggerEventUtils {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static Logger LOG = LoggerFactory.getLogger(LoggerEventUtils.class);\n+\n+    public static Map.Entry<EventCategoryTO, Result> parseEventCategory(final String event) {\n+        final EventCategoryTO eventCategoryTO = new EventCategoryTO();\n+\n+        Result condition = null;\n+\n+        if (StringUtils.isNotEmpty(event)) {\n+            LOG.debug(\"Parse event {}\", event);\n+\n+            final String[] elements = event.substring(1, event.length() - 1).split(\"\\\\]:\\\\[\");\n+\n+            LOG.debug(\"Found {} elements\", elements.length);\n+\n+            LOG.debug(\"Type {}\", elements[0]);\n+\n+            if (EventCategoryType.PROPAGATION.toString().equals(elements[0])) {\n+                eventCategoryTO.setType(EventCategoryType.PROPAGATION);\n+            } else if (EventCategoryType.SYNCHRONIZATION.toString().equals(elements[0])) {\n+                eventCategoryTO.setType(EventCategoryType.SYNCHRONIZATION);\n+            } else {\n+                eventCategoryTO.setType(EventCategoryType.valueOf(elements[0]));\n+            }\n+\n+            LOG.debug(\"Category {}\", elements[1]);\n+            eventCategoryTO.setCategory(StringUtils.isNotEmpty(elements[1]) ? elements[1] : null);\n+\n+            LOG.debug(\"Sub-category {}\", elements[2]);\n+            eventCategoryTO.setSubcategory(StringUtils.isNotEmpty(elements[2]) ? elements[2] : null);\n+\n+            if (elements.length > 3 && StringUtils.isNotEmpty(elements[3])) {\n+                LOG.debug(\"Event {}\", elements[3]);\n+                eventCategoryTO.getEvents().add(elements[3]);\n+            }\n+\n+            if (elements.length > 4) {\n+                LOG.debug(\"Result condition {}\", elements[4]);\n+                condition = Result.valueOf(elements[4].toUpperCase());\n+            }\n+        }\n+\n+        return new AbstractMap.SimpleEntry< EventCategoryTO, Result>(eventCategoryTO, condition);\n+    }\n+\n+    /**\n+     * Build event string with the following syntax [type]:[category]:[subcategory]:[event]:[maybe result value cond].\n+     *\n+     * @param type event type.\n+     * @param category event category.\n+     * @param subcategory event subcategory.\n+     * @param event event.\n+     * @param resultValueCondition result value condition.\n+     * @return event string.\n+     */\n+    public static String buildEvent(\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final String event,\n+            final AuditElements.Result resultValueCondition) {\n+\n+        final StringBuilder eventBuilder = new StringBuilder();\n+\n+        eventBuilder.append('[');\n+        if (type != null) {\n+            if (StringUtils.isNotBlank(type.toString())) {\n+                eventBuilder.append(type.toString());\n+            } else {\n+                eventBuilder.append(type.name());\n+            }\n+        }\n+        eventBuilder.append(']');\n+\n+        eventBuilder.append(\":\");\n+\n+        eventBuilder.append('[');\n+        if (StringUtils.isNotBlank(category)) {\n+            eventBuilder.append(category);\n+        }\n+        eventBuilder.append(']');\n+\n+        eventBuilder.append(\":\");\n+\n+        eventBuilder.append('[');\n+        if (StringUtils.isNotBlank(subcategory)) {\n+            eventBuilder.append(subcategory);\n+        }\n+        eventBuilder.append(']');\n+\n+        eventBuilder.append(\":\");\n+\n+        eventBuilder.append('[');\n+        if (StringUtils.isNotBlank(event)) {\n+            eventBuilder.append(event);\n+        }\n+        eventBuilder.append(']');\n+\n+        if (resultValueCondition != null) {\n+            eventBuilder.append(\":\");\n+\n+            eventBuilder.append('[');\n+            eventBuilder.append(resultValueCondition);\n+            eventBuilder.append(']');\n+        }\n+\n+        return eventBuilder.toString();\n+    }\n+}"},{"sha":"403c948ba6cc6af0055ec3a8efda7acc44615237","filename":"console/src/main/java/org/apache/syncope/console/pages/Configuration.java","status":"modified","additions":26,"deletions":19,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -43,6 +43,7 @@\n import org.apache.syncope.console.rest.NotificationRestClient;\n import org.apache.syncope.console.rest.WorkflowRestClient;\n import org.apache.syncope.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.CollectionPropertyColumn;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.wicket.Page;\n@@ -119,7 +120,7 @@ public class Configuration extends BasePage {\n \n     private static final int NOTIFICATION_WIN_HEIGHT = 500;\n \n-    private static final int NOTIFICATION_WIN_WIDTH = 900;\n+    private static final int NOTIFICATION_WIN_WIDTH = 1100;\n \n     private WebMarkupContainer confContainer;\n \n@@ -188,7 +189,8 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n         add(workflowDefContainer);\n \n         // Logger stuff\n-        PropertyListView coreLoggerList = new LoggerPropertyList(null, \"corelogger\", loggerRestClient.listLogs());\n+        PropertyListView<LoggerTO> coreLoggerList =\n+                new LoggerPropertyList(null, \"corelogger\", loggerRestClient.listLogs());\n         WebMarkupContainer coreLoggerContainer = new WebMarkupContainer(\"coreLoggerContainer\");\n         coreLoggerContainer.add(coreLoggerList);\n         coreLoggerContainer.setOutputMarkupId(true);\n@@ -198,8 +200,8 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n         add(coreLoggerContainer);\n \n         ConsoleLoggerController consoleLoggerController = new ConsoleLoggerController();\n-        PropertyListView consoleLoggerList = new LoggerPropertyList(consoleLoggerController, \"consolelogger\",\n-                consoleLoggerController.getLoggers());\n+        PropertyListView<LoggerTO> consoleLoggerList =\n+                new LoggerPropertyList(consoleLoggerController, \"consolelogger\", consoleLoggerController.getLoggers());\n         WebMarkupContainer consoleLoggerContainer = new WebMarkupContainer(\"consoleLoggerContainer\");\n         consoleLoggerContainer.add(consoleLoggerList);\n         consoleLoggerContainer.setOutputMarkupId(true);\n@@ -212,11 +214,9 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n     private void setupSyncopeConf() {\n         confPaginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);\n \n-        List<IColumn> confColumns = new ArrayList<IColumn>();\n-\n-        confColumns.add(new PropertyColumn(new ResourceModel(\"key\"), \"key\", \"key\"));\n-\n-        confColumns.add(new PropertyColumn(new ResourceModel(\"value\"), \"value\", \"value\"));\n+        final List<IColumn<ConfigurationTO, String>> confColumns = new ArrayList<IColumn<ConfigurationTO, String>>();\n+        confColumns.add(new PropertyColumn<ConfigurationTO, String>(new ResourceModel(\"key\"), \"key\", \"key\"));\n+        confColumns.add(new PropertyColumn<ConfigurationTO, String>(new ResourceModel(\"value\"), \"value\", \"value\"));\n \n         confColumns.add(new AbstractColumn<ConfigurationTO, String>(new ResourceModel(\"actions\", \"\")) {\n \n@@ -282,8 +282,9 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final AjaxFallbackDefaultDataTable confTable = new AjaxFallbackDefaultDataTable(\"syncopeconf\", confColumns,\n-                new SyncopeConfProvider(), confPaginatorRows);\n+        final AjaxFallbackDefaultDataTable<ConfigurationTO, String> confTable =\n+                new AjaxFallbackDefaultDataTable<ConfigurationTO, String>(\n+                \"syncopeconf\", confColumns, new SyncopeConfProvider(), confPaginatorRows);\n \n         confContainer = new WebMarkupContainer(\"confContainer\");\n         confContainer.add(confTable);\n@@ -380,12 +381,17 @@ protected void onUpdate(final AjaxRequestTarget target) {\n     private void setupNotification() {\n         notificationPaginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_NOTIFICATION_PAGINATOR_ROWS);\n \n-        List<IColumn> notificationCols = new ArrayList<IColumn>();\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"id\"), \"id\", \"id\"));\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"events\"), \"events\", \"events\"));\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"subject\"), \"subject\", \"subject\"));\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"template\"), \"template\", \"template\"));\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"traceLevel\"), \"traceLevel\", \"traceLevel\"));\n+        final List<IColumn<NotificationTO, String>> notificationCols = new ArrayList<IColumn<NotificationTO, String>>();\n+        notificationCols.add(new PropertyColumn<NotificationTO, String>(\n+                new ResourceModel(\"id\"), \"id\", \"id\"));\n+        notificationCols.add(new CollectionPropertyColumn<NotificationTO>(\n+                new ResourceModel(\"events\"), \"events\", \"events\"));\n+        notificationCols.add(new PropertyColumn<NotificationTO, String>(\n+                new ResourceModel(\"subject\"), \"subject\", \"subject\"));\n+        notificationCols.add(new PropertyColumn<NotificationTO, String>(\n+                new ResourceModel(\"template\"), \"template\", \"template\"));\n+        notificationCols.add(new PropertyColumn<NotificationTO, String>(\n+                new ResourceModel(\"traceLevel\"), \"traceLevel\", \"traceLevel\"));\n \n         notificationCols.add(new AbstractColumn<NotificationTO, String>(new ResourceModel(\"actions\", \"\")) {\n \n@@ -451,8 +457,9 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final AjaxFallbackDefaultDataTable notificationTable = new AjaxFallbackDefaultDataTable(\"notificationTable\",\n-                notificationCols, new NotificationProvider(), notificationPaginatorRows);\n+        final AjaxFallbackDefaultDataTable<NotificationTO, String> notificationTable =\n+                new AjaxFallbackDefaultDataTable<NotificationTO, String>(\n+                \"notificationTable\", notificationCols, new NotificationProvider(), notificationPaginatorRows);\n \n         notificationContainer = new WebMarkupContainer(\"notificationContainer\");\n         notificationContainer.add(notificationTable);"},{"sha":"fe607fb2f5e9d97803e4d3383e57a7dceb4d6a8b","filename":"console/src/main/java/org/apache/syncope/console/pages/NotificationModalPage.java","status":"modified","additions":35,"deletions":11,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -23,17 +23,19 @@\n import java.util.Collections;\n import java.util.EnumSet;\n import java.util.List;\n+import org.apache.syncope.common.to.EventCategoryTO;\n import org.apache.syncope.common.to.NotificationTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.pages.panels.LoggerCategoryPanel;\n import org.apache.syncope.console.pages.panels.UserSearchPanel;\n+import org.apache.syncope.console.rest.LoggerRestClient;\n import org.apache.syncope.console.rest.NotificationRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -48,7 +50,6 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n-import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.apache.wicket.validation.validator.EmailAddressValidator;\n \n@@ -59,11 +60,14 @@ class NotificationModalPage extends BaseModalPage {\n     @SpringBean\n     private NotificationRestClient restClient;\n \n+    @SpringBean\n+    private LoggerRestClient loggerRestClient;\n+\n     public NotificationModalPage(final PageReference pageRef, final ModalWindow window,\n             final NotificationTO notificationTO, final boolean createFlag) {\n \n-        Form form = new Form(FORM, new CompoundPropertyModel(notificationTO));\n-        form.setModel(new CompoundPropertyModel(notificationTO));\n+        final Form<NotificationTO> form =\n+                new Form<NotificationTO>(FORM, new CompoundPropertyModel<NotificationTO>(notificationTO));\n \n         final AjaxTextFieldPanel sender = new AjaxTextFieldPanel(\"sender\", getString(\"sender\"),\n                 new PropertyModel<String>(notificationTO, \"sender\"));\n@@ -94,16 +98,16 @@ public NotificationModalPage(final PageReference pageRef, final ModalWindow wind\n         aboutContainer.setOutputMarkupId(true);\n \n         form.add(aboutContainer);\n-        \n+\n         final AjaxCheckBoxPanel checkAbout =\n                 new AjaxCheckBoxPanel(\"checkAbout\", \"checkAbout\",\n                 new Model<Boolean>(notificationTO.getAbout() == null));\n         aboutContainer.add(checkAbout);\n-        \n+\n         final UserSearchPanel about = new UserSearchPanel.Builder(\"about\").nodeCond(notificationTO.getAbout()).build();\n         aboutContainer.add(about);\n         about.setEnabled(!checkAbout.getModelObject());\n-        \n+\n         checkAbout.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n@@ -143,17 +147,31 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final AjaxPalettePanel events = new AjaxPalettePanel(\"events\", new PropertyModel(notificationTO, \"events\"),\n-                new ListModel<String>(restClient.getEvents()));\n-        form.add(events);\n+        form.add(new LoggerCategoryPanel(\n+                \"eventSelection\",\n+                loggerRestClient.listEvents(),\n+                new PropertyModel<List<String>>(notificationTO, \"events\")) {\n+\n+            private static final long serialVersionUID = 6429053774964787735L;\n+\n+            @Override\n+            protected String[] getListRoles() {\n+                return new String[] {};\n+            }\n+\n+            @Override\n+            protected String[] getChangeRoles() {\n+                return new String[] {};\n+            }\n+        });\n \n         final WebMarkupContainer recipientsContainer = new WebMarkupContainer(\"recipientsContainer\");\n         recipientsContainer.setOutputMarkupId(true);\n \n         form.add(recipientsContainer);\n \n         final AjaxCheckBoxPanel selfAsRecipient = new AjaxCheckBoxPanel(\"selfAsRecipient\",\n-                getString(\"selfAsRecipient\"), new PropertyModel(notificationTO, \"selfAsRecipient\"));\n+                getString(\"selfAsRecipient\"), new PropertyModel<Boolean>(notificationTO, \"selfAsRecipient\"));\n         form.add(selfAsRecipient);\n \n         if (createFlag) {\n@@ -292,4 +310,10 @@ private List<String> getSchemaNames(final IntMappingType type) {\n \n         return result;\n     }\n+\n+    private EventCategoryTO getEventCategoryTO(final List<String> events) {\n+        final EventCategoryTO res = new EventCategoryTO();\n+\n+        return res;\n+    }\n }"},{"sha":"afcf930935edcc35fb3afe222e0f2ba8363185da","filename":"console/src/main/java/org/apache/syncope/console/pages/Reports.java","status":"modified","additions":87,"deletions":183,"changes":270,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -24,17 +24,17 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n+import org.apache.syncope.common.to.EventCategoryTO;\n import org.apache.syncope.common.to.ReportTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditLoggerName;\n+import org.apache.syncope.common.util.LoggerEventUtils;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.console.markup.html.list.AltListView;\n-import org.apache.syncope.console.pages.panels.JQueryUITabbedPanel;\n+import org.apache.syncope.console.pages.panels.LoggerCategoryPanel;\n+import org.apache.syncope.console.pages.panels.SelectedEventsPanel;\n import org.apache.syncope.console.rest.LoggerRestClient;\n import org.apache.syncope.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n@@ -44,36 +44,28 @@\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.form.AjaxFormChoiceComponentUpdatingBehavior;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n-import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n-import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.markup.html.form.Check;\n-import org.apache.wicket.markup.html.form.CheckGroup;\n-import org.apache.wicket.markup.html.form.CheckGroupSelector;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n-import org.apache.wicket.markup.html.list.ListItem;\n-import org.apache.wicket.markup.html.list.ListView;\n-import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.AbstractReadOnlyModel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.springframework.util.StringUtils;\n+import org.springframework.util.CollectionUtils;\n \n /**\n  * Auditing and Reporting.\n@@ -222,8 +214,8 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final AjaxFallbackDefaultDataTable reportTable = new AjaxFallbackDefaultDataTable(\"reportTable\", columns,\n-                new ReportProvider(), paginatorRows);\n+        final AjaxFallbackDefaultDataTable reportTable =\n+                new AjaxFallbackDefaultDataTable(\"reportTable\", columns, new ReportProvider(), paginatorRows);\n \n         reportContainer.add(reportTable);\n         reportContainer.setOutputMarkupId(true);\n@@ -286,27 +278,90 @@ private void setupAudit() {\n         auditContainer.setOutputMarkupId(true);\n         add(auditContainer);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(auditContainer, RENDER, xmlRolesReader.getAllAllowedRoles(\"Audit\",\n-                \"list\"));\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                auditContainer, RENDER, xmlRolesReader.getAllAllowedRoles(\"Audit\", \"list\"));\n \n-        Form form = new Form(\"auditForm\");\n+        final Form form = new Form(\"auditForm\");\n         auditContainer.add(form);\n \n-        List<ITab> tabs = new ArrayList<ITab>();\n+        final List<String> events = new ArrayList<String>();\n \n-        for (final Category category : Category.values()) {\n-            tabs.add(new AbstractTab(new Model<String>(StringUtils.capitalize(category.name()))) {\n+        final List<AuditLoggerName> audits = loggerRestClient.listAudits();\n+        for (AuditLoggerName audit : audits) {\n+            events.add(LoggerEventUtils.buildEvent(\n+                    audit.getType(),\n+                    audit.getCategory(),\n+                    audit.getSubcategory(),\n+                    audit.getEvent(),\n+                    audit.getResult()));\n+        }\n \n-                private static final long serialVersionUID = -5861786415855103549L;\n+        final ListModel<String> model = new ListModel<String>(new ArrayList<String>(events));\n \n-                @Override\n-                public WebMarkupContainer getPanel(final String panelId) {\n-                    return new AuditCategoryPanel(panelId, category);\n-                }\n-            });\n-        }\n+        form.add(new LoggerCategoryPanel(\"events\", loggerRestClient.listEvents(), model) {\n+\n+            private static final long serialVersionUID = 6113164334533550277L;\n+\n+            @Override\n+            protected String[] getListRoles() {\n+                return new String[] {\n+                    xmlRolesReader.getAllAllowedRoles(\"Audit\", \"list\")\n+                };\n+            }\n+\n+            @Override\n+            protected String[] getChangeRoles() {\n+                return new String[] {\n+                    xmlRolesReader.getAllAllowedRoles(\"Audit\", \"enable\"),\n+                    xmlRolesReader.getAllAllowedRoles(\"Audit\", \"disable\")\n+                };\n+            }\n+\n+            @Override\n+            public void onEventAction(final IEvent<?> event) {\n+                if (event.getPayload() instanceof SelectedEventsPanel.EventSelectionChanged) {\n+\n+                    final SelectedEventsPanel.EventSelectionChanged eventSelectionChanged =\n+                            (SelectedEventsPanel.EventSelectionChanged) event.getPayload();\n+\n+                    for (String toBeRemoved : eventSelectionChanged.getToBeRemoved()) {\n+                        if (events.contains(toBeRemoved)) {\n+                            final Map.Entry<EventCategoryTO, Result> eventCategory =\n+                                    LoggerEventUtils.parseEventCategory(toBeRemoved);\n+\n+                            final AuditLoggerName auditLoggerName = new AuditLoggerName(\n+                                    eventCategory.getKey().getType(),\n+                                    eventCategory.getKey().getCategory(),\n+                                    eventCategory.getKey().getSubcategory(),\n+                                    CollectionUtils.isEmpty(eventCategory.getKey().getEvents())\n+                                    ? null : eventCategory.getKey().getEvents().iterator().next(),\n+                                    eventCategory.getValue());\n+\n+                            loggerRestClient.disableAudit(auditLoggerName);\n+                            events.remove(toBeRemoved);\n+                        }\n+                    }\n \n-        form.add(new JQueryUITabbedPanel(\"categoriesTabs\", tabs));\n+                    for (String toBeAdded : eventSelectionChanged.getToBeAdded()) {\n+                        if (!events.contains(toBeAdded)) {\n+                            final Map.Entry<EventCategoryTO, Result> eventCategory =\n+                                    LoggerEventUtils.parseEventCategory(toBeAdded);\n+\n+                            final AuditLoggerName auditLoggerName = new AuditLoggerName(\n+                                    eventCategory.getKey().getType(),\n+                                    eventCategory.getKey().getCategory(),\n+                                    eventCategory.getKey().getSubcategory(),\n+                                    CollectionUtils.isEmpty(eventCategory.getKey().getEvents())\n+                                    ? null : eventCategory.getKey().getEvents().iterator().next(),\n+                                    eventCategory.getValue());\n+\n+                            loggerRestClient.enableAudit(auditLoggerName);\n+                            events.add(toBeAdded);\n+                        }\n+                    }\n+                }\n+            }\n+        });\n     }\n \n     private class ReportProvider extends SortableDataProvider<ReportTO, String> {\n@@ -323,11 +378,8 @@ public ReportProvider() {\n \n         @Override\n         public Iterator<ReportTO> iterator(final long first, final long count) {\n-\n-            List<ReportTO> list = reportRestClient.list(((int) first / paginatorRows) + 1, paginatorRows);\n-\n+            final List<ReportTO> list = reportRestClient.list(((int) first / paginatorRows) + 1, paginatorRows);\n             Collections.sort(list, comparator);\n-\n             return list.iterator();\n         }\n \n@@ -350,152 +402,4 @@ public ReportTO getObject() {\n             };\n         }\n     }\n-\n-    private class AuditsByCategoryModel implements IModel<List<AuditLoggerName>> {\n-\n-        private static final long serialVersionUID = 605983084097505724L;\n-\n-        private final Category category;\n-\n-        private final Result result;\n-\n-        public AuditsByCategoryModel(final Category category, final Result result) {\n-            this.category = category;\n-            this.result = result;\n-        }\n-\n-        @Override\n-        public List<AuditLoggerName> getObject() {\n-            Map<Category, Set<AuditLoggerName>> audits = loggerRestClient.listAuditsByCategory();\n-\n-            List<AuditLoggerName> object = new ArrayList<AuditLoggerName>();\n-            for (Enum<?> subcategory : category.getSubCategoryElements()) {\n-                AuditLoggerName auditLoggerName = new AuditLoggerName(category, subcategory, result);\n-                if (audits.containsKey(category) && audits.get(category).contains(auditLoggerName)) {\n-                    object.add(auditLoggerName);\n-                }\n-            }\n-\n-            return object;\n-        }\n-\n-        @Override\n-        public void setObject(final List<AuditLoggerName> object) {\n-            for (Enum<?> subcategory : category.getSubCategoryElements()) {\n-                AuditLoggerName auditLoggerName = new AuditLoggerName(category, subcategory, result);\n-\n-                if (object.contains(auditLoggerName)) {\n-                    loggerRestClient.enableAudit(auditLoggerName);\n-                } else {\n-                    loggerRestClient.disableAudit(auditLoggerName);\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public void detach() {\n-            // Not needed.\n-        }\n-    }\n-\n-    private class AuditCategoryPanel extends Panel {\n-\n-        private static final long serialVersionUID = 1076251735476895253L;\n-\n-        public AuditCategoryPanel(final String id, final Category category) {\n-            super(id);\n-            setOutputMarkupId(true);\n-\n-            final CheckGroup<AuditLoggerName> successGroup = new CheckGroup<AuditLoggerName>(\"successGroup\",\n-                    new AuditsByCategoryModel(category, Result.success));\n-            successGroup.add(new AjaxFormChoiceComponentUpdatingBehavior() {\n-\n-                private static final long serialVersionUID = -151291731388673682L;\n-\n-                @Override\n-                protected void onUpdate(final AjaxRequestTarget target) {\n-                    // Empty method: here only to let Model.setObject() be invoked.\n-                }\n-            });\n-            add(successGroup);\n-            authorizeComponent(successGroup);\n-\n-            final CheckGroupSelector successSelector = new CheckGroupSelector(\"successSelector\", successGroup);\n-            add(successSelector);\n-            authorizeComponent(successSelector);\n-\n-            final CheckGroup<AuditLoggerName> failureGroup = new CheckGroup<AuditLoggerName>(\"failureGroup\",\n-                    new AuditsByCategoryModel(category, Result.failure));\n-            failureGroup.add(new AjaxFormChoiceComponentUpdatingBehavior() {\n-\n-                private static final long serialVersionUID = -151291731388673682L;\n-\n-                @Override\n-                protected void onUpdate(final AjaxRequestTarget target) {\n-                    // Empty method: here only to let Model.setObject() be invoked.\n-                }\n-            });\n-            add(failureGroup);\n-            authorizeComponent(failureGroup);\n-\n-            final CheckGroupSelector failureSelector = new CheckGroupSelector(\"failureSelector\", failureGroup);\n-            add(failureSelector);\n-            authorizeComponent(failureSelector);\n-\n-            ListView<Enum<?>> categoryView =\n-                    new AltListView<Enum<?>>(\"categoryView\", new ArrayList(category.getSubCategoryElements())) {\n-\n-                private static final long serialVersionUID = 4949588177564901031L;\n-\n-                @Override\n-                protected void populateItem(final ListItem<Enum<?>> item) {\n-                    final Enum<?> subcategory = item.getModelObject();\n-\n-                    item.add(new Label(\"subcategory\", subcategory.name()));\n-                }\n-            };\n-            add(categoryView);\n-\n-            ListView<Enum<?>> successView =\n-                    new AltListView<Enum<?>>(\"successView\", new ArrayList(category.getSubCategoryElements())) {\n-\n-                private static final long serialVersionUID = 4949588177564901031L;\n-\n-                @Override\n-                protected void populateItem(final ListItem<Enum<?>> item) {\n-                    final Enum<?> subcategory = item.getModelObject();\n-\n-                    final Check<AuditLoggerName> successCheck = new Check<AuditLoggerName>(\"successCheck\",\n-                            new Model<AuditLoggerName>(\n-                            new AuditLoggerName(category, subcategory, Result.success)), successGroup);\n-                    item.add(successCheck);\n-                }\n-            };\n-            successGroup.add(successView);\n-\n-            ListView<Enum<?>> failureView =\n-                    new AltListView<Enum<?>>(\"failureView\", new ArrayList(category.getSubCategoryElements())) {\n-\n-                private static final long serialVersionUID = 4949588177564901031L;\n-\n-                @Override\n-                protected void populateItem(final ListItem<Enum<?>> item) {\n-                    final Enum<?> subcategory = item.getModelObject();\n-\n-                    final Check<AuditLoggerName> failureCheck = new Check<AuditLoggerName>(\"failureCheck\",\n-                            new Model<AuditLoggerName>(\n-                            new AuditLoggerName(category, subcategory, Result.failure)), failureGroup);\n-                    item.add(failureCheck);\n-                }\n-            };\n-            failureGroup.add(failureView);\n-        }\n-    }\n-\n-    private void authorizeComponent(final Component component) {\n-        MetaDataRoleAuthorizationStrategy.authorize(component, RENDER,\n-                xmlRolesReader.getAllAllowedRoles(\"Audit\", \"enable\"));\n-        MetaDataRoleAuthorizationStrategy.authorize(component, RENDER,\n-                xmlRolesReader.getAllAllowedRoles(\"Audit\", \"disable\"));\n-    }\n }"},{"sha":"88d2eb1881b27f8d38414d788a9422f80bacb4d9","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/EventSelectionPanel.java","status":"added","additions":233,"deletions":0,"changes":233,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -0,0 +1,233 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.pages.panels;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.syncope.common.to.EventCategoryTO;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.util.LoggerEventUtils;\n+import org.apache.syncope.console.markup.html.list.AltListView;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormChoiceComponentUpdatingBehavior;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Check;\n+import org.apache.wicket.markup.html.form.CheckGroup;\n+import org.apache.wicket.markup.html.form.CheckGroupSelector;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.ResourceModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class EventSelectionPanel extends Panel {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(EventSelectionPanel.class);\n+\n+    private static final long serialVersionUID = 752233163798301002L;\n+\n+    private Set<String> selected = new HashSet<String>();\n+\n+    public EventSelectionPanel(\n+            final String id, final EventCategoryTO eventCategoryTO, final IModel<List<String>> model) {\n+        super(id);\n+        setOutputMarkupId(true);\n+\n+        final List<String> events = getEvents(eventCategoryTO);\n+\n+        // needed to avoid model reset: model have to be managed into SelectedEventsPanel\n+        selected.addAll(model.getObject());\n+\n+        final CheckGroup<String> successGroup = new CheckGroup<String>(\n+                \"successGroup\",\n+                selected);\n+\n+        successGroup.add(new AjaxFormChoiceComponentUpdatingBehavior() {\n+\n+            private static final long serialVersionUID = -151291731388673682L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+\n+                final Set<String> toBeRemoved = new HashSet<String>();\n+                final Set<String> toBeAdded = new HashSet<String>();\n+\n+                for (String event : getEvents(eventCategoryTO)) {\n+                    final String eventString = LoggerEventUtils.buildEvent(\n+                            eventCategoryTO.getType(),\n+                            eventCategoryTO.getCategory(),\n+                            eventCategoryTO.getSubcategory(),\n+                            event,\n+                            AuditElements.Result.SUCCESS);\n+\n+                    if (successGroup.getModelObject().contains(eventString)) {\n+                        toBeAdded.add(eventString);\n+                    } else {\n+                        toBeRemoved.add(eventString);\n+                    }\n+                }\n+\n+                send(EventSelectionPanel.this.getPage(), Broadcast.BREADTH,\n+                        new SelectedEventsPanel.EventSelectionChanged(target, toBeAdded, toBeRemoved));\n+            }\n+        });\n+\n+        successGroup.setVisible(!events.isEmpty());\n+        add(successGroup);\n+\n+        add(new Label(\"successLabel\", new ResourceModel(\"Success\", \"Success\"))).setVisible(!events.isEmpty());\n+\n+        final CheckGroupSelector successSelector = new CheckGroupSelector(\"successSelector\", successGroup);\n+        successSelector.setVisible(!events.isEmpty());\n+        add(successSelector);\n+\n+        final ListView<String> categoryView = new AltListView<String>(\"categoryView\", events) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                final String subcategory = item.getModelObject();\n+\n+                item.add(new Label(\"subcategory\", new ResourceModel(subcategory, subcategory)));\n+            }\n+        };\n+        add(categoryView);\n+\n+        final ListView<String> successView = new AltListView<String>(\"successView\", events) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                final String event = item.getModelObject();\n+\n+                final Check<String> successCheck = new Check<String>(\"successCheck\",\n+                        new Model<String>(LoggerEventUtils.buildEvent(\n+                        eventCategoryTO.getType(),\n+                        eventCategoryTO.getCategory(),\n+                        eventCategoryTO.getSubcategory(),\n+                        event,\n+                        AuditElements.Result.SUCCESS)),\n+                        successGroup);\n+                item.add(successCheck);\n+            }\n+        };\n+        successGroup.add(successView);\n+\n+        final CheckGroup<String> failureGroup = new CheckGroup<String>(\n+                \"failureGroup\",\n+                selected);\n+\n+        failureGroup.add(new AjaxFormChoiceComponentUpdatingBehavior() {\n+\n+            private static final long serialVersionUID = -151291731388673682L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+\n+                final Set<String> toBeRemoved = new HashSet<String>();\n+                final Set<String> toBeAdded = new HashSet<String>();\n+\n+                for (String event : getEvents(eventCategoryTO)) {\n+                    final String eventString = LoggerEventUtils.buildEvent(\n+                            eventCategoryTO.getType(),\n+                            eventCategoryTO.getCategory(),\n+                            eventCategoryTO.getSubcategory(),\n+                            event,\n+                            AuditElements.Result.FAILURE);\n+\n+                    if (failureGroup.getModelObject().contains(eventString)) {\n+                        toBeAdded.add(eventString);\n+                    } else {\n+                        toBeRemoved.add(eventString);\n+                    }\n+                }\n+\n+                send(EventSelectionPanel.this.getPage(), Broadcast.BREADTH,\n+                        new SelectedEventsPanel.EventSelectionChanged(target, toBeAdded, toBeRemoved));\n+            }\n+        });\n+\n+        failureGroup.setVisible(!events.isEmpty());\n+        add(failureGroup);\n+\n+        add(new Label(\"failureLabel\", new ResourceModel(\"Failure\", \"Failure\"))).setVisible(!events.isEmpty());\n+\n+        final CheckGroupSelector failureSelector = new CheckGroupSelector(\"failureSelector\", failureGroup);\n+        failureSelector.setVisible(!events.isEmpty());\n+        add(failureSelector);\n+\n+        final ListView<String> failureView = new AltListView<String>(\"failureView\", events) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                final String event = item.getModelObject();\n+\n+                final Check<String> failureCheck = new Check<String>(\"failureCheck\",\n+                        new Model<String>(LoggerEventUtils.buildEvent(\n+                        eventCategoryTO.getType(),\n+                        eventCategoryTO.getCategory(),\n+                        eventCategoryTO.getSubcategory(),\n+                        event,\n+                        AuditElements.Result.FAILURE)),\n+                        failureGroup);\n+                item.add(failureCheck);\n+            }\n+        };\n+        failureGroup.add(failureView);\n+    }\n+\n+    private List<String> getEvents(final EventCategoryTO eventCategoryTO) {\n+        final List<String> res;\n+\n+        res = eventCategoryTO.getEvents();\n+\n+        if (res.isEmpty()) {\n+            if ((AuditElements.EventCategoryType.PROPAGATION == eventCategoryTO.getType()\n+                    || AuditElements.EventCategoryType.SYNCHRONIZATION == eventCategoryTO.getType())\n+                    && StringUtils.isEmpty(eventCategoryTO.getCategory())) {\n+                res.add(eventCategoryTO.getType().toString());\n+            } else if (AuditElements.EventCategoryType.TASK == eventCategoryTO.getType()\n+                    && StringUtils.isNotEmpty(eventCategoryTO.getCategory())) {\n+                res.add(eventCategoryTO.getCategory());\n+            }\n+        } else {\n+            Collections.sort(res);\n+        }\n+\n+        return res;\n+    }\n+\n+    @Override\n+    public abstract void onEvent(final IEvent<?> event);\n+}"},{"sha":"61a63ff5eb19753b40574cac75b16ff1b2c451a7","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/LoggerCategoryPanel.java","status":"added","additions":316,"deletions":0,"changes":316,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FLoggerCategoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FLoggerCategoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FLoggerCategoryPanel.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -0,0 +1,316 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.pages.panels;\n+\n+import static org.apache.wicket.Component.RENDER;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.syncope.common.to.EventCategoryTO;\n+import org.apache.syncope.common.types.AuditElements.EventCategoryType;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class LoggerCategoryPanel extends Panel {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(LoggerCategoryPanel.class);\n+\n+    private static final long serialVersionUID = 6429053774964787734L;\n+\n+    private final List<EventCategoryTO> eventCategoryTOs;\n+\n+    private final EventCategoryTO eventCategoryTO = new EventCategoryTO();\n+\n+    private final WebMarkupContainer categoryContainer;\n+\n+    private final WebMarkupContainer eventsContainer;\n+\n+    private final SelectedEventsPanel selectedEventsPanel;\n+\n+    private final AjaxDropDownChoicePanel<EventCategoryType> type;\n+\n+    private final AjaxDropDownChoicePanel<String> category;\n+\n+    private final AjaxDropDownChoicePanel<String> subcategory;\n+\n+    private final IModel<List<String>> model;\n+\n+    public LoggerCategoryPanel(\n+            final String id,\n+            final List<EventCategoryTO> eventCategoryTOs,\n+            final IModel<List<String>> model) {\n+        super(id);\n+\n+        this.model = model;\n+        selectedEventsPanel = new SelectedEventsPanel(\"selectedEventsPanel\", model);\n+        add(selectedEventsPanel);\n+\n+        this.eventCategoryTOs = eventCategoryTOs;\n+\n+        categoryContainer = new WebMarkupContainer(\"categoryContainer\");\n+        categoryContainer.setOutputMarkupId(true);\n+        add(categoryContainer);\n+\n+        eventsContainer = new WebMarkupContainer(\"eventsContainer\");\n+        eventsContainer.setOutputMarkupId(true);\n+        add(eventsContainer);\n+\n+        authorizeList();\n+        authorizeChanges();\n+\n+        categoryContainer.add(new Label(\"typeLabel\", new ResourceModel(\"type\", \"type\")));\n+\n+        type = new AjaxDropDownChoicePanel<EventCategoryType>(\n+                \"type\",\n+                \"type\",\n+                new PropertyModel<EventCategoryType>(eventCategoryTO, \"type\"),\n+                false);\n+        type.setChoices(Arrays.asList(EventCategoryType.values()));\n+        type.setStyleSheet(\"ui-widget-content ui-corner-all\");\n+        type.setChoiceRenderer(new IChoiceRenderer<EventCategoryType>() {\n+\n+            private static final long serialVersionUID = 2317134950949778735L;\n+\n+            @Override\n+            public String getDisplayValue(final EventCategoryType eventCategoryType) {\n+                return eventCategoryType.name();\n+            }\n+\n+            @Override\n+            public String getIdValue(final EventCategoryType eventCategoryType, final int i) {\n+                return eventCategoryType.name();\n+            }\n+        });\n+        categoryContainer.add(type);\n+\n+        type.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                send(LoggerCategoryPanel.this, Broadcast.EXACT, new ChangeCategoryEvent(target, type));\n+            }\n+        });\n+\n+        categoryContainer.add(new Label(\"categoryLabel\", new ResourceModel(\"category\", \"category\")));\n+\n+        category = new AjaxDropDownChoicePanel<String>(\n+                \"category\",\n+                \"category\",\n+                new PropertyModel<String>(eventCategoryTO, \"category\"),\n+                false);\n+        category.setChoices(filter(eventCategoryTOs, type.getModelObject()));\n+        category.setStyleSheet(\"ui-widget-content ui-corner-all\");\n+        categoryContainer.add(category);\n+\n+        category.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306811L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                send(LoggerCategoryPanel.this, Broadcast.EXACT, new ChangeCategoryEvent(target, category));\n+            }\n+        });\n+\n+        categoryContainer.add(new Label(\"subcategoryLabel\", new ResourceModel(\"subcategory\", \"subcategory\")));\n+\n+        subcategory = new AjaxDropDownChoicePanel<String>(\n+                \"subcategory\",\n+                \"subcategory\",\n+                new PropertyModel<String>(eventCategoryTO, \"subcategory\"),\n+                false);\n+        subcategory.setChoices(filter(eventCategoryTOs, type.getModelObject(), category.getModelObject()));\n+        subcategory.setStyleSheet(\"ui-widget-content ui-corner-all\");\n+        categoryContainer.add(subcategory);\n+\n+        subcategory.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306812L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                send(LoggerCategoryPanel.this, Broadcast.EXACT, new ChangeCategoryEvent(target, subcategory));\n+            }\n+        });\n+\n+        eventsContainer.add(new EventSelectionPanel(\"eventsPanel\", eventCategoryTO, model) {\n+\n+            private static final long serialVersionUID = 3513194801190026082L;\n+\n+            @Override\n+            public void onEvent(final IEvent<?> event) {\n+                onEventAction(event);\n+            }\n+        });\n+    }\n+\n+    private List<String> filter(\n+            final List<EventCategoryTO> eventCategoryTOs, final EventCategoryType type) {\n+        final Set<String> res = new HashSet<String>();\n+\n+        for (EventCategoryTO eventCategory : eventCategoryTOs) {\n+            if (type == eventCategory.getType() && StringUtils.isNotEmpty(eventCategory.getCategory())) {\n+                res.add(eventCategory.getCategory());\n+            }\n+        }\n+\n+        final List<String> filtered = new ArrayList<String>(res);\n+        Collections.sort(filtered);\n+        return filtered;\n+    }\n+\n+    private List<String> filter(\n+            final List<EventCategoryTO> eventCategoryTOs, final EventCategoryType type, final String category) {\n+        final Set<String> res = new HashSet<String>();\n+\n+        for (EventCategoryTO eventCategory : eventCategoryTOs) {\n+            if (type == eventCategory.getType() && StringUtils.equals(category, eventCategory.getCategory())\n+                    && StringUtils.isNotEmpty(eventCategory.getSubcategory())) {\n+                res.add(eventCategory.getSubcategory());\n+            }\n+        }\n+\n+        final List<String> filtered = new ArrayList<String>(res);\n+        Collections.sort(filtered);\n+        return filtered;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof ChangeCategoryEvent) {\n+            // update objects ....\n+            eventCategoryTO.getEvents().clear();\n+\n+            final ChangeCategoryEvent change = (ChangeCategoryEvent) event.getPayload();\n+\n+            final Panel changedPanel = change.getChangedPanel();\n+            if (\"type\".equals(changedPanel.getId())) {\n+                category.setChoices(filter(eventCategoryTOs, type.getModelObject()));\n+                subcategory.setChoices(Collections.<String>emptyList());\n+                eventCategoryTO.setType(type.getModelObject());\n+                eventCategoryTO.setCategory(null);\n+                eventCategoryTO.setSubcategory(null);\n+                change.getTarget().add(categoryContainer);\n+            } else if (\"category\".equals(changedPanel.getId())) {\n+                subcategory.setChoices(filter(eventCategoryTOs, type.getModelObject(), category.getModelObject()));\n+                eventCategoryTO.setCategory(category.getModelObject());\n+                eventCategoryTO.setSubcategory(null);\n+                change.getTarget().add(categoryContainer);\n+            } else {\n+                eventCategoryTO.setSubcategory(subcategory.getModelObject());\n+            }\n+\n+            setEvents();\n+\n+            eventsContainer.addOrReplace(new EventSelectionPanel(\"eventsPanel\", eventCategoryTO, model) {\n+\n+                private static final long serialVersionUID = 3513194801190026082L;\n+\n+                @Override\n+                public void onEvent(final IEvent<?> event) {\n+                    onEventAction(event);\n+                }\n+            });\n+            change.getTarget().add(eventsContainer);\n+        }\n+    }\n+\n+    private void setEvents() {\n+        final Iterator<EventCategoryTO> itor = eventCategoryTOs.iterator();\n+        while (itor.hasNext() && eventCategoryTO.getEvents().isEmpty()) {\n+            final EventCategoryTO eventCategory = itor.next();\n+            if (eventCategory.getType() == eventCategoryTO.getType()\n+                    && StringUtils.equals(eventCategory.getCategory(), eventCategoryTO.getCategory())\n+                    && StringUtils.equals(eventCategory.getSubcategory(), eventCategoryTO.getSubcategory())) {\n+                eventCategoryTO.getEvents().addAll(eventCategory.getEvents());\n+            }\n+        }\n+    }\n+\n+    private class ChangeCategoryEvent {\n+\n+        private final AjaxRequestTarget target;\n+\n+        private final Panel changedPanel;\n+\n+        public ChangeCategoryEvent(final AjaxRequestTarget target, final Panel changedPanel) {\n+            this.target = target;\n+            this.changedPanel = changedPanel;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n+        public Panel getChangedPanel() {\n+            return changedPanel;\n+        }\n+    }\n+\n+    /**\n+     * To be extended in order to add actions on events.\n+     *\n+     * @param event event.\n+     */\n+    protected void onEventAction(final IEvent<?> event) {\n+        // nothing by default\n+    }\n+\n+    private void authorizeList() {\n+        for (String role : getListRoles()) {\n+            MetaDataRoleAuthorizationStrategy.authorize(selectedEventsPanel, RENDER, role);\n+        }\n+    }\n+\n+    private void authorizeChanges() {\n+        for (String role : getChangeRoles()) {\n+            MetaDataRoleAuthorizationStrategy.authorize(categoryContainer, RENDER, role);\n+            MetaDataRoleAuthorizationStrategy.authorize(eventsContainer, RENDER, role);\n+        }\n+    }\n+\n+    protected abstract String[] getListRoles();\n+\n+    protected abstract String[] getChangeRoles();\n+}"},{"sha":"e2ba61400da41ceb8d97a2876d2252924cb9173b","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SelectedEventsPanel.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.console.pages.panels;\n+\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.ResourceModel;\n+\n+public class SelectedEventsPanel extends Panel {\n+\n+    private static final long serialVersionUID = -4832450230348213500L;\n+\n+    private final WebMarkupContainer selectionContainer;\n+\n+    private ListView<String> selectedEvents;\n+\n+    private final IModel<List<String>> model;\n+\n+    public SelectedEventsPanel(final String id, final IModel<List<String>> model) {\n+        super(id);\n+\n+        this.model = model;\n+\n+        selectionContainer = new WebMarkupContainer(\"selectionContainer\");\n+        selectionContainer.setOutputMarkupId(true);\n+        add(selectionContainer);\n+\n+        selectedEvents = new ListView<String>(\"selectedEvents\", model.getObject()) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                item.add(new Label(\"selectedEvent\", new ResourceModel(item.getModelObject(), item.getModelObject())));\n+            }\n+        };\n+\n+        selectionContainer.add(selectedEvents);\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof EventSelectionChanged) {\n+            final EventSelectionChanged eventSelectionChanged = (EventSelectionChanged) event.getPayload();\n+\n+            for (String toBeRemoved : eventSelectionChanged.getToBeRemoved()) {\n+                model.getObject().remove(toBeRemoved);\n+            }\n+\n+            for (String toBeAdded : eventSelectionChanged.getToBeAdded()) {\n+                if (!model.getObject().contains(toBeAdded)) {\n+                    model.getObject().add(toBeAdded);\n+                }\n+            }\n+\n+            eventSelectionChanged.getTarget().add(selectionContainer);\n+        }\n+    }\n+\n+    public static class EventSelectionChanged {\n+\n+        private final AjaxRequestTarget target;\n+\n+        private final Set<String> toBeRemoved;\n+\n+        private final Set<String> toBeAdded;\n+\n+        public EventSelectionChanged(\n+                final AjaxRequestTarget target,\n+                final Set<String> toBeAdded,\n+                final Set<String> toBeRemoved) {\n+            this.target = target;\n+            this.toBeAdded = toBeAdded;\n+            this.toBeRemoved = toBeRemoved;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n+        public Set<String> getToBeRemoved() {\n+            return toBeRemoved;\n+        }\n+\n+        public Set<String> getToBeAdded() {\n+            return toBeAdded;\n+        }\n+    }\n+}"},{"sha":"4c183f7560be9d06c8a8ac56739daa4ff7a8d4c3","filename":"console/src/main/java/org/apache/syncope/console/rest/LoggerRestClient.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,16 +18,16 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import java.util.EnumMap;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n import org.apache.syncope.common.services.LoggerService;\n+import org.apache.syncope.common.to.EventCategoryTO;\n import org.apache.syncope.common.to.LoggerTO;\n-import org.apache.syncope.common.types.AuditElements;\n-import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditLoggerName;\n import org.apache.syncope.common.types.LoggerType;\n import org.apache.syncope.common.types.SyncopeLoggerLevel;\n@@ -44,13 +44,11 @@ public List<LoggerTO> listLogs() {\n     }\n \n     public List<AuditLoggerName> listAudits() {\n-        List<LoggerTO> logger =  getService(LoggerService.class).list(LoggerType.AUDIT);\n-\n-        return CollectionWrapper.wrapLogger(logger);\n+        return CollectionWrapper.wrapLogger(getService(LoggerService.class).list(LoggerType.AUDIT));\n     }\n \n-    public Map<AuditElements.Category, Set<AuditLoggerName>> listAuditsByCategory() {\n-        Map<Category, Set<AuditLoggerName>> result = new EnumMap<Category, Set<AuditLoggerName>>(Category.class);\n+    public Map<String, Set<AuditLoggerName>> listAuditsByCategory() {\n+        Map<String, Set<AuditLoggerName>> result = new HashMap<String, Set<AuditLoggerName>>();\n         for (AuditLoggerName auditLoggerName : listAudits()) {\n             if (!result.containsKey(auditLoggerName.getCategory())) {\n                 result.put(auditLoggerName.getCategory(), new HashSet<AuditLoggerName>());\n@@ -84,4 +82,12 @@ public void deleteLog(final String name) {\n     public void disableAudit(final AuditLoggerName auditLoggerName) {\n         getService(LoggerService.class).delete(LoggerType.AUDIT, auditLoggerName.toLoggerName());\n     }\n+\n+    public List<EventCategoryTO> listEvents() {\n+        try {\n+            return getService(LoggerService.class).events();\n+        } catch (Exception e) {\n+            return Collections.<EventCategoryTO>emptyList();\n+        }\n+    }\n }"},{"sha":"5e9d58f79b1a4a554587eaeeafe379fbf09def10","filename":"console/src/main/java/org/apache/syncope/console/wicket/extensions/markup/html/repeater/data/table/CollectionPanel.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table;\n+\n+import java.util.List;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.ResourceModel;\n+\n+public class CollectionPanel extends Panel {\n+\n+    private static final long serialVersionUID = -4042497356836230377L;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public CollectionPanel(final String id, final List values) {\n+        super(id);\n+\n+        add(new ListView(\"collection\", values) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem item) {\n+                final String value = item.getModelObject() == null ? null : item.getModelObject().toString();\n+                item.add(new Label(\"item\", new ResourceModel(value, value)));\n+            }\n+        });\n+    }\n+}"},{"sha":"7b088810e9cd70236ae3b77da04695eed654d75a","filename":"console/src/main/java/org/apache/syncope/console/wicket/extensions/markup/html/repeater/data/table/CollectionPropertyColumn.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPropertyColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPropertyColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPropertyColumn.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.IModel;\n+\n+public class CollectionPropertyColumn<T> extends PropertyColumn<T, String> {\n+\n+    private static final long serialVersionUID = 8077865338230121496L;\n+\n+    public CollectionPropertyColumn(\n+            final IModel<String> displayModel,\n+            final String sortProperty,\n+            final String propertyExpression) {\n+        super(displayModel, sortProperty, propertyExpression);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void populateItem(\n+            final Item<ICellPopulator<T>> cellItem, final String componentId, final IModel<T> rowModel) {\n+\n+        final Object value = getDataModel(rowModel).getObject();\n+\n+        if (value instanceof Collection) {\n+            final List values = new ArrayList((Collection) value);\n+            Collections.sort(values);\n+            cellItem.add(new CollectionPanel(componentId, values));\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"70853935e2157e450b7677bd5923d84d0c2b37c3","filename":"console/src/main/resources/org/apache/syncope/console/pages/NotificationModalPage.html","status":"modified","additions":22,"deletions":14,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.html?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -17,6 +17,14 @@\n under the License.\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:head>\n+    <style>\n+      div#tabs div#events{\n+        min-width: 970px;\n+        overflow: hidden;\n+      }\n+    </style>\n+  </wicket:head>\n   <wicket:extend>\n     <div style=\"margin:10px\">\n       <p class=\"ui-widget ui-corner-all ui-widget-header\"><wicket:message key=\"title\"/></p>\n@@ -89,20 +97,20 @@\n \n           <div id=\"about\">\n             <span wicket:id=\"aboutContainer\">\n-           \t<div class=\"tablerow\" style=\"width: auto;\">\n-           \t  <div class=\"tablecolumn_field\" style=\"width: auto; padding-right: 5px;\">\n-           \t    <span wicket:id=\"checkAbout\">[checkAbout]</span>\n-           \t  </div>\n-           \t  <div class=\"tablecolumn_label\" style=\"width: auto;\">\n-           \t    <label for=\"checkAbout\"><wicket:message key=\"checkAbout\"/></label>\n-           \t  </div>\n-           \t</div>\n-               <span wicket:id=\"about\"/>\n-             </span>\n+              <div class=\"tablerow\" style=\"width: auto;\">\n+                <div class=\"tablecolumn_field\" style=\"width: auto; padding-right: 5px;\">\n+                  <span wicket:id=\"checkAbout\">[checkAbout]</span>\n+                </div>\n+                <div class=\"tablecolumn_label\" style=\"width: auto;\">\n+                  <label for=\"checkAbout\"><wicket:message key=\"checkAbout\"/></label>\n+                </div>\n+              </div>\n+              <span wicket:id=\"about\"/>\n+            </span>\n           </div>  \n \n           <div id=\"events\">\n-            <span wicket:id=\"events\"/>\n+            <span wicket:id=\"eventSelection\"/>\n           </div>\n \n           <div id=\"recipients\">\n@@ -115,11 +123,11 @@\n               </div>\n             </div>\n             <span wicket:id=\"recipientsContainer\">\n-           \t<div class=\"tablerow\" style=\"width: auto;\">\n-           \t  <div class=\"tablecolumn_field\" style=\"width: auto; padding-right: 5px;\">\n+              <div class=\"tablerow\" style=\"width: auto;\">\n+                <div class=\"tablecolumn_field\" style=\"width: auto; padding-right: 5px;\">\n                   <span wicket:id=\"checkRecipients\">[checkRecipients]</span>\n                 </div>\n-           \t  <div class=\"tablecolumn_label\" style=\"width: auto;\">\n+                <div class=\"tablecolumn_label\" style=\"width: auto;\">\n                   <label for=\"checkRecipients\"><wicket:message key=\"checkRecipients\"/></label>\n                 </div>\n               </div>"},{"sha":"64e2b2e3c6b5e5e94fb3e90d79df073cd95f27ad","filename":"console/src/main/resources/org/apache/syncope/console/pages/Reports.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.html?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -48,7 +48,7 @@\n       <div id=\"tabs-2\">\n         <span wicket:id=\"auditContainer\">\n           <form wicket:id=\"auditForm\">\n-            <div wicket:id=\"categoriesTabs\"/>\n+            <span wicket:id=\"events\">[event builder]</span>\n           </form>\n         </span>\n       </div>"},{"sha":"c86473af87de0060109c53deb7acaac1da2c76aa","filename":"console/src/main/resources/org/apache/syncope/console/pages/panels/AuditEventsPanel.html","status":"renamed","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAuditEventsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAuditEventsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAuditEventsPanel.html?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -70,15 +70,19 @@\n         </div>\n         <div style=\"display: table-cell\">\n           <div class=\"divtableheadercell\">\n-            <div class=\"divtableheaderlabel\">Success</div>\n+            <div class=\"divtableheaderlabel\">\n+              <label wicket:id=\"successLabel\"/>\n+            </div>\n             <div style=\"display: table-cell\">\n               <input type=\"checkbox\" wicket:id=\"successSelector\" style=\"margin-top: 0px;margin-bottom: 0px;\"/>\n             </div>\n           </div>\n         </div>\n         <div style=\"display: table-cell\">\n           <div class=\"divtableheadercell\">\n-            <div class=\"divtableheaderlabel\">Failure</div>\n+            <div class=\"divtableheaderlabel\">\n+              <label wicket:id=\"failureLabel\"/>\n+            </div>\n             <div style=\"display: table-cell\">\n               <input type=\"checkbox\" wicket:id=\"failureSelector\" style=\"margin-top: 0px;margin-bottom: 0px;\"/>\n             </div>","previous_filename":"console/src/main/resources/org/apache/syncope/console/pages/Reports$AuditCategoryPanel.html"},{"sha":"ac7c9fc72ffaec12d5a0254e9c46fe65f2625d49","filename":"console/src/main/resources/org/apache/syncope/console/pages/panels/EventSelectionPanel.html","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.html?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -0,0 +1,125 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:head>\n+    <style>\n+      .container {\n+        display: block;\n+        width: 100%;\n+      }\n+\n+      .label {\n+        font-size: 12px;\n+        vertical-align: middle;\n+        font-family: Verdana,Tahoma,sans-serif;\n+        display: table-cell;\n+        width: 300px;\n+        height: 20px;\n+      }\n+\n+      .divtableheaderlabel {\n+        font-weight: bold;\n+        float: left;\n+        margin-left: 5px;\n+        display: table-cell;\n+        width: 70px;\n+      }\n+\n+      .divtableheadercell {\n+        display: inline-table;\n+        vertical-align: top;\n+        text-align: right;\n+        width: 105px;\n+        height: 20px;\n+      }\n+\n+      .divtablecheckcolumn {\n+        display: table-cell;\n+        vertical-align: top;\n+        text-align: right;\n+        width: 105px;\n+      }\n+\n+      .divtablecheck {\n+        width: 105px;\n+        height: 20px;\n+      }\n+\n+    </style>\n+  </wicket:head>\n+  <wicket:panel>\n+    <div class=\"eventSelectionWidzard\">\n+      <div class=\"container\">\n+        <div style=\"display:inline-table;\">\n+          <div class=\"label\">\n+            &nbsp;\n+          </div>\n+          <div style=\"display: table-cell\">\n+            <div class=\"divtableheadercell\">\n+              <div class=\"divtableheaderlabel\">\n+                <label wicket:id=\"successLabel\"/>\n+              </div>\n+              <div style=\"display: table-cell\">\n+                <input type=\"checkbox\" wicket:id=\"successSelector\" style=\"margin-top: 0px;margin-bottom: 0px;\"/>\n+              </div>\n+            </div>\n+          </div>\n+          <div style=\"display: table-cell\">\n+            <div class=\"divtableheadercell\">\n+              <div class=\"divtableheaderlabel\">\n+                <label wicket:id=\"failureLabel\"/>\n+              </div>\n+              <div style=\"display: table-cell\">\n+                <input type=\"checkbox\" wicket:id=\"failureSelector\" style=\"margin-top: 0px;margin-bottom: 0px;\"/>\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      </div>\n+\n+      <div class=\"container\">\n+        <div class=\"label\">\n+          <div id=\"divtablerow-label\" wicket:id=\"categoryView\">\n+            <div class=\"label\">\n+              <span wicket:id=\"subcategory\">[subcategory]</span>\n+            </div>\n+          </div>\n+        </div>\n+\n+        <div id=\"divtablerow-success\" class=\"divtablecheckcolumn\">\n+          <span wicket:id=\"successGroup\">\n+            <div wicket:id=\"successView\" class=\"divtablecheck\">\n+              <div class=\"divtableheaderlabel\">&nbsp;</div>\n+              <input type=\"checkbox\" wicket:id=\"successCheck\"/>\n+            </div>\n+          </span>\n+        </div>\n+\n+        <div id=\"divtablerow-failure\" class=\"divtablecheckcolumn\">\n+          <span wicket:id=\"failureGroup\">\n+            <div wicket:id=\"failureView\" class=\"divtablecheck\">\n+              <div class=\"divtableheaderlabel\">&nbsp;</div>\n+              <input type=\"checkbox\" wicket:id=\"failureCheck\"/>\n+            </div>\n+          </span>\n+        </div>\n+      </div>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"7ef4e07c1027197a82540943e9bdc10cd2c78e09","filename":"console/src/main/resources/org/apache/syncope/console/pages/panels/LoggerCategoryPanel.html","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FLoggerCategoryPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FLoggerCategoryPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FLoggerCategoryPanel.html?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -0,0 +1,100 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:head>\n+    <style>\n+\n+      .events{\n+        display: table-row;\n+        width: 990px;\n+      }\n+\n+      .selectedEvents{\n+        border: 1px solid #DDDDDD;\n+        display: inline-block;\n+        height: 100px;\n+        margin: 10px 10px 0 10px;\n+        min-width: 585px;\n+        width: 585px;\n+        overflow-y: auto;\n+      }\n+\n+      .eventSelection{\n+        display: inline-table;\n+        float: right;\n+        width: 380px;\n+        min-width: 380px;\n+      }\n+\n+      .eventSelection div#eventElement{\n+        display: table-row;\n+        width:100%;\n+      }\n+      .eventSelection div#eventElement div#label{\n+        display: table-cell;\n+      }\n+\n+      .eventSelection div#eventElement div#value{\n+        display: table-cell;\n+        padding: 0 0 0 10px;\n+      }\n+    </style>\n+  </wicket:head>\n+  <wicket:panel>\n+\n+    <div class=\"events\">\n+      <div class=\"selectedEvents\">\n+        <span wicket:id=\"selectedEventsPanel\">[selected events panel]</span>\n+      </div>\n+\n+      <div class=\"eventSelection\">\n+        <div wicket:id=\"categoryContainer\" style=\"display: block; margin: 10px 0px 20px 0px\">\n+          <div id=\"eventElement\">\n+            <div id=\"label\">\n+              <label wicket:id=\"typeLabel\"/>\n+            </div>\n+            <div id=\"value\">\n+              <span wicket:id=\"type\">[type]</span>\n+            </div>\n+          </div>\n+          <div id=\"eventElement\">\n+            <div id=\"label\">\n+              <label wicket:id=\"categoryLabel\"/>\n+            </div>\n+            <div id=\"value\">\n+              <span wicket:id=\"category\">[category]</span>\n+            </div>\n+          </div>\n+          <div id=\"eventElement\">\n+            <div id=\"label\">\n+              <label wicket:id=\"subcategoryLabel\"/>\n+            </div>\n+            <div id=\"value\">\n+              <span wicket:id=\"subcategory\">[sub-category]</span>\n+            </div>\n+          </div>\n+        </div>\n+        <div wicket:id=\"eventsContainer\" style=\"display: block\">\n+          <span wicket:id=\"eventsPanel\">[events panel]</span>\n+        </div>\n+      </div>\n+    </div>\n+\n+  </wicket:panel>\n+</html>"},{"sha":"08f5f226e73c60fbbf7d2f43632e77153387cd05","filename":"console/src/main/resources/org/apache/syncope/console/pages/panels/SelectedEventsPanel.html","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.html?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -0,0 +1,32 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:head>\n+    <style>\n+\n+    </style>\n+  </wicket:head>\n+  <wicket:panel>\n+    <div wicket:id=\"selectionContainer\">\n+      <div wicket:id=\"selectedEvents\">\n+        <label wicket:id=\"selectedEvent\"/>\n+      </div>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"56220a9dfed5f255f23d86c4ebd6ad0d01e6fd8c","filename":"console/src/main/resources/org/apache/syncope/console/wicket/extensions/markup/html/repeater/data/table/CollectionPanel.html","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.html?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -0,0 +1,25 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div id=\"collection\" wicket:id=\"collection\">\n+      <span id=\"item\" wicket:id=\"item\"/>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"21e8adcf45a19973b7b342e6a99e1bd1f897e8f8","filename":"console/src/test/java/org/apache/syncope/console/ConfigurationTestITCase.java","status":"modified","additions":33,"deletions":5,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.console;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n \n public class ConfigurationTestITCase extends AbstractTest {\n@@ -156,10 +155,39 @@ public void createNotification() {\n \n         selenium.click(\"//div[2]/form/div[3]/ul/li[3]/a/span\");\n \n-        selenium.click(\"//div[2]/form/div[3]/div[3]/span/span/div/div[2]/div/select/option\");\n-\n-        selenium.click(\"//div[2]/form/div[3]/div[3]/span/span/div/div[2]/div[2]/div/a\");\n-\n+        selenium.waitForCondition(\"selenium.isElementPresent(\\\"\"\n+                + \"//select[@name='eventSelection:categoryContainer:type:dropDownChoiceField']\"\n+                + \"/option[text()='PROPAGATION']\\\");\",\n+                \"30000\");\n+        \n+        selenium.select(\n+                \"//select[@name='eventSelection:categoryContainer:type:dropDownChoiceField']\",\n+                \"label=PROPAGATION\");\n+\n+        selenium.waitForCondition(\"selenium.isElementPresent(\\\"\"\n+                + \"//select[@name='eventSelection:categoryContainer:category:dropDownChoiceField']\"\n+                + \"/option[text()='role']\\\");\",\n+                \"30000\");\n+\n+        selenium.select(\n+                \"//select[@name='eventSelection:categoryContainer:category:dropDownChoiceField']\",\n+                \"label=role\");\n+\n+        selenium.waitForCondition(\"selenium.isElementPresent(\\\"\"\n+                + \"//select[@name='eventSelection:categoryContainer:subcategory:dropDownChoiceField']\"\n+                + \"/option[text()='resource-db-sync']\\\");\",\n+                \"30000\");\n+\n+        selenium.select(\n+                \"//select[@name='eventSelection:categoryContainer:subcategory:dropDownChoiceField']\",\n+                \"label=resource-db-sync\");\n+\n+        selenium.waitForCondition(\n+                \"selenium.isElementPresent(\\\"//input[@name='eventSelection:eventsContainer:eventsPanel:failureGroup']\\\");\",\n+                \"30000\");\n+        \n+        selenium.click(\"//div[@class='eventSelectionWidzard']/div[2]/div[3]/span/div/input\");\n+        \n         selenium.click(\"//div[2]/form/div[3]/ul/li[4]/a/span\");\n \n         selenium.waitForCondition(\"selenium.isElementPresent(\""},{"sha":"8fd8ef94eb11d3806b5c60d0d9d0fcdfc638c3c0","filename":"console/src/test/java/org/apache/syncope/console/ReportTestITCase.java","status":"modified","additions":27,"deletions":13,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FReportTestITCase.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -65,18 +65,32 @@ public void navigateAudit() {\n         selenium.waitForCondition(\"selenium.isElementPresent(\\\"//div[@id='tabs']\\\");\", \"30000\");\n \n         selenium.click(\"//div[@id='tabs']/ul/li[2]/a/span\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[2]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[3]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[4]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[5]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[6]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[7]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[8]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[9]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[10]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[11]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[12]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[13]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[14]/a\");\n+        selenium.waitForCondition(\n+                \"selenium.isTextPresent(\\\"[REST]:[AuthenticationController]:[]:[getEntitlements]:[SUCCESS]\\\");\",\n+                \"30000\");\n+\n+        selenium.select(\n+                \"//select[@name='events:categoryContainer:type:dropDownChoiceField']\",\n+                \"label=PROPAGATION\");\n+\n+        selenium.waitForCondition(\"selenium.isElementPresent(\\\"\"\n+                + \"//select[@name='events:categoryContainer:category:dropDownChoiceField']/option[text()='user']\\\");\",\n+                \"30000\");\n+\n+        selenium.select(\n+                \"//select[@name='events:categoryContainer:category:dropDownChoiceField']\",\n+                \"label=user\");\n+\n+        selenium.waitForCondition(\"selenium.isElementPresent(\\\"\"\n+                + \"//select[@name='events:categoryContainer:subcategory:dropDownChoiceField']/option[text()='resource-csv']\\\");\",\n+                \"30000\");\n+\n+        selenium.select(\n+                \"//select[@name='events:categoryContainer:subcategory:dropDownChoiceField']\",\n+                \"label=resource-csv\");\n+\n+        selenium.waitForCondition(\n+                \"selenium.isElementPresent(\\\"//input[@name='events:eventsContainer:eventsPanel:successGroup']\\\");\",\n+                \"30000\");\n     }\n }"},{"sha":"4dfc037a919462d1b03bca26e7608d42f64bc6d3","filename":"core/src/main/java/org/apache/syncope/core/audit/AuditManager.java","status":"modified","additions":38,"deletions":8,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.core.audit;\n \n-import org.apache.syncope.common.types.AuditElements.Category;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditLoggerName;\n import org.slf4j.Logger;\n@@ -33,16 +34,45 @@ public class AuditManager {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(AuditManager.class);\n \n-    public void audit(final Category category, final Enum<?> subcategory, final Result result, final String message) {\n-        audit(category, subcategory, result, message, null);\n-    }\n+    public void audit(\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final String event,\n+            final Result result,\n+            final Object before,\n+            final Object output,\n+            final Object... input) {\n+\n+        final Throwable throwable;\n+        final StringBuilder message = new StringBuilder();\n+\n+        message.append(\"BEFORE:\\n\");\n+        message.append(\"\\t\").append(before == null ? \"unknown\" : before).append(\"\\n\");\n \n-    public void audit(final Category category, final Enum<?> subcategory, final Result result, final String message,\n-            final Throwable throwable) {\n+        message.append(\"INPUT:\\n\");\n+\n+        if (ArrayUtils.isNotEmpty(input)) {\n+            for (Object obj : input) {\n+                message.append(\"\\t\").append(obj == null ? null : obj.toString()).append(\"\\n\");\n+            }\n+        } else {\n+            message.append(\"\\t\").append(\"none\").append(\"\\n\");\n+        }\n+\n+        message.append(\"OUTPUT:\\n\");\n+\n+        if (output instanceof Throwable) {\n+            throwable = (Throwable) output;\n+            message.append(\"\\t\").append(throwable.getMessage());\n+        } else {\n+            throwable = null;\n+            message.append(\"\\t\").append(output == null ? \"none\" : output.toString());\n+        }\n \n         AuditLoggerName auditLoggerName = null;\n         try {\n-            auditLoggerName = new AuditLoggerName(category, subcategory, result);\n+            auditLoggerName = new AuditLoggerName(type, category, subcategory, event, result);\n         } catch (IllegalArgumentException e) {\n             LOG.error(\"Invalid audit parameters, aborting...\", e);\n         }\n@@ -56,7 +86,7 @@ public void audit(final Category category, final Enum<?> subcategory, final Resu\n             }\n             auditMessage.append(message);\n \n-            Logger logger = LoggerFactory.getLogger(auditLoggerName.toLoggerName());\n+            final Logger logger = LoggerFactory.getLogger(auditLoggerName.toLoggerName());\n             if (throwable == null) {\n                 logger.debug(auditMessage.toString());\n             } else {"},{"sha":"6c194e85c308d2f53167977f338d29e84c142ac8","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationJob.java","status":"modified","additions":37,"deletions":6,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -24,8 +24,7 @@\n import javax.mail.internet.MimeMessage;\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.SyncopeConstants;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.NotificationSubCategory;\n+import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.core.audit.AuditManager;\n@@ -199,7 +198,15 @@ public TaskExec executeSingle(final NotificationTask task) {\n                         execution.setMessage(report.toString());\n                     }\n \n-                    auditManager.audit(Category.notification, NotificationSubCategory.send, Result.success,\n+                    auditManager.audit(\n+                            AuditElements.EventCategoryType.TASK,\n+                            \"notification\",\n+                            null,\n+                            \"send\",\n+                            Result.SUCCESS,\n+                            null,\n+                            null,\n+                            task,\n                             \"Successfully sent notification to \" + to);\n                 } catch (Exception e) {\n                     LOG.error(\"Could not send e-mail\", e);\n@@ -213,7 +220,15 @@ public TaskExec executeSingle(final NotificationTask task) {\n                         execution.setMessage(exceptionWriter.toString());\n                     }\n \n-                    auditManager.audit(Category.notification, NotificationSubCategory.send, Result.failure,\n+                    auditManager.audit(\n+                            AuditElements.EventCategoryType.TASK,\n+                            \"notification\",\n+                            null,\n+                            \"send\",\n+                            Result.FAILURE,\n+                            null,\n+                            null,\n+                            task,\n                             \"Could not send notification to \" + to, e);\n                 }\n \n@@ -271,12 +286,28 @@ private void handleRetries(final TaskExec execution) {\n                     execution.getTask(), failedExecutionsCount, maxRetries);\n             notificationManager.setTaskExecuted(execution.getTask().getId(), false);\n \n-            auditManager.audit(Category.notification, NotificationSubCategory.retry, Result.success,\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.TASK,\n+                    \"notification\",\n+                    null,\n+                    \"retry\",\n+                    Result.SUCCESS,\n+                    null,\n+                    null,\n+                    execution,\n                     \"Notification task \" + execution.getTask().getId() + \" will be retried\");\n         } else {\n             LOG.error(\"Maximum number of retries reached for task {} - giving up\", execution.getTask());\n \n-            auditManager.audit(Category.notification, NotificationSubCategory.retry, Result.failure,\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.TASK,\n+                    \"notification\",\n+                    null,\n+                    \"retry\",\n+                    Result.FAILURE,\n+                    null,\n+                    null,\n+                    execution,\n                     \"Giving up retries on notification task \" + execution.getTask().getId());\n         }\n     }"},{"sha":"adc6f946efd3f51fc1ec1928ecc5234d56ef374f","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationManager.java","status":"modified","additions":79,"deletions":28,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -19,16 +19,22 @@\n package org.apache.syncope.core.notification;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import org.apache.syncope.common.SyncopeConstants;\n+import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.IntMappingType;\n+import org.apache.syncope.common.util.LoggerEventUtils;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n+import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.Notification;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n import org.apache.syncope.core.persistence.beans.SyncopeConf;\n@@ -42,8 +48,11 @@\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.NotificationDAO;\n+import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.rest.controller.RoleController;\n+import org.apache.syncope.core.rest.controller.UserController;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n@@ -86,6 +95,12 @@ public class NotificationManager {\n     @Autowired\n     private UserDAO userDAO;\n \n+    /**\n+     * Role DAO.\n+     */\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n     /**\n      * User data binder.\n      */\n@@ -120,11 +135,16 @@ public class NotificationManager {\n      * Create a notification task.\n      *\n      * @param notification notification to take as model\n-     * @param user the user this task is about\n+     * @param attributable the user this task is about\n      * @return notification task, fully populated\n      */\n-    private NotificationTask getNotificationTask(final Notification notification, final SyncopeUser user) {\n-        connObjectUtil.retrieveVirAttrValues(user, AttributableUtil.getInstance(AttributableType.USER));\n+    private NotificationTask getNotificationTask(\n+            final Notification notification,\n+            final AbstractAttributable attributable,\n+            final Map<String, Object> model) {\n+        if (attributable != null) {\n+            connObjectUtil.retrieveVirAttrValues(attributable, AttributableUtil.getInstance(AttributableType.USER));\n+        }\n \n         final List<SyncopeUser> recipients = new ArrayList<SyncopeUser>();\n \n@@ -133,8 +153,8 @@ private NotificationTask getNotificationTask(final Notification notification, fi\n                     notification.getRecipients(), AttributableUtil.getInstance(AttributableType.USER)));\n         }\n \n-        if (notification.isSelfAsRecipient()) {\n-            recipients.add(user);\n+        if (notification.isSelfAsRecipient() && attributable instanceof SyncopeUser) {\n+            recipients.add((SyncopeUser) attributable);\n         }\n \n         final Set<String> recipientEmails = new HashSet<String>();\n@@ -152,18 +172,16 @@ private NotificationTask getNotificationTask(final Notification notification, fi\n             }\n         }\n \n+        model.put(\"recipients\", recipientTOs);\n+        model.put(\"syncopeConf\", this.findAllSyncopeConfs());\n+        model.put(\"events\", notification.getEvents());\n+\n         NotificationTask task = new NotificationTask();\n         task.setTraceLevel(notification.getTraceLevel());\n         task.setRecipients(recipientEmails);\n         task.setSender(notification.getSender());\n         task.setSubject(notification.getSubject());\n \n-        final Map<String, Object> model = new HashMap<String, Object>();\n-        model.put(\"user\", userDataBinder.getUserTO(user));\n-        model.put(\"syncopeConf\", this.findAllSyncopeConfs());\n-        model.put(\"recipients\", recipientTOs);\n-        model.put(\"events\", notification.getEvents());\n-\n         String htmlBody;\n         String textBody;\n         try {\n@@ -190,27 +208,60 @@ private NotificationTask getNotificationTask(final Notification notification, fi\n      * @param performedTasks set of actions performed on given user id\n      * @throws NotFoundException if user contained in the workflow result cannot be found\n      */\n-    public void createTasks(final Long userId, final Set<String> performedTasks)\n-            throws NotFoundException {\n+    public void createTasks(\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final String event,\n+            final Result condition,\n+            final Object before,\n+            final Object output,\n+            final Object... input) {\n+        AttributableType attributableType = null;\n+        AbstractAttributable attributable = null;\n+\n+        if (UserController.class.getSimpleName().equals(category)) {\n+            attributableType = AttributableType.USER;\n+\n+            if (before instanceof UserTO) {\n+                attributable = userDAO.find(((UserTO) before).getId());\n+            } else if (output instanceof UserTO) {\n+                attributable = userDAO.find(((UserTO) output).getId());\n+            }\n+        } else if (RoleController.class.getSimpleName().equals(category)) {\n+            attributableType = AttributableType.ROLE;\n \n-        SyncopeUser user = userDAO.find(userId);\n-        if (user == null) {\n-            throw new NotFoundException(\"User \" + userId);\n+            if (before instanceof RoleTO) {\n+                attributable = roleDAO.find(((RoleTO) before).getId());\n+            } else if (output instanceof RoleTO) {\n+                attributable = roleDAO.find(((RoleTO) output).getId());\n+            }\n         }\n \n+        LOG.info(\"Search notification for [{}]{}\", attributableType, attributable);\n+\n         for (Notification notification : notificationDAO.findAll()) {\n-            if (notification.getAbout() == null\n-                    || searchDAO.matches(user, notification.getAbout(),\n-                    AttributableUtil.getInstance(AttributableType.USER))) {\n-\n-                Set<String> events = new HashSet<String>(notification.getEvents());\n-                events.retainAll(performedTasks);\n-\n-                if (events.isEmpty()) {\n-                    LOG.debug(\"No events found about {}\", user);\n-                } else {\n-                    LOG.debug(\"Creating notification task for events {} about {}\", events, user);\n-                    taskDAO.save(getNotificationTask(notification, user));\n+            LOG.info(\"Notification available about {}\", notification.getAbout());\n+\n+            final Set<String> events = new HashSet<String>(notification.getEvents());\n+            events.retainAll(Collections.<String>singleton(LoggerEventUtils.buildEvent(\n+                    type, category, subcategory, event, condition)));\n+\n+            if (events.isEmpty()) {\n+                LOG.debug(\"No events found about {}\", attributable);\n+            } else {\n+                if (attributableType == null || attributable == null || notification.getAbout() == null || searchDAO.\n+                        matches(\n+                        attributable, notification.getAbout(), AttributableUtil.getInstance(attributableType))) {\n+\n+                    LOG.debug(\"Creating notification task for events {} about {}\", events, attributable);\n+\n+                    final Map<String, Object> model = new HashMap<String, Object>();\n+                    model.put(\"before\", before);\n+                    model.put(\"output\", output);\n+                    model.put(\"input\", input);\n+\n+                    taskDAO.save(getNotificationTask(notification, attributable, model));\n                 }\n             }\n         }"},{"sha":"6cac28698c196a1839fde1559c4889501ae6ce95","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AttributableSearchDAOImpl.java","status":"modified","additions":17,"deletions":9,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -165,18 +165,26 @@ public <T extends AbstractAttributable> boolean matches(final T user, final Node\n         // 1. get the query string from the search condition\n         StringBuilder queryString = getQuery(searchCondition, parameters, attrUtil);\n \n-        // 2. take into account the passed user\n-        queryString.insert(0, \"SELECT u.subject_id FROM (\");\n-        queryString.append(\") u WHERE subject_id=?\").append(setParameter(parameters, user.getId()));\n+        final boolean res;\n+        if (queryString.length() == 0) {\n+            // Could be empty: got into a role search with a single membership condition ...\n+            res = false;\n+        } else {\n+            // 2. take into account the passed user\n+            queryString.insert(0, \"SELECT u.subject_id FROM (\");\n+            queryString.append(\") u WHERE subject_id=?\").append(setParameter(parameters, user.getId()));\n \n-        // 3. prepare the search query\n-        Query query = entityManager.createNativeQuery(queryString.toString());\n+            // 3. prepare the search query\n+            Query query = entityManager.createNativeQuery(queryString.toString());\n \n-        // 4. populate the search query with parameter values\n-        fillWithParameters(query, parameters);\n+            // 4. populate the search query with parameter values\n+            fillWithParameters(query, parameters);\n+\n+            // 5. executes query\n+            res = !query.getResultList().isEmpty();\n+        }\n \n-        // 5. executes query\n-        return !query.getResultList().isEmpty();\n+        return res;\n     }\n \n     private int setParameter(final List<Object> parameters, final Object parameter) {"},{"sha":"53be24a53a50588fb8ee72ca4f03e81918318267","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AbstractPropagationTaskExecutor.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -27,11 +27,15 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.PropagationMode;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.TraceLevel;\n+import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n+import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n@@ -94,6 +98,18 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     @Autowired\n     protected RoleDataBinder roleDataBinder;\n \n+    /**\n+     * Notification Manager.\n+     */\n+    @Autowired\n+    protected NotificationManager notificationManager;\n+\n+    /**\n+     * Audit Manager.\n+     */\n+    @Autowired\n+    protected AuditManager auditManager;\n+\n     @Override\n     public TaskExec execute(final PropagationTask task) {\n         return execute(task, null);\n@@ -284,6 +300,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n         ConnectorObject afterObj = null;\n \n         Connector connector = null;\n+        Result result;\n         try {\n             connector = connLoader.getConnector(task.getResource());\n \n@@ -310,7 +327,9 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                     : PropagationTaskExecStatus.SUBMITTED.name());\n \n             LOG.debug(\"Successfully propagated to {}\", task.getResource());\n+            result = Result.SUCCESS;\n         } catch (Exception e) {\n+            result = Result.FAILURE;\n             LOG.error(\"Exception during provision on resource \" + task.getResource().getName(), e);\n \n             if (e instanceof ConnectorException && e.getCause() != null) {\n@@ -382,6 +401,26 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n \n         actions.after(task, execution, afterObj);\n \n+        notificationManager.createTasks(\n+                AuditElements.EventCategoryType.PROPAGATION,\n+                task.getSubjectType().name().toLowerCase(),\n+                task.getResource().getName(),\n+                task.getPropagationOperation().name().toLowerCase(),\n+                result,\n+                beforeObj, // searching for before object is too much expensive ... \n+                new Object[] {execution, afterObj},\n+                task);\n+\n+        auditManager.audit(\n+                AuditElements.EventCategoryType.PROPAGATION,\n+                task.getSubjectType().name().toLowerCase(),\n+                task.getResource().getName(),\n+                task.getPropagationOperation().name().toLowerCase(),\n+                result,\n+                beforeObj, // searching for before object is too much expensive ... \n+                new Object[] {execution, afterObj},\n+                task);\n+\n         return execution;\n     }\n "},{"sha":"42928146c30a675e6f9c3d724c657c00802454bf","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PriorityPropagationTaskExecutor.java","status":"modified","additions":38,"deletions":15,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPriorityPropagationTaskExecutor.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -24,6 +24,7 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n@@ -41,25 +42,47 @@ public void execute(final Collection<PropagationTask> tasks, final PropagationRe\n         final List<PropagationTask> prioritizedTasks = new ArrayList<PropagationTask>(tasks);\n         Collections.sort(prioritizedTasks, new PriorityComparator());\n \n-        for (PropagationTask task : prioritizedTasks) {\n-            LOG.debug(\"Execution started for {}\", task);\n+        try {\n+            for (PropagationTask task : prioritizedTasks) {\n+                LOG.debug(\"Execution started for {}\", task);\n \n-            TaskExec execution = execute(task, reporter);\n+                TaskExec execution = execute(task, reporter);\n \n-            LOG.debug(\"Execution finished for {}, {}\", task, execution);\n+                LOG.debug(\"Execution finished for {}, {}\", task, execution);\n \n-            // Propagation is interrupted as soon as the result of the\n-            // communication with a primary resource is in error\n-            PropagationTaskExecStatus execStatus;\n-            try {\n-                execStatus = PropagationTaskExecStatus.valueOf(execution.getStatus());\n-            } catch (IllegalArgumentException e) {\n-                LOG.error(\"Unexpected execution status found {}\", execution.getStatus());\n-                execStatus = PropagationTaskExecStatus.FAILURE;\n-            }\n-            if (task.getResource().isPropagationPrimary() && !execStatus.isSuccessful()) {\n-                throw new PropagationException(task.getResource().getName(), execution.getMessage());\n+                // Propagation is interrupted as soon as the result of the\n+                // communication with a primary resource is in error\n+                PropagationTaskExecStatus execStatus;\n+                try {\n+                    execStatus = PropagationTaskExecStatus.valueOf(execution.getStatus());\n+                } catch (IllegalArgumentException e) {\n+                    LOG.error(\"Unexpected execution status found {}\", execution.getStatus());\n+                    execStatus = PropagationTaskExecStatus.FAILURE;\n+                }\n+                if (task.getResource().isPropagationPrimary() && !execStatus.isSuccessful()) {\n+                    throw new PropagationException(task.getResource().getName(), execution.getMessage());\n+                }\n             }\n+        } finally {\n+            notificationManager.createTasks(\n+                    AuditElements.EventCategoryType.PROPAGATION,\n+                    null,\n+                    null,\n+                    null,\n+                    null,\n+                    reporter instanceof DefaultPropagationReporter\n+                    ? ((DefaultPropagationReporter) reporter).getStatuses() : null,\n+                    tasks);\n+\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.PROPAGATION,\n+                    null,\n+                    null,\n+                    null,\n+                    null,\n+                    reporter instanceof DefaultPropagationReporter\n+                    ? ((DefaultPropagationReporter) reporter).getStatuses() : null,\n+                    tasks);\n         }\n     }\n "},{"sha":"13e0c92030275fe2f03dc5e6a2b3ffe0b48ab4d5","filename":"core/src/main/java/org/apache/syncope/core/quartz/AbstractTaskJob.java","status":"modified","additions":38,"deletions":1,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -21,6 +21,10 @@\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.util.Date;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.Result;\n+import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.core.notification.NotificationManager;\n \n import org.apache.syncope.core.persistence.beans.Task;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n@@ -73,6 +77,18 @@ public enum Status {\n     @Autowired\n     private TaskExecDAO taskExecDAO;\n \n+    /**\n+     * Notification manager.\n+     */\n+    @Autowired\n+    private NotificationManager notificationManager;\n+\n+    /**\n+     * Audit manager.\n+     */\n+    @Autowired\n+    private AuditManager auditManager;\n+\n     /**\n      * Id, set by the caller, for identifying the task to be executed.\n      */\n@@ -104,12 +120,15 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n         execution.setStartDate(new Date());\n         execution.setTask(task);\n \n+        Result result;\n+\n         try {\n             execution.setMessage(doExecute(context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY)));\n-\n             execution.setStatus(Status.SUCCESS.name());\n+            result = Result.SUCCESS;\n         } catch (JobExecutionException e) {\n             LOG.error(\"While executing task \" + taskId, e);\n+            result = Result.FAILURE;\n \n             StringWriter exceptionWriter = new StringWriter();\n             exceptionWriter.write(e.getMessage() + \"\\n\\n\");\n@@ -125,6 +144,24 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n         }\n \n         task = taskDAO.save(task);\n+\n+        notificationManager.createTasks(\n+                AuditElements.EventCategoryType.TASK,\n+                task.getClass().getSimpleName(),\n+                null,\n+                null, // searching for before object is too much expensive ...\n+                result,\n+                task,\n+                (Object[]) null);\n+\n+        auditManager.audit(\n+                AuditElements.EventCategoryType.TASK,\n+                task.getClass().getSimpleName(),\n+                null,\n+                null, // searching for before object is too much expensive ...\n+                result,\n+                task,\n+                (Object[]) null);\n     }\n \n     /**"},{"sha":"cc6d4a6efe585af1579b9b99cc754287564f6b63","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":33,"deletions":12,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n+import org.apache.syncope.common.AbstractBaseBean;\n import org.apache.syncope.common.to.PropagationTaskTO;\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n@@ -34,8 +36,7 @@\n import org.springframework.beans.TypeMismatchException;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = { Throwable.class })\n-public abstract class AbstractController {\n+public abstract class AbstractController<T extends AbstractBaseBean> {\n \n     /**\n      * Logger.\n@@ -74,12 +75,12 @@ protected TaskUtil getTaskUtil(final Task task) {\n         TaskUtil result = (task instanceof PropagationTask)\n                 ? TaskUtil.PROPAGATION\n                 : (task instanceof NotificationTask)\n-                        ? TaskUtil.NOTIFICATION\n-                        : (task instanceof SyncTask)\n-                                ? TaskUtil.SYNC\n-                                : (task instanceof SchedTask)\n-                                        ? TaskUtil.SCHED\n-                                        : null;\n+                ? TaskUtil.NOTIFICATION\n+                : (task instanceof SyncTask)\n+                ? TaskUtil.SYNC\n+                : (task instanceof SchedTask)\n+                ? TaskUtil.SCHED\n+                : null;\n \n         if (result == null) {\n             LOG.error(\"Task not supported: \" + task.getClass().getName());\n@@ -94,10 +95,10 @@ protected TaskUtil getTaskUtil(final TaskTO taskTO) {\n         TaskUtil result = (taskTO instanceof PropagationTaskTO)\n                 ? TaskUtil.PROPAGATION\n                 : (taskTO instanceof SyncTaskTO)\n-                        ? TaskUtil.SYNC\n-                        : (taskTO instanceof SchedTaskTO)\n-                                ? TaskUtil.SCHED\n-                                : null;\n+                ? TaskUtil.SYNC\n+                : (taskTO instanceof SchedTaskTO)\n+                ? TaskUtil.SCHED\n+                : null;\n \n         if (result == null) {\n             LOG.error(\"Task not supported: \" + taskTO.getClass().getName());\n@@ -107,4 +108,24 @@ protected TaskUtil getTaskUtil(final TaskTO taskTO) {\n \n         return result;\n     }\n+\n+    /**\n+     * Resolves stored bean (if existing) referred by the given CUD method.\n+     * <br />\n+     * Read-only methods will be unresolved for performance reasons.\n+     *\n+     * @param method method.\n+     * @param args method arguments.\n+     * @return referred stored bean.\n+     * @throws UnresolvedReferenceException in case of failures, read-only methods and unresolved bean.\n+     */\n+    public T resolveBeanReference(final Method method, final Object... args) throws UnresolvedReferenceException {\n+        final Transactional transactional = method.getAnnotation(Transactional.class);\n+        if (transactional != null && transactional.readOnly()) {\n+            throw new UnresolvedReferenceException();\n+        }\n+        return resolveReference(method, args);\n+    }\n+\n+    protected abstract T resolveReference(Method method, Object... args) throws UnresolvedReferenceException;\n }"},{"sha":"895926a45457d051f3b4c9c59451aa3a0b3d0a2f","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractTransactionalController.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.controller;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(rollbackFor = {Throwable.class})\n+public abstract class AbstractTransactionalController<T extends AbstractBaseBean> extends AbstractController<T> {\n+}"},{"sha":"c0955dcfabc4c257c6bfe5976ede3280e0ad6e05","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AuthenticationController.java","status":"modified","additions":12,"deletions":14,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,14 +18,11 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n-\n-import org.apache.syncope.common.types.AuditElements.AuthenticationSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.common.to.EntitlementTO;\n import org.apache.syncope.core.persistence.beans.Entitlement;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.util.EntitlementUtil;\n@@ -36,10 +33,7 @@\n \n @Controller\n @RequestMapping(\"/auth\")\n-public class AuthenticationController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class AuthenticationController extends AbstractTransactionalController<EntitlementTO> {\n \n     @Autowired\n     private EntitlementDAO entitlementDAO;\n@@ -57,11 +51,15 @@ public List<String> listEntitlements() {\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/entitlements\")\n     public Set<String> getEntitlements() {\n-        Set<String> result = EntitlementUtil.getOwnedEntitlementNames();\n-\n-        auditManager.audit(Category.authentication, AuthenticationSubCategory.getEntitlements, Result.success,\n-                \"Owned entitlements: \" + result.toString());\n+        return EntitlementUtil.getOwnedEntitlementNames();\n+    }\n \n-        return result;\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected EntitlementTO resolveReference(final Method method, final Object... obj)\n+            throws UnresolvedReferenceException {\n+        throw new UnresolvedReferenceException();\n     }\n }"},{"sha":"99d64cf289a0edad059012b60ea46cfa8830d40a","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":36,"deletions":42,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -20,19 +20,17 @@\n \n import java.io.IOException;\n import java.io.OutputStream;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.core.MediaType;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.to.ConfigurationTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.ConfigurationSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.init.WorkflowAdapterLoader;\n import org.apache.syncope.core.persistence.beans.SyncopeConf;\n@@ -56,10 +54,7 @@\n \n @Controller\n @RequestMapping(\"/configuration\")\n-public class ConfigurationController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class ConfigurationController extends AbstractTransactionalController<ConfigurationTO> {\n \n     @Autowired\n     private ConfDAO confDAO;\n@@ -88,9 +83,6 @@ public ConfigurationTO create(final HttpServletResponse response,\n         SyncopeConf conf = binder.create(configurationTO);\n         conf = confDAO.save(conf);\n \n-        auditManager.audit(Category.configuration, ConfigurationSubCategory.create, Result.success,\n-                \"Successfully created conf: \" + conf.getKey());\n-\n         response.setStatus(HttpServletResponse.SC_CREATED);\n \n         return binder.getConfigurationTO(conf);\n@@ -102,9 +94,6 @@ public ConfigurationTO delete(@PathVariable(\"key\") final String key) {\n         SyncopeConf conf = confDAO.find(key);\n         ConfigurationTO confToDelete = binder.getConfigurationTO(conf);\n         confDAO.delete(key);\n-\n-        auditManager.audit(Category.configuration, ConfigurationSubCategory.delete, Result.success,\n-                \"Successfully deleted conf: \" + key);\n         return confToDelete;\n     }\n \n@@ -118,9 +107,6 @@ public List<ConfigurationTO> list(final HttpServletRequest request) {\n             configurationTOs.add(binder.getConfigurationTO(configuration));\n         }\n \n-        auditManager.audit(Category.configuration, ConfigurationSubCategory.list, Result.success,\n-                \"Successfully listed all confs: \" + configurationTOs.size());\n-\n         return configurationTOs;\n     }\n \n@@ -131,17 +117,11 @@ public ConfigurationTO read(final HttpServletResponse response, @PathVariable(\"k\n         try {\n             SyncopeConf conf = confDAO.find(key);\n             result = binder.getConfigurationTO(conf);\n-\n-            auditManager.audit(Category.configuration, ConfigurationSubCategory.read, Result.success,\n-                    \"Successfully read conf: \" + key);\n         } catch (MissingConfKeyException e) {\n             LOG.error(\"Could not find configuration key '\" + key + \"', returning null\");\n \n             result = new ConfigurationTO();\n             result.setKey(key);\n-\n-            auditManager.audit(Category.configuration, ConfigurationSubCategory.read, Result.failure,\n-                    \"Could not find conf: \" + key);\n         }\n \n         return result;\n@@ -152,22 +132,14 @@ public ConfigurationTO read(final HttpServletResponse response, @PathVariable(\"k\n     public ConfigurationTO update(@RequestBody final ConfigurationTO configurationTO) {\n         SyncopeConf conf = confDAO.find(configurationTO.getKey());\n         conf.setValue(configurationTO.getValue());\n-\n-        auditManager.audit(Category.configuration, ConfigurationSubCategory.update, Result.success,\n-                \"Successfully updated conf: \" + conf.getKey());\n-\n         return binder.getConfigurationTO(conf);\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/validators\")\n     public ModelAndView getValidators() {\n-        Set<String> validators = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.VALIDATOR);\n-\n-        auditManager.audit(Category.configuration, ConfigurationSubCategory.getValidators, Result.success,\n-                \"Successfully listed all validators: \" + validators.size());\n-\n-        return new ModelAndView().addObject(validators);\n+        return new ModelAndView().addObject(\n+                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.VALIDATOR));\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n@@ -196,9 +168,6 @@ public ModelAndView getMailTemplates() {\n         // Only templates available both as HTML and TEXT are considered\n         htmlTemplates.retainAll(textTemplates);\n \n-        auditManager.audit(Category.configuration, ConfigurationSubCategory.getMailTemplates, Result.success,\n-                \"Successfully listed all mail templates: \" + htmlTemplates.size());\n-\n         return new ModelAndView().addObject(htmlTemplates);\n     }\n \n@@ -219,14 +188,39 @@ public void dbExport(final HttpServletResponse response) {\n     public void dbExportInternal(final OutputStream os) {\n         try {\n             exporter.export(os, wfAdapterLoader.getTablePrefix());\n-\n-            auditManager.audit(Category.configuration, ConfigurationSubCategory.dbExport, Result.success,\n-                    \"Successfully exported database content\");\n             LOG.debug(\"Database content successfully exported\");\n         } catch (Exception e) {\n-            auditManager.audit(Category.configuration, ConfigurationSubCategory.dbExport, Result.failure,\n-                    \"Could not export database content\", e);\n             LOG.error(\"While exporting database content\", e);\n         }\n     }\n-}\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected ConfigurationTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof ConfigurationTO) {\n+                    key = ((ConfigurationTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return binder.getConfigurationTO(confDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}\n\\ No newline at end of file"},{"sha":"125b449cca8a75a56b39f7a85ead391e1fc1f681","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":35,"deletions":61,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,26 +18,24 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import javax.servlet.http.HttpServletResponse;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.BulkActionRes;\n import org.apache.syncope.common.to.ConnBundleTO;\n import org.apache.syncope.common.to.ConnInstanceTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.ConnectorSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.ConnConfPropSchema;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n@@ -67,10 +65,7 @@\n \n @Controller\n @RequestMapping(\"/connector\")\n-public class ConnInstanceController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class ConnInstanceController extends AbstractTransactionalController<ConnInstanceTO> {\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n@@ -92,12 +87,7 @@ public ConnInstanceTO create(final HttpServletResponse response, @RequestBody fi\n         ConnInstance connInstance = binder.getConnInstance(connInstanceTO);\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n-            auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.success,\n-                    \"Successfully created connector instance: \" + connInstance.getDisplayName());\n         } catch (Exception e) {\n-            auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.failure,\n-                    \"Could not create connector instance: \" + connInstanceTO.getDisplayName(), e);\n-\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n@@ -121,12 +111,7 @@ public ConnInstanceTO update(@RequestBody final ConnInstanceTO connInstanceTO) {\n         ConnInstance connInstance = binder.updateConnInstance(connInstanceTO.getId(), connInstanceTO);\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n-            auditManager.audit(Category.connector, ConnectorSubCategory.update, Result.success,\n-                    \"Successfully update connector instance: \" + connInstance.getDisplayName());\n         } catch (Exception e) {\n-            auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.failure,\n-                    \"Could not update connector instance: \" + connInstanceTO.getDisplayName(), e);\n-\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n@@ -164,11 +149,7 @@ public ConnInstanceTO delete(@PathVariable(\"connInstanceId\") final Long connInst\n         }\n \n         ConnInstanceTO connToDelete = binder.getConnInstanceTO(connInstance);\n-\n         connInstanceDAO.delete(connInstanceId);\n-        auditManager.audit(Category.connector, ConnectorSubCategory.delete, Result.success,\n-                \"Successfully deleted connector instance: \" + connInstanceId);\n-\n         return connToDelete;\n     }\n \n@@ -194,9 +175,6 @@ public List<ConnInstanceTO> list(@RequestParam(value = \"lang\", required = false)\n             }\n         }\n \n-        auditManager.audit(Category.connector, ConnectorSubCategory.list, Result.success,\n-                \"Successfully listed all connectors: \" + connInstanceTOs.size());\n-\n         return connInstanceTOs;\n     }\n \n@@ -209,9 +187,6 @@ public ConnInstanceTO read(@PathVariable(\"connInstanceId\") final Long connInstan\n             throw new NotFoundException(\"Connector '\" + connInstanceId + \"'\");\n         }\n \n-        auditManager.audit(Category.connector, ConnectorSubCategory.read, Result.success,\n-                \"Successfully read connector: \" + connInstance.getDisplayName());\n-\n         return binder.getConnInstanceTO(connInstance);\n     }\n \n@@ -263,9 +238,6 @@ public List<ConnBundleTO> getBundles(@RequestParam(value = \"lang\", required = fa\n             }\n         }\n \n-        auditManager.audit(Category.connector, ConnectorSubCategory.getBundles, Result.success,\n-                \"Successfully listed all bundles: \" + connectorBundleTOs.size());\n-\n         return connectorBundleTOs;\n     }\n \n@@ -291,10 +263,6 @@ public List<String> getSchemaNames(@RequestBody final ConnInstanceTO connInstanc\n         final List<String> result =\n                 new ArrayList<String>(connFactory.createConnector(connInstance, conf).getSchemaNames(includeSpecial));\n \n-        auditManager.audit(Category.connector, ConnectorSubCategory.getSchemaNames, Result.success,\n-                \"Successfully listed \" + (includeSpecial ? \"all \" : \"\") + \"schema names (\" + result.size() + \") \"\n-                + \"for connector \" + connInstance.getDisplayName());\n-\n         return result;\n     }\n \n@@ -321,10 +289,6 @@ public List<String> getSupportedObjectClasses(@RequestBody final ConnInstanceTO\n             result.add(objectClass.getObjectClassValue());\n         }\n \n-        auditManager.audit(Category.connector, ConnectorSubCategory.getSupportedObjectClasses, Result.success,\n-                \"Successfully listed supported object classes (\" + result.size() + \") \"\n-                + \"for connector \" + connInstance.getDisplayName());\n-\n         return result;\n     }\n \n@@ -339,13 +303,7 @@ public List<ConnConfProperty> getConfigurationProperties(\n             throw new NotFoundException(\"Connector '\" + connInstanceId + \"'\");\n         }\n \n-        List<ConnConfProperty> result = new ArrayList<ConnConfProperty>(connInstance.getConfiguration());\n-\n-        auditManager.audit(Category.connector, ConnectorSubCategory.getConfigurationProperties, Result.success,\n-                \"Successfully listed all conf properties (\" + result.size() + \") for connector \"\n-                + connInstance.getDisplayName());\n-\n-        return result;\n+        return new ArrayList<ConnConfProperty>(connInstance.getConfiguration());\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n@@ -359,13 +317,7 @@ public ModelAndView check(@RequestBody final ConnInstanceTO connInstanceTO) {\n         try {\n             connector.test();\n             result = true;\n-\n-            auditManager.audit(Category.connector, ConnectorSubCategory.check, Result.success,\n-                    \"Successfully checked connector: \" + connInstanceTO);\n         } catch (Exception ex) {\n-            auditManager.audit(Category.connector, ConnectorSubCategory.check, Result.failure,\n-                    \"Unsuccessful check for connector: \" + connInstanceTO, ex);\n-\n             LOG.error(\"Test connection failure {}\", ex);\n             result = false;\n         }\n@@ -382,12 +334,7 @@ public ConnInstanceTO readByResource(@PathVariable(\"resourceName\") final String\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n \n-        final Connector connector = connFactory.getConnector(resource);\n-\n-        auditManager.audit(Category.connector, ConnectorSubCategory.readConnectorBean, Result.success,\n-                \"Successfully read connector for resource: \" + resourceName);\n-\n-        return binder.getConnInstanceTO(connector.getActiveConnInstance());\n+        return binder.getConnInstanceTO(connFactory.getConnector(resource).getActiveConnInstance());\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_RELOAD')\")\n@@ -396,9 +343,6 @@ public ConnInstanceTO readByResource(@PathVariable(\"resourceName\") final String\n     public void reload() {\n         connFactory.unload();\n         connFactory.load();\n-\n-        auditManager.audit(Category.connector, ConnectorSubCategory.reload, Result.success,\n-                \"Successfully reloaded all connector bundles and instances\");\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE\")\n@@ -424,4 +368,34 @@ public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n \n         return res;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected ConnInstanceTO resolveReference(final Method method, final Object... args) throws\n+            UnresolvedReferenceException {\n+        Long id = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; id == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    id = (Long) args[i];\n+                } else if (args[i] instanceof ConnInstanceTO) {\n+                    id = ((ConnInstanceTO) args[i]).getId();\n+                }\n+            }\n+        }\n+\n+        if (id != null) {\n+            try {\n+                return binder.getConnInstanceTO(connInstanceDAO.find(id));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n }\n\\ No newline at end of file"},{"sha":"0c27eab8c620b6ae1d9ef2a0cc818144f23466da","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":37,"deletions":25,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,19 +18,17 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.EntityExistsException;\n import javax.servlet.http.HttpServletResponse;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.to.DerivedSchemaTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.SchemaSubCategory;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n import org.apache.syncope.core.persistence.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n@@ -47,10 +45,7 @@\n \n @Controller\n @RequestMapping(\"/derivedSchema\")\n-public class DerivedSchemaController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class DerivedSchemaController extends AbstractTransactionalController<DerivedSchemaTO> {\n \n     @Autowired\n     private DerSchemaDAO derSchemaDAO;\n@@ -81,9 +76,6 @@ public DerivedSchemaTO create(final HttpServletResponse response,\n \n         AbstractDerSchema derivedSchema = derSchemaDAO.save(binder.create(derSchemaTO, attrUtil.newDerSchema()));\n \n-        auditManager.audit(Category.schema, SchemaSubCategory.createDerived, Result.success,\n-                \"Successfully created derived schema: \" + kind + \"/\" + derivedSchema.getName());\n-\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getDerivedSchemaTO(derivedSchema);\n     }\n@@ -100,12 +92,7 @@ public DerivedSchemaTO delete(@PathVariable(\"kind\") final String kind,\n         }\n \n         DerivedSchemaTO schemaToDelete = binder.getDerivedSchemaTO(derivedSchema);\n-\n         derSchemaDAO.delete(derivedSchemaName, getAttributableUtil(kind));\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.deleteDerived, Result.success,\n-                \"Successfully deleted derived schema: \" + kind + \"/\" + derivedSchema.getName());\n-\n         return schemaToDelete;\n     }\n \n@@ -119,9 +106,6 @@ public List<DerivedSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n             derivedSchemaTOs.add(binder.getDerivedSchemaTO(derivedSchema));\n         }\n \n-        auditManager.audit(Category.schema, SchemaSubCategory.listDerived, Result.success,\n-                \"Successfully listed all derived schemas: \" + kind + \"/\" + derivedSchemaTOs.size());\n-\n         return derivedSchemaTOs;\n     }\n \n@@ -136,9 +120,6 @@ public DerivedSchemaTO read(@PathVariable(\"kind\") final String kind,\n             throw new NotFoundException(\"Derived schema '\" + derivedSchemaName + \"'\");\n         }\n \n-        auditManager.audit(Category.schema, SchemaSubCategory.readDerived, Result.success,\n-                \"Successfully read derived schema: \" + kind + \"/\" + derivedSchema.getName());\n-\n         return binder.getDerivedSchemaTO(derivedSchema);\n     }\n \n@@ -155,10 +136,41 @@ public DerivedSchemaTO update(@RequestBody final DerivedSchemaTO derivedSchemaTO\n \n         derivedSchema = binder.update(derivedSchemaTO, derivedSchema);\n         derivedSchema = derSchemaDAO.save(derivedSchema);\n+        return binder.getDerivedSchemaTO(derivedSchema);\n+    }\n \n-        auditManager.audit(Category.schema, SchemaSubCategory.updateDerived, Result.success,\n-                \"Successfully updated derived schema: \" + kind + \"/\" + derivedSchema.getName());\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected DerivedSchemaTO resolveReference(final Method method, final Object... args) throws\n+            UnresolvedReferenceException {\n+        String kind = null;\n+        String name = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; (name == null || kind == null) && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    if (kind == null) {\n+                        kind = (String) args[i];\n+                    } else {\n+                        name = (String) args[i];\n+                    }\n+                } else if (args[i] instanceof DerivedSchemaTO) {\n+                    name = ((DerivedSchemaTO) args[i]).getName();\n+                }\n+            }\n+        }\n \n-        return binder.getDerivedSchemaTO(derivedSchema);\n+        if (name != null) {\n+            try {\n+                return binder.getDerivedSchemaTO(derSchemaDAO.find(name, getAttributableUtil(kind).derSchemaClass()));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n     }\n }"},{"sha":"37e31444a207658d9c3baf77f37374642b74235c","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/LoggerController.java","status":"modified","additions":116,"deletions":19,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -20,18 +20,13 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import org.apache.syncope.common.to.LoggerTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.LoggerSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditLoggerName;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.types.SyncopeLoggerLevel;\n import org.apache.syncope.common.types.SyncopeLoggerType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.SyncopeLogger;\n import org.apache.syncope.core.persistence.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n@@ -46,20 +41,43 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n-\n import ch.qos.logback.classic.Level;\n import ch.qos.logback.classic.Logger;\n import ch.qos.logback.classic.LoggerContext;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.syncope.common.to.EventCategoryTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.AuditElements.EventCategoryType;\n+import org.apache.syncope.common.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.beans.SchedTask;\n+import org.apache.syncope.core.persistence.beans.SyncTask;\n+import org.apache.syncope.core.persistence.dao.ResourceDAO;\n+import org.apache.syncope.core.persistence.dao.TaskDAO;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n+import org.springframework.core.io.support.ResourcePatternResolver;\n+import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n+import org.springframework.core.type.classreading.MetadataReader;\n+import org.springframework.core.type.classreading.MetadataReaderFactory;\n+import org.springframework.util.ClassUtils;\n+import org.springframework.util.SystemPropertyUtils;\n \n @Controller\n @RequestMapping(\"/logger\")\n-public class LoggerController extends AbstractController {\n+public class LoggerController extends AbstractTransactionalController<LoggerTO> {\n \n     @Autowired\n-    private AuditManager auditManager;\n+    private LoggerDAO loggerDAO;\n \n     @Autowired\n-    private LoggerDAO loggerDAO;\n+    private ResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private TaskDAO taskDAO;\n \n     private List<LoggerTO> list(final SyncopeLoggerType type) {\n         List<LoggerTO> result = new ArrayList<LoggerTO>();\n@@ -69,9 +87,6 @@ private List<LoggerTO> list(final SyncopeLoggerType type) {\n             result.add(loggerTO);\n         }\n \n-        auditManager.audit(Category.logger, LoggerSubCategory.list, Result.success,\n-                \"Successfully listed all loggers (\" + type + \"): \" + result.size());\n-\n         return result;\n     }\n \n@@ -92,7 +107,7 @@ public List<AuditLoggerName> listAudits() {\n             try {\n                 result.add(AuditLoggerName.fromLoggerName(logger.getName()));\n             } catch (Exception e) {\n-                LOG.error(\"Unexpected audit logger name: {}\", logger.getName(), e);\n+                LOG.warn(\"Unexpected audit logger name: {}\", logger.getName(), e);\n             }\n         }\n \n@@ -134,9 +149,6 @@ private LoggerTO setLevel(final String name, final Level level, final SyncopeLog\n         LoggerTO result = new LoggerTO();\n         BeanUtils.copyProperties(syncopeLogger, result);\n \n-        auditManager.audit(Category.logger, LoggerSubCategory.setLevel, Result.success,\n-                String.format(\"Successfully set level %s to logger %s (%s)\", level, name, expectedType));\n-\n         return result;\n     }\n \n@@ -182,9 +194,6 @@ private LoggerTO delete(final String name, final SyncopeLoggerType expectedType)\n         Logger logger = lc.getLogger(name);\n         logger.setLevel(Level.OFF);\n \n-        auditManager.audit(Category.logger, LoggerSubCategory.setLevel, Result.success, String.format(\n-                \"Successfully deleted logger %s (%s)\", name, expectedType));\n-\n         return loggerToDelete;\n     }\n \n@@ -212,4 +221,92 @@ public void disableAudit(@RequestBody final AuditLoggerName auditLoggerName) {\n             throw sccee;\n         }\n     }\n+\n+    @RequestMapping(method = RequestMethod.GET, value = \"/events\")\n+    public List<EventCategoryTO> listAuditEvents() {\n+        // use set to avoi duplications or null elements\n+        final Set<EventCategoryTO> events = new HashSet<EventCategoryTO>();\n+\n+        try {\n+            final ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();\n+            final MetadataReaderFactory metadataReaderFactory =\n+                    new CachingMetadataReaderFactory(resourcePatternResolver);\n+\n+            final String packageSearchPath =\n+                    ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX\n+                    + ClassUtils.convertClassNameToResourcePath(\n+                    SystemPropertyUtils.resolvePlaceholders(this.getClass().getPackage().getName()))\n+                    + \"/\" + \"**/*.class\";\n+\n+            final Resource[] resources = resourcePatternResolver.getResources(packageSearchPath);\n+            for (Resource resource : resources) {\n+                if (resource.isReadable()) {\n+                    final MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(resource);\n+                    final Class<?> clazz = Class.forName(metadataReader.getClassMetadata().getClassName());\n+\n+                    if (clazz.isAnnotationPresent(Controller.class)) {\n+                        final EventCategoryTO eventCategoryTO = new EventCategoryTO();\n+                        eventCategoryTO.setCategory(clazz.getSimpleName());\n+                        for (Method method : clazz.getDeclaredMethods()) {\n+                            if (Modifier.isPublic(method.getModifiers())) {\n+                                eventCategoryTO.getEvents().add(method.getName());\n+                            }\n+                        }\n+                        events.add(eventCategoryTO);\n+                    }\n+                }\n+            }\n+\n+            events.add(new EventCategoryTO(EventCategoryType.PROPAGATION));\n+            events.add(new EventCategoryTO(EventCategoryType.SYNCHRONIZATION));\n+\n+            for (AttributableType attributableType : AttributableType.values()) {\n+                for (ExternalResource resource : resourceDAO.findAll()) {\n+                    final EventCategoryTO propEventCategoryTO = new EventCategoryTO(EventCategoryType.PROPAGATION);\n+                    final EventCategoryTO syncEventCategoryTO = new EventCategoryTO(EventCategoryType.SYNCHRONIZATION);\n+\n+                    propEventCategoryTO.setCategory(attributableType.name().toLowerCase());\n+                    propEventCategoryTO.setSubcategory(resource.getName());\n+\n+                    syncEventCategoryTO.setCategory(attributableType.name().toLowerCase());\n+                    syncEventCategoryTO.setSubcategory(resource.getName());\n+\n+                    for (ResourceOperation resourceOperation : ResourceOperation.values()) {\n+                        propEventCategoryTO.getEvents().add(resourceOperation.name().toLowerCase());\n+                        syncEventCategoryTO.getEvents().add(resourceOperation.name().toLowerCase());\n+                    }\n+\n+                    events.add(propEventCategoryTO);\n+                    events.add(syncEventCategoryTO);\n+                }\n+            }\n+\n+            for (SchedTask task : taskDAO.findAll(SchedTask.class)) {\n+                final EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n+                eventCategoryTO.setCategory(Class.forName(task.getJobClassName()).getSimpleName());\n+                events.add(eventCategoryTO);\n+            }\n+\n+            for (SyncTask task : taskDAO.findAll(SyncTask.class)) {\n+                final EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n+                eventCategoryTO.setCategory(Class.forName(task.getJobClassName()).getSimpleName());\n+                events.add(eventCategoryTO);\n+            }\n+\n+\n+        } catch (Exception e) {\n+            LOG.error(\"Failure retrieving audit/notification events\", e);\n+        }\n+\n+        return new ArrayList<EventCategoryTO>(events);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected LoggerTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+        throw new UnresolvedReferenceException();\n+    }\n }"},{"sha":"a76484f7505f9fc8908add144ccedff37f811a6d","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/NotificationController.java","status":"modified","additions":33,"deletions":24,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,16 +18,12 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.servlet.http.HttpServletResponse;\n-\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.to.NotificationTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.NotificationSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.Notification;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.NotificationDAO;\n@@ -42,10 +38,7 @@\n \n @Controller\n @RequestMapping(\"/notification\")\n-public class NotificationController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class NotificationController extends AbstractTransactionalController<NotificationTO> {\n \n     @Autowired\n     private NotificationDAO notificationDAO;\n@@ -76,9 +69,6 @@ public List<NotificationTO> list() {\n             notificationTOs.add(binder.getNotificationTO(notification));\n         }\n \n-        auditManager.audit(Category.notification, NotificationSubCategory.list, Result.success,\n-                \"Successfully listed all notifications: \" + notificationTOs.size());\n-\n         return notificationTOs;\n     }\n \n@@ -92,10 +82,7 @@ public NotificationTO create(final HttpServletResponse response, @RequestBody fi\n     @PreAuthorize(\"hasRole('NOTIFICATION_CREATE')\")\n     public NotificationTO createInternal(final NotificationTO notificationTO) {\n         LOG.debug(\"Notification create called with parameter {}\", notificationTO);\n-        Notification notification = notificationDAO.save(binder.createNotification(notificationTO));\n-        auditManager.audit(Category.notification, NotificationSubCategory.create, Result.success,\n-                \"Successfully created notification: \" + notification.getId());\n-        return binder.getNotificationTO(notification);\n+        return binder.getNotificationTO(notificationDAO.save(binder.createNotification(notificationTO)));\n     }\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_UPDATE')\")\n@@ -113,9 +100,6 @@ public NotificationTO update(@RequestBody final NotificationTO notificationTO) {\n         binder.updateNotification(notification, notificationTO);\n         notification = notificationDAO.save(notification);\n \n-        auditManager.audit(Category.notification, NotificationSubCategory.update, Result.success,\n-                \"Successfully updated notification: \" + notification.getId());\n-\n         return binder.getNotificationTO(notification);\n     }\n \n@@ -130,12 +114,37 @@ public NotificationTO delete(@PathVariable(\"notificationId\") final Long notifica\n         }\n \n         NotificationTO notificationToDelete = binder.getNotificationTO(notification);\n+        notificationDAO.delete(notificationId);\n+        return notificationToDelete;\n+    }\n \n-        auditManager.audit(Category.notification, NotificationSubCategory.delete, Result.success,\n-                \"Successfully deleted notification: \" + notification.getId());\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected NotificationTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+        Long id = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; id == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    id = (Long) args[i];\n+                } else if (args[i] instanceof NotificationTO) {\n+                    id = ((NotificationTO) args[i]).getId();\n+                }\n+            }\n+        }\n \n-        notificationDAO.delete(notificationId);\n+        if (id != null) {\n+            try {\n+                return binder.getNotificationTO(notificationDAO.find(id));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n \n-        return notificationToDelete;\n+        throw new UnresolvedReferenceException();\n     }\n }"},{"sha":"2690519161b36d3e955c92fdf7328483abf5cfe8","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":34,"deletions":45,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,21 +18,17 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n-import java.util.Set;\n import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.PolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n-import org.apache.syncope.common.types.AuditElements;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.PolicySubCategory;\n-import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.PolicyType;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n@@ -52,14 +48,11 @@\n \n @Controller\n @RequestMapping(\"/policy\")\n-public class PolicyController extends AbstractController {\n+public class PolicyController extends AbstractTransactionalController<PolicyTO> {\n \n     @Autowired\n     private ImplementationClassNamesLoader classNamesLoader;\n \n-    @Autowired\n-    private AuditManager auditManager;\n-\n     @Autowired\n     private PolicyDAO policyDAO;\n \n@@ -84,24 +77,13 @@ public SyncPolicyTO create(final HttpServletResponse response, @RequestBody fina\n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     public <T extends PolicyTO> T createInternal(final T policyTO) {\n         LOG.debug(\"Creating policy \" + policyTO);\n-\n-        final Policy policy = binder.getPolicy(null, policyTO);\n-\n-        auditManager.audit(Category.policy, PolicySubCategory.create, Result.success,\n-                \"Successfully created \" + policy.getType().toString() + \" policy: \" + policy.getId());\n-\n-        return binder.getPolicyTO(policyDAO.save(policy));\n+        return binder.getPolicyTO(policyDAO.save(binder.getPolicy(null, policyTO)));\n     }\n \n     private <T extends PolicyTO, K extends Policy> T update(final T policyTO, final K policy) {\n         LOG.debug(\"Updating policy \" + policyTO);\n-\n         binder.getPolicy(policy, policyTO);\n         K savedPolicy = policyDAO.save(policy);\n-\n-        auditManager.audit(Category.policy, PolicySubCategory.update, Result.success,\n-                \"Successfully updated policy (\" + savedPolicy.getType() + \"): \" + savedPolicy.getId());\n-\n         return binder.getPolicyTO(savedPolicy);\n     }\n \n@@ -149,9 +131,6 @@ public List<PolicyTO> list(@PathVariable(\"kind\") final String kind) {\n             policyTOs.add(binder.getPolicyTO(policy));\n         }\n \n-        auditManager.audit(Category.policy, PolicySubCategory.list, Result.success,\n-                \"Successfully listed all policies (\" + kind + \"): \" + policyTOs.size());\n-\n         return policyTOs;\n     }\n \n@@ -165,9 +144,6 @@ public PasswordPolicyTO getGlobalPasswordPolicy() {\n             throw new NotFoundException(\"No password policy found\");\n         }\n \n-        auditManager.audit(Category.policy, PolicySubCategory.read, Result.success,\n-                \"Successfully read global password policy: \" + policy.getId());\n-\n         return (PasswordPolicyTO) binder.getPolicyTO(policy);\n     }\n \n@@ -181,9 +157,6 @@ public AccountPolicyTO getGlobalAccountPolicy() {\n             throw new NotFoundException(\"No account policy found\");\n         }\n \n-        auditManager.audit(Category.policy, PolicySubCategory.read, Result.success,\n-                \"Successfully read global account policy: \" + policy.getId());\n-\n         return (AccountPolicyTO) binder.getPolicyTO(policy);\n     }\n \n@@ -197,9 +170,6 @@ public SyncPolicyTO getGlobalSyncPolicy() {\n             throw new NotFoundException(\"No sync policy found\");\n         }\n \n-        auditManager.audit(Category.policy, PolicySubCategory.read, Result.success,\n-                \"Successfully read global sync policy: \" + policy.getId());\n-\n         return (SyncPolicyTO) binder.getPolicyTO(policy);\n     }\n \n@@ -213,9 +183,6 @@ public <T extends PolicyTO> T read(@PathVariable(\"id\") final Long id) {\n             throw new NotFoundException(\"Policy \" + id + \" not found\");\n         }\n \n-        auditManager.audit(Category.policy, PolicySubCategory.read, Result.success,\n-                \"Successfully read policy (\" + policy.getType() + \"): \" + policy.getId());\n-\n         return binder.getPolicyTO(policy);\n     }\n \n@@ -230,21 +197,43 @@ public PolicyTO delete(@PathVariable(\"id\") final Long id) {\n         PolicyTO policyToDelete = binder.getPolicyTO(policy);\n         policyDAO.delete(id);\n \n-        auditManager.audit(Category.policy, PolicySubCategory.delete, Result.success,\n-                \"Successfully deleted policy: \" + id);\n-\n         return policyToDelete;\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/syncCorrelationRuleClasses\")\n     public ModelAndView getSyncCorrelationRuleClasses() {\n-        final Set<String> correlationRules =\n-                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_CORRELATION_RULES);\n+        return new ModelAndView().addObject(\n+                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_CORRELATION_RULES));\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected PolicyTO resolveReference(final Method method, final Object... args) throws\n+            UnresolvedReferenceException {\n+        Long id = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; id == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    id = (Long) args[i];\n+                } else if (args[i] instanceof PolicyTO) {\n+                    id = ((PolicyTO) args[i]).getId();\n+                }\n+            }\n+        }\n \n-        auditManager.audit(Category.policy, AuditElements.PolicySubCategory.getCorrelationRuleClasses,\n-                Result.success, \"Successfully listed all correlation rule classes: \" + correlationRules.size());\n+        if (id != null) {\n+            try {\n+                return binder.getPolicyTO(policyDAO.find(id));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n \n-        return new ModelAndView().addObject(correlationRules);\n+        throw new UnresolvedReferenceException();\n     }\n }"},{"sha":"f3131b376aaa4cd63ce0d9d1c00c5fca2ca507a9","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":35,"deletions":52,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -21,6 +21,7 @@\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.HashMap;\n@@ -39,20 +40,17 @@\n import org.apache.cocoon.sax.component.XMLSerializer;\n import org.apache.cocoon.sax.component.XSLTTransformer;\n import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.report.ReportletConf;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.ReportSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.ReportExecExportFormat;\n import static org.apache.syncope.common.types.ReportExecExportFormat.RTF;\n import org.apache.syncope.common.types.ReportExecStatus;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.init.JobInstanceLoader;\n import org.apache.syncope.core.persistence.beans.Report;\n import org.apache.syncope.core.persistence.beans.ReportExec;\n@@ -80,10 +78,7 @@\n \n @Controller\n @RequestMapping(\"/report\")\n-public class ReportController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class ReportController extends AbstractTransactionalController<ReportTO> {\n \n     @Autowired\n     private ReportDAO reportDAO;\n@@ -128,9 +123,6 @@ public ReportTO createInternal(final ReportTO reportTO) {\n             throw scce;\n         }\n \n-        auditManager.audit(Category.report, ReportSubCategory.create, Result.success,\n-                \"Successfully created report: \" + report.getId());\n-\n         return binder.getReportTO(report);\n     }\n \n@@ -160,9 +152,6 @@ public ReportTO update(@RequestBody final ReportTO reportTO) {\n             throw sccee;\n         }\n \n-        auditManager.audit(Category.report, ReportSubCategory.update, Result.success,\n-                \"Successfully updated report: \" + report.getId());\n-\n         return binder.getReportTO(report);\n     }\n \n@@ -180,10 +169,6 @@ public List<ReportTO> list() {\n         for (Report report : reports) {\n             result.add(binder.getReportTO(report));\n         }\n-\n-        auditManager.audit(Category.report, ReportSubCategory.list, Result.success,\n-                \"Successfully listed all reports: \" + result.size());\n-\n         return result;\n     }\n \n@@ -195,10 +180,6 @@ public List<ReportTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"\n         for (Report report : reports) {\n             result.add(binder.getReportTO(report));\n         }\n-\n-        auditManager.audit(Category.report, ReportSubCategory.list, Result.success,\n-                \"Successfully listed reports (page=\" + page + \", size=\" + size + \"): \" + result.size());\n-\n         return result;\n     }\n \n@@ -219,9 +200,6 @@ public Set<String> getReportletConfClassesInternal() {\n                 reportletConfClasses.add(reportletConfClass.getName());\n             }\n         }\n-\n-        auditManager.audit(Category.report, ReportSubCategory.getReportletConfClasses, Result.success,\n-                \"Successfully listed all ReportletConf classes: \" + reportletConfClasses.size());\n         return reportletConfClasses;\n     }\n \n@@ -232,10 +210,6 @@ public ReportTO read(@PathVariable(\"reportId\") final Long reportId) {\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportId);\n         }\n-\n-        auditManager.audit(Category.report, ReportSubCategory.read, Result.success,\n-                \"Successfully read report: \" + report.getId());\n-\n         return binder.getReportTO(report);\n     }\n \n@@ -247,10 +221,6 @@ public ReportExecTO readExecution(@PathVariable(\"executionId\") final Long execut\n         if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);\n         }\n-\n-        auditManager.audit(Category.report, ReportSubCategory.readExecution, Result.success,\n-                \"Successfully read report execution: \" + reportExec.getId());\n-\n         return binder.getReportExecTO(reportExec);\n     }\n \n@@ -343,9 +313,6 @@ public void exportExecutionResultInternal(final OutputStream os, final ReportExe\n             IOUtils.closeQuietly(zis);\n             IOUtils.closeQuietly(bais);\n         }\n-\n-        auditManager.audit(Category.report, ReportSubCategory.exportExecutionResult, Result.success,\n-                \"Successfully exported report execution: \" + reportExec.getId());\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n@@ -384,15 +351,9 @@ public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) {\n \n             scheduler.getScheduler().triggerJob(\n                     new JobKey(JobInstanceLoader.getJobName(report), Scheduler.DEFAULT_GROUP));\n-\n-            auditManager.audit(Category.report, ReportSubCategory.execute, Result.success,\n-                    \"Successfully started execution for report: \" + report.getId());\n         } catch (Exception e) {\n             LOG.error(\"While executing report {}\", report, e);\n \n-            auditManager.audit(Category.report, ReportSubCategory.execute, Result.failure,\n-                    \"Could not start execution for report: \" + report.getId(), e);\n-\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n@@ -419,14 +380,8 @@ public ReportTO delete(@PathVariable(\"reportId\") final Long reportId) {\n         }\n \n         ReportTO deletedReport = binder.getReportTO(report);\n-\n         jobInstanceLoader.unregisterJob(report);\n-\n         reportDAO.delete(report);\n-\n-        auditManager.audit(Category.report, ReportSubCategory.delete, Result.success,\n-                \"Successfully deleted report: \" + report.getId());\n-\n         return deletedReport;\n     }\n \n@@ -439,12 +394,40 @@ public ReportExecTO deleteExecution(@PathVariable(\"executionId\") final Long exec\n         }\n \n         ReportExecTO reportExecToDelete = binder.getReportExecTO(reportExec);\n-\n         reportExecDAO.delete(reportExec);\n+        return reportExecToDelete;\n+    }\n \n-        auditManager.audit(Category.report, ReportSubCategory.deleteExecution, Result.success,\n-                \"Successfully deleted report execution: \" + reportExec.getId());\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected ReportTO resolveReference(final Method method, final Object... args) throws\n+            UnresolvedReferenceException {\n+        Long id = null;\n+\n+        if (ArrayUtils.isNotEmpty(args) && (\"create\".equals(method.getName())\n+                || \"createInternal\".equals(method.getName())\n+                || \"update\".equals(method.getName())\n+                || \"delete\".equals(method.getName()))) {\n+            for (int i = 0; id == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    id = (Long) args[i];\n+                } else if (args[i] instanceof ReportTO) {\n+                    id = ((ReportTO) args[i]).getId();\n+                }\n+            }\n+        }\n \n-        return reportExecToDelete;\n+        if (id != null) {\n+            try {\n+                return binder.getReportTO(reportDAO.find(id));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n     }\n }"},{"sha":"7ca6d5d6b6fcc27044bb1562f950c1f19407652e","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":36,"deletions":41,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,25 +18,22 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.List;\n import java.util.Set;\n import javax.persistence.EntityExistsException;\n import javax.servlet.http.HttpServletResponse;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.BulkActionRes;\n import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.AuditElements;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.ResourceSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n@@ -73,10 +70,7 @@\n \n @Controller\n @RequestMapping(\"/resource\")\n-public class ResourceController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class ResourceController extends AbstractTransactionalController<ResourceTO> {\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n@@ -125,9 +119,6 @@ public ResourceTO create(final HttpServletResponse response, @RequestBody final\n \n         ExternalResource resource = resourceDAO.save(binder.create(resourceTO));\n \n-        auditManager.audit(Category.resource, ResourceSubCategory.create, Result.success,\n-                \"Successfully created resource: \" + resource.getName());\n-\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getResourceTO(resource);\n     }\n@@ -145,9 +136,6 @@ public ResourceTO update(@RequestBody final ResourceTO resourceTO) {\n         resource = binder.update(resource, resourceTO);\n         resource = resourceDAO.save(resource);\n \n-        auditManager.audit(Category.resource, ResourceSubCategory.update, Result.success,\n-                \"Successfully updated resource: \" + resource.getName());\n-\n         return binder.getResourceTO(resource);\n     }\n \n@@ -161,9 +149,6 @@ public ResourceTO delete(@PathVariable(\"resourceName\") final String resourceName\n \n         ResourceTO resourceToDelete = binder.getResourceTO(resource);\n \n-        auditManager.audit(Category.resource, ResourceSubCategory.delete, Result.success,\n-                \"Successfully deleted resource: \" + resource.getName());\n-\n         resourceDAO.delete(resourceName);\n \n         return resourceToDelete;\n@@ -178,9 +163,6 @@ public ResourceTO read(@PathVariable(\"resourceName\") final String resourceName)\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n \n-        auditManager.audit(Category.resource, ResourceSubCategory.read, Result.success,\n-                \"Successfully read resource: \" + resource.getName());\n-\n         return binder.getResourceTO(resource);\n     }\n \n@@ -190,9 +172,6 @@ public ModelAndView getPropagationActionsClasses() {\n         Set<String> actionsClasses = classNamesLoader.getClassNames(\n                 ImplementationClassNamesLoader.Type.PROPAGATION_ACTIONS);\n \n-        auditManager.audit(Category.resource, AuditElements.ResourceSubCategory.getPropagationActionsClasses,\n-                Result.success, \"Successfully listed all PropagationActions classes: \" + actionsClasses.size());\n-\n         return new ModelAndView().addObject(actionsClasses);\n     }\n \n@@ -210,11 +189,6 @@ public List<ResourceTO> list(@RequestParam(required = false, value = \"connInstan\n \n         List<ResourceTO> result = binder.getResourceTOs(resources);\n \n-        auditManager.audit(Category.resource, ResourceSubCategory.list, Result.success,\n-                connInstanceId == null\n-                ? \"Successfully listed all resources: \" + result.size()\n-                : \"Successfully listed resources for connector \" + connInstanceId + \": \" + result.size());\n-\n         return result;\n     }\n \n@@ -244,14 +218,15 @@ public ConnObjectTO getConnectorObject(@PathVariable(\"resourceName\") final Strin\n                 throw new IllegalArgumentException(\"Not supported for MEMBERSHIP\");\n         }\n         if (attributable == null) {\n-            throw new NotFoundException(type + \" \" + id );\n+            throw new NotFoundException(type + \" \" + id);\n         }\n \n         final AttributableUtil attrUtil = AttributableUtil.getInstance(type);\n \n         AbstractMappingItem accountIdItem = attrUtil.getAccountIdItem(resource);\n         if (accountIdItem == null) {\n-            throw new NotFoundException(\"AccountId mapping for \" + type + \" \" + id + \" on resource '\" + resourceName + \"'\");\n+            throw new NotFoundException(\"AccountId mapping for \" + type + \" \" + id + \" on resource '\" + resourceName\n+                    + \"'\");\n         }\n         final String accountIdValue =\n                 MappingUtil.getAccountIdValue(attributable, resource, attrUtil.getAccountIdItem(resource));\n@@ -274,10 +249,6 @@ public ConnObjectTO getConnectorObject(@PathVariable(\"resourceName\") final Strin\n             attributes.add(connectorObject.getName());\n         }\n \n-        auditManager.audit(Category.resource, ResourceSubCategory.getObject, Result.success,\n-                \"Successfully read object \" + accountIdValue + \" with class \" + objectClass\n-                + \" from resource \" + resourceName);\n-\n         return connObjectUtil.getConnObjectTO(connectorObject);\n     }\n \n@@ -293,13 +264,7 @@ public ModelAndView check(@RequestBody final ResourceTO resourceTO) {\n         try {\n             connector.test();\n             result = true;\n-\n-            auditManager.audit(Category.connector, AuditElements.ConnectorSubCategory.check, Result.success,\n-                    \"Successfully checked connector: \" + resourceTO);\n         } catch (Exception e) {\n-            auditManager.audit(Category.connector, AuditElements.ConnectorSubCategory.check, Result.failure,\n-                    \"Unsuccessful check for connector: \" + resourceTO, e);\n-\n             LOG.error(\"Test connection failure {}\", e);\n             result = false;\n         }\n@@ -330,4 +295,34 @@ public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n \n         return res;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected ResourceTO resolveReference(final Method method, final Object... args) throws\n+            UnresolvedReferenceException {\n+        String name = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; name == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    name = (String) args[i];\n+                } else if (args[i] instanceof ResourceTO) {\n+                    name = ((ResourceTO) args[i]).getName();\n+                }\n+            }\n+        }\n+\n+        if (name != null) {\n+            try {\n+                return binder.getResourceTO(resourceDAO.find(name));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n }"},{"sha":"d89137ca9bcbfa407050470322a01fb4eb019959","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":35,"deletions":45,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,21 +18,19 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import static org.apache.syncope.core.rest.controller.AbstractController.LOG;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.AuditElements;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.RoleSubCategory;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -51,8 +49,6 @@\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.security.core.context.SecurityContextHolder;\n@@ -66,15 +62,7 @@\n \n @Controller\n @RequestMapping(\"/role\")\n-public class RoleController {\n-\n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(RoleController.class);\n-\n-    @Autowired\n-    protected AuditManager auditManager;\n+public class RoleController extends AbstractController<RoleTO> {\n \n     @Autowired\n     protected RoleDAO roleDAO;\n@@ -111,9 +99,6 @@ public RoleTO read(@PathVariable(\"roleId\") final Long roleId) {\n             throw new UnauthorizedRoleException(role.getId());\n         }\n \n-        auditManager.audit(Category.role, RoleSubCategory.read, Result.success,\n-                \"Successfully read role: \" + role.getId());\n-\n         return binder.getRoleTO(role);\n     }\n \n@@ -141,9 +126,6 @@ public RoleTO selfRead(@PathVariable(\"roleId\") final Long roleId) {\n             throw new UnauthorizedRoleException(role.getId());\n         }\n \n-        auditManager.audit(Category.role, RoleSubCategory.selfRead, Result.success,\n-                \"Successfully read own role: \" + role.getId());\n-\n         return binder.getRoleTO(role);\n     }\n \n@@ -162,11 +144,6 @@ public RoleTO parent(@PathVariable(\"roleId\") final Long roleId) {\n                 ? null\n                 : binder.getRoleTO(role.getParent());\n \n-        auditManager.audit(Category.role, RoleSubCategory.parent, Result.success,\n-                result == null\n-                ? \"Role \" + role.getId() + \" is a root role\"\n-                : \"Found parent for role \" + role.getId() + \": \" + result.getId());\n-\n         return result;\n     }\n \n@@ -186,9 +163,6 @@ public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId) {\n             }\n         }\n \n-        auditManager.audit(Category.role, RoleSubCategory.children, Result.success,\n-                \"Found \" + childrenTOs.size() + \" children of role \" + roleId);\n-\n         return childrenTOs;\n     }\n \n@@ -224,9 +198,6 @@ public List<RoleTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n             result.add(binder.getRoleTO(role));\n         }\n \n-        auditManager.audit(Category.role, AuditElements.RoleSubCategory.read, Result.success,\n-                \"Successfully searched for roles (page=\" + page + \", size=\" + size + \"): \" + result.size());\n-\n         return result;\n     }\n \n@@ -256,9 +227,6 @@ public List<RoleTO> list() {\n             roleTOs.add(binder.getRoleTO(role));\n         }\n \n-        auditManager.audit(Category.role, RoleSubCategory.list, Result.success,\n-                \"Successfully listed all roles: \" + roleTOs.size());\n-\n         return roleTOs;\n     }\n \n@@ -300,9 +268,6 @@ public RoleTO create(final HttpServletResponse response, @RequestBody final Role\n \n         LOG.debug(\"About to return created role\\n{}\", savedTO);\n \n-        auditManager.audit(Category.role, RoleSubCategory.create, Result.success,\n-                \"Successfully created role: \" + savedTO.getId());\n-\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return savedTO;\n     }\n@@ -338,9 +303,6 @@ public RoleTO update(@RequestBody final RoleMod roleMod) {\n         final RoleTO updatedTO = binder.getRoleTO(updated.getResult());\n         updatedTO.setPropagationStatusTOs(propagationReporter.getStatuses());\n \n-        auditManager.audit(Category.role, RoleSubCategory.update, Result.success,\n-                \"Successfully updated role: \" + role.getId());\n-\n         LOG.debug(\"About to return updated role\\n{}\", updatedTO);\n \n         return updatedTO;\n@@ -376,11 +338,39 @@ public RoleTO delete(@PathVariable(\"roleId\") final Long roleId) {\n \n         rwfAdapter.delete(roleId);\n \n-        auditManager.audit(Category.role, RoleSubCategory.delete, Result.success,\n-                \"Successfully deleted role: \" + roleId);\n-\n         LOG.debug(\"Role successfully deleted: {}\", roleId);\n \n         return roleTO;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected RoleTO resolveReference(final Method method, final Object... args) throws UnresolvedReferenceException {\n+        Long id = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; id == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    id = (Long) args[i];\n+                } else if (args[i] instanceof RoleTO) {\n+                    id = ((RoleTO) args[i]).getId();\n+                } else if (args[i] instanceof RoleMod) {\n+                    id = ((RoleMod) args[i]).getId();\n+                }\n+            }\n+        }\n+\n+        if (id != null) {\n+            try {\n+                return binder.getRoleTO(id);\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n }"},{"sha":"fa0079310009c6eaf25c714d9e85b04860bae463","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":41,"deletions":30,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,19 +18,17 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.EntityExistsException;\n import javax.servlet.http.HttpServletResponse;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.to.SchemaTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.SchemaSubCategory;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n@@ -47,10 +45,7 @@\n \n @Controller\n @RequestMapping(\"/schema\")\n-public class SchemaController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class SchemaController extends AbstractTransactionalController<SchemaTO> {\n \n     @Autowired\n     private SchemaDAO schemaDAO;\n@@ -83,11 +78,8 @@ public SchemaTO create(final HttpServletResponse response, @RequestBody final Sc\n         binder.create(schemaTO, schema);\n         schema = schemaDAO.save(schema);\n \n-        auditManager.audit(Category.schema, SchemaSubCategory.create, Result.success,\n-                \"Successfully created schema: \" + kind + \"/\" + schema.getName());\n-\n         response.setStatus(HttpServletResponse.SC_CREATED);\n-        return binder.getSchemaTO(schema, attrUtil);\n+        return binder.getSchemaTO(schema);\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n@@ -101,13 +93,8 @@ public SchemaTO delete(@PathVariable(\"kind\") final String kind, @PathVariable(\"s\n             throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n         }\n \n-        SchemaTO schemaToDelete = binder.getSchemaTO(schema, getAttributableUtil(kind));\n-\n+        SchemaTO schemaToDelete = binder.getSchemaTO(schema);\n         schemaDAO.delete(schemaName, getAttributableUtil(kind));\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.delete, Result.success,\n-                \"Successfully deleted schema: \" + kind + \"/\" + schema.getName());\n-\n         return schemaToDelete;\n     }\n \n@@ -118,12 +105,9 @@ public List<SchemaTO> list(@PathVariable(\"kind\") final String kind) {\n \n         List<SchemaTO> schemaTOs = new ArrayList<SchemaTO>(schemas.size());\n         for (AbstractSchema schema : schemas) {\n-            schemaTOs.add(binder.getSchemaTO(schema, attributableUtil));\n+            schemaTOs.add(binder.getSchemaTO(schema));\n         }\n \n-        auditManager.audit(Category.schema, SchemaSubCategory.list, Result.success,\n-                \"Successfully listed all schemas: \" + kind + \"/\" + schemaTOs.size());\n-\n         return schemaTOs;\n     }\n \n@@ -138,10 +122,7 @@ public SchemaTO read(@PathVariable(\"kind\") final String kind, @PathVariable(\"sch\n             throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n         }\n \n-        auditManager.audit(Category.schema, SchemaSubCategory.read, Result.success,\n-                \"Successfully read schema: \" + kind + \"/\" + schema.getName());\n-\n-        return binder.getSchemaTO(schema, attributableUtil);\n+        return binder.getSchemaTO(schema);\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_UPDATE')\")\n@@ -156,11 +137,41 @@ public SchemaTO update(@RequestBody final SchemaTO schemaTO, @PathVariable(\"kind\n         }\n \n         binder.update(schemaTO, schema, attributableUtil);\n-        schema = schemaDAO.save(schema);\n+        return binder.getSchemaTO(schemaDAO.save(schema));\n+    }\n \n-        auditManager.audit(Category.schema, SchemaSubCategory.update, Result.success,\n-                \"Successfully updated schema: \" + kind + \"/\" + schema.getName());\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected SchemaTO resolveReference(final Method method, final Object... args) throws\n+            UnresolvedReferenceException {\n+        String kind = null;\n+        String name = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; (name == null || kind == null) && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    if (kind == null) {\n+                        kind = (String) args[i];\n+                    } else {\n+                        name = (String) args[i];\n+                    }\n+                } else if (args[i] instanceof SchemaTO) {\n+                    name = ((SchemaTO) args[i]).getName();\n+                }\n+            }\n+        }\n+\n+        if (name != null) {\n+            try {\n+                return binder.getSchemaTO(schemaDAO.find(name, getAttributableUtil(kind).schemaClass()));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n \n-        return binder.getSchemaTO(schema, attributableUtil);\n+        throw new UnresolvedReferenceException();\n     }\n }"},{"sha":"97cdab3ef61be17cdab6bb2a8df19bd00477a887","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":41,"deletions":69,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,26 +18,23 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n-import java.util.Set;\n import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.BulkActionRes;\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.TaskExecTO;\n import org.apache.syncope.common.to.TaskTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.TaskSubCategory;\n import org.apache.syncope.common.types.PropagationMode;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.init.JobInstanceLoader;\n import org.apache.syncope.core.notification.NotificationJob;\n@@ -70,10 +67,7 @@\n \n @Controller\n @RequestMapping(\"/task\")\n-public class TaskController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class TaskController extends AbstractTransactionalController<TaskTO> {\n \n     @Autowired\n     private TaskDAO taskDAO;\n@@ -133,9 +127,6 @@ public TaskTO createSchedTaskInternal(final SchedTaskTO taskTO) {\n             throw scce;\n         }\n \n-        auditManager.audit(Category.task, TaskSubCategory.create, Result.success,\n-                \"Successfully created task: \" + task.getId() + \"/\" + taskUtil);\n-\n         return binder.getTaskTO(task, taskUtil);\n     }\n \n@@ -173,9 +164,6 @@ public TaskTO updateSched(@RequestBody final SchedTaskTO taskTO) {\n             throw scce;\n         }\n \n-        auditManager.audit(Category.task, TaskSubCategory.update, Result.success,\n-                \"Successfully udpated task: \" + task.getId() + \"/\" + taskUtil);\n-\n         return binder.getTaskTO(task, taskUtil);\n     }\n \n@@ -200,9 +188,6 @@ public List<TaskTO> list(@PathVariable(\"kind\") final String kind) {\n             taskTOs.add(binder.getTaskTO(task, taskUtil));\n         }\n \n-        auditManager.audit(Category.task, TaskSubCategory.list, Result.success,\n-                \"Successfully listed all tasks: \" + taskTOs.size() + \"/\" + taskUtil);\n-\n         return taskTOs;\n     }\n \n@@ -219,33 +204,21 @@ public List<TaskTO> list(@PathVariable(\"kind\") final String kind, @PathVariable(\n             taskTOs.add(binder.getTaskTO(task, taskUtil));\n         }\n \n-        auditManager.audit(Category.task, TaskSubCategory.list, Result.success,\n-                \"Successfully listed all tasks (page=\" + page + \", size=\" + size + \"): \"\n-                + taskTOs.size() + \"/\" + taskUtil);\n-\n         return taskTOs;\n     }\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/jobClasses\")\n     public ModelAndView getJobClasses() {\n-        Set<String> jobClasses = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.TASKJOB);\n-\n-        auditManager.audit(Category.task, TaskSubCategory.getJobClasses, Result.success,\n-                \"Successfully listed all Job classes: \" + jobClasses.size());\n-\n-        return new ModelAndView().addObject(jobClasses);\n+        return new ModelAndView().addObject(\n+                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.TASKJOB));\n     }\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/syncActionsClasses\")\n     public ModelAndView getSyncActionsClasses() {\n-        Set<String> actionsClasses = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_ACTIONS);\n-\n-        auditManager.audit(Category.task, TaskSubCategory.getSyncActionsClasses, Result.success,\n-                \"Successfully listed all SyncActions classes: \" + actionsClasses.size());\n-\n-        return new ModelAndView().addObject(actionsClasses);\n+        return new ModelAndView().addObject(\n+                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_ACTIONS));\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n@@ -255,12 +228,7 @@ public TaskTO read(@PathVariable(\"taskId\") final Long taskId) {\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n-        TaskUtil taskUtil = getTaskUtil(task);\n-\n-        auditManager.audit(Category.task, TaskSubCategory.read, Result.success,\n-                \"Successfully read task: \" + task.getId() + \"/\" + taskUtil);\n-\n-        return binder.getTaskTO(task, taskUtil);\n+        return binder.getTaskTO(task, getTaskUtil(task));\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n@@ -270,10 +238,6 @@ public TaskExecTO readExecution(@PathVariable(\"executionId\") final Long executio\n         if (taskExec == null) {\n             throw new NotFoundException(\"Task execution \" + executionId);\n         }\n-\n-        auditManager.audit(Category.task, TaskSubCategory.readExecution, Result.success,\n-                \"Successfully read task execution: \" + taskExec.getId());\n-\n         return binder.getTaskExecTO(taskExec);\n     }\n \n@@ -316,9 +280,6 @@ public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n                 } catch (Exception e) {\n                     LOG.error(\"While executing task {}\", task, e);\n \n-                    auditManager.audit(Category.task, TaskSubCategory.execute, Result.failure,\n-                            \"Could not start execution for task: \" + task.getId() + \"/\" + taskUtil, e);\n-\n                     SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(\n                             HttpStatus.BAD_REQUEST);\n                     SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n@@ -337,10 +298,6 @@ public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n             default:\n         }\n         LOG.debug(\"Execution finished for {}, {}\", task, result);\n-\n-        auditManager.audit(Category.task, TaskSubCategory.execute, Result.success,\n-                \"Successfully started execution for task: \" + task.getId() + \"/\" + taskUtil);\n-\n         return result;\n     }\n \n@@ -386,21 +343,12 @@ public TaskExecTO report(@PathVariable(\"executionId\") final Long executionId,\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n             scce.addException(sce);\n-\n-            auditManager.audit(Category.task, TaskSubCategory.report, Result.failure,\n-                    \"Could not reported execution status: \" + exec.getId() + \"/\" + taskUtil, scce);\n-\n             throw scce;\n         }\n \n         exec.setStatus(status.toString());\n         exec.setMessage(message);\n-        exec = taskExecDAO.save(exec);\n-\n-        auditManager.audit(Category.task, TaskSubCategory.report, Result.success,\n-                \"Successfully reported execution status: \" + exec.getId() + \"/\" + taskUtil);\n-\n-        return binder.getTaskExecTO(exec);\n+        return binder.getTaskExecTO(taskExecDAO.save(exec));\n     }\n \n     @PreAuthorize(\"hasRole('TASK_DELETE')\")\n@@ -419,10 +367,6 @@ public TaskTO delete(@PathVariable(\"taskId\") final Long taskId) {\n         }\n \n         taskDAO.delete(task);\n-\n-        auditManager.audit(Category.task, TaskSubCategory.delete, Result.success,\n-                \"Successfully deleted task: \" + task.getId() + \"/\" + taskUtil);\n-\n         return taskToDelete;\n     }\n \n@@ -435,11 +379,7 @@ public TaskExecTO deleteExecution(@PathVariable(\"executionId\") final Long execut\n         }\n \n         TaskExecTO taskExecutionToDelete = binder.getTaskExecTO(taskExec);\n-\n         taskExecDAO.delete(taskExec);\n-\n-        auditManager.audit(Category.task, TaskSubCategory.deleteExecution, Result.success,\n-                \"Successfully deleted task execution: \" + taskExec.getId());\n         return taskExecutionToDelete;\n     }\n \n@@ -491,4 +431,36 @@ public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n \n         return res;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected TaskTO resolveReference(final Method method, final Object... args) throws\n+            UnresolvedReferenceException {\n+        Long id = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)\n+                && !\"deleteExecution\".equals(method.getName()) && !\"readExecution\".equals(method.getName())) {\n+            for (int i = 0; id == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    id = (Long) args[i];\n+                } else if (args[i] instanceof TaskTO) {\n+                    id = ((TaskTO) args[i]).getId();\n+                }\n+            }\n+        }\n+\n+        if (id != null) {\n+            try {\n+                final Task task = taskDAO.find(id);\n+                return binder.getTaskTO(task, getTaskUtil(task));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n }"},{"sha":"7cd08e4921939af5cbbf92eae6df10ce6ee59ba6","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UnresolvedReferenceException.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnresolvedReferenceException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnresolvedReferenceException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnresolvedReferenceException.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.rest.controller;\n+\n+/**\n+ * Indicates unresolved bean reference.\n+ */\n+public class UnresolvedReferenceException extends Exception {\n+\n+    private static final long serialVersionUID = -675489116009955632L;\n+\n+    public UnresolvedReferenceException() {\n+    }\n+\n+    public UnresolvedReferenceException(Throwable cause) {\n+        super(cause);\n+    }\n+}"},{"sha":"04f2f2897d7f004c6327c3599ea897b646d632aa","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":52,"deletions":100,"changes":152,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,14 +18,16 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import static org.apache.syncope.core.rest.controller.AbstractController.LOG;\n+import java.lang.reflect.Method;\n import java.util.AbstractMap.SimpleEntry;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.InvalidSearchConditionException;\n@@ -37,15 +39,10 @@\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.UserSubCategory;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n-import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -64,8 +61,6 @@\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -87,15 +82,7 @@\n  */\n @Controller\n @RequestMapping(\"/user\")\n-public class UserController {\n-\n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(UserController.class);\n-\n-    @Autowired\n-    protected AuditManager auditManager;\n+public class UserController extends AbstractController<UserTO> {\n \n     @Autowired\n     protected UserDAO userDAO;\n@@ -118,9 +105,6 @@ public class UserController {\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    protected NotificationManager notificationManager;\n-\n     @Autowired\n     protected AttributableTransformer attrTransformer;\n \n@@ -134,8 +118,6 @@ public ModelAndView verifyPassword(@PathVariable(\"username\") String username,\n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @Transactional(readOnly = true)\n     public Boolean verifyPasswordInternal(final String username, final String password) {\n-        auditManager.audit(Category.user, UserSubCategory.create, Result.success,\n-                \"Verified password for: \" + username);\n         return binder.verifyPassword(username, password);\n     }\n \n@@ -181,9 +163,6 @@ public List<UserTO> list() {\n             userTOs.add(binder.getUserTO(user));\n         }\n \n-        auditManager.audit(Category.user, UserSubCategory.list, Result.success,\n-                \"Successfully listed all users: \" + userTOs.size());\n-\n         return userTOs;\n     }\n \n@@ -199,46 +178,28 @@ public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"si\n             userTOs.add(binder.getUserTO(user));\n         }\n \n-        auditManager.audit(Category.user, UserSubCategory.list, Result.success,\n-                \"Successfully listed all users (page=\" + page + \", size=\" + size + \"): \" + userTOs.size());\n-\n         return userTOs;\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{userId}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public UserTO read(@PathVariable(\"userId\") final Long userId) {\n-        UserTO result = binder.getUserTO(userId);\n-\n-        auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n-                \"Successfully read user: \" + userId);\n-\n-        return result;\n+        return binder.getUserTO(userId);\n     }\n \n     @PreAuthorize(\"#username == authentication.name or hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/readByUsername/{username}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public UserTO read(@PathVariable final String username) {\n-        UserTO result = binder.getUserTO(username);\n-\n-        auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n-                \"Successfully read user: \" + username);\n-\n-        return result;\n+        return binder.getUserTO(username);\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/self\")\n     @Transactional(readOnly = true)\n     public UserTO read() {\n-        UserTO userTO = binder.getAuthenticatedUserTO();\n-\n-        auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n-                \"Successfully read own data: \" + userTO.getUsername());\n-\n-        return userTO;\n+        return binder.getAuthenticatedUserTO();\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n@@ -273,9 +234,6 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n             result.add(binder.getUserTO(user));\n         }\n \n-        auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n-                \"Successfully searched for users (page=\" + page + \", size=\" + size + \"): \" + result.size());\n-\n         return result;\n     }\n \n@@ -322,16 +280,11 @@ public UserTO createInternal(final UserTO userTO) {\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        notificationManager.createTasks(created.getResult().getKey(), created.getPerformedTasks());\n-\n         final UserTO savedTO = binder.getUserTO(created.getResult().getKey());\n         savedTO.setPropagationStatusTOs(propagationReporter.getStatuses());\n \n         LOG.debug(\"About to return created user\\n{}\", savedTO);\n \n-        auditManager.audit(Category.user, UserSubCategory.create, Result.success,\n-                \"Successfully created user: \" + savedTO.getUsername());\n-\n         return savedTO;\n     }\n \n@@ -410,16 +363,10 @@ public UserTO update(@RequestBody final UserMod userMod) {\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        // 3. create notification tasks\n-        notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n-\n         // 4. prepare result, including propagation status on external resources\n         final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey());\n         updatedTO.setPropagationStatusTOs(propagationReporter.getStatuses());\n \n-        auditManager.audit(Category.user, UserSubCategory.update, Result.success,\n-                \"Successfully updated user: \" + updatedTO.getUsername());\n-\n         LOG.debug(\"About to return updated user\\n{}\", updatedTO);\n \n         return updatedTO;\n@@ -585,54 +532,33 @@ public UserTO executeWorkflow(@RequestBody final UserTO userTO, @PathVariable(\"t\n \n         taskExecutor.execute(tasks);\n \n-        notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n-\n         final UserTO savedTO = binder.getUserTO(updated.getResult());\n \n         LOG.debug(\"About to return updated user\\n{}\", savedTO);\n \n-        auditManager.audit(Category.user, UserSubCategory.executeWorkflow, Result.success,\n-                \"Successfully executed workflow action \" + taskId + \" on user: \" + userTO.getUsername());\n-\n         return savedTO;\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/list\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public List<WorkflowFormTO> getForms() {\n-        List<WorkflowFormTO> forms = uwfAdapter.getForms();\n-\n-        auditManager.audit(Category.user, UserSubCategory.getForms, Result.success,\n-                \"Successfully list workflow forms: \" + forms.size());\n-\n-        return forms;\n+        return uwfAdapter.getForms();\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public WorkflowFormTO getFormForUser(@PathVariable(\"userId\") final Long userId) {\n         SyncopeUser user = binder.getUserFromId(userId);\n-        WorkflowFormTO result = uwfAdapter.getForm(user.getWorkflowId());\n-\n-        auditManager.audit(Category.user, UserSubCategory.getFormForUser, Result.success,\n-                \"Successfully read workflow form for user: \" + user.getUsername());\n-\n-        return result;\n+        return uwfAdapter.getForm(user.getWorkflowId());\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_CLAIM')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/claim/{taskId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public WorkflowFormTO claimForm(@PathVariable(\"taskId\") final String taskId) {\n-        WorkflowFormTO result = uwfAdapter.claimForm(taskId,\n-                SecurityContextHolder.getContext().getAuthentication().getName());\n-\n-        auditManager.audit(Category.user, UserSubCategory.claimForm, Result.success,\n-                \"Successfully claimed workflow form: \" + taskId);\n-\n-        return result;\n+        return uwfAdapter.claimForm(taskId, SecurityContextHolder.getContext().getAuthentication().getName());\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_SUBMIT')\")\n@@ -661,9 +587,6 @@ public UserTO submitForm(@RequestBody final WorkflowFormTO form) {\n \n         final UserTO savedTO = binder.getUserTO(updated.getResult().getKey());\n \n-        auditManager.audit(Category.user, UserSubCategory.submitForm, Result.success,\n-                \"Successfully submitted workflow form for user: \" + savedTO.getUsername());\n-\n         LOG.debug(\"About to return user after form processing\\n{}\", savedTO);\n \n         return savedTO;\n@@ -688,14 +611,17 @@ protected UserTO setStatus(final SyncopeUser user, final String token,\n         }\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(user, status, resourcesToBeExcluded);\n-        taskExecutor.execute(tasks);\n-\n-        notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n+        PropagationReporter propReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propReporter.onPrimaryResourceFailure(tasks);\n+        }\n \n         final UserTO savedTO = binder.getUserTO(updated.getResult());\n-\n-        auditManager.audit(Category.user, UserSubCategory.setStatus, Result.success,\n-                \"Successfully changed status to \" + savedTO.getStatus() + \" for user: \" + savedTO.getUsername());\n+        savedTO.setPropagationStatusTOs(propReporter.getStatuses());\n \n         LOG.debug(\"About to return updated user\\n{}\", savedTO);\n \n@@ -722,9 +648,6 @@ protected UserTO doDelete(final Long userId) {\n                 owned.add(role.getId() + \" \" + role.getName());\n             }\n \n-            auditManager.audit(Category.user, UserSubCategory.delete, Result.failure,\n-                    \"Could not delete user: \" + userId + \" because of role(s) ownership \" + owned);\n-\n             SyncopeClientCompositeErrorException sccee =\n                     new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n@@ -740,7 +663,6 @@ protected UserTO doDelete(final Long userId) {\n         // information could only be available after uwfAdapter.delete(), which\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n-        notificationManager.createTasks(userId, Collections.singleton(\"delete\"));\n \n         List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(userId);\n \n@@ -760,9 +682,6 @@ protected UserTO doDelete(final Long userId) {\n \n         uwfAdapter.delete(userId);\n \n-        auditManager.audit(Category.user, UserSubCategory.delete, Result.success,\n-                \"Successfully deleted user: \" + userId);\n-\n         LOG.debug(\"User successfully deleted: {}\", userId);\n \n         return userTO;\n@@ -814,4 +733,37 @@ public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n \n         return res;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected UserTO resolveReference(final Method method, final Object... args) throws UnresolvedReferenceException {\n+        Object id = null;\n+\n+        if (ArrayUtils.isNotEmpty(args) && !\"claimForm\".equals(method.getName())) {\n+            for (int i = 0; id == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    id = (Long) args[i];\n+                } else if (args[i] instanceof String) {\n+                    id = (String) args[i];\n+                } else if (args[i] instanceof UserTO) {\n+                    id = ((UserTO) args[i]).getId();\n+                } else if (args[i] instanceof UserMod) {\n+                    id = ((UserMod) args[i]).getId();\n+                }\n+            }\n+        }\n+\n+        if (id != null) {\n+            try {\n+                return id instanceof Long ? binder.getUserTO((Long) id) : binder.getUserTO((String) id);\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n }"},{"sha":"5e2390b912ad990fb16afb4f4a3c253ac54455e7","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserRequestController.java","status":"modified","additions":24,"deletions":52,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,26 +18,20 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.persistence.RollbackException;\n-\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.UserRequestTO;\n import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.UserRequestSubCategory;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.SyncopeConf;\n import org.apache.syncope.core.persistence.beans.UserRequest;\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.UserRequestDAO;\n import org.apache.syncope.core.rest.data.UserRequestDataBinder;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n@@ -50,15 +44,7 @@\n \n @Controller\n @RequestMapping(\"/user/request\")\n-public class UserRequestController {\n-\n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(UserRequestController.class);\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class UserRequestController extends AbstractController<UserRequestTO> {\n \n     @Autowired\n     private ConfDAO confDAO;\n@@ -78,9 +64,6 @@ public Boolean isCreateAllowedByConf() {\n     @RequestMapping(method = RequestMethod.GET, value = \"/create/allowed\")\n     @Transactional(readOnly = true)\n     public ModelAndView isCreateAllowed() {\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.isCreateAllowed, Result.success,\n-                \"Successfully checked whether self create is allowed\");\n-\n         return new ModelAndView().addObject(isCreateAllowedByConf());\n     }\n \n@@ -102,12 +85,7 @@ public UserRequestTO create(@RequestBody final UserTO userTO) {\n \n         UserRequest request = new UserRequest();\n         request.setUserTO(userTO);\n-        request = userRequestDAO.save(request);\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.create, Result.success,\n-                \"Successfully created user request for \" + request.getUserTO().getUsername());\n-\n-        return binder.getUserRequestTO(request);\n+        return binder.getUserRequestTO(userRequestDAO.save(request));\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n@@ -123,27 +101,17 @@ public UserRequestTO update(@RequestBody final UserMod userMod) {\n \n         UserRequest request = new UserRequest();\n         request.setUserMod(userMod);\n-        request = userRequestDAO.save(request);\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.update, Result.success,\n-                \"Successfully updated user request for \" + request.getUserMod().getUsername());\n-\n-        return binder.getUserRequestTO(request);\n+        return binder.getUserRequestTO(userRequestDAO.save(request));\n     }\n \n     @PreAuthorize(\"hasRole('USER_REQUEST_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n     @Transactional(readOnly = true)\n     public List<UserRequestTO> list() {\n         List<UserRequestTO> result = new ArrayList<UserRequestTO>();\n-\n         for (UserRequest request : userRequestDAO.findAll()) {\n             result.add(binder.getUserRequestTO(request));\n         }\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.list, Result.success,\n-                \"Successfully listed all user requests: \" + result.size());\n-\n         return result;\n     }\n \n@@ -155,10 +123,6 @@ public UserRequestTO read(@PathVariable(\"requestId\") final Long requestId) {\n         if (request == null) {\n             throw new NotFoundException(\"User request \" + requestId);\n         }\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.read, Result.success,\n-                \"Successfully read user request for \" + request.getUserTO().getUsername());\n-\n         return binder.getUserRequestTO(request);\n     }\n \n@@ -175,12 +139,7 @@ public UserRequestTO delete(@PathVariable(\"userId\") final Long userId) {\n \n         UserRequest request = new UserRequest();\n         request.setUserId(userId);\n-        request = userRequestDAO.save(request);\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n-                \"Successfully deleted user request for user\" + userId);\n-\n-        return binder.getUserRequestTO(request);\n+        return binder.getUserRequestTO(userRequestDAO.save(request));\n     }\n \n     @PreAuthorize(\"hasRole('USER_REQUEST_DELETE')\")\n@@ -192,12 +151,25 @@ public UserRequestTO deleteRequest(@PathVariable(\"requestId\") final Long request\n         }\n \n         UserRequestTO requestToDelete = binder.getUserRequestTO(request);\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n-                \"Successfully deleted user request for user\" + request.getUserId());\n-\n         userRequestDAO.delete(requestId);\n-\n         return requestToDelete;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected UserRequestTO resolveReference(final Method method, final Object... obj) {\n+        final UserRequestTO result;\n+\n+        if (ArrayUtils.isNotEmpty(obj) && obj[0] instanceof Long\n+                && (\"deleteRequest\".equals(method.getName()) || \"read\".equals(method.getName()))) {\n+            final UserRequest request = userRequestDAO.find((Long) obj[0]);\n+            result = request == null ? null : binder.getUserRequestTO(request);\n+        } else {\n+            result = null;\n+        }\n+\n+        return result;\n+    }\n }"},{"sha":"c10df9e33dbaa8731bbbdb94b99cb8b51fe805a8","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/VirtualSchemaController.java","status":"modified","additions":39,"deletions":29,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,19 +18,17 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.EntityExistsException;\n import javax.servlet.http.HttpServletResponse;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.to.VirtualSchemaTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.SchemaSubCategory;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.VirSchemaDAO;\n@@ -47,10 +45,7 @@\n \n @Controller\n @RequestMapping(\"/virtualSchema\")\n-public class VirtualSchemaController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class VirtualSchemaController extends AbstractTransactionalController<VirtualSchemaTO> {\n \n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n@@ -80,10 +75,6 @@ public VirtualSchemaTO create(final HttpServletResponse response,\n         }\n \n         AbstractVirSchema virSchema = virSchemaDAO.save(binder.create(virSchemaTO, attrUtil.newVirSchema()));\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.createVirtual, Result.success,\n-                \"Successfully created virtual schema: \" + kind + \"/\" + virSchema.getName());\n-\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getVirtualSchemaTO(virSchema);\n     }\n@@ -97,10 +88,6 @@ public List<VirtualSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n         for (AbstractVirSchema virSchema : virSchemaDAO.findAll(reference)) {\n             virtualSchemaTOs.add(binder.getVirtualSchemaTO(virSchema));\n         }\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.listVirtual, Result.success,\n-                \"Successfully listed all virtual schemas: \" + kind + \"/\" + virtualSchemaTOs.size());\n-\n         return virtualSchemaTOs;\n     }\n \n@@ -114,10 +101,6 @@ public VirtualSchemaTO read(@PathVariable(\"kind\") final String kind,\n         if (virtualSchema == null) {\n             throw new NotFoundException(\"Virtual schema '\" + virtualSchemaName + \"'\");\n         }\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.readVirtual, Result.success,\n-                \"Successfully read virtual schema: \" + kind + \"/\" + virtualSchema.getName());\n-\n         return binder.getVirtualSchemaTO(virtualSchema);\n     }\n \n@@ -133,12 +116,7 @@ public VirtualSchemaTO update(@RequestBody final VirtualSchemaTO virtualSchemaTO\n         }\n \n         virtualSchema = binder.update(virtualSchemaTO, virtualSchema);\n-        virtualSchema = virSchemaDAO.save(virtualSchema);\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.updateVirtual, Result.success,\n-                \"Successfully updated virtual schema: \" + kind + \"/\" + virtualSchema.getName());\n-\n-        return binder.getVirtualSchemaTO(virtualSchema);\n+        return binder.getVirtualSchemaTO(virSchemaDAO.save(virtualSchema));\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n@@ -154,9 +132,41 @@ public VirtualSchemaTO delete(@PathVariable(\"kind\") final String kind,\n \n         VirtualSchemaTO schemaToDelete = binder.getVirtualSchemaTO(virSchema);\n         virSchemaDAO.delete(virtualSchemaName, getAttributableUtil(kind));\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.deleteVirtual, Result.success,\n-                \"Successfully deleted virtual schema: \" + kind + \"/\" + virSchema.getName());\n         return schemaToDelete;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected VirtualSchemaTO resolveReference(final Method method, final Object... args) throws\n+            UnresolvedReferenceException {\n+        String kind = null;\n+        String name = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; (name == null || kind == null) && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    if (kind == null) {\n+                        kind = (String) args[i];\n+                    } else {\n+                        name = (String) args[i];\n+                    }\n+                } else if (args[i] instanceof VirtualSchemaTO) {\n+                    name = ((VirtualSchemaTO) args[i]).getName();\n+                }\n+            }\n+        }\n+\n+        if (name != null) {\n+            try {\n+                return binder.getVirtualSchemaTO(virSchemaDAO.find(name, getAttributableUtil(kind).virSchemaClass()));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n }"},{"sha":"71d87c1c735a974908d961ee75b4eb2f5b62b93a","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/WorkflowController.java","status":"modified","additions":12,"deletions":22,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,13 +18,9 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.lang.reflect.Method;\n import java.util.List;\n-\n import org.apache.syncope.common.to.WorkflowDefinitionTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.WorkflowSubCategory;\n-import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.workflow.WorkflowAdapter;\n import org.apache.syncope.core.workflow.WorkflowException;\n import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n@@ -40,10 +36,7 @@\n \n @Controller\n @RequestMapping(\"/workflow\")\n-public class WorkflowController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n+public class WorkflowController extends AbstractTransactionalController<WorkflowDefinitionTO> {\n \n     @Autowired\n     private UserWorkflowAdapter uwfAdapter;\n@@ -53,10 +46,6 @@ public class WorkflowController extends AbstractController {\n \n     private WorkflowDefinitionTO getDefinition(final WorkflowAdapter adapter) throws WorkflowException {\n         WorkflowDefinitionTO result = adapter.getDefinition();\n-\n-        auditManager.audit(Category.workflow, WorkflowSubCategory.getDefinition, Result.success,\n-                \"Successfully read workflow definition\");\n-\n         return result;\n     }\n \n@@ -76,9 +65,6 @@ public WorkflowDefinitionTO getRoleDefinition() throws WorkflowException {\n \n     private void updateDefinition(final WorkflowAdapter adapter, final WorkflowDefinitionTO definition) {\n         adapter.updateDefinition(definition);\n-\n-        auditManager.audit(Category.workflow, WorkflowSubCategory.updateDefinition, Result.success,\n-                \"Successfully updated workflow definition\");\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_DEF_UPDATE')\")\n@@ -94,12 +80,7 @@ public void updateRoleDefinition(@RequestBody final WorkflowDefinitionTO definit\n     }\n \n     private List<String> getDefinedTasks(final WorkflowAdapter adapter) {\n-        List<String> definedTasks = adapter.getDefinedTasks();\n-\n-        auditManager.audit(Category.workflow, WorkflowSubCategory.getDefinedTasks, Result.success,\n-                \"Successfully got the list of defined workflow tasks: \" + definedTasks.size());\n-\n-        return definedTasks;\n+        return adapter.getDefinedTasks();\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_TASK_LIST')\")\n@@ -113,4 +94,13 @@ public ModelAndView getDefinedUserTasks() {\n     public ModelAndView getDefinedRoleTasks() {\n         return new ModelAndView().addObject(getDefinedTasks(rwfAdapter));\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected WorkflowDefinitionTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+        throw new UnresolvedReferenceException();\n+    }\n }"},{"sha":"7577641a968374fc908c29df11cd37d818adeb24","filename":"core/src/main/java/org/apache/syncope/core/rest/data/NotificationDataBinder.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -42,15 +42,12 @@ public NotificationTO getNotificationTO(final Notification notification) {\n \n     public Notification createNotification(final NotificationTO notificationTO) {\n         Notification result = new Notification();\n-\n         updateNotification(result, notificationTO);\n-\n         return result;\n     }\n \n     public void updateNotification(final Notification notification, final NotificationTO notificationTO) {\n         BeanUtils.copyProperties(notificationTO, notification, IGNORE_PROPERTIES);\n-\n         notification.setAbout(notificationTO.getAbout());\n         notification.setRecipients(notificationTO.getRecipients());\n     }"},{"sha":"cb90116c096810d409ae4828ed0b3a88b15bb93b","filename":"core/src/main/java/org/apache/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -91,7 +91,7 @@ public void update(final SchemaTO schemaTO, final AbstractSchema schema, final A\n         populate(schema, schemaTO);\n     }\n \n-    public <T extends AbstractSchema> SchemaTO getSchemaTO(final T schema, final AttributableUtil attributableUtil) {\n+    public <T extends AbstractSchema> SchemaTO getSchemaTO(final T schema) {\n         SchemaTO schemaTO = new SchemaTO();\n         BeanUtils.copyProperties(schema, schemaTO);\n "},{"sha":"00a044a4de94d208a7506c20c34d57ca6660f364","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -53,7 +53,6 @@\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n-import org.apache.syncope.core.util.MappingUtil;\n import org.apache.syncope.core.util.PasswordEncoder;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"00ba0bf5e5984a122605911005e05c2be694deab","filename":"core/src/main/java/org/apache/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":19,"deletions":4,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -20,8 +20,7 @@\n \n import java.util.Date;\n import javax.annotation.Resource;\n-import org.apache.syncope.common.types.AuditElements.AuthenticationSubCategory;\n-import org.apache.syncope.common.types.AuditElements.Category;\n+import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.CipherAlgorithm;\n import org.apache.syncope.core.audit.AuditManager;\n@@ -119,7 +118,15 @@ public Authentication authenticate(final Authentication authentication)\n \n             token.setDetails(authentication.getDetails());\n \n-            auditManager.audit(Category.authentication, AuthenticationSubCategory.login, Result.success,\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.REST,\n+                    \"AuthenticationController\",\n+                    null,\n+                    \"login\",\n+                    Result.SUCCESS,\n+                    null,\n+                    authenticated,\n+                    authentication,\n                     \"Successfully authenticated, with roles: \" + token.getAuthorities());\n \n             LOG.debug(\"User {} successfully authenticated, with roles {}\",\n@@ -136,7 +143,15 @@ public Authentication authenticate(final Authentication authentication)\n                 userDAO.save(user);\n             }\n \n-            auditManager.audit(Category.authentication, AuthenticationSubCategory.login, Result.failure,\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.REST,\n+                    \"AuthenticationController\",\n+                    null,\n+                    \"login\",\n+                    Result.FAILURE,\n+                    null,\n+                    authenticated,\n+                    authentication,\n                     \"User \" + authentication.getPrincipal() + \" not authenticated\");\n \n             LOG.debug(\"User {} not authenticated\", authentication.getPrincipal());"},{"sha":"d115ce857f6debdd60ccc4172113126f1d8f8925","filename":"core/src/main/java/org/apache/syncope/core/services/LoggerServiceImpl.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,13 +18,16 @@\n  */\r\n package org.apache.syncope.core.services;\r\n \r\n+import static org.apache.syncope.common.types.LoggerType.AUDIT;\r\n+import static org.apache.syncope.common.types.LoggerType.NORMAL;\r\n import java.text.ParseException;\r\n import java.util.List;\r\n \r\n import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.NotFoundException;\r\n \r\n import org.apache.syncope.common.services.LoggerService;\r\n+import org.apache.syncope.common.to.EventCategoryTO;\r\n import org.apache.syncope.common.to.LoggerTO;\r\n import org.apache.syncope.common.types.AuditLoggerName;\r\n import org.apache.syncope.common.types.LoggerType;\r\n@@ -110,4 +113,8 @@ public void update(final LoggerType type, final String name, final LoggerTO logg\n         }\r\n     }\r\n \r\n+    @Override\r\n+    public List<EventCategoryTO> events() {\r\n+        return loggerController.listAuditEvents();\r\n+    }\r\n }\r"},{"sha":"d8621399c9738827cfe24c5f3ee702ca65dd39f1","filename":"core/src/main/java/org/apache/syncope/core/services/ServiceHandler.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FServiceHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FServiceHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FServiceHandler.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.core.services;\n+\n+import java.lang.reflect.Method;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.core.notification.NotificationManager;\n+import org.apache.syncope.core.rest.controller.AbstractController;\n+import org.apache.syncope.core.rest.controller.UnresolvedReferenceException;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+@Aspect\n+public class ServiceHandler {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(ServiceHandler.class);\n+\n+    @Autowired\n+    private NotificationManager notificationManager;\n+\n+    @Autowired\n+    private AuditManager auditManager;\n+\n+    @Around(\"within(@org.springframework.stereotype.Controller *)\")\n+    public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n+        final Class<?> clazz = joinPoint.getTarget().getClass();\n+\n+        final Object[] input = joinPoint.getArgs();\n+\n+        final String category = clazz.getSimpleName();\n+\n+        final MethodSignature ms = (MethodSignature) joinPoint.getSignature();\n+        Method method = ms.getMethod();\n+\n+        final String event = joinPoint.getSignature().getName();\n+\n+        AuditElements.Result result = null;\n+        Object output = null;\n+        Object before = null;\n+\n+        try {\n+            LOG.debug(\"Before {}.{}({})\",\n+                    new Object[] {clazz.getSimpleName(), event, input == null || input.length == 0 ? \"\" : \"...\"});\n+\n+            try {\n+                before = ((AbstractController) joinPoint.getTarget()).resolveBeanReference(method, input);\n+            } catch (UnresolvedReferenceException ignore) {\n+                LOG.debug(\"Unresolved bean reference ...\");\n+            }\n+\n+            output = joinPoint.proceed();\n+            result = AuditElements.Result.SUCCESS;\n+\n+            LOG.debug(\"After returning {}.{}\", clazz.getSimpleName(), event);\n+            return output;\n+        } catch (Throwable t) {\n+            output = t;\n+            result = AuditElements.Result.FAILURE;\n+\n+            LOG.debug(\"After throwing {}.{}\", clazz.getSimpleName(), event);\n+            throw t;\n+        } finally {\n+            notificationManager.createTasks(\n+                    AuditElements.EventCategoryType.REST,\n+                    category,\n+                    null,\n+                    event,\n+                    result,\n+                    before,\n+                    output,\n+                    input);\n+\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.REST,\n+                    category,\n+                    null,\n+                    event,\n+                    result,\n+                    before,\n+                    output,\n+                    input);\n+        }\n+    }\n+}"},{"sha":"e239cdf6acaf494c8c0d42f8ff9c37796e345301","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/LDAPMembershipSyncActions.java","status":"modified","additions":40,"deletions":6,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -29,7 +29,10 @@\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n@@ -82,6 +85,9 @@ public class LDAPMembershipSyncActions extends DefaultSyncActions {\n     @Autowired\n     private NotificationManager notificationManager;\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     protected Map<Long, Long> membersBeforeRoleUpdate = Collections.<Long, Long>emptyMap();\n \n     /**\n@@ -97,12 +103,12 @@ protected String getGroupMembershipAttrName(final Connector connector) {\n         while (propertyIterator.hasNext()) {\n             ConnConfProperty property = propertyIterator.next();\n             if (\"groupMemberAttribute\".equals(property.getSchema().getName())\n-                && property.getValues() != null && !property.getValues().isEmpty()) {\n-                groupMembershipName = (String)property.getValues().get(0);\n+                    && property.getValues() != null && !property.getValues().isEmpty()) {\n+                groupMembershipName = (String) property.getValues().get(0);\n                 break;\n             }\n         }\n-        \n+\n         return groupMembershipName;\n     }\n \n@@ -170,7 +176,7 @@ protected UserMod getUserMod(final Long userId, final RoleTO roleTO) {\n     protected List<Object> getMembAttrValues(final SyncDelta delta, final Connector connector) {\n         List<Object> result = Collections.<Object>emptyList();\n         String groupMemberName = getGroupMembershipAttrName(connector);\n-        \n+\n         // first, try to read the configured attribute from delta, returned by the ongoing synchronization\n         Attribute membAttr = delta.getObject().getAttributeByName(groupMemberName);\n         // if not found, perform an additional read on the underlying connector for the same connector object\n@@ -197,22 +203,50 @@ protected void userUpdate(final UserMod userMod, final String resourceName) {\n             return;\n         }\n \n+        Result result;\n+\n+        WorkflowResult<Map.Entry<Long, Boolean>> updated = null;\n+\n         try {\n-            WorkflowResult<Map.Entry<Long, Boolean>> updated = uwfAdapter.update(userMod);\n+            updated = uwfAdapter.update(userMod);\n \n             List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated,\n                     userMod.getPassword(), userMod.getVirtualAttributesToBeRemoved(),\n                     userMod.getVirtualAttributesToBeUpdated(),\n                     Collections.singleton(resourceName));\n \n             taskExecutor.execute(tasks);\n+            result = Result.SUCCESS;\n \n-            notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n         } catch (PropagationException e) {\n+            result = Result.FAILURE;\n             LOG.error(\"Could not propagate {}\", userMod, e);\n         } catch (Exception e) {\n+            result = Result.FAILURE;\n             LOG.error(\"Could not perform update {}\", userMod, e);\n         }\n+\n+        notificationManager.createTasks(\n+                AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                this.getClass().getSimpleName(),\n+                null,\n+                \"update\",\n+                result,\n+                null, // searching for before object is too much expensive ... \n+                updated == null ? null : updated.getResult().getKey(),\n+                userMod,\n+                resourceName);\n+\n+        auditManager.audit(\n+                AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                this.getClass().getSimpleName(),\n+                null,\n+                \"update\",\n+                result,\n+                null, // searching for before object is too much expensive ... \n+                updated == null ? null : updated.getResult().getKey(),\n+                userMod,\n+                resourceName);\n     }\n \n     /**"},{"sha":"3a131d11e51e3f940984fcd4f2a14cc412356fe5","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":111,"deletions":22,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -39,10 +39,13 @@\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.ConflictResolutionAction;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.SyncPolicySpec;\n+import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n@@ -185,6 +188,12 @@ public class SyncopeSyncResultHandler implements SyncResultsHandler {\n     @Autowired\n     protected NotificationManager notificationManager;\n \n+    /**\n+     * Audit Manager.\n+     */\n+    @Autowired\n+    protected AuditManager auditManager;\n+\n     @Autowired\n     protected AttributableTransformer attrTransformer;\n \n@@ -535,6 +544,9 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n                 result.setName(((RoleTO) actual).getName());\n             }\n         } else {\n+            Object output = null;\n+            Result resultStatus;\n+\n             try {\n                 if (AttributableType.USER == attrUtil.getType()) {\n                     Boolean enabled = readEnabled(delta.getObject());\n@@ -547,14 +559,11 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n \n                     taskExecutor.execute(tasks);\n \n-                    notificationManager.createTasks(created.getResult().getKey(), created.getPerformedTasks());\n-\n                     actual = userDataBinder.getUserTO(created.getResult().getKey());\n \n                     result.setId(created.getResult().getKey());\n                     result.setName(((UserTO) actual).getUsername());\n-                }\n-                if (AttributableType.ROLE == attrUtil.getType()) {\n+                } else if (AttributableType.ROLE == attrUtil.getType()) {\n                     WorkflowResult<Long> created = rwfAdapter.create((RoleTO) actual);\n                     AttributeTO roleOwner = actual.getAttributeMap().get(StringUtils.EMPTY);\n                     if (roleOwner != null) {\n@@ -574,15 +583,42 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n                     result.setName(((RoleTO) actual).getName());\n                 }\n \n+                output = subjectTO;\n+                resultStatus = Result.SUCCESS;\n+\n             } catch (PropagationException e) {\n                 // A propagation failure doesn't imply a synchronization failure.\n                 // The propagation exception status will be reported into the propagation task execution.\n                 LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n             } catch (Exception e) {\n                 result.setStatus(SyncResult.Status.FAILURE);\n                 result.setMessage(e.getMessage());\n                 LOG.error(\"Could not create {} {} \", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n             }\n+\n+            notificationManager.createTasks(\n+                    AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                    AttributableType.USER.name().toLowerCase(),\n+                    syncTask.getResource().getName(),\n+                    \"create\",\n+                    resultStatus,\n+                    null, // searching for before object is too much expensive ... \n+                    output,\n+                    delta);\n+\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                    AttributableType.USER.name().toLowerCase(),\n+                    syncTask.getResource().getName(),\n+                    \"create\",\n+                    resultStatus,\n+                    null, // searching for before object is too much expensive ... \n+                    output,\n+                    delta);\n         }\n \n         actions.after(this, delta, actual, result);\n@@ -650,8 +686,6 @@ protected UserTO updateUser(final Long id, SyncDelta delta, final boolean dryRun\n \n         taskExecutor.execute(tasks);\n \n-        notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n-\n         userTO = userDataBinder.getUserTO(updated.getResult().getKey());\n \n         actions.after(this, delta, userTO, result);\n@@ -717,34 +751,65 @@ protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, fi\n         for (Long id : subjects) {\n             LOG.debug(\"About to update {}\", id);\n \n+            Object output = null;\n+            Result resultStatus;\n+\n             final SyncResult result = new SyncResult();\n             result.setOperation(ResourceOperation.UPDATE);\n             result.setSubjectType(attrUtil.getType());\n             result.setStatus(SyncResult.Status.SUCCESS);\n             result.setId(id);\n \n             try {\n+                final AbstractAttributableTO updated;\n                 if (AttributableType.USER == attrUtil.getType()) {\n-                    UserTO updated = updateUser(id, delta, dryRun, result);\n-                    result.setName(updated.getUsername());\n-                }\n-\n-                if (AttributableType.ROLE == attrUtil.getType()) {\n-                    RoleTO updated = updateRole(id, delta, dryRun, result);\n-                    result.setName(updated.getName());\n+                    updated = updateUser(id, delta, dryRun, result);\n+                    result.setName(((UserTO) updated).getUsername());\n+                } else if (AttributableType.ROLE == attrUtil.getType()) {\n+                    updated = updateRole(id, delta, dryRun, result);\n+                    result.setName(((RoleTO) updated).getName());\n+                } else {\n+                    updated = null;\n                 }\n+                output = updated;\n+                resultStatus = Result.SUCCESS;\n             } catch (PropagationException e) {\n                 // A propagation failure doesn't imply a synchronization failure.\n                 // The propagation exception status will be reported into the propagation task execution.\n                 LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n             } catch (Exception e) {\n                 result.setStatus(SyncResult.Status.FAILURE);\n                 result.setMessage(e.getMessage());\n-\n                 LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n             }\n             updResults.add(result);\n \n+            if (!dryRun) {\n+                notificationManager.createTasks(\n+                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                        attrUtil.getType().name().toLowerCase(),\n+                        syncTask.getResource().getName(),\n+                        \"update\",\n+                        resultStatus,\n+                        null, // searching for before object is too much expensive ... \n+                        output,\n+                        delta);\n+\n+                auditManager.audit(\n+                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                        attrUtil.getType().name().toLowerCase(),\n+                        syncTask.getResource().getName(),\n+                        \"update\",\n+                        resultStatus,\n+                        null, // searching for before object is too much expensive ... \n+                        output,\n+                        delta);\n+            }\n+\n             LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), id);\n         }\n \n@@ -765,6 +830,9 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n         List<SyncResult> delResults = new ArrayList<SyncResult>();\n \n         for (Long id : subjects) {\n+            Object output = null;\n+            Result resultStatus = Result.FAILURE;\n+\n             try {\n                 AbstractAttributableTO subjectTO = AttributableType.USER == attrUtil.getType()\n                         ? userDataBinder.getUserTO(id)\n@@ -788,9 +856,7 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n                         List<PropagationTask> tasks = Collections.<PropagationTask>emptyList();\n                         if (AttributableType.USER == attrUtil.getType()) {\n                             tasks = propagationManager.getUserDeleteTaskIds(id, syncTask.getResource().getName());\n-                            notificationManager.createTasks(id, Collections.<String>singleton(\"delete\"));\n-                        }\n-                        if (AttributableType.ROLE == attrUtil.getType()) {\n+                        } else if (AttributableType.ROLE == attrUtil.getType()) {\n                             tasks = propagationManager.getRoleDeleteTaskIds(id, syncTask.getResource().getName());\n                         }\n                         taskExecutor.execute(tasks);\n@@ -803,24 +869,49 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n                     try {\n                         if (AttributableType.USER == attrUtil.getType()) {\n                             uwfAdapter.delete(id);\n-                        }\n-                        if (AttributableType.ROLE == attrUtil.getType()) {\n+                        } else if (AttributableType.ROLE == attrUtil.getType()) {\n                             rwfAdapter.delete(id);\n                         }\n+                        output = null;\n+                        resultStatus = Result.SUCCESS;\n                     } catch (Exception e) {\n                         result.setStatus(SyncResult.Status.FAILURE);\n                         result.setMessage(e.getMessage());\n                         LOG.error(\"Could not delete {} {}\", attrUtil.getType(), id, e);\n+                        output = e;\n                     }\n                 }\n \n                 actions.after(this, delta, subjectTO, result);\n                 delResults.add(result);\n+\n             } catch (NotFoundException e) {\n                 LOG.error(\"Could not find {} {}\", attrUtil.getType(), id, e);\n             } catch (UnauthorizedRoleException e) {\n                 LOG.error(\"Not allowed to read {} {}\", attrUtil.getType(), id, e);\n             }\n+\n+            if (!dryRun) {\n+                notificationManager.createTasks(\n+                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                        attrUtil.getType().name().toLowerCase(),\n+                        syncTask.getResource().getName(),\n+                        \"delete\",\n+                        resultStatus,\n+                        null, // searching for before object is too much expensive ... \n+                        output,\n+                        delta);\n+\n+                auditManager.audit(\n+                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                        attrUtil.getType().name().toLowerCase(),\n+                        syncTask.getResource().getName(),\n+                        \"delete\",\n+                        resultStatus,\n+                        null, // searching for before object is too much expensive ... \n+                        output,\n+                        delta);\n+            }\n         }\n \n         return delResults;\n@@ -876,9 +967,7 @@ protected final void doHandle(final SyncDelta delta)\n                     default:\n                 }\n             }\n-        }\n-\n-        if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n+        } else if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n             if (subjectIds.isEmpty()) {\n                 LOG.debug(\"No match found for deletion\");\n             } else if (subjectIds.size() == 1) {"},{"sha":"a66b73a5a8bf3ab3062f741818241ecfffbdff06","filename":"core/src/main/java/org/apache/syncope/core/workflow/WorkflowUserSuspender.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowUserSuspender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowUserSuspender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowUserSuspender.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -21,13 +21,11 @@\n import java.util.AbstractMap.SimpleEntry;\n import java.util.List;\n import java.util.Map;\n-import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.policy.UserSuspender;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n-import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -48,9 +46,6 @@ public class WorkflowUserSuspender implements UserSuspender {\n     @Autowired\n     private PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    private UserDataBinder userDataBinder;\n-\n     @Override\n     public void suspend(final SyncopeUser user, final boolean suspend) {\n         try {"},{"sha":"fa8b26e68edd0f55e84d36f46f7a72ef457cb358","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -22,14 +22,17 @@ under the License.\n        xmlns:jaxrs=\"http://cxf.apache.org/jaxrs\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n        xmlns:oxm=\"http://www.springframework.org/schema/oxm\"\n+       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://cxf.apache.org/jaxrs\n                            http://cxf.apache.org/schemas/jaxrs.xsd\n                            http://www.springframework.org/schema/context\n                            http://www.springframework.org/schema/context/spring-context.xsd\n                            http://www.springframework.org/schema/oxm\n-                           http://www.springframework.org/schema/oxm/spring-oxm.xsd\">\n+                           http://www.springframework.org/schema/oxm/spring-oxm.xsd\n+                           http://www.springframework.org/schema/aop \n+                           http://www.springframework.org/schema/aop/spring-aop.xsd\">\n \n   <import resource=\"classpath:META-INF/cxf/cxf.xml\"/>\n   <import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\"/>\n@@ -38,6 +41,8 @@ under the License.\n \n   <!-- CXF Configuration - BEGIN -->\n   <context:component-scan base-package=\"org.apache.syncope.core.services\"/>\n+  \n+  <bean id=\"serviceHandler\" name=\"serviceHandler\" class=\"org.apache.syncope.core.services.ServiceHandler\" />\n \n   <bean id=\"jaxbProvider\" class=\"org.apache.cxf.jaxrs.provider.JAXBElementProvider\">\n     <property name=\"depthProperties\">"},{"sha":"74ea70a2f023b6f32e75ddc10f93a8e4940427d2","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.notification;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNotNull;\n \n import com.icegreen.greenmail.util.GreenMail;\n import com.icegreen.greenmail.util.ServerSetup;\n@@ -193,6 +193,7 @@ private boolean verifyMail(final String sender, final String subject) throws Exc\n                 messages[i].setFlag(Flag.DELETED, true);\n             }\n         }\n+\n         inbox.close(true);\n         store.close();\n         return found;\n@@ -202,7 +203,7 @@ private boolean verifyMail(final String sender, final String subject) throws Exc\n     public void notifyByMail() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n-        notification.addEvent(\"create\");\n+        notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n \n         MembershipCond membCond = new MembershipCond();\n         membCond.setRoleId(7L);\n@@ -258,7 +259,7 @@ public void notifyByMail() throws Exception {\n     public void issueSYNCOPE192() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n-        notification.addEvent(\"create\");\n+        notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n \n         MembershipCond membCond = new MembershipCond();\n         membCond.setRoleId(7L);\n@@ -316,7 +317,7 @@ public void issueSYNCOPE192() throws Exception {\n     public void notifyByMailEmptyAbout() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n-        notification.addEvent(\"create\");\n+        notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n \n         notification.setAbout(null);\n \n@@ -370,7 +371,7 @@ public void notifyByMailEmptyAbout() throws Exception {\n     public void notifyByMailWithRetry() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n-        notification.addEvent(\"create\");\n+        notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n \n         notification.setAbout(null);\n "},{"sha":"2588dd66476ea4b9fca5e72543f03eca55babc7b","filename":"core/src/test/java/org/apache/syncope/core/rest/LoggerTestITCase.java","status":"modified","additions":107,"deletions":3,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -19,18 +19,26 @@\n package org.apache.syncope.core.rest;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n \n import java.text.ParseException;\n import java.util.List;\n+import org.apache.syncope.common.to.EventCategoryTO;\n import org.apache.syncope.common.to.LoggerTO;\n+import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.EventCategoryType;\n import org.apache.syncope.common.types.AuditLoggerName;\n import org.apache.syncope.common.types.LoggerType;\n+import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.SyncopeLoggerLevel;\n import org.apache.syncope.common.util.CollectionWrapper;\n+import org.apache.syncope.core.rest.controller.ReportController;\n+import org.apache.syncope.core.rest.controller.ResourceController;\n+import org.apache.syncope.core.rest.controller.RoleController;\n+import org.apache.syncope.core.rest.controller.UserController;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -86,8 +94,12 @@ public void setLevel() {\n \n     @Test\n     public void enableDisableAudit() {\n-        AuditLoggerName auditLoggerName = new AuditLoggerName(AuditElements.Category.report,\n-                AuditElements.ReportSubCategory.deleteExecution, AuditElements.Result.failure);\n+        AuditLoggerName auditLoggerName = new AuditLoggerName(\n+                EventCategoryType.REST,\n+                ReportController.class.getSimpleName(),\n+                null,\n+                \"deleteExecution\",\n+                AuditElements.Result.FAILURE);\n \n         List<AuditLoggerName> audits = CollectionWrapper.wrapLogger(loggerService.list(LoggerType.AUDIT));\n         assertNotNull(audits);\n@@ -109,4 +121,96 @@ public void enableDisableAudit() {\n         assertNotNull(audits);\n         assertFalse(audits.contains(auditLoggerName));\n     }\n+\n+    @Test\n+    public void listAuditEvents() {\n+        final List<EventCategoryTO> events = loggerService.events();\n+\n+        boolean found = false;\n+\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (UserController.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n+                assertEquals(EventCategoryType.REST, eventCategoryTO.getType());\n+                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"createInternal\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"list\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"doDelete\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"setStatus\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (RoleController.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n+                assertEquals(EventCategoryType.REST, eventCategoryTO.getType());\n+                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"list\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (ResourceController.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n+                assertEquals(EventCategoryType.REST, eventCategoryTO.getType());\n+                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"read\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"delete\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (AttributableType.USER.name().toLowerCase().equals(eventCategoryTO.getCategory())) {\n+                if (\"resource-ldap\".equals(eventCategoryTO.getSubcategory())\n+                        && EventCategoryType.SYNCHRONIZATION == eventCategoryTO.getType()) {\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.CREATE.name().toLowerCase()));\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.UPDATE.name().toLowerCase()));\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.DELETE.name().toLowerCase()));\n+                    found = true;\n+                }\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (AttributableType.USER.name().toLowerCase().equals(eventCategoryTO.getCategory())) {\n+                if (\"resource-csv\".equals(eventCategoryTO.getSubcategory())\n+                        && EventCategoryType.PROPAGATION == eventCategoryTO.getType()) {\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.CREATE.name().toLowerCase()));\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.UPDATE.name().toLowerCase()));\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.DELETE.name().toLowerCase()));\n+                    found = true;\n+                }\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (EventCategoryType.TASK == eventCategoryTO.getType()\n+                    && \"SampleJob\".equals(eventCategoryTO.getCategory())) {\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategoryTO eventCategoryTO : events) {\n+            if (EventCategoryType.TASK == eventCategoryTO.getType()\n+                    && \"SyncJob\".equals(eventCategoryTO.getCategory())) {\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+    }\n }"},{"sha":"7262144ecc4cca12c2b559dcc04c3f831aa7ba71","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -516,7 +516,6 @@ private NotificationTaskTO findNotificationTaskBySender(final String sender) {\n         List<NotificationTaskTO> tasks = (List<NotificationTaskTO>) taskService.list(TaskType.NOTIFICATION);\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n-\n         NotificationTaskTO taskTO = null;\n         for (NotificationTaskTO task : tasks) {\n             if (sender.equals(task.getSender())) {\n@@ -530,7 +529,7 @@ private String createNotificationTask() {\n         // 1. Create notification\n         NotificationTO notification = new NotificationTO();\n         notification.setTraceLevel(TraceLevel.FAILURES);\n-        notification.addEvent(\"create\");\n+        notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n \n         MembershipCond membCond = new MembershipCond();\n         membCond.setRoleId(7L);"},{"sha":"6ac1887564fc459681c5562ac67517fad8df26ad","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -253,7 +253,7 @@ public void issue186() {\n \n         sce = null;\n         try {\n-            userTO = userService.update(userMod.getId(), userMod);\n+            userService.update(userMod.getId(), userMod);\n         } catch (SyncopeClientCompositeErrorException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.InvalidSyncopeUser);\n         }\n@@ -829,7 +829,7 @@ public void updateInvalidPassword() {\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"pass\");\n \n-        userTO = userService.update(userMod.getId(), userMod);\n+        userService.update(userMod.getId(), userMod);\n     }\n \n     @Test(expected = SyncopeClientCompositeErrorException.class)\n@@ -843,7 +843,7 @@ public void updateSamePassword() {\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"password123\");\n \n-        userTO = userService.update(userMod.getId(), userMod);\n+        userService.update(userMod.getId(), userMod);\n     }\n \n     @Test\n@@ -1160,7 +1160,7 @@ public void suspendReactivateOnResource() {\n         propagationRequestTO = new PropagationRequestTO();\n         propagationRequestTO.setOnSyncope(false);\n         propagationRequestTO.addResource(RESOURCE_NAME_LDAP);\n-        userTO = userService.suspend(userId, propagationRequestTO);\n+        userService.suspend(userId, propagationRequestTO);\n         userTO = userService.reactivate(userId, propagationRequestTO);\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());"},{"sha":"7447abef1ace0f1b13738f5b422570373b55d03f","filename":"core/src/test/resources/content.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0ead583e574e126e4363b46a3ce391f9d9fa9ca1/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=0ead583e574e126e4363b46a3ce391f9d9fa9ca1","patch":"@@ -830,7 +830,7 @@ under the License.\n   <ReportletConfInstance id=\"1\" Report_id=\"1\" serializedInstance=\"%3Corg.apache.syncope.common.report.UserReportletConf%3E%0A++%3Cname%3EtestUserReportlet%3C%2Fname%3E%0A++%3Cattrs%3E%0A++++%3Cstring%3Efullname%3C%2Fstring%3E%0A++++%3Cstring%3Egender%3C%2Fstring%3E%0A++%3C%2Fattrs%3E%0A++%3CderAttrs+class%3D%22singleton-list%22%3E%0A++++%3Cstring%3Ecn%3C%2Fstring%3E%0A++%3C%2FderAttrs%3E%0A++%3CvirAttrs+class%3D%22singleton-list%22%3E%0A++++%3Cstring%3Evirtualdata%3C%2Fstring%3E%0A++%3C%2FvirAttrs%3E%0A++%3Cfeatures+class%3D%22java.util.Arrays%24ArrayList%22%3E%0A++++%3Ca+class%3D%22org.apache.syncope.common.report.UserReportletConf%24Feature-array%22%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3Eid%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3Eusername%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3EworkflowId%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3Estatus%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3EcreationDate%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3ElastLoginDate%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3EchangePwdDate%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3EpasswordHistorySize%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3EfailedLoginCount%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3Ememberships%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++++%3Corg.apache.syncope.common.report.UserReportletConf_-Feature%3Eresources%3C%2Forg.apache.syncope.common.report.UserReportletConf_-Feature%3E%0A++++%3C%2Fa%3E%0A++%3C%2Ffeatures%3E%0A%3C%2Forg.apache.syncope.common.report.UserReportletConf%3E\"/>\n   <ReportExec Report_id=\"1\" id=\"1\" status=\"SUCCESS\" startDate=\"2012-02-26 15:40:04\" endDate=\"2012-02-26 15:41:04\"/>\n   \n-  <SyncopeLogger logName=\"syncope.audit.authentication.getEntitlements.success\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>\n+  <SyncopeLogger logName=\"syncope.audit.[REST]:[AuthenticationController]:[]:[getEntitlements]:[SUCCESS]\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>\n \n   <ACT_RU_EXECUTION ID_=\"4\" REV_=\"2\" PROC_INST_ID_=\"4\" PROC_DEF_ID_=\"userWorkflow:1:3\" ACT_ID_=\"active\" IS_ACTIVE_=\"1\" IS_CONCURRENT_=\"0\" IS_SCOPE_=\"1\" IS_EVENT_SCOPE_=\"0\" SUSPENSION_STATE_=\"1\"/>\n   <ACT_RU_TASK ID_=\"5\" REV_=\"2\" EXECUTION_ID_=\"4\" PROC_INST_ID_=\"4\" PROC_DEF_ID_=\"userWorkflow:1:3\" NAME_=\"Active\" TASK_DEF_KEY_=\"active\" PRIORITY_=\"50\" CREATE_TIME_=\"2013-02-25T17:19:03+0100\"/>"}]}