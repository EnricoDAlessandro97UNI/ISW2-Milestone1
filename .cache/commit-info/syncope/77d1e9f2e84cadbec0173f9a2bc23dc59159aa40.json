{"sha":"77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","node_id":"C_kwDOJfYA1toAKDc3ZDFlOWYyZTg0Y2FkYmVjMDE3M2Y5YTJiYzIzZGM1OTE1OWFhNDA","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-05-07T15:21:14Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-05-08T06:40:17Z"},"message":"[SYNCOPE-1674] Optimizing User, Group and Any Object lifecycle event publishing","tree":{"sha":"ad6011f89e8658e3cd0eb9df329380bf27821f95","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ad6011f89e8658e3cd0eb9df329380bf27821f95"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"db980062bc3362d532f267db536bfc6c667893ea","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/db980062bc3362d532f267db536bfc6c667893ea","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/db980062bc3362d532f267db536bfc6c667893ea"}],"stats":{"total":427,"additions":228,"deletions":199},"files":[{"sha":"3e1c0725362c20a65aa2aeb557e43d0a8234b078","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/JPAJSONPersistenceContext.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -51,9 +51,6 @@\n @Configuration(proxyBeanMethods = false)\n public abstract class JPAJSONPersistenceContext {\n \n-    @Autowired\n-    protected ApplicationEventPublisher publisher;\n-\n     @Autowired\n     protected SecurityProperties securityProperties;\n \n@@ -70,7 +67,6 @@ public AnyObjectDAO anyObjectDAO(\n \n         return new JPAJSONAnyObjectDAO(\n                 anyUtilsFactory,\n-                publisher,\n                 plainSchemaDAO,\n                 derSchemaDAO,\n                 dynRealmDAO,\n@@ -83,6 +79,7 @@ public AnyObjectDAO anyObjectDAO(\n     @Bean\n     public GroupDAO groupDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n+            final ApplicationEventPublisher publisher,\n             final @Lazy PlainSchemaDAO plainSchemaDAO,\n             final @Lazy DerSchemaDAO derSchemaDAO,\n             final @Lazy DynRealmDAO dynRealmDAO,\n@@ -137,7 +134,6 @@ public UserDAO userDAO(\n \n         return new JPAJSONUserDAO(\n                 anyUtilsFactory,\n-                publisher,\n                 plainSchemaDAO,\n                 derSchemaDAO,\n                 dynRealmDAO,"},{"sha":"f4397ded863c6f9d8cc2cc74b061ddec1143af69","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONAnyObjectDAO.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -35,25 +35,21 @@\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.springframework.context.ApplicationEventPublisher;\n \n public class JPAJSONAnyObjectDAO extends JPAAnyObjectDAO {\n \n     protected final JPAJSONAnyDAO anyDAO;\n \n     public JPAJSONAnyObjectDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n-            final ApplicationEventPublisher publisher,\n             final PlainSchemaDAO plainSchemaDAO,\n             final DerSchemaDAO derSchemaDAO,\n             final DynRealmDAO dynRealmDAO,\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,\n             final JPAJSONAnyDAO anyDAO) {\n \n-        super(anyUtilsFactory, publisher, plainSchemaDAO, derSchemaDAO, dynRealmDAO, userDAO, groupDAO);\n+        super(anyUtilsFactory, plainSchemaDAO, derSchemaDAO, dynRealmDAO, userDAO, groupDAO);\n         this.anyDAO = anyDAO;\n     }\n \n@@ -93,8 +89,6 @@ protected Pair<AnyObject, Pair<Set<String>, Set<String>>> doSave(final AnyObject\n         // ensure that entity listeners are invoked at this point\n         entityManager().flush();\n \n-        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));\n-\n         Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO.refreshDynMemberships(merged);\n         dynRealmDAO.refreshDynMemberships(merged);\n "},{"sha":"91b7a511b897bc07df73f8dde7b359a69a8ceebd","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONUserDAO.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -40,18 +40,14 @@\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n-import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n-import org.springframework.context.ApplicationEventPublisher;\n \n public class JPAJSONUserDAO extends JPAUserDAO {\n \n     protected final JPAJSONAnyDAO anyDAO;\n \n     public JPAJSONUserDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n-            final ApplicationEventPublisher publisher,\n             final PlainSchemaDAO plainSchemaDAO,\n             final DerSchemaDAO derSchemaDAO,\n             final DynRealmDAO dynRealmDAO,\n@@ -64,7 +60,6 @@ public JPAJSONUserDAO(\n             final JPAJSONAnyDAO anyDAO) {\n \n         super(anyUtilsFactory,\n-                publisher,\n                 plainSchemaDAO,\n                 derSchemaDAO,\n                 dynRealmDAO,\n@@ -129,8 +124,6 @@ protected Pair<User, Pair<Set<String>, Set<String>>> doSave(final User user) {\n         // ensure that entity listeners are invoked at this point\n         entityManager().flush();\n \n-        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));\n-\n         roleDAO.refreshDynMemberships(merged);\n         Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO.refreshDynMemberships(merged);\n         dynRealmDAO.refreshDynMemberships(merged);"},{"sha":"204f954c44eec0862c54c14efa6acd53b5235445","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -325,7 +325,6 @@ public AnyMatchDAO anyMatchDAO(\n     @ConditionalOnMissingBean\n     @Bean\n     public AnyObjectDAO anyObjectDAO(\n-            final ApplicationEventPublisher publisher,\n             final AnyUtilsFactory anyUtilsFactory,\n             final @Lazy PlainSchemaDAO plainSchemaDAO,\n             final @Lazy DerSchemaDAO derSchemaDAO,\n@@ -335,7 +334,6 @@ public AnyObjectDAO anyObjectDAO(\n \n         return new JPAAnyObjectDAO(\n                 anyUtilsFactory,\n-                publisher,\n                 plainSchemaDAO,\n                 derSchemaDAO,\n                 dynRealmDAO,\n@@ -651,7 +649,6 @@ public TaskExecDAO taskExecDAO(final TaskDAO taskDAO) {\n     @ConditionalOnMissingBean\n     @Bean\n     public UserDAO userDAO(\n-            final ApplicationEventPublisher publisher,\n             final SecurityProperties securityProperties,\n             final AnyUtilsFactory anyUtilsFactory,\n             final @Lazy PlainSchemaDAO plainSchemaDAO,\n@@ -665,7 +662,6 @@ public UserDAO userDAO(\n \n         return new JPAUserDAO(\n                 anyUtilsFactory,\n-                publisher,\n                 plainSchemaDAO,\n                 derSchemaDAO,\n                 dynRealmDAO,"},{"sha":"564c6fe5f55469b07e9cbd20da2f0ff1817aa595","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -64,16 +64,13 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n-import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> implements AnyDAO<A> {\n \n     protected final AnyUtilsFactory anyUtilsFactory;\n \n-    protected final ApplicationEventPublisher publisher;\n-\n     protected final PlainSchemaDAO plainSchemaDAO;\n \n     protected final DerSchemaDAO derSchemaDAO;\n@@ -84,13 +81,11 @@\n \n     public AbstractAnyDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n-            final ApplicationEventPublisher publisher,\n             final PlainSchemaDAO plainSchemaDAO,\n             final DerSchemaDAO derSchemaDAO,\n             final DynRealmDAO dynRealmDAO) {\n \n         this.anyUtilsFactory = anyUtilsFactory;\n-        this.publisher = publisher;\n         this.plainSchemaDAO = plainSchemaDAO;\n         this.derSchemaDAO = derSchemaDAO;\n         this.dynRealmDAO = dynRealmDAO;"},{"sha":"a49bd837d1adf89800a89835775ca34768a18283","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -61,10 +61,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n-import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n-import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n-import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -76,14 +73,13 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj\n \n     public JPAAnyObjectDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n-            final ApplicationEventPublisher publisher,\n             final PlainSchemaDAO plainSchemaDAO,\n             final DerSchemaDAO derSchemaDAO,\n             final DynRealmDAO dynRealmDAO,\n             final UserDAO userDAO,\n             final GroupDAO groupDAO) {\n \n-        super(anyUtilsFactory, publisher, plainSchemaDAO, derSchemaDAO, dynRealmDAO);\n+        super(anyUtilsFactory, plainSchemaDAO, derSchemaDAO, dynRealmDAO);\n         this.userDAO = userDAO;\n         this.groupDAO = groupDAO;\n     }\n@@ -236,7 +232,6 @@ public List<String> findAllKeys(final int page, final int itemsPerPage) {\n \n     protected Pair<AnyObject, Pair<Set<String>, Set<String>>> doSave(final AnyObject anyObject) {\n         AnyObject merged = super.save(anyObject);\n-        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));\n \n         Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO.refreshDynMemberships(merged);\n         dynRealmDAO.refreshDynMemberships(merged);\n@@ -291,8 +286,6 @@ public void delete(final AnyObject anyObject) {\n         });\n \n         entityManager().remove(anyObject);\n-        publisher.publishEvent(new AnyDeletedEvent(\n-                this, AnyTypeKind.ANY_OBJECT, anyObject.getKey(), anyObject.getName(), AuthContextUtils.getDomain()));\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)"},{"sha":"411711ad548641ca08c912f8dec968bdcbd09922","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.jpa.entity.JPADynRealm;\n-import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Transactional;\n@@ -37,6 +36,8 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n+import org.apache.syncope.core.provisioning.api.event.AnyLifecycleEvent;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n \n public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO {\n \n@@ -120,7 +121,8 @@ protected void notifyDynMembershipRemoval(final List<String> anyKeys) {\n                 any = anyObjectDAO.find(key);\n             }\n             if (any != null) {\n-                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, any, AuthContextUtils.getDomain()));\n+                publisher.publishEvent(\n+                        new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, any, AuthContextUtils.getDomain()));\n             }\n         });\n     }\n@@ -141,7 +143,8 @@ public DynRealm saveAndRefreshDynMemberships(final DynRealm dynRealm) {\n             insert.setParameter(2, merged.getKey());\n             insert.executeUpdate();\n \n-            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, any, AuthContextUtils.getDomain()));\n+            publisher.publishEvent(\n+                    new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, any, AuthContextUtils.getDomain()));\n             cleared.remove(any.getKey());\n         }));\n "},{"sha":"df071e5a7014f9073405be83ebc837fdc1385da7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":25,"deletions":17,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -66,11 +66,11 @@\n import org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n-import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n-import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n+import org.apache.syncope.core.provisioning.api.event.AnyLifecycleEvent;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -80,6 +80,8 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {\n \n     public static final String ADYNMEMB_TABLE = \"ADynGroupMembers\";\n \n+    protected final ApplicationEventPublisher publisher;\n+\n     protected final AnyMatchDAO anyMatchDAO;\n \n     protected final PlainAttrDAO plainAttrDAO;\n@@ -105,7 +107,8 @@ public JPAGroupDAO(\n             final AnySearchDAO searchDAO,\n             final SearchCondVisitor searchCondVisitor) {\n \n-        super(anyUtilsFactory, publisher, plainSchemaDAO, derSchemaDAO, dynRealmDAO);\n+        super(anyUtilsFactory, plainSchemaDAO, derSchemaDAO, dynRealmDAO);\n+        this.publisher = publisher;\n         this.anyMatchDAO = anyMatchDAO;\n         this.plainAttrDAO = plainAttrDAO;\n         this.userDAO = userDAO;\n@@ -289,7 +292,6 @@ protected SearchCond buildDynMembershipCond(final String baseCondFIQL, final Rea\n     @Override\n     public Group saveAndRefreshDynMemberships(final Group group) {\n         Group merged = save(group);\n-        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));\n \n         // refresh dynamic memberships\n         clearUDynMembers(merged);\n@@ -311,7 +313,8 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n                     insert.setParameter(2, merged.getKey());\n                     insert.executeUpdate();\n \n-                    publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user, AuthContextUtils.getDomain()));\n+                    publisher.publishEvent(\n+                            new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, user, AuthContextUtils.getDomain()));\n                 });\n             }\n         }\n@@ -328,15 +331,16 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n                         List.of(),\n                         AnyTypeKind.ANY_OBJECT);\n \n-                matching.forEach(anyObject -> {\n+                matching.forEach(any -> {\n                     Query insert = entityManager().createNativeQuery(\n                             \"INSERT INTO \" + ADYNMEMB_TABLE + \" VALUES(?, ?, ?)\");\n-                    insert.setParameter(1, anyObject.getType().getKey());\n-                    insert.setParameter(2, anyObject.getKey());\n+                    insert.setParameter(1, any.getType().getKey());\n+                    insert.setParameter(2, any.getKey());\n                     insert.setParameter(3, merged.getKey());\n                     insert.executeUpdate();\n \n-                    publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, anyObject, AuthContextUtils.getDomain()));\n+                    publisher.publishEvent(\n+                            new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, any, AuthContextUtils.getDomain()));\n                 });\n             }\n         });\n@@ -362,7 +366,8 @@ public void delete(final Group group) {\n             });\n \n             anyObjectDAO.save(leftEnd);\n-            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, leftEnd, AuthContextUtils.getDomain()));\n+            publisher.publishEvent(\n+                    new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, leftEnd, AuthContextUtils.getDomain()));\n         });\n \n         findUMemberships(group).forEach(membership -> {\n@@ -378,15 +383,14 @@ public void delete(final Group group) {\n             });\n \n             userDAO.save(leftEnd);\n-            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, leftEnd, AuthContextUtils.getDomain()));\n+            publisher.publishEvent(\n+                    new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, leftEnd, AuthContextUtils.getDomain()));\n         });\n \n         clearUDynMembers(group);\n         clearADynMembers(group);\n \n         entityManager().remove(group);\n-        publisher.publishEvent(new AnyDeletedEvent(\n-                this, AnyTypeKind.GROUP, group.getKey(), group.getName(), AuthContextUtils.getDomain()));\n     }\n \n     @Override\n@@ -516,7 +520,8 @@ public Pair<Set<String>, Set<String>> refreshDynMemberships(final AnyObject anyO\n                 delete.executeUpdate();\n             }\n \n-            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, memb.getGroup(), AuthContextUtils.getDomain()));\n+            publisher.publishEvent(\n+                    new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, memb.getGroup(), AuthContextUtils.getDomain()));\n         });\n \n         return Pair.of(before, after);\n@@ -534,7 +539,8 @@ public Set<String> removeDynMemberships(final AnyObject anyObject) {\n         dynGroups.forEach(group -> {\n             before.add(group.getKey());\n \n-            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, group, AuthContextUtils.getDomain()));\n+            publisher.publishEvent(\n+                    new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, group, AuthContextUtils.getDomain()));\n         });\n \n         return before;\n@@ -614,7 +620,8 @@ public Pair<Set<String>, Set<String>> refreshDynMemberships(final User user) {\n                 delete.executeUpdate();\n             }\n \n-            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, memb.getGroup(), AuthContextUtils.getDomain()));\n+            publisher.publishEvent(\n+                    new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, memb.getGroup(), AuthContextUtils.getDomain()));\n         });\n \n         return Pair.of(before, after);\n@@ -632,7 +639,8 @@ public Set<String> removeDynMemberships(final User user) {\n         dynGroups.forEach(group -> {\n             before.add(group.getKey());\n \n-            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, group, AuthContextUtils.getDomain()));\n+            publisher.publishEvent(\n+                    new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, group, AuthContextUtils.getDomain()));\n         });\n \n         return before;"},{"sha":"e2e2f1187587e98dd5fd86209eb813e13d4ae25c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -35,8 +35,9 @@\n import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n-import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n+import org.apache.syncope.core.provisioning.api.event.AnyLifecycleEvent;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -120,13 +121,14 @@ public Role saveAndRefreshDynMemberships(final Role role) {\n                     SearchCondConverter.convert(searchCondVisitor, merged.getDynMembership().getFIQLCond()),\n                     AnyTypeKind.USER);\n \n-            matching.forEach((user) -> {\n+            matching.forEach(user -> {\n                 Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n                 insert.setParameter(1, user.getKey());\n                 insert.setParameter(2, merged.getKey());\n                 insert.executeUpdate();\n \n-                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user, AuthContextUtils.getDomain()));\n+                publisher.publishEvent(\n+                        new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, user, AuthContextUtils.getDomain()));\n             });\n         }\n \n@@ -141,7 +143,8 @@ public void delete(final Role role) {\n \n         query.getResultList().forEach(user -> {\n             user.getRoles().remove(role);\n-            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user, AuthContextUtils.getDomain()));\n+            publisher.publishEvent(\n+                    new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, user, AuthContextUtils.getDomain()));\n         });\n \n         clearDynMembers(role);"},{"sha":"615d6ef0511fe21cadb47b4c65ff5319b754bdaa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":1,"deletions":9,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -69,15 +69,12 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPALinkedAccount;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n-import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n-import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.apache.syncope.core.spring.policy.AccountPolicyException;\n import org.apache.syncope.core.spring.policy.PasswordPolicyException;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n-import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -97,7 +94,6 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n \n     public JPAUserDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n-            final ApplicationEventPublisher publisher,\n             final PlainSchemaDAO plainSchemaDAO,\n             final DerSchemaDAO derSchemaDAO,\n             final DynRealmDAO dynRealmDAO,\n@@ -108,7 +104,7 @@ public JPAUserDAO(\n             final DelegationDAO delegationDAO,\n             final SecurityProperties securityProperties) {\n \n-        super(anyUtilsFactory, publisher, plainSchemaDAO, derSchemaDAO, dynRealmDAO);\n+        super(anyUtilsFactory, plainSchemaDAO, derSchemaDAO, dynRealmDAO);\n         this.roleDAO = roleDAO;\n         this.accessTokenDAO = accessTokenDAO;\n         this.realmDAO = realmDAO;\n@@ -463,8 +459,6 @@ protected Pair<User, Pair<Set<String>, Set<String>>> doSave(final User user) {\n             throw e;\n         }\n \n-        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));\n-\n         roleDAO.refreshDynMemberships(merged);\n         Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO.refreshDynMemberships(merged);\n         dynRealmDAO.refreshDynMemberships(merged);\n@@ -501,8 +495,6 @@ public void delete(final User user) {\n         }\n \n         entityManager().remove(user);\n-        publisher.publishEvent(new AnyDeletedEvent(\n-                this, AnyTypeKind.USER, user.getKey(), user.getUsername(), AuthContextUtils.getDomain()));\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)"},{"sha":"d9f503598ac52088c1276bd3b0dfd467c2f96a57","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/event/AnyDeletedEvent.java","status":"removed","additions":0,"deletions":65,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db980062bc3362d532f267db536bfc6c667893ea/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAnyDeletedEvent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db980062bc3362d532f267db536bfc6c667893ea/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAnyDeletedEvent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAnyDeletedEvent.java?ref=db980062bc3362d532f267db536bfc6c667893ea","patch":"@@ -1,65 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.api.event;\n-\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.springframework.context.ApplicationEvent;\n-\n-public class AnyDeletedEvent extends ApplicationEvent {\n-\n-    private static final long serialVersionUID = 6389886937942135639L;\n-\n-    private final AnyTypeKind anyTypeKind;\n-\n-    private final String anyKey;\n-\n-    private final String anyName;\n-\n-    private final String domain;\n-\n-    public AnyDeletedEvent(\n-            final Object source,\n-            final AnyTypeKind anyTypeKind,\n-            final String anyKey,\n-            final String anyName,\n-            final String domain) {\n-\n-        super(source);\n-        this.anyTypeKind = anyTypeKind;\n-        this.anyKey = anyKey;\n-        this.anyName = anyName;\n-        this.domain = domain;\n-    }\n-\n-    public AnyTypeKind getAnyTypeKind() {\n-        return anyTypeKind;\n-    }\n-\n-    public String getAnyKey() {\n-        return anyKey;\n-    }\n-\n-    public String getAnyName() {\n-        return anyName;\n-    }\n-\n-    public String getDomain() {\n-        return domain;\n-    }\n-}"},{"sha":"8fbc75f1c34baef5d32ca39309880efdb15d2e2f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/event/AnyLifecycleEvent.java","status":"renamed","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAnyLifecycleEvent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAnyLifecycleEvent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAnyLifecycleEvent.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -19,28 +19,36 @@\n package org.apache.syncope.core.provisioning.api.event;\n \n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.springframework.context.ApplicationEvent;\n \n-public class AnyCreatedUpdatedEvent<A extends Any<?>> extends ApplicationEvent {\n+public class AnyLifecycleEvent<A extends Any<?>> extends ApplicationEvent {\n \n     private static final long serialVersionUID = -781747175059834365L;\n \n+    private final SyncDeltaType type;\n+\n     private final A any;\n \n     private final String domain;\n \n-    public AnyCreatedUpdatedEvent(final Object source, final A any, final String domain) {\n+    public AnyLifecycleEvent(final Object source, final SyncDeltaType type, final A any, final String domain) {\n         super(source);\n+\n+        this.type = type;\n         this.any = any;\n         this.domain = domain;\n     }\n \n+    public SyncDeltaType getType() {\n+        return type;\n+    }\n+\n     public A getAny() {\n         return any;\n     }\n \n     public String getDomain() {\n         return domain;\n     }\n-\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/event/AnyCreatedUpdatedEvent.java"},{"sha":"dcdba391becb2d516847f1b2b9a4228569fb1fc5","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultAnyObjectWorkflowAdapter.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -27,18 +27,26 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n+import org.apache.syncope.core.provisioning.api.event.AnyLifecycleEvent;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n+import org.springframework.context.ApplicationEventPublisher;\n \n /**\n  * Simple implementation basically not involving any workflow engine.\n  */\n public class DefaultAnyObjectWorkflowAdapter extends AbstractAnyObjectWorkflowAdapter {\n \n+    protected final ApplicationEventPublisher publisher;\n+\n     public DefaultAnyObjectWorkflowAdapter(\n             final AnyObjectDataBinder dataBinder,\n             final AnyObjectDAO anyObjectDAO,\n-            final EntityFactory entityFactory) {\n+            final EntityFactory entityFactory,\n+            final ApplicationEventPublisher publisher) {\n \n         super(dataBinder, anyObjectDAO, entityFactory);\n+        this.publisher = publisher;\n     }\n \n     @Override\n@@ -50,6 +58,9 @@ protected WorkflowResult<String> doCreate(\n         metadata(anyObject, creator, context);\n         anyObject = anyObjectDAO.save(anyObject);\n \n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.CREATE, anyObject, AuthContextUtils.getDomain()));\n+\n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.set(ResourceOperation.CREATE, anyObjectDAO.findAllResourceKeys(anyObject.getKey()));\n \n@@ -62,13 +73,19 @@ protected WorkflowResult<AnyObjectUR> doUpdate(\n \n         PropagationByResource<String> propByRes = dataBinder.update(anyObject, anyObjectUR);\n         metadata(anyObject, updater, context);\n-        anyObjectDAO.save(anyObject);\n+        AnyObject updated = anyObjectDAO.save(anyObject);\n+\n+        publisher.publishEvent(new AnyLifecycleEvent<>(\n+                this, SyncDeltaType.UPDATE, updated, AuthContextUtils.getDomain()));\n \n         return new WorkflowResult<>(anyObjectUR, propByRes, \"update\");\n     }\n \n     @Override\n     protected void doDelete(final AnyObject anyObject, final String eraser, final String context) {\n         anyObjectDAO.delete(anyObject);\n+\n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.DELETE, anyObject, AuthContextUtils.getDomain()));\n     }\n }"},{"sha":"f35a7ee9119facb970b8163fdcc516c42f417581","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultGroupWorkflowAdapter.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -27,18 +27,26 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n+import org.apache.syncope.core.provisioning.api.event.AnyLifecycleEvent;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n+import org.springframework.context.ApplicationEventPublisher;\n \n /**\n  * Simple implementation basically not involving any workflow engine.\n  */\n public class DefaultGroupWorkflowAdapter extends AbstractGroupWorkflowAdapter {\n \n+    protected final ApplicationEventPublisher publisher;\n+\n     public DefaultGroupWorkflowAdapter(\n             final GroupDataBinder dataBinder,\n             final GroupDAO groupDAO,\n-            final EntityFactory entityFactory) {\n+            final EntityFactory entityFactory,\n+            final ApplicationEventPublisher publisher) {\n \n         super(dataBinder, groupDAO, entityFactory);\n+        this.publisher = publisher;\n     }\n \n     @Override\n@@ -48,6 +56,9 @@ protected WorkflowResult<String> doCreate(final GroupCR groupCR, final String cr\n         metadata(group, creator, context);\n         group = groupDAO.saveAndRefreshDynMemberships(group);\n \n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.CREATE, group, AuthContextUtils.getDomain()));\n+\n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.set(ResourceOperation.CREATE, groupDAO.findAllResourceKeys(group.getKey()));\n \n@@ -60,13 +71,19 @@ protected WorkflowResult<GroupUR> doUpdate(\n \n         PropagationByResource<String> propByRes = dataBinder.update(group, groupUR);\n         metadata(group, updater, context);\n-        groupDAO.save(group);\n+        Group updated = groupDAO.save(group);\n+\n+        publisher.publishEvent(new AnyLifecycleEvent<>(\n+                this, SyncDeltaType.UPDATE, updated, AuthContextUtils.getDomain()));\n \n         return new WorkflowResult<>(groupUR, propByRes, \"update\");\n     }\n \n     @Override\n     protected void doDelete(final Group group, final String eraser, final String context) {\n         groupDAO.delete(group);\n+\n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.DELETE, group, AuthContextUtils.getDomain()));\n     }\n }"},{"sha":"ebeed5a65cdc39f54b86a390e5f71bb9b96ffb1f","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":31,"deletions":3,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -30,8 +30,11 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.apache.syncope.core.provisioning.api.event.AnyLifecycleEvent;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n \n /**\n  * Simple implementation basically not involving any workflow engine.\n@@ -40,14 +43,18 @@ public class DefaultUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n \n     protected final ConfParamOps confParamOps;\n \n+    protected final ApplicationEventPublisher publisher;\n+\n     public DefaultUserWorkflowAdapter(\n             final UserDataBinder dataBinder,\n             final UserDAO userDAO,\n             final EntityFactory entityFactory,\n-            final ConfParamOps confParamOps) {\n+            final ConfParamOps confParamOps,\n+            final ApplicationEventPublisher publisher) {\n \n         super(dataBinder, userDAO, entityFactory);\n         this.confParamOps = confParamOps;\n+        this.publisher = publisher;\n     }\n \n     @Override\n@@ -83,6 +90,9 @@ protected UserWorkflowResult<Pair<String, Boolean>> doCreate(\n         user.setStatus(status);\n         user = userDAO.save(user);\n \n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.CREATE, user, AuthContextUtils.getDomain()));\n+\n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.set(ResourceOperation.CREATE, userDAO.findAllResourceKeys(user.getKey()));\n \n@@ -111,6 +121,9 @@ protected UserWorkflowResult<String> doActivate(\n         user.setStatus(\"active\");\n         User updated = userDAO.save(user);\n \n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, updated, AuthContextUtils.getDomain()));\n+\n         return new UserWorkflowResult<>(updated.getKey(), null, null, \"activate\");\n     }\n \n@@ -122,7 +135,10 @@ protected UserWorkflowResult<Pair<UserUR, Boolean>> doUpdate(\n                 dataBinder.update(user, userUR);\n \n         metadata(user, updater, context);\n-        userDAO.save(user);\n+        User updated = userDAO.save(user);\n+\n+        publisher.publishEvent(new AnyLifecycleEvent<>(\n+                this, SyncDeltaType.UPDATE, updated, AuthContextUtils.getDomain()));\n \n         return new UserWorkflowResult<>(\n                 Pair.of(userUR, !user.isSuspended()),\n@@ -137,6 +153,9 @@ protected UserWorkflowResult<String> doSuspend(final User user, final String upd\n         user.setStatus(\"suspended\");\n         User updated = userDAO.save(user);\n \n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, updated, AuthContextUtils.getDomain()));\n+\n         return new UserWorkflowResult<>(updated.getKey(), null, null, \"suspend\");\n     }\n \n@@ -146,6 +165,9 @@ protected UserWorkflowResult<String> doReactivate(final User user, final String\n         user.setStatus(\"active\");\n         User updated = userDAO.save(user);\n \n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, updated, AuthContextUtils.getDomain()));\n+\n         return new UserWorkflowResult<>(updated.getKey(), null, null, \"reactivate\");\n     }\n \n@@ -155,7 +177,10 @@ protected void doRequestPasswordReset(final User user, final String updater, fin\n                 confParamOps.get(AuthContextUtils.getDomain(), \"token.length\", 256, Integer.class),\n                 confParamOps.get(AuthContextUtils.getDomain(), \"token.expireTime\", 60, Integer.class));\n         metadata(user, updater, context);\n-        userDAO.save(user);\n+        User updated = userDAO.save(user);\n+\n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, updated, AuthContextUtils.getDomain()));\n     }\n \n     @Override\n@@ -181,5 +206,8 @@ protected UserWorkflowResult<Pair<UserUR, Boolean>> doConfirmPasswordReset(\n     @Override\n     protected void doDelete(final User user, final String eraser, final String context) {\n         userDAO.delete(user);\n+\n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.DELETE, user, AuthContextUtils.getDomain()));\n     }\n }"},{"sha":"3ce0018668299d9a17f6867e91dc0adeaccd7ce2","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/WorkflowContext.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FWorkflowContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FWorkflowContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FWorkflowContext.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n@@ -42,28 +43,31 @@ public UserWorkflowAdapter uwfAdapter(\n             final UserDataBinder userDataBinder,\n             final UserDAO userDAO,\n             final EntityFactory entityFactory,\n-            final ConfParamOps confParamOps) {\n+            final ConfParamOps confParamOps,\n+            final ApplicationEventPublisher publisher) {\n \n-        return new DefaultUserWorkflowAdapter(userDataBinder, userDAO, entityFactory, confParamOps);\n+        return new DefaultUserWorkflowAdapter(userDataBinder, userDAO, entityFactory, confParamOps, publisher);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n     public GroupWorkflowAdapter gwfAdapter(\n             final GroupDataBinder groupDataBinder,\n             final GroupDAO groupDAO,\n-            final EntityFactory entityFactory) {\n+            final EntityFactory entityFactory,\n+            final ApplicationEventPublisher publisher) {\n \n-        return new DefaultGroupWorkflowAdapter(groupDataBinder, groupDAO, entityFactory);\n+        return new DefaultGroupWorkflowAdapter(groupDataBinder, groupDAO, entityFactory, publisher);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n     public AnyObjectWorkflowAdapter awfAdapter(\n             final AnyObjectDataBinder anyObjectDataBinder,\n             final AnyObjectDAO anyObjectDAO,\n-            final EntityFactory entityFactory) {\n+            final EntityFactory entityFactory,\n+            final ApplicationEventPublisher publisher) {\n \n-        return new DefaultAnyObjectWorkflowAdapter(anyObjectDataBinder, anyObjectDAO, entityFactory);\n+        return new DefaultAnyObjectWorkflowAdapter(anyObjectDataBinder, anyObjectDAO, entityFactory, publisher);\n     }\n }"},{"sha":"8822a2ab9184363b1d435ed0a2e202681369859d","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchIndexManager.java","status":"modified","additions":25,"deletions":27,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -41,9 +41,8 @@\n import java.util.Map;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n-import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.provisioning.api.event.AnyLifecycleEvent;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.transaction.event.TransactionalEventListener;\n@@ -145,29 +144,28 @@ public void removeIndex(final String domain, final AnyTypeKind kind) throws IOEx\n     }\n \n     @TransactionalEventListener\n-    public void after(final AnyCreatedUpdatedEvent<Any<?>> event) throws IOException {\n-        String index = ElasticsearchUtils.getContextDomainName(\n-                AuthContextUtils.getDomain(), event.getAny().getType().getKind());\n-\n-        IndexRequest<Map<String, Object>> request = new IndexRequest.Builder<Map<String, Object>>().\n-                index(index).\n-                id(event.getAny().getKey()).\n-                document(elasticsearchUtils.document(event.getAny(), event.getDomain())).\n-                build();\n-        IndexResponse response = client.index(request);\n-        LOG.debug(\"Index successfully created or updated for {}: {}\", event.getAny(), response);\n-    }\n-\n-    @TransactionalEventListener\n-    public void after(final AnyDeletedEvent event) throws IOException {\n-        LOG.debug(\"About to delete index for {}[{}]\", event.getAnyTypeKind(), event.getAnyKey());\n-\n-        DeleteRequest request = new DeleteRequest.Builder().index(\n-                ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), event.getAnyTypeKind())).\n-                id(event.getAnyKey()).\n-                build();\n-        DeleteResponse response = client.delete(request);\n-        LOG.debug(\"Index successfully deleted for {}[{}]: {}\",\n-                event.getAnyTypeKind(), event.getAnyKey(), response);\n+    public void after(final AnyLifecycleEvent<Any<?>> event) throws IOException {\n+        LOG.debug(\"About to {} index for {}\", event.getType().name(), event.getAny());\n+\n+        if (event.getType() == SyncDeltaType.DELETE) {\n+            DeleteRequest request = new DeleteRequest.Builder().index(\n+                    ElasticsearchUtils.getContextDomainName(event.getDomain(), event.getAny().getType().getKind())).\n+                    id(event.getAny().getKey()).\n+                    build();\n+            DeleteResponse response = client.delete(request);\n+            LOG.debug(\"Index successfully deleted for {}[{}]: {}\",\n+                    event.getAny().getType().getKind(), event.getAny().getKey(), response);\n+        } else {\n+            String index = ElasticsearchUtils.getContextDomainName(\n+                    event.getDomain(), event.getAny().getType().getKind());\n+\n+            IndexRequest<Map<String, Object>> request = new IndexRequest.Builder<Map<String, Object>>().\n+                    index(index).\n+                    id(event.getAny().getKey()).\n+                    document(elasticsearchUtils.document(event.getAny(), event.getDomain())).\n+                    build();\n+            IndexResponse response = client.index(request);\n+            LOG.debug(\"Index successfully created or updated for {}: {}\", event.getAny(), response);\n+        }\n     }\n }"},{"sha":"78de31524377cf6f75268e30fddec1caa5f4c22f","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/FlowableWorkflowContext.java","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FFlowableWorkflowContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FFlowableWorkflowContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FFlowableWorkflowContext.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -54,6 +54,7 @@\n import org.flowable.spring.SpringProcessEngineConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -76,7 +77,7 @@ public SpringIdmEngineConfiguration syncopeIdmEngineConfiguration(final Configur\n     @ConditionalOnMissingBean\n     @Bean\n     public SpringIdmEngineConfigurator syncopeIdmEngineConfigurator(\n-        final SpringIdmEngineConfiguration syncopeIdmEngineConfiguration) {\n+            final SpringIdmEngineConfiguration syncopeIdmEngineConfiguration) {\n         SpringIdmEngineConfigurator configurator = new SpringIdmEngineConfigurator();\n         configurator.setIdmEngineConfiguration(syncopeIdmEngineConfiguration);\n         return configurator;\n@@ -133,11 +134,11 @@ public IdGenerator idGenerator() {\n     @Bean\n     @Scope(\"prototype\")\n     public SpringProcessEngineConfiguration processEngineConfiguration(\n-        final WorkflowFlowableProperties props,\n-        final SpringIdmEngineConfigurator syncopeIdmEngineConfigurator,\n-        final IdGenerator idGenerator,\n-        final SyncopeEntitiesVariableType syncopeEntitiesVariableType,\n-        final SyncopeFormHandlerHelper syncopeFormHandlerHelper) {\n+            final WorkflowFlowableProperties props,\n+            final SpringIdmEngineConfigurator syncopeIdmEngineConfigurator,\n+            final IdGenerator idGenerator,\n+            final SyncopeEntitiesVariableType syncopeEntitiesVariableType,\n+            final SyncopeFormHandlerHelper syncopeFormHandlerHelper) {\n         SpringProcessEngineConfiguration conf = new SpringProcessEngineConfiguration();\n         conf.setDatabaseSchemaUpdate(AbstractEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n         conf.setJpaHandleTransaction(true);\n@@ -159,7 +160,7 @@ public DomainProcessEngineFactoryBean domainProcessEngineFactoryBean(final Confi\n \n     @Bean\n     public Resource userWorkflowDef(final WorkflowFlowableProperties props,\n-                                    final ResourceLoader resourceLoader) {\n+            final ResourceLoader resourceLoader) {\n         return resourceLoader.getResource(props.getUserWorkflowDef());\n     }\n \n@@ -170,14 +171,16 @@ public UserWorkflowAdapter uwfAdapter(\n             final UserDAO userDAO,\n             final EntityFactory entityFactory,\n             final DomainProcessEngine engine,\n-            final UserRequestHandler userRequestHandler) {\n+            final UserRequestHandler userRequestHandler,\n+            final ApplicationEventPublisher publisher) {\n \n         return new FlowableUserWorkflowAdapter(\n                 userDataBinder,\n                 userDAO,\n                 entityFactory,\n                 engine,\n-                userRequestHandler);\n+                userRequestHandler,\n+                publisher);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"94a80a07179d8b7d6be160072c7d236b4bac2b36","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/UserRequestHandler.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FUserRequestHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FUserRequestHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FUserRequestHandler.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -25,9 +25,10 @@\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.common.lib.to.WorkflowTaskExecInput;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n-import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n+import org.apache.syncope.core.provisioning.api.event.AnyLifecycleEvent;\n import org.flowable.engine.runtime.ProcessInstance;\n import org.springframework.transaction.event.TransactionalEventListener;\n \n@@ -84,7 +85,7 @@ Pair<Integer, List<UserRequest>> getUserRequests(\n      * @param event delete event\n      */\n     @TransactionalEventListener\n-    void cancelByUser(AnyDeletedEvent event);\n+    void cancelByUser(AnyLifecycleEvent<Any<?>> event);\n \n     /**\n      * Get the form matching the provided task id."},{"sha":"efb237ba2a986ae5c7689eb5dce4b43ca671c32a","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -37,7 +37,6 @@\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.common.lib.to.UserRequestFormPropertyValue;\n import org.apache.syncope.common.lib.to.WorkflowTaskExecInput;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UserRequestFormPropertyType;\n import org.apache.syncope.core.flowable.api.DropdownValueProvider;\n@@ -46,12 +45,13 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n-import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n+import org.apache.syncope.core.provisioning.api.event.AnyLifecycleEvent;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n@@ -69,6 +69,7 @@\n import org.flowable.task.api.TaskQuery;\n import org.flowable.task.api.history.HistoricTaskInstance;\n import org.flowable.variable.api.history.HistoricVariableInstance;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -265,13 +266,16 @@ public void cancelByProcessDefinition(final String processDefinitionId) {\n     }\n \n     @Override\n-    public void cancelByUser(final AnyDeletedEvent event) {\n-        if (AuthContextUtils.getDomain().equals(event.getDomain()) && event.getAnyTypeKind() == AnyTypeKind.USER) {\n-            String username = event.getAnyName();\n+    public void cancelByUser(final AnyLifecycleEvent<Any<?>> event) {\n+        if (AuthContextUtils.getDomain().equals(event.getDomain())\n+                && event.getType() == SyncDeltaType.DELETE\n+                && event.getAny() instanceof User) {\n+\n+            User user = (User) event.getAny();\n             engine.getRuntimeService().createNativeProcessInstanceQuery().\n-                    sql(createProcessInstanceQuery(event.getAnyKey()).toString()).\n+                    sql(createProcessInstanceQuery(user.getKey()).toString()).\n                     list().forEach(procInst -> engine.getRuntimeService().deleteProcessInstance(\n-                    procInst.getId(), \"Cascade Delete user \" + username));\n+                    procInst.getId(), \"Cascade Delete user \" + user.getUsername()));\n         }\n     }\n "},{"sha":"3453f49394730c4f445c7d8206d4c223cea3debc","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java","status":"modified","additions":44,"deletions":4,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n+import org.apache.syncope.core.provisioning.api.event.AnyLifecycleEvent;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.apache.syncope.core.workflow.java.AbstractUserWorkflowAdapter;\n import org.flowable.bpmn.model.FlowElement;\n@@ -51,24 +52,30 @@\n import org.flowable.common.engine.api.FlowableException;\n import org.flowable.engine.runtime.ProcessInstance;\n import org.flowable.task.api.Task;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.springframework.beans.BeanUtils;\n+import org.springframework.context.ApplicationEventPublisher;\n \n public class FlowableUserWorkflowAdapter extends AbstractUserWorkflowAdapter implements WorkflowTaskManager {\n \n     protected final DomainProcessEngine engine;\n \n     protected final UserRequestHandler userRequestHandler;\n \n+    protected final ApplicationEventPublisher publisher;\n+\n     public FlowableUserWorkflowAdapter(\n             final UserDataBinder dataBinder,\n             final UserDAO userDAO,\n             final EntityFactory entityFactory,\n             final DomainProcessEngine engine,\n-            final UserRequestHandler userRequestHandler) {\n+            final UserRequestHandler userRequestHandler,\n+            final ApplicationEventPublisher publisher) {\n \n         super(dataBinder, userDAO, entityFactory);\n         this.engine = engine;\n         this.userRequestHandler = userRequestHandler;\n+        this.publisher = publisher;\n     }\n \n     @Override\n@@ -144,6 +151,9 @@ protected UserWorkflowResult<Pair<String, Boolean>> doCreate(\n         FlowableRuntimeUtils.updateStatus(engine, procInst.getProcessInstanceId(), user);\n         User created = userDAO.save(user);\n \n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.CREATE, created, AuthContextUtils.getDomain()));\n+\n         engine.getRuntimeService().updateBusinessKey(\n                 procInst.getProcessInstanceId(), FlowableRuntimeUtils.getWFProcBusinessKey(created.getKey()));\n \n@@ -235,6 +245,9 @@ protected UserWorkflowResult<String> doActivate(\n         FlowableRuntimeUtils.updateStatus(engine, procInstID, user);\n         User updated = userDAO.save(user);\n \n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, updated, AuthContextUtils.getDomain()));\n+\n         variables.keySet().forEach(key -> engine.getRuntimeService().removeVariable(procInstID, key));\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.WF_EXECUTOR);\n@@ -271,6 +284,9 @@ protected UserWorkflowResult<Pair<UserUR, Boolean>> doUpdate(\n         FlowableRuntimeUtils.updateStatus(engine, procInstID, user);\n         User updated = userDAO.save(user);\n \n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, updated, AuthContextUtils.getDomain()));\n+\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.WF_EXECUTOR);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.TASK);\n@@ -327,6 +343,9 @@ protected UserWorkflowResult<String> doSuspend(final User user, final String upd\n         FlowableRuntimeUtils.updateStatus(engine, procInstID, user);\n         User updated = userDAO.save(user);\n \n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, updated, AuthContextUtils.getDomain()));\n+\n         @SuppressWarnings(\"unchecked\")\n         PropagationByResource<String> propByRes = engine.getRuntimeService().getVariable(\n                 procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n@@ -357,6 +376,9 @@ protected UserWorkflowResult<String> doReactivate(final User user, final String\n         FlowableRuntimeUtils.updateStatus(engine, procInstID, user);\n         User updated = userDAO.save(user);\n \n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, updated, AuthContextUtils.getDomain()));\n+\n         @SuppressWarnings(\"unchecked\")\n         PropagationByResource<String> propByRes = engine.getRuntimeService().getVariable(\n                 procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n@@ -388,7 +410,10 @@ protected void doRequestPasswordReset(final User user, final String updater, fin\n         doExecuteNextTask(procInstID, user, variables);\n \n         metadata(user, updater, context);\n-        userDAO.save(user);\n+        User updated = userDAO.save(user);\n+\n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, updated, AuthContextUtils.getDomain()));\n \n         variables.keySet().forEach(key -> engine.getRuntimeService().removeVariable(procInstID, key));\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER);\n@@ -411,7 +436,10 @@ protected UserWorkflowResult<Pair<UserUR, Boolean>> doConfirmPasswordReset(\n         Set<String> tasks = doExecuteNextTask(procInstID, user, variables);\n \n         metadata(user, updater, context);\n-        userDAO.save(user);\n+        User updated = userDAO.save(user);\n+\n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, updated, AuthContextUtils.getDomain()));\n \n         variables.keySet().forEach(key -> engine.getRuntimeService().removeVariable(procInstID, key));\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER);\n@@ -454,6 +482,9 @@ protected void doDelete(final User user, final String eraser, final String conte\n \n             userDAO.delete(user.getKey());\n \n+            publisher.publishEvent(\n+                    new AnyLifecycleEvent<>(this, SyncDeltaType.DELETE, user, AuthContextUtils.getDomain()));\n+\n             if (!engine.getHistoryService().createHistoricProcessInstanceQuery().\n                     processInstanceId(procInstID).list().isEmpty()) {\n \n@@ -471,7 +502,10 @@ protected void doDelete(final User user, final String eraser, final String conte\n \n             FlowableRuntimeUtils.updateStatus(engine, procInstID, user);\n             metadata(user, eraser, context);\n-            userDAO.save(user);\n+            User updated = userDAO.save(user);\n+\n+            publisher.publishEvent(\n+                    new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, updated, AuthContextUtils.getDomain()));\n \n             engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.TASK);\n             engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER);\n@@ -493,6 +527,9 @@ public UserWorkflowResult<String> executeNextTask(final WorkflowTaskExecInput wo\n         FlowableRuntimeUtils.updateStatus(engine, procInstID, user);\n         user = userDAO.save(user);\n \n+        publisher.publishEvent(\n+                new AnyLifecycleEvent<>(this, SyncDeltaType.UPDATE, user, AuthContextUtils.getDomain()));\n+\n         engine.getRuntimeService().setVariable(\n                 procInstID, FlowableRuntimeUtils.USER_TO, dataBinder.getUserTO(user, true));\n \n@@ -501,6 +538,9 @@ public UserWorkflowResult<String> executeNextTask(final WorkflowTaskExecInput wo\n \n             userDAO.delete(user.getKey());\n \n+            publisher.publishEvent(\n+                    new AnyLifecycleEvent<>(this, SyncDeltaType.DELETE, user, AuthContextUtils.getDomain()));\n+\n             if (!engine.getHistoryService().createHistoricProcessInstanceQuery().\n                     processInstanceId(procInstID).list().isEmpty()) {\n "},{"sha":"065b9947812d9f446a158b3e4328b9018fb37b19","filename":"fit/core-reference/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77d1e9f2e84cadbec0173f9a2bc23dc59159aa40/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=77d1e9f2e84cadbec0173f9a2bc23dc59159aa40","patch":"@@ -544,6 +544,7 @@ under the License.\n                       <discovery.type>single-node</discovery.type>\n                       <cluster.name>elasticsearch</cluster.name>\n                       <xpack.security.enabled>false</xpack.security.enabled>\n+                      <ingest.geoip.downloader.enabled>false</ingest.geoip.downloader.enabled>\n                     </env>\n                     <ports>\n                       <port>9200:9200</port>"}]}