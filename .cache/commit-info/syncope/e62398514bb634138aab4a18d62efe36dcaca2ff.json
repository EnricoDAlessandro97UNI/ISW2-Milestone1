{"sha":"e62398514bb634138aab4a18d62efe36dcaca2ff","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU2MjM5ODUxNGJiNjM0MTM4YWFiNGExOGQ2MmVmZTM2ZGNhY2EyZmY=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2014-06-17T09:22:49Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2014-06-17T09:22:49Z"},"message":"[SYNCOPE-501] improved membership virtual attributes management, added propagation of only membership virtual attributes\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1603100 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f9a058742fa73705f8106ae33d2e51cec2ea755","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1f9a058742fa73705f8106ae33d2e51cec2ea755"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e62398514bb634138aab4a18d62efe36dcaca2ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e62398514bb634138aab4a18d62efe36dcaca2ff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e62398514bb634138aab4a18d62efe36dcaca2ff","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e62398514bb634138aab4a18d62efe36dcaca2ff/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"ddb0426d40bb817728d47d03098abb7ffe064a90","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ddb0426d40bb817728d47d03098abb7ffe064a90","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ddb0426d40bb817728d47d03098abb7ffe064a90"}],"stats":{"total":206,"additions":199,"deletions":7},"files":[{"sha":"e335bdd298bdf33afc2c71c0c1331ef013ee2942","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":33,"deletions":5,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e62398514bb634138aab4a18d62efe36dcaca2ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e62398514bb634138aab4a18d62efe36dcaca2ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=e62398514bb634138aab4a18d62efe36dcaca2ff","patch":"@@ -39,6 +39,8 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.mod.AttributeMod;\n+import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -249,6 +251,20 @@ public UserTO update(final UserMod userMod) {\n         UserMod actual = attrTransformer.transform(userMod);\n         LOG.debug(\"Transformed: {}\", actual);\n \n+        // SYNCOPE-501: check if there are memberships to be removed with virtual attributes assigned\n+        Boolean removeMemberships = Boolean.FALSE;\n+\n+        for (Long membershipId : actual.getMembershipsToRemove()) {\n+            if (!binder.fillMembershipVirtual(\n+                    null,\n+                    null,\n+                    membershipId,\n+                    Collections.<String>emptySet(),\n+                    Collections.<AttributeMod>emptySet(),\n+                    Boolean.TRUE).isEmpty()) {\n+                removeMemberships = Boolean.TRUE;\n+            }\n+        }\n         //Actual operations: workflow, propagation, notification\n         WorkflowResult<Map.Entry<UserMod, Boolean>> updated = uwfAdapter.update(actual);\n \n@@ -259,11 +275,23 @@ public UserTO update(final UserMod userMod) {\n                     updated.getResult().getKey().getId(),\n                     actual.getVirAttrsToRemove(),\n                     actual.getVirAttrsToUpdate());\n-            // SYNCOPE-501: update only virtual attributes (if any of them changed), password propagation is \n-            // not required\n-            tasks.addAll(propByResVirAttr.isEmpty()\n-                    ? Collections.<PropagationTask>emptyList()\n-                    : propagationManager.getUserUpdateTaskIds(updated, false, null));\n+            // SYNCOPE-501: update only virtual attributes (if any of them changed), password propagation is\n+            // not required, take care also of membership virtual attributes\n+            Boolean addOrUpdateMemberships = Boolean.FALSE;\n+            for (MembershipMod membershipMod : actual.getMembershipsToAdd()) {\n+                if (!binder.fillMembershipVirtual(\n+                        updated.getResult().getKey().getId(),\n+                        membershipMod.getRole(),\n+                        null,\n+                        membershipMod.getVirAttrsToRemove(),\n+                        membershipMod.getVirAttrsToUpdate(),\n+                        Boolean.FALSE).isEmpty()) {\n+                    addOrUpdateMemberships = Boolean.TRUE;\n+                }\n+            }\n+            tasks.addAll(!propByResVirAttr.isEmpty() || addOrUpdateMemberships || removeMemberships\n+                    ? propagationManager.getUserUpdateTaskIds(updated, false, null)\n+                    : Collections.<PropagationTask>emptyList());\n         }\n \n         PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext()."},{"sha":"60a43e64453b1177d27639c228ada91af89c4232","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e62398514bb634138aab4a18d62efe36dcaca2ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e62398514bb634138aab4a18d62efe36dcaca2ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=e62398514bb634138aab4a18d62efe36dcaca2ff","patch":"@@ -420,6 +420,14 @@ public PropagationByResource fillVirtual(final AbstractAttributable attributable\n \n         PropagationByResource propByRes = new PropagationByResource();\n \n+        final Set<ExternalResource> externalResources = new HashSet<ExternalResource>();\n+        externalResources.addAll(attributable.getResources());\n+\n+        if (attributable instanceof Membership) {\n+            externalResources.clear();\n+            externalResources.addAll(((Membership) attributable).getSyncopeUser().getResources());\n+        }\n+\n         // 1. virtual attributes to be removed\n         for (String vAttrToBeRemoved : vAttrsToBeRemoved) {\n             AbstractVirSchema virSchema = getVirSchema(vAttrToBeRemoved, attrUtil.virSchemaClass());\n@@ -436,7 +444,7 @@ public PropagationByResource fillVirtual(final AbstractAttributable attributable\n                     for (AbstractMappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n                         if (virSchema.getName().equals(mapItem.getIntAttrName())\n                                 && mapItem.getIntMappingType() == attrUtil.virIntMappingType()\n-                                && attributable.getResources().contains(resource)) {\n+                                && externalResources.contains(resource)) {\n \n                             propByRes.add(ResourceOperation.UPDATE, resource.getName());\n \n@@ -474,7 +482,7 @@ public PropagationByResource fillVirtual(final AbstractAttributable attributable\n                     for (AbstractMappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n                         if (virSchema.getName().equals(mapItem.getIntAttrName())\n                                 && mapItem.getIntMappingType() == attrUtil.virIntMappingType()\n-                                && attributable.getResources().contains(resource)) {\n+                                && externalResources.contains(resource)) {\n \n                             propByRes.add(ResourceOperation.UPDATE, resource.getName());\n                         }"},{"sha":"f8391fc8c8214c6989ebfcb4f8f2ec12c8e522a3","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e62398514bb634138aab4a18d62efe36dcaca2ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e62398514bb634138aab4a18d62efe36dcaca2ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=e62398514bb634138aab4a18d62efe36dcaca2ff","patch":"@@ -18,8 +18,10 @@\n  */\n package org.apache.syncope.core.rest.data;\n \n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.annotation.Resource;\n import org.apache.commons.lang3.StringUtils;\n@@ -107,6 +109,20 @@ public SyncopeUser getUserFromId(final Long userId) {\n         return user;\n     }\n \n+    @Transactional(readOnly = true)\n+    public Membership getMembershipFromId(final Long membershipId) {\n+        if (membershipId == null) {\n+            throw new NotFoundException(\"Null membership id\");\n+        }\n+\n+        Membership membership = membershipDAO.find(membershipId);\n+        if (membership == null) {\n+            throw new NotFoundException(\"Membership \" + membershipId);\n+        }\n+\n+        return membership;\n+    }\n+\n     @Transactional(readOnly = true)\n     public Set<String> getResourceNamesForUserId(final Long userId) {\n         return getUserFromId(userId).getResourceNames();\n@@ -454,4 +470,45 @@ public PropagationByResource fillVirtual(\n                 vAttrsToBeUpdated,\n                 AttributableUtil.getInstance(AttributableType.USER));\n     }\n+\n+    /**\n+     * SYNCOPE-501: build membership virtual attribute changes in case no other changes were made.\n+     *\n+     * @param userId user id\n+     * @param roleId role id\n+     * @param membershipId membership id\n+     * @param vAttrsToBeRemoved virtual attributes to be removed.\n+     * @param vAttrsToBeUpdated virtual attributes to be updated.\n+     * @param isRemoval flag to check if fill is on removed or added membership\n+     * @return operations to be performed on external resources formembership virtual attributes changes\n+     */\n+    public PropagationByResource fillMembershipVirtual(\n+            final Long userId, final Long roleId, final Long membershipId, final Set<String> vAttrsToBeRemoved,\n+            final Set<AttributeMod> vAttrsToBeUpdated, final Boolean isRemoval) {\n+        final Membership membership = membershipId == null\n+                ? getUserFromId(userId).getMembership(roleId)\n+                : getMembershipFromId(membershipId);\n+\n+        return membership == null ? new PropagationByResource() : isRemoval\n+                ? fillVirtual(\n+                        membership,\n+                        membership.getVirAttrs() == null\n+                        ? Collections.<String>emptySet()\n+                        : getAttributeNames(membership.getVirAttrs()),\n+                        vAttrsToBeUpdated,\n+                        AttributableUtil.getInstance(AttributableType.MEMBERSHIP))\n+                : fillVirtual(\n+                        membership,\n+                        vAttrsToBeRemoved,\n+                        vAttrsToBeUpdated,\n+                        AttributableUtil.getInstance(AttributableType.MEMBERSHIP));\n+    }\n+\n+    private Set<String> getAttributeNames(final List<? extends AbstractVirAttr> virAttrs) {\n+        final HashSet<String> virAttrNames = new HashSet<String>();\n+        for (AbstractVirAttr attr : virAttrs) {\n+            virAttrNames.add(attr.getSchema().getName());\n+        }\n+        return virAttrNames;\n+    }\n }"},{"sha":"15f391c7c0bfd2dd2d57d4f21afcb590e433ff9d","filename":"core/src/test/java/org/apache/syncope/core/rest/VirAttrTestITCase.java","status":"modified","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e62398514bb634138aab4a18d62efe36dcaca2ff/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e62398514bb634138aab4a18d62efe36dcaca2ff/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java?ref=e62398514bb634138aab4a18d62efe36dcaca2ff","patch":"@@ -27,6 +27,7 @@\n import java.util.Collections;\n import org.apache.commons.lang3.SerializationUtils;\n import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.common.mod.StatusMod;\n@@ -768,5 +769,103 @@ public void issueSYNCOPE501() {\n         assertFalse(userTO.getVirAttrMap().get(\"virtualdata\").getValues().isEmpty());\n         assertEquals(\"syncope501_updated@apache.org\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().\n                 get(0));\n+\n+        // ----------------------------------------------------------\n+        \n+        // PHASE 2: update only membership virtual attributes\n+        // -------------------------------------------\n+        // Update resource-db-virattr mapping adding new membership virtual schema mapping\n+        // -------------------------------------------\n+        ResourceTO resourceDBVirAttr = resourceService.read(RESOURCE_NAME_DBVIRATTR);\n+        assertNotNull(resourceDBVirAttr);\n+\n+        final MappingTO resourceUMapping = resourceDBVirAttr.getUmapping();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntAttrName(\"mvirtualdata\");\n+        item.setIntMappingType(IntMappingType.MembershipVirtualSchema);\n+        item.setExtAttrName(\"EMAIL\");\n+        item.setPurpose(MappingPurpose.BOTH);\n+\n+        resourceUMapping.addItem(item);\n+\n+        resourceDBVirAttr.setUmapping(resourceUMapping);\n+\n+        resourceService.update(RESOURCE_NAME_DBVIRATTR, resourceDBVirAttr);\n+        // -------------------------------------------\n+\n+        // -------------------------------------------\n+        // Create a role ad-hoc\n+        // -------------------------------------------\n+        final String roleName = \"issueSYNCOPE501-Role-\" + getUUIDString();\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(roleName);\n+        roleTO.setParent(2L);\n+        roleTO.setInheritTemplates(true);\n+        roleTO = createRole(roleTO);\n+        // -------------------------------------------\n+\n+        // 1. add membership, with virtual attribute populated, to user\n+        MembershipMod membershipMod = new MembershipMod();\n+        membershipMod.setRole(roleTO.getId());\n+        membershipMod.getVirAttrsToUpdate().add(attributeMod(\"mvirtualdata\", \"syncope501membership@test.org\"));\n+\n+        userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.setPwdPropRequest(statusMod);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        assertEquals(\"syncope501membership@test.org\",\n+                userTO.getMemberships().get(0).getVirAttrMap().get(\"mvirtualdata\").getValues().get(0));\n+\n+        // 2. update only membership virtual attribute and propagate user\n+        membershipMod = new MembershipMod();\n+        membershipMod.setRole(roleTO.getId());\n+        membershipMod.getVirAttrsToUpdate().add(attributeMod(\"mvirtualdata\",\n+                \"syncope501membership_updated@test.org\"));\n+        membershipMod.getVirAttrsToRemove().add(\"syncope501membership@test.org\");\n+\n+        userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.getMembershipsToRemove().add(userTO.getMemberships().iterator().next().getId());\n+        userMod.setPwdPropRequest(statusMod);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+\n+        // 3. check if change has been propagated\n+        assertEquals(\"syncope501membership_updated@test.org\", userTO.getMemberships().get(0).getVirAttrMap().\n+                get(\"mvirtualdata\").getValues().get(0));\n+\n+        // 4. delete membership and check on resource attribute deletion\n+        userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.getMembershipsToRemove().add(userTO.getMemberships().get(0).getId());\n+        userMod.setPwdPropRequest(statusMod);\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        assertTrue(userTO.getMemberships().isEmpty());\n+\n+        // read attribute value directly on resource\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+        final String emailValue = jdbcTemplate.queryForObject(\n+                \"SELECT EMAIL FROM testsync WHERE ID=?\", String.class, userTO.getId());\n+        assertTrue(StringUtils.isBlank(emailValue));\n+        // ----------------------------------------\n+\n+        // -------------------------------------------\n+        // Delete role ad-hoc and restore resource mapping\n+        // -------------------------------------------\n+        roleService.delete(roleTO.getId());\n+\n+        resourceUMapping.removeItem(item);\n+        resourceDBVirAttr.setUmapping(resourceUMapping);\n+        resourceService.update(RESOURCE_NAME_DBVIRATTR, resourceDBVirAttr);\n+        // -------------------------------------------\n     }\n }"}]}