{"sha":"85d3ba58670e9b4a137faeba9f9cab005c65ea04","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg1ZDNiYTU4NjcwZTliNGExMzdmYWViYTlmOWNhYjAwNWM2NWVhMDQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-03T12:03:12Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-03T12:03:12Z"},"message":"Refactoring stuff for new workflow adapter + implementing NoOpUserWorkflowAdapter\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247123 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8fb1415ebb1aa6fa7666e2adc97f306c76844cd1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8fb1415ebb1aa6fa7666e2adc97f306c76844cd1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/85d3ba58670e9b4a137faeba9f9cab005c65ea04","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/85d3ba58670e9b4a137faeba9f9cab005c65ea04","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/85d3ba58670e9b4a137faeba9f9cab005c65ea04","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/85d3ba58670e9b4a137faeba9f9cab005c65ea04/comments","author":null,"committer":null,"parents":[{"sha":"c4173361d916113a35834ae2a17b9f264e429bf7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c4173361d916113a35834ae2a17b9f264e429bf7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c4173361d916113a35834ae2a17b9f264e429bf7"}],"stats":{"total":4584,"additions":886,"deletions":3698},"files":[{"sha":"06d5bb47cdb306f4452dab830cbf7a8ec81796fb","filename":"archetype/src/main/resources/archetype-resources/core/pom.xml","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -51,19 +51,6 @@\n             <artifactId>jstl</artifactId>\r\n         </dependency>\r\n \r\n-        <dependency>\r\n-            <groupId>opensymphony</groupId>\r\n-            <artifactId>osworkflow</artifactId>\r\n-        </dependency>\r\n-        <dependency>\r\n-            <groupId>opensymphony</groupId>\r\n-            <artifactId>propertyset</artifactId>\r\n-        </dependency>\r\n-        <dependency>\r\n-            <groupId>opensymphony</groupId>\r\n-            <artifactId>oscore</artifactId>\r\n-        </dependency>\r\n-\r\n         <dependency>\r\n             <groupId>org.springframework.security</groupId>\r\n             <artifactId>spring-security-web</artifactId>\r"},{"sha":"0f436341133194f0066fd4eb59cc5bf3a7a54de0","filename":"archetype/src/main/resources/archetype-resources/pom.xml","status":"modified","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fpom.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -26,10 +26,6 @@\n         <spring>3.0.6.RELEASE</spring>\r\n         <aspectj.version>1.6.9</aspectj.version>\r\n \r\n-        <osworkflow.version>2.8.0</osworkflow.version>\r\n-        <propertyset.version>1.3</propertyset.version>\r\n-        <oscore.version>2.2.6</oscore.version>\r\n-\r\n         <wicket.version>1.4.18</wicket.version>\r\n \r\n         <commons-lang.version>2.6</commons-lang.version>\r\n@@ -106,22 +102,6 @@\n                 <version>${jstl.version}</version>\r\n             </dependency>\r\n \r\n-            <dependency>\r\n-                <groupId>opensymphony</groupId>\r\n-                <artifactId>osworkflow</artifactId>\r\n-                <version>${osworkflow.version}</version>\r\n-            </dependency>\r\n-            <dependency>\r\n-                <groupId>opensymphony</groupId>\r\n-                <artifactId>propertyset</artifactId>\r\n-                <version>${propertyset.version}</version>\r\n-            </dependency>\r\n-            <dependency>\r\n-                <groupId>opensymphony</groupId>\r\n-                <artifactId>oscore</artifactId>\r\n-                <version>${oscore.version}</version>\r\n-            </dependency>\r\n-\r\n             <dependency>\r\n                 <groupId>commons-lang</groupId>\r\n                 <artifactId>commons-lang</artifactId>\r"},{"sha":"36b59ac1d0f261f4d435d54eda8a92a42f2517f0","filename":"client/src/main/java/org/syncope/client/to/PropagationTaskTO.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPropagationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPropagationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPropagationTaskTO.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -15,15 +15,15 @@\n package org.syncope.client.to;\n \n import org.syncope.types.PropagationMode;\n-import org.syncope.types.ResourceOperationType;\n+import org.syncope.types.PropagationOperation;\n \n public class PropagationTaskTO extends TaskTO {\n \n     private static final long serialVersionUID = 386450127003321197L;\n \n     private PropagationMode propagationMode;\n \n-    private ResourceOperationType resourceOperationType;\n+    private PropagationOperation propagationOperation;\n \n     private String accountId;\n \n@@ -65,14 +65,14 @@ public void setResource(String resource) {\n         this.resource = resource;\n     }\n \n-    public ResourceOperationType getResourceOperationType() {\n-        return resourceOperationType;\n+    public PropagationOperation getPropagationOperation() {\n+        return propagationOperation;\n     }\n \n-    public void setResourceOperationType(\n-            ResourceOperationType resourceOperationType) {\n+    public void setPropagationOperation(\n+            PropagationOperation resourceOperationType) {\n \n-        this.resourceOperationType = resourceOperationType;\n+        this.propagationOperation = resourceOperationType;\n     }\n \n     public String getXmlAttributes() {"},{"sha":"3cbb200b696f77cae7da7de81897636ce973b874","filename":"client/src/main/java/org/syncope/client/to/WorkflowActionsTO.java","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FWorkflowActionsTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FWorkflowActionsTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FWorkflowActionsTO.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,44 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.to;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-import org.syncope.client.AbstractBaseBean;\n-\n-public class WorkflowActionsTO extends AbstractBaseBean {\n-\n-    private Set<String> actions;\n-\n-    public WorkflowActionsTO() {\n-        actions = new HashSet<String>();\n-    }\n-\n-    public boolean addAction(String action) {\n-        return actions.add(action);\n-    }\n-\n-    public boolean removeAction(String action) {\n-        return actions.remove(action);\n-    }\n-\n-    public Set<String> getActions() {\n-        return actions;\n-    }\n-\n-    public void setActions(Set<String> actions) {\n-        this.actions = actions;\n-    }\n-}"},{"sha":"04df9edf385fbbf4757b20e194d3a6f67e151a53","filename":"client/src/main/java/org/syncope/types/PropagationOperation.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPropagationOperation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPropagationOperation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPropagationOperation.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -14,7 +14,7 @@\n  */\n package org.syncope.types;\n \n-public enum ResourceOperationType {\n+public enum PropagationOperation {\n \n     CREATE, UPDATE, DELETE\n }","previous_filename":"client/src/main/java/org/syncope/types/ResourceOperationType.java"},{"sha":"a4a1913fdd2232df919ef9ec0e0e1d4b20ff7655","filename":"console/pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fpom.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -101,11 +101,6 @@\n             <artifactId>spring-webmvc</artifactId>\n         </dependency>\n \n-        <dependency>\n-            <groupId>org.codehaus.jackson</groupId>\n-            <artifactId>jackson-mapper-lgpl</artifactId>\n-        </dependency>\n-\n         <dependency>\n             <groupId>javax.servlet</groupId>\n             <artifactId>servlet-api</artifactId>"},{"sha":"2b64a12888ea101e9347b08f3f06f58aab7ceb79","filename":"core/pom.xml","status":"modified","additions":14,"deletions":62,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -76,31 +76,22 @@\n         </dependency>\n \n         <dependency>\n-            <groupId>commons-httpclient</groupId>\n-            <artifactId>commons-httpclient</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>opensymphony</groupId>\n-            <artifactId>osworkflow</artifactId>\n+            <groupId>org.activiti</groupId>\n+            <artifactId>activiti-engine</artifactId>\n         </dependency>\n         <dependency>\n-            <groupId>opensymphony</groupId>\n-            <artifactId>propertyset</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>opensymphony</groupId>\n-            <artifactId>oscore</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.beanshell</groupId>\n-            <artifactId>bsh</artifactId>\n+            <groupId>org.activiti</groupId>\n+            <artifactId>activiti-spring</artifactId>            \n         </dependency>\n \n         <dependency>\n             <groupId>org.springframework</groupId>\n             <artifactId>spring-core</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-beans</artifactId>\n+        </dependency>\n         <dependency>\n             <groupId>org.springframework</groupId>\n             <artifactId>spring-context</artifactId>\n@@ -133,37 +124,12 @@\n             <groupId>org.springframework.security</groupId>\n             <artifactId>spring-security-config</artifactId>\n         </dependency>\n-        <dependency>\n-            <groupId>javax.inject</groupId>\n-            <artifactId>inject-api</artifactId>\n-            <version>1.0.0-PRD</version>\n-            <scope>compile</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>cglib</groupId>\n-            <artifactId>cglib-nodep</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>org.codehaus.jackson</groupId>\n-            <artifactId>jackson-mapper-lgpl</artifactId>\n-        </dependency>\n \n         <dependency>\n             <groupId>com.thoughtworks.xstream</groupId>\n             <artifactId>xstream</artifactId>\n         </dependency>\n \n-        <dependency>\n-            <groupId>org.aspectj</groupId>\n-            <artifactId>aspectjrt</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.aspectj</groupId>\n-            <artifactId>aspectjweaver</artifactId>\n-        </dependency>\n-\n         <dependency>\n             <groupId>org.apache.velocity</groupId>\n             <artifactId>velocity</artifactId>\n@@ -232,18 +198,6 @@\n             <artifactId>framework-internal</artifactId>\n         </dependency>\n \n-        <!-- CXF: needed by soap connector -->\n-        <dependency>\n-            <groupId>org.apache.cxf</groupId>\n-            <artifactId>cxf-rt-frontend-jaxws</artifactId>\n-            <scope>runtime</scope>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.cxf</groupId>\n-            <artifactId>cxf-rt-transports-http</artifactId>\n-            <scope>runtime</scope>\n-        </dependency>\n-\n         <!-- TEST -->\n         <dependency>\n             <groupId>org.connid.bundles.soap</groupId>\n@@ -276,6 +230,11 @@\n             <artifactId>hsqldb</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>commons-httpclient</groupId>\n+            <artifactId>commons-httpclient</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>org.springframework</groupId>\n             <artifactId>spring-test</artifactId>\n@@ -293,10 +252,6 @@\n                 </exclusion>\n             </exclusions>\n         </dependency>\n-        <dependency>\n-        \t<groupId>org.mockito</groupId>\n-        \t<artifactId>mockito-core</artifactId>\n-        </dependency>\n         <!-- /TEST -->\n     </dependencies>\n \n@@ -353,9 +308,6 @@\n                         </goals>\n                         <configuration>\n                             <skip>false</skip>\n-                            <includes>\n-                                <include>**/dao/*Test.java</include>\n-                            </includes>\n                             <excludes>\n                                 <exclude>**/relationships/**Test.java</exclude>\n                             </excludes>\n@@ -456,7 +408,7 @@\n                 <executions>\n                     <execution>\n                         <id>set-bundles</id>\n-                        <phase>pre-integration-test</phase>\n+                        <phase>process-test-resources</phase>\n                         <goals>\n                             <goal>copy</goal>\n                         </goals>"},{"sha":"bdd159bb6dada8ab7cb63da5db2647cf67e7a7aa","filename":"core/src/main/java/jpasymphony/beans/AbstractJPAStep.java","status":"removed","additions":0,"deletions":145,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FAbstractJPAStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FAbstractJPAStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FAbstractJPAStep.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,145 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package jpasymphony.beans;\n-\n-import com.opensymphony.workflow.spi.Step;\n-import java.util.Date;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.MappedSuperclass;\n-import javax.persistence.Temporal;\n-import javax.persistence.TemporalType;\n-import org.syncope.core.persistence.beans.AbstractBaseBean;\n-\n-@MappedSuperclass\n-public abstract class AbstractJPAStep extends AbstractBaseBean implements Step {\n-\n-    protected Integer actionId;\n-\n-    protected Integer stepId;\n-\n-    protected String caller;\n-\n-    @Temporal(TemporalType.TIMESTAMP)\n-    protected Date finishDate;\n-\n-    @Temporal(TemporalType.TIMESTAMP)\n-    protected Date startDate;\n-\n-    @Temporal(TemporalType.TIMESTAMP)\n-    protected Date dueDate;\n-\n-    protected String owner;\n-\n-    protected String status;\n-\n-    @ManyToOne\n-    protected JPAWorkflowEntry workflowEntry;\n-\n-    public JPAWorkflowEntry getWorkflowEntry() {\n-        return workflowEntry;\n-    }\n-\n-    public void setWorkflowEntry(JPAWorkflowEntry workflowEntry) {\n-        this.workflowEntry = workflowEntry;\n-    }\n-\n-    public void setActionId(Integer actionId) {\n-        this.actionId = actionId;\n-    }\n-\n-    @Override\n-    public int getActionId() {\n-        return actionId;\n-    }\n-\n-    public void setCaller(String caller) {\n-        this.caller = caller;\n-    }\n-\n-    @Override\n-    public String getCaller() {\n-        return caller;\n-    }\n-\n-    public void setDueDate(Date dueDate) {\n-        this.dueDate = dueDate;\n-    }\n-\n-    @Override\n-    public Date getDueDate() {\n-        return dueDate;\n-    }\n-\n-    @Override\n-    public long getEntryId() {\n-        return workflowEntry.getId();\n-    }\n-\n-    public void setFinishDate(Date finishDate) {\n-        this.finishDate = finishDate;\n-    }\n-\n-    @Override\n-    public Date getFinishDate() {\n-        return finishDate;\n-    }\n-\n-    public void setOwner(String owner) {\n-        this.owner = owner;\n-    }\n-\n-    @Override\n-    public String getOwner() {\n-        return owner;\n-    }\n-\n-    public void setStartDate(Date startDate) {\n-        this.startDate = startDate;\n-    }\n-\n-    @Override\n-    public Date getStartDate() {\n-        return startDate;\n-    }\n-\n-    public void setStatus(String status) {\n-        this.status = status;\n-    }\n-\n-    @Override\n-    public String getStatus() {\n-        return status;\n-    }\n-\n-    public void setStepId(Integer stepId) {\n-        this.stepId = stepId;\n-    }\n-\n-    @Override\n-    public int getStepId() {\n-        return stepId;\n-    }\n-\n-    /**\n-     * This is for backward compatibility, but current Store doesn't\n-     * persist this collection, nor is such property visibile outside\n-     * OSWF internal classes.\n-     * @return an empty long[]\n-     */\n-    @Override\n-    public final long[] getPreviousStepIds() {\n-        return new long[0];\n-    }\n-}"},{"sha":"9e3a3b97ce279ad40b9cc91072ea91d03b523930","filename":"core/src/main/java/jpasymphony/beans/JPACurrentStep.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPACurrentStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPACurrentStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPACurrentStep.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,32 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package jpasymphony.beans;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.Table;\n-\n-@Entity\n-@Table(name = \"os_currentstep\")\n-public class JPACurrentStep extends AbstractJPAStep {\n-\n-    @Id\n-    private long id;\n-\n-    @Override\n-    public long getId() {\n-        return id;\n-    }\n-}"},{"sha":"5275d69635b1dc403f3e6cba8cbc98eac63c1ea3","filename":"core/src/main/java/jpasymphony/beans/JPAPropertySetItem.java","status":"removed","additions":0,"deletions":159,"changes":159,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAPropertySetItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAPropertySetItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAPropertySetItem.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,159 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package jpasymphony.beans;\n-\n-import java.util.Date;\n-import javax.persistence.Basic;\n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.Lob;\n-import javax.persistence.Table;\n-import javax.persistence.Temporal;\n-import javax.persistence.TemporalType;\n-import javax.persistence.UniqueConstraint;\n-import org.hibernate.annotations.Type;\n-import org.syncope.core.persistence.beans.AbstractBaseBean;\n-\n-@Entity\n-@Table(name = \"os_propertyset\", uniqueConstraints =\n-@UniqueConstraint(columnNames = {\"workflowEntryId\", \"propertyKey\"}))\n-public class JPAPropertySetItem extends AbstractBaseBean {\n-\n-    @Id\n-    private Long id;\n-\n-    @Column(nullable = false)\n-    private Integer type;\n-\n-    @Column(nullable = false)\n-    private Long workflowEntryId;\n-\n-    @Column(nullable = false)\n-    private String propertyKey;\n-\n-    private Boolean booleanValue;\n-\n-    private Integer intValue;\n-\n-    private Long longValue;\n-\n-    private Double doubleValue;\n-\n-    private String stringValue;\n-\n-    @Lob\n-    @Type(type = \"org.hibernate.type.StringClobType\")\n-    private String textValue;\n-\n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date dateValue;\n-\n-    @Basic\n-    @Lob\n-    private byte[] dataValue;\n-\n-    public Long getId() {\n-        return id;\n-    }\n-\n-    public Integer getType() {\n-        return type;\n-    }\n-\n-    public void setType(Integer type) {\n-        this.type = type;\n-    }\n-\n-    public String getPropertyKey() {\n-        return propertyKey;\n-    }\n-\n-    public void setPropertyKey(String propertyKey) {\n-        this.propertyKey = propertyKey;\n-    }\n-\n-    public String getStringValue() {\n-        return stringValue;\n-    }\n-\n-    public void setStringValue(String stringValue) {\n-        this.stringValue = stringValue;\n-    }\n-\n-    public Long getWorkflowEntryId() {\n-        return workflowEntryId;\n-    }\n-\n-    public void setWorkflowEntryId(Long workflowEntryId) {\n-        this.workflowEntryId = workflowEntryId;\n-    }\n-\n-    public Date getDateValue() {\n-        return dateValue;\n-    }\n-\n-    public void setDateValue(Date dateValue) {\n-        this.dateValue = dateValue;\n-    }\n-\n-    public Boolean getBooleanValue() {\n-        return booleanValue;\n-    }\n-\n-    public void setBooleanValue(Boolean booleanValue) {\n-        this.booleanValue = booleanValue;\n-    }\n-\n-    public Double getDoubleValue() {\n-        return doubleValue;\n-    }\n-\n-    public void setDoubleValue(Double doubleValue) {\n-        this.doubleValue = doubleValue;\n-    }\n-\n-    public Integer getIntValue() {\n-        return intValue;\n-    }\n-\n-    public void setIntValue(Integer intValue) {\n-        this.intValue = intValue;\n-    }\n-\n-    public Long getLongValue() {\n-        return longValue;\n-    }\n-\n-    public void setLongValue(Long longValue) {\n-        this.longValue = longValue;\n-    }\n-\n-    public String getTextValue() {\n-        return textValue;\n-    }\n-\n-    public void setTextValue(String textValue) {\n-        this.textValue = textValue;\n-    }\n-\n-    public byte[] getDataValue() {\n-        return dataValue;\n-    }\n-\n-    public void setDataValue(byte[] dataValue) {\n-        this.dataValue = dataValue;\n-    }\n-}"},{"sha":"15ca0b7b05a3d97c859bee033e4f9fec48b6cc0a","filename":"core/src/main/java/jpasymphony/beans/JPAWorkflowEntry.java","status":"removed","additions":0,"deletions":141,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAWorkflowEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAWorkflowEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fbeans%2FJPAWorkflowEntry.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,141 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package jpasymphony.beans;\n-\n-import com.opensymphony.workflow.spi.WorkflowEntry;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.persistence.CascadeType;\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.OneToMany;\n-import javax.persistence.Table;\n-import org.syncope.core.persistence.beans.AbstractBaseBean;\n-\n-@Entity\n-@Table(name = \"os_wfentry\")\n-public class JPAWorkflowEntry extends AbstractBaseBean\n-        implements WorkflowEntry {\n-\n-    @Id\n-    private long id;\n-\n-    private String workflowName;\n-\n-    private Integer workflowState;\n-\n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"workflowEntry\")\n-    private List<JPACurrentStep> currentSteps;\n-\n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"workflowEntry\")\n-    private List<JPAHistoryStep> historySteps;\n-\n-    public JPAWorkflowEntry() {\n-        currentSteps = new ArrayList<JPACurrentStep>();\n-        historySteps = new ArrayList<JPAHistoryStep>();\n-    }\n-\n-    @Override\n-    public long getId() {\n-        return id;\n-    }\n-\n-    @Override\n-    public int getState() {\n-        return workflowState;\n-    }\n-\n-    public Integer getWorkflowState() {\n-        return workflowState;\n-    }\n-\n-    public void setWorkflowState(final Integer workflowState) {\n-        this.workflowState = workflowState;\n-    }\n-\n-    @Override\n-    public boolean isInitialized() {\n-        return workflowState > 0;\n-    }\n-\n-    @Override\n-    public String getWorkflowName() {\n-        return workflowName;\n-    }\n-\n-    public void setWorkflowName(final String workflowName) {\n-        this.workflowName = workflowName;\n-    }\n-\n-    public boolean addCurrentStep(final JPACurrentStep currentStep) {\n-        currentStep.setWorkflowEntry(this);\n-        return currentSteps.contains(currentStep)\n-                ? false : currentSteps.add(currentStep);\n-    }\n-\n-    public boolean removeCurrentStep(final JPACurrentStep currentStep) {\n-        boolean result = currentSteps.remove(currentStep);\n-        currentStep.setWorkflowEntry(null);\n-        return result;\n-    }\n-\n-    public List<JPACurrentStep> getCurrentSteps() {\n-        return currentSteps;\n-    }\n-\n-    public void setCurrentSteps(final List<JPACurrentStep> currentSteps) {\n-        for (JPACurrentStep step : this.currentSteps) {\n-            step.setWorkflowEntry(null);\n-        }\n-        this.currentSteps.clear();\n-\n-        if (currentSteps != null && !currentSteps.isEmpty()) {\n-            this.currentSteps.addAll(currentSteps);\n-        }\n-        for (JPACurrentStep step : this.currentSteps) {\n-            step.setWorkflowEntry(this);\n-        }\n-    }\n-\n-    public boolean addHistoryStep(final JPAHistoryStep historyStep) {\n-        historyStep.setWorkflowEntry(this);\n-        return historySteps.contains(historyStep)\n-                ? false : historySteps.add(historyStep);\n-    }\n-\n-    public boolean removeHistoryStep(final JPAHistoryStep historyStep) {\n-        boolean result = historySteps.remove(historyStep);\n-        historyStep.setWorkflowEntry(null);\n-        return result;\n-    }\n-\n-    public List<JPAHistoryStep> getHistorySteps() {\n-        return historySteps;\n-    }\n-\n-    public void setHistorySteps(final List<JPAHistoryStep> historySteps) {\n-        for (JPAHistoryStep step : this.historySteps) {\n-            step.setWorkflowEntry(null);\n-        }\n-        this.historySteps.clear();\n-\n-        if (historySteps != null && !historySteps.isEmpty()) {\n-            this.historySteps.addAll(historySteps);\n-        }\n-        for (JPAHistoryStep step : this.historySteps) {\n-            step.setWorkflowEntry(this);\n-        }\n-    }\n-}"},{"sha":"024d7adbfcfe4dd47831f42726fbf56a2cb716e2","filename":"core/src/main/java/jpasymphony/dao/JPAPropertySetItemDAO.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2FJPAPropertySetItemDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2FJPAPropertySetItemDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2FJPAPropertySetItemDAO.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,36 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package jpasymphony.dao;\n-\n-import java.util.List;\n-import jpasymphony.beans.JPAPropertySetItem;\n-import org.syncope.core.persistence.dao.DAO;\n-\n-public interface JPAPropertySetItemDAO extends DAO {\n-\n-    JPAPropertySetItem find(Long id);\n-\n-    JPAPropertySetItem find(Long workflowEntryId, String propertyKey);\n-\n-    List<JPAPropertySetItem> findAll();\n-\n-    List<JPAPropertySetItem> findAll(Long workflowEntryId);\n-\n-    JPAPropertySetItem save(JPAPropertySetItem property);\n-\n-    void delete(Long id);\n-\n-    void delete(Long workflowEntryId, String propertyKey);\n-}"},{"sha":"a893f5eef8ba2f16d293ee0d0068565736a50e68","filename":"core/src/main/java/jpasymphony/dao/JPAWorkflowEntryDAO.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryDAO.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,32 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package jpasymphony.dao;\n-\n-import java.util.List;\n-import jpasymphony.beans.JPAWorkflowEntry;\n-import org.syncope.core.persistence.dao.DAO;\n-\n-public interface JPAWorkflowEntryDAO extends DAO {\n-\n-    JPAWorkflowEntry find(Long id);\n-\n-    List<JPAWorkflowEntry> findAll();\n-\n-    JPAWorkflowEntry save(JPAWorkflowEntry entry);\n-\n-    void delete(Long id);\n-\n-    void deleteCurrentStep(Long stepId);\n-}"},{"sha":"f8f1c70e798d0b51a4a6c1a43cbfee6b8306cfdd","filename":"core/src/main/java/jpasymphony/dao/impl/JPAPropertySetItemDAOImpl.java","status":"removed","additions":0,"deletions":98,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAPropertySetItemDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAPropertySetItemDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAPropertySetItemDAOImpl.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,98 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package jpasymphony.dao.impl;\n-\n-import java.util.List;\n-import javax.persistence.NoResultException;\n-import javax.persistence.Query;\n-import org.springframework.stereotype.Repository;\n-import jpasymphony.beans.JPAPropertySetItem;\n-import jpasymphony.dao.JPAPropertySetItemDAO;\n-import org.syncope.core.persistence.dao.impl.AbstractDAOImpl;\n-\n-@Repository\n-public class JPAPropertySetItemDAOImpl extends AbstractDAOImpl\n-        implements JPAPropertySetItemDAO {\n-\n-    @Override\n-    public JPAPropertySetItem find(final Long id) {\n-        return entityManager.find(JPAPropertySetItem.class, id);\n-    }\n-\n-    @Override\n-    public JPAPropertySetItem find(final Long workflowEntryId,\n-            final String propertyKey) {\n-\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM JPAPropertySetItem e \"\n-                + \"WHERE e.workflowEntryId=:workflowEntryId \"\n-                + \"AND e.propertyKey=:propertyKey\");\n-        query.setParameter(\"workflowEntryId\", workflowEntryId);\n-        query.setParameter(\"propertyKey\", propertyKey);\n-\n-        JPAPropertySetItem result = null;\n-        try {\n-            result = (JPAPropertySetItem) query.getSingleResult();\n-        } catch (NoResultException e) {\n-            LOG.warn(\"No results found\");\n-        } catch (Throwable t) {\n-            LOG.error(\"Unexpected exception\", t);\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public List<JPAPropertySetItem> findAll() {\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM JPAPropertySetItem e\");\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public List<JPAPropertySetItem> findAll(final Long workflowEntryId) {\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM JPAPropertySetItem e \"\n-                + \"WHERE e.workflowEntryId=:workflowEntryId\");\n-        query.setParameter(\"workflowEntryId\", workflowEntryId);\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public JPAPropertySetItem save(final JPAPropertySetItem property) {\n-        return entityManager.merge(property);\n-    }\n-\n-    @Override\n-    public void delete(final Long id) {\n-        JPAPropertySetItem osWorkflowProperty = find(id);\n-        if (osWorkflowProperty == null) {\n-            return;\n-        }\n-\n-        entityManager.remove(osWorkflowProperty);\n-    }\n-\n-    @Override\n-    public void delete(final Long workflowEntryId, final String propertyKey) {\n-        JPAPropertySetItem osWorkflowProperty =\n-                find(workflowEntryId, propertyKey);\n-        if (osWorkflowProperty == null) {\n-            return;\n-        }\n-\n-        entityManager.remove(osWorkflowProperty);\n-    }\n-}"},{"sha":"537a7243086fa47370a7d4ff7235a5c59bd330a0","filename":"core/src/main/java/jpasymphony/dao/impl/JPAWorkflowEntryDAOImpl.java","status":"removed","additions":0,"deletions":77,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAWorkflowEntryDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAWorkflowEntryDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAWorkflowEntryDAOImpl.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,77 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package jpasymphony.dao.impl;\n-\n-import java.util.List;\n-import javax.persistence.Query;\n-import jpasymphony.beans.JPACurrentStep;\n-import jpasymphony.beans.JPAPropertySetItem;\n-import jpasymphony.beans.JPAWorkflowEntry;\n-import jpasymphony.dao.JPAPropertySetItemDAO;\n-import jpasymphony.dao.JPAWorkflowEntryDAO;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n-import org.syncope.core.persistence.dao.impl.AbstractDAOImpl;\n-\n-@Repository\n-public class JPAWorkflowEntryDAOImpl extends AbstractDAOImpl\n-        implements JPAWorkflowEntryDAO {\n-\n-    @Autowired\n-    private JPAPropertySetItemDAO propertySetItemDAO;\n-\n-    @Override\n-    public JPAWorkflowEntry find(final Long id) {\n-        return entityManager.find(JPAWorkflowEntry.class, id);\n-    }\n-\n-    @Override\n-    public List<JPAWorkflowEntry> findAll() {\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM JPAWorkflowEntry e\");\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public JPAWorkflowEntry save(final JPAWorkflowEntry entry) {\n-        return entityManager.merge(entry);\n-    }\n-\n-    @Override\n-    public void delete(final Long id) {\n-        JPAWorkflowEntry entry = find(id);\n-        if (entry == null) {\n-            return;\n-        }\n-\n-        List<JPAPropertySetItem> properties =\n-                propertySetItemDAO.findAll(entry.getId());\n-        if (properties != null) {\n-            for (JPAPropertySetItem property : properties) {\n-                propertySetItemDAO.delete(property.getId());\n-            }\n-        }\n-\n-        entityManager.remove(entry);\n-    }\n-\n-    @Override\n-    public void deleteCurrentStep(final Long stepId) {\n-        JPACurrentStep step = entityManager.find(JPACurrentStep.class, stepId);\n-        if (step != null) {\n-            entityManager.remove(step);\n-        }\n-    }\n-}"},{"sha":"d7e5afebe23ba206364676b76870446cc1db89cc","filename":"core/src/main/java/jpasymphony/module/propertyset/jpa/JPAPropertySet.java","status":"removed","additions":0,"deletions":298,"changes":298,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fmodule%2Fpropertyset%2Fjpa%2FJPAPropertySet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fmodule%2Fpropertyset%2Fjpa%2FJPAPropertySet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fmodule%2Fpropertyset%2Fjpa%2FJPAPropertySet.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,298 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package jpasymphony.module.propertyset.jpa;\n-\n-import com.opensymphony.module.propertyset.AbstractPropertySet;\n-import com.opensymphony.module.propertyset.PropertyException;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.util.Collection;\n-import java.util.Date;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.w3c.dom.Document;\n-import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n-import org.w3c.dom.ls.DOMImplementationLS;\n-import org.w3c.dom.ls.LSInput;\n-import org.w3c.dom.ls.LSParser;\n-import org.w3c.dom.ls.LSSerializer;\n-import jpasymphony.beans.JPAPropertySetItem;\n-import jpasymphony.dao.JPAPropertySetItemDAO;\n-import jpasymphony.workflow.spi.jpa.JPAPropertySetDelegate;\n-\n-/**\n- * The JPAPropertySet is a PropertySet implementation that\n- * will store any primitive or object via JPA.\n- *\n- * @see com.opensymphony.module.propertyset.PropertySet\n- */\n-public class JPAPropertySet extends AbstractPropertySet {\n-\n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG =\n-            LoggerFactory.getLogger(JPAPropertySet.class);\n-\n-    private JPAPropertySetItemDAO propertySetItemDAO;\n-\n-    private long workflowEntryId;\n-\n-    @Override\n-    public void init(final Map config, final Map args) {\n-        super.init(config, args);\n-\n-        workflowEntryId = (Long) args.get(JPAPropertySetDelegate.ENTRY_ID);\n-        propertySetItemDAO =\n-                (JPAPropertySetItemDAO) args.get(JPAPropertySetDelegate.DAO);\n-    }\n-\n-    @Override\n-    public Collection getKeys()\n-            throws PropertyException {\n-\n-        return getKeys(null, Integer.MIN_VALUE);\n-    }\n-\n-    @Override\n-    public Collection getKeys(final int type)\n-            throws PropertyException {\n-\n-        return getKeys(null, type);\n-    }\n-\n-    @Override\n-    public Collection getKeys(final String prefix)\n-            throws PropertyException {\n-\n-        return getKeys(prefix, Integer.MIN_VALUE);\n-    }\n-\n-    @Override\n-    public Collection getKeys(final String prefix, final int type)\n-            throws PropertyException {\n-\n-        List<JPAPropertySetItem> properties =\n-                propertySetItemDAO.findAll(workflowEntryId);\n-\n-        Set<String> keys = new HashSet<String>();\n-        for (JPAPropertySetItem property : properties) {\n-            if (prefix != null\n-                    && property.getPropertyKey().startsWith(prefix)) {\n-                keys.add(property.getPropertyKey());\n-            }\n-            if (type != Integer.MIN_VALUE && property.getType() == type) {\n-                keys.add(property.getPropertyKey());\n-            }\n-        }\n-\n-        return keys;\n-    }\n-\n-    @Override\n-    public boolean exists(final String key)\n-            throws PropertyException {\n-\n-        return propertySetItemDAO.find(workflowEntryId, key) != null;\n-    }\n-\n-    @Override\n-    @Transactional\n-    public void remove(final String key)\n-            throws PropertyException {\n-\n-        propertySetItemDAO.delete(workflowEntryId, key);\n-    }\n-\n-    @Override\n-    protected void setImpl(final int type, final String key, final Object value)\n-            throws PropertyException {\n-\n-        JPAPropertySetItem propertySet = new JPAPropertySetItem();\n-        propertySet.setPropertyKey(key);\n-        propertySet.setWorkflowEntryId(workflowEntryId);\n-        propertySet.setType(type);\n-\n-        try {\n-            switch (type) {\n-                case BOOLEAN:\n-                    propertySet.setBooleanValue((Boolean) value);\n-                    break;\n-\n-                case INT:\n-                    propertySet.setIntValue((Integer) value);\n-                    break;\n-\n-                case LONG:\n-                    propertySet.setLongValue((Long) value);\n-                    break;\n-\n-                case DOUBLE:\n-                    propertySet.setDoubleValue((Double) value);\n-                    break;\n-\n-                case STRING:\n-                    propertySet.setStringValue((String) value);\n-                    break;\n-\n-                case TEXT:\n-                    propertySet.setTextValue((String) value);\n-                    break;\n-\n-                case DATE:\n-                    propertySet.setDateValue((Date) value);\n-                    break;\n-\n-                case XML:\n-                    DOMImplementationRegistry domir =\n-                            DOMImplementationRegistry.newInstance();\n-                    DOMImplementationLS domils =\n-                            (DOMImplementationLS) domir.getDOMImplementation(\n-                            \"LS\");\n-                    LSSerializer lss = domils.createLSSerializer();\n-\n-                    propertySet.setTextValue(lss.writeToString(\n-                            (Document) value));\n-                    break;\n-\n-                case PROPERTIES:\n-                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-                    ((Properties) value).storeToXML(baos, \"\");\n-                    baos.close();\n-\n-                    propertySet.setDataValue(baos.toByteArray());\n-                    break;\n-\n-                case DATA:\n-                    propertySet.setDataValue((byte[]) value);\n-                    break;\n-\n-                case OBJECT:\n-                    baos = new ByteArrayOutputStream();\n-                    ObjectOutputStream oos = new ObjectOutputStream(baos);\n-                    oos.writeObject(value);\n-                    oos.close();\n-\n-                    propertySet.setDataValue(baos.toByteArray());\n-                    break;\n-            }\n-        } catch (Throwable t) {\n-            LOG.error(\"While setting property value\", t);\n-            throw new PropertyException(t.getMessage());\n-        }\n-\n-        propertySetItemDAO.save(propertySet);\n-    }\n-\n-    @Override\n-    protected Object get(int type, String key)\n-            throws PropertyException {\n-        JPAPropertySetItem propertySet =\n-                propertySetItemDAO.find(workflowEntryId, key);\n-\n-        Object result = null;\n-        try {\n-            switch (type) {\n-                case BOOLEAN:\n-                    result = propertySet.getBooleanValue();\n-                    break;\n-\n-                case INT:\n-                    result = propertySet.getIntValue();\n-                    break;\n-\n-                case LONG:\n-                    result = propertySet.getLongValue();\n-                    break;\n-\n-                case DOUBLE:\n-                    result = propertySet.getDoubleValue();\n-                    break;\n-\n-                case STRING:\n-                    result = propertySet.getStringValue();\n-                    break;\n-\n-                case TEXT:\n-                    result = propertySet.getTextValue();\n-                    break;\n-\n-                case DATE:\n-                    result = propertySet.getDateValue();\n-                    break;\n-\n-                case XML:\n-                    DOMImplementationRegistry domir =\n-                            DOMImplementationRegistry.newInstance();\n-                    DOMImplementationLS domils =\n-                            (DOMImplementationLS) domir.getDOMImplementation(\n-                            \"LS\");\n-                    LSInput lsi = domils.createLSInput();\n-                    lsi.setStringData(propertySet.getTextValue());\n-                    LSParser lsp = domils.createLSParser(\n-                            DOMImplementationLS.MODE_SYNCHRONOUS, null);\n-\n-                    result = lsp.parse(lsi);\n-                    break;\n-\n-                case PROPERTIES:\n-                    ByteArrayInputStream bais = new ByteArrayInputStream(\n-                            propertySet.getDataValue());\n-                    Properties props = new Properties();\n-                    props.loadFromXML(bais);\n-\n-                    result = props;\n-                    break;\n-\n-                case DATA:\n-                    result = propertySet.getDataValue();\n-                    break;\n-\n-                case OBJECT:\n-                    bais = new ByteArrayInputStream(propertySet.getDataValue());\n-                    ObjectInputStream ois = new ObjectInputStream(bais);\n-\n-                    result = ois.readObject();\n-                    break;\n-            }\n-        } catch (Throwable t) {\n-            LOG.error(\"While fetching property value\", t);\n-            throw new PropertyException(t.getMessage());\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public int getType(String key)\n-            throws PropertyException {\n-        JPAPropertySetItem propertySet =\n-                propertySetItemDAO.find(workflowEntryId, key);\n-        if (propertySet == null) {\n-            throw new PropertyException(\"Key '\" + key + \"' \"\n-                    + \"not found for workflow entry id \" + workflowEntryId);\n-        }\n-\n-        return propertySet.getType();\n-    }\n-}"},{"sha":"42d7ff5df631d50de82e3b7d41010f1ea84e8c95","filename":"core/src/main/java/jpasymphony/workflow/spi/jpa/JPAPropertySetDelegate.java","status":"removed","additions":0,"deletions":42,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAPropertySetDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAPropertySetDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAPropertySetDelegate.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,42 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package jpasymphony.workflow.spi.jpa;\n-\n-import com.opensymphony.module.propertyset.PropertySet;\n-import com.opensymphony.module.propertyset.PropertySetManager;\n-import com.opensymphony.workflow.util.PropertySetDelegate;\n-import java.util.HashMap;\n-import java.util.Map;\n-import jpasymphony.dao.JPAPropertySetItemDAO;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-public class JPAPropertySetDelegate implements PropertySetDelegate {\n-\n-    final public static String DAO = \"propertySetItemDAO\";\n-\n-    final public static String ENTRY_ID = \"entryId\";\n-\n-    @Autowired\n-    private JPAPropertySetItemDAO propertySetItemDAO;\n-\n-    @Override\n-    public PropertySet getPropertySet(long entryId) {\n-        Map<String, Object> args = new HashMap<String, Object>();\n-        args.put(ENTRY_ID, Long.valueOf(entryId));\n-        args.put(DAO, propertySetItemDAO);\n-\n-        return PropertySetManager.getInstance(\"jpa\", args);\n-    }\n-}"},{"sha":"f39096a36ac648249c6d853aa30bd671d306492f","filename":"core/src/main/java/jpasymphony/workflow/spi/jpa/JPAWorkflowStore.java","status":"removed","additions":0,"deletions":429,"changes":429,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAWorkflowStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAWorkflowStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAWorkflowStore.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,429 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package jpasymphony.workflow.spi.jpa;\n-\n-import com.opensymphony.module.propertyset.PropertySet;\n-import com.opensymphony.workflow.QueryNotSupportedException;\n-import com.opensymphony.workflow.StoreException;\n-import com.opensymphony.workflow.query.Expression;\n-import com.opensymphony.workflow.query.FieldExpression;\n-import com.opensymphony.workflow.query.NestedExpression;\n-import com.opensymphony.workflow.query.WorkflowExpressionQuery;\n-import com.opensymphony.workflow.query.WorkflowQuery;\n-import com.opensymphony.workflow.spi.Step;\n-import com.opensymphony.workflow.spi.WorkflowEntry;\n-import com.opensymphony.workflow.spi.WorkflowStore;\n-import com.opensymphony.workflow.util.PropertySetDelegate;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Date;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import javax.persistence.EntityManager;\n-import javax.persistence.PersistenceContext;\n-import javax.persistence.PersistenceContextType;\n-import javax.persistence.TypedQuery;\n-import javax.persistence.criteria.CriteriaQuery;\n-import javax.persistence.criteria.Predicate;\n-import javax.persistence.criteria.Root;\n-import jpasymphony.beans.AbstractJPAStep;\n-import jpasymphony.beans.JPACurrentStep;\n-import jpasymphony.beans.JPAHistoryStep;\n-import jpasymphony.beans.JPAWorkflowEntry;\n-import jpasymphony.dao.JPAWorkflowEntryDAO;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-/**\n- * JPA implementation of OSWorkflow's WorkflowStore.\n- * Still using Hibernate's criteria API (available since JPA 2.0).\n- */\n-public class JPAWorkflowStore implements WorkflowStore {\n-\n-    @PersistenceContext(type = PersistenceContextType.TRANSACTION)\n-    private EntityManager entityManager;\n-\n-    @Autowired\n-    private JPAWorkflowEntryDAO workflowEntryDAO;\n-\n-    @Autowired\n-    private PropertySetDelegate propertySetDelegate;\n-\n-    public JPAWorkflowStore() {\n-    }\n-\n-    public JPAWorkflowStore(\n-            final EntityManager entityManager,\n-            final JPAWorkflowEntryDAO workflowEntryDAO,\n-            final PropertySetDelegate propertySetDelegate) {\n-        this.entityManager = entityManager;\n-        this.workflowEntryDAO = workflowEntryDAO;\n-        this.propertySetDelegate = propertySetDelegate;\n-    }\n-\n-    private JPAWorkflowEntry getEntry(final long entryId)\n-            throws StoreException {\n-\n-        JPAWorkflowEntry entry = workflowEntryDAO.find(entryId);\n-        if (entry == null) {\n-            throw new StoreException(\n-                    \"Could not find workflow entry \" + entryId);\n-        }\n-\n-        return entry;\n-    }\n-\n-    @Override\n-    public void setEntryState(final long entryId, final int state)\n-            throws StoreException {\n-\n-        JPAWorkflowEntry entry = getEntry(entryId);\n-\n-        entry.setWorkflowState(state);\n-    }\n-\n-    @Override\n-    public PropertySet getPropertySet(final long entryId)\n-            throws StoreException {\n-\n-        if (propertySetDelegate == null) {\n-            throw new StoreException(\n-                    \"PropertySetDelegate is not properly configured\");\n-        }\n-\n-        return propertySetDelegate.getPropertySet(entryId);\n-    }\n-\n-    @Override\n-    public Step createCurrentStep(final long entryId,\n-            final int stepId,\n-            final String owner,\n-            final Date startDate,\n-            final Date dueDate,\n-            final String status,\n-            final long[] previousIds)\n-            throws StoreException {\n-\n-        JPAWorkflowEntry entry = getEntry(entryId);\n-\n-        JPACurrentStep step = new JPACurrentStep();\n-        step.setWorkflowEntry(entry);\n-        step.setStepId(stepId);\n-        step.setOwner(owner);\n-        step.setStartDate(startDate);\n-        step.setDueDate(dueDate);\n-        step.setStatus(status);\n-\n-        entry.addCurrentStep(step);\n-        entry = workflowEntryDAO.save(entry);\n-\n-        List<JPACurrentStep> currentSteps = entry.getCurrentSteps();\n-        return currentSteps.get(currentSteps.size() - 1);\n-    }\n-\n-    @Override\n-    public WorkflowEntry createEntry(final String workflowName)\n-            throws StoreException {\n-\n-        JPAWorkflowEntry entry = new JPAWorkflowEntry();\n-        entry.setWorkflowState(WorkflowEntry.CREATED);\n-        entry.setWorkflowName(workflowName);\n-\n-        return workflowEntryDAO.save(entry);\n-    }\n-\n-    @Override\n-    public List findCurrentSteps(final long entryId)\n-            throws StoreException {\n-\n-        JPAWorkflowEntry entry = getEntry(entryId);\n-\n-        return entry.getCurrentSteps();\n-    }\n-\n-    @Override\n-    public WorkflowEntry findEntry(final long entryId)\n-            throws StoreException {\n-\n-        return getEntry(entryId);\n-    }\n-\n-    @Override\n-    public List findHistorySteps(final long entryId)\n-            throws StoreException {\n-\n-        JPAWorkflowEntry entry = getEntry(entryId);\n-\n-        return entry.getHistorySteps();\n-    }\n-\n-    @Override\n-    public void init(final Map props)\n-            throws StoreException {\n-    }\n-\n-    @Override\n-    public Step markFinished(final Step step,\n-            final int actionId,\n-            final Date finishDate,\n-            final String status,\n-            final String caller)\n-            throws StoreException {\n-\n-        final JPACurrentStep currentStep = (JPACurrentStep) step;\n-\n-        currentStep.setActionId(actionId);\n-        currentStep.setFinishDate(finishDate);\n-        currentStep.setCaller(caller);\n-\n-        workflowEntryDAO.save(currentStep.getWorkflowEntry());\n-\n-        return currentStep;\n-    }\n-\n-    @Override\n-    public void moveToHistory(final Step step)\n-            throws StoreException {\n-\n-        final JPACurrentStep currentStep = (JPACurrentStep) step;\n-        final JPAWorkflowEntry entry = currentStep.getWorkflowEntry();\n-\n-        final JPAHistoryStep historyStep = new JPAHistoryStep();\n-        historyStep.setActionId(currentStep.getActionId());\n-        historyStep.setCaller(currentStep.getCaller());\n-        historyStep.setDueDate(currentStep.getDueDate());\n-        historyStep.setFinishDate(currentStep.getFinishDate());\n-        historyStep.setOwner(currentStep.getOwner());\n-        historyStep.setStartDate(currentStep.getStartDate());\n-        historyStep.setStatus(currentStep.getStatus());\n-        historyStep.setStepId(currentStep.getStepId());\n-        historyStep.setWorkflowEntry(entry);\n-\n-        entry.removeCurrentStep(currentStep);\n-        workflowEntryDAO.deleteCurrentStep(currentStep.getId());\n-\n-        entry.addHistoryStep(historyStep);\n-        workflowEntryDAO.save(entry);\n-    }\n-\n-    @Override\n-    @Deprecated\n-    public List query(final WorkflowQuery query)\n-            throws StoreException {\n-\n-        throw new UnsupportedOperationException(\"Deprecated\");\n-    }\n-\n-    /**\n-     * @see com.opensymphony.workflow.spi.WorkflowStore\n-     * #query(com.opensymphony.workflow.query.WorkflowExpressionQuery)\n-     */\n-    @Override\n-    public List query(final WorkflowExpressionQuery query)\n-            throws StoreException {\n-\n-        Class entityClass = getQueryClass(query.getExpression(), null);\n-\n-        CriteriaQuery criteria =\n-                entityManager.getCriteriaBuilder().createQuery(\n-                getQueryClass(query.getExpression(), null));\n-        Root from = criteria.from(entityClass);\n-\n-        Predicate expr = query.getExpression().isNested()\n-                ? buildNested((NestedExpression) query.getExpression(), from)\n-                : queryComp((FieldExpression) query.getExpression(), from);\n-\n-        criteria.where(expr);\n-\n-        TypedQuery criteriaQuery = entityManager.createQuery(criteria);\n-\n-        List<Long> results = new ArrayList<Long>();\n-        Object next;\n-        Long item;\n-        for (Iterator iter = criteriaQuery.getResultList().iterator();\n-                iter.hasNext();) {\n-\n-            next = iter.next();\n-\n-            if (next instanceof AbstractJPAStep) {\n-                AbstractJPAStep step = (AbstractJPAStep) next;\n-                item = Long.valueOf(step.getEntryId());\n-            } else {\n-                WorkflowEntry entry = (WorkflowEntry) next;\n-                item = Long.valueOf(entry.getId());\n-            }\n-\n-            results.add(item);\n-        }\n-\n-        return results;\n-    }\n-\n-    private Class getQueryClass(Expression expr, Collection classesCache) {\n-        if (classesCache == null) {\n-            classesCache = new HashSet();\n-        }\n-\n-        if (expr instanceof FieldExpression) {\n-            FieldExpression fieldExpression = (FieldExpression) expr;\n-\n-            switch (fieldExpression.getContext()) {\n-                case FieldExpression.CURRENT_STEPS:\n-                    classesCache.add(JPACurrentStep.class);\n-\n-                    break;\n-\n-                case FieldExpression.HISTORY_STEPS:\n-                    classesCache.add(JPAHistoryStep.class);\n-\n-                    break;\n-\n-                case FieldExpression.ENTRY:\n-                    classesCache.add(JPAWorkflowEntry.class);\n-\n-                    break;\n-\n-                default:\n-                    throw new QueryNotSupportedException(\n-                            \"Query for unsupported context \" + fieldExpression.getContext());\n-            }\n-        } else {\n-            NestedExpression nestedExpression = (NestedExpression) expr;\n-\n-            for (int i = 0; i < nestedExpression.getExpressionCount(); i++) {\n-                Expression expression = nestedExpression.getExpression(i);\n-\n-                if (expression.isNested()) {\n-                    classesCache.add(getQueryClass(nestedExpression.getExpression(i), classesCache));\n-                } else {\n-                    classesCache.add(getQueryClass(expression, classesCache));\n-                }\n-            }\n-        }\n-\n-        if (classesCache.size() > 1) {\n-            throw new QueryNotSupportedException(\n-                    \"Store does not support nested queries of different types \"\n-                    + \"(types found:\" + classesCache + \")\");\n-        }\n-\n-        return (Class) classesCache.iterator().next();\n-    }\n-\n-    private Predicate buildNested(NestedExpression nestedExpression,\n-            Root from) {\n-\n-        Predicate full = null;\n-\n-        for (int i = 0; i < nestedExpression.getExpressionCount(); i++) {\n-            Predicate expr;\n-            Expression expression = nestedExpression.getExpression(i);\n-\n-            if (expression.isNested()) {\n-                expr = buildNested((NestedExpression) nestedExpression.getExpression(i), from);\n-            } else {\n-                FieldExpression sub = (FieldExpression) nestedExpression.getExpression(i);\n-                expr = queryComp(sub, from);\n-\n-                if (sub.isNegate()) {\n-                    expr = entityManager.getCriteriaBuilder().not(expr);\n-                }\n-            }\n-\n-            if (full == null) {\n-                full = expr;\n-            } else {\n-                switch (nestedExpression.getExpressionOperator()) {\n-                    case NestedExpression.AND:\n-                        full = entityManager.getCriteriaBuilder().\n-                                and(full, expr);\n-                        break;\n-\n-                    case NestedExpression.OR:\n-                        full = entityManager.getCriteriaBuilder().\n-                                or(full, expr);\n-                        break;\n-\n-                    default:\n-                }\n-            }\n-        }\n-\n-        return full;\n-    }\n-\n-    private Predicate queryComp(FieldExpression expression, Root from) {\n-        switch (expression.getOperator()) {\n-            default:\n-            case FieldExpression.EQUALS:\n-                return entityManager.getCriteriaBuilder().equal(\n-                        from.get(getFieldName(expression.getField())),\n-                        expression.getValue());\n-\n-            case FieldExpression.NOT_EQUALS:\n-                return entityManager.getCriteriaBuilder().notEqual(\n-                        from.get(getFieldName(expression.getField())),\n-                        expression.getValue());\n-\n-            case FieldExpression.GT:\n-                return entityManager.getCriteriaBuilder().gt(\n-                        from.get(getFieldName(expression.getField())),\n-                        (Number) (expression.getValue()));\n-\n-            case FieldExpression.LT:\n-                return entityManager.getCriteriaBuilder().lt(\n-                        from.get(getFieldName(expression.getField())),\n-                        (Number) (expression.getValue()));\n-        }\n-    }\n-\n-    private String getFieldName(int field) {\n-        switch (field) {\n-            case FieldExpression.ACTION: // actionId\n-                return \"actionId\";\n-\n-            case FieldExpression.CALLER:\n-                return \"caller\";\n-\n-            case FieldExpression.FINISH_DATE:\n-                return \"finishDate\";\n-\n-            case FieldExpression.OWNER:\n-                return \"owner\";\n-\n-            case FieldExpression.START_DATE:\n-                return \"startDate\";\n-\n-            case FieldExpression.STEP: // stepId\n-                return \"stepId\";\n-\n-            case FieldExpression.STATUS:\n-                return \"status\";\n-\n-            case FieldExpression.STATE:\n-                return \"workflowState\";\n-\n-            case FieldExpression.NAME:\n-                return \"workflowName\";\n-\n-            case FieldExpression.DUE_DATE:\n-                return \"dueDate\";\n-\n-            default:\n-                return \"1\";\n-        }\n-    }\n-}"},{"sha":"1fef700a71619a0d71c16502fbbdaf0bb829460a","filename":"core/src/main/java/jpasymphony/workflow/spi/jpa/SpringWorkflowFactory.java","status":"removed","additions":0,"deletions":53,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FSpringWorkflowFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FSpringWorkflowFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FSpringWorkflowFactory.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,53 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package jpasymphony.workflow.spi.jpa;\n-\n-import com.opensymphony.workflow.FactoryException;\n-import com.opensymphony.workflow.loader.XMLWorkflowFactory;\n-import java.util.Properties;\n-\n-public class SpringWorkflowFactory extends XMLWorkflowFactory {\n-\n-    private String resource;\n-\n-    public void setReload(String reload) {\n-        this.reload = Boolean.valueOf(reload).booleanValue();\n-    }\n-\n-    public void setResource(String resource) {\n-        this.resource = resource;\n-    }\n-\n-    public void init() {\n-        try {\n-            Properties props = new Properties();\n-            props.setProperty(\"reload\", getReload());\n-            props.setProperty(\"resource\", getResource());\n-\n-            super.init(props);\n-            initDone();\n-        } catch (FactoryException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    private String getReload() {\n-        return String.valueOf(reload);\n-    }\n-\n-    private String getResource() {\n-        return resource;\n-    }\n-}"},{"sha":"295ddda7bcb87f743ce4991c7d33bac3bab967b9","filename":"core/src/main/java/org/syncope/core/init/ConnInstanceLoader.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -17,9 +17,7 @@\n import java.util.HashSet;\n import java.util.Locale;\n import java.util.Set;\n-\n import javassist.NotFoundException;\n-\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -57,9 +55,9 @@ private String getBeanName(final TargetResource resource) {\n      * Get a live connector bean that is registered with the given resource.\n      * \n      * @param resource the resource.\n-     * \n+     * @return live connector bran for given resource\n      * @throws BeansException in case the connector is not registered in the\n-     * context.\n+     * context\n      */\n     public ConnectorFacadeProxy getConnector(final TargetResource resource)\n             throws BeansException {\n@@ -69,7 +67,8 @@ public ConnectorFacadeProxy getConnector(final TargetResource resource)\n     }\n \n     public ConnectorFacadeProxy createConnectorBean(\n-            final TargetResource resource) throws NotFoundException {\n+            final TargetResource resource)\n+            throws NotFoundException {\n \n         final ConnInstance connInstanceClone =\n                 new ConnInstance(resource.getConnector());\n@@ -142,8 +141,7 @@ public void load() {\n             }\n         }\n \n-        LOG.debug(\"Done loading {} connectors.\",\n-                getBeanFactory().getBeansOfType(\n+        LOG.info(\"Done loading {} connectors.\", getBeanFactory().getBeansOfType(\n                 ConnectorFacadeProxy.class).size());\n     }\n }"},{"sha":"88a926591ff1726c655d627659e828a69831ae26","filename":"core/src/main/java/org/syncope/core/persistence/beans/PropagationTask.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -30,7 +30,7 @@\n import org.syncope.core.persistence.validation.entity.PropagationTaskCheck;\n import org.syncope.core.util.ApplicationContextManager;\n import org.syncope.types.PropagationMode;\n-import org.syncope.types.ResourceOperationType;\n+import org.syncope.types.PropagationOperation;\n \n /**\n  * Encapsulate all information about a propagation task.\n@@ -51,7 +51,7 @@ public class PropagationTask extends Task {\n      * @see ResourceOperationType\n      */\n     @Enumerated(EnumType.STRING)\n-    private ResourceOperationType resourceOperationType;\n+    private PropagationOperation resourceOperationType;\n \n     /**\n      * The accountId on the target resource.\n@@ -128,12 +128,12 @@ public void setPropagationMode(PropagationMode propagationMode) {\n         this.propagationMode = propagationMode;\n     }\n \n-    public ResourceOperationType getResourceOperationType() {\n+    public PropagationOperation getResourceOperationType() {\n         return resourceOperationType;\n     }\n \n     public void setResourceOperationType(\n-            final ResourceOperationType resourceOperationType) {\n+            final PropagationOperation resourceOperationType) {\n \n         this.resourceOperationType = resourceOperationType;\n     }"},{"sha":"26af24b88957a41d86c128aad6b26faf88ad9b39","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -37,6 +37,7 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n \n+import org.apache.commons.lang.StringUtils;\n import org.hibernate.annotations.Type;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -308,21 +309,24 @@ public void setPasswordPolicy(Policy passwordPolicy) {\n \n     public void setConnectorConfigurationProperties(\n             final Set<ConnConfProperty> properties) {\n-        \n+\n         // create new set to make sure it's a serializable set implementation.\n         xmlConfiguration = XmlConfiguration.serialize(\n                 new HashSet<ConnConfProperty>(properties));\n     }\n \n     public Set<ConnConfProperty> getConfiguration() {\n-        Set<ConnConfProperty> deserializedSet =\n-                XmlConfiguration.<HashSet<ConnConfProperty>>deserialize(\n-                xmlConfiguration);\n-\n-        if (deserializedSet == null) {\n-            deserializedSet = Collections.emptySet();\n+        Set<ConnConfProperty> result = Collections.EMPTY_SET;\n+\n+        Set<ConnConfProperty> deserializedSet;\n+        if (StringUtils.isNotBlank(xmlConfiguration)) {\n+            deserializedSet = XmlConfiguration.<HashSet<ConnConfProperty>>\n+                    deserialize(xmlConfiguration);\n+            if (deserializedSet != null) {\n+                result = deserializedSet;\n+            }\n         }\n \n-        return deserializedSet;\n+        return result;\n     }\n-}\n+}\n\\ No newline at end of file"},{"sha":"62cd2200108bc247cdbf491217835b23f75c7df8","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":18,"deletions":10,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -20,8 +20,6 @@\n import javax.crypto.BadPaddingException;\n import javax.crypto.IllegalBlockSizeException;\n import javax.crypto.NoSuchPaddingException;\n-import static javax.persistence.EnumType.STRING;\n-\n import java.security.MessageDigest;\n import java.util.ArrayList;\n import java.util.Calendar;\n@@ -37,16 +35,17 @@\n import javax.persistence.Column;\n import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.OneToMany;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n import javax.validation.Valid;\n-import org.apache.commons.codec.binary.Base64;\n import org.apache.commons.lang.RandomStringUtils;\n import org.hibernate.annotations.Type;\n+import org.springframework.security.core.codec.Base64;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n@@ -96,8 +95,10 @@ public class SyncopeUser extends AbstractAttributable {\n     @Valid\n     private List<UVirAttr> virtualAttributes;\n \n+    private String workflowId;\n+\n     @Column(nullable = true)\n-    private Long workflowId;\n+    private String status;\n \n     @Lob\n     @Type(type = \"org.hibernate.type.StringClobType\")\n@@ -107,7 +108,7 @@ public class SyncopeUser extends AbstractAttributable {\n     private Date tokenExpireTime;\n \n     @Column(nullable = true)\n-    @Enumerated(STRING)\n+    @Enumerated(EnumType.STRING)\n     private CipherAlgorithm cipherAlgorithm;\n \n     @ElementCollection\n@@ -289,12 +290,20 @@ public void setVirtualAttributes(\n         this.virtualAttributes = (List<UVirAttr>) virtualAttributes;\n     }\n \n-    public Long getWorkflowId() {\n+    public String getWorkflowId() {\n         return workflowId;\n     }\n \n-    public void setWorkflowId(Long workflowEntryId) {\n-        this.workflowId = workflowEntryId;\n+    public void setWorkflowId(String workflowId) {\n+        this.workflowId = workflowId;\n+    }\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(String status) {\n+        this.status = status;\n     }\n \n     public void generateToken(\n@@ -370,8 +379,7 @@ private String encodePassword(\n \n                 byte[] encoded = cipher.doFinal(cleartext);\n \n-                encodedPassword = new String(\n-                        Base64.encodeBase64(encoded));\n+                encodedPassword = new String(Base64.encode(encoded));\n \n             } else {\n "},{"sha":"203b0ca06b660b398fd221f73f859f5310bd250d","filename":"core/src/main/java/org/syncope/core/persistence/propagation/ConnectorFacadeProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -52,7 +52,7 @@\n import org.syncope.types.ConnConfProperty;\n import org.syncope.types.ConnectorCapability;\n import org.syncope.types.PropagationMode;\n-import org.syncope.types.ResourceOperationType;\n+import org.syncope.types.PropagationOperation;\n \n /**\n  * Intercept calls to ConnectorFacade's methods and check if the correspondant\n@@ -411,7 +411,7 @@ public ConnectorObject getObject(\n      */\n     public ConnectorObject getObject(\n             final PropagationMode propagationMode,\n-            final ResourceOperationType operationType,\n+            final PropagationOperation operationType,\n             final ObjectClass objectClass,\n             final Uid uid,\n             final OperationOptions options) {"},{"sha":"988f518621230e7cec0c539b49a78385690117b8","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationByResource.java","status":"renamed","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationByResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationByResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationByResource.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -20,13 +20,13 @@\n import java.util.Map;\n import java.util.Set;\n import org.syncope.core.persistence.beans.TargetResource;\n-import org.syncope.types.ResourceOperationType;\n+import org.syncope.types.PropagationOperation;\n \n /**\n  * Utility class for encapsulating operations to be performed on various\n  * resources.\n  */\n-public class ResourceOperations {\n+public class PropagationByResource {\n \n     /**\n      * Resources for creation.\n@@ -51,7 +51,7 @@ public class ResourceOperations {\n     /**\n      * Default constructor.\n      */\n-    public ResourceOperations() {\n+    public PropagationByResource() {\n         toBeCreated = new HashSet<TargetResource>();\n         toBeUpdated = new HashSet<TargetResource>();\n         toBeDeleted = new HashSet<TargetResource>();\n@@ -81,7 +81,7 @@ public final void purge() {\n      * @param resource target resource\n      * @return wether the operation was succeful or not\n      */\n-    public final boolean add(final ResourceOperationType type,\n+    public final boolean add(final PropagationOperation type,\n             final TargetResource resource) {\n \n         boolean result = false;\n@@ -112,7 +112,7 @@ public final boolean add(final ResourceOperationType type,\n      * @param resources target resources\n      * @return wether the operation was succeful or not\n      */\n-    public boolean addAll(final ResourceOperationType type,\n+    public boolean addAll(final PropagationOperation type,\n             final Set<TargetResource> resources) {\n \n         boolean result = false;\n@@ -143,7 +143,7 @@ public boolean addAll(final ResourceOperationType type,\n      * @param resource target resource\n      * @return wether the operation was succeful or not\n      */\n-    public final boolean remove(final ResourceOperationType type,\n+    public final boolean remove(final PropagationOperation type,\n             final TargetResource resource) {\n \n         boolean result = false;\n@@ -173,7 +173,7 @@ public final boolean remove(final ResourceOperationType type,\n      * @param type resource operation type\n      * @return resource matching the given type\n      */\n-    public final Set<TargetResource> get(final ResourceOperationType type) {\n+    public final Set<TargetResource> get(final PropagationOperation type) {\n         Set<TargetResource> result = Collections.EMPTY_SET;\n \n         switch (type) {\n@@ -201,7 +201,7 @@ public final Set<TargetResource> get(final ResourceOperationType type) {\n      * @param type resource operation type\n      * @param resources to be set\n      */\n-    public final void set(final ResourceOperationType type,\n+    public final void set(final PropagationOperation type,\n             final Set<TargetResource> resources) {\n \n         switch (type) {\n@@ -230,13 +230,13 @@ public final void set(final ResourceOperationType type,\n      *\n      * @param resourceOperations to be merged\n      */\n-    public final void merge(final ResourceOperations resourceOperations) {\n+    public final void merge(final PropagationByResource resourceOperations) {\n         toBeCreated.addAll(\n-                resourceOperations.get(ResourceOperationType.CREATE));\n+                resourceOperations.get(PropagationOperation.CREATE));\n         toBeUpdated.addAll(\n-                resourceOperations.get(ResourceOperationType.UPDATE));\n+                resourceOperations.get(PropagationOperation.UPDATE));\n         toBeDeleted.addAll(\n-                resourceOperations.get(ResourceOperationType.DELETE));\n+                resourceOperations.get(PropagationOperation.DELETE));\n     }\n \n     /**","previous_filename":"core/src/main/java/org/syncope/core/persistence/propagation/ResourceOperations.java"},{"sha":"fd0b37674de35bda86b3ce53fb5cb2102923b162","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -59,7 +59,7 @@\n import org.syncope.core.persistence.dao.TaskExecDAO;\n import org.syncope.core.util.JexlUtil;\n import org.syncope.types.PropagationMode;\n-import org.syncope.types.ResourceOperationType;\n+import org.syncope.types.PropagationOperation;\n import org.syncope.types.SourceMappingType;\n import org.syncope.types.SchemaType;\n import org.syncope.types.PropagationTaskExecStatus;\n@@ -136,10 +136,10 @@ public void create(final SyncopeUser user,\n             final String password, final Set<String> mandResNames)\n             throws PropagationException {\n \n-        final ResourceOperations resOps = new ResourceOperations();\n-        resOps.set(ResourceOperationType.CREATE, user.getTargetResources());\n+        final PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.set(PropagationOperation.CREATE, user.getTargetResources());\n \n-        provision(user, password, resOps,\n+        provision(user, password, propByRes,\n                 mandResNames == null ? Collections.EMPTY_SET : mandResNames);\n     }\n \n@@ -152,17 +152,17 @@ public void create(final SyncopeUser user,\n      *\n      * @param user to be updated.\n      * @param password to be updated.\n-     * @param resOps operations to perform on each resource.\n+     * @param propByRes operations to perform on each resource.\n      * @param mandResNames to ask for mandatory or optional update.\n      * @throws PropagationException if anything goes wrong\n      */\n     public void update(final SyncopeUser user,\n             final String password,\n-            final ResourceOperations resOps,\n+            final PropagationByResource propByRes,\n             final Set<String> mandResNames)\n             throws PropagationException {\n \n-        provision(user, password, resOps,\n+        provision(user, password, propByRes,\n                 mandResNames == null ? Collections.EMPTY_SET : mandResNames);\n     }\n \n@@ -181,11 +181,11 @@ public void delete(final SyncopeUser user,\n             final Set<String> mandResNames)\n             throws PropagationException {\n \n-        final ResourceOperations resOps = new ResourceOperations();\n-        resOps.set(ResourceOperationType.DELETE,\n+        final PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.set(PropagationOperation.DELETE,\n                 user.getTargetResources());\n \n-        provision(user, null, resOps,\n+        provision(user, null, propByRes,\n                 mandResNames == null ? Collections.EMPTY_SET : mandResNames);\n     }\n \n@@ -194,28 +194,28 @@ public void delete(final SyncopeUser user,\n      *\n      * @param user user to be provisioned\n      * @param password cleartext password to be provisioned\n-     * @param resOps operation to be performed per resource\n+     * @param propByRes operation to be performed per resource\n      * @param mandResNames resources for mandatory propagation\n      * @throws PropagationException if anything goes wrong\n      */\n     protected void provision(\n             final SyncopeUser user,\n             final String password,\n-            final ResourceOperations resOps,\n+            final PropagationByResource propByRes,\n             final Set<String> mandResNames)\n             throws PropagationException {\n \n-        LOG.debug(\"Provisioning with user {}:\\n{}\", user, resOps);\n+        LOG.debug(\"Provisioning with user {}:\\n{}\", user, propByRes);\n \n         // Avoid duplicates - see javadoc\n-        resOps.purge();\n-        LOG.debug(\"After purge: {}\", resOps);\n+        propByRes.purge();\n+        LOG.debug(\"After purge: {}\", propByRes);\n \n         Map.Entry<String, Set<Attribute>> preparedAttrs;\n         PropagationTask task;\n         TaskExec execution;\n-        for (ResourceOperationType type : ResourceOperationType.values()) {\n-            for (TargetResource resource : resOps.get(type)) {\n+        for (PropagationOperation type : PropagationOperation.values()) {\n+            for (TargetResource resource : propByRes.get(type)) {\n \n                 preparedAttrs = prepareAttributes(user, password, resource);\n \n@@ -228,7 +228,7 @@ protected void provision(\n                         : resource.getOptionalPropagationMode());\n                 task.setAccountId(preparedAttrs.getKey());\n                 task.setOldAccountId(\n-                        resOps.getOldAccountId(resource.getName()));\n+                        propByRes.getOldAccountId(resource.getName()));\n                 task.setAttributes(preparedAttrs.getValue());\n \n                 LOG.debug(\"Execution started for {}\", task);"},{"sha":"70548c0340e578914ff456b0fb2c95b5871bb356","filename":"core/src/main/java/org/syncope/core/persistence/util/XmlConfiguration.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FXmlConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FXmlConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FXmlConfiguration.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -34,10 +34,10 @@\n  */\n public class XmlConfiguration {\n \n-    protected static final Logger LOG =\n+    private static final Logger LOG =\n             LoggerFactory.getLogger(XmlConfiguration.class);\n \n-    public static String serialize(Serializable object) {\n+    public static String serialize(final Serializable object) {\n         try {\n             OutputStream os = new ByteArrayOutputStream();\n             XMLEncoder encoder = new XMLEncoder(os);\n@@ -52,7 +52,9 @@ public static String serialize(Serializable object) {\n         }\n     }\n \n-    public static <T extends Serializable> T deserialize(String serialized) {\n+    public static <T extends Serializable> T deserialize(\n+            final String serialized) {\n+\n         try {\n             InputStream is = new ByteArrayInputStream(\n                     URLDecoder.decode(serialized, \"UTF-8\").getBytes());"},{"sha":"450f1a06aaf08131a2d1a6101fc548ef5398b635","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -14,7 +14,6 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import com.opensymphony.workflow.WorkflowException;\n import java.lang.reflect.Modifier;\n import org.quartz.SchedulerException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -393,8 +392,7 @@ public TaskExecTO report(\n             @RequestParam(\"executionStatus\")\n             final PropagationTaskExecStatus status,\n             @RequestParam(\"message\") final String message)\n-            throws NotFoundException, SyncopeClientCompositeErrorException,\n-            WorkflowException {\n+            throws NotFoundException, SyncopeClientCompositeErrorException {\n \n         TaskExec exec = taskExecDAO.find(executionId);\n         if (exec == null) {"},{"sha":"46396eaa5e343e97a834bb7a8522ba82d525b468","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":39,"deletions":412,"changes":451,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -14,9 +14,6 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import com.opensymphony.workflow.Workflow;\n-import com.opensymphony.workflow.WorkflowException;\n-import com.opensymphony.workflow.spi.Step;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n@@ -29,40 +26,23 @@\n import org.syncope.core.persistence.propagation.PropagationException;\n import org.syncope.core.rest.data.UserDataBinder;\n import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import javassist.NotFoundException;\n-import javax.annotation.Resource;\n import javax.servlet.http.HttpServletResponse;\n-import jpasymphony.dao.JPAWorkflowEntryDAO;\n-import org.springframework.dao.DataIntegrityViolationException;\n-import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.to.UserTO;\n-import org.syncope.client.to.WorkflowActionsTO;\n-import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.UserSearchDAO;\n-import org.syncope.core.persistence.propagation.PropagationManager;\n-import org.syncope.core.persistence.propagation.ResourceOperations;\n-import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n-import org.syncope.core.rest.data.UserDataBinder.CheckInResult;\n import org.syncope.core.util.EntitlementUtil;\n-import org.syncope.core.workflow.Constants;\n-import org.syncope.core.workflow.WFUtils;\n-import org.syncope.types.EntityViolationType;\n-import org.syncope.types.SyncopeClientExceptionType;\n+import org.syncope.core.workflow.UserWorkflowAdapter;\n+import org.syncope.core.workflow.WorkflowException;\n \n @Controller\n @RequestMapping(\"/user\")\n@@ -74,17 +54,11 @@ public class UserController extends AbstractController {\n     @Autowired\n     private UserSearchDAO userSearchDAO;\n \n-    @Autowired\n-    private JPAWorkflowEntryDAO workflowEntryDAO;\n-\n     @Autowired\n     private UserDataBinder userDataBinder;\n \n-    @Resource(name = \"userWorkflow\")\n-    private Workflow workflow;\n-\n     @Autowired\n-    private PropagationManager propagationManager;\n+    private UserWorkflowAdapter wfAdapter;\n \n     private SyncopeUser getUserFromId(final Long userId)\n             throws NotFoundException, UnauthorizedRoleException {\n@@ -111,110 +85,6 @@ private SyncopeUser getUserFromId(final Long userId)\n         return user;\n     }\n \n-    private UserTO executeAction(SyncopeUser user, String actionName,\n-            Map<String, Object> moreInputs)\n-            throws WorkflowException, NotFoundException,\n-            UnauthorizedRoleException {\n-\n-        Map<String, Object> inputs = new HashMap<String, Object>();\n-        if (moreInputs != null && !moreInputs.isEmpty()) {\n-            inputs.putAll(moreInputs);\n-        }\n-\n-        inputs.put(Constants.SYNCOPE_USER, user);\n-\n-        WFUtils.doExecuteAction(workflow,\n-                Constants.USER_WORKFLOW,\n-                actionName,\n-                user.getWorkflowId(),\n-                inputs);\n-\n-        user = userDAO.save(user);\n-\n-        return userDataBinder.getUserTO(user, workflow);\n-    }\n-\n-    private UserTO executeAction(UserTO userTO, String actionName,\n-            Map<String, Object> moreInputs)\n-            throws WorkflowException, NotFoundException,\n-            UnauthorizedRoleException {\n-\n-        SyncopeUser user = getUserFromId(userTO.getId());\n-\n-        return executeAction(user, actionName, moreInputs);\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/activate\")\n-    public UserTO activate(@RequestBody UserTO userTO)\n-            throws WorkflowException, NotFoundException,\n-            UnauthorizedRoleException {\n-\n-        return executeAction(userTO, Constants.ACTION_ACTIVATE,\n-                Collections.singletonMap(\n-                Constants.TOKEN, (Object) userTO.getToken()));\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/generateToken/{userId}\")\n-    public UserTO generateToken(@PathVariable(\"userId\") Long userId)\n-            throws WorkflowException, NotFoundException,\n-            UnauthorizedRoleException {\n-\n-        UserTO userTO = new UserTO();\n-        userTO.setId(userId);\n-\n-        return executeAction(userTO, Constants.ACTION_GENERATE_TOKEN, null);\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/verifyToken\")\n-    public UserTO verifyToken(@RequestBody UserTO userTO)\n-            throws WorkflowException, NotFoundException,\n-            UnauthorizedRoleException {\n-\n-        return executeAction(userTO, Constants.ACTION_VERIFY_TOKEN,\n-                Collections.singletonMap(\n-                Constants.TOKEN, (Object) userTO.getToken()));\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/suspend/{userId}\")\n-    public UserTO suspend(@PathVariable(\"userId\") final Long userId)\n-            throws NotFoundException, WorkflowException,\n-            UnauthorizedRoleException {\n-\n-        LOG.debug(\"About to suspend \" + userId);\n-\n-        SyncopeUser user = getUserFromId(userId);\n-\n-        executeAction(user, \"suspend\", null);\n-        user = userDAO.save(user);\n-\n-        return userDataBinder.getUserTO(user, workflow);\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/reactivate/{userId}\")\n-    public UserTO reactivate(final @PathVariable(\"userId\") Long userId)\n-            throws NotFoundException, WorkflowException,\n-            UnauthorizedRoleException {\n-\n-        LOG.debug(\"About to reactivate \" + userId);\n-\n-        SyncopeUser user = getUserFromId(userId);\n-\n-        executeAction(user, \"reactivate\", null);\n-        user = userDAO.save(user);\n-\n-        return userDataBinder.getUserTO(user, workflow);\n-    }\n-\n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/verifyPassword/{userId}\")\n@@ -247,7 +117,7 @@ public ModelAndView count() {\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/search/count\")\n     @Transactional(readOnly = true)\n-    public ModelAndView searchCount(@RequestBody NodeCond searchCondition)\n+    public ModelAndView searchCount(@RequestBody final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n         if (!searchCondition.checkValidity()) {\n@@ -271,7 +141,7 @@ public List<UserTO> list() {\n                 EntitlementUtil.getOwnedEntitlementNames()));\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n-            userTOs.add(userDataBinder.getUserTO(user, workflow));\n+            userTOs.add(userDataBinder.getUserTO(user));\n         }\n \n         return userTOs;\n@@ -291,7 +161,7 @@ public List<UserTO> list(\n         List<SyncopeUser> users = userDAO.findAll(adminRoleIds, page, size);\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n-            userTOs.add(userDataBinder.getUserTO(user, workflow));\n+            userTOs.add(userDataBinder.getUserTO(user));\n         }\n \n         return userTOs;\n@@ -301,41 +171,17 @@ public List<UserTO> list(\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{userId}\")\n     @Transactional(readOnly = true)\n-    public UserTO read(@PathVariable(\"userId\") Long userId)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n-        SyncopeUser user = getUserFromId(userId);\n-\n-        return userDataBinder.getUserTO(user, workflow);\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/actions/{userId}\")\n-    @Transactional(readOnly = true)\n-    public WorkflowActionsTO getActions(@PathVariable(\"userId\") Long userId)\n+    public UserTO read(@PathVariable(\"userId\") final Long userId)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeUser user = getUserFromId(userId);\n-\n-        WorkflowActionsTO result = new WorkflowActionsTO();\n-\n-        int[] availableActions = workflow.getAvailableActions(\n-                user.getWorkflowId(), Collections.EMPTY_MAP);\n-        for (int i = 0; i < availableActions.length; i++) {\n-            result.addAction(\n-                    workflow.getWorkflowDescriptor(Constants.USER_WORKFLOW).\n-                    getAction(availableActions[i]).getName());\n-        }\n-\n-        return result;\n+        return userDataBinder.getUserTO(getUserFromId(userId));\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/search\")\n     @Transactional(readOnly = true)\n-    public List<UserTO> search(@RequestBody NodeCond searchCondition)\n+    public List<UserTO> search(@RequestBody final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n         LOG.debug(\"User search called with condition {}\", searchCondition);\n@@ -350,7 +196,7 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n                 getOwnedEntitlementNames()), searchCondition);\n         List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n-            result.add(userDataBinder.getUserTO(user, workflow));\n+            result.add(userDataBinder.getUserTO(user));\n         }\n \n         return result;\n@@ -380,139 +226,23 @@ public List<UserTO> search(\n \n         final List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n-            result.add(userDataBinder.getUserTO(user, workflow));\n+            result.add(userDataBinder.getUserTO(user));\n         }\n \n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('USER_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/status/{userId}\")\n-    @Transactional(readOnly = true)\n-    public ModelAndView getStatus(@PathVariable(\"userId\") Long userId)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n-        SyncopeUser user = getUserFromId(userId);\n-\n-        List<Step> currentSteps = workflow.getCurrentSteps(\n-                user.getWorkflowId());\n-\n-        ModelAndView mav = new ModelAndView();\n-        if (currentSteps != null && !currentSteps.isEmpty()) {\n-            mav.addObject(currentSteps.iterator().next().getStatus());\n-        }\n-\n-        return mav;\n-    }\n-\n-    private Set<String> getMandatoryResourceNames(SyncopeUser user,\n-            Set<Long> mandatoryRoles, Set<String> mandatoryResources) {\n-\n-        if (mandatoryRoles == null) {\n-            mandatoryRoles = Collections.EMPTY_SET;\n-        }\n-        if (mandatoryResources == null) {\n-            mandatoryResources = Collections.EMPTY_SET;\n-        }\n-\n-        Set<String> mandatoryResourceNames = new HashSet<String>();\n-\n-        for (TargetResource resource : user.getTargetResources()) {\n-            if (mandatoryResources.contains(resource.getName())) {\n-                mandatoryResourceNames.add(resource.getName());\n-            }\n-        }\n-        for (SyncopeRole role : user.getRoles()) {\n-            if (mandatoryRoles.contains(role.getId())) {\n-                for (TargetResource resource : role.getTargetResources()) {\n-                    mandatoryResourceNames.add(resource.getName());\n-                }\n-            }\n-        }\n-\n-        return mandatoryResourceNames;\n-    }\n-\n-    public SyncopeUser create(UserTO userTO, Set<Long> mandatoryRoles,\n-            Set<String> mandatoryResources)\n-            throws SyncopeClientCompositeErrorException, NotFoundException,\n-            WorkflowException, PropagationException {\n-\n-        // Create the user\n-        SyncopeUser user = new SyncopeUser();\n-        userDataBinder.create(user, userTO);\n-\n-        try {\n-            user = userDAO.save(user);\n-        } catch (InvalidEntityException e) {\n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n-\n-            SyncopeClientException sce = new SyncopeClientException(\n-                    SyncopeClientExceptionType.InvalidPassword);\n-\n-            for (Map.Entry<Class, Set<EntityViolationType>> violation :\n-                    e.getViolations().entrySet()) {\n-\n-                for (EntityViolationType violationType : violation.getValue()) {\n-                    sce.addElement(violationType.toString());\n-                }\n-            }\n-\n-            scce.addException(sce);\n-            throw scce;\n-        }\n-\n-        // User is created locally and propagated, let's advance on the workflow\n-        final Long workflowId =\n-                workflow.initialize(Constants.USER_WORKFLOW, 0, null);\n-        user.setWorkflowId(workflowId);\n-\n-        Map<String, Object> inputs = new HashMap<String, Object>();\n-        inputs.put(Constants.SYNCOPE_USER, user);\n-        inputs.put(Constants.USER_TO, userTO);\n-\n-        int[] wfActions = workflow.getAvailableActions(workflowId, null);\n-        LOG.debug(\"Available workflow actions for user {}: {}\",\n-                user, wfActions);\n-\n-        for (int wfAction : wfActions) {\n-            LOG.debug(\"About to execute action {} on user {}\", wfAction, user);\n-            workflow.doAction(workflowId, wfAction, inputs);\n-            LOG.debug(\"Action {} on user {} run successfully\", wfAction, user);\n-        }\n-\n-        // Save possible modifications made by workflow actions\n-        user = userDAO.save(user);\n-\n-        // Now that user is created locally, let's propagate\n-        Set<String> mandatoryResourceNames = getMandatoryResourceNames(user,\n-                mandatoryRoles, mandatoryResources);\n-        if (!mandatoryResourceNames.isEmpty()) {\n-            LOG.debug(\"About to propagate mandatory onto resources {}\",\n-                    mandatoryResourceNames);\n-        }\n-\n-        propagationManager.create(\n-                user, userTO.getPassword(), mandatoryResourceNames);\n-\n-        return user;\n-    }\n-\n     @PreAuthorize(\"hasRole('USER_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n-    public UserTO create(HttpServletResponse response,\n-            @RequestBody UserTO userTO,\n+    public UserTO create(final HttpServletResponse response,\n+            @RequestBody final UserTO userTO,\n             @RequestParam(value = \"mandatoryRoles\",\n-            required = false) Set<Long> mandatoryRoles,\n+            required = false) final Set<Long> mandatoryRoles,\n             @RequestParam(value = \"mandatoryResources\",\n-            required = false) Set<String> mandatoryResources)\n-            throws SyncopeClientCompositeErrorException,\n-            DataIntegrityViolationException, WorkflowException,\n-            PropagationException, NotFoundException, UnauthorizedRoleException {\n+            required = false) final Set<String> mandatoryResources)\n+            throws PropagationException, UnauthorizedRoleException,\n+            WorkflowException {\n \n         LOG.debug(\"User create called with parameters {}\\n{}\\n{}\",\n                 new Object[]{userTO, mandatoryRoles, mandatoryResources});\n@@ -531,158 +261,55 @@ public UserTO create(HttpServletResponse response,\n             throw new UnauthorizedRoleException(requestRoleIds);\n         }\n \n-        CheckInResult checkInResult = userDataBinder.checkIn(userTO);\n-        LOG.debug(\"Check-in result: {}\", checkInResult);\n-\n-        switch (checkInResult.getAction()) {\n-            case CREATE:\n-                break;\n-\n-            case OVERWRITE:\n-                delete(checkInResult.getSyncopeUserId(),\n-                        mandatoryRoles, mandatoryResources);\n-                break;\n-\n-            case REJECT:\n-                SyncopeClientCompositeErrorException compositeException =\n-                        new SyncopeClientCompositeErrorException(\n-                        HttpStatus.BAD_REQUEST);\n-                SyncopeClientException rejectedUserCreate =\n-                        new SyncopeClientException(\n-                        SyncopeClientExceptionType.RejectedUserCreate);\n-                rejectedUserCreate.addElement(\n-                        String.valueOf(checkInResult.getSyncopeUserId()));\n-                compositeException.addException(rejectedUserCreate);\n-\n-                throw compositeException;\n-\n-            default:\n-        }\n-\n         final UserTO savedTO = userDataBinder.getUserTO(\n-                create(userTO, mandatoryRoles, mandatoryResources), workflow);\n-        LOG.debug(\"About to return create user\\n{}\", savedTO);\n+                wfAdapter.create(userTO, mandatoryRoles, mandatoryResources));\n+\n+        LOG.debug(\"About to return created user\\n{}\", savedTO);\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return savedTO;\n     }\n \n-    public SyncopeUser update(SyncopeUser user, final UserMod userMod,\n-            final Set<Long> mandatoryRoles,\n-            final Set<String> mandatoryResources)\n-            throws WorkflowException, NotFoundException, PropagationException {\n-\n-        // First of all, let's check if update is allowed\n-        Map<String, Object> inputs = new HashMap<String, Object>();\n-        inputs.put(Constants.SYNCOPE_USER, user);\n-        inputs.put(Constants.USER_MOD, userMod);\n-\n-        WFUtils.doExecuteAction(workflow,\n-                Constants.USER_WORKFLOW,\n-                Constants.ACTION_UPDATE,\n-                user.getWorkflowId(),\n-                inputs);\n-\n-        // Update user with provided userMod\n-        ResourceOperations resOps = userDataBinder.update(user, userMod);\n-\n-        try {\n-            user = userDAO.save(user);\n-        } catch (InvalidEntityException e) {\n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n-\n-            SyncopeClientException sce = new SyncopeClientException(\n-                    SyncopeClientExceptionType.InvalidPassword);\n-\n-            for (Map.Entry<Class, Set<EntityViolationType>> violation :\n-                    e.getViolations().entrySet()) {\n-\n-                for (EntityViolationType violationType : violation.getValue()) {\n-                    sce.addElement(violationType.toString());\n-                }\n-            }\n-\n-            scce.addException(sce);\n-            throw scce;\n-        }\n-\n-        // Now that user is update locally, let's propagate\n-        Set<String> mandatoryResourceNames = getMandatoryResourceNames(user,\n-                mandatoryRoles, mandatoryResources);\n-        if (!mandatoryResourceNames.isEmpty()) {\n-            LOG.debug(\"About to propagate mandatory onto resources {}\",\n-                    mandatoryResourceNames);\n-        }\n-\n-        propagationManager.update(user, userMod.getPassword(),\n-                resOps, mandatoryResourceNames);\n-\n-        return user;\n-    }\n-\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n-    public UserTO update(@RequestBody UserMod userMod,\n+    public UserTO update(@RequestBody final UserMod userMod,\n             @RequestParam(value = \"mandatoryRoles\",\n-            required = false) Set<Long> mandatoryRoles,\n+            required = false) final Set<Long> mandatoryRoles,\n             @RequestParam(value = \"mandatoryResources\",\n-            required = false) Set<String> mandatoryResources)\n-            throws NotFoundException, PropagationException, WorkflowException,\n-            UnauthorizedRoleException {\n+            required = false) final Set<String> mandatoryResources)\n+            throws NotFoundException, PropagationException,\n+            UnauthorizedRoleException, WorkflowException {\n \n         LOG.debug(\"User update called with parameters {}\\n{}\\n{}\",\n                 new Object[]{userMod, mandatoryRoles, mandatoryResources});\n \n-        UserTO updatedTO =\n-                userDataBinder.getUserTO(update(getUserFromId(userMod.getId()),\n-                userMod, mandatoryRoles, mandatoryResources), workflow);\n+        final UserTO updatedTO = userDataBinder.getUserTO(\n+                wfAdapter.update(getUserFromId(userMod.getId()), userMod,\n+                mandatoryRoles, mandatoryResources));\n+\n         LOG.debug(\"About to return updated user\\n{}\", updatedTO);\n \n         return updatedTO;\n     }\n \n-    public void delete(SyncopeUser user, Set<Long> mandatoryRoles,\n-            Set<String> mandatoryResources)\n-            throws WorkflowException, NotFoundException, PropagationException {\n-\n-        WFUtils.doExecuteAction(workflow,\n-                Constants.USER_WORKFLOW,\n-                Constants.ACTION_DELETE,\n-                user.getWorkflowId(),\n-                Collections.singletonMap(Constants.SYNCOPE_USER,\n-                (Object) user));\n-\n-        // Propagate delete\n-        Set<String> mandatoryResourceNames = getMandatoryResourceNames(user,\n-                mandatoryRoles, mandatoryResources);\n-        if (!mandatoryResourceNames.isEmpty()) {\n-            LOG.debug(\"About to propagate mandatory onto resources {}\",\n-                    mandatoryResourceNames);\n-        }\n-\n-        propagationManager.delete(user, mandatoryResourceNames);\n-\n-        // Now that delete has been propagated, let's remove everything\n-        if (user.getWorkflowId() != null) {\n-            workflowEntryDAO.delete(user.getWorkflowId());\n-        }\n-        userDAO.delete(user);\n-    }\n-\n     @PreAuthorize(\"hasRole('USER_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{userId}\")\n-    public void delete(@PathVariable(\"userId\") Long userId,\n+    public void delete(@PathVariable(\"userId\") final Long userId,\n             @RequestParam(value = \"mandatoryRoles\",\n-            required = false) Set<Long> mandatoryRoles,\n+            required = false) final Set<Long> mandatoryRoles,\n             @RequestParam(value = \"mandatoryResources\",\n-            required = false) Set<String> mandatoryResources)\n+            required = false) final Set<String> mandatoryResources)\n             throws NotFoundException, WorkflowException, PropagationException,\n             UnauthorizedRoleException {\n \n-        delete(getUserFromId(userId), mandatoryRoles, mandatoryResources);\n+        LOG.debug(\"User delete called with parameters {}\\n{}\\n{}\",\n+                new Object[]{userId, mandatoryRoles, mandatoryResources});\n+\n+        wfAdapter.delete(getUserFromId(userId),\n+                mandatoryRoles, mandatoryResources);\n+\n+        LOG.debug(\"User successfully deleted: {}\", userId);\n     }\n }"},{"sha":"e94fba94b306decf165b84e625a299ca5beca9f2","filename":"core/src/main/java/org/syncope/core/rest/controller/UserManager.java","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserManager.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.syncope.client.mod.UserMod;\n+import org.syncope.client.to.UserTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.TargetResource;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.UserDAO;\n+import org.syncope.core.persistence.propagation.PropagationByResource;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+import org.syncope.core.rest.data.UserDataBinder;\n+import org.syncope.types.EntityViolationType;\n+import org.syncope.types.SyncopeClientExceptionType;\n+\n+public class UserManager {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG =\n+            LoggerFactory.getLogger(UserManager.class);\n+\n+    @Autowired\n+    private UserDataBinder userDataBinder;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    public Set<String> getMandatoryResourceNames(final SyncopeUser user,\n+            Set<Long> mandatoryRoles, Set<String> mandatoryResources) {\n+\n+        if (mandatoryRoles == null) {\n+            mandatoryRoles = Collections.EMPTY_SET;\n+        }\n+        if (mandatoryResources == null) {\n+            mandatoryResources = Collections.EMPTY_SET;\n+        }\n+\n+        Set<String> mandatoryResourceNames = new HashSet<String>();\n+\n+        for (TargetResource resource : user.getTargetResources()) {\n+            if (mandatoryResources.contains(resource.getName())) {\n+                mandatoryResourceNames.add(resource.getName());\n+            }\n+        }\n+        for (SyncopeRole role : user.getRoles()) {\n+            if (mandatoryRoles.contains(role.getId())) {\n+                for (TargetResource resource : role.getTargetResources()) {\n+                    mandatoryResourceNames.add(resource.getName());\n+                }\n+            }\n+        }\n+\n+        return mandatoryResourceNames;\n+    }\n+\n+    public SyncopeUser create(final UserTO userTO)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        SyncopeUser user = new SyncopeUser();\n+        userDataBinder.create(user, userTO);\n+\n+        try {\n+            user = userDAO.save(user);\n+        } catch (InvalidEntityException e) {\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+\n+            SyncopeClientException sce = new SyncopeClientException(\n+                    SyncopeClientExceptionType.InvalidPassword);\n+\n+            for (Map.Entry<Class, Set<EntityViolationType>> violation :\n+                    e.getViolations().entrySet()) {\n+\n+                for (EntityViolationType violationType : violation.getValue()) {\n+                    sce.addElement(violationType.toString());\n+                }\n+            }\n+\n+            scce.addException(sce);\n+            throw scce;\n+        }\n+\n+        return user;\n+    }\n+\n+    public Map.Entry<SyncopeUser, PropagationByResource> update(\n+            final SyncopeUser user, final UserMod userMod) {\n+\n+        PropagationByResource propByRes = userDataBinder.update(user, userMod);\n+\n+        SyncopeUser updated;\n+        try {\n+            updated = userDAO.save(user);\n+        } catch (InvalidEntityException e) {\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+\n+            SyncopeClientException sce = new SyncopeClientException(\n+                    SyncopeClientExceptionType.InvalidPassword);\n+\n+            for (Map.Entry<Class, Set<EntityViolationType>> violation :\n+                    e.getViolations().entrySet()) {\n+\n+                for (EntityViolationType violationType : violation.getValue()) {\n+                    sce.addElement(violationType.toString());\n+                }\n+            }\n+\n+            scce.addException(sce);\n+            throw scce;\n+        }\n+\n+        return new DefaultMapEntry(updated, propByRes);\n+    }\n+\n+    public void delete(final SyncopeUser user) {\n+        userDAO.delete(user);\n+    }\n+}"},{"sha":"d7de3d86d8ee84a1ce0ee3e613d977c14407196f","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -58,9 +58,9 @@\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.dao.VirAttrDAO;\n import org.syncope.core.persistence.dao.VirSchemaDAO;\n-import org.syncope.core.persistence.propagation.ResourceOperations;\n+import org.syncope.core.persistence.propagation.PropagationByResource;\n import org.syncope.core.util.JexlUtil;\n-import org.syncope.types.ResourceOperationType;\n+import org.syncope.types.PropagationOperation;\n import org.syncope.types.SyncopeClientExceptionType;\n \n public abstract class AbstractAttributableDataBinder {\n@@ -292,14 +292,14 @@ private SyncopeClientException checkMandatory(\n         return requiredValuesMissing;\n     }\n \n-    protected ResourceOperations fill(\n+    protected PropagationByResource fill(\n             final AbstractAttributable attributable,\n             final AbstractAttributableMod attributableMod,\n             final AttributableUtil attributableUtil,\n             final SyncopeClientCompositeErrorException compositeErrorException)\n             throws SyncopeClientCompositeErrorException {\n \n-        ResourceOperations resourceOperations = new ResourceOperations();\n+        PropagationByResource propByRes = new PropagationByResource();\n \n         SyncopeClientException invalidValues = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidValues);\n@@ -350,13 +350,13 @@ protected ResourceOperations fill(\n                             && attributable.getTargetResources().\n                             contains(mapping.getResource())) {\n \n-                        resourceOperations.add(ResourceOperationType.UPDATE,\n+                        propByRes.add(PropagationOperation.UPDATE,\n                                 mapping.getResource());\n \n                         if (mapping.isAccountid() && attribute != null\n                                 && !attribute.getValuesAsStrings().isEmpty()) {\n \n-                            resourceOperations.addOldAccountId(\n+                            propByRes.addOldAccountId(\n                                     mapping.getResource().getName(),\n                                     attribute.getValuesAsStrings().\n                                     iterator().next());\n@@ -366,7 +366,7 @@ protected ResourceOperations fill(\n             }\n         }\n \n-        LOG.debug(\"About attributes to be removed:\\n{}\", resourceOperations);\n+        LOG.debug(\"About attributes to be removed:\\n{}\", propByRes);\n \n         // 2. attributes to be updated\n         Set<Long> valuesToBeRemoved;\n@@ -386,7 +386,7 @@ protected ResourceOperations fill(\n                             && attributable.getTargetResources().\n                             contains(mapping.getResource())) {\n \n-                        resourceOperations.add(ResourceOperationType.UPDATE,\n+                        propByRes.add(PropagationOperation.UPDATE,\n                                 mapping.getResource());\n                     }\n                 }\n@@ -457,7 +457,7 @@ protected ResourceOperations fill(\n             compositeErrorException.addException(requiredValuesMissing);\n         }\n \n-        LOG.debug(\"About attributes to be updated:\\n{}\", resourceOperations);\n+        LOG.debug(\"About attributes to be updated:\\n{}\", propByRes);\n \n         // 3. derived attributes to be removed\n         for (String derivedAttributeToBeRemoved :\n@@ -487,14 +487,14 @@ protected ResourceOperations fill(\n                             && attributable.getTargetResources().\n                             contains(mapping.getResource())) {\n \n-                        resourceOperations.add(ResourceOperationType.UPDATE,\n+                        propByRes.add(PropagationOperation.UPDATE,\n                                 mapping.getResource());\n \n                         if (mapping.isAccountid() && derivedAttribute != null\n                                 && !derivedAttribute.getValue(\n                                 attributable.getAttributes()).isEmpty()) {\n \n-                            resourceOperations.addOldAccountId(\n+                            propByRes.addOldAccountId(\n                                     mapping.getResource().getName(),\n                                     derivedAttribute.getValue(\n                                     attributable.getAttributes()));\n@@ -505,7 +505,7 @@ protected ResourceOperations fill(\n         }\n \n         LOG.debug(\"About derived attributes to be removed:\\n{}\",\n-                resourceOperations);\n+                propByRes);\n \n         // 4. virtual attributes to be removed\n         for (String virtualAttributeToBeRemoved :\n@@ -535,13 +535,13 @@ protected ResourceOperations fill(\n                             && attributable.getTargetResources().\n                             contains(mapping.getResource())) {\n \n-                        resourceOperations.add(ResourceOperationType.UPDATE,\n+                        propByRes.add(PropagationOperation.UPDATE,\n                                 mapping.getResource());\n \n                         if (mapping.isAccountid() && virtualAttribute != null\n                                 && !virtualAttribute.getValues().isEmpty()) {\n \n-                            resourceOperations.addOldAccountId(\n+                            propByRes.addOldAccountId(\n                                     mapping.getResource().getName(),\n                                     virtualAttribute.getValues().get(0));\n                         }\n@@ -551,7 +551,7 @@ protected ResourceOperations fill(\n         }\n \n         LOG.debug(\"About virtual attributes to be removed:\\n{}\",\n-                resourceOperations);\n+                propByRes);\n \n         // 5. derived attributes to be added\n         for (String derivedAttributeToBeAdded :\n@@ -570,7 +570,7 @@ protected ResourceOperations fill(\n                             && attributable.getTargetResources().\n                             contains(mapping.getResource())) {\n \n-                        resourceOperations.add(ResourceOperationType.UPDATE,\n+                        propByRes.add(PropagationOperation.UPDATE,\n                                 mapping.getResource());\n                     }\n                 }\n@@ -583,7 +583,7 @@ protected ResourceOperations fill(\n         }\n \n         LOG.debug(\"About derived attributes to be added:\\n{}\",\n-                resourceOperations);\n+                propByRes);\n \n         // 6. virtual attributes to be added\n         for (String virtualAttributeToBeAdded :\n@@ -602,7 +602,7 @@ protected ResourceOperations fill(\n                             && attributable.getTargetResources().\n                             contains(mapping.getResource())) {\n \n-                        resourceOperations.add(ResourceOperationType.UPDATE,\n+                        propByRes.add(PropagationOperation.UPDATE,\n                                 mapping.getResource());\n                     }\n                 }\n@@ -615,7 +615,7 @@ protected ResourceOperations fill(\n         }\n \n         LOG.debug(\"About virtual attributes to be added:\\n{}\",\n-                resourceOperations);\n+                propByRes);\n \n         // 7. resources to be removed\n         TargetResource resource;\n@@ -625,7 +625,7 @@ protected ResourceOperations fill(\n             resource = getResource(resourceToBeRemoved);\n \n             if (resource != null) {\n-                resourceOperations.add(ResourceOperationType.DELETE, resource);\n+                propByRes.add(PropagationOperation.DELETE, resource);\n \n                 attributable.removeTargetResource(resource);\n \n@@ -638,7 +638,7 @@ protected ResourceOperations fill(\n             }\n         }\n \n-        LOG.debug(\"About resources to be removed:\\n{}\", resourceOperations);\n+        LOG.debug(\"About resources to be removed:\\n{}\", propByRes);\n \n         // 6. resources to be added\n         for (String resourceToBeAdded :\n@@ -647,7 +647,7 @@ protected ResourceOperations fill(\n             resource = getResource(resourceToBeAdded);\n \n             if (resource != null) {\n-                resourceOperations.add(ResourceOperationType.CREATE, resource);\n+                propByRes.add(PropagationOperation.CREATE, resource);\n \n                 attributable.addTargetResource(resource);\n \n@@ -660,15 +660,15 @@ protected ResourceOperations fill(\n             }\n         }\n \n-        LOG.debug(\"About resources to be added:\\n{}\", resourceOperations);\n+        LOG.debug(\"About resources to be added:\\n{}\", propByRes);\n \n         // Throw composite exception if there is at least one element set\n         // in the composing exceptions\n         if (compositeErrorException.hasExceptions()) {\n             throw compositeErrorException;\n         }\n \n-        return resourceOperations;\n+        return propByRes;\n     }\n \n     protected void fill(AbstractAttributable attributable,"},{"sha":"4002fa1cf8c009926fe22d03a905cd9a70b02360","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -25,7 +25,7 @@\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.EntitlementDAO;\n-import org.syncope.core.persistence.propagation.ResourceOperations;\n+import org.syncope.core.persistence.propagation.PropagationByResource;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -105,7 +105,7 @@ public SyncopeRole create(final RoleTO roleTO)\n         return role;\n     }\n \n-    public ResourceOperations update(SyncopeRole role, RoleMod roleMod)\n+    public PropagationByResource update(SyncopeRole role, RoleMod roleMod)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException scce ="},{"sha":"bac3b5f1677ef3c98d561759791674ea939f1be3","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":13,"deletions":86,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -15,15 +15,8 @@\n package org.syncope.core.rest.data;\n \n import org.syncope.core.util.AttributableUtil;\n-import com.opensymphony.workflow.Workflow;\n-import com.opensymphony.workflow.spi.Step;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Set;\n-import javassist.NotFoundException;\n-import javax.persistence.EntityNotFoundException;\n-import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang.builder.ToStringStyle;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.syncope.client.mod.MembershipMod;\n@@ -43,70 +36,17 @@\n import org.syncope.core.persistence.beans.membership.MVirAttr;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.propagation.ResourceOperations;\n+import org.syncope.core.persistence.propagation.PropagationByResource;\n import org.syncope.types.CipherAlgorithm;\n import org.syncope.types.PasswordPolicy;\n-import org.syncope.types.ResourceOperationType;\n+import org.syncope.types.PropagationOperation;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n public class UserDataBinder extends AbstractAttributableDataBinder {\n \n-    public enum CheckinResultAction {\n-\n-        CREATE,\n-        OVERWRITE,\n-        REJECT\n-\n-    }\n-\n-    public class CheckInResult {\n-\n-        private CheckinResultAction action;\n-\n-        private Long syncopeUserId;\n-\n-        private Long workflowId;\n-\n-        public CheckinResultAction getAction() {\n-            return action;\n-        }\n-\n-        public void setAction(CheckinResultAction action) {\n-            this.action = action;\n-        }\n-\n-        public Long getSyncopeUserId() {\n-            return syncopeUserId;\n-        }\n-\n-        public void setSyncopeUserId(Long syncopeUserId) {\n-            this.syncopeUserId = syncopeUserId;\n-        }\n-\n-        public Long getWorkflowId() {\n-            return workflowId;\n-        }\n-\n-        public void setWorkflowId(Long workflowId) {\n-            this.workflowId = workflowId;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return ReflectionToStringBuilder.toString(this,\n-                    ToStringStyle.MULTI_LINE_STYLE);\n-        }\n-    }\n-\n-    public CheckInResult checkIn(final UserTO userTO) {\n-        CheckInResult result = new CheckInResult();\n-        result.setAction(CheckinResultAction.CREATE);\n-        return result;\n-    }\n-\n     public void create(final SyncopeUser user, final UserTO userTO)\n-            throws SyncopeClientCompositeErrorException, NotFoundException {\n+            throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException scce =\n                 new SyncopeClientCompositeErrorException(\n@@ -173,10 +113,10 @@ public void create(final SyncopeUser user, final UserTO userTO)\n         fill(user, userTO, AttributableUtil.USER, scce);\n     }\n \n-    public ResourceOperations update(SyncopeUser user, UserMod userMod)\n+    public PropagationByResource update(SyncopeUser user, UserMod userMod)\n             throws SyncopeClientCompositeErrorException {\n \n-        ResourceOperations resOps = new ResourceOperations();\n+        PropagationByResource propByRes = new PropagationByResource();\n \n         SyncopeClientCompositeErrorException scce =\n                 new SyncopeClientCompositeErrorException(\n@@ -195,12 +135,12 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n \n             user.setPassword(userMod.getPassword(), getCipherAlgoritm(),\n                     passwordHistorySize);\n-            resOps.addAll(ResourceOperationType.UPDATE,\n+            propByRes.addAll(PropagationOperation.UPDATE,\n                     user.getTargetResources());\n         }\n \n         // attributes, derived attributes, virtual attributes and resources\n-        resOps.merge(fill(user, userMod, AttributableUtil.USER, scce));\n+        propByRes.merge(fill(user, userMod, AttributableUtil.USER, scce));\n \n         // store the role ids of membership required to be added\n         Set<Long> membershipToBeAddedRoleIds = new HashSet<Long>();\n@@ -228,7 +168,7 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n                     if (!membershipToBeAddedRoleIds.contains(\n                             membership.getSyncopeRole().getId())) {\n \n-                        resOps.add(ResourceOperationType.DELETE, resource);\n+                        propByRes.add(PropagationOperation.DELETE, resource);\n                     }\n                 }\n \n@@ -300,38 +240,25 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n \n                     user.addMembership(membership);\n \n-                    resOps.addAll(ResourceOperationType.UPDATE,\n+                    propByRes.addAll(PropagationOperation.UPDATE,\n                             role.getTargetResources());\n                 }\n \n-                resOps.merge(fill(membership, membershipMod,\n+                propByRes.merge(fill(membership, membershipMod,\n                         AttributableUtil.MEMBERSHIP, scce));\n             }\n         }\n \n-        return resOps;\n+        return propByRes;\n     }\n \n-    public UserTO getUserTO(SyncopeUser user, Workflow userWorkflow) {\n+    public UserTO getUserTO(final SyncopeUser user) {\n         UserTO userTO = new UserTO();\n         userTO.setId(user.getId());\n         userTO.setToken(user.getToken());\n         userTO.setTokenExpireTime(user.getTokenExpireTime());\n         userTO.setPassword(user.getPassword());\n-\n-        try {\n-            List<Step> currentSteps = userWorkflow.getCurrentSteps(\n-                    user.getWorkflowId());\n-\n-            if (currentSteps != null && !currentSteps.isEmpty()) {\n-                userTO.setStatus(currentSteps.iterator().next().getStatus());\n-            } else {\n-                LOG.error(\"Could not find status information for {}\", user);\n-            }\n-        } catch (EntityNotFoundException e) {\n-            LOG.error(\"Could not find workflow entry with id \"\n-                    + user.getWorkflowId());\n-        }\n+        userTO.setStatus(user.getStatus());\n \n         fillTO(userTO,\n                 user.getAttributes(),"},{"sha":"cc9775a9cadc78e5a9ef0b28c24d5573c14eb8f2","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -48,7 +48,7 @@\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.propagation.ConnectorFacadeProxy;\n import org.syncope.core.rest.controller.InvalidSearchConditionException;\n-import org.syncope.core.rest.controller.UserController;\n+import org.syncope.core.workflow.UserWorkflowAdapter;\n \n /**\n  * Job for executing synchronization tasks.\n@@ -88,10 +88,10 @@ public class SyncJob extends AbstractJob {\n     private UserDAO userDAO;\n \n     /**\n-     * User REST controller.\n+     * User workflow adapter.\n      */\n     @Autowired\n-    private UserController userController;\n+    private UserWorkflowAdapter wfAdapter;\n \n     /**\n      * Extract password value from passed values (if instance of GuardedString\n@@ -383,7 +383,7 @@ protected String doExecute()\n                 case CREATE_OR_UPDATE:\n                     if (users.isEmpty()) {\n                         try {\n-                            userController.create(getUserTO(delta.getObject(),\n+                            wfAdapter.create(getUserTO(delta.getObject(),\n                                     syncTask.getResource().getMappings(),\n                                     defaultRoles, defaultResources),\n                                     null, null);\n@@ -397,7 +397,7 @@ protected String doExecute()\n                         if (syncTask.isUpdateIdentities()) {\n                             userToUpdate = users.iterator().next();\n                             try {\n-                                userController.update(userToUpdate,\n+                                wfAdapter.update(userToUpdate,\n                                         getUserMod(userToUpdate.getId(),\n                                         delta.getObject(),\n                                         syncTask.getResource().getMappings(),\n@@ -424,7 +424,7 @@ protected String doExecute()\n                     }\n                     for (Long userId : userIds) {\n                         try {\n-                            userController.delete(userDAO.find(userId),\n+                            wfAdapter.delete(userDAO.find(userId),\n                                     null, null);\n                             deleted++;\n                         } catch (Throwable t) {"},{"sha":"f13a9d76860dfa007f01a5bea47d557f19968d70","filename":"core/src/main/java/org/syncope/core/workflow/AbstractSendEmail.java","status":"removed","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractSendEmail.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractSendEmail.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractSendEmail.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,58 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-import com.opensymphony.workflow.FunctionProvider;\n-import javax.mail.internet.MimeMessage;\n-import org.springframework.mail.javamail.JavaMailSenderImpl;\n-import org.springframework.mail.javamail.MimeMessageHelper;\n-import org.syncope.core.persistence.dao.ConfDAO;\n-\n-public abstract class AbstractSendEmail extends OSWorkflowComponent\n-        implements FunctionProvider {\n-\n-    protected ConfDAO confDAO;\n-\n-    public AbstractSendEmail() {\n-        super();\n-\n-        confDAO = context.getBean(ConfDAO.class);\n-    }\n-\n-    protected void sendMail(final String smtpHost,\n-            final String to,\n-            final String from,\n-            final String subject,\n-            final String textBody,\n-            final String htmlBody) {\n-\n-        try {\n-            JavaMailSenderImpl sender = new JavaMailSenderImpl();\n-            sender.setHost(smtpHost);\n-\n-            MimeMessage message = sender.createMimeMessage();\n-            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n-\n-            helper.setTo(to);\n-            helper.setFrom(from);\n-            helper.setSubject(subject);\n-            helper.setText(textBody, htmlBody);\n-\n-            sender.send(message);\n-        } catch (Throwable t) {\n-            LOG.error(\"Could not send e-mail\", t);\n-        }\n-    }\n-}"},{"sha":"de2adc42500b0a2e5412b054cc2521b5ffec7305","filename":"core/src/main/java/org/syncope/core/workflow/Constants.java","status":"removed","additions":0,"deletions":49,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,49 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-/**\n- * Commonly used workflow constants.\n- */\n-public final class Constants {\n-\n-    // ----- User workflow ------ //\n-    public static final String ACTION_ACTIVATE = \"activate\";\n-\n-    public static final String ACTION_GENERATE_TOKEN = \"generateToken\";\n-\n-    public static final String ACTION_DELETE = \"delete\";\n-\n-    public static final String ACTION_UPDATE = \"update\";\n-\n-    public static final String ACTION_VERIFY_TOKEN = \"verifyToken\";\n-\n-    public static final String SYNCOPE_USER = \"syncopeUser\";\n-\n-    public static final String SYNCOPE_ROLE = \"syncopeRole\";\n-\n-    public static final String MEMBERSHIP = \"membership\";\n-\n-    public static final String TOKEN = \"token\";\n-\n-    public static final String USER_TO = \"userTO\";\n-\n-    public static final String USER_MOD = \"userMod\";\n-\n-    public static final String USER_WORKFLOW = \"userWorkflow\";\n-\n-    private Constants() {\n-    }\n-}"},{"sha":"72a69d017c2c9fbc510ff7f5f999d5108932f900","filename":"core/src/main/java/org/syncope/core/workflow/GenerateToken.java","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,57 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-import com.opensymphony.module.propertyset.PropertySet;\n-import com.opensymphony.workflow.FunctionProvider;\n-import com.opensymphony.workflow.WorkflowException;\n-import java.util.Map;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.ConfDAO;\n-\n-public class GenerateToken extends OSWorkflowComponent\n-        implements FunctionProvider {\n-\n-    @Override\n-    @Transactional\n-    public void execute(Map transientVars, Map args, PropertySet ps)\n-            throws WorkflowException {\n-\n-        final ConfDAO confDAO = context.getBean(ConfDAO.class);\n-\n-        SyncopeUser user = (SyncopeUser) transientVars.get(\n-                Constants.SYNCOPE_USER);\n-\n-        final String token = (String) transientVars.get(\n-                Constants.TOKEN);\n-\n-        LOG.debug(\"Received token {}\", token);\n-\n-        try {\n-            user.generateToken(\n-                    Integer.parseInt(confDAO.find(\n-                    \"token.length\").getValue()),\n-                    Integer.parseInt(confDAO.find(\n-                    \"token.expireTime\").getValue()),\n-                    token);\n-        } catch (MissingConfKeyException e) {\n-            throw new WorkflowException(e);\n-        }\n-\n-        transientVars.put(Constants.SYNCOPE_USER, user);\n-    }\n-}"},{"sha":"07b21cc0796b1214d0f3e3a928969201f3aa3ba8","filename":"core/src/main/java/org/syncope/core/workflow/IsNotValidToken.java","status":"removed","additions":0,"deletions":31,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsNotValidToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsNotValidToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsNotValidToken.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,31 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-import com.opensymphony.module.propertyset.PropertySet;\n-import com.opensymphony.workflow.Condition;\n-import com.opensymphony.workflow.WorkflowException;\n-import java.util.Map;\n-\n-public class IsNotValidToken extends IsValidToken\n-        implements Condition {\n-\n-    @Override\n-    public boolean passesCondition(Map transientVars, Map args, PropertySet ps)\n-            throws WorkflowException {\n-\n-        return !super.passesCondition(transientVars, args, ps);\n-    }\n-}"},{"sha":"cdc7a3bd686a0bc06a53b7572dc9cb4fd1d06531","filename":"core/src/main/java/org/syncope/core/workflow/IsValidToken.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsValidToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsValidToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsValidToken.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,46 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-import com.opensymphony.module.propertyset.PropertySet;\n-import com.opensymphony.workflow.Condition;\n-import com.opensymphony.workflow.WorkflowException;\n-import java.util.Map;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n-\n-public class IsValidToken extends OSWorkflowComponent\n-        implements Condition {\n-\n-    @Override\n-    public boolean passesCondition(final Map transientVars,\n-            final Map args,\n-            final PropertySet propertySet)\n-            throws WorkflowException {\n-\n-        SyncopeUser user = (SyncopeUser) transientVars.get(\n-                Constants.SYNCOPE_USER);\n-\n-        final String token = (String) transientVars.get(Constants.TOKEN);\n-\n-        boolean validToken = user.checkToken(token);\n-\n-        if (validToken) {\n-            LOG.debug(\"Remove valid token '{}': \", token);\n-            user.removeToken();\n-        }\n-\n-        return validToken;\n-    }\n-}"},{"sha":"9914cf7ab4ace3d4338d23d824c26e041e06149a","filename":"core/src/main/java/org/syncope/core/workflow/NoOpUserWorkflowAdapter.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.workflow;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.syncope.client.mod.UserMod;\n+import org.syncope.client.to.UserTO;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.UserDAO;\n+import org.syncope.core.persistence.propagation.PropagationByResource;\n+import org.syncope.core.persistence.propagation.PropagationException;\n+import org.syncope.core.persistence.propagation.PropagationManager;\n+import org.syncope.core.rest.controller.UserManager;\n+\n+/**\n+ * Simple implementation basically not involving any workflow engine.\n+ */\n+public class NoOpUserWorkflowAdapter implements UserWorkflowAdapter {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG =\n+            LoggerFactory.getLogger(NoOpUserWorkflowAdapter.class);\n+\n+    @Autowired\n+    private UserManager userManager;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private PropagationManager propagationManager;\n+\n+    @Override\n+    public SyncopeUser create(final UserTO userTO,\n+            final Set<Long> mandatoryRoles,\n+            final Set<String> mandatoryResources)\n+            throws WorkflowException, PropagationException {\n+\n+        SyncopeUser user = userManager.create(userTO);\n+        user.setStatus(\"active\");\n+        user = userDAO.save(user);\n+\n+        // Now that user is created locally, let's propagate\n+        Set<String> mandatoryResourceNames =\n+                userManager.getMandatoryResourceNames(user,\n+                mandatoryRoles, mandatoryResources);\n+        if (!mandatoryResourceNames.isEmpty()) {\n+            LOG.debug(\"About to propagate onto these mandatory resources {}\",\n+                    mandatoryResourceNames);\n+        }\n+\n+        propagationManager.create(\n+                user, userTO.getPassword(), mandatoryResourceNames);\n+\n+        return user;\n+    }\n+\n+    @Override\n+    public SyncopeUser update(final SyncopeUser user, final UserMod userMod,\n+            final Set<Long> mandatoryRoles,\n+            final Set<String> mandatoryResources)\n+            throws WorkflowException, PropagationException {\n+\n+        Map.Entry<SyncopeUser, PropagationByResource> updated =\n+                userManager.update(user, userMod);\n+\n+        // Now that user is updated locally, let's propagate\n+        Set<String> mandatoryResourceNames =\n+                userManager.getMandatoryResourceNames(user,\n+                mandatoryRoles, mandatoryResources);\n+        if (!mandatoryResourceNames.isEmpty()) {\n+            LOG.debug(\"About to propagate onto these mandatory resources {}\",\n+                    mandatoryResourceNames);\n+        }\n+\n+        propagationManager.update(user, userMod.getPassword(),\n+                updated.getValue(), mandatoryResourceNames);\n+\n+        return updated.getKey();\n+    }\n+\n+    @Override\n+    public void delete(final SyncopeUser user,\n+            final Set<Long> mandatoryRoles,\n+            final Set<String> mandatoryResources)\n+            throws WorkflowException, PropagationException {\n+\n+        // Propagate delete\n+        Set<String> mandatoryResourceNames =\n+                userManager.getMandatoryResourceNames(user,\n+                mandatoryRoles, mandatoryResources);\n+        if (!mandatoryResourceNames.isEmpty()) {\n+            LOG.debug(\"About to propagate onto these mandatory resources {}\",\n+                    mandatoryResourceNames);\n+        }\n+\n+        propagationManager.delete(user, mandatoryResourceNames);\n+\n+        userManager.delete(user);\n+    }\n+}"},{"sha":"fbb38d1fa8ace5cdddf0f9e7104902cbdbe9e110","filename":"core/src/main/java/org/syncope/core/workflow/OSWorkflowComponent.java","status":"removed","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FOSWorkflowComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FOSWorkflowComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FOSWorkflowComponent.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,37 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-import com.opensymphony.workflow.Workflow;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.ConfigurableApplicationContext;\n-import org.syncope.core.util.ApplicationContextManager;\n-\n-public abstract class OSWorkflowComponent {\n-\n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG =\n-            LoggerFactory.getLogger(OSWorkflowComponent.class);\n-\n-    protected static final ConfigurableApplicationContext context =\n-            ApplicationContextManager.getApplicationContext();\n-\n-    protected Workflow getUserWorkflow() {\n-        return (Workflow) context.getBean(Constants.USER_WORKFLOW);\n-    }\n-}"},{"sha":"8d6ad3aa77709b6b92e520cbf09ebc2d35176aea","filename":"core/src/main/java/org/syncope/core/workflow/SendVelocityEmail.java","status":"removed","additions":0,"deletions":117,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FSendVelocityEmail.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FSendVelocityEmail.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FSendVelocityEmail.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,117 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-import com.opensymphony.module.propertyset.PropertySet;\n-import com.opensymphony.workflow.WorkflowException;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import org.apache.velocity.app.VelocityEngine;\n-import org.apache.velocity.exception.VelocityException;\n-import org.springframework.ui.velocity.VelocityEngineUtils;\n-import org.syncope.core.persistence.beans.AbstractAttr;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.dao.MissingConfKeyException;\n-\n-/**\n- * Send e-mail from workflow using Velocity as template mechanism.\n- */\n-public class SendVelocityEmail extends AbstractSendEmail {\n-\n-    private static final String KIND = \"kind\";\n-\n-    private String getConfValue(final String key) {\n-        String result;\n-        try {\n-            result = confDAO.find(key).getValue();\n-        } catch (MissingConfKeyException e) {\n-            LOG.error(\"While getting conf '\" + key + \"'\", e);\n-            result = \"\";\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public void execute(final Map transientVars, final Map args,\n-            final PropertySet propertySet)\n-            throws WorkflowException {\n-\n-        final SyncopeUser user =\n-                (SyncopeUser) transientVars.get(Constants.SYNCOPE_USER);\n-\n-        VelocityEngine velocityEngine = context.getBean(VelocityEngine.class);\n-\n-        final Map<String, Object> model = new HashMap<String, Object>();\n-        List<String> values;\n-        for (AbstractAttr attr : user.getAttributes()) {\n-            values = attr.getValuesAsStrings();\n-            model.put(attr.getSchema().getName(),\n-                    values.isEmpty()\n-                    ? \"\"\n-                    : (values.size() == 1\n-                    ? values.iterator().next() : values));\n-        }\n-\n-        final String smtpHost = getConfValue(\"smtp.host\");\n-        final String from = getConfValue(args.get(KIND)\n-                + \".email.from\");\n-        final String subject = getConfValue(args.get(KIND)\n-                + \".email.subject\");\n-        final String to = user.getAttribute(\"email\") != null\n-                ? user.getAttribute(\"email\").getValuesAsStrings().\n-                iterator().next() : null;\n-\n-        String htmlBody;\n-        String txtBody;\n-        try {\n-            htmlBody =\n-                    VelocityEngineUtils.mergeTemplateIntoString(velocityEngine,\n-                    \"mailTemplates/\" + args.get(KIND) + \".html.vm\",\n-                    model);\n-            txtBody =\n-                    VelocityEngineUtils.mergeTemplateIntoString(velocityEngine,\n-                    \"mailTemplates/\" + args.get(KIND) + \".txt.vm\",\n-                    model);\n-        } catch (VelocityException e) {\n-            LOG.error(\"Could not get mail body\", e);\n-\n-            htmlBody = \"\";\n-            txtBody = \"\";\n-        }\n-\n-        if (smtpHost.isEmpty() || from.isEmpty() || subject.isEmpty()\n-                || to == null || to.isEmpty()\n-                || htmlBody.isEmpty() || txtBody.isEmpty()) {\n-\n-            LOG.error(\"Could not fetch all required information for \"\n-                    + \"sending the email:\\n\"\n-                    + smtpHost + \"\\n\"\n-                    + to + \"\\n\"\n-                    + from + \"\\n\"\n-                    + subject + \"\\n\"\n-                    + htmlBody + \"\\n\"\n-                    + txtBody + \"\\n\");\n-        } else {\n-            super.sendMail(smtpHost,\n-                    to,\n-                    from,\n-                    subject,\n-                    txtBody,\n-                    htmlBody);\n-        }\n-    }\n-}"},{"sha":"60eba7fb20a3370cd785c1e91d9e51ebbde94ab4","filename":"core/src/main/java/org/syncope/core/workflow/StoreAttrValue.java","status":"removed","additions":0,"deletions":105,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreAttrValue.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,105 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-import com.opensymphony.module.propertyset.PropertySet;\n-import com.opensymphony.workflow.FunctionProvider;\n-import com.opensymphony.workflow.WorkflowException;\n-import java.util.Date;\n-import java.util.Map;\n-import org.syncope.core.persistence.beans.AbstractAttr;\n-import org.syncope.core.persistence.beans.AbstractAttributable;\n-import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.membership.Membership;\n-import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.util.AttributableUtil;\n-import org.syncope.types.SchemaType;\n-\n-public class StoreAttrValue extends OSWorkflowComponent\n-        implements FunctionProvider {\n-\n-    private AttributableUtil attributableUtil;\n-\n-    private AbstractAttr getAttribute(Map transientVars, Map args)\n-            throws WorkflowException {\n-\n-        String schemaName = (String) args.get(\"schema\");\n-        if (schemaName == null || schemaName.length() == 0) {\n-            throw new WorkflowException(\"Must specify schema name\");\n-        }\n-\n-        String kind = (String) args.get(\"kind\");\n-        if (kind == null || kind.length() == 0) {\n-            kind = Constants.SYNCOPE_USER;\n-        }\n-\n-        AbstractAttributable attributable = null;\n-        if (Constants.SYNCOPE_USER.equals(kind)) {\n-            attributableUtil = AttributableUtil.USER;\n-            attributable = (SyncopeUser) transientVars.get(\n-                    Constants.SYNCOPE_USER);\n-        } else if (Constants.SYNCOPE_ROLE.equals(kind)) {\n-                attributableUtil = AttributableUtil.ROLE;\n-                attributable = (SyncopeRole) transientVars.get(\n-                        Constants.SYNCOPE_ROLE);\n-            } else if (Constants.MEMBERSHIP.equals(kind)) {\n-                    attributableUtil = AttributableUtil.MEMBERSHIP;\n-                    attributable = (Membership) transientVars.get(\n-                            Constants.MEMBERSHIP);\n-                } else {\n-                    throw new WorkflowException(\n-                            \"Invalid attributable specified: \" + kind);\n-                }\n-        if (attributable == null) {\n-            throw new WorkflowException(\"Could not find instance \"\n-                    + attributableUtil);\n-        }\n-\n-        SchemaDAO schemaDAO = context.getBean(SchemaDAO.class);\n-        AbstractSchema schema = schemaDAO.find(schemaName,\n-                attributableUtil.schemaClass());\n-        if (schema == null) {\n-            throw new WorkflowException(\"Invalid schema: \" + schemaName);\n-        }\n-\n-        AbstractAttr attribute = attributable.getAttribute(schemaName);\n-        if (attribute == null) {\n-            attribute = attributableUtil.newAttribute();\n-            attribute.setSchema(schema);\n-            attribute.setOwner(attributable);\n-            attributable.addAttribute(attribute);\n-        }\n-\n-        return attribute;\n-    }\n-\n-    public void execute(Map transientVars, Map args, PropertySet ps)\n-            throws WorkflowException {\n-\n-        AbstractAttr attribute = getAttribute(transientVars, args);\n-\n-        String val = (String) transientVars.get(args.get(\"schema\"));\n-\n-        if (val != null && !val.isEmpty()) {\n-            attribute.addValue(val, attributableUtil);\n-        } else if (attribute.getSchema().getType() == SchemaType.Date) {\n-                attribute.addValue(\n-                        attribute.getSchema().getFormatter().format(\n-                        new Date()), attributableUtil);\n-            }\n-    }\n-}"},{"sha":"0876e221d1d3af8ad76ab9ec8d7e64d4d9b80175","filename":"core/src/main/java/org/syncope/core/workflow/UserWorkflowAdapter.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FUserWorkflowAdapter.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.workflow;\n+\n+import java.util.Set;\n+import org.syncope.client.mod.UserMod;\n+import org.syncope.client.to.UserTO;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.propagation.PropagationException;\n+\n+/**\n+ * Interface for calling underlying workflow implementations.\n+ */\n+public interface UserWorkflowAdapter {\n+\n+    /**\n+     * Create an user.\n+     *\n+     * @param userTO user to be created\n+     * @param mandatoryRoles roles for mandatory propagation\n+     * @param mandatoryResources resources for mandatory propagation\n+     * @return user just created\n+     * @throws WorkflowException workflow exception\n+     * @throws PropagationException propagation exception\n+     */\n+    SyncopeUser create(UserTO userTO,\n+            Set<Long> mandatoryRoles, Set<String> mandatoryResources)\n+            throws WorkflowException, PropagationException;\n+\n+    /**\n+     * Updated an user.\n+     *\n+     * @param user user to be updated\n+     * @param userMod modification set to be performed\n+     * @param mandatoryRoles roles for mandatory propagation\n+     * @param mandatoryResources resources for mandatory propagation\n+     * @return user just updated\n+     * @throws WorkflowException workflow exception\n+     * @throws PropagationException propagation exception\n+     */\n+    SyncopeUser update(SyncopeUser user, UserMod userMod,\n+            Set<Long> mandatoryRoles, Set<String> mandatoryResources)\n+            throws WorkflowException, PropagationException;\n+\n+    /**\n+     * Delete an user.\n+     *\n+     * @param user user to be deleted\n+     * @param mandatoryRoles roles for mandatory propagation\n+     * @param mandatoryResources resources for mandatory propagation\n+     * @throws WorkflowException workflow exception\n+     * @throws PropagationException propagation exception\n+     */\n+    void delete(SyncopeUser user,\n+            Set<Long> mandatoryRoles, Set<String> mandatoryResources)\n+            throws WorkflowException, PropagationException;\n+}"},{"sha":"4e607c78b64674a523e50ccf339fde2324c76229","filename":"core/src/main/java/org/syncope/core/workflow/WFUtils.java","status":"removed","additions":0,"deletions":91,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWFUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWFUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWFUtils.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,91 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-import com.opensymphony.workflow.InvalidActionException;\n-import com.opensymphony.workflow.Workflow;\n-import com.opensymphony.workflow.WorkflowException;\n-import com.opensymphony.workflow.loader.ActionDescriptor;\n-import java.util.Collections;\n-import java.util.Map;\n-import javassist.NotFoundException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class WFUtils {\n-\n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG =\n-            LoggerFactory.getLogger(WFUtils.class);\n-\n-    private WFUtils() {\n-    }\n-\n-    public static Integer findWorkflowAction(\n-            final Workflow workflow,\n-            final String workflowName,\n-            final Long workflowId,\n-            final String actionName) {\n-\n-        int[] actions = workflow.getAvailableActions(workflowId, null);\n-\n-        Integer actionId = null;\n-        for (int i = 0; i < actions.length && actionId == null; i++) {\n-            if (actionName.equals(\n-                    workflow.getWorkflowDescriptor(workflowName).\n-                    getAction(actions[i]).getName())) {\n-\n-                actionId = actions[i];\n-            }\n-        }\n-\n-        if (actionId == null) {\n-            Map<Integer, ActionDescriptor> commonActions = workflow.\n-                    getWorkflowDescriptor(workflowName).getCommonActions();\n-            for (Map.Entry<Integer, ActionDescriptor> action :\n-                    commonActions.entrySet()) {\n-                if (actionName.equals(action.getValue().getName())) {\n-                    actionId = action.getKey();\n-                }\n-            }\n-        }\n-\n-        return actionId;\n-    }\n-\n-    public static void doExecuteAction(\n-            final Workflow workflow,\n-            final String workflowName,\n-            final String actionName,\n-            final Long workflowId,\n-            final Map<String, Object> moreInputs)\n-            throws WorkflowException, NotFoundException {\n-\n-        Integer actionId = findWorkflowAction(\n-                workflow, workflowName, workflowId, actionName);\n-        if (actionId == null) {\n-            throw new NotFoundException(\"Workflow action '\" + actionName + \"'\");\n-        }\n-\n-        try {\n-            workflow.doAction(workflowId, actionId, moreInputs == null\n-                    ? Collections.EMPTY_MAP : moreInputs);\n-        } catch (InvalidActionException e) {\n-            throw new WorkflowException(e);\n-        }\n-    }\n-}"},{"sha":"56cffc3d88a1651ebcdc0c444219faab925f1966","filename":"core/src/main/java/org/syncope/core/workflow/WorkflowException.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowException.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.workflow;\n+\n+/**\n+ * Wrapper for all workflow related exceptions. Original exceptions will depend\n+ * on UserWorkflowAdapter implementation.\n+ *\n+ * @see UserWorkflowAdapter\n+ */\n+public class WorkflowException extends Exception {\n+\n+    /**\n+     * Generated serialVersionUID.\n+     */\n+    private static final long serialVersionUID = -6261173250078013869L;\n+\n+    /**\n+     * Return a new instance wrapping the original workflow exception.\n+     *\n+     * @param cause original workflow exception\n+     */\n+    public WorkflowException(final Throwable cause) {\n+        super(cause);\n+    }\n+}"},{"sha":"f11d70e5a6992de700c1d50b43ed4054f50bcb2f","filename":"core/src/main/java/org/syncope/core/workflow/package-info.java","status":"renamed","additions":4,"deletions":18,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Fpackage-info.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -12,21 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package jpasymphony.beans;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.Table;\n-\n-@Entity\n-@Table(name = \"os_historystep\")\n-public class JPAHistoryStep extends AbstractJPAStep {\n-\n-    @Id\n-    private long id;\n-\n-    @Override\n-    public long getId() {\n-        return id;\n-    }\n-}\n+/**\n+ * Package for classes involved with workflow.\n+ */\n+package org.syncope.core.workflow;","previous_filename":"core/src/main/java/jpasymphony/beans/JPAHistoryStep.java"},{"sha":"3f10ac5322c976ef7c84759f426d973c05b3cd6d","filename":"core/src/main/resources/META-INF/orm.xml","status":"modified","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -219,38 +219,6 @@\n         </attributes>\n     </entity>\n     \n-    <entity class=\"jpasymphony.beans.JPACurrentStep\">\n-        <attributes>\n-            <id name=\"id\">\n-                <generated-value generator=\"SEQ_JPACurrentStep\" strategy=\"TABLE\"/>\n-                <table-generator name=\"SEQ_JPACurrentStep\" pk-column-value=\"SEQ_JPACurrentStep\" initial-value=\"10\"/>\n-            </id>\n-        </attributes>\n-    </entity>\n-    <entity class=\"jpasymphony.beans.JPAHistoryStep\">\n-        <attributes>\n-            <id name=\"id\">\n-                <generated-value generator=\"SEQ_JPAHistoryStep\" strategy=\"TABLE\"/>\n-                <table-generator name=\"SEQ_JPAHistoryStep\" pk-column-value=\"SEQ_JPAHistoryStep\" initial-value=\"10\"/>\n-            </id>\n-        </attributes>\n-    </entity>\n-    <entity class=\"jpasymphony.beans.JPAPropertySetItem\">\n-        <attributes>\n-            <id name=\"id\">\n-                <generated-value generator=\"SEQ_JPAPropertySetItem\" strategy=\"TABLE\"/>\n-                <table-generator name=\"SEQ_JPAPropertySetItem\" pk-column-value=\"SEQ_JPAPropertySetItem\" initial-value=\"10\"/>\n-            </id>\n-        </attributes>\n-    </entity>\n-    <entity class=\"jpasymphony.beans.JPAWorkflowEntry\">\n-        <attributes>\n-            <id name=\"id\">\n-                <generated-value generator=\"SEQ_JPAWorkflowEntry\" strategy=\"TABLE\"/>\n-                <table-generator name=\"SEQ_JPAWorkflowEntry\" pk-column-value=\"SEQ_JPAWorkflowEntry\" initial-value=\"10\"/>\n-            </id>\n-        </attributes>\n-    </entity>\n     <entity class=\"org.syncope.core.persistence.beans.Policy\">\n         <attributes>\n             <id name=\"id\">"},{"sha":"37d9c1ecef9482ad0160cb7fc56cf971f1cdaf42","filename":"core/src/main/resources/META-INF/orm.xml.oracle","status":"modified","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -183,38 +183,6 @@\n         </attributes>\n     </entity>\n \n-    <entity class=\"jpasymphony.beans.JPACurrentStep\">\n-        <attributes>\n-            <id name=\"id\">\n-                <generated-value generator=\"SEQ_JPACurrentStep\" strategy=\"TABLE\"/>\n-                <table-generator name=\"SEQ_JPACurrentStep\" pk-column-value=\"SEQ_JPACurrentStep\" initial-value=\"10\"/>\n-            </id>\n-        </attributes>\n-    </entity>\n-    <entity class=\"jpasymphony.beans.JPAHistoryStep\">\n-        <attributes>\n-            <id name=\"id\">\n-                <generated-value generator=\"SEQ_JPAHistoryStep\" strategy=\"TABLE\"/>\n-                <table-generator name=\"SEQ_JPAHistoryStep\" pk-column-value=\"SEQ_JPAHistoryStep\" initial-value=\"10\"/>\n-            </id>\n-        </attributes>\n-    </entity>\n-    <entity class=\"jpasymphony.beans.JPAPropertySetItem\">\n-        <attributes>\n-            <id name=\"id\">\n-                <generated-value generator=\"SEQ_JPAPropertySetItem\" strategy=\"TABLE\"/>\n-                <table-generator name=\"SEQ_JPAPropertySetItem\" pk-column-value=\"SEQ_JPAPropertySetItem\" initial-value=\"10\"/>\n-            </id>\n-        </attributes>\n-    </entity>\n-    <entity class=\"jpasymphony.beans.JPAWorkflowEntry\">\n-        <attributes>\n-            <id name=\"id\">\n-                <generated-value generator=\"SEQ_JPAWorkflowEntry\" strategy=\"TABLE\"/>\n-                <table-generator name=\"SEQ_JPAWorkflowEntry\" pk-column-value=\"SEQ_JPAWorkflowEntry\" initial-value=\"10\"/>\n-            </id>\n-        </attributes>\n-    </entity>\n     <entity class=\"org.syncope.core.persistence.beans.Policy\">\n         <attributes>\n             <id name=\"id\">"},{"sha":"31189e18ddb546aabbb0d21bd0802732cbbbd68e","filename":"core/src/main/resources/META-INF/propertyset.xml","status":"removed","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpropertyset.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpropertyset.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpropertyset.xml?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,4 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<propertysets>\n-    <propertyset name=\"jpa\" class=\"jpasymphony.module.propertyset.jpa.JPAPropertySet\"/>\n-</propertysets>"},{"sha":"ec726a7c4d3c80556553dd53ac2c8c248b002e9a","filename":"core/src/main/resources/indexes.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -63,6 +63,4 @@\n     <entry key=\"UAttrValue_booleanvalueIndex\">CREATE INDEX UAttrValue_booleanvalueIndex ON UAttrValue(booleanvalue)</entry>\n     <entry key=\"UDerAttr_derivedSchema_nameIndex\">CREATE INDEX UDerAttr_derivedSchema_naIndex ON UDerAttr(derivedSchema_name)</entry>\n     <entry key=\"UDerAttr_owner_idIndex\">CREATE INDEX UDerAttr_owner_idIndex ON UDerAttr(owner_id)</entry>\n-    <entry key=\"os_currentstep_workflowEntry_idIndex\">CREATE INDEX os_currentstep_workflowEnIndex ON os_currentstep(workflowEntry_id)</entry>\n-    <entry key=\"os_historystep_workflowEntry_idIndex\">CREATE INDEX os_historystep_workflowEnIndex ON os_historystep(workflowEntry_id)</entry>\n </properties>"},{"sha":"48b4e7ea4e09769998bd6a1f672bdc0a5acd92b1","filename":"core/src/main/resources/logback.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -169,11 +169,6 @@\n         <appender-ref ref=\"rest\"/>\n     </logger>\n \n-    <logger name=\"com.opensymphony.workflow\" additivity=\"false\">\n-        <level value=\"INFO\"/>\n-        <appender-ref ref=\"rest\"/>\n-    </logger>\n-\n     <logger name=\"org.apache.velocity\" additivity=\"false\">\n         <level value=\"INFO\"/>\n         <appender-ref ref=\"rest\"/>"},{"sha":"f5d25fcb57fcf807bddec7f71b7198e5feb9990f","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -113,4 +113,8 @@\n \n     <bean id=\"validator\"\n           class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"/>\n+          \n+    <bean class=\"org.syncope.core.workflow.NoOpUserWorkflowAdapter\"/>\n+\n+    <bean class=\"org.syncope.core.rest.controller.UserManager\"/>\n </beans>"},{"sha":"16cd55012d195933706672c50962f812414c7354","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":1,"deletions":22,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -29,7 +29,7 @@\n     <bean id=\"adminUser\" class=\"java.lang.String\">\n         <constructor-arg value=\"${adminUser}\"/>\n     </bean>\n-\n+    \n     <bean id=\"jacksonObjectMapper\" class=\"org.syncope.core.rest.jackson.UnwrappedObjectMapper\"/>\n     \n     <bean id=\"mappingJacksonHttpMessageConverter\"\n@@ -85,25 +85,4 @@\n         <property name=\"ignoreAcceptHeader\" value=\"false\"/>\n     </bean>\n \n-    <bean id=\"httpClientParams\" class=\"org.apache.commons.httpclient.params.HttpClientParams\">\n-        <property name=\"authenticationPreemptive\" value=\"true\"/>\n-        <property name=\"connectionManagerClass\"\n-                  value=\"org.apache.commons.httpclient.MultiThreadedHttpConnectionManager\"/>\n-    </bean>\n-    <bean id=\"httpClient\" class=\"org.apache.commons.httpclient.HttpClient\">\n-        <constructor-arg ref=\"httpClientParams\"/>\n-    </bean>\n-    <bean id=\"httpClientFactory\" class=\"org.springframework.http.client.CommonsClientHttpRequestFactory\">\n-        <constructor-arg ref=\"httpClient\"/>\n-    </bean>\n-    <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n-        <constructor-arg ref=\"httpClientFactory\"/>\n-\n-        <property name=\"messageConverters\" ref=\"mappingJacksonHttpMessageConverter\"/>\n-        <property name=\"errorHandler\">\n-            <bean id=\"syncopeClientErrorHandler\"\n-            class=\"org.syncope.client.validation.SyncopeClientErrorHandler\"/>\n-        </property>\n-    </bean>\n-\n </beans>\n\\ No newline at end of file"},{"sha":"4caf790b6d7a567e20e47e6551945f10acb84a23","filename":"core/src/main/resources/userWorkflow.bpmn20.xml","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<definitions id=\"definitions\"\n+             targetNamespace=\"http://activiti.org/bpmn20\" \n+             xmlns:activiti=\"http://activiti.org/bpmn\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" \n+             xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" \n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL \n+                                 http://www.omg.org/spec/BPMN/2.0/20100501/BPMN20.xsd\">\n+  \n+    <process id=\"userWorkflow\" name=\"User Workflow\">\n+  \n+        <startEvent id=\"theStart\" />\n+    \n+        <sequenceFlow id=\"flow1\" sourceRef=\"theStart\" targetRef=\"theEnd\" />\n+      \n+        <endEvent id=\"theEnd\" />\n+      \n+    </process>\n+  \n+</definitions>"},{"sha":"c25c93cbea0b3df20b94657ee0e21919ec693594","filename":"core/src/main/resources/userWorkflow.xml","status":"removed","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.xml?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,86 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!DOCTYPE workflow PUBLIC \"-//OpenSymphony Group//DTD OSWorkflow 2.8//EN\" \"http://www.opensymphony.com/osworkflow/workflow_2_8.dtd\">\n-<!--\n-  Licensed under the Apache License, Version 2.0 (the \"License\");\n-  you may not use this file except in compliance with the License.\n-  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-  Unless required by applicable law or agreed to in writing, software\n-  distributed under the License is distributed on an \"AS IS\" BASIS,\n-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-  See the License for the specific language governing permissions and\n-  limitations under the License.\n--->\n-<workflow>\n-    <initial-actions>\n-        <action name=\"start\" id=\"0\">\n-            <results>\n-                <unconditional-result old-status=\"n/a\" status=\"creationRequest\" step=\"1\"/>\n-            </results>\n-        </action>\n-    </initial-actions>\n-    <steps>\n-        <step name=\"creationRequest\" id=\"1\">\n-            <actions>\n-                <action name=\"create\" id=\"1001\">\n-                    <results>\n-                        <unconditional-result old-status=\"creationRequest\" status=\"active\" step=\"3\"/>\n-                    </results>\n-                </action>\n-            </actions>\n-        </step>\n-        <step name=\"active\" id=\"3\">\n-            <actions>\n-                <action name=\"update\" id=\"3001\">\n-                    <results>\n-                        <unconditional-result old-status=\"active\" status=\"active\" step=\"3\"/>\n-                    </results>\n-                </action>\n-                <action name=\"generateToken\" id=\"3002\">\n-                    <pre-functions>\n-                        <function type=\"class\">\n-                            <arg name=\"class.name\">org.syncope.core.workflow.GenerateToken</arg>\n-                        </function>\n-                    </pre-functions>\n-                    <results>\n-                        <unconditional-result old-status=\"active\" status=\"active\" step=\"3\"/>\n-                    </results>\n-                </action>\n-                <action name=\"verifyToken\" id=\"3003\">\n-                    <results>\n-                        <result old-status=\"active\" status=\"active\" step=\"3\">\n-                            <conditions>\n-                                <condition type=\"class\">\n-                                    <arg name=\"class.name\">org.syncope.core.workflow.IsValidToken</arg>\n-                                </condition>\n-                            </conditions>\n-                        </result>\n-                        <unconditional-result old-status=\"active\" status=\"active\" step=\"3\"/>\n-                    </results>\n-                </action>\n-                <action name=\"suspend\" id=\"3004\">\n-                    <results>\n-                        <unconditional-result old-status=\"active\" status=\"suspended\" step=\"4\"/>\n-                    </results>\n-                </action>\n-                <action name=\"delete\" id=\"3005\">\n-                    <results>\n-                        <unconditional-result old-status=\"active\" status=\"deleted\" step=\"5\"/>\n-                    </results>\n-                </action>\n-            </actions>\n-        </step>\n-        <step name=\"suspended\" id=\"4\">\n-            <actions>\n-                <action name=\"reactivate\" id=\"4001\">\n-                    <results>\n-                        <unconditional-result old-status=\"suspended\" status=\"active\" step=\"3\"/>\n-                    </results>\n-                </action>\n-            </actions>\n-        </step>\n-        <step name=\"deleted\" id=\"5\"/>\n-    </steps>\n-</workflow>"},{"sha":"d29f9860b82e2f1d962055e926fab454d4e24c16","filename":"core/src/main/resources/workflowContext.xml","status":"modified","additions":25,"deletions":57,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -12,65 +12,33 @@\n   See the License for the specific language governing permissions and\n   limitations under the License.\n -->\n-<beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:context=\"http://www.springframework.org/schema/context\"\n+<beans xmlns=\"http://www.springframework.org/schema/beans\" \n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n-       http://www.springframework.org/schema/beans/spring-beans.xsd\n-       http://www.springframework.org/schema/context\n-       http://www.springframework.org/schema/context/spring-context.xsd\">\n-\n-    <context:component-scan base-package=\"jpasymphony.dao\"/>\n-\n-    <bean id=\"propertySetDelegate\"\n-          class=\"jpasymphony.workflow.spi.jpa.JPAPropertySetDelegate\"/>\n-    <bean id=\"workflowStore\"\n-          class=\"jpasymphony.workflow.spi.jpa.JPAWorkflowStore\"/>\n-\n-    <bean id=\"workflowFactory\"\n-          class=\"jpasymphony.workflow.spi.jpa.SpringWorkflowFactory\"\n-          init-method=\"init\">\n-        <property name=\"resource\">\n-            <value>workflows.xml</value>\n-        </property>\n-        <property name=\"reload\">\n-            <value>true</value>\n-        </property>\n-    </bean>\n-\n-    <bean id=\"osworkflowConfiguration\"\n-          class=\"com.opensymphony.workflow.config.SpringConfiguration\">\n-        <property name=\"store\">\n-            <ref local=\"workflowStore\"/>\n-        </property>\n-        <property name=\"factory\">\n-            <ref local=\"workflowFactory\"/>\n-        </property>\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+    \n+<!--    <bean id=\"processEngineConfiguration\" class=\"org.activiti.spring.SpringProcessEngineConfiguration\">\n+        <property name=\"dataSource\" ref=\"dataSource\" />\n+        <property name=\"transactionManager\" ref=\"transactionManager\" />\n+        <property name=\"databaseSchemaUpdate\" value=\"true\" />\n+        \n+        <property name=\"jpaEntityManagerFactory\" ref=\"entityManagerFactory\" />\n+        <property name=\"jpaHandleTransaction\" value=\"false\" />\n+        <property name=\"jpaCloseEntityManager\" value=\"false\" />\n+        \n+        <property name=\"jobExecutorActivate\" value=\"false\" />\n     </bean>\n-\n-    <bean id=\"workflowTypeResolver\"\n-          class=\"com.opensymphony.workflow.util.SpringTypeResolver\"/>\n-\n-    <bean id=\"userWorkflow\"\n-          class=\"com.opensymphony.workflow.basic.BasicWorkflow\">\n-        <constructor-arg>\n-            <value>userWorkflow</value>\n-        </constructor-arg>\n-        <property name=\"configuration\">\n-            <ref local=\"osworkflowConfiguration\"/>\n-        </property>\n-        <property name=\"resolver\">\n-            <ref local=\"workflowTypeResolver\"/>\n-        </property>\n-    </bean>\n-\n-    <bean id=\"velocityEngine\" class=\"org.springframework.ui.velocity.VelocityEngineFactoryBean\">\n-        <property name=\"velocityProperties\">\n-            <value>\n-          resource.loader=class\n-          class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader\n-            </value>\n-        </property>\n+  \n+    <bean id=\"processEngine\" class=\"org.activiti.spring.ProcessEngineFactoryBean\">\n+        <property name=\"processEngineConfiguration\" ref=\"processEngineConfiguration\" />\n     </bean>\n+  \n+    <bean id=\"repositoryService\" factory-bean=\"processEngine\" factory-method=\"getRepositoryService\" />\n+    <bean id=\"runtimeService\" factory-bean=\"processEngine\" factory-method=\"getRuntimeService\" />\n+    <bean id=\"taskService\" factory-bean=\"processEngine\" factory-method=\"getTaskService\" />\n+    <bean id=\"historyService\" factory-bean=\"processEngine\" factory-method=\"getHistoryService\" />\n+    <bean id=\"managementService\" factory-bean=\"processEngine\" factory-method=\"getManagementService\" />\n+    <bean id=\"identityService\" factory-bean=\"processEngine\" factory-method=\"getIdentityService\" />\n+    <bean id=\"formService\" factory-bean=\"processEngine\" factory-method=\"getFormService\" />-->\n \n </beans>\n\\ No newline at end of file"},{"sha":"5a9a65fecfa537d9c27ad4136d033439f9a9f68f","filename":"core/src/main/resources/workflows.xml","status":"removed","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fresources%2Fworkflows.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Fmain%2Fresources%2Fworkflows.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fworkflows.xml?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,17 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-  Licensed under the Apache License, Version 2.0 (the \"License\");\n-  you may not use this file except in compliance with the License.\n-  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-  Unless required by applicable law or agreed to in writing, software\n-  distributed under the License is distributed on an \"AS IS\" BASIS,\n-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-  See the License for the specific language governing permissions and\n-  limitations under the License.\n--->\n-<workflows>\n-    <workflow name=\"userWorkflow\" type=\"resource\" location=\"userWorkflow.xml\"/>\n-</workflows>"},{"sha":"b3c19d311ad44392d964b436407236216746034a","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"modified","additions":108,"deletions":114,"changes":222,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -9,7 +9,7 @@\n <%@page import=\"org.syncope.client.validation.SyncopeClientException\"%>\n <%@page import=\"org.syncope.client.validation.SyncopeClientCompositeErrorException\"%>\n <%@page import=\"org.syncope.core.persistence.propagation.PropagationException\"%>\n-<%@page import=\"com.opensymphony.workflow.WorkflowException\"%>\n+<%@page import=\"org.syncope.core.workflow.WorkflowException\"%>\n <%@page import=\"org.syncope.types.SyncopeClientExceptionType\"%>\n <%@page import=\"org.syncope.client.validation.SyncopeClientErrorHandler\"%>\n <%@page import=\"javassist.NotFoundException\"%>\n@@ -21,119 +21,113 @@\n             LoggerFactory.getLogger(AbstractController.class);%>\n \n <%\n-            Throwable ex = pageContext.getErrorData().getThrowable();\n-\n-            LOG.error(\"Exception thrown by REST methods\", ex);\n-\n-            int statusCode = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n-\n-            if (ex instanceof NotFoundException) {\n-                response.setHeader(\n-                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                        SyncopeClientExceptionType.NotFound.getHeaderValue());\n-                response.setHeader(\n-                        SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n-                        ex.getMessage());\n-\n-                statusCode = HttpServletResponse.SC_NOT_FOUND;\n-            } else if (ex instanceof WorkflowException) {\n-                response.setHeader(\n-                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                        SyncopeClientExceptionType.Workflow.getHeaderValue());\n-                response.setHeader(\n-                        SyncopeClientExceptionType.Workflow.getElementHeaderName(),\n-                        ex.getMessage());\n-\n-                statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-            } else if (ex instanceof PropagationException) {\n-                response.setHeader(\n-                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                        SyncopeClientExceptionType.Propagation.getHeaderValue());\n-                response.setHeader(\n-                        SyncopeClientExceptionType.Propagation.\n-                        getElementHeaderName(),\n-                        ((PropagationException) ex).getResourceName());\n-\n-                statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-            } else if (ex instanceof SyncopeClientCompositeErrorException) {\n-                for (SyncopeClientException sce :\n-                        ((SyncopeClientCompositeErrorException) ex).\n-                        getExceptions()) {\n-\n-                    response.addHeader(\n-                            SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                            sce.getType().getHeaderValue());\n-\n-                    for (String attributeName : sce.getElements()) {\n-                        response.addHeader(\n-                                sce.getType().getElementHeaderName(),\n-                                attributeName);\n-                    }\n-                }\n-\n-                statusCode = ((SyncopeClientCompositeErrorException) ex).\n-                        getStatusCode().value();\n-            } else if (ex instanceof MissingConfKeyException) {\n-                response.setHeader(\n-                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                        SyncopeClientExceptionType.NotFound.getHeaderValue());\n-                response.setHeader(\n-                        SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n-                        ((MissingConfKeyException) ex).getConfKey());\n-\n-                statusCode = HttpServletResponse.SC_NOT_FOUND;\n-            } else if (ex instanceof InvalidSearchConditionException) {\n-                response.setHeader(\n-                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                        SyncopeClientExceptionType.InvalidSearchCondition.\n-                        getHeaderValue());\n-\n-                statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-            } else if (ex instanceof UnauthorizedRoleException) {\n-                response.setHeader(\n-                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                        SyncopeClientExceptionType.UnauthorizedRole.\n-                        getHeaderValue());\n-                for (Long roleId : ((UnauthorizedRoleException) ex).getRoleIds()) {\n-                    response.setHeader(\n-                            SyncopeClientExceptionType.UnauthorizedRole.\n-                            getElementHeaderName(), roleId.toString());\n-                }\n-\n-                statusCode = HttpServletResponse.SC_UNAUTHORIZED;\n-            } else if (ex.getCause() instanceof LockAcquisitionException) {\n-                response.setHeader(\n-                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                        SyncopeClientExceptionType.Deadlock.getHeaderValue());\n-\n-                statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-            } else if (ex instanceof DataIntegrityViolationException) {\n-                response.setHeader(\n-                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                        SyncopeClientExceptionType.DuplicateUniqueValue.\n-                        getHeaderValue());\n-\n-                statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-            } else if (ex instanceof PersistenceException) {\n-                if (ex.getCause() instanceof ConstraintViolationException) {\n-                    response.setHeader(\n-                            SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                            SyncopeClientExceptionType.DuplicateUniqueValue.\n-                            getHeaderValue());\n-                } else {\n-                    response.setHeader(\n-                            SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                            SyncopeClientExceptionType.GenericPersistence.\n-                            getHeaderValue());\n-                    response.setHeader(\n-                            SyncopeClientExceptionType.GenericPersistence.\n-                            getElementHeaderName(),\n-                            ex.getCause().getClass().getName());\n-                }\n-\n-                statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+    Throwable ex = pageContext.getErrorData().getThrowable();\n+\n+    LOG.error(\"Exception thrown by REST methods\", ex);\n+\n+    int statusCode = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+    if (ex instanceof NotFoundException) {\n+        response.setHeader(\n+                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                SyncopeClientExceptionType.NotFound.getHeaderValue());\n+        response.setHeader(\n+                SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n+                ex.getMessage());\n+\n+        statusCode = HttpServletResponse.SC_NOT_FOUND;\n+    } else if (ex instanceof WorkflowException) {\n+        response.setHeader(\n+                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                SyncopeClientExceptionType.Workflow.getHeaderValue());\n+        response.setHeader(\n+                SyncopeClientExceptionType.Workflow.getElementHeaderName(),\n+                ex.getCause().getMessage());\n+\n+        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+    } else if (ex instanceof PropagationException) {\n+        response.setHeader(\n+                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                SyncopeClientExceptionType.Propagation.getHeaderValue());\n+        response.setHeader(\n+                SyncopeClientExceptionType.Propagation.getElementHeaderName(),\n+                ((PropagationException) ex).getResourceName());\n+\n+        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+    } else if (ex instanceof SyncopeClientCompositeErrorException) {\n+        for (SyncopeClientException sce :\n+                ((SyncopeClientCompositeErrorException) ex).getExceptions()) {\n+\n+            response.addHeader(\n+                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                    sce.getType().getHeaderValue());\n+\n+            for (String attributeName : sce.getElements()) {\n+                response.addHeader(\n+                        sce.getType().getElementHeaderName(),\n+                        attributeName);\n             }\n-\n-            response.setStatus(statusCode);\n+        }\n+\n+        statusCode = ((SyncopeClientCompositeErrorException) ex).getStatusCode().\n+                value();\n+    } else if (ex instanceof MissingConfKeyException) {\n+        response.setHeader(\n+                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                SyncopeClientExceptionType.NotFound.getHeaderValue());\n+        response.setHeader(\n+                SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n+                ((MissingConfKeyException) ex).getConfKey());\n+\n+        statusCode = HttpServletResponse.SC_NOT_FOUND;\n+    } else if (ex instanceof InvalidSearchConditionException) {\n+        response.setHeader(\n+                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                SyncopeClientExceptionType.InvalidSearchCondition.getHeaderValue());\n+\n+        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+    } else if (ex instanceof UnauthorizedRoleException) {\n+        response.setHeader(\n+                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                SyncopeClientExceptionType.UnauthorizedRole.getHeaderValue());\n+        for (Long roleId : ((UnauthorizedRoleException) ex).getRoleIds()) {\n+            response.setHeader(\n+                    SyncopeClientExceptionType.UnauthorizedRole.\n+                    getElementHeaderName(), roleId.toString());\n+        }\n+\n+        statusCode = HttpServletResponse.SC_UNAUTHORIZED;\n+    } else if (ex.getCause() instanceof LockAcquisitionException) {\n+        response.setHeader(\n+                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                SyncopeClientExceptionType.Deadlock.getHeaderValue());\n+\n+        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+    } else if (ex instanceof DataIntegrityViolationException) {\n+        response.setHeader(\n+                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                SyncopeClientExceptionType.DuplicateUniqueValue.getHeaderValue());\n+\n+        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+    } else if (ex instanceof PersistenceException) {\n+        if (ex.getCause() instanceof ConstraintViolationException) {\n+            response.setHeader(\n+                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                    SyncopeClientExceptionType.DuplicateUniqueValue.\n+                    getHeaderValue());\n+        } else {\n+            response.setHeader(\n+                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                    SyncopeClientExceptionType.GenericPersistence.getHeaderValue());\n+            response.setHeader(\n+                    SyncopeClientExceptionType.GenericPersistence.\n+                    getElementHeaderName(),\n+                    ex.getCause().getClass().getName());\n+        }\n+\n+        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+    }\n+\n+    response.setStatus(statusCode);\n %>\n null\n\\ No newline at end of file"},{"sha":"2b5d92b64be7c001993c3dce87630910fb9a95a9","filename":"core/src/test/java/jpasymphony/dao/JPAWorkflowEntryTest.java","status":"removed","additions":0,"deletions":55,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryTest.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,55 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package jpasymphony.dao;\n-\n-import static org.junit.Assert.*;\n-\n-import com.opensymphony.workflow.spi.WorkflowEntry;\n-import jpasymphony.beans.JPAWorkflowEntry;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Transactional\n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\n-    \"classpath:syncopeContext.xml\",\n-    \"classpath:persistenceContext.xml\",\n-    \"classpath:schedulingContext.xml\",\n-    \"classpath:workflowContext.xml\"\n-})\n-public class JPAWorkflowEntryTest {\n-\n-    @Autowired\n-    private JPAWorkflowEntryDAO jpaWorkflowEntryDAO;\n-\n-    @Test\n-    public final void create() {\n-        JPAWorkflowEntry entry = new JPAWorkflowEntry();\n-        entry.setWorkflowName(\"userWorkflow\");\n-        entry.setWorkflowState(WorkflowEntry.CREATED);\n-\n-        entry = jpaWorkflowEntryDAO.save(entry);\n-        assertNotNull(entry);\n-\n-        JPAWorkflowEntry actual = jpaWorkflowEntryDAO.find(entry.getId());\n-        assertNotNull(actual);\n-\n-        assertEquals(entry, actual);\n-    }\n-}"},{"sha":"a23bc3c97ebf12615eed18c75f1f99f6c8ef8e86","filename":"core/src/test/java/jpasymphony/relationships/JPAWorkflowEntryTest.java","status":"removed","additions":0,"deletions":75,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Frelationships%2FJPAWorkflowEntryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Frelationships%2FJPAWorkflowEntryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Frelationships%2FJPAWorkflowEntryTest.java?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,75 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package jpasymphony.relationships;\n-\n-import com.opensymphony.workflow.spi.WorkflowEntry;\n-import com.opensymphony.workflow.spi.WorkflowStore;\n-import static org.junit.Assert.*;\n-\n-import com.opensymphony.workflow.StoreException;\n-import com.opensymphony.workflow.config.SpringConfiguration;\n-import com.opensymphony.workflow.spi.Step;\n-import java.util.Date;\n-import jpasymphony.beans.JPACurrentStep;\n-import jpasymphony.dao.JPAWorkflowEntryDAO;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Transactional\n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\n-    \"classpath:syncopeContext.xml\",\n-    \"classpath:persistenceContext.xml\",\n-    \"classpath:schedulingContext.xml\",\n-    \"classpath:workflowContext.xml\"\n-})\n-public class JPAWorkflowEntryTest {\n-\n-    @Autowired\n-    private SpringConfiguration springConfiguration;\n-\n-    @Autowired\n-    private JPAWorkflowEntryDAO workflowEntryDAO;\n-\n-    @Test\n-    public final void delete()\n-            throws StoreException {\n-\n-        WorkflowStore workflowStore = springConfiguration.getWorkflowStore();\n-        WorkflowEntry entry = workflowStore.createEntry(\"userWorkflow\");\n-        assertNotNull(entry);\n-        Long entryId = entry.getId();\n-\n-        Step step = workflowStore.createCurrentStep(entry.getId(), 11,\n-                \"owner\", new Date(), new Date(), \"status\", new long[0]);\n-        assertNotNull(step);\n-\n-        ((JPACurrentStep) step).setActionId(999);\n-        workflowStore.moveToHistory(step);\n-\n-        step = workflowStore.createCurrentStep(entry.getId(), 12,\n-                \"owner\", new Date(), new Date(), \"status\", new long[0]);\n-\n-        workflowEntryDAO.delete(entryId);\n-\n-        workflowEntryDAO.flush();\n-\n-        assertNull(workflowEntryDAO.find(entryId));\n-    }\n-}"},{"sha":"d5b51036dd5c447668cb1772211c62312ca4e047","filename":"core/src/test/java/org/syncope/core/AbstractTest.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2FAbstractTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence;\n+package org.syncope.core;\n \n import static org.junit.Assert.*;\n ","previous_filename":"core/src/test/java/org/syncope/core/persistence/AbstractTest.java"},{"sha":"8e374016133863ee676fbf4a5f86d2c0faa2a110","filename":"core/src/test/java/org/syncope/core/init/ConnInstanceLoaderTest.java","status":"modified","additions":26,"deletions":19,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -15,48 +15,55 @@\n package org.syncope.core.init;\n \n import static org.junit.Assert.assertEquals;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.Collections;\n \n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n-import org.springframework.context.support.StaticApplicationContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.test.util.ReflectionTestUtils;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.beans.TargetResource;\n-import org.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.propagation.ConnectorFacadeProxy;\n import org.syncope.core.util.ApplicationContextManager;\n+import org.syncope.core.util.ConnBundleManager;\n \n-public class ConnInstanceLoaderTest {\n+@Transactional\n+public class ConnInstanceLoaderTest extends AbstractTest {\n \n     private ConnInstanceLoader cil;\n \n-    private ConnInstanceDAO connInstanceDAOMock;\n+    @Autowired\n+    private ResourceDAO resourceDAO;\n \n-    private ResourceDAO resourceDAOMock;\n+    @Autowired\n+    private ConnBundleManager connBundleManager;\n \n     @Before\n     public void before() {\n-        ApplicationContextManager.setApplicationContext(new StaticApplicationContext());\n         cil = new ConnInstanceLoader();\n-        connInstanceDAOMock = mock(ConnInstanceDAO.class);\n-        resourceDAOMock = mock(ResourceDAO.class);\n-        ReflectionTestUtils.setField(cil, \"connInstanceDAO\",\n-                connInstanceDAOMock);\n-        ReflectionTestUtils.setField(cil, \"resourceDAO\", resourceDAOMock);\n+        ReflectionTestUtils.setField(cil,\n+                \"resourceDAO\", resourceDAO);\n+        ReflectionTestUtils.setField(cil,\n+                \"connBundleManager\", connBundleManager);\n+\n+        // Remove any other connector instance bean set up by\n+        // standard ConnInstanceLoader.load()\n+        for (String bean : ApplicationContextManager.getApplicationContext().\n+                getBeanNamesForType(ConnectorFacadeProxy.class)) {\n+\n+            cil.unregisterConnector(bean);\n+        }\n     }\n \n     @Test\n-    public void loadEmpty() {\n-        when(resourceDAOMock.findAll()).thenReturn(\n-                Collections.<TargetResource>emptyList());\n+    public void load() {\n         cil.load();\n-        assertEquals(0, ApplicationContextManager.getApplicationContext().\n+\n+        assertEquals(resourceDAO.findAll().size(),\n+                ApplicationContextManager.getApplicationContext().\n                 getBeanNamesForType(ConnectorFacadeProxy.class).length);\n     }\n "},{"sha":"fad4cb112059f015aab3f108f465499ff2e0dd61","filename":"core/src/test/java/org/syncope/core/persistence/dao/AttrTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -14,17 +14,17 @@\n  */\n package org.syncope.core.persistence.dao;\n \n-import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import static org.junit.Assert.*;\n \n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import java.util.List;\n import javax.validation.ValidationException;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.UAttr;\n import org.syncope.core.persistence.beans.user.USchema;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrUniqueValue;\n import org.syncope.core.util.AttributableUtil;\n@@ -150,8 +150,8 @@ public final void checkForEnumType()\n         UAttr actual = attrDAO.find(attribute.getId(), UAttr.class);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(attribute, actual);\n-        assertEquals(actual.getSchema(),gender);\n-        assertEquals(actual.getValues().size(),1);\n+        assertEquals(actual.getSchema(), gender);\n+        assertEquals(actual.getValues().size(), 1);\n     }\n \n     @Test"},{"sha":"cfea4866594bad55ba6b93009dd0092b5f0b87a5","filename":"core/src/test/java/org/syncope/core/persistence/dao/ConnInstanceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -24,7 +24,7 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.types.ConnConfProperty;\n import org.syncope.core.persistence.beans.ConnInstance;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.types.ConnConfPropSchema;\n \n @Transactional"},{"sha":"55060c6d92f5299a39bca73a2d4ef89318dae5ce","filename":"core/src/test/java/org/syncope/core/persistence/dao/DerAttrTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -24,7 +24,7 @@\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.beans.user.UDerAttr;\n import org.syncope.core.persistence.beans.user.UDerSchema;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.membership.MAttrValue;\n import org.syncope.core.persistence.beans.membership.MDerAttr;\n import org.syncope.core.persistence.beans.membership.MDerSchema;"},{"sha":"aa1da5aa6017ddd2daa1d5eada888026eb91ad27","filename":"core/src/test/java/org/syncope/core/persistence/dao/DerSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -21,7 +21,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.UDerSchema;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.util.AttributableUtil;\n \n @Transactional"},{"sha":"3086cb2e192850e0a33ad30157d6e65786568bf9","filename":"core/src/test/java/org/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -23,7 +23,7 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n \n @Transactional\n public class EntitlementTest extends AbstractTest {"},{"sha":"771029bc805ed7d3d8525485086eda52cca96cc3","filename":"core/src/test/java/org/syncope/core/persistence/dao/MembershipTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -23,7 +23,7 @@\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n \n @Transactional\n public class MembershipTest extends AbstractTest {"},{"sha":"3245095101c8a2ca51636814d2c18c4be58403b7","filename":"core/src/test/java/org/syncope/core/persistence/dao/PolicyTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -20,7 +20,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.test.annotation.ExpectedException;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.types.PolicyType;"},{"sha":"4d3b19ca4159b7a273c21a17f658d298e43855ab","filename":"core/src/test/java/org/syncope/core/persistence/dao/ResourceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -25,7 +25,7 @@\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.types.SourceMappingType;\n "},{"sha":"030b2018b0283101020a3dbabdc075b611430376","filename":"core/src/test/java/org/syncope/core/persistence/dao/RoleTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -21,7 +21,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n \n @Transactional\n public class RoleTest extends AbstractTest {"},{"sha":"c74edd5295c7662ef24cdbb3c9576367baa93cee","filename":"core/src/test/java/org/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -23,7 +23,7 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.role.RSchema;\n import org.syncope.core.persistence.beans.user.USchema;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.role.RAttr;\n import org.syncope.core.util.AttributableUtil;"},{"sha":"f171638cddd962ad8ee7867468d7cf0936f571bb","filename":"core/src/test/java/org/syncope/core/persistence/dao/TaskExecTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -20,7 +20,7 @@\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.TaskExec;\n "},{"sha":"fde09d59fabf46ddda11ae5a08eb7d0a0596b63f","filename":"core/src/test/java/org/syncope/core/persistence/dao/TaskTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -24,14 +24,14 @@\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.SchedTask;\n import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.types.PropagationMode;\n-import org.syncope.types.ResourceOperationType;\n+import org.syncope.types.PropagationOperation;\n \n @Transactional\n public class TaskTest extends AbstractTest {\n@@ -62,7 +62,7 @@ public final void savePropagationTask() {\n         PropagationTask task = new PropagationTask();\n         task.setResource(resource);\n         task.setPropagationMode(PropagationMode.ASYNC);\n-        task.setResourceOperationType(ResourceOperationType.CREATE);\n+        task.setResourceOperationType(PropagationOperation.CREATE);\n         task.setAccountId(\"one@two.com\");\n \n         Set<Attribute> attributes = new HashSet<Attribute>();"},{"sha":"53e8fbb0790c2ef4b89646fb545777e8b4b1a550","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -23,7 +23,7 @@\n import org.springframework.test.annotation.ExpectedException;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.core.rest.controller.InvalidSearchConditionException;"},{"sha":"f96f5a239c202539cb00ebcf18232a3b3cf2c70f","filename":"core/src/test/java/org/syncope/core/persistence/dao/VirAttrTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -21,7 +21,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.membership.MVirAttr;\n import org.syncope.core.persistence.beans.membership.MVirSchema;\n import org.syncope.core.persistence.beans.membership.Membership;"},{"sha":"572a270f56dd0f008ca931bc03fce98b610d336e","filename":"core/src/test/java/org/syncope/core/persistence/dao/VirSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -20,7 +20,7 @@\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.user.UVirSchema;\n import org.syncope.core.util.AttributableUtil;\n "},{"sha":"fd939959a02e152dc80a210b5a555df4ac2daba6","filename":"core/src/test/java/org/syncope/core/persistence/relationships/AttrTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -23,7 +23,7 @@\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.dao.AttrDAO;\n import org.syncope.core.persistence.dao.AttrValueDAO;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.membership.MAttr;\n import org.syncope.core.persistence.beans.membership.MSchema;"},{"sha":"499218af2c8ab22173c7c1fb3f67cfa9525fc609","filename":"core/src/test/java/org/syncope/core/persistence/relationships/DerSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -24,7 +24,7 @@\n import org.syncope.core.persistence.dao.DerAttrDAO;\n import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.util.AttributableUtil;\n \n @Transactional"},{"sha":"d5f4f7cace2e005220b7be3b47a24416f0519334","filename":"core/src/test/java/org/syncope/core/persistence/relationships/MembershipTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -23,7 +23,7 @@\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.MembershipDAO;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.dao.RoleDAO;\n \n @Transactional"},{"sha":"21b7f39f6e59217c4b8320e6e629dde0e11e4b25","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -36,7 +36,7 @@\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.rest.data.ResourceDataBinder;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.user.UDerSchema;"},{"sha":"9c1b1837ff28654b5604a8c0f2470d2897146179","filename":"core/src/test/java/org/syncope/core/persistence/relationships/RoleTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -28,7 +28,7 @@\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.RoleDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.PolicyDAO;"},{"sha":"9427675bb9deb93b38df9a345ca31133589c73ae","filename":"core/src/test/java/org/syncope/core/persistence/relationships/SchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -29,7 +29,7 @@\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.util.AttributableUtil;\n import org.syncope.types.SourceMappingType;\n "},{"sha":"fa64e9d787475b9156f3375f10a68eba7de72bb5","filename":"core/src/test/java/org/syncope/core/persistence/relationships/TaskTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -24,7 +24,7 @@\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.TaskExec;\n@@ -34,7 +34,7 @@\n import org.syncope.core.persistence.dao.TaskExecDAO;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.PropagationTaskExecStatus;\n-import org.syncope.types.ResourceOperationType;\n+import org.syncope.types.PropagationOperation;\n \n @Transactional\n public class TaskTest extends AbstractTest {\n@@ -66,7 +66,7 @@ public final void save() {\n         PropagationTask task = new PropagationTask();\n         task.setResource(resource);\n         task.setPropagationMode(PropagationMode.ASYNC);\n-        task.setResourceOperationType(ResourceOperationType.CREATE);\n+        task.setResourceOperationType(PropagationOperation.CREATE);\n         task.setAccountId(\"one@two.com\");\n \n         Set<Attribute> attributes = new HashSet<Attribute>();"},{"sha":"54cc30868ac9283dfc7f754ee70b491391da7ddc","filename":"core/src/test/java/org/syncope/core/persistence/relationships/UserTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -28,7 +28,7 @@\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.RoleDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n-import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.membership.Membership;\n \n @Transactional"},{"sha":"621704e27fa69212337b12c6c754ff1f605b3e82","filename":"core/src/test/java/org/syncope/core/rest/AbstractTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -32,7 +32,7 @@\n     \"classpath:persistenceContext.xml\",\n     \"classpath:workflowContext.xml\",\n     \"classpath:schedulingContext.xml\",\n-    \"classpath:restContext.xml\"\n+    \"classpath:restClientContext.xml\"\n })\n public abstract class AbstractTest {\n "},{"sha":"9e87aa2aae13d0136b4572e4bd9567e0e7304827","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":1,"deletions":73,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -38,11 +38,9 @@\n import org.syncope.client.search.ResourceCond;\n import org.syncope.client.to.PropagationTaskTO;\n import org.syncope.client.to.UserTO;\n-import org.syncope.client.to.WorkflowActionsTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.workflow.Constants;\n import org.syncope.types.CipherAlgorithm;\n import org.syncope.types.SyncopeClientExceptionType;\n \n@@ -290,20 +288,7 @@ public final void create() {\n         assertFalse(newUserTO.getAttributes().contains(\n                 attrWithInvalidSchemaTO));\n \n-        WorkflowActionsTO workflowActions = restTemplate.getForObject(\n-                BASE_URL + \"user/actions/{userId}\", WorkflowActionsTO.class,\n-                newUserTO.getId());\n-        assertTrue(workflowActions.getActions().equals(\n-                Collections.singleton(Constants.ACTION_ACTIVATE)));\n-\n-        // 2. activate user\n-        newUserTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                newUserTO, UserTO.class);\n-        assertEquals(\"active\",\n-                restTemplate.getForObject(BASE_URL + \"user/status/\"\n-                + newUserTO.getId(), String.class));\n-\n-        // 3. check for virtual attribute value\n+        // 2. check for virtual attribute value\n         newUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class,\n@@ -447,8 +432,6 @@ public final void delete() {\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n                 userTO, UserTO.class);\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                userTO, UserTO.class);\n \n         restTemplate.delete(BASE_URL + \"user/delete/{userId}\", userTO.getId());\n         try {\n@@ -531,26 +514,6 @@ public final void read() {\n         assertFalse(userTO.getAttributes().isEmpty());\n     }\n \n-    @Test\n-    public final void token() {\n-        UserTO userTO = getSampleTO(\"d.e@f.com\");\n-\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                userTO, UserTO.class);\n-        assertNull(userTO.getToken());\n-\n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/generateToken/{userId}\",\n-                UserTO.class, userTO.getId());\n-        assertNotNull(userTO.getToken());\n-\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/verifyToken\",\n-                userTO, UserTO.class);\n-        assertNull(userTO.getToken());\n-    }\n-\n     @Test\n     public final void search() {\n         // LIKE\n@@ -684,11 +647,6 @@ public final void updateWithouPassword() {\n \n         assertNotNull(userTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                userTO, UserTO.class);\n-\n-        assertNotNull(userTO);\n-\n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.addDerivedAttributeToBeRemoved(\"cn\");\n@@ -708,12 +666,6 @@ public final void updateInvalidPassword() {\n \n         userTO = restTemplate.postForObject(\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n-\n-        assertNotNull(userTO);\n-\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                userTO, UserTO.class);\n-\n         assertNotNull(userTO);\n \n         UserMod userMod = new UserMod();\n@@ -731,12 +683,6 @@ public final void updateSamePassword() {\n \n         userTO = restTemplate.postForObject(\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n-\n-        assertNotNull(userTO);\n-\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                userTO, UserTO.class);\n-\n         assertNotNull(userTO);\n \n         UserMod userMod = new UserMod();\n@@ -761,8 +707,6 @@ public final void update() {\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n                 userTO, UserTO.class);\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                userTO, UserTO.class);\n \n         assertFalse(userTO.getDerivedAttributes().isEmpty());\n         assertEquals(1, userTO.getMemberships().size());\n@@ -846,8 +790,6 @@ public void updatePasswordOnly() {\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n                 userTO, UserTO.class);\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                userTO, UserTO.class);\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n@@ -902,22 +844,8 @@ public final void verifyTaskRegistration() {\n         userTO = restTemplate.postForObject(\n                 BASE_URL + \"user/create?mandatoryRoles=8\",\n                 userTO, UserTO.class);\n-\n         assertNotNull(userTO);\n \n-        WorkflowActionsTO workflowActions = restTemplate.getForObject(\n-                BASE_URL + \"user/actions/{userId}\", WorkflowActionsTO.class,\n-                userTO.getId());\n-        assertTrue(workflowActions.getActions().equals(\n-                Collections.singleton(Constants.ACTION_ACTIVATE)));\n-\n-        // 2. activate user\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                userTO, UserTO.class);\n-        assertEquals(\"active\",\n-                restTemplate.getForObject(BASE_URL + \"user/status/\"\n-                + userTO.getId(), String.class));\n-\n         // get the new task list\n         tasks = Arrays.asList(\n                 restTemplate.getForObject("},{"sha":"7e38347c4019905522b4cb5b0c2dac3b00a722f1","filename":"core/src/test/resources/content.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -22,10 +22,10 @@\n     <SyncopeConf confKey=\"connid.bundles.directory\" confValue=\"${bundles.directory}\"/>\n     <SyncopeConf confKey=\"password.cipher.algorithm\" confValue=\"MD5\"/>\n                           \n-    <SyncopeUser id=\"1\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n-    <SyncopeUser id=\"2\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n-    <SyncopeUser id=\"3\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n-    <SyncopeUser id=\"4\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n+    <SyncopeUser id=\"1\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n+    <SyncopeUser id=\"2\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n+    <SyncopeUser id=\"3\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n+    <SyncopeUser id=\"4\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n \n     <SyncopeRole id=\"1\" name=\"root\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"0\"/>\n     <SyncopeRole id=\"2\" name=\"child\" parent_id=\"1\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"0\"/>"},{"sha":"9485541e8ada1241fcae9fd6932a0ad98dad4181","filename":"core/src/test/resources/restClientContext.xml","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+\n+    <bean id=\"httpClientParams\" class=\"org.apache.commons.httpclient.params.HttpClientParams\">\n+        <property name=\"authenticationPreemptive\" value=\"true\"/>\n+        <property name=\"connectionManagerClass\"\n+                  value=\"org.apache.commons.httpclient.MultiThreadedHttpConnectionManager\"/>\n+    </bean>\n+    <bean id=\"httpClient\" class=\"org.apache.commons.httpclient.HttpClient\">\n+        <constructor-arg ref=\"httpClientParams\"/>\n+    </bean>\n+    <bean id=\"httpClientFactory\" class=\"org.springframework.http.client.CommonsClientHttpRequestFactory\">\n+        <constructor-arg ref=\"httpClient\"/>\n+    </bean>\n+    <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n+        <constructor-arg ref=\"httpClientFactory\"/>\n+\n+        <property name=\"errorHandler\">\n+            <bean id=\"syncopeClientErrorHandler\"\n+            class=\"org.syncope.client.validation.SyncopeClientErrorHandler\"/>\n+        </property>\n+    </bean>\n+\n+</beans>\n\\ No newline at end of file"},{"sha":"4caf790b6d7a567e20e47e6551945f10acb84a23","filename":"core/src/test/resources/userWorkflow.bpmn20.xml","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fresources%2FuserWorkflow.bpmn20.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/core%2Fsrc%2Ftest%2Fresources%2FuserWorkflow.bpmn20.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FuserWorkflow.bpmn20.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<definitions id=\"definitions\"\n+             targetNamespace=\"http://activiti.org/bpmn20\" \n+             xmlns:activiti=\"http://activiti.org/bpmn\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" \n+             xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" \n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL \n+                                 http://www.omg.org/spec/BPMN/2.0/20100501/BPMN20.xsd\">\n+  \n+    <process id=\"userWorkflow\" name=\"User Workflow\">\n+  \n+        <startEvent id=\"theStart\" />\n+    \n+        <sequenceFlow id=\"flow1\" sourceRef=\"theStart\" targetRef=\"theEnd\" />\n+      \n+        <endEvent id=\"theEnd\" />\n+      \n+    </process>\n+  \n+</definitions>"},{"sha":"d12871eade44805fe7d2fa3c9a76bac792dd20a8","filename":"core/src/test/resources/userWorkflow.xml","status":"removed","additions":0,"deletions":102,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Ftest%2Fresources%2FuserWorkflow.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4173361d916113a35834ae2a17b9f264e429bf7/core%2Fsrc%2Ftest%2Fresources%2FuserWorkflow.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FuserWorkflow.xml?ref=c4173361d916113a35834ae2a17b9f264e429bf7","patch":"@@ -1,102 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!DOCTYPE workflow PUBLIC \"-//OpenSymphony Group//DTD OSWorkflow 2.8//EN\" \"http://www.opensymphony.com/osworkflow/workflow_2_8.dtd\">\n-<!--\n-  Licensed under the Apache License, Version 2.0 (the \"License\");\n-  you may not use this file except in compliance with the License.\n-  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-  Unless required by applicable law or agreed to in writing, software\n-  distributed under the License is distributed on an \"AS IS\" BASIS,\n-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-  See the License for the specific language governing permissions and\n-  limitations under the License.\n--->\n-<workflow>\n-    <initial-actions>\n-        <action name=\"start\" id=\"0\">\n-            <results>\n-                <unconditional-result old-status=\"n/a\" status=\"creationRequest\" step=\"1\"/>\n-            </results>\n-        </action>\n-    </initial-actions>\n-    <steps>\n-        <step name=\"creationRequest\" id=\"1\">\n-            <actions>\n-                <action name=\"create\" id=\"1001\">\n-                    <results>\n-                        <unconditional-result old-status=\"creationRequest\" status=\"doubleOptIn\" step=\"2\">\n-                            <post-functions>\n-                                <function type=\"class\">\n-                                    <arg name=\"class.name\">org.syncope.core.workflow.SendVelocityEmail</arg>\n-                                    <arg name=\"kind\">optin</arg>\n-                                </function>\n-                            </post-functions>\n-                        </unconditional-result>\n-                    </results>\n-                </action>\n-            </actions>\n-        </step>\n-        <step name=\"doubleOptIn\" id=\"2\">\n-            <actions>\n-                <action name=\"activate\" id=\"2001\">\n-                    <results>\n-                        <unconditional-result old-status=\"doubleOptIn\" status=\"active\" step=\"3\"/>\n-                    </results>\n-                </action>\n-            </actions>\n-        </step>\n-        <step name=\"active\" id=\"3\">\n-            <actions>\n-                <action name=\"update\" id=\"3001\">\n-                    <results>\n-                        <unconditional-result old-status=\"active\" status=\"active\" step=\"3\"/>\n-                    </results>\n-                </action>\n-                <action name=\"generateToken\" id=\"3002\">\n-                    <pre-functions>\n-                        <function type=\"class\">\n-                            <arg name=\"class.name\">org.syncope.core.workflow.GenerateToken</arg>\n-                        </function>\n-                    </pre-functions>\n-                    <results>\n-                        <unconditional-result old-status=\"active\" status=\"active\" step=\"3\"/>\n-                    </results>\n-                </action>\n-                <action name=\"verifyToken\" id=\"3003\">\n-                    <results>\n-                        <result old-status=\"active\" status=\"active\" step=\"3\">\n-                            <conditions>\n-                                <condition type=\"class\">\n-                                    <arg name=\"class.name\">org.syncope.core.workflow.IsValidToken</arg>\n-                                </condition>\n-                            </conditions>\n-                        </result>\n-                        <unconditional-result old-status=\"active\" status=\"active\" step=\"3\"/>\n-                    </results>\n-                </action>\n-                <action name=\"suspend\" id=\"3004\">\n-                    <results>\n-                        <unconditional-result old-status=\"active\" status=\"suspended\" step=\"4\"/>\n-                    </results>\n-                </action>\n-                <action name=\"delete\" id=\"3005\">\n-                    <results>\n-                        <unconditional-result old-status=\"active\" status=\"deleted\" step=\"5\"/>\n-                    </results>\n-                </action>\n-            </actions>\n-        </step>\n-        <step name=\"suspended\" id=\"4\">\n-            <actions>\n-                <action name=\"reactivate\" id=\"4001\">\n-                    <results>\n-                        <unconditional-result old-status=\"suspended\" status=\"active\" step=\"3\"/>\n-                    </results>\n-                </action>\n-            </actions>\n-        </step>\n-        <step name=\"deleted\" id=\"5\"/>\n-    </steps>\n-</workflow>"},{"sha":"d526e08db6331469a23c54f2f0d8bf9a66016603","filename":"pom.xml","status":"modified","additions":16,"deletions":66,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85d3ba58670e9b4a137faeba9f9cab005c65ea04/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85d3ba58670e9b4a137faeba9f9cab005c65ea04/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=85d3ba58670e9b4a137faeba9f9cab005c65ea04","patch":"@@ -87,27 +87,20 @@\n         <javamail-specs.version>1.6</javamail-specs.version>\n         <javamail-provider.version>1.8.2</javamail-provider.version>\n \n-        <osworkflow.version>2.8.0</osworkflow.version>\n-        <propertyset.version>1.3</propertyset.version>\n-        <oscore.version>2.2.6</oscore.version>\n-        <bsh.version>2.0b4</bsh.version>\n+        <activiti.version>5.7</activiti.version>\n \n         <spring.version>3.0.6.RELEASE</spring.version>\n-        <cglib.version>2.2.2</cglib.version>\n         <jackson.version>1.8.5</jackson.version>\n         <xstream.version>1.4.1</xstream.version>\n-        <aspectj.version>1.6.11</aspectj.version>\n         <velocity.version>1.7</velocity.version>\n         <quartz.version>1.8.5</quartz.version>\n \n         <hibernate.version>3.6.7.Final</hibernate.version>\n         <hibernate-validator.version>4.2.0.Final</hibernate-validator.version>\n-        <ehcache.version>2.4.4</ehcache.version>\n+        <ehcache.version>2.4.5</ehcache.version>\n \n         <wicket.version>1.4.18</wicket.version>\n \n-        <cxf.version>2.4.2</cxf.version>\n-\n         <hsqldb.version>2.2.4</hsqldb.version>\n \n         <reflections.version>0.9.5-RC2</reflections.version>\n@@ -119,7 +112,7 @@\n         <selenium-java-client-driver.version>1.0.2</selenium-java-client-driver.version>\n         <dbunit.version>2.4.8</dbunit.version>\n \n-        <tomcat.version>7.0.21</tomcat.version>\n+        <tomcat.version>7.0.22</tomcat.version>\n \n         <bundles.directory>${project.build.directory}/bundles</bundles.directory>\n         <log.directory>${project.build.directory}/log</log.directory>\n@@ -203,24 +196,14 @@\n             </dependency>\n \n             <dependency>\n-                <groupId>opensymphony</groupId>\n-                <artifactId>osworkflow</artifactId>\n-                <version>${osworkflow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>opensymphony</groupId>\n-                <artifactId>propertyset</artifactId>\n-                <version>${propertyset.version}</version>\n+                <groupId>org.activiti</groupId>\n+                <artifactId>activiti-engine</artifactId>\n+                <version>${activiti.version}</version>\n             </dependency>\n             <dependency>\n-                <groupId>opensymphony</groupId>\n-                <artifactId>oscore</artifactId>\n-                <version>${oscore.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.beanshell</groupId>\n-                <artifactId>bsh</artifactId>\n-                <version>${bsh.version}</version>\n+                <groupId>org.activiti</groupId>\n+                <artifactId>activiti-spring</artifactId>            \n+                <version>${activiti.version}</version>\n             </dependency>\n \n             <dependency>\n@@ -257,6 +240,11 @@\n                 <artifactId>spring-core</artifactId>\n                 <version>${spring.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.springframework</groupId>\n+                <artifactId>spring-beans</artifactId>\n+                <version>${spring.version}</version>\n+            </dependency>\n             <dependency>\n                 <groupId>org.springframework</groupId>\n                 <artifactId>spring-context</artifactId>\n@@ -304,27 +292,6 @@\n             </dependency>\n             <!-- /Spring -->\n \n-            <!-- CXF: needed by soap connector -->\n-            <dependency>\n-                <groupId>org.apache.cxf</groupId>\n-                <artifactId>cxf-rt-frontend-jaxws</artifactId>\n-                <version>${cxf.version}</version>\n-                <scope>runtime</scope>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.cxf</groupId>\n-                <artifactId>cxf-rt-transports-http</artifactId>\n-                <version>${cxf.version}</version>\n-                <scope>runtime</scope>\n-            </dependency>\n-            <!-- /CXF -->\n-\n-            <dependency>\n-                <groupId>cglib</groupId>\n-                <artifactId>cglib-nodep</artifactId>\n-                <version>${cglib.version}</version>\n-            </dependency>\n-\n             <dependency>\n                 <groupId>org.codehaus.jackson</groupId>\n                 <artifactId>jackson-mapper-lgpl</artifactId>\n@@ -336,17 +303,6 @@\n                 <artifactId>xstream</artifactId>\n                 <version>${xstream.version}</version>\n             </dependency>\n-\n-            <dependency>\n-                <groupId>org.aspectj</groupId>\n-                <artifactId>aspectjweaver</artifactId>\n-                <version>${aspectj.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.aspectj</groupId>\n-                <artifactId>aspectjrt</artifactId>\n-                <version>${aspectj.version}</version>\n-            </dependency>\n             \n             <dependency>\n                 <groupId>org.quartz-scheduler</groupId>\n@@ -470,12 +426,6 @@\n                 <version>${connid.csvdir.version}</version>\n                 <scope>test</scope>\n             </dependency>\n-           \t<dependency>\n-\t        \t<groupId>org.mockito</groupId>\n-\t        \t<artifactId>mockito-core</artifactId>\n-                <scope>test</scope>\n-                <version>1.8.5</version>\n-\t        </dependency>\n             <!-- /TEST -->\n \n         </dependencies>\n@@ -495,8 +445,8 @@\n         </repository>\n \n         <repository>\n-            <id>atalassian</id>\n-            <url>https://maven.atlassian.com/3rdparty/</url>\n+            <id>activiti</id>\n+            <url>http://maven.alfresco.com/nexus/content/repositories/activiti</url>\n         </repository>\n \n         <repository>"}]}