{"sha":"7948f5c8ca06f84681bcb4501058400fabce47f3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc5NDhmNWM4Y2EwNmY4NDY4MWJjYjQ1MDEwNTg0MDBmYWJjZTQ3ZjM=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2014-07-11T13:38:59Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2014-07-11T13:38:59Z"},"message":"[SYNCOPE-391] password management made optional, null password can be stored on Syncope internal storage\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_2_X@1609714 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0548f21573d50ea537f42239b3769b7beff9d782","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0548f21573d50ea537f42239b3769b7beff9d782"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7948f5c8ca06f84681bcb4501058400fabce47f3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7948f5c8ca06f84681bcb4501058400fabce47f3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7948f5c8ca06f84681bcb4501058400fabce47f3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7948f5c8ca06f84681bcb4501058400fabce47f3/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"aeddbc480878c080e7265f0de5f3a8b9f09c0018","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aeddbc480878c080e7265f0de5f3a8b9f09c0018","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/aeddbc480878c080e7265f0de5f3a8b9f09c0018"}],"stats":{"total":729,"additions":458,"deletions":271},"files":[{"sha":"ea8373c15e400177101b317572d60ab852dbca25","filename":"common/src/main/java/org/apache/syncope/common/services/UserSelfService.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserSelfService.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -21,12 +21,14 @@\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n import javax.ws.rs.OPTIONS;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.cxf.jaxrs.model.wadl.Description;\n@@ -67,6 +69,7 @@ public interface UserSelfService extends JAXRSService {\n      * Self-registration for new user.\n      *\n      * @param userTO user to be created\n+     * @param storePassword whether password shall be stored internally\n      * @return <tt>Response</tt> object featuring <tt>Location</tt> header of self-registered user as well as the user\n      * itself - {@link UserTO} as <tt>Entity</tt>\n      */\n@@ -78,7 +81,8 @@ public interface UserSelfService extends JAXRSService {\n     @POST\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response create(@NotNull UserTO userTO);\n+    Response create(@NotNull UserTO userTO,\n+            @DefaultValue(\"true\") @QueryParam(\"storePassword\") boolean storePassword);\n \n     /**\n      * Self-updates user."},{"sha":"c72021853faea88d139d154c4a6caa3d9931222e","filename":"common/src/main/java/org/apache/syncope/common/services/UserService.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -199,6 +199,7 @@ PagedResult<UserTO> search(@QueryParam(PARAM_FIQL) String fiql,\n      * Creates a new user.\n      *\n      * @param userTO user to be created\n+     * @param storePassword whether password shall be stored internally\n      * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created user as well as the user itself\n      * enriched with propagation status information - {@link UserTO} as <tt>Entity</tt>\n      */\n@@ -210,7 +211,8 @@ PagedResult<UserTO> search(@QueryParam(PARAM_FIQL) String fiql,\n     @POST\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response create(@NotNull UserTO userTO);\n+    Response create(@NotNull UserTO userTO,\n+            @DefaultValue(\"true\") @QueryParam(\"storePassword\") boolean storePassword);\n \n     /**\n      * Updates user matching the provided userId."},{"sha":"7ac633ab29cabd6f2e30a76048af6ef208ef6591","filename":"common/src/main/java/org/apache/syncope/common/types/PasswordPolicySpec.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -142,6 +142,11 @@ public class PasswordPolicySpec extends AbstractPolicySpec {\n      */\r\n     private boolean mustntEndWithAlpha;\r\n \r\n+    /**\r\n+     * Specify if password shall not be stored internally.\r\n+     */\r\n+    private boolean allowNullPassword;\r\n+\r\n     /**\r\n      * Substrings not permitted as prefix.\r\n      */\r\n@@ -351,4 +356,12 @@ public int getHistoryLength() {\n     public void setHistoryLength(final int historyLength) {\r\n         this.historyLength = historyLength;\r\n     }\r\n+\r\n+    public boolean isAllowNullPassword() {\r\n+        return allowNullPassword;\r\n+    }\r\n+\r\n+    public void setAllowNullPassword(final boolean allowNullPassword) {\r\n+        this.allowNullPassword = allowNullPassword;\r\n+    }\r\n }\r"},{"sha":"98d2c45d3cb0abaa2ce09ca0b2f6eb02dffdf0f9","filename":"common/src/main/java/org/apache/syncope/common/util/AttributableOperations.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -224,7 +224,8 @@ public static UserMod diff(final UserTO updated, final UserTO original, final bo\n         diff(updated, original, result, incremental);\r\n \r\n         // 1. password\r\n-        if (original.getPassword() != null && !original.getPassword().equals(updated.getPassword())) {\r\n+        if (updated.getPassword() != null && (original.getPassword() == null || !original.getPassword().\r\n+                equals(updated.getPassword()))) {\r\n             result.setPassword(updated.getPassword());\r\n         }\r\n \r"},{"sha":"3b83078f915660301c89a4c54beab956cea6077b","filename":"console/src/main/java/org/apache/syncope/console/pages/EditUserModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -81,7 +81,7 @@ protected void submitAction(final AjaxRequestTarget target, final Form form) {\n         final UserTO updatedUserTO = (UserTO) form.getModelObject();\n \n         if (updatedUserTO.getId() == 0) {\n-            userTO = userRestClient.create(updatedUserTO);\n+            userTO = userRestClient.create(updatedUserTO, storePassword.getModelObject());\n         } else {\n             final UserMod userMod = AttributableOperations.diff(updatedUserTO, initialUserTO);\n "},{"sha":"a1ff0b358830add18d7d752bb3dcb22fd242d979","filename":"console/src/main/java/org/apache/syncope/console/pages/UserModalPage.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.console.pages.panels.ResourcesPanel;\n import org.apache.syncope.console.pages.panels.UserDetailsPanel;\n import org.apache.syncope.console.pages.panels.VirtualAttributesPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n@@ -66,6 +67,8 @@ public enum Mode {\n \n     private final boolean resetPassword;\n \n+    protected final AjaxCheckBoxPanel storePassword;\n+\n     public UserModalPage(final PageReference callerPageRef, final ModalWindow window, final UserTO userTO,\n             final Mode mode, final boolean resetPassword) {\n \n@@ -80,6 +83,9 @@ public UserModalPage(final PageReference callerPageRef, final ModalWindow window\n         fragment = new Fragment(\"userModalFrag\", \"userModalEditFrag\", this);\n         fragment.setOutputMarkupId(true);\n         add(fragment);\n+\n+        storePassword = new AjaxCheckBoxPanel(\"storePassword\", \"storePassword\",\n+                new Model<Boolean>(Boolean.TRUE));\n     }\n \n     public UserTO getUserTO() {\n@@ -115,6 +121,18 @@ protected Form setupEditPanel() {\n         form.add(new Label(\"accountinformation\", \"\"));\n         //--------------------------------\n \n+        //--------------------------------\n+        // Store password internally checkbox\n+        //--------------------------------\n+        final Fragment storePwdFragment = new Fragment(\"storePwdFrag\", \"storePwdCheck\", form);\n+        storePwdFragment.setOutputMarkupId(true);\n+        final Label storePasswordLabel = new Label(\"storePasswordLabel\", new ResourceModel(\"storePassword\"));\n+        storePwdFragment.add(storePasswordLabel);\n+        storePwdFragment.add(storePassword);\n+        form.add(userTO.getId() == 0 && mode != Mode.TEMPLATE ? storePwdFragment : new Fragment(\"storePwdFrag\",\n+                \"emptyFragment\", form));\n+        //--------------------------------\n+\n         //--------------------------------\n         // Attributes panel\n         //--------------------------------"},{"sha":"17e21d9cb1f712ca6fd8437b4c0bffbd7717e913","filename":"console/src/main/java/org/apache/syncope/console/pages/UserSelfModalPage.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserSelfModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserSelfModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserSelfModalPage.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.util.AttributableOperations;\n import org.apache.syncope.console.rest.UserSelfRestClient;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n@@ -53,7 +54,7 @@ protected void submitAction(final AjaxRequestTarget target, final Form form) {\n         final UserTO updatedUserTO = (UserTO) form.getModelObject();\n \n         if (updatedUserTO.getId() == 0) {\n-            restClient.create(updatedUserTO);\n+            restClient.create(updatedUserTO, storePassword.getModelObject());\n         } else {\n             final UserMod userMod = AttributableOperations.diff(updatedUserTO, initialUserTO);\n "},{"sha":"7d30e98282de18de1515fc86e7ee5e3aa4ea7149","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/UserDetailsPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserDetailsPanel.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -20,6 +20,8 @@\n \n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.console.commons.JexlHelpUtil;\n+import org.apache.syncope.console.pages.UserModalPage;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n@@ -89,14 +91,12 @@ public UserDetailsPanel(final String id, final UserTO userTO, final Form form, f\n \n             password = new AjaxPasswordFieldPanel(\"password\", \"password\",\n                     new PropertyModel<String>(userTO, \"password\"));\n-            password.setRequired(userTO.getId() == 0);\n             ((PasswordTextField) password.getField()).setResetPassword(resetPassword);\n \n             confirmPassword = new AjaxPasswordFieldPanel(\"confirmPassword\", \"confirmPassword\", new Model<String>());\n             if (!resetPassword) {\n                 confirmPassword.getField().setModelObject(userTO.getPassword());\n             }\n-            confirmPassword.setRequired(userTO.getId() == 0);\n             ((PasswordTextField) confirmPassword.getField()).setResetPassword(resetPassword);\n \n             form.add(new EqualPasswordInputValidator(password.getField(), confirmPassword.getField()));"},{"sha":"f9e73ee83ab21035e4c293e1227405a161a34aec","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -58,8 +58,8 @@ public List<UserTO> list(final int page, final int size, final SortParam<String>\n         return getService(UserService.class).list(page, size, toOrderBy(sort)).getResult();\n     }\n \n-    public UserTO create(final UserTO userTO) {\n-        Response response = getService(UserService.class).create(userTO);\n+    public UserTO create(final UserTO userTO, final boolean storePassword) {\n+        Response response = getService(UserService.class).create(userTO, storePassword);\n         return response.readEntity(UserTO.class);\n     }\n "},{"sha":"47f2e1850358b76c2f9521bd954e8302fe705a26","filename":"console/src/main/java/org/apache/syncope/console/rest/UserSelfRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserSelfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserSelfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserSelfRestClient.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -47,8 +47,8 @@ public UserTO read() {\n         return getService(UserSelfService.class).read();\n     }\n \n-    public void create(final UserTO userTO) {\n-        getService(UserSelfService.class).create(userTO);\n+    public void create(final UserTO userTO, final boolean storePassword) {\n+        getService(UserSelfService.class).create(userTO, storePassword);\n     }\n \n     public void update(final UserMod userMod) {"},{"sha":"4e7722f56fc29db3ec184ae536ab6bf03ee044d6","filename":"console/src/main/resources/org/apache/syncope/console/pages/PolicyModalPage.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -50,6 +50,7 @@ mustEndWithNonAlpha=Must end with non alphanumeric character\n mustEndWithAlpha=Must end with alphanumeric character\n mustntEndWithNonAlpha=Mustn't end with non alphanumeric character\n mustntEndWithAlpha=Mustn't end with alphanumeric character\n+allowNullPassword=Password may be not stored internally\n #-----------------------------\n \n #-----------------------------"},{"sha":"4f8bf93b70e217dccf106acdaeb6908281d6a617","filename":"console/src/main/resources/org/apache/syncope/console/pages/PolicyModalPage_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -48,6 +48,7 @@ mustEndWithNonAlpha=Deve terminare con un carattere non alfanumerico\n mustEndWithAlpha=Deve terminare con un carattere alfanumerico\n mustntEndWithNonAlpha=Non deve terminare con un carattere non alfanumerico\n mustntEndWithAlpha=Non deve terminare con un carattere alfanumerico\n+allowNullPassword=La password pu\\u00f2 non essere memorizzata internamente\n #-----------------------------\n \n #-----------------------------"},{"sha":"075756a8df03fbdbe4e62bab2630b0f16ec0c7ea","filename":"console/src/main/resources/org/apache/syncope/console/pages/PolicyModalPage_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_pt_BR.properties?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -50,6 +50,7 @@ mustEndWithNonAlpha=Precisa terminar com um caractere n\\u00e3o alfanum\\u00e9rico\n mustEndWithAlpha=Precisa terminar com um caractere alfanum\\u00e9rico\n mustntEndWithNonAlpha=N\\u00e3o deve terminar com um caractere n\\u00e3o alfanum\\u00e9rico\n mustntEndWithAlpha=N\\u00e3o precisa terminar com um caracter alfanum\\u00e9rico\n+allowNullPassword=A senha n\\u00e3o pode ser armazenado internamente\n #-----------------------------\n \n #-----------------------------"},{"sha":"881a3c58c77ab6436648861936e3d5b8e2abe6f7","filename":"console/src/main/resources/org/apache/syncope/console/pages/UserModalPage.html","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.html?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -40,6 +40,19 @@\n             </ul>\n             <div id=\"tabs-1\">\n               <span wicket:id=\"details\">[user details]</span>\n+              <span wicket:id=\"storePwdFrag\">[storePwdFrag]</span>\n+              <wicket:fragment wicket:id=\"storePwdCheck\">\n+                <div class=\"tablerow alt\">\n+                  <div class=\"tablecolumn_label short_dynamicsize\">\n+                    <span wicket:id=\"storePasswordLabel\">[storePasswordLabel]</span>\n+                  </div>\n+                  <div class=\"tablecolumn_field medium_dynamicsize\">\n+                    <span wicket:id=\"storePassword\">[storePassword]</span>\n+                  </div>\n+                </div>\n+              </wicket:fragment>\n+              <wicket:fragment wicket:id=\"emptyFragment\">\n+              </wicket:fragment>\n               <div wicket:id=\"pwdChangeInfo\" style=\"margin-top: 25px;\">[pwdChangeInfo]</div>\n               <span wicket:id=\"statuspanel\">[Status Panel]</span>\n               <span wicket:id=\"accountinformation\">[Account Information]</span>"},{"sha":"c0614c4ab365374bfeec007b9ec35ee4c7026228","filename":"console/src/main/resources/org/apache/syncope/console/pages/UserModalPage.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.properties?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -48,3 +48,5 @@ virAttrValue=Virtual value\n addAttributeBtn=Add\n new=New\n pwdChangeInfo=If provided, the password will be changed on the following resources.\n+\n+storePassword=Store password internally"},{"sha":"8a7960190d41a4b2a4d1eb88048aa2a19527a981","filename":"console/src/main/resources/org/apache/syncope/console/pages/UserModalPage_it.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage_it.properties?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -49,3 +49,5 @@ addAttributeBtn=Aggiungi\n \n new=Nuovo\n pwdChangeInfo=Se inserita, la password verr\\u00e0 cambiata sulle seguenti risorse.\n+\n+storePassword=Salva la password internamente"},{"sha":"7000c47d209badfc0827653e409fa0f13cdcfc0f","filename":"console/src/main/resources/org/apache/syncope/console/pages/UserModalPage_pt_BR.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage_pt_BR.properties?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -48,3 +48,5 @@ virAttrValue=Valor Virtual\n addAttributeBtn=Adicionar\n new=Novo\n pwdChangeInfo=Se provida, a senha ser\\u00e1 alterada nos seguintes recursos\n+\n+storePassword=Salvar senha internamente"},{"sha":"92e37bd8bd1b97812bf18f09959260a9ecb827f4","filename":"console/src/test/java/org/apache/syncope/console/UserTestITCase.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FUserTestITCase.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -37,6 +37,8 @@ public void browseCreateModal() {\n         selenium.waitForCondition(\"selenium.isElementPresent(\"\n                 + \"\\\"//span[contains(text(),'Attributes')]\\\");\", \"30000\");\n \n+        selenium.click(\"//div/form/div[3]/div[1]/span[2]/div/div[2]/span\");\n+        \n         selenium.click(\"//div[@id='tabs']/ul/li[2]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[3]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[4]/a/span\");"},{"sha":"ee6646aab6e24cd0d00cc96b37578e9be0c061d6","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -72,7 +72,7 @@ public class SyncopeUser extends AbstractSubject {\n     @Id\n     private Long id;\n \n-    @NotNull(message = \"Blank password\")\n+    @Column(nullable = true)\n     private String password;\n \n     @Transient\n@@ -154,7 +154,7 @@ public class SyncopeUser extends AbstractSubject {\n             @JoinColumn(name = \"resource_name\"))\n     @Valid\n     private Set<ExternalResource> resources;\n-\n+    \n     public SyncopeUser() {\n         super();\n "},{"sha":"2b90197925ec0377a8e8406cb7fe7f6ccec5f592","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncopeUserValidator.java","status":"modified","additions":29,"deletions":31,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -67,42 +67,40 @@ public boolean isValid(final SyncopeUser user, final ConstraintValidatorContext\n         // ------------------------------\n         LOG.debug(\"Password Policy enforcement\");\n \n-        if (user.getClearPassword() != null) {\n-            try {\n-                int maxPPSpecHistory = 0;\n-                for (Policy policy : getPasswordPolicies(user)) {\n-                    // evaluate policy\n-                    final PasswordPolicySpec ppSpec = evaluator.evaluate(policy, user);\n-                    // enforce policy\n-                    ppEnforcer.enforce(ppSpec, policy.getType(), user.getClearPassword());\n-\n-                    if (ppSpec.getHistoryLength() > maxPPSpecHistory) {\n-                        maxPPSpecHistory = ppSpec.getHistoryLength();\n-                    }\n-                }\n+        try {\n+            int maxPPSpecHistory = 0;\n+            for (Policy policy : getPasswordPolicies(user)) {\n+                // evaluate policy\n+                final PasswordPolicySpec ppSpec = evaluator.evaluate(policy, user);\n+                // enforce policy\n+                ppEnforcer.enforce(ppSpec, policy.getType(), user);\n \n-                // update user's password history with encrypted password\n-                if (maxPPSpecHistory > 0 && user.getPassword() != null) {\n-                    user.getPasswordHistory().add(user.getPassword());\n+                if (ppSpec.getHistoryLength() > maxPPSpecHistory) {\n+                    maxPPSpecHistory = ppSpec.getHistoryLength();\n                 }\n-                // keep only the last maxPPSpecHistory items in user's password history\n-                if (maxPPSpecHistory < user.getPasswordHistory().size()) {\n-                    for (int i = 0; i < user.getPasswordHistory().size() - maxPPSpecHistory; i++) {\n-                        user.getPasswordHistory().remove(i);\n-                    }\n+            }\n+\n+            // update user's password history with encrypted password\n+            if (maxPPSpecHistory > 0 && user.getPassword() != null) {\n+                user.getPasswordHistory().add(user.getPassword());\n+            }\n+            // keep only the last maxPPSpecHistory items in user's password history\n+            if (maxPPSpecHistory < user.getPasswordHistory().size()) {\n+                for (int i = 0; i < user.getPasswordHistory().size() - maxPPSpecHistory; i++) {\n+                    user.getPasswordHistory().remove(i);\n                 }\n-            } catch (Exception e) {\n-                LOG.debug(\"Invalid password\");\n+            }\n+        } catch (Exception e) {\n+            LOG.debug(\"Invalid password\");\n \n-                context.buildConstraintViolationWithTemplate(\n-                        getTemplate(EntityViolationType.InvalidPassword, e.getMessage())).\n-                        addPropertyNode(\"password\").addConstraintViolation();\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidPassword, e.getMessage())).\n+                    addPropertyNode(\"password\").addConstraintViolation();\n \n-                return false;\n-            } finally {\n-                // password has been validated, let's remove its clear version\n-                user.removeClearPassword();\n-            }\n+            return false;\n+        } finally {\n+            // password has been validated, let's remove its clear version\n+            user.removeClearPassword();\n         }\n         // ------------------------------\n "},{"sha":"2b6554d7dadfc2d06391a24afaa354d55f93bf2e","filename":"core/src/main/java/org/apache/syncope/core/policy/PasswordPolicyEnforcer.java","status":"modified","additions":97,"deletions":91,"changes":188,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -20,133 +20,139 @@\n \n import org.apache.syncope.common.types.PasswordPolicySpec;\n import org.apache.syncope.common.types.PolicyType;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.springframework.stereotype.Component;\n \n @Component\n-public class PasswordPolicyEnforcer extends PolicyEnforcer<PasswordPolicySpec, String> {\n+public class PasswordPolicyEnforcer extends PolicyEnforcer<PasswordPolicySpec, SyncopeUser> {\n \n     /* (non-Javadoc)\n-\t * @see org.apache.syncope.core.policy.PasswordPolicyEnforcer#enforce(org.apache.syncope.common.types.PasswordPolicySpec, org.apache.syncope.common.types.PolicyType, java.lang.String)\n-\t */\n-\t@Override\n-    public void enforce(final PasswordPolicySpec policy, final PolicyType type, final String password)\n+     * @see\n+     * org.apache.syncope.core.policy.PasswordPolicyEnforcer#enforce(org.apache.syncope.common.types.PasswordPolicySpec,\n+     * org.apache.syncope.common.types.PolicyType, java.lang.String)\n+     */\n+    @Override\n+    public void enforce(final PasswordPolicySpec policy, final PolicyType type, final SyncopeUser user)\n             throws PasswordPolicyException, PolicyEnforceException {\n \n-        if (password == null) {\n-            throw new PolicyEnforceException(\"Invalid password\");\n-        }\n+        final String clearPassword = user.getClearPassword();\n+        final String password = user.getPassword();\n \n         if (policy == null) {\n             throw new PolicyEnforceException(\"Invalid policy\");\n         }\n \n-        // check length\n-        if (policy.getMinLength() > 0 && policy.getMinLength() > password.length()) {\n-            throw new PasswordPolicyException(\"Password too short\");\n-        }\n+        if (password == null && !policy.isAllowNullPassword()) {\n+            throw new PolicyEnforceException(\"Password must not be null and must be stored internally\");\n+        } else if (password != null && clearPassword != null) {\n+            // check length\n+            if (policy.getMinLength() > 0 && policy.getMinLength() > clearPassword.length()) {\n+                throw new PasswordPolicyException(\"Password too short\");\n+            }\n \n-        if (policy.getMaxLength() > 0 && policy.getMaxLength() < password.length()) {\n-            throw new PasswordPolicyException(\"Password too long\");\n-        }\n+            if (policy.getMaxLength() > 0 && policy.getMaxLength() < clearPassword.length()) {\n+                throw new PasswordPolicyException(\"Password too long\");\n+            }\n \n-        // check words not permitted\n-        for (String word : policy.getWordsNotPermitted()) {\n-            if (password.contains(word)) {\n-                throw new PasswordPolicyException(\"Used word(s) not permitted\");\n+            // check words not permitted\n+            for (String word : policy.getWordsNotPermitted()) {\n+                if (clearPassword.contains(word)) {\n+                    throw new PasswordPolicyException(\"Used word(s) not permitted\");\n+                }\n             }\n-        }\n \n-        // check digits occurrence\n-        if (policy.isDigitRequired() && !checkForDigit(password)) {\n-            throw new PasswordPolicyException(\"Password must contain digit(s)\");\n-        }\n+            // check digits occurrence\n+            if (policy.isDigitRequired() && !checkForDigit(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must contain digit(s)\");\n+            }\n \n-        // check lowercase alphabetic characters occurrence\n-        if (policy.isLowercaseRequired() && !checkForLowercase(password)) {\n-            throw new PasswordPolicyException(\"Password must contain lowercase alphabetic character(s)\");\n-        }\n+            // check lowercase alphabetic characters occurrence\n+            if (policy.isLowercaseRequired() && !checkForLowercase(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must contain lowercase alphabetic character(s)\");\n+            }\n \n-        // check uppercase alphabetic characters occurrence\n-        if (policy.isUppercaseRequired() && !checkForUppercase(password)) {\n-            throw new PasswordPolicyException(\"Password must contain uppercase alphabetic character(s)\");\n-        }\n+            // check uppercase alphabetic characters occurrence\n+            if (policy.isUppercaseRequired() && !checkForUppercase(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must contain uppercase alphabetic character(s)\");\n+            }\n \n-        // check prefix\n-        for (String prefix : policy.getPrefixesNotPermitted()) {\n-            if (password.startsWith(prefix)) {\n-                throw new PasswordPolicyException(\"Prefix not permitted\");\n+            // check prefix\n+            for (String prefix : policy.getPrefixesNotPermitted()) {\n+                if (clearPassword.startsWith(prefix)) {\n+                    throw new PasswordPolicyException(\"Prefix not permitted\");\n+                }\n             }\n-        }\n \n-        // check suffix\n-        for (String suffix : policy.getSuffixesNotPermitted()) {\n-            if (password.endsWith(suffix)) {\n-                throw new PasswordPolicyException(\"Suffix not permitted\");\n+            // check suffix\n+            for (String suffix : policy.getSuffixesNotPermitted()) {\n+                if (clearPassword.endsWith(suffix)) {\n+                    throw new PasswordPolicyException(\"Suffix not permitted\");\n+                }\n             }\n-        }\n \n-        // check digit first occurrence\n-        if (policy.isMustStartWithDigit() && !checkForFirstDigit(password)) {\n-            throw new PasswordPolicyException(\"Password must start with a digit\");\n-        }\n+            // check digit first occurrence\n+            if (policy.isMustStartWithDigit() && !checkForFirstDigit(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must start with a digit\");\n+            }\n \n-        if (policy.isMustntStartWithDigit() && checkForFirstDigit(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't start with a digit\");\n-        }\n+            if (policy.isMustntStartWithDigit() && checkForFirstDigit(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password mustn't start with a digit\");\n+            }\n \n-        // check digit last occurrence\n-        if (policy.isMustEndWithDigit() && !checkForLastDigit(password)) {\n-            throw new PasswordPolicyException(\"Password must end with a digit\");\n-        }\n+            // check digit last occurrence\n+            if (policy.isMustEndWithDigit() && !checkForLastDigit(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must end with a digit\");\n+            }\n \n-        if (policy.isMustntEndWithDigit() && checkForLastDigit(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't end with a digit\");\n-        }\n+            if (policy.isMustntEndWithDigit() && checkForLastDigit(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password mustn't end with a digit\");\n+            }\n \n-        // check alphanumeric characters occurence\n-        if (policy.isAlphanumericRequired() && !checkForAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must contain alphanumeric character(s)\");\n-        }\n+            // check alphanumeric characters occurence\n+            if (policy.isAlphanumericRequired() && !checkForAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must contain alphanumeric character(s)\");\n+            }\n \n-        // check non alphanumeric characters occurence\n-        if (policy.isNonAlphanumericRequired() && !checkForNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must contain non-alphanumeric character(s)\");\n-        }\n+            // check non alphanumeric characters occurence\n+            if (policy.isNonAlphanumericRequired() && !checkForNonAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must contain non-alphanumeric character(s)\");\n+            }\n \n-        // check alphanumeric character first occurrence\n-        if (policy.isMustStartWithAlpha() && !checkForFirstAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must start with an alphanumeric character\");\n-        }\n+            // check alphanumeric character first occurrence\n+            if (policy.isMustStartWithAlpha() && !checkForFirstAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must start with an alphanumeric character\");\n+            }\n \n-        if (policy.isMustntStartWithAlpha() && checkForFirstAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't start with an alphanumeric character\");\n-        }\n+            if (policy.isMustntStartWithAlpha() && checkForFirstAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password mustn't start with an alphanumeric character\");\n+            }\n \n-        // check alphanumeric character last occurrence\n-        if (policy.isMustEndWithAlpha() && !checkForLastAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must end with an alphanumeric character\");\n-        }\n+            // check alphanumeric character last occurrence\n+            if (policy.isMustEndWithAlpha() && !checkForLastAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must end with an alphanumeric character\");\n+            }\n \n-        if (policy.isMustntEndWithAlpha() && checkForLastAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't end with an alphanumeric character\");\n-        }\n+            if (policy.isMustntEndWithAlpha() && checkForLastAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password mustn't end with an alphanumeric character\");\n+            }\n \n-        // check non alphanumeric character first occurrence\n-        if (policy.isMustStartWithNonAlpha() && !checkForFirstNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must start with a non-alphanumeric character\");\n-        }\n+            // check non alphanumeric character first occurrence\n+            if (policy.isMustStartWithNonAlpha() && !checkForFirstNonAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must start with a non-alphanumeric character\");\n+            }\n \n-        if (policy.isMustntStartWithNonAlpha() && checkForFirstNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't start with a non-alphanumeric character\");\n-        }\n+            if (policy.isMustntStartWithNonAlpha() && checkForFirstNonAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password mustn't start with a non-alphanumeric character\");\n+            }\n \n-        // check non alphanumeric character last occurrence\n-        if (policy.isMustEndWithNonAlpha() && !checkForLastNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must end with a non-alphanumeric character\");\n-        }\n+            // check non alphanumeric character last occurrence\n+            if (policy.isMustEndWithNonAlpha() && !checkForLastNonAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must end with a non-alphanumeric character\");\n+            }\n \n-        if (policy.isMustntEndWithNonAlpha() && checkForLastNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't end with a non-alphanumeric character\");\n+            if (policy.isMustntEndWithNonAlpha() && checkForLastNonAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password mustn't end with a non-alphanumeric character\");\n+            }\n         }\n     }\n "},{"sha":"8ae6581e0cef0b0fe7af0db670209bdb87dad6ad","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractSubjectController.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractSubjectController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractSubjectController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractSubjectController.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -31,8 +31,6 @@\n \n     public abstract int count();\n \n-    public abstract T create(T attributableTO);\n-\n     public abstract T update(V attributableMod);\n \n     public abstract T delete(Long id);"},{"sha":"d751c219561a18f34ecabffac03e33285cafb795","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -223,7 +223,6 @@ public List<RoleTO> search(final SearchCond searchCondition, final int page, fin\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_CREATE')\")\n-    @Override\n     public RoleTO create(final RoleTO roleTO) {\n         // Check that this operation is allowed to be performed by caller\n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());"},{"sha":"e05f9f1c6f4e5fb736673923b3f11e1ea3363dcc","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -180,13 +180,12 @@ public List<UserTO> search(final SearchCond searchCondition, final int page, fin\n     }\n \n     @PreAuthorize(\"isAnonymous() or hasRole(T(org.apache.syncope.common.SyncopeConstants).ANONYMOUS_ENTITLEMENT)\")\n-    public UserTO createSelf(final UserTO userTO) {\n-        return doCreate(userTO);\n+    public UserTO createSelf(final UserTO userTO, final boolean storePassword) {\n+        return doCreate(userTO, storePassword);\n     }\n \n     @PreAuthorize(\"hasRole('USER_CREATE')\")\n-    @Override\n-    public UserTO create(final UserTO userTO) {\n+    public UserTO create(final UserTO userTO, final boolean storePassword) {\n         Set<Long> requestRoleIds = new HashSet<Long>(userTO.getMemberships().size());\n         for (MembershipTO membership : userTO.getMemberships()) {\n             requestRoleIds.add(membership.getRoleId());\n@@ -197,18 +196,18 @@ public UserTO create(final UserTO userTO) {\n             throw new UnauthorizedRoleException(requestRoleIds);\n         }\n \n-        return doCreate(userTO);\n+        return doCreate(userTO, storePassword);\n     }\n \n-    protected UserTO doCreate(final UserTO userTO) {\n+    protected UserTO doCreate(final UserTO userTO, final boolean storePassword) {\n         // Attributable transformation (if configured)\n         UserTO actual = attrTransformer.transform(userTO);\n         LOG.debug(\"Transformed: {}\", actual);\n \n         /*\n          * Actual operations: workflow, propagation, notification\n          */\n-        WorkflowResult<Map.Entry<Long, Boolean>> created = uwfAdapter.create(actual);\n+        WorkflowResult<Map.Entry<Long, Boolean>> created = uwfAdapter.create(actual, storePassword);\n \n         List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n                 created, actual.getPassword(), actual.getVirAttrs(), actual.getMemberships());"},{"sha":"387805d3c0b6a557125d2f74f41256d79b108b76","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -218,7 +218,7 @@ private void setPassword(final SyncopeUser user, final String password,\n         }\n     }\n \n-    public void create(final SyncopeUser user, final UserTO userTO) {\n+    public void create(final SyncopeUser user, final UserTO userTO, final boolean storePassword) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n         // memberships\n@@ -253,8 +253,8 @@ public void create(final SyncopeUser user, final UserTO userTO) {\n         fill(user, userTO, AttributableUtil.getInstance(AttributableType.USER), scce);\n \n         // set password\n-        if (StringUtils.isBlank(userTO.getPassword())) {\n-            LOG.error(\"No password provided\");\n+        if (StringUtils.isBlank(userTO.getPassword()) || !storePassword) {\n+            LOG.debug(\"Password was not provided or not required to be stored\");\n         } else {\n             setPassword(user, userTO.getPassword(), scce);\n         }"},{"sha":"bb27477843a61d48ad3e912648334b9abb68e83e","filename":"core/src/main/java/org/apache/syncope/core/services/UserSelfServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -44,14 +44,14 @@ public Response getOptions() {\n     }\n \n     @Override\n-    public Response create(final UserTO userTO) {\n+    public Response create(final UserTO userTO, final boolean storePassword) {\n         if (!controller.isSelfRegistrationAllowed()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unauthorized);\n             sce.getElements().add(\"SelfRegistration forbidden by configuration\");\n             throw sce;\n         }\n \n-        UserTO created = controller.createSelf(userTO);\n+        UserTO created = controller.createSelf(userTO, storePassword);\n         return createResponse(created.getId(), created);\n     }\n "},{"sha":"e1287fedf162ae922de2f7bf33ae9c307ccd37e0","filename":"core/src/main/java/org/apache/syncope/core/services/UserServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -62,8 +62,8 @@ public Response getUserId(final String username) {\n     }\n \n     @Override\n-    public Response create(final UserTO userTO) {\n-        UserTO created = controller.create(userTO);\n+    public Response create(final UserTO userTO, final boolean storePassword) {\n+        UserTO created = controller.create(userTO, storePassword);\n         return createResponse(created.getId(), created);\n     }\n "},{"sha":"a8cc00b8f360fbbf212c634aabc49a9f89904719","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/UserSyncResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserSyncResultHandler.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -81,7 +81,7 @@ protected AbstractSubjectTO create(\n \n         Boolean enabled = syncUtilities.readEnabled(delta.getObject(), profile.getSyncTask());\n         WorkflowResult<Map.Entry<Long, Boolean>> created =\n-                uwfAdapter.create(userTO, true, enabled);\n+                uwfAdapter.create(userTO, true, enabled, true);\n \n         List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(created,\n                 userTO.getPassword(), userTO.getVirAttrs(),"},{"sha":"bf831c883c6568e6bb70e0841f6716abb34a8453","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -351,8 +351,6 @@ private static <T extends AbstractAttributable> Map.Entry<String, Attribute> pre\n                             passwordAttrValue = passwordGenerator.generate(user);\n                         } catch (InvalidPasswordPolicySpecException e) {\n                             LOG.error(\"Could not generate policy-compliant random password for {}\", user, e);\n-\n-                            passwordAttrValue = SecureRandomUtil.generateRandomPassword(16);\n                         }\n                     }\n                 }"},{"sha":"5a3e764c2330b0fd91395a1b4f20df2bbab2e9b5","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/AbstractUserWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -62,10 +62,10 @@ public Class<? extends WorkflowInstanceLoader> getLoaderClass() {\n     }\n \n     @Override\n-    public WorkflowResult<Entry<Long, Boolean>> create(final UserTO userTO)\n+    public WorkflowResult<Entry<Long, Boolean>> create(final UserTO userTO, final boolean storePassword)\n             throws UnauthorizedRoleException, WorkflowException {\n \n-        return create(userTO, false);\n+        return create(userTO, false, storePassword);\n     }\n \n     protected abstract WorkflowResult<Long> doActivate(SyncopeUser user, String token) throws WorkflowException;"},{"sha":"6ee27fc896bf590e312fe6c05e3b0ca683f19be4","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/NoOpUserWorkflowAdapter.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -47,19 +47,19 @@ public class NoOpUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     public static final String ENABLED = \"enabled\";\n \n     @Override\n-    public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck)\n+    public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n+            final boolean storePassword)\n             throws WorkflowException {\n \n-        return create(userTO, disablePwdPolicyCheck, null);\n+        return create(userTO, disablePwdPolicyCheck, null, storePassword);\n     }\n \n     @Override\n     public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n-            final Boolean enabled)\n-            throws WorkflowException {\n+            final Boolean enabled, final boolean storePassword) throws WorkflowException {\n \n         SyncopeUser user = new SyncopeUser();\n-        dataBinder.create(user, userTO);\n+        dataBinder.create(user, userTO, storePassword);\n \n         // this will make SyncopeUserValidator not to consider password policies at all\n         if (disablePwdPolicyCheck) {"},{"sha":"39d99c87ca17c4e56c27539cac64b89e34477cbd","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/UserWorkflowAdapter.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FUserWorkflowAdapter.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -36,36 +36,40 @@ public interface UserWorkflowAdapter extends WorkflowAdapter {\n      * Create an user.\n      *\n      * @param userTO user to be created and wether to propagate it as active\n+     * @param storePassword whether password shall be stored into the internal storage\n      * @return user just created\n      * @throws UnauthorizedRoleException authorization exception\n      * @throws WorkflowException workflow exception\n      */\n-    WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO) throws UnauthorizedRoleException, WorkflowException;\n+    WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean storePassword) throws\n+            UnauthorizedRoleException, WorkflowException;\n \n     /**\n      * Create an user, optionally disabling password policy check.\n      *\n      * @param userTO user to be created and wether to propagate it as active\n      * @param disablePwdPolicyCheck disable password policy check?\n+     * @param storePassword whether password shall be stored into the internal storage\n      * @return user just created\n      * @throws UnauthorizedRoleException authorization exception\n      * @throws WorkflowException workflow exception\n      */\n-    WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean disablePwdPolicyCheck)\n-            throws UnauthorizedRoleException, WorkflowException;\n+    WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean disablePwdPolicyCheck,\n+            boolean storePassword) throws UnauthorizedRoleException, WorkflowException;\n \n     /**\n      * Create an user, optionally disabling password policy check.\n      *\n      * @param userTO user to be created and wether to propagate it as active\n      * @param disablePwdPolicyCheck disable password policy check?\n      * @param enabled specify true/false to force active/supended status\n+     * @param storePassword whether password shall be stored into the internal storage\n      * @return user just created\n      * @throws UnauthorizedRoleException authorization exception\n      * @throws WorkflowException workflow exception\n      */\n-    WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean disablePwdPolicyCheck, final Boolean enabled)\n-            throws UnauthorizedRoleException, WorkflowException;\n+    WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean disablePwdPolicyCheck, final Boolean enabled,\n+            boolean storePassword) throws UnauthorizedRoleException, WorkflowException;\n \n     /**\n      * Execute a task on an user."},{"sha":"990bb5f2268828620d33ec9a2e9bdc13a20f9760","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -124,6 +124,8 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     public static final String TASK_IS_FORM = \"taskIsForm\";\n \n     public static final String MODEL_DATA_JSON_MODEL = \"model\";\n+    \n+    public static final String STORE_PASSWORD = \"storePassword\";\n \n     @Resource(name = \"adminUser\")\n     private String adminUser;\n@@ -225,21 +227,21 @@ private void saveForFormSubmit(final SyncopeUser user, final String password,\n     }\n \n     @Override\n-    public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck)\n-            throws WorkflowException {\n+    public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n+            final boolean storePassword) throws WorkflowException {\n \n-        return create(userTO, disablePwdPolicyCheck, null);\n+        return create(userTO, disablePwdPolicyCheck, null, storePassword);\n     }\n \n     @Override\n     public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n-            final Boolean enabled)\n-            throws WorkflowException {\n+            final Boolean enabled, final boolean storePassword) throws WorkflowException {\n \n         final Map<String, Object> variables = new HashMap<String, Object>();\n         variables.put(WF_EXECUTOR, EntitlementUtil.getAuthenticatedUsername());\n         variables.put(USER_TO, userTO);\n         variables.put(ENABLED, enabled);\n+        variables.put(STORE_PASSWORD, storePassword);\n \n         ProcessInstance processInstance = null;\n         try {\n@@ -264,7 +266,7 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n \n         updateStatus(user);\n         user = userDAO.save(user);\n-\n+        \n         Boolean propagateEnable = (Boolean) runtimeService.getVariable(\n                 processInstance.getProcessInstanceId(), PROPAGATE_ENABLE);\n         if (propagateEnable == null) {"},{"sha":"37dc284917f9a82648769d218781d2a317165ab6","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/task/Create.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FCreate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FCreate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FCreate.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -34,10 +34,11 @@ public class Create extends AbstractActivitiServiceTask {\n     @Override\n     protected void doExecute(final String executionId) {\n         UserTO userTO = (UserTO) runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER_TO);\n-\n+        Boolean storePassword = (Boolean) runtimeService.getVariable(executionId,\n+                ActivitiUserWorkflowAdapter.STORE_PASSWORD);\n         // create and set workflow id\n         SyncopeUser user = new SyncopeUser();\n-        dataBinder.create(user, userTO);\n+        dataBinder.create(user, userTO, storePassword == null ? true : storePassword);\n         user.setWorkflowId(executionId);\n \n         // report SyncopeUser as result"},{"sha":"065ae3ef329c88d6540783ebdbc5dc7f2751fb79","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -239,7 +239,7 @@ public void notifyByMail() throws Exception {\n         membershipTO.setRoleId(7);\n         userTO.getMemberships().add(membershipTO);\n \n-        userController.create(userTO);\n+        userController.create(userTO, true);\n \n         // 3. force Quartz job execution and verify e-mail\n         notificationJob.execute(null);\n@@ -296,7 +296,7 @@ public void issueSYNCOPE192() throws Exception {\n         membershipTO.setRoleId(7);\n         userTO.getMemberships().add(membershipTO);\n \n-        userController.create(userTO);\n+        userController.create(userTO, true);\n \n         // 3. force Quartz job execution and verify e-mail\n         notificationJob.execute(null);\n@@ -349,7 +349,7 @@ public void notifyByMailEmptyAbout() throws Exception {\n         membershipTO.setRoleId(7);\n         userTO.getMemberships().add(membershipTO);\n \n-        userController.create(userTO);\n+        userController.create(userTO, true);\n \n         // 3. force Quartz job execution and verify e-mail\n         notificationJob.execute(null);\n@@ -399,7 +399,7 @@ public void notifyByMailWithRetry() throws Exception {\n         membershipTO.setRoleId(7);\n         userTO.getMemberships().add(membershipTO);\n \n-        userController.create(userTO);\n+        userController.create(userTO, true);\n \n         // 3. Set number of retries\n         CAttr maxRetries = confDAO.find(\"notification.maxRetries\", \"5\");\n@@ -470,7 +470,7 @@ public void issueSYNCOPE445() throws Exception {\n         membershipTO.setRoleId(7);\n         userTO.getMemberships().add(membershipTO);\n \n-        userController.create(userTO);\n+        userController.create(userTO, true);\n \n         // 3. force Quartz job execution and verify e-mail\n         notificationJob.execute(null);\n@@ -531,7 +531,7 @@ public void issueSYNCOPE492() throws Exception {\n         membershipTO.setRoleId(7);\n         userTO.getMemberships().add(membershipTO);\n \n-        userController.create(userTO);\n+        userController.create(userTO, true);\n \n         // 3. force Quartz job execution\n         notificationJob.execute(null);"},{"sha":"d9a7948bff984e2ace372281ab14e80b078122e0","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -189,4 +189,21 @@ public void issue237() {\n         assertNotNull(actual);\n     }\n \n+    @Test\n+    public void issueSYNCOPE391() {\n+        SyncopeUser user = new SyncopeUser();\n+        user.setUsername(\"username\");\n+        user.setPassword(null, CipherAlgorithm.AES, 0);\n+\n+        SyncopeUser actual = null;\n+        Throwable t = null;\n+        try {\n+            actual = userDAO.save(user);\n+        } catch (InvalidEntityException e) {\n+            t = e;\n+        }\n+        assertNull(t);\n+        assertNull(user.getPassword());\n+        assertNotNull(actual);\n+    }\n }"},{"sha":"4e6a68b8283fefca03a4fb6c5e6a1c40aed736c6","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -174,7 +174,7 @@ public abstract class AbstractTest {\n \n     @Autowired\n     protected DataSource testDataSource;\n-\n+    \n     @BeforeClass\n     public static void securitySetup() {\n         InputStream propStream = null;\n@@ -241,7 +241,11 @@ protected static AttributeMod attributeMod(final String schema, final String val\n     }\n \n     protected UserTO createUser(final UserTO userTO) {\n-        Response response = userService.create(userTO);\n+        return createUser(userTO, true);\n+    }\n+    \n+    protected UserTO createUser(final UserTO userTO, final boolean storePassword) {\n+        Response response = userService.create(userTO, storePassword);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n             if (ex != null) {"},{"sha":"c24fa69a9e417e463dd27481fd7469500bb5e7a7","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -361,7 +361,7 @@ public void issueSYNCOPE48() {\n         membershipTO.setRoleId(1L);\n         role1User.getMemberships().add(membershipTO);\n \n-        Response response = userService2.create(role1User);\n+        Response response = userService2.create(role1User, true);\n         assertNotNull(response);\n         role1User = response.readEntity(UserTO.class);\n         assertNotNull(role1User);"},{"sha":"5fde3e76fd471a54b8da827deb4d26f5b7b93352","filename":"core/src/test/java/org/apache/syncope/core/rest/UserSelfTestITCase.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.apache.syncope.core.rest.UserTestITCase.getUniqueSampleTO;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n@@ -68,7 +67,7 @@ public void create() {\n \n         // 1. self-registration as admin: failure\n         try {\n-            userSelfService.create(UserTestITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"));\n+            userSelfService.create(UserTestITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"), true);\n             fail();\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n@@ -77,7 +76,7 @@ public void create() {\n         // 2. self-registration as anonymous: works\n         SyncopeClient anonClient = clientFactory.createAnonymous();\n         UserTO self = anonClient.getService(UserSelfService.class).\n-                create(UserTestITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).\n+                create(UserTestITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"), true).\n                 readEntity(UserTO.class);\n         assertNotNull(self);\n         assertEquals(\"createApproval\", self.getStatus());\n@@ -96,7 +95,7 @@ public void createAndApprove() {\n \n         SyncopeClient anonClient = clientFactory.createAnonymous();\n         userTO = anonClient.getService(UserSelfService.class).\n-                create(userTO).\n+                create(userTO, true).\n                 readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"createApproval\", userTO.getStatus());\n@@ -242,9 +241,9 @@ public void noContent() throws IOException {\n         SyncopeClient anonClient = clientFactory.createAnonymous();\n         UserSelfService noContentService = anonClient.prefer(UserSelfService.class, Preference.RETURN_NO_CONTENT);\n \n-        UserTO user = getUniqueSampleTO(\"nocontent-anonymous@syncope.apache.org\");\n+        UserTO user = UserTestITCase.getUniqueSampleTO(\"nocontent-anonymous@syncope.apache.org\");\n \n-        Response response = noContentService.create(user);\n+        Response response = noContentService.create(user, true);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n         assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));"},{"sha":"c64eddc55e40dbd80b3ff34c58c253b24a5525e6","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":109,"deletions":13,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -1185,7 +1185,7 @@ public void noContent() throws IOException {\n \n         UserTO user = getUniqueSampleTO(\"nocontent@syncope.apache.org\");\n \n-        Response response = noContentService.create(user);\n+        Response response = noContentService.create(user, true);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n         assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n@@ -2129,19 +2129,10 @@ public void issueSYNCOPE426() {\n \n     @Test\n     public void issueSYNCOPE435() {\n-        // 1. try to create user without password - fail\n+        // 1. create user without password\n         UserTO userTO = getUniqueSampleTO(\"syncope435@syncope.apache.org\");\n         userTO.setPassword(null);\n-\n-        try {\n-            createUser(userTO);\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidSyncopeUser, e.getType());\n-        }\n-\n-        userTO.setPassword(\"password123\");\n-        userTO = createUser(userTO);\n+        userTO = createUser(userTO, false);\n         assertNotNull(userTO);\n \n         // 2. try to update user by subscribing a resource - works but propagation is not even attempted\n@@ -2157,7 +2148,8 @@ public void issueSYNCOPE435() {\n \n     @Test\n     public void ifMatch() {\n-        UserTO userTO = userService.create(getUniqueSampleTO(\"ifmatch@syncope.apache.org\")).readEntity(UserTO.class);\n+        UserTO userTO = userService.create(getUniqueSampleTO(\"ifmatch@syncope.apache.org\"), true).\n+                readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertNotNull(userTO.getId());\n \n@@ -2367,4 +2359,108 @@ public void issueSYNCOPE505LDAP() throws Exception {\n         resourceTO.setRandomPwdIfNotProvided(true);\n         resourceService.update(RESOURCE_NAME_LDAP, resourceTO);\n     }\n+\n+    @Test\n+    public void issueSYNCOPE391() {\n+        // 1. create user on Syncope with null password\n+        UserTO userTO = getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n+        userTO.setPassword(null);\n+\n+        userTO = createUser(userTO, false);\n+        assertNotNull(userTO);\n+        assertNull(userTO.getPassword());\n+\n+        // 2. create existing user on csv and check that password on Syncope is null and that password on resource\n+        // doesn't change\n+        userTO = new UserTO();\n+        userTO.setPassword(null);\n+        userTO.setUsername(\"syncope391@syncope.apache.org\");\n+        userTO.getAttrs().add(attributeTO(\"fullname\", \"fullname\"));\n+        userTO.getAttrs().add(attributeTO(\"firstname\", \"nome0\"));\n+        userTO.getAttrs().add(attributeTO(\"surname\", \"cognome0\"));\n+        userTO.getAttrs().add(attributeTO(\"userId\", \"syncope391@syncope.apache.org\"));\n+        userTO.getAttrs().add(attributeTO(\"email\", \"syncope391@syncope.apache.org\"));\n+        userTO.getDerAttrs().add(attributeTO(\"csvuserid\", null));\n+\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+        userTO = createUser(userTO, false);\n+        assertNotNull(userTO);\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, userTO.getId());\n+        assertNotNull(connObjectTO);\n+\n+        // check if password has not changed\n+        assertEquals(\"password0\", connObjectTO.getAttrMap().\n+                get(OperationalAttributes.PASSWORD_NAME).getValues().get(0));\n+        assertNull(userTO.getPassword());\n+\n+        // 3. create user with not null password and propagate onto resource-csv, specify not to save password on\n+        // Syncope local storage\n+        userTO = getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n+        userTO.setPassword(\"passwordTESTNULL\");\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attributeTO(\"csvuserid\", null));\n+\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+        userTO = createUser(userTO, false);\n+        assertNotNull(userTO);\n+\n+        connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, userTO.getId());\n+        assertNotNull(connObjectTO);\n+\n+        // check if password has been propagated and that saved userTO's password is null\n+        assertEquals(\"passwordTESTNULL\", connObjectTO.getAttrMap().\n+                get(OperationalAttributes.PASSWORD_NAME).getValues().get(0));\n+        assertNull(userTO.getPassword());\n+\n+        // 4. create user and propagate password on resource-csv and on Syncope local storage\n+        userTO = getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n+        userTO.setPassword(\"passwordTESTNULL\");\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attributeTO(\"csvuserid\", null));\n+\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+        // storePassword true by default\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, SubjectType.USER, userTO.getId());\n+        assertNotNull(connObjectTO);\n+\n+        // check if password has been correctly propagated on Syncope and resource-csv as usual\n+        assertEquals(\"passwordTESTNULL\", connObjectTO.getAttrMap().\n+                get(OperationalAttributes.PASSWORD_NAME).getValues().get(0));\n+        assertNotNull(userTO.getPassword());\n+\n+        // 4. add password policy to resource with passwordNotStore to false --> must store password\n+        ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);\n+        assertNotNull(csv);\n+        try {\n+            csv.setPasswordPolicy(4L);\n+            resourceService.update(RESOURCE_NAME_CSV, csv);\n+            csv = resourceService.read(RESOURCE_NAME_CSV);\n+\n+            userTO = getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n+            userTO.setPassword(null);\n+            userTO.getDerAttrs().clear();\n+            userTO.getVirAttrs().clear();\n+            userTO.getDerAttrs().add(attributeTO(\"csvuserid\", null));\n+\n+            userTO.getResources().add(RESOURCE_NAME_CSV);\n+            createUser(userTO, false);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSyncopeUser, e.getType());\n+            assertTrue(e.getMessage().contains(\"Password must not be null and must be stored internally\"));\n+        } finally {\n+            // resource csv with null password policy\n+            csv.setPasswordPolicy(null);\n+            resourceService.update(RESOURCE_NAME_CSV, csv);\n+        }\n+    }\n }"},{"sha":"a3c5c3c68a2abaaa6c96517dfb285ada83360227","filename":"core/src/test/java/org/apache/syncope/core/rest/VirAttrTestITCase.java","status":"modified","additions":67,"deletions":64,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -267,74 +267,77 @@ public void virAttrCache() {\n     @Test\n     public void issueSYNCOPE397() {\n         ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);\n-        // change mapping of resource-csv\n-        MappingTO origMapping = SerializationUtils.clone(csv.getUmapping());\n-        assertNotNull(origMapping);\n-        for (MappingItemTO item : csv.getUmapping().getItems()) {\n-            if (\"email\".equals(item.getIntAttrName())) {\n-                // unset internal attribute mail and set virtual attribute virtualdata as mapped to external email\n-                item.setIntMappingType(IntMappingType.UserVirtualSchema);\n-                item.setIntAttrName(\"virtualdata\");\n-                item.setPurpose(MappingPurpose.BOTH);\n-                item.setExtAttrName(\"email\");\n+        final MappingTO origMapping = SerializationUtils.clone(csv.getUmapping());\n+        try {\n+            // change mapping of resource-csv\n+            assertNotNull(origMapping);\n+            for (MappingItemTO item : csv.getUmapping().getItems()) {\n+                if (\"email\".equals(item.getIntAttrName())) {\n+                    // unset internal attribute mail and set virtual attribute virtualdata as mapped to external email\n+                    item.setIntMappingType(IntMappingType.UserVirtualSchema);\n+                    item.setIntAttrName(\"virtualdata\");\n+                    item.setPurpose(MappingPurpose.BOTH);\n+                    item.setExtAttrName(\"email\");\n+                }\n             }\n-        }\n \n-        resourceService.update(csv.getName(), csv);\n-        csv = resourceService.read(RESOURCE_NAME_CSV);\n-        assertNotNull(csv.getUmapping());\n+            resourceService.update(csv.getName(), csv);\n+            csv = resourceService.read(RESOURCE_NAME_CSV);\n+            assertNotNull(csv.getUmapping());\n \n-        boolean found = false;\n-        for (MappingItemTO item : csv.getUmapping().getItems()) {\n-            if (\"email\".equals(item.getExtAttrName()) && \"virtualdata\".equals(item.getIntAttrName())) {\n-                found = true;\n+            boolean found = false;\n+            for (MappingItemTO item : csv.getUmapping().getItems()) {\n+                if (\"email\".equals(item.getExtAttrName()) && \"virtualdata\".equals(item.getIntAttrName())) {\n+                    found = true;\n+                }\n             }\n-        }\n-\n-        assertTrue(found);\n \n-        // create a new user\n-        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"syncope397@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getDerAttrs().clear();\n-        userTO.getVirAttrs().clear();\n-\n-        userTO.getDerAttrs().add(attributeTO(\"csvuserid\", null));\n-        userTO.getDerAttrs().add(attributeTO(\"cn\", null));\n-        userTO.getVirAttrs().add(attributeTO(\"virtualdata\", \"test@testone.org\"));\n-        // assign resource-csv to user\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n-        // save user\n-        UserTO created = createUser(userTO);\n-        // make std controls about user\n-        assertNotNull(created);\n-        assertTrue(RESOURCE_NAME_CSV.equals(created.getResources().iterator().next()));\n-        // update user\n-        UserTO toBeUpdated = userService.read(created.getId());\n-        UserMod userMod = new UserMod();\n-        userMod.setId(toBeUpdated.getId());\n-        userMod.setPassword(\"password2\");\n-        // assign new resource to user\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS2);\n-        //modify virtual attribute\n-        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n-        userMod.getVirAttrsToUpdate().add(attributeMod(\"virtualdata\", \"test@testoneone.com\"));\n-\n-        // check Syncope change password\n-        StatusMod pwdPropRequest = new StatusMod();\n-        pwdPropRequest.setOnSyncope(true);\n-        pwdPropRequest.getResourceNames().add(RESOURCE_NAME_WS2);\n-        userMod.setPwdPropRequest(pwdPropRequest);\n-\n-        toBeUpdated = updateUser(userMod);\n-        assertNotNull(toBeUpdated);\n-        assertEquals(\"test@testoneone.com\", toBeUpdated.getVirAttrs().get(0).getValues().get(0));\n-        // check if propagates correctly with assertEquals on size of tasks list\n-        assertEquals(2, toBeUpdated.getPropagationStatusTOs().size());\n-        // restore mapping of resource-csv\n-        csv.setUmapping(origMapping);\n-        resourceService.update(csv.getName(), csv);\n+            assertTrue(found);\n+\n+            // create a new user\n+            UserTO userTO = UserTestITCase.getUniqueSampleTO(\"syncope397@syncope.apache.org\");\n+            userTO.getResources().clear();\n+            userTO.getMemberships().clear();\n+            userTO.getDerAttrs().clear();\n+            userTO.getVirAttrs().clear();\n+\n+            userTO.getDerAttrs().add(attributeTO(\"csvuserid\", null));\n+            userTO.getDerAttrs().add(attributeTO(\"cn\", null));\n+            userTO.getVirAttrs().add(attributeTO(\"virtualdata\", \"test@testone.org\"));\n+            // assign resource-csv to user\n+            userTO.getResources().add(RESOURCE_NAME_CSV);\n+            // save user\n+            UserTO created = createUser(userTO);\n+            // make std controls about user\n+            assertNotNull(created);\n+            assertTrue(RESOURCE_NAME_CSV.equals(created.getResources().iterator().next()));\n+            // update user\n+            UserTO toBeUpdated = userService.read(created.getId());\n+            UserMod userMod = new UserMod();\n+            userMod.setId(toBeUpdated.getId());\n+            userMod.setPassword(\"password2\");\n+            // assign new resource to user\n+            userMod.getResourcesToAdd().add(RESOURCE_NAME_WS2);\n+            //modify virtual attribute\n+            userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+            userMod.getVirAttrsToUpdate().add(attributeMod(\"virtualdata\", \"test@testoneone.com\"));\n+\n+            // check Syncope change password\n+            StatusMod pwdPropRequest = new StatusMod();\n+            pwdPropRequest.setOnSyncope(true);\n+            pwdPropRequest.getResourceNames().add(RESOURCE_NAME_WS2);\n+            userMod.setPwdPropRequest(pwdPropRequest);\n+\n+            toBeUpdated = updateUser(userMod);\n+            assertNotNull(toBeUpdated);\n+            assertEquals(\"test@testoneone.com\", toBeUpdated.getVirAttrs().get(0).getValues().get(0));\n+            // check if propagates correctly with assertEquals on size of tasks list\n+            assertEquals(2, toBeUpdated.getPropagationStatusTOs().size());\n+        } finally {\n+            // restore mapping of resource-csv\n+            csv.setUmapping(origMapping);\n+            resourceService.update(csv.getName(), csv);\n+        }\n     }\n \n     @Test\n@@ -750,7 +753,7 @@ public void issueSYNCOPE501() {\n \n         final StatusMod statusMod = new StatusMod();\n         statusMod.getResourceNames().addAll(Collections.<String>emptySet());\n-        statusMod.setOnSyncope(Boolean.FALSE);\n+        statusMod.setOnSyncope(false);\n \n         userMod.setPwdPropRequest(statusMod);\n         // change virtual attribute value"},{"sha":"67662a01262e34be10139327e5f5630f8315eca9","filename":"core/src/test/resources/content.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7948f5c8ca06f84681bcb4501058400fabce47f3/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=7948f5c8ca06f84681bcb4501058400fabce47f3","patch":"@@ -72,19 +72,19 @@ under the License.\n   <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"global sync policy\" type=\"GLOBAL_SYNC\" \n           specification='{\"userJavaRule\":null,\"roleJavaRule\":null,\"conflictResolutionAction\":\"IGNORE\",\"userAltSearchSchemas\":[],\"roleAltSearchSchemas\":[]}'/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"2\" description=\"global password policy\" type=\"GLOBAL_PASSWORD\" \n-          specification='{\"historyLength\":1,\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+          specification='{\"historyLength\":1,\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[],\"allowNullPassword\":true}'/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"3\" description=\"sync policy 2\" type=\"SYNC\" \n           specification='{\"userJavaRule\":null,\"roleJavaRule\":null,\"conflictResolutionAction\":\"ALL\",\"userAltSearchSchemas\":[\"username\",\"firstname\"],\"roleAltSearchSchemas\":[]}'/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"4\" description=\"sample password policy\" type=\"PASSWORD\" \n-          specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+          specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[], \"allowNullPassword\":false}'/>\n   <Policy DTYPE=\"AccountPolicy\" id=\"5\" description=\"global account policy\" type=\"GLOBAL_ACCOUNT\" \n           specification='{\"maxLength\":0,\"minLength\":0,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"propagateSuspension\":false,\"permittedLoginRetries\":0,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[],\"suffixesNotPermitted\":[]}'/>\n   <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" \n           specification='{\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"propagateSuspension\":false,\"permittedLoginRetries\":3,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"7\" description=\"sync policy 1\" type=\"SYNC\" \n           specification='{\"userJavaRule\":null,\"roleJavaRule\":null,\"conflictResolutionAction\":\"IGNORE\",\"userAltSearchSchemas\":[],\"roleAltSearchSchemas\":[]}'/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"8\" description=\"sample password policy\" type=\"PASSWORD\" \n-          specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+          specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[],\"allowNullPassword\":false}'/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"9\" description=\"sync policy for java rule\" type=\"SYNC\" \n           specification='{\"userJavaRule\":null,\"roleJavaRule\":null,\"conflictResolutionAction\":\"IGNORE\",\"userAltSearchSchemas\":[],\"roleAltSearchSchemas\":[]}'/>\n     \n@@ -966,7 +966,7 @@ under the License.\n   <Task DTYPE=\"SyncTask\" id=\"26\" name=\"CSV (ignore matching; assign unmatching)\" resource_name=\"resource-csv\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\"/>\n-      \n+\n   <Notification id=\"1\" sender=\"test@syncope.apache.org\" subject=\"Test subject\" template=\"test\" selfAsRecipient=\"0\" traceLevel=\"ALL\"\n                 userAbout=\"fullname==*o*;fullname==*i*\"\n                 recipients=\"$roles==7\""}]}