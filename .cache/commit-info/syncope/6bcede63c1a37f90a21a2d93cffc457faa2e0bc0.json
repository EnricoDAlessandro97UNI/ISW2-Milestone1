{"sha":"6bcede63c1a37f90a21a2d93cffc457faa2e0bc0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZiY2VkZTYzYzFhMzdmOTBhMjFhMmQ5M2NmZmM0NTdmYWEyZTBiYzA=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-07T16:47:24Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-07T16:47:24Z"},"message":"[SYNCOPE-259]\nIntroduces Workflow Service.\nTest Case needs to be extended to be of real value!\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1429889 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c4601c6e292204c354284bb07413b8009b0896a1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c4601c6e292204c354284bb07413b8009b0896a1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6bcede63c1a37f90a21a2d93cffc457faa2e0bc0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6bcede63c1a37f90a21a2d93cffc457faa2e0bc0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6bcede63c1a37f90a21a2d93cffc457faa2e0bc0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6bcede63c1a37f90a21a2d93cffc457faa2e0bc0/comments","author":null,"committer":null,"parents":[{"sha":"26f7ba0cdac007fc34ae82fab0d1d928963b38cb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/26f7ba0cdac007fc34ae82fab0d1d928963b38cb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/26f7ba0cdac007fc34ae82fab0d1d928963b38cb"}],"stats":{"total":315,"additions":252,"deletions":63},"files":[{"sha":"628641853032ac3fbe7300b934ea4a540c0d417e","filename":"client/src/main/java/org/apache/syncope/services/WorkflowService.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6bcede63c1a37f90a21a2d93cffc457faa2e0bc0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6bcede63c1a37f90a21a2d93cffc457faa2e0bc0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FWorkflowService.java?ref=6bcede63c1a37f90a21a2d93cffc457faa2e0bc0","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+\r\n+import org.apache.syncope.client.to.WorkflowDefinitionTO;\r\n+\r\n+@Path(\"workflows\")\r\n+public interface WorkflowService {\r\n+\r\n+    @GET\r\n+    @Path(\"{type}\")\r\n+    //    @RequestMapping(method = RequestMethod.GET, value = \"/definition/user\")\r\n+    //    @RequestMapping(method = RequestMethod.GET, value = \"/definition/role\")\r\n+    WorkflowDefinitionTO getDefinition(@PathParam(\"type\") final String type);\r\n+\r\n+\r\n+\r\n+    @PUT\r\n+    @Path(\"{type}\")\r\n+//    @RequestMapping(method = RequestMethod.PUT, value = \"/definition/user\")\r\n+//    @RequestMapping(method = RequestMethod.PUT, value = \"/definition/role\")\r\n+    void updateDefinition(@PathParam(\"type\") final String type, final WorkflowDefinitionTO definition);\r\n+\r\n+    @GET\r\n+    @Path(\"{type}/tasks\")\r\n+//    @RequestMapping(method = RequestMethod.GET, value = \"/tasks/user\")\r\n+    List<String> getDefinedTasks(@PathParam(\"type\") final String type);\r\n+}\n\\ No newline at end of file"},{"sha":"60729bd1079fe46996b0c80f4d739fa6bf87c818","filename":"client/src/main/java/org/apache/syncope/services/WorkflowServiceProxy.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6bcede63c1a37f90a21a2d93cffc457faa2e0bc0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FWorkflowServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6bcede63c1a37f90a21a2d93cffc457faa2e0bc0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FWorkflowServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FWorkflowServiceProxy.java?ref=6bcede63c1a37f90a21a2d93cffc457faa2e0bc0","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.client.to.WorkflowDefinitionTO;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class WorkflowServiceProxy extends SpringServiceProxy implements WorkflowService {\r\n+\r\n+    public WorkflowServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public WorkflowDefinitionTO getDefinition(String type) {\r\n+        return restTemplate\r\n+                .getForObject(BASE_URL + \"workflow/definition/\" + type, WorkflowDefinitionTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void updateDefinition(String type, WorkflowDefinitionTO definition) {\r\n+        restTemplate.put(BASE_URL + \"workflow/definition/\" + type, definition);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<String> getDefinedTasks(final String type) {\r\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"workflow/tasks/\" + type, String.class));\r\n+    }\r\n+\r\n+}\r"},{"sha":"8a4fec6f5df215494aa8bd58c1f3c627b29a6d63","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":61,"deletions":63,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6bcede63c1a37f90a21a2d93cffc457faa2e0bc0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6bcede63c1a37f90a21a2d93cffc457faa2e0bc0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=6bcede63c1a37f90a21a2d93cffc457faa2e0bc0","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.services.TaskServiceProxy;\n import org.apache.syncope.services.UserServiceProxy;\n import org.apache.syncope.services.PolicyServiceProxy;\n+import org.apache.syncope.services.WorkflowServiceProxy;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n import org.slf4j.Logger;\n@@ -45,90 +46,87 @@\n import org.springframework.web.client.RestTemplate;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:restClientContext.xml\",\n-\t\t\"classpath:testJDBCContext.xml\" })\n+@ContextConfiguration(locations = { \"classpath:restClientContext.xml\", \"classpath:testJDBCContext.xml\" })\n public abstract class AbstractTest {\n \n-\tprotected static AttributeTO attributeTO(final String schema,\n-\t\t\tfinal String value) {\n-\t\tAttributeTO attr = new AttributeTO();\n-\t\tattr.setSchema(schema);\n-\t\tattr.addValue(value);\n-\t\treturn attr;\n-\t}\n+    protected static AttributeTO attributeTO(final String schema, final String value) {\n+        AttributeTO attr = new AttributeTO();\n+        attr.setSchema(schema);\n+        attr.addValue(value);\n+        return attr;\n+    }\n \n-\tprotected static AttributeMod attributeMod(final String schema,\n-\t\t\tfinal String valueToBeAdded) {\n-\t\tAttributeMod attr = new AttributeMod();\n-\t\tattr.setSchema(schema);\n-\t\tattr.addValueToBeAdded(valueToBeAdded);\n-\t\treturn attr;\n-\t}\n+    protected static AttributeMod attributeMod(final String schema, final String valueToBeAdded) {\n+        AttributeMod attr = new AttributeMod();\n+        attr.setSchema(schema);\n+        attr.addValueToBeAdded(valueToBeAdded);\n+        return attr;\n+    }\n \n-\t/**\n-\t * Logger.\n-\t */\n-\tprotected static final Logger LOG = LoggerFactory\n-\t\t\t.getLogger(AbstractTest.class);\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractTest.class);\n \n-\tprotected static final String BASE_URL = \"http://localhost:9080/syncope/rest/\";\n+    protected static final String BASE_URL = \"http://localhost:9080/syncope/rest/\";\n \n-\tpublic static final String ADMIN_UID = \"admin\";\n+    public static final String ADMIN_UID = \"admin\";\n \n-\tpublic static final String ADMIN_PWD = \"password\";\n+    public static final String ADMIN_PWD = \"password\";\n \n-\tprotected PolicyServiceProxy policyService;\n+    protected PolicyServiceProxy policyService;\n \n-\t@Autowired\n-\tprotected RestTemplate restTemplate;\n+    @Autowired\n+    protected RestTemplate restTemplate;\n \n-\tprotected UserServiceProxy userService;\n+    protected UserServiceProxy userService;\n \n-\tprotected RoleServiceProxy roleService;\n+    protected RoleServiceProxy roleService;\n \n-\tprotected ResourceServiceProxy resourceService;\n+    protected ResourceServiceProxy resourceService;\n \n-\tprotected EntitlementServiceProxy entitlementService;\n+    protected EntitlementServiceProxy entitlementService;\n \n-\tprotected ConfigurationServiceProxy configurationService;\n+    protected ConfigurationServiceProxy configurationService;\n \n-\tprotected ConnectorServiceProxy connectorService;\n+    protected ConnectorServiceProxy connectorService;\n \n-\tprotected LoggerServiceProxy loggerService;\n+    protected LoggerServiceProxy loggerService;\n \n-\tprotected ReportServiceProxy reportService;\n+    protected ReportServiceProxy reportService;\n \n-\tprotected TaskServiceProxy taskService;\n+    protected TaskServiceProxy taskService;\n \n-\t@Autowired\n-\tprotected DataSource testDataSource;\n+    protected WorkflowServiceProxy workflowService;\n \n-\tprotected RestTemplate anonymousRestTemplate() {\n-\t\treturn new RestTemplate();\n-\t}\n+    @Autowired\n+    protected DataSource testDataSource;\n \n-\tpublic void setupRestTemplate(final String uid, final String pwd) {\n-\t\tPreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate\n-\t\t\t\t.getRequestFactory());\n+    protected RestTemplate anonymousRestTemplate() {\n+        return new RestTemplate();\n+    }\n \n-\t\t((DefaultHttpClient) requestFactory.getHttpClient())\n-\t\t\t\t.getCredentialsProvider().setCredentials(\n-\t\t\t\t\t\trequestFactory.getAuthScope(),\n-\t\t\t\t\t\tnew UsernamePasswordCredentials(uid, pwd));\n-\t}\n+    public void setupRestTemplate(final String uid, final String pwd) {\n+        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate\n+                .getRequestFactory());\n \n-\t@Before\n-\tpublic void resetRestTemplate() {\n-\t\tsetupRestTemplate(ADMIN_UID, ADMIN_PWD);\n-\t\tuserService = new UserServiceProxy(BASE_URL, restTemplate);\n-\t\troleService = new RoleServiceProxy(BASE_URL, restTemplate);\n-\t\tresourceService = new ResourceServiceProxy(BASE_URL, restTemplate);\n-\t\tentitlementService = new EntitlementServiceProxy(BASE_URL, restTemplate);\n-\t\tconfigurationService = new ConfigurationServiceProxy(BASE_URL, restTemplate);\n-\t\tconnectorService = new ConnectorServiceProxy(BASE_URL, restTemplate);\n-\t\tloggerService = new LoggerServiceProxy(BASE_URL, restTemplate);\n-\t\treportService = new ReportServiceProxy(BASE_URL, restTemplate);\n-\t\ttaskService = new TaskServiceProxy(BASE_URL, restTemplate);\n-\t\tpolicyService = new PolicyServiceProxy(BASE_URL, restTemplate);\n-\t}\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n+                requestFactory.getAuthScope(), new UsernamePasswordCredentials(uid, pwd));\n+    }\n+\n+    @Before\n+    public void resetRestTemplate() {\n+        setupRestTemplate(ADMIN_UID, ADMIN_PWD);\n+        userService = new UserServiceProxy(BASE_URL, restTemplate);\n+        roleService = new RoleServiceProxy(BASE_URL, restTemplate);\n+        resourceService = new ResourceServiceProxy(BASE_URL, restTemplate);\n+        entitlementService = new EntitlementServiceProxy(BASE_URL, restTemplate);\n+        configurationService = new ConfigurationServiceProxy(BASE_URL, restTemplate);\n+        connectorService = new ConnectorServiceProxy(BASE_URL, restTemplate);\n+        loggerService = new LoggerServiceProxy(BASE_URL, restTemplate);\n+        reportService = new ReportServiceProxy(BASE_URL, restTemplate);\n+        taskService = new TaskServiceProxy(BASE_URL, restTemplate);\n+        policyService = new PolicyServiceProxy(BASE_URL, restTemplate);\n+        workflowService = new WorkflowServiceProxy(BASE_URL, restTemplate);\n+    }\n }"},{"sha":"c0ab7baaf35013cb3c54f84cc18cb89bfbccc603","filename":"core/src/test/java/org/apache/syncope/core/rest/WorkflowTestITCase.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6bcede63c1a37f90a21a2d93cffc457faa2e0bc0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6bcede63c1a37f90a21a2d93cffc457faa2e0bc0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java?ref=6bcede63c1a37f90a21a2d93cffc457faa2e0bc0","patch":"@@ -0,0 +1,91 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.core.rest;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertNotNull;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.client.to.WorkflowDefinitionTO;\r\n+import org.junit.Ignore;\r\n+import org.junit.Test;\r\n+\r\n+public class WorkflowTestITCase extends AbstractTest {\r\n+\r\n+    public static final String ROLE_TYPE = \"role\";\r\n+\r\n+    public static final String USER_TYPE = \"role\";\r\n+\r\n+    @Test //TODO TestCase needs to be extended\r\n+    public void testGetUserDefinition() {\r\n+        WorkflowDefinitionTO definition = workflowService.getDefinition(USER_TYPE);\r\n+        assertNotNull(definition);\r\n+    }\r\n+\r\n+    @Test //TODO TestCase needs to be extended\r\n+    public void testGetRoleDefinition() {\r\n+        WorkflowDefinitionTO definition = workflowService.getDefinition(ROLE_TYPE);\r\n+        assertNotNull(definition);\r\n+    }\r\n+\r\n+    @Test\r\n+    @Ignore //TODO TestCase needs to be extended\r\n+    public void testUpdateUserDefinition() {\r\n+        WorkflowDefinitionTO definition = workflowService.getDefinition(USER_TYPE);\r\n+        assertNotNull(definition);\r\n+        String newID = (definition.getId() != null)\r\n+                ? definition.getId() + \"1\"\r\n+                : \"1\";\r\n+        definition.setId(newID);\r\n+        workflowService.updateDefinition(USER_TYPE, definition);\r\n+        WorkflowDefinitionTO newDefinition = workflowService.getDefinition(USER_TYPE);\r\n+        assertEquals(newID, newDefinition.getId());\r\n+    }\r\n+\r\n+    @Test\r\n+    @Ignore //TODO TestCase needs to be extended\r\n+    public void testUpdateRoleDefinition() {\r\n+        WorkflowDefinitionTO definition = workflowService.getDefinition(ROLE_TYPE);\r\n+        assertNotNull(definition);\r\n+        String newID = (definition.getId() != null)\r\n+                ? definition.getId() + \"1\"\r\n+                : \"1\";\r\n+        definition.setId(newID);\r\n+        workflowService.updateDefinition(ROLE_TYPE, definition);\r\n+        WorkflowDefinitionTO newDefinition = workflowService.getDefinition(ROLE_TYPE);\r\n+        assertEquals(newID, newDefinition.getId());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testGetUserTasks() {\r\n+        List<String> tasks = workflowService.getDefinedTasks(USER_TYPE);\r\n+        assertNotNull(tasks);\r\n+        assertTrue(tasks.size() > 0);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testGetRoleTasks() {\r\n+        List<String> tasks = workflowService.getDefinedTasks(ROLE_TYPE);\r\n+        assertNotNull(tasks);\r\n+        assertTrue(tasks.size() > 0);\r\n+    }\r\n+\r\n+}\n\\ No newline at end of file"}]}