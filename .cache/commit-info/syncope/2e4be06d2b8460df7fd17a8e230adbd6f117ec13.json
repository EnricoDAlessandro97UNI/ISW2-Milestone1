{"sha":"2e4be06d2b8460df7fd17a8e230adbd6f117ec13","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJlNGJlMDZkMmI4NDYwZGY3ZmQxN2E4ZTIzMGFkYmQ2ZjExN2VjMTM=","commit":{"author":{"name":"DimaAy","email":"dima.ayash@tirasa.net","date":"2020-08-06T09:03:53Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-08-06T09:03:53Z"},"message":"[SYNCOPE-1584] WA events management (#210)\n\n* [SYNCOPE-1584] WA events management\r\n\r\naddd ITcase\r\n\r\nadd wa test\r\n\r\nwa audit test\r\n\r\n* rename","tree":{"sha":"9f1d912114f06643133fdfea3d43b558f0ba38ec","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9f1d912114f06643133fdfea3d43b558f0ba38ec"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2e4be06d2b8460df7fd17a8e230adbd6f117ec13","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfK8d5CRBK7hj4Ov3rIwAAdHIIAAr6w+ad+3wWD0UFPsSkEgLB\nnk9Pyzr7fNTrpRAwFvdQV7KMcMvqwxN6ZJ6aD4brqorkwBmckOEJ4kzoe+jSMUq6\nnN5V7MnWJHg9FcbgjXg28Wf+5XeDxxWC605NwGMYX7ZkeWWIEo0MGJTj1IJrn8Sd\nw1Da9XB7zD0OEHSfuaDB3YOEIsywuo3DLN4l6Hv4qjogJ5liqSE6ZiKA49krTHzj\nlTLYzHQqMtpY/LPtOdJKQmbWPzdrSuOM4i+Yhyjf4+6b7BXU9SSDQK4ifa2woA0O\nePVFWA1uqmIfsj5oef0+KnogbjWSsaslE1CHICQjQVL+iCIrkirxEOxz7A5chlo=\n=TBGU\n-----END PGP SIGNATURE-----\n","payload":"tree 9f1d912114f06643133fdfea3d43b558f0ba38ec\nparent 820433819b7f021c2e9c772ce01391b7d58cb138\nauthor DimaAy <dima.ayash@tirasa.net> 1596704633 +0200\ncommitter GitHub <noreply@github.com> 1596704633 +0200\n\n[SYNCOPE-1584] WA events management (#210)\n\n* [SYNCOPE-1584] WA events management\r\n\r\naddd ITcase\r\n\r\nadd wa test\r\n\r\nwa audit test\r\n\r\n* rename"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2e4be06d2b8460df7fd17a8e230adbd6f117ec13","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2e4be06d2b8460df7fd17a8e230adbd6f117ec13","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/comments","author":{"login":"DimaAy","id":19169906,"node_id":"MDQ6VXNlcjE5MTY5OTA2","avatar_url":"https://avatars.githubusercontent.com/u/19169906?v=4","gravatar_id":"","url":"https://api.github.com/users/DimaAy","html_url":"https://github.com/DimaAy","followers_url":"https://api.github.com/users/DimaAy/followers","following_url":"https://api.github.com/users/DimaAy/following{/other_user}","gists_url":"https://api.github.com/users/DimaAy/gists{/gist_id}","starred_url":"https://api.github.com/users/DimaAy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DimaAy/subscriptions","organizations_url":"https://api.github.com/users/DimaAy/orgs","repos_url":"https://api.github.com/users/DimaAy/repos","events_url":"https://api.github.com/users/DimaAy/events{/privacy}","received_events_url":"https://api.github.com/users/DimaAy/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"820433819b7f021c2e9c772ce01391b7d58cb138","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/820433819b7f021c2e9c772ce01391b7d58cb138","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/820433819b7f021c2e9c772ce01391b7d58cb138"}],"stats":{"total":290,"additions":284,"deletions":6},"files":[{"sha":"17f3dd451ee38258105913de198b71d0765dd4dc","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=2e4be06d2b8460df7fd17a8e230adbd6f117ec13","patch":"@@ -2482,6 +2482,8 @@ $$ }&#10;\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n \n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[WA]:[LoggerLogic]:[AUTHENTICATION]:[validate]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+      \n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[WA]:[LoggerLogic]:[AuthenticationEvent]:[auth]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n \n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[ConnectorLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[ConnectorLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>"},{"sha":"227350fedc32415608c2d9fc5e8c3da06ced5fbc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=2e4be06d2b8460df7fd17a8e230adbd6f117ec13","patch":"@@ -298,6 +298,33 @@ public void saveAuditEvent() {\n         assertNotNull(events);\n         assertEquals(1, events.getSize());\n     }\n+    \n+    @Test\n+    public void saveAuthEvent() {\n+        AuditEntry auditEntry = new AuditEntry();\n+        auditEntry.setWho(\"syncope-user \" + UUID.randomUUID().toString());\n+        auditEntry.setLogger(new AuditLoggerName(\n+                EventCategoryType.WA,\n+                \"LoggerLogic\",\n+                \"AuthenticationEvent\",\n+                \"auth\",\n+                AuditElements.Result.SUCCESS));\n+        auditEntry.setDate(new Date());\n+        auditEntry.setBefore(UUID.randomUUID().toString());\n+        auditEntry.setOutput(UUID.randomUUID().toString());\n+        assertDoesNotThrow(() -> loggerService.create(auditEntry));\n+\n+        PagedResult<AuditEntry> events = loggerService.search(new AuditQuery.Builder().\n+                size(1).\n+                type(auditEntry.getLogger().getType()).\n+                category(auditEntry.getLogger().getCategory()).\n+                subcategory(auditEntry.getLogger().getSubcategory()).\n+                event(auditEntry.getLogger().getEvent()).\n+                result(auditEntry.getLogger().getResult()).\n+                build());\n+        assertNotNull(events);\n+        assertEquals(1, events.getSize());\n+    }\n \n     @Test\n     public void customAuditAppender() throws IOException, InterruptedException {"},{"sha":"a7372d6fbef6bfe2358e727c7f6c31160763fa6e","filename":"pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=2e4be06d2b8460df7fd17a8e230adbd6f117ec13","patch":"@@ -1400,6 +1400,11 @@ under the License.\n         <artifactId>cas-server-core-audit</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-core-events-api</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n         <artifactId>cas-server-core-authentication</artifactId>"},{"sha":"2b9e7fd67cc598d327251bc1eabb8d1a4f8f0623","filename":"wa/starter/pom.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=2e4be06d2b8460df7fd17a8e230adbd6f117ec13","patch":"@@ -74,6 +74,10 @@ under the License.\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-core-audit-api</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-core-events-api</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-core-cookie</artifactId>"},{"sha":"42f1adcd04d3331be753b71eea46c812f28f5eec","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/audit/SyncopeWAAuditTrailManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java?ref=2e4be06d2b8460df7fd17a8e230adbd6f117ec13","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.wa.starter.audit;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n import java.time.LocalDate;\n import java.util.Map;\n import java.util.Set;\n@@ -76,7 +77,7 @@ protected void saveAuditRecord(final AuditActionContext audit) {\n \n             auditEntry.setLogger(auditLogger);\n             syncopeClient.getService(LoggerService.class).create(auditEntry);\n-        } catch (Exception e) {\n+        } catch (JsonProcessingException e) {\n             LOG.error(\"During serialization\", e);\n         }\n     }"},{"sha":"421b2a53bbb956b432d52ea374211af152aa5b01","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":22,"deletions":5,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=2e4be06d2b8460df7fd17a8e230adbd6f117ec13","patch":"@@ -26,11 +26,6 @@\n import org.apache.commons.lang3.StringUtils;\n import com.warrenstrange.googleauth.IGoogleAuthenticator;\n import io.swagger.v3.oas.models.security.SecurityScheme;\n-import java.time.LocalDate;\n-import java.time.ZoneId;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.Map;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n@@ -79,6 +74,15 @@\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n \n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.syncope.wa.starter.events.SyncopeWAEventRepository;\n+import org.apereo.cas.support.events.CasEventRepository;\n+import org.apereo.cas.support.events.CasEventRepositoryFilter;\n+\n public class SyncopeWAConfiguration {\n \n     @Autowired\n@@ -196,6 +200,19 @@ public AuditTrailExecutionPlanConfigurer auditConfigurer(final WARestClient rest\n         return plan -> plan.registerAuditTrailManager(new SyncopeWAAuditTrailManager(restClient));\n     }\n \n+    @ConditionalOnMissingBean(name = \"syncopWaEventRepositoryFilter\")\n+    @Bean\n+    public CasEventRepositoryFilter syncopeWAEventRepositoryFilter() {\n+        return CasEventRepositoryFilter.noOp();\n+    }\n+\n+    @Autowired\n+    @Bean\n+    public CasEventRepository casEventRepository(final WARestClient restClient) {\n+        return new SyncopeWAEventRepository(syncopeWAEventRepositoryFilter(), restClient);\n+    }\n+\n+\n     @Autowired\n     @Bean\n     public DelegatedClientFactoryCustomizer<Client<?>> delegatedClientCustomizer(final WARestClient restClient) {"},{"sha":"fdcb4c3c6421bf69831103eac346f8058bc22683","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/events/SyncopeWAEventRepository.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepository.java?ref=2e4be06d2b8460df7fd17a8e230adbd6f117ec13","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.events;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.common.rest.api.service.LoggerService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apereo.cas.support.events.CasEventRepositoryFilter;\n+import org.apereo.cas.support.events.dao.AbstractCasEventRepository;\n+import org.apereo.cas.support.events.dao.CasEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SyncopeWAEventRepository extends AbstractCasEventRepository {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAEventRepository.class);\n+\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    private final WARestClient waRestClient;\n+\n+    public SyncopeWAEventRepository(final CasEventRepositoryFilter eventRepositoryFilter,\n+            final WARestClient restClient) {\n+        super(eventRepositoryFilter);\n+        this.waRestClient = restClient;\n+    }\n+\n+    public void put(final Map<String, String> properties, final String key, final String value) {\n+        if (StringUtils.isNotBlank(value)) {\n+            properties.put(key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void saveInternal(final CasEvent event) {\n+        SyncopeClient syncopeClient = waRestClient.getSyncopeClient();\n+        if (syncopeClient == null) {\n+            LOG.debug(\"Syncope client is not yet ready to store audit record\");\n+            return;\n+        }\n+\n+        LOG.info(\"Saving Cas events\");\n+        try {\n+            Map<String, String> properties = new HashMap<>();\n+            if (event.getGeoLocation() != null) {\n+                put(properties, \"geoLatitude\", event.getGeoLocation().getLatitude());\n+                put(properties, \"geoLongitude\", event.getGeoLocation().getLongitude());\n+                put(properties, \"geoAccuracy\", event.getGeoLocation().getAccuracy());\n+                put(properties, \"geoTimestamp\", event.getGeoLocation().getTimestamp());\n+            }\n+            put(properties, \"clientIpAddress\", event.getClientIpAddress());\n+            put(properties, \"serverIpAddress\", event.getServerIpAddress());\n+\n+            String output = OBJECT_MAPPER.writeValueAsString(properties);\n+\n+            AuditEntry auditEntry = new AuditEntry();\n+            auditEntry.setWho(event.getPrincipalId());\n+            if (event.getTimestamp() != null) {\n+                auditEntry.setDate(new Date(event.getTimestamp()));\n+            }\n+            auditEntry.setOutput(output);\n+            AuditLoggerName auditLogger = new AuditLoggerName(AuditElements.EventCategoryType.WA,\n+                    \"LoggerLogic\", event.getType().toUpperCase(),\n+                    String.valueOf(event.getId()), AuditElements.Result.SUCCESS);\n+            auditEntry.setLogger(auditLogger);\n+            syncopeClient.getService(LoggerService.class).create(auditEntry);\n+        } catch (JsonProcessingException e) {\n+            LOG.error(\"During serialization\", e);\n+        }\n+    }\n+\n+    @Override\n+    public Collection<? extends CasEvent> load() {\n+        throw new UnsupportedOperationException(\"Fetching authentication events from WA is not supported\");\n+    }\n+\n+}"},{"sha":"79d2a6438cd5e2c565e12f7bd79efb262f65d853","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/audit/SyncopeWAAuditTrailManagerTest.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManagerTest.java?ref=2e4be06d2b8460df7fd17a8e230adbd6f117ec13","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.audit;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Date;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.rest.api.service.LoggerService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apache.syncope.wa.starter.AbstractTest;\n+import org.apereo.inspektr.audit.AuditActionContext;\n+import org.junit.jupiter.api.Test;\n+\n+public class SyncopeWAAuditTrailManagerTest extends AbstractTest {\n+\n+    private static LoggerService loggerService;\n+\n+    private static WARestClient getWaRestClient() {\n+        WARestClient restClient = mock(WARestClient.class);\n+        SyncopeClient syncopeClient = mock(SyncopeClient.class);\n+        loggerService = mock(LoggerService.class);\n+\n+        when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n+        when(syncopeClient.getService(LoggerService.class)).thenReturn(loggerService);\n+\n+        return restClient;\n+    }\n+\n+    @Test\n+    public void saveAuditRecord() {\n+        AuditActionContext audit = new AuditActionContext(\"principal\", \"resourceOperatedUpon\", \"actionPerformed\",\n+                \"applicationCode\", new Date(), \"clientIpAddress\", \"serverIpAddress\");\n+        SyncopeWAAuditTrailManager auditTrailManager = new SyncopeWAAuditTrailManager(getWaRestClient());\n+        auditTrailManager.saveAuditRecord(audit);\n+        verify(loggerService).create(any(AuditEntry.class));\n+    }\n+\n+}"},{"sha":"e823ed317c7829a868a783abcbb32118cfb9d3ff","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/events/SyncopeWAEventRepositoryTest.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepositoryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2e4be06d2b8460df7fd17a8e230adbd6f117ec13/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepositoryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepositoryTest.java?ref=2e4be06d2b8460df7fd17a8e230adbd6f117ec13","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.events;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Map;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.rest.api.service.LoggerService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apache.syncope.wa.starter.AbstractTest;\n+import org.apereo.cas.support.events.CasEventRepositoryFilter;\n+import org.apereo.cas.support.events.dao.CasEvent;\n+import org.junit.jupiter.api.Test;\n+\n+public class SyncopeWAEventRepositoryTest extends AbstractTest {\n+\n+    private static LoggerService loggerService;\n+\n+    private static WARestClient getWaRestClient() {\n+        WARestClient restClient = mock(WARestClient.class);\n+        SyncopeClient syncopeClient = mock(SyncopeClient.class);\n+        loggerService = mock(LoggerService.class);\n+\n+        when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n+        when(syncopeClient.getService(LoggerService.class)).thenReturn(loggerService);\n+\n+        return restClient;\n+    }\n+\n+    @Test\n+    public void saveInternal() {\n+        CasEvent event = new CasEvent(1L, \"Auth\", \"principalId\", \"creationTime\", Map.of(\"timestamp\", \"1\"));\n+        SyncopeWAEventRepository eventRepository = new SyncopeWAEventRepository(CasEventRepositoryFilter.noOp(),\n+                getWaRestClient());\n+        eventRepository.saveInternal(event);\n+        verify(loggerService).create(any(AuditEntry.class));\n+    }\n+\n+}"}]}