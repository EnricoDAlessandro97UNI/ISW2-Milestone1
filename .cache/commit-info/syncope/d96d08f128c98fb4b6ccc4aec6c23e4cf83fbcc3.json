{"sha":"d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ5NmQwOGYxMjhjOThmYjRiNmNjYzRhZWM2YzIzZTRjZjgzZmJjYzM=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-07-27T12:55:09Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-07-27T12:55:09Z"},"message":"SYNCOPE-1580: Manage WA Configuration Properties/Schema (#207)","tree":{"sha":"aaeb3f27067af868250929734f0ec57b53419d5a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/aaeb3f27067af868250929734f0ec57b53419d5a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfHs6tCRBK7hj4Ov3rIwAAdHIIAG0sQ+IRBQhe1xy+MERpFryO\nmMFboJUNJnm7gkPvzZRTL4EURTWStNoY4mb13Z9YWYXLdzKJR8ldtBLm4qi/ULJq\nXDkW355xfbGXw+a8F/hMghBjwJlihiMXLJl0k8WiNzFv37yyEWrsQlh0Bwxytmv1\nG3G66AHR3vclMI+ISZxGqN/r4YvIYiSoM2oqAZ9bBdju+QsFSVxMXS4EyWYEn4UQ\nageU/+ME4H2JdJRyyBEag+KatZR/YV15J0HKshPGg3jxdEX8vQUNJgIr4Fy36gRI\n5dh/v9PpsM9USB19g+VpD+iHU1Rrggnx0yh7jPXTnhYrwjqZwMBJ5mTsvcKr2iM=\n=jmv2\n-----END PGP SIGNATURE-----\n","payload":"tree aaeb3f27067af868250929734f0ec57b53419d5a\nparent 5cdbcf4031c2a9e458180b22cc166bca1b1b37bf\nauthor Misagh Moayyed <mm1844@gmail.com> 1595854509 +0400\ncommitter GitHub <noreply@github.com> 1595854509 +0430\n\nSYNCOPE-1580: Manage WA Configuration Properties/Schema (#207)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"5cdbcf4031c2a9e458180b22cc166bca1b1b37bf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5cdbcf4031c2a9e458180b22cc166bca1b1b37bf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5cdbcf4031c2a9e458180b22cc166bca1b1b37bf"}],"stats":{"total":1131,"additions":1022,"deletions":109},"files":[{"sha":"2be85c9ea2e7faf532f9bab238ca7be10075e885","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -118,6 +118,18 @@ public final class AMEntitlement {\n \n     public static final String U2F_UPDATE_DEVICE = \"U2F_UPDATE_DEVICE\";\n \n+    public static final String WA_CONFIG_LIST = \"WA_CONFIG_LIST\";\n+\n+    public static final String WA_CONFIG_UPDATE = \"WA_CONFIG_UPDATE\";\n+\n+    public static final String WA_CONFIG_DELETE = \"WA_CONFIG_DELETE\";\n+\n+    public static final String WA_CONFIG_READ = \"WA_CONFIG_READ\";\n+\n+    public static final String WA_CONFIG_CREATE = \"WA_CONFIG_CREATE\";\n+\n+    public static final String WA_CONFIG_PUSH = \"WA_CONFIG_PUSH\";\n+\n     private static final Set<String> VALUES;\n \n     static {"},{"sha":"82fa78c3fec6b471d4f55cff229f256151233038","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WAConfigService.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAConfigService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAConfigService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAConfigService.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service.wa;\n+\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import java.util.List;\n+\n+/**\n+ * REST operations for WA Configuration.\n+ */\n+@Tag(name = \"WA\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\")})\n+@Path(\"wa/config\")\n+public interface WAConfigService extends JAXRSService {\n+\n+    @GET\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    List<Attr> list();\n+\n+    @GET\n+    @Path(\"{key}\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    Attr read(@NotNull @PathParam(\"key\") String key);\n+\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"201\",\n+            description = \"WAConfigTO successfully created\", headers = {\n+            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+            @Schema(type = \"string\"),\n+                description = \"UUID generated for the entity created\"),\n+            @Header(name = HttpHeaders.LOCATION, schema =\n+            @Schema(type = \"string\"),\n+                description = \"URL of the entity created\")}),\n+        @ApiResponse(responseCode = \"409\",\n+            description = \"Config already existing\")})\n+    @POST\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    Response create(@NotNull Attr configTO);\n+    \n+    @PUT\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    void update(Attr configTO);\n+\n+    @DELETE\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"{key}\")\n+    void delete(@NotNull @PathParam(\"key\") String key);\n+\n+    @ApiResponses(\n+        @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @POST\n+    @Path(\"push\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void pushToWA();\n+}"},{"sha":"f3158de0e49e095bc4b972df16380fb59035ab50","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/WAConfigLogic.java","status":"added","additions":161,"deletions":0,"changes":161,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWAConfigLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWAConfigLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWAConfigLogic.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.transport.http.auth.DefaultBasicAuthSupplier;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n+import org.apache.syncope.core.provisioning.api.data.WAConfigDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.annotation.Resource;\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.core.HttpHeaders;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class WAConfigLogic extends AbstractTransactionalLogic<EntityTO> {\n+    @Autowired\n+    private ServiceOps serviceOps;\n+\n+    @Autowired\n+    private WAConfigDataBinder binder;\n+\n+    @Autowired\n+    private WAConfigDAO configDAO;\n+\n+    @Resource(name = \"anonymousUser\")\n+    private String anonymousUser;\n+\n+    @Resource(name = \"anonymousKey\")\n+    private String anonymousKey;\n+\n+    @Override\n+    protected EntityTO resolveReference(final Method method, final Object... args)\n+        throws UnresolvedReferenceException {\n+        String key = null;\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof Attr) {\n+                    key = ((Attr) args[i]).getSchema();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                Attr attr = binder.getAttr(configDAO.find(key));\n+                return new EntityTO() {\n+                    private static final long serialVersionUID = -2683326649597260323L;\n+                    @Override\n+                    public String getKey() {\n+                        return attr.getSchema();\n+                    }\n+\n+                    @Override\n+                    public void setKey(final String key) {\n+                    }\n+                };\n+            } catch (final Throwable e) {\n+                LOG.debug(\"Unresolved reference\", e);\n+                throw new UnresolvedReferenceException(e);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_LIST + \"') or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<Attr> list() {\n+        return configDAO.findAll().stream().map(binder::getAttr).collect(Collectors.toList());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_UPDATE + \"')\")\n+    public void update(final Attr configTO) {\n+        WAConfigEntry entry = configDAO.find(configTO.getSchema());\n+        if (entry == null) {\n+            throw new NotFoundException(\"Configuration entry \" + configTO.getSchema() + \" not found\");\n+        }\n+        binder.update(entry, configTO);\n+        configDAO.save(entry);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_DELETE + \"')\")\n+    public void delete(final String key) {\n+        configDAO.delete(key);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_READ + \"') or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public Attr read(final String key) {\n+        WAConfigEntry entry = configDAO.find(key);\n+        if (entry == null) {\n+            throw new NotFoundException(\"Configuration entry \" + key + \" not found\");\n+        }\n+        return binder.getAttr(entry);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_CREATE + \"')\")\n+    public Attr create(final Attr configTO) {\n+        return binder.getAttr(configDAO.save(binder.create(configTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_PUSH + \"')\")\n+    public void pushToWA() {\n+        try {\n+            NetworkService wa = serviceOps.get(NetworkService.Type.WA);\n+            HttpClient.newBuilder().build().send(\n+                HttpRequest.newBuilder(URI.create(\n+                    StringUtils.appendIfMissing(wa.getAddress(), \"/\") + \"actuator/refresh\")).\n+                    header(HttpHeaders.AUTHORIZATION,\n+                        DefaultBasicAuthSupplier.getBasicAuthHeader(anonymousUser, anonymousKey)).\n+                    POST(HttpRequest.BodyPublishers.noBody()).build(),\n+                HttpResponse.BodyHandlers.discarding());\n+        } catch (KeymasterException e) {\n+            throw new NotFoundException(\"Could not find any WA instance\", e);\n+        } catch (IOException | InterruptedException e) {\n+            throw new InternalServerErrorException(\"Errors while communicating with WA instance\", e);\n+        }\n+    }\n+}"},{"sha":"d8ad501f60166a8b0d30a6fb38f880cab351aab1","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WAConfigServiceImpl.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAConfigServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAConfigServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAConfigServiceImpl.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.rest.cxf.service.wa;\n+\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.wa.WAConfigService;\n+import org.apache.syncope.core.logic.WAConfigLogic;\n+import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.net.URI;\n+import java.util.List;\n+\n+@Service\n+public class WAConfigServiceImpl extends AbstractServiceImpl implements WAConfigService {\n+    @Autowired\n+    private WAConfigLogic logic;\n+\n+    @Override\n+    public List<Attr> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public Attr read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response create(final Attr configTO) {\n+        final Attr config = logic.create(configTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(config.getSchema()).build();\n+        return Response.created(location).\n+            header(RESTHeaders.RESOURCE_KEY, config.getSchema()).\n+            entity(config).\n+            build();\n+    }\n+\n+    @Override\n+    public void update(final Attr configTO) {\n+        logic.update(configTO);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+    @Override\n+    public void pushToWA() {\n+        logic.pushToWA();\n+    }\n+}"},{"sha":"7fff8a6d8d4390c1e2114c9ed4383c1addad272a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/WAConfigDAO.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FWAConfigDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FWAConfigDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FWAConfigDAO.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.DAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n+\n+import java.util.List;\n+\n+public interface WAConfigDAO extends DAO<WAConfigEntry> {\n+\n+    WAConfigEntry find(String key);\n+\n+    List<WAConfigEntry> findAll();\n+\n+    WAConfigEntry save(WAConfigEntry configEntry);\n+\n+    void delete(String key);\n+\n+    void delete(WAConfigEntry configEntry);\n+\n+    void deleteAll();\n+\n+}"},{"sha":"f4cc6cf9b7c2ba90398b9c1839129ce28074bd5d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/WAConfigEntry.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FWAConfigEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FWAConfigEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FWAConfigEntry.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.auth;\n+\n+import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n+\n+import java.util.List;\n+\n+public interface WAConfigEntry extends ProvidedKeyEntity {\n+\n+    List<String> getValues();\n+\n+    void setValues(List<String> value);\n+}"},{"sha":"af82fbdcdb5f5af747d21594505f629d8a356e03","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAWAConfigDAO.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAWAConfigDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAWAConfigDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAWAConfigDAO.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.persistence.jpa.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n+import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAWAConfigEntry;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n+\n+import java.util.List;\n+\n+@Repository\n+public class JPAWAConfigDAO extends AbstractDAO<WAConfigEntry> implements WAConfigDAO {\n+    @Transactional(readOnly = true)\n+    @Override\n+    public WAConfigEntry find(final String key) {\n+        return entityManager().find(JPAWAConfigEntry.class, key);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<WAConfigEntry> findAll() {\n+        TypedQuery<WAConfigEntry> query = entityManager().createQuery(\n+            \"SELECT e FROM \" + JPAWAConfigEntry.class.getSimpleName() + \" e\", WAConfigEntry.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public WAConfigEntry save(final WAConfigEntry configEntry) {\n+        return entityManager().merge(configEntry);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        WAConfigEntry entry = find(key);\n+        if (entry == null) {\n+            return;\n+        }\n+        delete(entry);\n+    }\n+\n+    @Override\n+    public void delete(final WAConfigEntry configEntry) {\n+        entityManager().remove(configEntry);\n+    }\n+\n+    @Override\n+    public void deleteAll() {\n+        Query delete = entityManager().createQuery(\"DELETE FROM \" + JPAWAConfigEntry.class.getSimpleName());\n+        delete.executeUpdate();\n+    }\n+}"},{"sha":"333ba5001ebed529f0fc5c1f745b108e9a138b3d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -65,6 +65,7 @@\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n+import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n@@ -121,6 +122,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SP;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPKeystore;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPMetadata;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAWAConfigEntry;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n@@ -345,6 +347,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAAuthProfile();\n         } else if (reference.equals(OIDCJWKS.class)) {\n             result = (E) new JPAOIDCJWKS();\n+        } else if (reference.equals(WAConfigEntry.class)) {\n+            result = (E) new JPAWAConfigEntry();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }"},{"sha":"bd75c1c7c9c32491d7b838703a3fcf85f4d2e2d0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAWAConfigEntry.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAWAConfigEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAWAConfigEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAWAConfigEntry.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.auth;\n+\n+import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n+\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.Table;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Entity\n+@Table(name = JPAWAConfigEntry.TABLE)\n+public class JPAWAConfigEntry extends AbstractProvidedKeyEntity implements WAConfigEntry {\n+    public static final String TABLE = \"ConfigEntry\";\n+\n+    private static final long serialVersionUID = 6422422526695279794L;\n+\n+    @ElementCollection\n+    @CollectionTable(name = TABLE + \"Values\", joinColumns = @JoinColumn(name = \"id\"))\n+    @Column(nullable = false)\n+    private List<String> values = new ArrayList<>();\n+\n+    @Override\n+    public List<String> getValues() {\n+        return values;\n+    }\n+\n+    public void setValues(final List<String> values) {\n+        this.values = values;\n+    }\n+}"},{"sha":"eab1ae6fd75ae9cc2b33d3083b0785b43758fbdc","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/WAConfigTest.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FWAConfigTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FWAConfigTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FWAConfigTest.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@Transactional(\"Master\")\n+public class WAConfigTest extends AbstractTest {\n+\n+    @Autowired\n+    private WAConfigDAO configDAO;\n+\n+    @BeforeEach\n+    public void beforeEach() {\n+        configDAO.deleteAll();\n+    }\n+\n+    @Test\n+    public void saveCommaSeparatedValueStrings() {\n+        create(\"system.example.key[0]\", Arrays.asList(\"value1\", \"value2\", \"value3\"));\n+        assertFalse(configDAO.findAll().isEmpty());\n+    }\n+\n+    @Test\n+    public void saveNumbers() {\n+        create(\"system.example.key[0]\", List.of(\"1984\"));\n+        assertFalse(configDAO.findAll().isEmpty());\n+    }\n+\n+    @Test\n+    public void saveCollection() {\n+        WAConfigEntry entry = create(\"system.example.key[0]\", new ArrayList<>(Arrays.asList(\"1\", \"2\")));\n+        assertNotNull(entry.getValues());\n+        assertFalse(configDAO.findAll().isEmpty());\n+    }\n+\n+    @Test\n+    public void saveMap() {\n+        HashMap<String, Double> map = new HashMap<>();\n+        create(\"system.example.key[0].key1\", List.of(\"value1\"));\n+        assertFalse(configDAO.findAll().isEmpty());\n+    }\n+\n+    @Test\n+    public void update() {\n+        WAConfigEntry entry = create(\"system.syncope.key[0]\", Arrays.asList(\"1\", \"2\", \"3\", \"4\"));\n+        assertNotNull(entry);\n+        entry.setValues(List.of(\"v1\"));\n+\n+        entry = configDAO.save(entry);\n+        assertNotNull(entry);\n+        assertNotNull(entry.getKey());\n+        WAConfigEntry found = configDAO.find(entry.getKey());\n+        assertNotNull(found);\n+        assertEquals(List.of(\"v1\"), found.getValues());\n+    }\n+\n+    private WAConfigEntry create(final String name, final List<String> value) {\n+        WAConfigEntry entry = entityFactory.newEntity(WAConfigEntry.class);\n+        entry.setKey(name);\n+        entry.setValues(value);\n+        configDAO.save(entry);\n+        assertNotNull(entry);\n+        assertNotNull(entry.getKey());\n+        assertNotNull(configDAO.find(entry.getKey()));\n+        return entry;\n+    }\n+\n+}"},{"sha":"0faa17aa9fc75d86c0f0c396682866260ed16cb7","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/WAConfigDataBinder.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FWAConfigDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FWAConfigDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FWAConfigDataBinder.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n+\n+public interface WAConfigDataBinder {\n+    Attr getAttr(WAConfigEntry waConfigEntry);\n+\n+    WAConfigEntry create(Attr config);\n+\n+    WAConfigEntry update(WAConfigEntry entry, Attr config);\n+}"},{"sha":"b67db28f7137f117908fed5fbfa7dcd14f1cd1bb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/WAConfigDataBinderImpl.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FWAConfigDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FWAConfigDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FWAConfigDataBinderImpl.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n+import org.apache.syncope.core.provisioning.api.data.WAConfigDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class WAConfigDataBinderImpl implements WAConfigDataBinder {\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    public Attr getAttr(final WAConfigEntry waConfigEntry) {\n+        return new Attr.Builder(waConfigEntry.getKey()).values(waConfigEntry.getValues()).build();\n+    }\n+\n+    @Override\n+    public WAConfigEntry create(final Attr configTO) {\n+        return update(entityFactory.newEntity(WAConfigEntry.class), configTO);\n+    }\n+\n+    @Override\n+    public WAConfigEntry update(final WAConfigEntry entry, final Attr configTO) {\n+        return getConfigEntry(entry, configTO);\n+    }\n+\n+    private WAConfigEntry getConfigEntry(\n+        final WAConfigEntry configEntry,\n+        final Attr config) {\n+\n+        WAConfigEntry result = configEntry;\n+        if (result == null) {\n+            result = entityFactory.newEntity(WAConfigEntry.class);\n+        }\n+        result.setValues(config.getValues());\n+        result.setKey(config.getSchema());\n+        return result;\n+    }\n+}"},{"sha":"a4f69c4b5757f8569c12d2452817c63555f6bb4a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -146,6 +146,7 @@\n import org.apache.syncope.common.rest.api.service.SRARouteService;\n import org.apache.syncope.common.rest.api.service.UserWorkflowTaskService;\n import org.apache.syncope.common.rest.api.service.wa.U2FRegistrationService;\n+import org.apache.syncope.common.rest.api.service.wa.WAConfigService;\n import org.apache.syncope.fit.core.CoreITContext;\n import org.apache.syncope.fit.core.UserITCase;\n import org.junit.jupiter.api.BeforeAll;\n@@ -340,6 +341,8 @@ public abstract class AbstractITCase {\n \n     protected static U2FRegistrationService u2FRegistrationService;\n \n+    protected static WAConfigService waConfigService;\n+\n     @BeforeAll\n     public static void securitySetup() {\n         try (InputStream propStream = AbstractITCase.class.getResourceAsStream(\"/security.properties\")) {\n@@ -419,6 +422,7 @@ public static void restSetup() {\n         authProfileService = adminClient.getService(AuthProfileService.class);\n         oidcJWKSService = adminClient.getService(OIDCJWKSService.class);\n         u2FRegistrationService = adminClient.getService(U2FRegistrationService.class);\n+        waConfigService = adminClient.getService(WAConfigService.class);\n     }\n \n     @Autowired"},{"sha":"0fc7b6866d68ae38021622944a4abc7cd0ba785a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/WAConfigITCase.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAConfigITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAConfigITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAConfigITCase.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class WAConfigITCase extends AbstractITCase {\n+    private static Attr runTest(final List<String> initialValue, final List<String> updatedValue) {\n+        Attr configTO = new Attr.Builder(UUID.randomUUID().toString())\n+            .values(initialValue)\n+            .build();\n+        Response response = waConfigService.create(configTO);\n+        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n+        assertNotNull(key);\n+\n+        assertFalse(waConfigService.list().isEmpty());\n+\n+        configTO = waConfigService.read(key);\n+        assertNotNull(configTO);\n+\n+        configTO = new Attr.Builder(configTO.getSchema())\n+            .values(updatedValue)\n+            .build();\n+        waConfigService.update(configTO);\n+\n+        Attr updatedTO = waConfigService.read(key);\n+        updatedTO.getValues().stream().allMatch(((Collection) updatedValue)::contains);\n+        return updatedTO;\n+    }\n+\n+    private static <T extends Serializable> void deleteEntry(final Attr configTO) {\n+        waConfigService.delete(configTO.getSchema());\n+        assertThrows(SyncopeClientException.class, () -> waConfigService.read(configTO.getSchema()));\n+    }\n+\n+    @Test\n+    public void verify() {\n+        deleteEntry(runTest(List.of(\"v1\", \"v2\"), List.of(\"newValue\")));\n+        deleteEntry(runTest(List.of(\"12345\"), List.of(\"98765\")));\n+        deleteEntry(runTest(List.of(\"123.45\"), List.of(\"987.65\")));\n+        deleteEntry(runTest(List.of(\"1\", \"2\", \"3\"), List.of(\"4\", \"5\", \"6\")));\n+    }\n+}"},{"sha":"566082c130984c216f80e1aeb3c06832c0c656a0","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":177,"deletions":84,"changes":261,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -18,26 +18,27 @@\n  */\n package org.apache.syncope.wa.bootstrap;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n import org.apereo.cas.configuration.CasCoreConfigurationUtils;\n+import org.apereo.cas.configuration.model.core.authentication.AuthenticationProperties;\n import org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.jdbc.JdbcAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorProperties;\n import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorProperties;\n+import org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jGenericOidcClientProperties;\n import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jOidcClientProperties;\n import org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties;\n import org.apereo.cas.configuration.model.support.radius.RadiusProperties;\n import org.apereo.cas.configuration.model.support.syncope.SyncopeAuthenticationProperties;\n import org.apereo.cas.util.model.TriStateBoolean;\n+\n+import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;\n+import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n@@ -52,6 +53,7 @@\n import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n import org.apache.syncope.common.rest.api.service.AuthModuleService;\n+import org.apache.syncope.common.rest.api.service.wa.WAConfigService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n@@ -60,6 +62,11 @@\n import org.springframework.core.env.MapPropertySource;\n import org.springframework.core.env.PropertySource;\n \n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n @Order\n public class SyncopeWAPropertySourceLocator implements PropertySourceLocator {\n \n@@ -71,41 +78,51 @@ public SyncopeWAPropertySourceLocator(final WARestClient waRestClient) {\n         this.waRestClient = waRestClient;\n     }\n \n-    private static String mapAuthModule(\n-            final CasConfigurationProperties casProperties,\n-            final String authModule,\n-            final SyncopeAuthModuleConf conf,\n-            final String address) {\n+    private static Map<String, Object> mapAuthModule(\n+\n+        final String authModule,\n+        final SyncopeAuthModuleConf conf,\n+        final String address) {\n \n         SyncopeAuthenticationProperties syncopeProps = new SyncopeAuthenticationProperties();\n         syncopeProps.setName(authModule);\n         syncopeProps.setDomain(conf.getDomain());\n         syncopeProps.setUrl(StringUtils.substringBefore(address, \"/rest\"));\n \n+        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n         casProperties.getAuthn().setSyncope(syncopeProps);\n-        return \"cas.authn.syncope.\";\n+        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n+        filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n+            SimpleBeanPropertyFilter.filterOutAllExcept(\n+                CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                    AuthenticationProperties::getSyncope)));\n+        return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static String mapAuthModule(\n-            final CasConfigurationProperties casProperties,\n-            final String authModule,\n-            final StaticAuthModuleConf conf) {\n+    private static Map<String, Object> mapAuthModule(\n+        final String authModule,\n+        final StaticAuthModuleConf conf) {\n \n         AcceptAuthenticationProperties staticProps = new AcceptAuthenticationProperties();\n         staticProps.setName(authModule);\n         String users = conf.getUsers().entrySet().stream().\n-                map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n-                collect(Collectors.joining(\",\"));\n+            map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n+            collect(Collectors.joining(\",\"));\n         staticProps.setUsers(users);\n \n+        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n+        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         casProperties.getAuthn().setAccept(staticProps);\n-        return \"cas.authn.accept.\";\n+        filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n+            SimpleBeanPropertyFilter.filterOutAllExcept(\n+                CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                    AuthenticationProperties::getAccept)));\n+        return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static String mapAuthModule(\n-            final CasConfigurationProperties casProperties,\n-            final String authModule,\n-            final LDAPAuthModuleConf conf) {\n+    private static Map<String, Object> mapAuthModule(\n+        final String authModule,\n+        final LDAPAuthModuleConf conf) {\n \n         LdapAuthenticationProperties ldapProps = new LdapAuthenticationProperties();\n         ldapProps.setName(authModule);\n@@ -117,14 +134,19 @@ private static String mapAuthModule(\n         ldapProps.setSubtreeSearch(conf.isSubtreeSearch());\n         ldapProps.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n \n+        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n+        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         casProperties.getAuthn().getLdap().add(ldapProps);\n-        return \"cas.authn.ldap.\";\n+        filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n+            SimpleBeanPropertyFilter.filterOutAllExcept(\n+                CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                    AuthenticationProperties::getLdap)));\n+        return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static String mapAuthModule(\n-            final CasConfigurationProperties casProperties,\n-            final String authModule,\n-            final GoogleMfaAuthModuleConf conf) {\n+    private static Map<String, Object> mapAuthModule(\n+        final String authModule,\n+        final GoogleMfaAuthModuleConf conf) {\n \n         GoogleAuthenticatorMultifactorProperties props = new GoogleAuthenticatorMultifactorProperties();\n         props.setName(authModule);\n@@ -134,14 +156,24 @@ private static String mapAuthModule(\n         props.setTimeStepSize(conf.getTimeStepSize());\n         props.setWindowSize(conf.getWindowSize());\n \n+        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n+        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         casProperties.getAuthn().getMfa().setGauth(props);\n-        return \"cas.authn.mfa.gauth.\";\n+        filterProvider.\n+            addFilter(AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                        AuthenticationProperties::getMfa))).\n+            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(MultifactorAuthenticationProperties.class,\n+                        MultifactorAuthenticationProperties::getGauth)));\n+        return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static String mapAuthModule(\n-            final CasConfigurationProperties casProperties,\n-            final String authModule,\n-            final U2FAuthModuleConf conf) {\n+    private static Map<String, Object> mapAuthModule(\n+        final String authModule,\n+        final U2FAuthModuleConf conf) {\n \n         U2FMultifactorProperties props = new U2FMultifactorProperties();\n         props.setName(authModule);\n@@ -150,14 +182,25 @@ private static String mapAuthModule(\n         props.setExpireRegistrations(conf.getExpireRegistrations());\n         props.setExpireRegistrationsTimeUnit(TimeUnit.valueOf(conf.getExpireRegistrationsTimeUnit()));\n \n+        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n+        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         casProperties.getAuthn().getMfa().setU2f(props);\n-        return \"cas.authn.mfa.u2f.\";\n+\n+        filterProvider.\n+            addFilter(AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                        AuthenticationProperties::getMfa))).\n+            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(MultifactorAuthenticationProperties.class,\n+                        MultifactorAuthenticationProperties::getU2f)));\n+        return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static String mapAuthModule(\n-            final CasConfigurationProperties casProperties,\n-            final String authModule,\n-            final JaasAuthModuleConf conf) {\n+    private static Map<String, Object> mapAuthModule(\n+        final String authModule,\n+        final JaasAuthModuleConf conf) {\n \n         JaasAuthenticationProperties props = new JaasAuthenticationProperties();\n         props.setName(authModule);\n@@ -167,14 +210,20 @@ private static String mapAuthModule(\n         props.setLoginConfigType(conf.getLoginConfigurationFile());\n         props.setRealm(conf.getRealm());\n \n+        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n+        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         casProperties.getAuthn().getJaas().add(props);\n-        return \"cas.authn.jaas.\";\n+\n+        filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n+            SimpleBeanPropertyFilter.filterOutAllExcept(\n+                CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                    AuthenticationProperties::getJaas)));\n+        return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static String mapAuthModule(\n-            final CasConfigurationProperties casProperties,\n-            final String authModule,\n-            final JDBCAuthModuleConf conf) {\n+    private static Map<String, Object> mapAuthModule(\n+        final String authModule,\n+        final JDBCAuthModuleConf conf) {\n \n         QueryJdbcAuthenticationProperties props = new QueryJdbcAuthenticationProperties();\n         props.setName(authModule);\n@@ -189,14 +238,25 @@ private static String mapAuthModule(\n         props.setUser(conf.getUser());\n         props.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n \n+        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n+        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         casProperties.getAuthn().getJdbc().getQuery().add(props);\n-        return \"cas.authn.jdbc.query.\";\n+\n+        filterProvider.\n+            addFilter(AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                        AuthenticationProperties::getJdbc))).\n+            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(JdbcAuthenticationProperties.class,\n+                        JdbcAuthenticationProperties::getQuery)));\n+        return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static String mapAuthModule(\n-            final CasConfigurationProperties casProperties,\n-            final String authModule,\n-            final OIDCAuthModuleConf conf) {\n+    private static Map<String, Object> mapAuthModule(\n+        final String authModule,\n+        final OIDCAuthModuleConf conf) {\n \n         Pac4jGenericOidcClientProperties props = new Pac4jGenericOidcClientProperties();\n         props.setId(conf.getId());\n@@ -213,14 +273,25 @@ private static String mapAuthModule(\n         Pac4jOidcClientProperties client = new Pac4jOidcClientProperties();\n         client.setGeneric(props);\n \n+        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n+        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         casProperties.getAuthn().getPac4j().getOidc().add(client);\n-        return \"cas.authn.pac4j.oidc.\";\n+\n+        filterProvider.\n+            addFilter(AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                        AuthenticationProperties::getPac4j))).\n+            addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(Pac4jDelegatedAuthenticationProperties.class,\n+                        Pac4jDelegatedAuthenticationProperties::getOidc)));\n+        return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static String mapAuthModule(\n-            final CasConfigurationProperties casProperties,\n-            final String authModule,\n-            final RadiusAuthModuleConf conf) {\n+    private static Map<String, Object> mapAuthModule(\n+        final String authModule,\n+        final RadiusAuthModuleConf conf) {\n \n         RadiusProperties props = new RadiusProperties();\n         props.setName(authModule);\n@@ -241,14 +312,20 @@ private static String mapAuthModule(\n         props.getServer().setProtocol(conf.getProtocol());\n         props.getServer().setRetries(conf.getRetries());\n \n+        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n+        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         casProperties.getAuthn().setRadius(props);\n-        return \"cas.authn.radius.\";\n+        filterProvider.\n+            addFilter(AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                        AuthenticationProperties::getRadius)));\n+        return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static String mapAuthModule(\n-            final CasConfigurationProperties casProperties,\n-            final String authModule,\n-            final SAML2IdPAuthModuleConf conf) {\n+    private static Map<String, Object> mapAuthModule(\n+        final String authModule,\n+        final SAML2IdPAuthModuleConf conf) {\n \n         Pac4jSamlClientProperties props = new Pac4jSamlClientProperties();\n         props.setClientName(authModule);\n@@ -272,11 +349,36 @@ private static String mapAuthModule(\n         props.setSignatureReferenceDigestMethods(conf.getSignatureReferenceDigestMethods());\n         props.setPrincipalAttributeId(conf.getUserIdAttribute());\n         props.setNameIdPolicyAllowCreate(StringUtils.isBlank(conf.getNameIdPolicyAllowCreate())\n-                ? TriStateBoolean.UNDEFINED\n-                : TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n+            ? TriStateBoolean.UNDEFINED\n+            : TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n \n+        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n+        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         casProperties.getAuthn().getPac4j().getSaml().add(props);\n-        return \"cas.authn.pac4j.saml.\";\n+\n+        filterProvider.\n+            addFilter(AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                        AuthenticationProperties::getPac4j))).\n+            addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                    CasCoreConfigurationUtils.getPropertyName(Pac4jDelegatedAuthenticationProperties.class,\n+                        Pac4jDelegatedAuthenticationProperties::getSaml)));\n+        return filterCasProperties(casProperties, filterProvider);\n+    }\n+\n+    private static SimpleFilterProvider getParentCasFilterProvider() {\n+        return new SimpleFilterProvider().\n+            setFailOnUnknownId(false).\n+            addFilter(CasConfigurationProperties.class.getSimpleName(), SimpleBeanPropertyFilter.filterOutAllExcept(\n+                CasCoreConfigurationUtils.getPropertyName(CasConfigurationProperties.class,\n+                    CasConfigurationProperties::getAuthn)));\n+    }\n+\n+    private static Map<String, Object> filterCasProperties(final CasConfigurationProperties casProperties,\n+                                                           final SimpleFilterProvider filters) {\n+        return CasCoreConfigurationUtils.asMap(casProperties.withHolder(), filters);\n     }\n \n     @Override\n@@ -288,48 +390,39 @@ public PropertySource<?> locate(final Environment environment) {\n         }\n \n         LOG.info(\"Bootstrapping WA configuration\");\n-\n-        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        List<String> filters = new ArrayList<>();\n+        Map<String, Object> properties = new TreeMap<>();\n \n         syncopeClient.getService(AuthModuleService.class).list().forEach(authModuleTO -> {\n             AuthModuleConf authConf = authModuleTO.getConf();\n             LOG.debug(\"Mapping auth module {} \", authModuleTO.getKey());\n \n             if (authConf instanceof LDAPAuthModuleConf) {\n-                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (LDAPAuthModuleConf) authConf));\n+                properties.putAll(mapAuthModule(authModuleTO.getKey(), (LDAPAuthModuleConf) authConf));\n             } else if (authConf instanceof StaticAuthModuleConf) {\n-                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (StaticAuthModuleConf) authConf));\n+                properties.putAll(mapAuthModule(authModuleTO.getKey(), (StaticAuthModuleConf) authConf));\n             } else if (authConf instanceof SyncopeAuthModuleConf) {\n-                filters.add(mapAuthModule(\n-                        casProperties,\n-                        authModuleTO.getKey(),\n-                        (SyncopeAuthModuleConf) authConf,\n-                        waRestClient.getSyncopeClient().getAddress()));\n+                properties.putAll(mapAuthModule(authModuleTO.getKey(),\n+                    (SyncopeAuthModuleConf) authConf, syncopeClient.getAddress()));\n             } else if (authConf instanceof GoogleMfaAuthModuleConf) {\n-                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (GoogleMfaAuthModuleConf) authConf));\n+                properties.putAll(mapAuthModule(authModuleTO.getKey(), (GoogleMfaAuthModuleConf) authConf));\n             } else if (authConf instanceof JaasAuthModuleConf) {\n-                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (JaasAuthModuleConf) authConf));\n+                properties.putAll(mapAuthModule(authModuleTO.getKey(), (JaasAuthModuleConf) authConf));\n             } else if (authConf instanceof JDBCAuthModuleConf) {\n-                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (JDBCAuthModuleConf) authConf));\n+                properties.putAll(mapAuthModule(authModuleTO.getKey(), (JDBCAuthModuleConf) authConf));\n             } else if (authConf instanceof OIDCAuthModuleConf) {\n-                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (OIDCAuthModuleConf) authConf));\n+                properties.putAll(mapAuthModule(authModuleTO.getKey(), (OIDCAuthModuleConf) authConf));\n             } else if (authConf instanceof RadiusAuthModuleConf) {\n-                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (RadiusAuthModuleConf) authConf));\n+                properties.putAll(mapAuthModule(authModuleTO.getKey(), (RadiusAuthModuleConf) authConf));\n             } else if (authConf instanceof SAML2IdPAuthModuleConf) {\n-                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (SAML2IdPAuthModuleConf) authConf));\n+                properties.putAll(mapAuthModule(authModuleTO.getKey(), (SAML2IdPAuthModuleConf) authConf));\n             } else if (authConf instanceof U2FAuthModuleConf) {\n-                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (U2FAuthModuleConf) authConf));\n+                properties.putAll(mapAuthModule(authModuleTO.getKey(), (U2FAuthModuleConf) authConf));\n             }\n         });\n \n-        Map<String, Object> properties = CasCoreConfigurationUtils.asMap(casProperties.withHolder()).\n-                entrySet().stream().\n-                filter(entry -> filters.stream().filter(Objects::nonNull).\n-                anyMatch(prefix -> entry.getKey().startsWith(prefix))).\n-                collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+        syncopeClient.getService(WAConfigService.class).list()\n+            .forEach(configTO -> properties.put(configTO.getSchema(), configTO.getValues()));\n         LOG.debug(\"Collected WA properties: {}\", properties);\n-\n         return new MapPropertySource(getClass().getName(), properties);\n     }\n }"},{"sha":"bcb7adc61a50e88f07a6a8e4cb6d41fb526b2e0c","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeCoreTestingServer.java","status":"modified","additions":25,"deletions":25,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java?ref=d96d08f128c98fb4b6ccc4aec6c23e4cf83fbcc3","patch":"@@ -19,17 +19,6 @@\n package org.apache.syncope.wa.starter;\n \n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.UUID;\n-import java.util.stream.Collectors;\n-\n-import javax.validation.constraints.NotNull;\n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.Response;\n-\n import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;\n import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n@@ -45,13 +34,24 @@\n import org.springframework.context.event.ContextRefreshedEvent;\n import org.springframework.stereotype.Component;\n \n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.core.Response;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n @Component\n public class SyncopeCoreTestingServer implements ApplicationListener<ContextRefreshedEvent> {\n \n-    private static final String ADDRESS = \"http://localhost:9080/syncope/rest\";\n-\n     public static final List<WAClientApp> APPS = new ArrayList<>();\n \n+    private static final String ADDRESS = \"http://localhost:9080/syncope/rest\";\n+\n     @Autowired\n     private ServiceOps serviceOps;\n \n@@ -64,11 +64,11 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n                 sf.setAddress(ADDRESS);\n                 sf.setResourceClasses(WAClientAppService.class, GoogleMfaAuthTokenService.class);\n                 sf.setResourceProvider(\n-                        WAClientAppService.class,\n-                        new SingletonResourceProvider(new StubWAClientAppService(), true));\n+                    WAClientAppService.class,\n+                    new SingletonResourceProvider(new StubWAClientAppService(), true));\n                 sf.setResourceProvider(\n-                        GoogleMfaAuthTokenService.class,\n-                        new SingletonResourceProvider(new StubGoogleMfaAuthTokenService(), true));\n+                    GoogleMfaAuthTokenService.class,\n+                    new SingletonResourceProvider(new StubGoogleMfaAuthTokenService(), true));\n                 sf.setProviders(List.of(new JacksonJsonProvider()));\n                 sf.create();\n \n@@ -125,16 +125,16 @@ public Response save(@NotNull final GoogleMfaAuthToken tokenTO) {\n         @Override\n         public GoogleMfaAuthToken findTokenFor(@NotNull final String owner, @NotNull final Integer token) {\n             return tokens.stream()\n-                    .filter(to -> to.getToken().equals(token) && to.getOwner().equalsIgnoreCase(owner))\n-                    .findFirst().get();\n+                .filter(to -> to.getToken().equals(token) && to.getOwner().equalsIgnoreCase(owner))\n+                .findFirst().get();\n         }\n \n         @Override\n         public PagedResult<GoogleMfaAuthToken> findTokensFor(@NotNull final String user) {\n             PagedResult<GoogleMfaAuthToken> result = new PagedResult<>();\n             result.getResult().addAll(tokens.stream().\n-                    filter(to -> to.getOwner().equalsIgnoreCase(user)).\n-                    collect(Collectors.toList()));\n+                filter(to -> to.getOwner().equalsIgnoreCase(user)).\n+                collect(Collectors.toList()));\n             result.setSize(result.getResult().size());\n             result.setTotalCount(result.getSize());\n             return result;\n@@ -143,8 +143,8 @@ public PagedResult<GoogleMfaAuthToken> findTokensFor(@NotNull final String user)\n         @Override\n         public GoogleMfaAuthToken findTokenFor(@NotNull final String key) {\n             return tokens.stream()\n-                    .filter(to -> to.getKey().equalsIgnoreCase(key))\n-                    .findFirst().get();\n+                .filter(to -> to.getKey().equalsIgnoreCase(key))\n+                .findFirst().get();\n         }\n \n         @Override\n@@ -166,13 +166,13 @@ public List<WAClientApp> list() {\n         @Override\n         public WAClientApp read(final Long clientAppId, final ClientAppType type) {\n             return APPS.stream().filter(app -> Objects.equals(clientAppId, app.getClientAppTO().getClientAppId())).\n-                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with clientId \" + clientAppId));\n+                findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with clientId \" + clientAppId));\n         }\n \n         @Override\n         public WAClientApp read(final String name, final ClientAppType type) {\n             return APPS.stream().filter(app -> Objects.equals(name, app.getClientAppTO().getName())).\n-                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with name \" + name));\n+                findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with name \" + name));\n         }\n     }\n }"}]}