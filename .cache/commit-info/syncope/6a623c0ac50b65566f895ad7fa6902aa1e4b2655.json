{"sha":"6a623c0ac50b65566f895ad7fa6902aa1e4b2655","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZhNjIzYzBhYzUwYjY1NTY2Zjg5NWFkN2ZhNjkwMmFhMWU0YjI2NTU=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-09T09:15:52Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-09T09:15:52Z"},"message":"[SYNCOPE-259]\nIntroduces User Request Service.\nChanged visibility from restTemplate in AbstractTest to private and fixed all references in SubClasses.\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1430743 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3ce8354843703e39c659cd7988ee165ad9e53b96","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3ce8354843703e39c659cd7988ee165ad9e53b96"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6a623c0ac50b65566f895ad7fa6902aa1e4b2655","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6a623c0ac50b65566f895ad7fa6902aa1e4b2655","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6a623c0ac50b65566f895ad7fa6902aa1e4b2655","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/comments","author":null,"committer":null,"parents":[{"sha":"add964dd453c9e59b4c6e5b714c3aff078e7f428","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/add964dd453c9e59b4c6e5b714c3aff078e7f428","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/add964dd453c9e59b4c6e5b714c3aff078e7f428"}],"stats":{"total":287,"additions":205,"deletions":82},"files":[{"sha":"226991c00c60d2f766d0f8412eaeaae155d5da2a","filename":"client/src/main/java/org/apache/syncope/services/UserRequestService.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserRequestService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserRequestService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserRequestService.java?ref=6a623c0ac50b65566f895ad7fa6902aa1e4b2655","patch":"@@ -0,0 +1,70 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+\r\n+import org.apache.syncope.client.mod.UserMod;\r\n+import org.apache.syncope.client.to.UserRequestTO;\r\n+import org.apache.syncope.client.to.UserTO;\r\n+\r\n+@Path(\"requests/users\")\r\n+public interface UserRequestService {\r\n+\r\n+    @GET\r\n+    @Path(\"create/allowed\")\r\n+    //    @RequestMapping(method = RequestMethod.GET, value = \"/create/allowed\")\r\n+    boolean isCreateAllowed();\r\n+\r\n+    @POST\r\n+    @Path(\"create\")\r\n+    //    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\r\n+    UserRequestTO create(final UserTO userTO);\r\n+\r\n+    @POST\r\n+    @Path(\"update\")\r\n+    //    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\r\n+    UserRequestTO update(final UserMod userMod);\r\n+\r\n+    @POST\r\n+    @Path(\"delete\")\r\n+    //    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{userId}\")\r\n+    UserRequestTO delete(final Long userId);\r\n+\r\n+    @GET\r\n+    //    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\r\n+    List<UserRequestTO> list();\r\n+\r\n+    @GET\r\n+    @Path(\"{requestId}\")\r\n+    //    @RequestMapping(method = RequestMethod.GET, value = \"/read/{requestId}\")\r\n+    UserRequestTO read(@PathParam(\"requestId\") final Long requestId);\r\n+\r\n+    @DELETE\r\n+    @Path(\"{requestId}\")\r\n+    //    @RequestMapping(method = RequestMethod.GET, value = \"/deleteRequest/{requestId}\")\r\n+    UserRequestTO deleteRequest(@PathParam(\"requestId\") final Long requestId);\r\n+\r\n+}\n\\ No newline at end of file"},{"sha":"8aadcc886999d86eefa3ed8d06991d69d642f8af","filename":"client/src/main/java/org/apache/syncope/services/proxy/UserRequestServiceProxy.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserRequestServiceProxy.java?ref=6a623c0ac50b65566f895ad7fa6902aa1e4b2655","patch":"@@ -0,0 +1,75 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services.proxy;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.client.mod.UserMod;\r\n+import org.apache.syncope.client.to.UserRequestTO;\r\n+import org.apache.syncope.client.to.UserTO;\r\n+import org.apache.syncope.services.UserRequestService;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class UserRequestServiceProxy extends SpringServiceProxy implements UserRequestService {\r\n+\r\n+    public UserRequestServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean isCreateAllowed() {\r\n+        // TODO Auto-generated method stub\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public UserRequestTO create(UserTO userTO) {\r\n+        return restTemplate.postForObject(baseUrl + \"user/request/create\", userTO, UserRequestTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public UserRequestTO update(UserMod userMod) {\r\n+        return restTemplate.postForObject(baseUrl + \"user/request/update\", userMod, UserRequestTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public UserRequestTO delete(Long userId) {\r\n+        return restTemplate.getForObject(baseUrl + \"user/request/delete/{userId}\", UserRequestTO.class,\r\n+                userId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<UserRequestTO> list() {\r\n+        // TODO Auto-generated method stub\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public UserRequestTO read(Long requestId) {\r\n+        // TODO Auto-generated method stub\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public UserRequestTO deleteRequest(Long requestId) {\r\n+        // TODO Auto-generated method stub\r\n+        return null;\r\n+    }\r\n+\r\n+}\r"},{"sha":"bb8623bc7c3296308767c5b2bba5ee332a93ab61","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserRequestController.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java?ref=6a623c0ac50b65566f895ad7fa6902aa1e4b2655","patch":"@@ -20,7 +20,9 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+\n import javax.persistence.RollbackException;\n+\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.to.UserRequestTO;\n import org.apache.syncope.client.to.UserTO;"},{"sha":"55a31f266eebc19812fd83882abdb81f6bb4b007","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=6a623c0ac50b65566f895ad7fa6902aa1e4b2655","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.services.RoleService;\n import org.apache.syncope.services.SchemaService;\n import org.apache.syncope.services.TaskService;\n+import org.apache.syncope.services.UserRequestService;\n import org.apache.syncope.services.UserService;\n import org.apache.syncope.services.WorkflowService;\n import org.apache.syncope.services.proxy.ConfigurationServiceProxy;\n@@ -48,6 +49,7 @@\n import org.apache.syncope.services.proxy.RoleServiceProxy;\n import org.apache.syncope.services.proxy.SchemaServiceProxy;\n import org.apache.syncope.services.proxy.TaskServiceProxy;\n+import org.apache.syncope.services.proxy.UserRequestServiceProxy;\n import org.apache.syncope.services.proxy.UserServiceProxy;\n import org.apache.syncope.services.proxy.WorkflowServiceProxy;\n import org.junit.Before;\n@@ -91,7 +93,7 @@ protected static AttributeMod attributeMod(final String schema, final String val\n     protected PolicyServiceProxy policyService;\n \n     @Autowired\n-    protected RestTemplate restTemplate;\n+    private RestTemplate restTemplate;\n \n     protected UserService userService;\n \n@@ -117,6 +119,8 @@ protected static AttributeMod attributeMod(final String schema, final String val\n \n     protected SchemaService schemaService;\n \n+    protected UserRequestService userRequestService;\n+\n     @Autowired\n     protected DataSource testDataSource;\n \n@@ -148,5 +152,6 @@ public void resetRestTemplate() {\n         workflowService = new WorkflowServiceProxy(BASE_URL, restTemplate);\n         notificationService = new NotificationServiceProxy(BASE_URL, restTemplate);\n         schemaService = new SchemaServiceProxy(BASE_URL, restTemplate);\n+        userRequestService = new UserRequestServiceProxy(BASE_URL, restTemplate);\n     }\n }"},{"sha":"c3c82b1d0a1751f96212cd9da7851d9361d764a0","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=6a623c0ac50b65566f895ad7fa6902aa1e4b2655","patch":"@@ -80,8 +80,7 @@ public void testUserSchemaAuthorization() {\n \t\tschemaTO.setMandatoryCondition(\"false\");\n \t\tschemaTO.setType(SchemaType.String);\n \n-\t\tSchemaTO newSchemaTO = restTemplate.postForObject(BASE_URL\n-\t\t\t\t+ \"schema/user/create\", schemaTO, SchemaTO.class);\n+\t\tSchemaTO newSchemaTO = schemaService.create(\"user\", schemaTO);\n \t\tassertEquals(schemaTO, newSchemaTO);\n \n \t\t// 2. create an user with the role created above (as admin)\n@@ -99,22 +98,19 @@ public void testUserSchemaAuthorization() {\n \t\tassertNotNull(userTO);\n \n \t\t// 3. read the schema created above (as admin) - success\n-\t\tschemaTO = restTemplate.getForObject(BASE_URL\n-\t\t\t\t+ \"schema/user/read/authTestSchema.json\", SchemaTO.class);\n+\t\tschemaTO = schemaService.read(\"user\", \"authTestSchema\", SchemaTO.class);\n \t\tassertNotNull(schemaTO);\n \n \t\t// 4. read the schema created above (as user) - success\n \t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n-\t\tschemaTO = restTemplate.getForObject(BASE_URL\n-\t\t\t\t+ \"schema/user/read/authTestSchema.json\", SchemaTO.class);\n+\t\tschemaTO = schemaService.read(\"user\", \"authTestSchema\", SchemaTO.class);\n \t\tassertNotNull(schemaTO);\n \n \t\t// 5. update the schema create above (as user) - failure\n \t\tHttpClientErrorException exception = null;\n \t\ttry {\n-\t\t\trestTemplate.postForObject(BASE_URL + \"schema/role/update\",\n-\t\t\t\t\tschemaTO, SchemaTO.class);\n+\t\t    schemaService.update(\"role\", schemaTO.getName(), schemaTO);\n \t\t} catch (HttpClientErrorException e) {\n \t\t\texception = e;\n \t\t}"},{"sha":"e6c8d6527bbb2f7b0af64c636abc5a9c98cabf28","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=6a623c0ac50b65566f895ad7fa6902aa1e4b2655","patch":"@@ -18,15 +18,17 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n \n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import java.util.Arrays;\n import java.util.List;\n+\n import org.apache.syncope.client.to.DerivedSchemaTO;\n-import org.junit.Test;\n+import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n import org.junit.FixMethodOrder;\n+import org.junit.Test;\n import org.junit.runners.MethodSorters;\n \n @FixMethodOrder(MethodSorters.JVM)\n@@ -38,8 +40,7 @@ public class DerivedSchemaTestITCase extends AbstractTest {\n \n     @Test\n     public void list() {\n-        List<DerivedSchemaTO> derivedSchemas = Arrays.asList(restTemplate.getForObject(BASE_URL\n-                + \"derivedSchema/user/list.json\", DerivedSchemaTO[].class));\n+        List<DerivedSchemaTO> derivedSchemas = schemaService.list(USER, DerivedSchemaTO[].class);\n         assertFalse(derivedSchemas.isEmpty());\n         for (DerivedSchemaTO derivedSchemaTO : derivedSchemas) {\n             assertNotNull(derivedSchemaTO);"},{"sha":"ddc1e07a4fbbe1e63f028567f1e960a6cb38707b","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=6a623c0ac50b65566f895ad7fa6902aa1e4b2655","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.client.mod.RoleMod;\n import org.apache.syncope.client.to.ConnObjectTO;\n import org.apache.syncope.client.to.RoleTO;\n+import org.apache.syncope.client.to.SchemaTO;\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.client.validation.SyncopeClientException;\n@@ -188,10 +189,7 @@ public void selfRead() {\n         assertTrue(userTO.getMembershipMap().containsKey(1L));\n         assertFalse(userTO.getMembershipMap().containsKey(3L));\n \n-        PreemptiveAuthHttpRequestFactory requestFactory = (PreemptiveAuthHttpRequestFactory) restTemplate\n-                .getRequestFactory();\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user1\", \"password\"));\n+        super.setupRestTemplate(\"user1\", \"password\");\n \n         SyncopeClientException exception = null;\n         try {\n@@ -316,10 +314,7 @@ public void updateAsRoleOwner() {\n         roleMod.setName(\"Managing Director\");\n \n         // 3. try to update as user3, not owner of role 7 - fail\n-        PreemptiveAuthHttpRequestFactory requestFactory = (PreemptiveAuthHttpRequestFactory) restTemplate\n-                .getRequestFactory();\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user2\", \"password\"));\n+        setupRestTemplate(\"user2\", \"password\");\n \n         try {\n             roleService.update(roleMod.getId(), roleMod);\n@@ -330,8 +325,7 @@ public void updateAsRoleOwner() {\n \n         // 4. update as user5, owner of role 7 because owner of role 6 with\n         // inheritance - success\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user5\", \"password\"));\n+        super.setupRestTemplate(\"user5\", ADMIN_PWD);\n \n         roleTO = roleService.update(roleMod.getId(), roleMod);\n         assertEquals(\"Managing Director\", roleTO.getName());"},{"sha":"482d182a4e8b287168417576783b8351275a2d35","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=6a623c0ac50b65566f895ad7fa6902aa1e4b2655","patch":"@@ -464,8 +464,7 @@ public void issueSYNCOPE86() {\n         notification.setSubject(subject);\n         notification.setTemplate(\"optin\");\n \n-        notification = restTemplate.postForObject(BASE_URL + \"notification/create.json\", notification,\n-                NotificationTO.class);\n+        notification = notificationService.create(notification);\n         assertNotNull(notification);\n \n         // 2. create user"},{"sha":"78119569b08393e567470fe7ffbe03f160a592dc","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":32,"deletions":44,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=6a623c0ac50b65566f895ad7fa6902aa1e4b2655","patch":"@@ -18,16 +18,14 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n-import java.util.Arrays;\n import java.util.List;\n-import org.apache.http.auth.UsernamePasswordCredentials;\n-import org.apache.http.impl.client.DefaultHttpClient;\n-import org.junit.Test;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpStatusCodeException;\n-import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n+\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.search.AttributeCond;\n import org.apache.syncope.client.search.NodeCond;\n@@ -38,7 +36,10 @@\n import org.apache.syncope.client.validation.SyncopeClientException;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n import org.junit.FixMethodOrder;\n+import org.junit.Test;\n import org.junit.runners.MethodSorters;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.client.HttpStatusCodeException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class UserRequestTestITCase extends AbstractTest {\n@@ -50,16 +51,15 @@ public void create() {\n         configurationTO.setKey(\"createRequest.allowed\");\n         configurationTO.setValue(\"false\");\n \n-        configurationTO = restTemplate.postForObject(BASE_URL + \"configuration/create\", configurationTO,\n-                ConfigurationTO.class);\n+        configurationTO = configurationService.create(configurationTO);\n         assertNotNull(configurationTO);\n \n         UserTO userTO = UserTestITCase.getSampleTO(\"selfcreate@syncope.apache.org\");\n \n         // 2. get unauthorized when trying to request user create\n         SyncopeClientException exception = null;\n         try {\n-            restTemplate.postForObject(BASE_URL + \"user/request/create\", userTO, UserRequestTO.class);\n+            userRequestService.create(userTO);\n             fail();\n         } catch (SyncopeClientCompositeErrorException e) {\n             exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n@@ -69,13 +69,12 @@ public void create() {\n         // 3. set create request allowed\n         configurationTO.setValue(\"true\");\n \n-        configurationTO = restTemplate.postForObject(BASE_URL + \"configuration/create\", configurationTO,\n-                ConfigurationTO.class);\n+        configurationTO = configurationService.create(configurationTO);\n         assertNotNull(configurationTO);\n \n         // 4. as anonymous, request user create works\n-        UserRequestTO request = anonymousRestTemplate().postForObject(BASE_URL + \"user/request/create\", userTO,\n-                UserRequestTO.class);\n+        UserRequestTO request = anonymousRestTemplate().postForObject(BASE_URL + \"user/request/create\",\n+                userTO, UserRequestTO.class);\n         assertNotNull(request);\n \n         // 5. switch back to admin\n@@ -86,12 +85,11 @@ public void create() {\n         attrCond.setSchema(\"userId\");\n         attrCond.setExpression(\"selfcreate@syncope.apache.org\");\n \n-        final List<UserTO> matchingUsers = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\", NodeCond.\n-                getLeafCond(attrCond), UserTO[].class));\n+        final List<UserTO> matchingUsers = userService.search(NodeCond.getLeafCond(attrCond));\n         assertTrue(matchingUsers.isEmpty());\n \n         // 7. actually create user\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", request.getUserTO(), UserTO.class);\n+        userTO = userService.create(request.getUserTO());\n         assertNotNull(userTO);\n     }\n \n@@ -101,7 +99,7 @@ public void update() {\n         UserTO userTO = UserTestITCase.getSampleTO(\"selfupdate@syncope.apache.org\");\n         String initialPassword = userTO.getPassword();\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n \n         UserMod userMod = new UserMod();\n@@ -111,50 +109,43 @@ public void update() {\n         // 2. try to request user update as admin: failure\n         SyncopeClientException exception = null;\n         try {\n-            restTemplate.postForObject(BASE_URL + \"user/request/update\", userMod, UserRequestTO.class);\n+            userRequestService.update(userMod);\n             fail();\n         } catch (SyncopeClientCompositeErrorException e) {\n             exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n         }\n         assertNotNull(exception);\n \n         // 3. auth as user just created\n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n-                getRequestFactory());\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), initialPassword));\n+        super.setupRestTemplate(userTO.getUsername(), initialPassword);\n \n         // 4. update with same password: not matching password policy\n         exception = null;\n         try {\n-            restTemplate.postForObject(BASE_URL + \"user/request/update\", userMod, UserRequestTO.class);\n+            userRequestService.update(userMod);\n         } catch (SyncopeClientCompositeErrorException scce) {\n             exception = scce.getException(SyncopeClientExceptionType.InvalidSyncopeUser);\n         }\n         assertNotNull(exception);\n \n         // 5. now request user update works\n         userMod.setPassword(\"new\" + initialPassword);\n-        UserRequestTO request = restTemplate.postForObject(BASE_URL + \"user/request/update\", userMod,\n-                UserRequestTO.class);\n+        UserRequestTO request = userRequestService.update(userMod);\n         assertNotNull(request);\n \n         // 6. switch back to admin\n         super.resetRestTemplate();\n \n         // 7. user password has not changed yet\n-        Boolean verify = restTemplate.getForObject(BASE_URL + \"user/verifyPassword/{username}.json?password=\"\n-                + userMod.getPassword(), Boolean.class, userTO.getUsername());\n+        Boolean verify = userService.verifyPassword(userTO.getUsername(), userMod.getPassword());\n         assertFalse(verify);\n \n         // 8. actually update user\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n \n         // 9. user password has now changed\n-        verify = restTemplate.getForObject(BASE_URL + \"user/verifyPassword/{username}.json?password=\" + userMod.\n-                getPassword(),\n-                Boolean.class, userTO.getUsername());\n+        verify = userService.verifyPassword(userTO.getUsername(), userMod.getPassword());\n         assertTrue(verify);\n     }\n \n@@ -164,43 +155,40 @@ public void delete() {\n         UserTO userTO = UserTestITCase.getSampleTO(\"selfdelete@syncope.apache.org\");\n         String initialPassword = userTO.getPassword();\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n \n         // 2. try to request user delete as admin: failure\n         SyncopeClientException exception = null;\n         try {\n-            restTemplate.getForObject(BASE_URL + \"user/request/delete/{userId}\", UserRequestTO.class, userTO.getId());\n+\n+            userRequestService.delete(userTO.getId());\n             fail();\n         } catch (SyncopeClientCompositeErrorException e) {\n             exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n         }\n         assertNotNull(exception);\n \n         // 3. auth as user just created\n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n-                getRequestFactory());\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), initialPassword));\n+        super.setupRestTemplate(userTO.getUsername(), initialPassword);\n \n         // 4. now request user delete works\n-        UserRequestTO request = restTemplate.getForObject(BASE_URL + \"user/request/delete/{userId}\",\n-                UserRequestTO.class, userTO.getId());\n+        UserRequestTO request = userRequestService.delete(userTO.getId());\n         assertNotNull(request);\n \n         // 5. switch back to admin\n         super.resetRestTemplate();\n \n         // 6. user still exists\n-        UserTO actual = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n+        UserTO actual = userService.read(userTO.getId());\n         assertNotNull(actual);\n \n         // 7. actually delete user\n-        restTemplate.getForObject(BASE_URL + \"user/delete/{userId}\", UserTO.class, userTO.getId());\n+        userService.delete(userTO.getId());\n \n         // 8. user does not exist any more\n         try {\n-            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n+            userService.read(userTO.getId());\n             fail();\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());"},{"sha":"8ac491c919c4cca04cfe56829b9c7a0dddc0cf7f","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":4,"deletions":11,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a623c0ac50b65566f895ad7fa6902aa1e4b2655/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=6a623c0ac50b65566f895ad7fa6902aa1e4b2655","patch":"@@ -98,10 +98,7 @@ public static UserTO getSampleTO(final String email) {\n \n     @Test\n     public void selfRead() {\n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n-                getRequestFactory());\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user1\", \"password\"));\n+        super.setupRestTemplate(\"user1\", ADMIN_PWD);\n \n         try {\n             userService.read(1l);\n@@ -593,10 +590,7 @@ public void createWithReject() {\n         assertNull(form.getOwner());\n \n         // 3. claim task from user1, not in role 7 (designated for approval in workflow definition): fail\n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n-                getRequestFactory());\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user1\", \"password\"));\n+        super.setupRestTemplate(\"user1\", ADMIN_PWD);\n \n         SyncopeClientException sce = null;\n         try {\n@@ -607,8 +601,7 @@ public void createWithReject() {\n         assertNotNull(sce);\n \n         // 4. claim task from user4, in role 7\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user4\", \"password\"));\n+        super.setupRestTemplate(\"user4\", ADMIN_PWD);\n \n         form = userService.claimForm(form.getTaskId());\n         assertNotNull(form);\n@@ -1823,7 +1816,7 @@ public void issueSYNCOPE260() {\n                 || connObjectTO.getAttributeMap().get(\"NAME\").getValues().isEmpty());\n         // ----------------------------------\n     }\n-    \n+\n     @Test\n     public void issueSYNCOPE267() {\n         // ----------------------------------"}]}