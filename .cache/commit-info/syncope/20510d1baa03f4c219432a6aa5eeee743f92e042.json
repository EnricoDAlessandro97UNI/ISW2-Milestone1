{"sha":"20510d1baa03f4c219432a6aa5eeee743f92e042","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjIwNTEwZDFiYWEwM2Y0YzIxOTQzMmE2YWE1ZWVlZTc0M2Y5MmUwNDI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-07-01T11:27:10Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-07-01T11:27:10Z"},"message":"[SYNCOPE-519] Fixing JAX-RS problems\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1607045 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2f60d4498ee76f38259d68523759d0264c91a08f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2f60d4498ee76f38259d68523759d0264c91a08f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/20510d1baa03f4c219432a6aa5eeee743f92e042","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/20510d1baa03f4c219432a6aa5eeee743f92e042","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/20510d1baa03f4c219432a6aa5eeee743f92e042","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/20510d1baa03f4c219432a6aa5eeee743f92e042/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a05a46da05436a7897564b31c5cca9d050ee9ae1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a05a46da05436a7897564b31c5cca9d050ee9ae1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a05a46da05436a7897564b31c5cca9d050ee9ae1"}],"stats":{"total":122,"additions":59,"deletions":63},"files":[{"sha":"c6bfb2f1e55d94118735ecb4070a4d3ab6d90b96","filename":"common/src/main/java/org/apache/syncope/common/types/ConnConfPropSchema.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20510d1baa03f4c219432a6aa5eeee743f92e042/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20510d1baa03f4c219432a6aa5eeee743f92e042/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java?ref=20510d1baa03f4c219432a6aa5eeee743f92e042","patch":"@@ -18,10 +18,14 @@\n  */\r\n package org.apache.syncope.common.types;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n-\r\n import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.codehaus.jackson.annotate.JsonProperty;\r\n \r\n @XmlRootElement\r\n @XmlType\r\n@@ -43,7 +47,7 @@ public class ConnConfPropSchema extends AbstractBaseBean implements Comparable<C\n \r\n     private boolean confidential;\r\n \r\n-    private Object defaultValue;\r\n+    private final List<Object> defaultValues = new ArrayList<Object>();\r\n \r\n     public String getName() {\r\n         return name;\r\n@@ -101,12 +105,11 @@ public void setConfidential(final boolean confidential) {\n         this.confidential = confidential;\r\n     }\r\n \r\n-    public Object getDefaultValue() {\r\n-        return defaultValue;\r\n-    }\r\n-\r\n-    public void setDefaultValue(final Object defaultValue) {\r\n-        this.defaultValue = defaultValue;\r\n+    @XmlElementWrapper(name = \"defaultValues\")\r\n+    @XmlElement(name = \"defaultValue\")\r\n+    @JsonProperty(\"defaultValues\")\r\n+    public List<Object> getDefaultValues() {\r\n+        return defaultValues;\r\n     }\r\n \r\n     @Override\r"},{"sha":"a38ab84f02911e17680d891d6df72b3d723f6110","filename":"common/src/main/java/org/apache/syncope/common/types/ConnConfProperty.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20510d1baa03f4c219432a6aa5eeee743f92e042/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20510d1baa03f4c219432a6aa5eeee743f92e042/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java?ref=20510d1baa03f4c219432a6aa5eeee743f92e042","patch":"@@ -20,13 +20,12 @@\n \r\n import java.util.ArrayList;\r\n import java.util.List;\r\n-\r\n import javax.xml.bind.annotation.XmlElement;\r\n import javax.xml.bind.annotation.XmlElementWrapper;\r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n-\r\n import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.codehaus.jackson.annotate.JsonProperty;\r\n \r\n @XmlRootElement\r\n @XmlType\r\n@@ -50,14 +49,11 @@ public void setSchema(final ConnConfPropSchema schema) {\n \r\n     @XmlElementWrapper(name = \"values\")\r\n     @XmlElement(name = \"value\")\r\n+    @JsonProperty(\"values\")\r\n     public List<Object> getValues() {\r\n         return values;\r\n     }\r\n \r\n-    public void setValues(final List<Object> values) {\r\n-        this.values = values;\r\n-    }\r\n-\r\n     public boolean isOverridable() {\r\n         return overridable;\r\n     }\r"},{"sha":"e020c6667c43249734c7ee931a1e462b0f4f48f0","filename":"console/src/main/java/org/apache/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20510d1baa03f4c219432a6aa5eeee743f92e042/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20510d1baa03f4c219432a6aa5eeee743f92e042/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=20510d1baa03f4c219432a6aa5eeee743f92e042","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.EnumSet;\n import java.util.HashMap;\n@@ -487,20 +486,14 @@ private List<ConnConfProperty> fillProperties(final ConnBundleTO bundleTO, final\n                     property.setOverridable(connInstanceTO.getConfigurationMap().get(key.getName()).isOverridable());\n                 }\n \n-                if (property.getValues() == null || property.getValues().isEmpty() && key.getDefaultValue() != null) {\n-                    if (key.getDefaultValue().getClass().isArray()) {\n-                        property.getValues().addAll(Arrays.asList((Object[]) key.getDefaultValue()));\n-                    } else if (key.getDefaultValue() instanceof Collection<?>) {\n-                        property.getValues().addAll((Collection<?>) key.getDefaultValue());\n-                    } else {\n-                        property.getValues().add(key.getDefaultValue());\n-                    }\n+                if (property.getValues().isEmpty() && !key.getDefaultValues().isEmpty()) {\n+                    property.getValues().addAll(key.getDefaultValues());\n                 }\n \n                 props.add(property);\n             }\n         }\n-        \n+\n         // re-order properties (implements Comparable)\n         Collections.sort(props);\n         return props;"},{"sha":"2be5873fca54a505837ef42c42ce474677177c02","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20510d1baa03f4c219432a6aa5eeee743f92e042/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20510d1baa03f4c219432a6aa5eeee743f92e042/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=20510d1baa03f4c219432a6aa5eeee743f92e042","patch":"@@ -136,7 +136,8 @@ private Set<ConnConfProperty> filterProperties(final Set<ConnConfProperty> prope\n                     }\n                 }\n             }\n-            prop.setValues(parsed);\n+            prop.getValues().clear();\n+            prop.getValues().addAll(parsed);\n             newProperties.add(prop);\n         }\n         return newProperties;"},{"sha":"9228307628d0735904212cb7a7058c8af1ff2d78","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":1,"deletions":17,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20510d1baa03f4c219432a6aa5eeee743f92e042/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20510d1baa03f4c219432a6aa5eeee743f92e042/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=20510d1baa03f4c219432a6aa5eeee743f92e042","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.common.to.BulkActionRes;\n import org.apache.syncope.common.to.ConnBundleTO;\n import org.apache.syncope.common.to.ConnInstanceTO;\n-import org.apache.syncope.common.types.ConnConfPropSchema;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n@@ -47,11 +46,9 @@\n import org.apache.syncope.core.util.ConnIdBundleManager;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n-import org.identityconnectors.framework.api.ConfigurationProperty;\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorKey;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.identityconnectors.framework.impl.api.ConfigurationPropertyImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -213,20 +210,7 @@ public List<ConnBundleTO> getBundles(@RequestParam(value = \"lang\", required = fa\n                 ConfigurationProperties properties = ConnIdBundleManager.getConfigurationProperties(bundle);\n \n                 for (String propName : properties.getPropertyNames()) {\n-                    ConfigurationProperty configurationProperty = properties.getProperty(propName);\n-\n-                    ConnConfPropSchema connConfPropSchema = new ConnConfPropSchema();\n-\n-                    connConfPropSchema.setName(configurationProperty.getName());\n-                    connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));\n-                    connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));\n-                    connConfPropSchema.setRequired(configurationProperty.isRequired());\n-                    connConfPropSchema.setType(configurationProperty.getType().getName());\n-                    connConfPropSchema.setOrder(((ConfigurationPropertyImpl) configurationProperty).getOrder());\n-                    connConfPropSchema.setConfidential(configurationProperty.isConfidential());\n-                    connConfPropSchema.setDefaultValue(configurationProperty.getValue());\n-\n-                    connBundleTO.addProperty(connConfPropSchema);\n+                    connBundleTO.addProperty(binder.buildConnConfPropSchema(properties.getProperty(propName)));\n                 }\n \n                 LOG.debug(\"Connector bundle: {}\", connBundleTO);"},{"sha":"126c3ae0cf329167d88927980055eef6d49edf21","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ConnInstanceDataBinder.java","status":"modified","additions":35,"deletions":19,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20510d1baa03f4c219432a6aa5eeee743f92e042/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20510d1baa03f4c219432a6aa5eeee743f92e042/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java?ref=20510d1baa03f4c219432a6aa5eeee743f92e042","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.rest.data;\n \n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n@@ -110,7 +112,7 @@ public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n \n         BeanUtils.copyProperties(connInstanceTO, connInstance, IGNORE_PROPERTIES);\n         if (connInstanceTO.getLocation() != null) {\n-            connInstance.setLocation(connInstanceTO.getLocation().toString());\n+            connInstance.setLocation(connInstanceTO.getLocation());\n         }\n \n         // Throw composite exception if there is at least one element set in the composing exceptions\n@@ -138,7 +140,7 @@ public ConnInstance updateConnInstance(final long connInstanceId, final ConnInst\n         ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n \n         if (connInstanceTO.getLocation() != null) {\n-            connInstance.setLocation(connInstanceTO.getLocation().toString());\n+            connInstance.setLocation(connInstanceTO.getLocation());\n         }\n \n         if (connInstanceTO.getBundleName() != null) {\n@@ -180,6 +182,30 @@ public ConnInstance updateConnInstance(final long connInstanceId, final ConnInst\n         return connInstance;\n     }\n \n+    public ConnConfPropSchema buildConnConfPropSchema(final ConfigurationProperty property) {\n+        ConnConfPropSchema connConfPropSchema = new ConnConfPropSchema();\n+\n+        connConfPropSchema.setName(property.getName());\n+        connConfPropSchema.setDisplayName(property.getDisplayName(property.getName()));\n+        connConfPropSchema.setHelpMessage(property.getHelpMessage(property.getName()));\n+        connConfPropSchema.setRequired(property.isRequired());\n+        connConfPropSchema.setType(property.getType().getName());\n+        connConfPropSchema.setOrder(((ConfigurationPropertyImpl) property).getOrder());\n+        connConfPropSchema.setConfidential(property.isConfidential());\n+\n+        if (property.getValue() != null) {\n+            if (property.getValue().getClass().isArray()) {\n+                connConfPropSchema.getDefaultValues().addAll(Arrays.asList((Object[]) property.getValue()));\n+            } else if (property.getValue() instanceof Collection<?>) {\n+                connConfPropSchema.getDefaultValues().addAll((Collection<?>) property.getValue());\n+            } else {\n+                connConfPropSchema.getDefaultValues().add(property.getValue());\n+            }\n+        }\n+\n+        return connConfPropSchema;\n+    }\n+\n     public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n         ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n         connInstanceTO.setId(connInstance.getId() == null ? 0L : connInstance.getId().longValue());\n@@ -194,27 +220,17 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n         final Map<String, ConnConfProperty> connInstanceToConfMap = connInstanceTO.getConfigurationMap();\n \n         for (String propName : properties.getPropertyNames()) {\n-            ConfigurationProperty configurationProperty = properties.getProperty(propName);\n-\n+            ConnConfPropSchema schema = buildConnConfPropSchema(properties.getProperty(propName));\n+            \n+            ConnConfProperty property;\n             if (connInstanceToConfMap.containsKey(propName)) {\n-                connInstanceToConfMap.get(propName).getSchema().setDisplayName(\n-                        configurationProperty.getDisplayName(propName));\n+                property = connInstanceToConfMap.get(propName);\n             } else {\n-                ConnConfPropSchema connConfPropSchema = new ConnConfPropSchema();\n-\n-                connConfPropSchema.setName(configurationProperty.getName());\n-                connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));\n-                connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));\n-                connConfPropSchema.setRequired(configurationProperty.isRequired());\n-                connConfPropSchema.setType(configurationProperty.getType().getName());\n-                connConfPropSchema.setOrder(((ConfigurationPropertyImpl) configurationProperty).getOrder());\n-                connConfPropSchema.setConfidential(configurationProperty.isConfidential());\n-                connConfPropSchema.setDefaultValue(configurationProperty.getValue());\n-\n-                ConnConfProperty property = new ConnConfProperty();\n-                property.setSchema(connConfPropSchema);\n+                property = new ConnConfProperty();\n                 connInstanceTO.addConfiguration(property);\n             }\n+            \n+            property.setSchema(schema);            \n         }\n         return connInstanceTO;\n     }"},{"sha":"04f0ed49a1bb7d22801ac19b960e1c8ccd7322bb","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20510d1baa03f4c219432a6aa5eeee743f92e042/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20510d1baa03f4c219432a6aa5eeee743f92e042/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=20510d1baa03f4c219432a6aa5eeee743f92e042","patch":"@@ -360,8 +360,10 @@ protected void setContentType(final String contentType) {\n     }\n \n     private static <T> T getObjectCXF(final Response response, final Class<T> type, final Object serviceProxy) {\n-        String location = response.getLocation().toString();\n-        WebClient webClient = WebClient.fromClient(WebClient.client(serviceProxy));\n+        final String location = response.getLocation().toString();\n+        final Client client = WebClient.client(serviceProxy);\n+        final WebClient webClient = WebClient.fromClient(client);\n+        webClient.accept(client.getHeaders().getFirst(\"Accept\")).to(location, false);\n         webClient.to(location, false);\n \n         return webClient.get(type);"},{"sha":"9db2fcb9edc2632bd045bfb7d2afa1790026522b","filename":"pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/20510d1baa03f4c219432a6aa5eeee743f92e042/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/20510d1baa03f4c219432a6aa5eeee743f92e042/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=20510d1baa03f4c219432a6aa5eeee743f92e042","patch":"@@ -1093,6 +1093,7 @@ under the License.\n                 <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>\n                 <extractDir>${project.build.directory}/cargo/extract</extractDir>\n               </zipUrlInstaller>\n+              <timeout>240000</timeout>\n               <log>${cargo.log}</log>\n               <output>${cargo.output}</output>    \n             </container>"}]}