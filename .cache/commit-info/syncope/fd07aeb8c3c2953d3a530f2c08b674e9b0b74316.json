{"sha":"fd07aeb8c3c2953d3a530f2c08b674e9b0b74316","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZkMDdhZWI4YzNjMjk1M2QzYTUzMGYyYzA4YjY3NGU5YjBiNzQzMTY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-23T17:04:40Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-23T17:04:40Z"},"message":"(Fixes issue #69)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246645 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cceb0a775318e76a1ba1baf781de0dd89d2f28ee","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cceb0a775318e76a1ba1baf781de0dd89d2f28ee"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/comments","author":null,"committer":null,"parents":[{"sha":"451362c842a02764e7575a2b7d1914c1efa96a80","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/451362c842a02764e7575a2b7d1914c1efa96a80","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/451362c842a02764e7575a2b7d1914c1efa96a80"}],"stats":{"total":96,"additions":53,"deletions":43},"files":[{"sha":"147548803b0bb09fc34b354b81b1af3f4e20af86","filename":"client/src/main/java/org/syncope/client/validation/SyncopeClientErrorHandler.java","status":"modified","additions":18,"deletions":13,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientErrorHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientErrorHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientErrorHandler.java?ref=fd07aeb8c3c2953d3a530f2c08b674e9b0b74316","patch":"@@ -29,31 +29,36 @@\n public class SyncopeClientErrorHandler extends DefaultResponseErrorHandler {\n \n     public static final String EXCEPTION_TYPE_HEADER = \"ExceptionType\";\n-    private static final Logger log = LoggerFactory.getLogger(\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n             SyncopeClientErrorHandler.class);\n-    public static final HttpStatus[] managedStatuses = new HttpStatus[]{\n+\n+    public static final HttpStatus[] MANAGED_STATUSES = new HttpStatus[]{\n         HttpStatus.BAD_REQUEST, HttpStatus.NOT_FOUND};\n \n     @Override\n-    public void handleError(ClientHttpResponse response) throws IOException {\n-        if (!ArrayUtils.contains(managedStatuses, response.getStatusCode())) {\n+    public void handleError(final ClientHttpResponse response)\n+            throws IOException {\n+\n+        if (!ArrayUtils.contains(MANAGED_STATUSES, response.getStatusCode())) {\n             super.handleError(response);\n         }\n \n-        SyncopeClientCompositeErrorException compositeException =\n-                new SyncopeClientCompositeErrorException(\n-                response.getStatusCode());\n-\n         List<String> exceptionTypesInHeaders = response.getHeaders().get(\n                 EXCEPTION_TYPE_HEADER);\n         if (exceptionTypesInHeaders == null) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"No \" + EXCEPTION_TYPE_HEADER + \" provided\");\n-            }\n+            LOG.debug(\"No \" + EXCEPTION_TYPE_HEADER + \" provided\");\n \n             return;\n         }\n \n+        SyncopeClientCompositeErrorException compositeException =\n+                new SyncopeClientCompositeErrorException(\n+                response.getStatusCode());\n+\n         SyncopeClientExceptionType exceptionType = null;\n         SyncopeClientException clientException = null;\n         Set<String> handledExceptions = new HashSet<String>();\n@@ -62,7 +67,7 @@ public void handleError(ClientHttpResponse response) throws IOException {\n                 exceptionType = SyncopeClientExceptionType.getFromHeaderValue(\n                         exceptionTypeAsString);\n             } catch (IllegalArgumentException e) {\n-                log.error(\"Unexpected value of \"\n+                LOG.error(\"Unexpected value of \"\n                         + EXCEPTION_TYPE_HEADER + \": \" + exceptionTypeAsString,\n                         e);\n             }\n@@ -86,7 +91,7 @@ public void handleError(ClientHttpResponse response) throws IOException {\n \n         exceptionTypesInHeaders.removeAll(handledExceptions);\n         if (!exceptionTypesInHeaders.isEmpty()) {\n-            log.error(\"Unmanaged exceptions: \" + exceptionTypesInHeaders);\n+            LOG.error(\"Unmanaged exceptions: \" + exceptionTypesInHeaders);\n         }\n \n         if (compositeException.hasExceptions()) {"},{"sha":"c9da3ad2291865a8cc9f7af9d031b634696869b7","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=fd07aeb8c3c2953d3a530f2c08b674e9b0b74316","patch":"@@ -19,6 +19,9 @@ public enum SyncopeClientExceptionType {\n     AlreadyExists(\n     \"Syncope.AlreadyExists\",\n     \"Syncope.AlreadyExists.name\"),\n+    Deadlock(\n+    \"Syncope.Deadlock\",\n+    \"\"),\n     InvalidPassword(\n     \"Syncope.InvalidPassword\",\n     \"Syncope.InvalidPassword.reason\"),\n@@ -64,7 +67,9 @@ public enum SyncopeClientExceptionType {\n     Workflow(\n     \"Syncope.Workflow\",\n     \"Syncope.Workflow.message\");\n+\n     private String headerValue;\n+\n     private String elementHeaderName;\n \n     private SyncopeClientExceptionType(String headerValue,"},{"sha":"1a5aa38678c35a9f3cfcfba2e5fff0e7b265265a","filename":"client/src/main/java/org/syncope/types/TaskExecutionStatus.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FTaskExecutionStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FTaskExecutionStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FTaskExecutionStatus.java?ref=fd07aeb8c3c2953d3a530f2c08b674e9b0b74316","patch":"@@ -14,7 +14,18 @@\n  */\n package org.syncope.types;\n \n+/**\n+ * Status of a TaskExecution.\n+ *\n+ * CREATED -> SUBMITTED or UBSUBMITTED (depending on the external resource to\n+ * return success or failure).\n+ * SUBMITTED -> SUCCESS or FAILURE (depending on the external resource to\n+ * report success or failure).\n+ *\n+ * @see TaskExecution\n+ */\n public enum TaskExecutionStatus {\n \n     CREATED, SUBMITTED, UNSUBMITTED, SUCCESS, FAILURE\n+\n }"},{"sha":"537a7243086fa47370a7d4ff7235a5c59bd330a0","filename":"core/src/main/java/jpasymphony/dao/impl/JPAWorkflowEntryDAOImpl.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAWorkflowEntryDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAWorkflowEntryDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fdao%2Fimpl%2FJPAWorkflowEntryDAOImpl.java?ref=fd07aeb8c3c2953d3a530f2c08b674e9b0b74316","patch":"@@ -64,20 +64,6 @@ public void delete(final Long id) {\n             }\n         }\n \n-        // Force loading all of JPACurrentSteps belonging to this entry\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM JPACurrentStep e \"\n-                + \"WHERE e.workflowEntry=:workflowEntry\");\n-        query.setParameter(\"workflowEntry\", entry);\n-        query.getResultList();\n-\n-        // Force loading all of JPAHistorySteps belonging to this entry\n-        query = entityManager.createQuery(\n-                \"SELECT e FROM JPAHistoryStep e \"\n-                + \"WHERE e.workflowEntry=:workflowEntry\");\n-        query.setParameter(\"workflowEntry\", entry);\n-        query.getResultList();\n-\n         entityManager.remove(entry);\n     }\n "},{"sha":"ac2162ed7625ba05e46a5ec3f2230de09f3196ea","filename":"core/src/main/java/jpasymphony/workflow/spi/jpa/JPAWorkflowStore.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAWorkflowStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAWorkflowStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Fjpasymphony%2Fworkflow%2Fspi%2Fjpa%2FJPAWorkflowStore.java?ref=fd07aeb8c3c2953d3a530f2c08b674e9b0b74316","patch":"@@ -46,15 +46,11 @@\n import org.hibernate.criterion.Criterion;\n import org.hibernate.criterion.Restrictions;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n \n /**\n  * JPA implementation of OSWorkflow's WorkflowStore.\n  * Still using Hibernate's criteria API (available since JPA 2.0).\n  */\n-@Transactional(rollbackFor = {\n-    Throwable.class\n-})\n public class JPAWorkflowStore implements WorkflowStore {\n \n     @PersistenceContext(type = PersistenceContextType.TRANSACTION)\n@@ -87,7 +83,6 @@ public void setEntryState(final long entryId, final int state)\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public PropertySet getPropertySet(final long entryId)\n             throws StoreException {\n \n@@ -138,7 +133,6 @@ public WorkflowEntry createEntry(final String workflowName)\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List findCurrentSteps(final long entryId)\n             throws StoreException {\n \n@@ -147,7 +141,6 @@ public List findCurrentSteps(final long entryId)\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public WorkflowEntry findEntry(final long entryId)\n             throws StoreException {\n \n@@ -161,7 +154,6 @@ public WorkflowEntry findEntry(final long entryId)\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public List findHistorySteps(final long entryId)\n             throws StoreException {\n \n@@ -227,7 +219,6 @@ public List query(final WorkflowQuery query)\n      * #query(com.opensymphony.workflow.query.WorkflowExpressionQuery)\n      */\n     @Override\n-    @Transactional(readOnly = true)\n     public List query(final WorkflowExpressionQuery query)\n             throws StoreException {\n "},{"sha":"754e41e4f4a86898385cbbd158e2197978ba4959","filename":"core/src/main/java/org/syncope/core/monitor/CacheMonitor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fmonitor%2FCacheMonitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fmonitor%2FCacheMonitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fmonitor%2FCacheMonitor.java?ref=fd07aeb8c3c2953d3a530f2c08b674e9b0b74316","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"sha":"29eb4482b0a78898da485a34f832853de5737841","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fd07aeb8c3c2953d3a530f2c08b674e9b0b74316/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=fd07aeb8c3c2953d3a530f2c08b674e9b0b74316","patch":"@@ -1,3 +1,4 @@\n+<%@page import=\"org.hibernate.exception.LockAcquisitionException\"%>\n <%@page isErrorPage=\"true\" contentType=\"application/json\" pageEncoding=\"UTF-8\"%>\n <%@page import=\"org.syncope.core.rest.data.InvalidSearchConditionException\"%>\n <%@page import=\"org.syncope.core.persistence.dao.MissingConfKeyException\"%>\n@@ -46,13 +47,15 @@\n                         SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n                         SyncopeClientExceptionType.Propagation.getHeaderValue());\n                 response.setHeader(\n-                        SyncopeClientExceptionType.Propagation.getElementHeaderName(),\n+                        SyncopeClientExceptionType.Propagation.\n+                        getElementHeaderName(),\n                         ((PropagationException) ex).getResourceName());\n \n                 statusCode = HttpServletResponse.SC_BAD_REQUEST;\n             } else if (ex instanceof SyncopeClientCompositeErrorException) {\n                 for (SyncopeClientException sce :\n-                        ((SyncopeClientCompositeErrorException) ex).getExceptions()) {\n+                        ((SyncopeClientCompositeErrorException) ex).\n+                        getExceptions()) {\n \n                     response.addHeader(\n                             SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n@@ -65,11 +68,13 @@\n                     }\n                 }\n \n-                statusCode = ((SyncopeClientCompositeErrorException) ex).getStatusCode().value();\n+                statusCode = ((SyncopeClientCompositeErrorException) ex).\n+                        getStatusCode().value();\n             } else if (ex instanceof MultiUniqueValueException) {\n                 response.setHeader(\n                         SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                        SyncopeClientExceptionType.InvalidSchemaDefinition.getHeaderValue());\n+                        SyncopeClientExceptionType.InvalidSchemaDefinition.\n+                        getHeaderValue());\n \n                 statusCode = HttpServletResponse.SC_BAD_REQUEST;\n             } else if (ex instanceof MissingConfKeyException) {\n@@ -84,7 +89,14 @@\n             } else if (ex instanceof InvalidSearchConditionException) {\n                 response.setHeader(\n                         SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                        SyncopeClientExceptionType.InvalidSearchCondition.getHeaderValue());\n+                        SyncopeClientExceptionType.InvalidSearchCondition.\n+                        getHeaderValue());\n+\n+                statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+            } else if (ex.getCause() instanceof LockAcquisitionException) {\n+                response.setHeader(\n+                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                        SyncopeClientExceptionType.Deadlock.getHeaderValue());\n \n                 statusCode = HttpServletResponse.SC_BAD_REQUEST;\n             }"}]}