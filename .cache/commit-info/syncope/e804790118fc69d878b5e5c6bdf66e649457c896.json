{"sha":"e804790118fc69d878b5e5c6bdf66e649457c896","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU4MDQ3OTAxMThmYzY5ZDg3OGI1ZTVjNmJkZjY2ZTY0OTQ1N2M4OTY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-10-03T09:05:47Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-10-03T09:05:47Z"},"message":"[SYNCOPE-135] Security question is now optional for password reset\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_2_X@1629151 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e8e595fc167dabafaab524f49a2e6e0963f35f0f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e8e595fc167dabafaab524f49a2e6e0963f35f0f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e804790118fc69d878b5e5c6bdf66e649457c896","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e804790118fc69d878b5e5c6bdf66e649457c896","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e804790118fc69d878b5e5c6bdf66e649457c896","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e804790118fc69d878b5e5c6bdf66e649457c896/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4353bd397c2f41f7d1302b64e39b0c2a58f92ac8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4353bd397c2f41f7d1302b64e39b0c2a58f92ac8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4353bd397c2f41f7d1302b64e39b0c2a58f92ac8"},{"sha":"548af9a30e23e9206d8d26d6ae4ed191db346941","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/548af9a30e23e9206d8d26d6ae4ed191db346941","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/548af9a30e23e9206d8d26d6ae4ed191db346941"}],"stats":{"total":258,"additions":190,"deletions":68},"files":[{"sha":"a471d54aa095c62529ee5fb19f9edc7380039daa","filename":"client/src/main/java/org/apache/syncope/client/SyncopeClient.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e804790118fc69d878b5e5c6bdf66e649457c896/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e804790118fc69d878b5e5c6bdf66e649457c896/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java?ref=e804790118fc69d878b5e5c6bdf66e649457c896","patch":"@@ -214,9 +214,9 @@ public <T> T ifNoneMatch(final Class<T> serviceClass, final EntityTag etag) {\n      * @return whether self-registration is allowed\n      * @see UserSelfService#getOptions()\n      */\n-    public boolean isSelfRegistrationAllowed() {\n+    public boolean isSelfRegAllowed() {\n         return Boolean.valueOf(restClientFactory.createServiceInstance(UserSelfService.class, mediaType, null, null).\n-                getOptions().getHeaderString(RESTHeaders.SELFREGISTRATION_ALLOWED));\n+                getOptions().getHeaderString(RESTHeaders.SELFREG_ALLOWED));\n     }\n \n     /**\n@@ -225,9 +225,20 @@ public boolean isSelfRegistrationAllowed() {\n      * @return whether password reset is allowed\n      * @see UserSelfService#getOptions()\n      */\n-    public boolean isPasswordResetAllowed() {\n+    public boolean isPwdResetAllowed() {\n         return Boolean.valueOf(restClientFactory.createServiceInstance(UserSelfService.class, mediaType, null, null).\n-                getOptions().getHeaderString(RESTHeaders.PASSWORDRESET_ALLOWED));\n+                getOptions().getHeaderString(RESTHeaders.PWDRESET_ALLOWED));\n+    }\n+\n+    /**\n+     * Checks whether password reset requires security question by calling <tt>UserSelfService</tt>'s options.\n+     *\n+     * @return whether password reset requires security question\n+     * @see UserSelfService#getOptions()\n+     */\n+    public boolean isPwdResetRequiringSecurityQuestions() {\n+        return Boolean.valueOf(restClientFactory.createServiceInstance(UserSelfService.class, mediaType, null, null).\n+                getOptions().getHeaderString(RESTHeaders.PWDRESET_NEEDS_SECURITYQUESTIONS));\n     }\n \n     /**"},{"sha":"ddbfca2a7b1a0482cdde5def91404991eec0095b","filename":"common/src/main/java/org/apache/syncope/common/types/RESTHeaders.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e804790118fc69d878b5e5c6bdf66e649457c896/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e804790118fc69d878b5e5c6bdf66e649457c896/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java?ref=e804790118fc69d878b5e5c6bdf66e649457c896","patch":"@@ -36,12 +36,17 @@ public final class RESTHeaders {\n     /**\n      * Option key stating if user request create is allowed or not.\n      */\n-    public static final String SELFREGISTRATION_ALLOWED = \"Syncope.SelfRegistration.Allowed\";\n+    public static final String SELFREG_ALLOWED = \"Syncope.SelfRegistration.Allowed\";\n \n     /**\n-     * Option key stating if user request create is allowed or not.\n+     * Option key stating if password reset is allowed or not.\n+     */\n+    public static final String PWDRESET_ALLOWED = \"Syncope.PasswordReset.Allowed\";\n+\n+    /**\n+     * Option key stating if password reset requires security question or not.\n      */\n-    public static final String PASSWORDRESET_ALLOWED = \"Syncope.PasswordReset.Allowed\";\n+    public static final String PWDRESET_NEEDS_SECURITYQUESTIONS = \"Syncope.PasswordReset.SecurityQuestions\";\n \n     /**\n      * Option key stating if Activiti workflow adapter is in use for users."},{"sha":"ae818529005387b00ccfada8d0b94d693dda18a2","filename":"console/src/main/java/org/apache/syncope/console/SyncopeSession.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e804790118fc69d878b5e5c6bdf66e649457c896/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e804790118fc69d878b5e5c6bdf66e649457c896/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java?ref=e804790118fc69d878b5e5c6bdf66e649457c896","patch":"@@ -87,18 +87,25 @@ public void resetClients() {\n         clients.clear();\n     }\n \n-    public boolean isSelfRegistrationAllowed() {\n+    public boolean isSelfRegAllowed() {\n         SyncopeClient client = clients.isEmpty()\n                 ? clientFactory.createAnonymous()\n                 : clients.values().iterator().next();\n-        return client.isSelfRegistrationAllowed();\n+        return client.isSelfRegAllowed();\n     }\n \n-    public boolean isPasswordResetAllowed() {\n+    public boolean isPwdResetAllowed() {\n         SyncopeClient client = clients.isEmpty()\n                 ? clientFactory.createAnonymous()\n                 : clients.values().iterator().next();\n-        return client.isPasswordResetAllowed();\n+        return client.isPwdResetAllowed();\n+    }\n+\n+    public boolean isPwdResetRequiringSecurityQuestions() {\n+        SyncopeClient client = clients.isEmpty()\n+                ? clientFactory.createAnonymous()\n+                : clients.values().iterator().next();\n+        return client.isPwdResetRequiringSecurityQuestions();\n     }\n \n     public boolean isActivitiEnabledFor(final SubjectType type) {"},{"sha":"165f3de8c4acae9425bab2640eed7c361dc8bbe4","filename":"console/src/main/java/org/apache/syncope/console/pages/RequestPasswordResetModalPage.java","status":"modified","additions":34,"deletions":17,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e804790118fc69d878b5e5c6bdf66e649457c896/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRequestPasswordResetModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e804790118fc69d878b5e5c6bdf66e649457c896/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRequestPasswordResetModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRequestPasswordResetModalPage.java?ref=e804790118fc69d878b5e5c6bdf66e649457c896","patch":"@@ -28,6 +28,7 @@\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.StatelessForm;\n import org.apache.wicket.model.Model;\n@@ -45,42 +46,58 @@ public RequestPasswordResetModalPage(final ModalWindow window) {\n         super();\n         setOutputMarkupId(true);\n \n+        final boolean handleSecurityQuestion = userSelfRestClient.isPwdResetRequiringSecurityQuestions();\n+\n         final StatelessForm<?> form = new StatelessForm<Object>(FORM);\n         form.setOutputMarkupId(true);\n \n+        final Label securityQuestionLabel = new Label(\"securityQuestionLabel\", getString(\"securityQuestion\"));\n+        securityQuestionLabel.setOutputMarkupPlaceholderTag(true);\n+        securityQuestionLabel.setVisible(handleSecurityQuestion);\n+        form.add(securityQuestionLabel);\n         final AjaxTextFieldPanel securityQuestion =\n                 new AjaxTextFieldPanel(\"securityQuestion\", \"securityQuestion\", new Model<String>());\n         securityQuestion.setReadOnly(true);\n         securityQuestion.setRequired(true);\n         securityQuestion.getField().setOutputMarkupId(true);\n+        securityQuestion.setOutputMarkupPlaceholderTag(true);\n+        securityQuestion.setVisible(handleSecurityQuestion);\n         form.add(securityQuestion);\n \n         final AjaxTextFieldPanel username =\n                 new AjaxTextFieldPanel(\"username\", \"username\", new Model<String>());\n         username.setRequired(true);\n         username.getField().setOutputMarkupId(true);\n-        username.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                try {\n-                    SecurityQuestionTO read = securityQuestionRestClient.readByUser(username.getModelObject());\n-                    securityQuestion.setModelObject(read.getContent());\n-                    target.add(securityQuestion);\n-                } catch (Exception e) {\n-                    LOG.error(\"While fetching security question for {}\", username.getModelObject(), e);\n-                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n-                    feedbackPanel.refresh(target);\n+        if (handleSecurityQuestion) {\n+            username.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                private static final long serialVersionUID = -1107858522700306810L;\n+\n+                @Override\n+                protected void onUpdate(final AjaxRequestTarget target) {\n+                    try {\n+                        SecurityQuestionTO read = securityQuestionRestClient.readByUser(username.getModelObject());\n+                        securityQuestion.setModelObject(read.getContent());\n+                        target.add(securityQuestion);\n+                    } catch (Exception e) {\n+                        LOG.error(\"While fetching security question for {}\", username.getModelObject(), e);\n+                        error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                        feedbackPanel.refresh(target);\n+                    }\n                 }\n-            }\n-        });\n+            });\n+        }\n         form.add(username);\n \n+        final Label securityAnswerLabel = new Label(\"securityAnswerLabel\", getString(\"securityAnswer\"));\n+        securityAnswerLabel.setOutputMarkupPlaceholderTag(true);\n+        securityAnswerLabel.setVisible(handleSecurityQuestion);\n+        form.add(securityAnswerLabel);\n         final AjaxTextFieldPanel securityAnswer =\n                 new AjaxTextFieldPanel(\"securityAnswer\", \"securityAnswer\", new Model<String>());\n-        securityAnswer.setRequired(true);\n+        securityAnswer.setRequired(handleSecurityQuestion);\n+        securityAnswer.setOutputMarkupPlaceholderTag(true);\n+        securityAnswer.setVisible(handleSecurityQuestion);\n         form.add(securityAnswer);\n \n         final AjaxButton submit = new IndicatingAjaxButton(APPLY, new ResourceModel(SUBMIT, SUBMIT)) {"},{"sha":"d72dfce138a8bedb4c0e40ef489a4338797e7281","filename":"console/src/main/java/org/apache/syncope/console/rest/UserSelfRestClient.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e804790118fc69d878b5e5c6bdf66e649457c896/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserSelfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e804790118fc69d878b5e5c6bdf66e649457c896/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserSelfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserSelfRestClient.java?ref=e804790118fc69d878b5e5c6bdf66e649457c896","patch":"@@ -33,7 +33,7 @@ public class UserSelfRestClient extends BaseRestClient {\n     public boolean isSelfRegistrationAllowed() {\n         Boolean result = null;\n         try {\n-            result = SyncopeSession.get().isSelfRegistrationAllowed();\n+            result = SyncopeSession.get().isSelfRegAllowed();\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While seeking if self registration is allowed\", e);\n         }\n@@ -62,7 +62,7 @@ public void delete() {\n     public boolean isPasswordResetAllowed() {\n         Boolean result = null;\n         try {\n-            result = SyncopeSession.get().isPasswordResetAllowed();\n+            result = SyncopeSession.get().isPwdResetAllowed();\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While seeking if password reset is allowed\", e);\n         }\n@@ -72,6 +72,19 @@ public boolean isPasswordResetAllowed() {\n                 : result.booleanValue();\n     }\n \n+    public boolean isPwdResetRequiringSecurityQuestions() {\n+        Boolean result = null;\n+        try {\n+            result = SyncopeSession.get().isPwdResetRequiringSecurityQuestions();\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"While seeking if password reset requires security question\", e);\n+        }\n+\n+        return result == null\n+                ? false\n+                : result.booleanValue();\n+    }\n+\n     public void requestPasswordReset(final String username, final String securityAnswer) {\n         getService(UserSelfService.class).requestPasswordReset(username, securityAnswer);\n     }"},{"sha":"90b4da853e6045145d71281a3b324b33979187b8","filename":"console/src/main/resources/org/apache/syncope/console/pages/RequestPasswordResetModalPage.html","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e804790118fc69d878b5e5c6bdf66e649457c896/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRequestPasswordResetModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e804790118fc69d878b5e5c6bdf66e649457c896/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRequestPasswordResetModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRequestPasswordResetModalPage.html?ref=e804790118fc69d878b5e5c6bdf66e649457c896","patch":"@@ -33,7 +33,7 @@\n \n           <div class=\"tablerow\">\n             <div class=\"tablecolumn_label medium_fixedsize\">\n-              <label for=\"securityQuestion\"><wicket:message key=\"securityQuestion\"/></label>\n+              <label for=\"securityQuestion\"><span wicket:id=\"securityQuestionLabel\"/></label>\n             </div>\n             <div class=\"tablecolumn_field medium_dynamicsize\">\n               <span wicket:id=\"securityQuestion\">[securityQuestion]</span>\n@@ -42,7 +42,7 @@\n \n           <div class=\"tablerow\">\n             <div class=\"tablecolumn_label medium_fixedsize\">\n-              <label for=\"securityAnswer\"><wicket:message key=\"securityAnswer\"/></label>\n+              <label for=\"securityAnswer\"><span wicket:id=\"securityAnswerLabel\"/></label>\n             </div>\n             <div class=\"tablecolumn_field medium_dynamicsize\">\n               <span wicket:id=\"securityAnswer\">[securityAnswer]</span>"},{"sha":"519c931bbb18d46fee88533cf8c49dc6cf8de501","filename":"core/src/main/java/org/apache/syncope/core/connid/ConnObjectUtil.java","status":"modified","additions":23,"deletions":17,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e804790118fc69d878b5e5c6bdf66e649457c896/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e804790118fc69d878b5e5c6bdf66e649457c896/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java?ref=e804790118fc69d878b5e5c6bdf66e649457c896","patch":"@@ -278,17 +278,17 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n                     if (subjectTO instanceof UserTO) {\n                         ((UserTO) subjectTO).setUsername(attribute == null || attribute.getValue().isEmpty()\n                                 || attribute.getValue().get(0) == null\n-                                ? null\n-                                : attribute.getValue().get(0).toString());\n+                                        ? null\n+                                        : attribute.getValue().get(0).toString());\n                     }\n                     break;\n \n                 case RoleName:\n                     if (subjectTO instanceof RoleTO) {\n                         ((RoleTO) subjectTO).setName(attribute == null || attribute.getValue().isEmpty()\n                                 || attribute.getValue().get(0) == null\n-                                ? null\n-                                : attribute.getValue().get(0).toString());\n+                                        ? null\n+                                        : attribute.getValue().get(0).toString());\n                     }\n                     break;\n \n@@ -319,22 +319,28 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n                             ? Collections.emptyList()\n                             : attribute.getValue()) {\n \n+                        AttributeSchemaType schemaType = schema == null ? AttributeSchemaType.String : schema.getType();\n                         if (value != null) {\n                             final AbstractAttrValue attrValue = attrUtil.newAttrValue();\n-                            if (schema == null) {\n-                                attrValue.setStringValue(value.toString());\n-                            } else if (schema.getType() == AttributeSchemaType.Binary) {\n-                                attrValue.setBinaryValue((byte[]) value);\n-                            } else {\n-                                try {\n-                                    attrValue.parseValue(schema, value.toString());\n-                                } catch (ParsingValidationException e) {\n-                                    LOG.error(\"While parsing provided value {}\", value, e);\n+                            switch (schemaType) {\n+                                case String:\n                                     attrValue.setStringValue(value.toString());\n-                                }\n+                                    break;\n+\n+                                case Binary:\n+                                    attrValue.setBinaryValue((byte[]) value);\n+                                    break;\n+\n+                                default:\n+                                    try {\n+                                        attrValue.parseValue(schema, value.toString());\n+                                    } catch (ParsingValidationException e) {\n+                                        LOG.error(\"While parsing provided value {}\", value, e);\n+                                        attrValue.setStringValue(value.toString());\n+                                        schemaType = AttributeSchemaType.String;\n+                                    }\n                             }\n-                            attributeTO.getValues().add(attrValue.getValueAsString(\n-                                    schema == null ? AttributeSchemaType.String : schema.getType()));\n+                            attributeTO.getValues().add(attrValue.getValueAsString(schemaType));\n                         }\n                     }\n \n@@ -540,7 +546,7 @@ public void retrieveVirAttrValues(final AbstractAttributable owner, final Attrib\n \n         final IntMappingType type = attrUtil.getType() == AttributableType.USER\n                 ? IntMappingType.UserVirtualSchema : attrUtil.getType() == AttributableType.ROLE\n-                ? IntMappingType.RoleVirtualSchema : IntMappingType.MembershipVirtualSchema;\n+                        ? IntMappingType.RoleVirtualSchema : IntMappingType.MembershipVirtualSchema;\n \n         final Map<String, ConnectorObject> externalResources = new HashMap<String, ConnectorObject>();\n "},{"sha":"be426b73494c4a05db4c82ec6443493235045317","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e804790118fc69d878b5e5c6bdf66e649457c896/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e804790118fc69d878b5e5c6bdf66e649457c896/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=e804790118fc69d878b5e5c6bdf66e649457c896","patch":"@@ -104,15 +104,20 @@ public class UserController extends AbstractSubjectController<UserTO, UserMod> {\n     protected AttributableTransformer attrTransformer;\n \n     @Transactional(readOnly = true)\n-    public boolean isSelfRegistrationAllowed() {\n+    public boolean isSelfRegAllowed() {\n         return confDAO.find(\"selfRegistration.allowed\", \"false\").getValues().get(0).getBooleanValue();\n     }\n \n     @Transactional(readOnly = true)\n-    public boolean isPasswordResetAllowed() {\n+    public boolean isPwdResetAllowed() {\n         return confDAO.find(\"passwordReset.allowed\", \"false\").getValues().get(0).getBooleanValue();\n     }\n \n+    @Transactional(readOnly = true)\n+    public boolean isPwdResetRequiringSecurityQuestions() {\n+        return confDAO.find(\"passwordReset.securityQuestion\", \"true\").getValues().get(0).getBooleanValue();\n+    }\n+\n     @PreAuthorize(\"hasRole('USER_READ')\")\n     public String getUsername(final Long userId) {\n         return binder.getUserTO(userId).getUsername();\n@@ -377,7 +382,9 @@ public void requestPasswordReset(final String username, final String securityAns\n             throw new NotFoundException(\"User \" + username);\n         }\n \n-        if (securityAnswer == null || !securityAnswer.equals(user.getSecurityAnswer())) {\n+        if (isPwdResetRequiringSecurityQuestions()\n+                && (securityAnswer == null || !securityAnswer.equals(user.getSecurityAnswer()))) {\n+\n             throw SyncopeClientException.build(ClientExceptionType.InvalidSecurityAnswer);\n         }\n "},{"sha":"77a63cd3144cdbe25c93f97bc64428babc53985b","filename":"core/src/main/java/org/apache/syncope/core/services/UserSelfServiceImpl.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e804790118fc69d878b5e5c6bdf66e649457c896/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e804790118fc69d878b5e5c6bdf66e649457c896/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java?ref=e804790118fc69d878b5e5c6bdf66e649457c896","patch":"@@ -39,14 +39,15 @@ public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelf\n     @Override\n     public Response getOptions() {\n         return Response.ok().header(HttpHeaders.ALLOW, OPTIONS_ALLOW).\n-                header(RESTHeaders.SELFREGISTRATION_ALLOWED, controller.isSelfRegistrationAllowed()).\n-                header(RESTHeaders.PASSWORDRESET_ALLOWED, controller.isPasswordResetAllowed()).\n+                header(RESTHeaders.SELFREG_ALLOWED, controller.isSelfRegAllowed()).\n+                header(RESTHeaders.PWDRESET_ALLOWED, controller.isPwdResetAllowed()).\n+                header(RESTHeaders.PWDRESET_NEEDS_SECURITYQUESTIONS, controller.isPwdResetRequiringSecurityQuestions()).\n                 build();\n     }\n \n     @Override\n     public Response create(final UserTO userTO, final boolean storePassword) {\n-        if (!controller.isSelfRegistrationAllowed()) {\n+        if (!controller.isSelfRegAllowed()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unauthorized);\n             sce.getElements().add(\"Self registration forbidden by configuration\");\n             throw sce;\n@@ -76,7 +77,7 @@ public Response delete() {\n \n     @Override\n     public void requestPasswordReset(final String username, final String securityAnswer) {\n-        if (!controller.isPasswordResetAllowed()) {\n+        if (!controller.isPwdResetAllowed()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unauthorized);\n             sce.getElements().add(\"Password reset forbidden by configuration\");\n             throw sce;\n@@ -87,7 +88,7 @@ public void requestPasswordReset(final String username, final String securityAns\n \n     @Override\n     public void confirmPasswordReset(final String token, final String password) {\n-        if (!controller.isPasswordResetAllowed()) {\n+        if (!controller.isPwdResetAllowed()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unauthorized);\n             sce.getElements().add(\"Password reset forbidden by configuration\");\n             throw sce;"},{"sha":"618346048e2727530f4ff0cde831f780e8ce23dc","filename":"core/src/main/resources/content.xml","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e804790118fc69d878b5e5c6bdf66e649457c896/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e804790118fc69d878b5e5c6bdf66e649457c896/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=e804790118fc69d878b5e5c6bdf66e649457c896","patch":"@@ -61,17 +61,22 @@ under the License.\n   <CAttr id=\"7\" owner_id=\"1\" schema_name=\"passwordReset.allowed\"/>\n   <CAttrValue id=\"7\" attribute_id=\"7\" booleanValue=\"1\"/>\n \n+  <CSchema name=\"passwordReset.securityQuestion\" type=\"Boolean\"\n+           mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CAttr id=\"8\" owner_id=\"1\" schema_name=\"passwordReset.securityQuestion\"/>\n+  <CAttrValue id=\"8\" attribute_id=\"8\" booleanValue=\"1\"/>\n+\n   <CSchema name=\"authentication.statuses\" type=\"String\"\n            mandatoryCondition=\"true\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CAttr id=\"8\" owner_id=\"1\" schema_name=\"authentication.statuses\"/>\n-  <CAttrValue id=\"8\" attribute_id=\"8\" stringValue=\"created\"/>\n-  <CAttrValue id=\"9\" attribute_id=\"8\" stringValue=\"active\"/>\n+  <CAttr id=\"9\" owner_id=\"1\" schema_name=\"authentication.statuses\"/>\n+  <CAttrValue id=\"9\" attribute_id=\"9\" stringValue=\"created\"/>\n+  <CAttrValue id=\"10\" attribute_id=\"9\" stringValue=\"active\"/>\n \n   <!-- Save user login date upon successful authentication -->\n   <CSchema name=\"log.lastlogindate\" type=\"Boolean\"\n            mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CAttr id=\"10\" owner_id=\"1\" schema_name=\"log.lastlogindate\"/>\n-  <CAttrValue id=\"10\" attribute_id=\"10\" booleanValue=\"1\"/>\n+  <CAttr id=\"11\" owner_id=\"1\" schema_name=\"log.lastlogindate\"/>\n+  <CAttrValue id=\"11\" attribute_id=\"11\" booleanValue=\"1\"/>\n     \n   <!-- User pre-defined schemas -->\n   <USchema name=\"email\" type=\"String\""},{"sha":"595341fd6d2bad4c5a2a68544352231c28620b48","filename":"core/src/test/java/org/apache/syncope/core/rest/UserSelfTestITCase.java","status":"modified","additions":46,"deletions":1,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e804790118fc69d878b5e5c6bdf66e649457c896/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e804790118fc69d878b5e5c6bdf66e649457c896/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java?ref=e804790118fc69d878b5e5c6bdf66e649457c896","patch":"@@ -59,7 +59,7 @@ public class UserSelfTestITCase extends AbstractTest {\n \n     @Test\n     public void selfRegistrationAllowed() {\n-        assertTrue(clientFactory.createAnonymous().isSelfRegistrationAllowed());\n+        assertTrue(clientFactory.createAnonymous().isSelfRegAllowed());\n     }\n \n     @Test\n@@ -293,4 +293,49 @@ public void passwordReset() {\n         assertNotNull(read);\n         assertNull(read.getToken());\n     }\n+\n+    @Test\n+    public void passwordResetWithoutSecurityQuestion() {\n+        // 0. disable security question for password reset\n+        configurationService.set(\"passwordReset.securityQuestion\",\n+                attributeTO(\"passwordReset.securityQuestion\", \"false\"));\n+\n+        // 1. create an user with security question and answer\n+        UserTO user = UserTestITCase.getUniqueSampleTO(\"pwdResetNoSecurityQuestion@syncope.apache.org\");\n+        createUser(user);\n+\n+        // 2. verify that new user is able to authenticate\n+        SyncopeClient authClient = clientFactory.create(user.getUsername(), \"password123\");\n+        UserTO read = authClient.getService(UserSelfService.class).read();\n+        assertNotNull(read);\n+\n+        // 3. request password reset (as anonymous) with no security answer\n+        SyncopeClient anonClient = clientFactory.createAnonymous();\n+        anonClient.getService(UserSelfService.class).requestPasswordReset(user.getUsername(), null);\n+\n+        // 4. get token (normally sent via e-mail, now reading as admin)\n+        String token = userService.read(read.getId()).getToken();\n+        assertNotNull(token);\n+\n+        // 5. confirm password reset\n+        try {\n+            anonClient.getService(UserSelfService.class).confirmPasswordReset(\"WRONG TOKEN\", \"newPassword\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+            assertTrue(e.getMessage().contains(\"WRONG TOKEN\"));\n+        }\n+        anonClient.getService(UserSelfService.class).confirmPasswordReset(token, \"newPassword\");\n+\n+        // 6. verify that password was reset and token removed\n+        authClient = clientFactory.create(user.getUsername(), \"newPassword\");\n+        read = authClient.getService(UserSelfService.class).read();\n+        assertNotNull(read);\n+        assertNull(read.getToken());\n+\n+        // 7. re-enable security question for password reset\n+        configurationService.set(\"passwordReset.securityQuestion\",\n+                attributeTO(\"passwordReset.securityQuestion\", \"true\"));\n+    }\n+\n }"},{"sha":"82ac69ce2fdd75482d77bff31c0a12f58f1133eb","filename":"core/src/test/resources/content.xml","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e804790118fc69d878b5e5c6bdf66e649457c896/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e804790118fc69d878b5e5c6bdf66e649457c896/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=e804790118fc69d878b5e5c6bdf66e649457c896","patch":"@@ -59,17 +59,22 @@ under the License.\n   <CAttr id=\"7\" owner_id=\"1\" schema_name=\"passwordReset.allowed\"/>\n   <CAttrValue id=\"7\" attribute_id=\"7\" booleanValue=\"1\"/>\n \n+  <CSchema name=\"passwordReset.securityQuestion\" type=\"Boolean\"\n+           mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CAttr id=\"8\" owner_id=\"1\" schema_name=\"passwordReset.securityQuestion\"/>\n+  <CAttrValue id=\"8\" attribute_id=\"8\" booleanValue=\"1\"/>\n+\n   <CSchema name=\"authentication.statuses\" type=\"String\"\n            mandatoryCondition=\"true\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CAttr id=\"8\" owner_id=\"1\" schema_name=\"authentication.statuses\"/>\n-  <CAttrValue id=\"8\" attribute_id=\"8\" stringValue=\"created\"/>\n-  <CAttrValue id=\"9\" attribute_id=\"8\" stringValue=\"active\"/>\n+  <CAttr id=\"9\" owner_id=\"1\" schema_name=\"authentication.statuses\"/>\n+  <CAttrValue id=\"9\" attribute_id=\"9\" stringValue=\"created\"/>\n+  <CAttrValue id=\"10\" attribute_id=\"9\" stringValue=\"active\"/>\n \n   <!-- Save user login date upon successful authentication -->\n   <CSchema name=\"log.lastlogindate\" type=\"Boolean\"\n            mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CAttr id=\"10\" owner_id=\"1\" schema_name=\"log.lastlogindate\"/>\n-  <CAttrValue id=\"10\" attribute_id=\"10\" booleanValue=\"1\"/>\n+  <CAttr id=\"11\" owner_id=\"1\" schema_name=\"log.lastlogindate\"/>\n+  <CAttrValue id=\"11\" attribute_id=\"11\" booleanValue=\"1\"/>\n \n   <!-- sample policies -->\n   <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"global sync policy\" type=\"GLOBAL_SYNC\" "}]}