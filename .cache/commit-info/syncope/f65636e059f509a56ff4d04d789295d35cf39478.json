{"sha":"f65636e059f509a56ff4d04d789295d35cf39478","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY2NTYzNmUwNTlmNTA5YTU2ZmY0ZDA0ZDc4OTI5NWQzNWNmMzk0Nzg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-24T15:33:34Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-24T15:33:34Z"},"message":"[SYNCOPE-742] Reversing 72e3836cf29e1edeb2c619c2d06ce64252e31f34 - back to CXF 3.1.5-SNAPSHOT","tree":{"sha":"7e18f89fedff0ee2ea451051176312fd970ce61c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7e18f89fedff0ee2ea451051176312fd970ce61c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f65636e059f509a56ff4d04d789295d35cf39478","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f65636e059f509a56ff4d04d789295d35cf39478","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f65636e059f509a56ff4d04d789295d35cf39478","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f65636e059f509a56ff4d04d789295d35cf39478/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"045975e087aaebbdc1ef2b85ace65bc4267be93b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/045975e087aaebbdc1ef2b85ace65bc4267be93b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/045975e087aaebbdc1ef2b85ace65bc4267be93b"}],"stats":{"total":178,"additions":50,"deletions":128},"files":[{"sha":"92f9bf37adbd5bf650dd5e225d0ea600fab57f2a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaSyncopeOperations.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -34,27 +34,19 @@ public <T extends AbstractSchemaTO> T read(final String schemaTypeString, final\n     }\n \n     public <T extends AbstractSchemaTO> List<T> list(final String schemaTypeString) {\n-        return schemaService.list(\n-                SchemaType.valueOf(schemaTypeString),\n-                new SchemaQuery.Builder().type(SchemaType.valueOf(schemaTypeString)).build());\n+        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.valueOf(schemaTypeString)).build());\n     }\n \n     public <T extends AbstractSchemaTO> List<T> listPlain() {\n-        return schemaService.list(\n-                SchemaType.PLAIN,\n-                new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n+        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n     }\n \n     public <T extends AbstractSchemaTO> List<T> listDerived() {\n-        return schemaService.list(\n-                SchemaType.DERIVED,\n-                new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n+        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n     }\n \n     public <T extends AbstractSchemaTO> List<T> listVirtual() {\n-        return schemaService.list(\n-                SchemaType.VIRTUAL,\n-                new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n+        return schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n     }\n \n     public void delete(final String schemaTypeString, final String schemaName) {"},{"sha":"61ba77110cf9c94ced6270359a24cb24b5b2874f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskSyncopeOperations.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -49,15 +49,11 @@ public void delete(final String taskKey) {\n     }\n \n     public List<AbstractTaskTO> list(final String type) {\n-        return taskService.list(\n-                TaskType.valueOf(type),\n-                new TaskQuery.Builder().type(TaskType.valueOf(type)).build()).getResult();\n+        return taskService.list(new TaskQuery.Builder().type(TaskType.valueOf(type)).build()).getResult();\n     }\n \n     public List<AbstractTaskTO> listPropagationTask() {\n-        return taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).getResult();\n+        return taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).getResult();\n     }\n \n     public void deleteExecution(final String executionKey) {"},{"sha":"10c2fa2ae6ea66524c6c076847e8d8e975e981f5","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -64,10 +64,10 @@ public <T extends AbstractSchemaTO> List<T> getSchemas(final SchemaType schemaTy\n         try {\n             if (kind == null || kind.length == 0) {\n                 schemas.addAll(getService(SchemaService.class).\n-                        <T>list(schemaType, new SchemaQuery.Builder().type(schemaType).build()));\n+                        <T>list(new SchemaQuery.Builder().type(schemaType).build()));\n             } else {\n                 schemas.addAll(getService(SchemaService.class).\n-                        <T>list(schemaType, new SchemaQuery.Builder().type(schemaType).anyTypeClasses(kind).build()));\n+                        <T>list(new SchemaQuery.Builder().type(schemaType).anyTypeClasses(kind).build()));\n             }\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all {} schemas for {}\", schemaType, kind, e);"},{"sha":"7de2253cb23a1932deac5bb69fb90f9fecc62c2c","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -65,8 +65,7 @@ public Set<String> getPushActionsClasses() {\n      */\n     public int count(final String kind) {\n         return getService(TaskService.class).\n-                list(TaskType.valueOf(kind),\n-                        new TaskQuery.Builder().type(TaskType.valueOf(kind)).page(1).size(1).build()).\n+                list(new TaskQuery.Builder().type(TaskType.valueOf(kind)).page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n@@ -75,8 +74,7 @@ public <T extends AbstractTaskTO> List<T> list(\n             final Class<T> reference, final int page, final int size, final SortParam<String> sort) {\n \n         return (List<T>) getService(TaskService.class).\n-                list(getTaskType(reference),\n-                        new TaskQuery.Builder().type(getTaskType(reference)).page(page).size(size).\n+                list(new TaskQuery.Builder().type(getTaskType(reference)).page(page).size(size).\n                         orderBy(toOrderBy(sort)).build()).\n                 getResult();\n     }"},{"sha":"db6a7e4a084b5ef919a2da9c2422e6655c768dc4","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -67,13 +67,13 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n             final AnyTypeTO anyTypeUserTO = anyTypeService.read(AnyTypeKind.USER.name());\n \n             final List<PlainSchemaTO> plainSchemas = schemaService.list(\n-                    SchemaType.PLAIN, new SchemaQuery.Builder().type(SchemaType.PLAIN).\n+                    new SchemaQuery.Builder().type(SchemaType.PLAIN).\n                     anyTypeClasses(anyTypeUserTO.getClasses()).build());\n             final List<DerSchemaTO> derSchemas = schemaService.list(\n-                    SchemaType.DERIVED, new SchemaQuery.Builder().type(SchemaType.DERIVED).\n+                    new SchemaQuery.Builder().type(SchemaType.DERIVED).\n                     anyTypeClasses(anyTypeUserTO.getClasses()).build());\n             final List<VirSchemaTO> virSchemas = schemaService.list(\n-                    SchemaType.VIRTUAL, new SchemaQuery.Builder().type(SchemaType.VIRTUAL).\n+                    new SchemaQuery.Builder().type(SchemaType.VIRTUAL).\n                     anyTypeClasses(anyTypeUserTO.getClasses()).build());\n \n             response.setWriteCallback(new AbstractResource.WriteCallback() {"},{"sha":"48f9b404c6966d924ff6ab72b6b8b212ef3f5db8","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -59,15 +59,12 @@ <T extends AbstractSchemaTO> T read(\n      * Returns a list of schemas matching the given query.\n      *\n      * @param <T> actual SchemaTO\n-     * @param type type for schemas to be listed\n      * @param query query conditions\n      * @return list of schemas with matching type, for the given anyTypeClass if provided\n      */\n     @GET\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractSchemaTO> List<T> list(\n-            @NotNull @PathParam(\"type\") SchemaType type,\n-            @BeanParam SchemaQuery query);\n+    <T extends AbstractSchemaTO> List<T> list(@BeanParam SchemaQuery query);\n \n     /**\n      * Creates a new schema."},{"sha":"eda7c4b3a94155e7e1f879099d89e85130cc7e90","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -42,7 +42,6 @@\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n-import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n@@ -72,16 +71,13 @@ <T extends AbstractTaskTO> T read(\n     /**\n      * Returns a paged list of existing tasks matching the given query.\n      *\n-     * @param type type of tasks to be listed\n      * @param query query conditions\n      * @param <T> type of taskTO\n      * @return paged list of existing tasks matching the given query\n      */\n     @GET\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractTaskTO> PagedResult<T> list(\n-            @NotNull @MatrixParam(\"type\") TaskType type,\n-            @BeanParam TaskQuery query);\n+    <T extends AbstractTaskTO> PagedResult<T> list(@BeanParam TaskQuery query);\n \n     /**\n      * Creates a new task."},{"sha":"fa7ce9a5da96525dc59d79b0edb8a71ab2ebc369","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/Swagger2Feature.java","status":"modified","additions":6,"deletions":34,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSwagger2Feature.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSwagger2Feature.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSwagger2Feature.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -21,48 +21,20 @@\n import java.net.URL;\n import org.apache.cxf.Bus;\n import org.apache.cxf.endpoint.Server;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * Automatically loads available javadocs from class loader (when {@link java.net.URLClassLoader}).\n  */\n public class Swagger2Feature extends org.apache.cxf.jaxrs.swagger.Swagger2Feature {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(Swagger2Feature.class);\n-\n-    private static final boolean SWAGGER_JAXRS_AVAILABLE;\n-\n-    static {\n-        SWAGGER_JAXRS_AVAILABLE = isSwaggerJaxRsAvailable();\n-    }\n-\n-    private static boolean isSwaggerJaxRsAvailable() {\n-        try {\n-            Class.forName(\"io.swagger.jaxrs.DefaultParameterExtension\");\n-            return true;\n-        } catch (Throwable ex) {\n-            return false;\n-        }\n-    }\n-\n-    public void setActivateOnlyIfJaxrsSupported(final boolean activateOnlyIfJaxrsSupported) {\n-        // do nothing\n-    }\n-\n     @Override\n     public void initialize(final Server server, final Bus bus) {\n-        if (SWAGGER_JAXRS_AVAILABLE) {\n-            URL[] javaDocURLs = JavaDocUtils.getJavaDocURLs();\n-            if (javaDocURLs != null && javaDocURLs.length >= 0) {\n-                try {\n-                    super.setJavaDocPath(javaDocURLs[0].toExternalForm());\n-                } catch (Exception e) {\n-                    LOG.error(\"Could not load Javadocs from {}\", javaDocURLs[0], e);\n-                }\n-            }\n-\n-            super.initialize(server, bus);\n+        URL[] javaDocURLs = JavaDocUtils.getJavaDocURLs();\n+        if (javaDocURLs != null) {\n+            super.setJavaDocURLs(javaDocURLs);\n         }\n+\n+        super.initialize(server, bus);\n     }\n+\n }"},{"sha":"444e58e664c0d5d09c4d6b94752f6fafac6b3bd1","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WadlGenerator.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -20,27 +20,21 @@\n \n import java.net.URL;\n import javax.ws.rs.container.ContainerRequestContext;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * Automatically loads available javadocs from class loader (when {@link java.net.URLClassLoader}).\n  */\n public class WadlGenerator extends org.apache.cxf.jaxrs.model.wadl.WadlGenerator {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(WadlGenerator.class);\n-\n     private boolean inited = false;\n \n     @Override\n     public void filter(final ContainerRequestContext context) {\n         synchronized (this) {\n             if (!inited) {\n                 URL[] javaDocURLs = JavaDocUtils.getJavaDocURLs();\n-                try {\n-                    super.setJavaDocPath(javaDocURLs[0].toExternalForm());\n-                } catch (Exception e) {\n-                    LOG.error(\"Could not load Javadocs from {}\", javaDocURLs[0], e);\n+                if (javaDocURLs != null) {\n+                    super.setJavaDocURLs(javaDocURLs);\n                 }\n \n                 inited = true;"},{"sha":"810c520277cbd6f7d719480965b1cae6c0180994","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -52,8 +52,7 @@ public void delete(final SchemaType schemaType, final String key) {\n     }\n \n     @Override\n-    public <T extends AbstractSchemaTO> List<T> list(final SchemaType type, final SchemaQuery query) {\n-        query.setType(type);\n+    public <T extends AbstractSchemaTO> List<T> list(final SchemaQuery query) {\n         return logic.list(query.getType(), query.getAnyTypeClasses());\n     }\n "},{"sha":"5b331036494116bae9782cc110cbc05d819f313c","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -32,7 +32,6 @@\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n-import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n@@ -76,8 +75,7 @@ public TaskExecTO execute(final ExecuteQuery query) {\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType type, final TaskQuery query) {\n-        query.setType(type);\n+    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskQuery query) {\n         return (PagedResult<T>) buildPagedResult(\n                 logic.list(\n                         query.getType(),"},{"sha":"8a20ea9e163a908bc86b3b08ae3b07e53e27edb0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -168,7 +168,7 @@ protected Map<Long, TaskExecTO> execProvisioningTasks(final TaskService taskServ\n \n     protected NotificationTaskTO findNotificationTaskBySender(final String sender) {\n         PagedResult<NotificationTaskTO> tasks =\n-                taskService.list(TaskType.NOTIFICATION, new TaskQuery.Builder().type(TaskType.NOTIFICATION).build());\n+                taskService.list(new TaskQuery.Builder().type(TaskType.NOTIFICATION).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n "},{"sha":"6221f4500c2609619c8bb83ca537531484447a2e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/DerSchemaITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDerSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDerSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDerSchemaITCase.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -41,8 +41,7 @@ public class DerSchemaITCase extends AbstractITCase {\n \n     @Test\n     public void list() {\n-        List<DerSchemaTO> derSchemas = schemaService.list(\n-                SchemaType.DERIVED, new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n+        List<DerSchemaTO> derSchemas = schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n         assertFalse(derSchemas.isEmpty());\n         for (DerSchemaTO derivedSchemaTO : derSchemas) {\n             assertNotNull(derivedSchemaTO);"},{"sha":"845818121ab0375f5394927db7b8ef1712dae954","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/MultitenancyITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -104,7 +104,7 @@ public void masterOnly() {\n     @Test\n     public void readPlainSchemas() {\n         assertEquals(17, adminClient.getService(SchemaService.class).\n-                list(SchemaType.PLAIN, new SchemaQuery.Builder().type(SchemaType.PLAIN).build()).size());\n+                list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build()).size());\n     }\n \n     @Test"},{"sha":"edd32ec4e6f2dbe0505c08f5427e31603050fcc5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PlainSchemaITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -158,8 +158,7 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        List<PlainSchemaTO> schemas = schemaService.list(\n-                SchemaType.PLAIN, new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n+        List<PlainSchemaTO> schemas = schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n         assertFalse(schemas.isEmpty());\n         for (PlainSchemaTO schemaTO : schemas) {\n             assertNotNull(schemaTO);\n@@ -171,7 +170,7 @@ public void listByAnyTypeClass() {\n         final String clazz = anyTypeService.read(AnyTypeKind.USER.name()).getClasses().get(0);\n \n         List<PlainSchemaTO> userSchemas = schemaService.list(\n-                SchemaType.PLAIN, new SchemaQuery.Builder().type(SchemaType.PLAIN).anyTypeClass(clazz).build());\n+                new SchemaQuery.Builder().type(SchemaType.PLAIN).anyTypeClass(clazz).build());\n \n         assertTrue(IterableUtils.matchesAny(userSchemas, new Predicate<PlainSchemaTO>() {\n "},{"sha":"d5c77e71e3b7946629ac97917553b76e5114243d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PropagationTaskITCase.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -45,7 +45,7 @@ public class PropagationTaskITCase extends AbstractTaskITCase {\n     @Test\n     public void paginatedList() {\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(2).build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(2).build());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getResult().size());\n \n@@ -54,7 +54,7 @@ public void paginatedList() {\n         }\n \n         tasks = taskService.list(\n-                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).page(2).size(2).build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(2).size(2).build());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getPage());\n         assertEquals(2, tasks.getResult().size());\n@@ -64,7 +64,7 @@ public void paginatedList() {\n         }\n \n         tasks = taskService.list(\n-                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1000).size(2).build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1000).size(2).build());\n         assertNotNull(tasks);\n         assertTrue(tasks.getResult().isEmpty());\n     }\n@@ -80,16 +80,15 @@ public void read() {\n     @Test\n     public void bulkAction() {\n         PagedResult<PropagationTaskTO> before = taskService.list(\n-                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).build());\n \n         // create user with testdb resource\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"taskBulk@apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n         createUser(userTO);\n \n         List<PropagationTaskTO> after = new ArrayList<>(\n-                taskService.<PropagationTaskTO>list(\n-                        TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).\n+                taskService.<PropagationTaskTO>list(new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).\n                 getResult());\n         after.removeAll(before.getResult());\n         assertFalse(after.isEmpty());\n@@ -103,8 +102,7 @@ public void bulkAction() {\n \n         taskService.bulk(bulkAction);\n \n-        assertFalse(taskService.list(\n-                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).getResult().\n+        assertFalse(taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).getResult().\n                 containsAll(after));\n     }\n \n@@ -122,14 +120,12 @@ public void issueSYNCOPE741() {\n \n         // check list\n         PagedResult<AbstractTaskTO> tasks = taskService.list(\n-                TaskType.PROPAGATION,\n                 new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(2).details(false).build());\n         for (AbstractTaskTO item : tasks.getResult()) {\n             assertTrue(item.getExecutions().isEmpty());\n         }\n \n         tasks = taskService.list(\n-                TaskType.PROPAGATION,\n                 new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(2).details(true).build());\n         for (AbstractTaskTO item : tasks.getResult()) {\n             assertFalse(item.getExecutions().isEmpty());"},{"sha":"93f0139253873719b14c578864fa6d0a3fc15a53","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PushTaskITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -80,8 +80,7 @@ public void read() {\n \n     @Test\n     public void list() {\n-        PagedResult<PushTaskTO> tasks = taskService.list(\n-                TaskType.PUSH, new TaskQuery.Builder().type(TaskType.PUSH).build());\n+        PagedResult<PushTaskTO> tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PUSH).build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof PushTaskTO)) {"},{"sha":"327abe8466cbf1462b0eddf4b8a5288e78b3fdec","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SchedTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -60,7 +60,7 @@ public void getJobClasses() {\n     @Test\n     public void list() {\n         PagedResult<SchedTaskTO> tasks =\n-                taskService.list(TaskType.SCHEDULED, new TaskQuery.Builder().type(TaskType.SCHEDULED).build());\n+                taskService.list(new TaskQuery.Builder().type(TaskType.SCHEDULED).build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof SchedTaskTO) || task instanceof SyncTaskTO || task instanceof PushTaskTO) {"},{"sha":"2385ebef62e438644b40665fc1975b3e6405cae9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -98,7 +98,7 @@ public void getSyncActionsClasses() {\n     @Test\n     public void list() {\n         PagedResult<SyncTaskTO> tasks = taskService.list(\n-                TaskType.SYNCHRONIZATION, new TaskQuery.Builder().type(TaskType.SYNCHRONIZATION).build());\n+                new TaskQuery.Builder().type(TaskType.SYNCHRONIZATION).build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof SyncTaskTO)) {"},{"sha":"199fe0b1ab1271be55d2a4809f77aa4f3093afb2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":7,"deletions":18,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -144,7 +144,7 @@ public static UserTO getSampleTO(final String email) {\n     public void createUserWithNoPropagation() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -159,7 +159,7 @@ public void createUserWithNoPropagation() {\n \n         // get the new task list\n         tasks = taskService.list(\n-                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -348,7 +348,7 @@ public void createWithException() {\n     public void create() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                TaskType.PROPAGATION, new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -388,9 +388,7 @@ public void create() {\n         assertNotNull(newUserTO.getCreationDate());\n \n         // get the new task list\n-        tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -685,7 +683,6 @@ public void update() {\n     @Test\n     public void updatePasswordOnly() {\n         int beforeTasks = taskService.list(\n-                TaskType.PROPAGATION,\n                 new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n@@ -704,7 +701,6 @@ public void updatePasswordOnly() {\n         assertNotNull(userTO.getChangePwdDate());\n \n         int afterTasks = taskService.list(\n-                TaskType.PROPAGATION,\n                 new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n@@ -716,7 +712,6 @@ public void updatePasswordOnly() {\n     public void verifyTaskRegistration() {\n         // get task list\n         PagedResult<PropagationTaskTO> tasks = taskService.list(\n-                TaskType.PROPAGATION,\n                 new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n@@ -736,9 +731,7 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -762,9 +755,7 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();\n@@ -784,9 +775,7 @@ public void verifyTaskRegistration() {\n         userService.delete(userTO.getKey());\n \n         // get the new task list\n-        tasks = taskService.list(\n-                TaskType.PROPAGATION,\n-                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();"},{"sha":"56d8186172b032b13af3d737cac2bc49e7a7b5d4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirSchemaITCase.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -44,8 +44,7 @@ public class VirSchemaITCase extends AbstractITCase {\n \n     @Test\n     public void list() {\n-        List<VirSchemaTO> vSchemas = schemaService.list(\n-                SchemaType.VIRTUAL, new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n+        List<VirSchemaTO> vSchemas = schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n         assertFalse(vSchemas.isEmpty());\n         for (VirSchemaTO vSchemaTO : vSchemas) {\n             assertNotNull(vSchemaTO);\n@@ -95,15 +94,14 @@ public void crud() {\n     public void anonymous() {\n         SchemaService unauthenticated = clientFactory.create().getService(SchemaService.class);\n         try {\n-            unauthenticated.list(SchemaType.VIRTUAL, new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n+            unauthenticated.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n             fail();\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n \n         SchemaService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(SchemaService.class);\n-        assertFalse(anonymous.list(\n-                SchemaType.VIRTUAL, new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build()).isEmpty());\n+        assertFalse(anonymous.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build()).isEmpty());\n     }\n \n     @Test"},{"sha":"41f2ba5b512b522723a80f08750c278d96b45b92","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f65636e059f509a56ff4d04d789295d35cf39478/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f65636e059f509a56ff4d04d789295d35cf39478/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=f65636e059f509a56ff4d04d789295d35cf39478","patch":"@@ -327,7 +327,7 @@ under the License.\n     <connid.ldap.version>1.5.0</connid.ldap.version>\n     <connid.ad.version>1.3.0</connid.ad.version>\n \n-    <cxf.version>3.1.4</cxf.version>\n+    <cxf.version>3.1.5-SNAPSHOT</cxf.version>\n \n     <camel.version>2.16.1</camel.version>\t\n "}]}