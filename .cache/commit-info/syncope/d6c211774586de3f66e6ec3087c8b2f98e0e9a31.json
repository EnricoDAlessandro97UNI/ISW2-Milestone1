{"sha":"d6c211774586de3f66e6ec3087c8b2f98e0e9a31","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ2YzIxMTc3NDU4NmRlM2Y2NmU2ZWMzMDg3YzhiMmY5OGUwZTlhMzE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-02T16:17:10Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-02T16:21:03Z"},"message":"[SYNCOPE-738] Temporary workaround: recognize if running in JBoss / Wildfy and switch to old DOM parser API","tree":{"sha":"46f2bcb7ee8848ed4c8b2a418b49e233985fec93","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/46f2bcb7ee8848ed4c8b2a418b49e233985fec93"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d6c211774586de3f66e6ec3087c8b2f98e0e9a31","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d6c211774586de3f66e6ec3087c8b2f98e0e9a31","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d6c211774586de3f66e6ec3087c8b2f98e0e9a31","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d6c211774586de3f66e6ec3087c8b2f98e0e9a31/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"39950ccfc849edf25451686cca82c4970621c3bc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/39950ccfc849edf25451686cca82c4970621c3bc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/39950ccfc849edf25451686cca82c4970621c3bc"}],"stats":{"total":73,"additions":65,"deletions":8},"files":[{"sha":"6228346233e2f5c0d567782ab59ae1d69faec113","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/init/CamelRouteLoader.java","status":"modified","additions":65,"deletions":8,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6c211774586de3f66e6ec3087c8b2f98e0e9a31/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6c211774586de3f66e6ec3087c8b2f98e0e9a31/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java?ref=d6c211774586de3f66e6ec3087c8b2f98e0e9a31","patch":"@@ -21,6 +21,15 @@\n import java.io.StringWriter;\n import java.util.Map;\n import javax.sql.DataSource;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CamelEntitlement;\n import org.apache.syncope.core.misc.EntitlementsHolder;\n@@ -34,6 +43,7 @@\n import org.springframework.core.io.Resource;\n import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.stereotype.Component;\n+import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n@@ -49,6 +59,21 @@ public class CamelRouteLoader implements SyncopeLoader {\n \n     private static final Logger LOG = LoggerFactory.getLogger(CamelRouteLoader.class);\n \n+    private static final boolean IS_JBOSS;\n+\n+    static {\n+        IS_JBOSS = isJBoss();\n+    }\n+\n+    private static boolean isJBoss() {\n+        try {\n+            Class.forName(\"org.jboss.vfs.VirtualFile\");\n+            return true;\n+        } catch (Throwable ex) {\n+            return false;\n+        }\n+    }\n+\n     @javax.annotation.Resource(name = \"userRoutes\")\n     private ResourceWithFallbackLoader userRoutesLoader;\n \n@@ -94,6 +119,22 @@ private String nodeToString(final Node content, final DOMImplementationLS domImp\n         return writer.toString();\n     }\n \n+    private String nodeToString(final Node content, final TransformerFactory tf) {\n+        String output = StringUtils.EMPTY;\n+\n+        try {\n+            Transformer transformer = tf.newTransformer();\n+            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+            StringWriter writer = new StringWriter();\n+            transformer.transform(new DOMSource(content), new StreamResult(writer));\n+            output = writer.getBuffer().toString();\n+        } catch (TransformerException e) {\n+            LOG.debug(\"While serializing route node\", e);\n+        }\n+\n+        return output;\n+    }\n+\n     private void loadRoutes(\n             final String domain, final DataSource dataSource, final Resource resource, final AnyTypeKind anyTypeKind) {\n \n@@ -105,17 +146,33 @@ private void loadRoutes(\n \n         if (shouldLoadRoutes) {\n             try {\n-                DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();\n-                DOMImplementationLS domImpl = (DOMImplementationLS) reg.getDOMImplementation(\"LS\");\n-                LSInput lsinput = domImpl.createLSInput();\n-                lsinput.setByteStream(resource.getInputStream());\n-\n-                LSParser parser = domImpl.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, null);\n+                TransformerFactory tf = null;\n+                DOMImplementationLS domImpl = null;\n+                NodeList routeNodes;\n+                // When https://issues.jboss.org/browse/WFLY-4416 is resolved, this is not needed any more\n+                if (IS_JBOSS) {\n+                    tf = TransformerFactory.newInstance();\n+                    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n+                    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n+                    Document doc = dBuilder.parse(resource.getInputStream());\n+\n+                    routeNodes = doc.getDocumentElement().getElementsByTagName(\"route\");\n+                } else {\n+                    DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();\n+                    domImpl = (DOMImplementationLS) reg.getDOMImplementation(\"LS\");\n+                    LSInput lsinput = domImpl.createLSInput();\n+                    lsinput.setByteStream(resource.getInputStream());\n+\n+                    LSParser parser = domImpl.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, null);\n+\n+                    routeNodes = parser.parse(lsinput).getDocumentElement().getElementsByTagName(\"route\");\n+                }\n \n-                NodeList routeNodes = parser.parse(lsinput).getDocumentElement().getElementsByTagName(\"route\");\n                 for (int s = 0; s < routeNodes.getLength(); s++) {\n                     Node routeElement = routeNodes.item(s);\n-                    String routeContent = nodeToString(routeNodes.item(s), domImpl);\n+                    String routeContent = IS_JBOSS\n+                            ? nodeToString(routeNodes.item(s), tf)\n+                            : nodeToString(routeNodes.item(s), domImpl);\n                     String routeId = ((Element) routeElement).getAttribute(\"id\");\n \n                     jdbcTemplate.update("}]}