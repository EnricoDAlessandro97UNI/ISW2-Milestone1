{"sha":"04805239e551bb6ee621ea933160f5e99a34c17d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA0ODA1MjM5ZTU1MWJiNmVlNjIxZWE5MzMxNjBmNWU5OWEzNGMxN2Q=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-28T15:17:54Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-28T15:17:54Z"},"message":"(Fixes issue #62)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246611 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"23eb8271a0d1ee3678373c366e65b495c4303ee1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/23eb8271a0d1ee3678373c366e65b495c4303ee1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/04805239e551bb6ee621ea933160f5e99a34c17d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04805239e551bb6ee621ea933160f5e99a34c17d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/04805239e551bb6ee621ea933160f5e99a34c17d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04805239e551bb6ee621ea933160f5e99a34c17d/comments","author":null,"committer":null,"parents":[{"sha":"7f0dff4f1d0ac8587a2bdcca0f973dfb20c696f8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7f0dff4f1d0ac8587a2bdcca0f973dfb20c696f8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7f0dff4f1d0ac8587a2bdcca0f973dfb20c696f8"}],"stats":{"total":412,"additions":236,"deletions":176},"files":[{"sha":"7d5354a91a9bcee08d5e5aec4bb0425b3092f595","filename":"core/pom.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -379,6 +379,7 @@\n                             <classesDirectory>${project.build.directory}/test-classes</classesDirectory>\n                             <includes>\n                                 <include>**/persistence.properties</include>\n+                                <include>**/ehcache.xml</include>\n                                 <include>**/content.xml</include>\n                             </includes>\n                         </configuration>\n@@ -403,6 +404,7 @@\n                         <configuration>\n                             <packagingExcludes>\n                                 WEB-INF/classes/persistence.properties,\n+                                WEB-INF/classes/ehcache.xml,\n                                 WEB-INF/classes/content.xml,\n                                 WEB-INF/classes/beans.xml\n                             </packagingExcludes>"},{"sha":"d2328da7f20292c32fd7ea876b9322408347de05","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttribute.java","status":"modified","additions":5,"deletions":13,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -16,26 +16,18 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n import org.syncope.core.persistence.validation.ParseException;\n import org.syncope.core.persistence.validation.ValidationFailedException;\n \n @MappedSuperclass\n public abstract class AbstractAttribute extends AbstractBaseBean {\n \n-    @Id\n-    @GeneratedValue(strategy = GenerationType.AUTO)\n-    private Long id;\n-\n-    public Long getId() {\n-        return id;\n-    }\n+    public abstract Long getId();\n \n     public <T extends AbstractAttributeValue> T addValue(String value,\n-            T attributeValue) throws ParseException, ValidationFailedException {\n+            T attributeValue)\n+            throws ParseException, ValidationFailedException {\n \n         T actualValue = getSchema().getValidator().getValue(value,\n                 attributeValue);"},{"sha":"e533bef7abbb228c45f057dcae6fcebc894f8ba9","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/Membership.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"sha":"d1543a67fb09d1e6870c92699fda24d90e3e7870","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipAttribute.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -19,8 +19,12 @@\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import javax.persistence.TableGenerator;\n import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n@@ -30,10 +34,18 @@\n @Entity\n public class MembershipAttribute extends AbstractAttribute {\n \n+    @Id\n+    @GeneratedValue(strategy = GenerationType.TABLE,\n+    generator = \"SEQ_MembershipAttribute\")\n+    @TableGenerator(name = \"SEQ_MembershipAttribute\", allocationSize = 20)\n+    private Long id;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     private Membership owner;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     private MembershipSchema schema;\n+\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n     private List<MembershipAttributeValue> values;\n@@ -42,6 +54,11 @@ public MembershipAttribute() {\n         values = new ArrayList<MembershipAttributeValue>();\n     }\n \n+    @Override\n+    public Long getId() {\n+        return id;\n+    }\n+\n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n         return (T) owner;"},{"sha":"234b22ac89b7d69297c62fe8e6f72e05569cfd4e","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleAttribute.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -19,8 +19,12 @@\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import javax.persistence.TableGenerator;\n import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n@@ -30,10 +34,18 @@\n @Entity\n public class RoleAttribute extends AbstractAttribute {\n \n+    @Id\n+    @GeneratedValue(strategy = GenerationType.TABLE,\n+    generator = \"SEQ_RoleAttribute\")\n+    @TableGenerator(name = \"SEQ_RoleAttribute\", allocationSize = 20)\n+    private Long id;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     private SyncopeRole owner;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     private RoleSchema schema;\n+\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n     private List<RoleAttributeValue> values;\n@@ -42,6 +54,11 @@ public RoleAttribute() {\n         values = new ArrayList<RoleAttributeValue>();\n     }\n \n+    @Override\n+    public Long getId() {\n+        return id;\n+    }\n+\n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n         return (T) owner;"},{"sha":"cd09ed8195c44429bda54d8e79fcd336aa7c9dee","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"sha":"e3aa4cf95c952549603ee36d8acc0a8956bec318","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -42,7 +42,6 @@\n import org.bouncycastle.jce.provider.BouncyCastleProvider;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n-import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.security.AsymmetricCipher;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttribute;"},{"sha":"2341246759c0576a69b9c610cfddb85c7c1faf89","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserAttribute.java","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -19,8 +19,12 @@\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import javax.persistence.TableGenerator;\n import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n@@ -30,6 +34,12 @@\n @Entity\n public class UserAttribute extends AbstractAttribute {\n \n+    @Id\n+    @GeneratedValue(strategy = GenerationType.TABLE,\n+    generator = \"SEQ_UserAttribute\")\n+    @TableGenerator(name = \"SEQ_UserAttribute\", allocationSize = 200)\n+    private Long id;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     private SyncopeUser owner;\n \n@@ -44,6 +54,11 @@ public UserAttribute() {\n         values = new ArrayList<UserAttributeValue>();\n     }\n \n+    @Override\n+    public Long getId() {\n+        return id;\n+    }\n+\n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n         return (T) owner;"},{"sha":"8ce89d903b8945a7faf3dfe5b6ec69d61740ebd7","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeDAOImpl.java","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -27,26 +27,30 @@ public class AttributeDAOImpl extends AbstractDAOImpl\n \n     @Override\n     @Transactional(readOnly = true)\n-    public <T extends AbstractAttribute> T find(Long id, Class<T> reference) {\n+    public <T extends AbstractAttribute> T find(final Long id,\n+            final Class<T> reference) {\n+\n         return entityManager.find(reference, id);\n     }\n \n     @Override\n     @Transactional(readOnly = true)\n-    public <T extends AbstractAttribute> List<T> findAll(Class<T> reference) {\n+    public <T extends AbstractAttribute> List<T> findAll(\n+            final Class<T> reference) {\n+\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n         return query.getResultList();\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> T save(T attribute) {\n+    public <T extends AbstractAttribute> T save(final T attribute) {\n         return entityManager.merge(attribute);\n     }\n \n     @Override\n     public <T extends AbstractAttribute> void delete(\n-            Long id, Class<T> reference) {\n+            final Long id, final Class<T> reference) {\n \n         T attribute = find(id, reference);\n         if (attribute == null) {\n@@ -57,7 +61,7 @@ public <T extends AbstractAttribute> void delete(\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> void delete(T attribute) {\n+    public <T extends AbstractAttribute> void delete(final T attribute) {\n         if (attribute.getOwner() != null) {\n             attribute.getOwner().removeAttribute(attribute);\n         }"},{"sha":"495bdc6422b808551db323d1b81344e588149fd6","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeValueDAOImpl.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -30,7 +30,7 @@ public class AttributeValueDAOImpl extends AbstractDAOImpl\n     @Override\n     @Transactional(readOnly = true)\n     public <T extends AbstractAttributeValue> T find(\n-            Long id, Class<T> reference) {\n+            final Long id, final Class<T> reference) {\n \n         return entityManager.find(reference, id);\n     }\n@@ -73,21 +73,21 @@ public <T extends AbstractAttributeValue> boolean nonUniqueAttributeValue(\n     @Override\n     @Transactional(readOnly = true)\n     public <T extends AbstractAttributeValue> List<T> findAll(\n-            Class<T> reference) {\n+            final Class<T> reference) {\n \n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n         return query.getResultList();\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> T save(T attributeValue) {\n+    public <T extends AbstractAttributeValue> T save(final T attributeValue) {\n         return entityManager.merge(attributeValue);\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> void delete(Long id,\n-            Class<T> reference) {\n+    public <T extends AbstractAttributeValue> void delete(final Long id,\n+            final Class<T> reference) {\n \n         T attributeValue = find(id, reference);\n         if (attributeValue == null) {\n@@ -98,7 +98,9 @@ public <T extends AbstractAttributeValue> void delete(Long id,\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> void delete(T attributeValue) {\n+    public <T extends AbstractAttributeValue> void delete(\n+            final T attributeValue) {\n+\n         if (attributeValue.getAttribute() != null) {\n             attributeValue.getAttribute().removeValue(attributeValue);\n         }"},{"sha":"2df382c7795f34a6016a584be7d37a4f1ff95a42","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/MembershipDAOImpl.java","status":"modified","additions":18,"deletions":6,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -17,26 +17,35 @@\n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.MembershipDAO;\n+import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n \n @Repository\n public class MembershipDAOImpl extends AbstractDAOImpl\n         implements MembershipDAO {\n \n+    @Autowired\n+    private SyncopeUserDAO syncopeUserDAO;\n+\n+    @Autowired\n+    private SyncopeRoleDAO syncopeRoleDAO;\n+\n     @Override\n     @Transactional(readOnly = true)\n-    public Membership find(Long id) {\n+    public Membership find(final Long id) {\n         return entityManager.find(Membership.class, id);\n     }\n \n     @Override\n     @Transactional(readOnly = true)\n-    public Membership find(SyncopeUser user, SyncopeRole role) {\n+    public Membership find(final SyncopeUser user, final SyncopeRole role) {\n         Query query = entityManager.createQuery(\"SELECT e FROM Membership e \"\n                 + \"WHERE e.syncopeUser = :user AND e.syncopeRole = :role\");\n         query.setParameter(\"user\", user);\n@@ -64,20 +73,23 @@ public List<Membership> findAll() {\n     }\n \n     @Override\n-    public Membership save(Membership membership) {\n+    public Membership save(final Membership membership) {\n         return entityManager.merge(membership);\n     }\n \n     @Override\n-    public void delete(Long id) {\n+    public void delete(final Long id) {\n         Membership membership = find(id);\n         if (membership == null) {\n             return;\n         }\n \n         membership.getSyncopeUser().removeMembership(membership);\n+        syncopeUserDAO.save(membership.getSyncopeUser());\n         membership.setSyncopeUser(null);\n+\n         membership.getSyncopeRole().removeMembership(membership);\n+        syncopeRoleDAO.save(membership.getSyncopeRole());\n         membership.setSyncopeRole(null);\n \n         entityManager.remove(membership);"},{"sha":"6d4161aea0e3dfa06915067ad1ffb649551b464d","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -33,6 +33,7 @@\n import org.syncope.core.persistence.beans.user.UserAttributeValue;\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.persistence.validation.ValidationException;\n \n@@ -43,6 +44,9 @@ public class SyncopeUserDAOImpl extends AbstractDAOImpl\n     @Autowired\n     private SchemaDAO schemaDAO;\n \n+    @Autowired\n+    private SyncopeRoleDAO syncopeRoleDAO;\n+\n     @Override\n     @Transactional(readOnly = true)\n     public final SyncopeUser find(final Long id) {\n@@ -102,7 +106,7 @@ public final List<SyncopeUser> findAll() {\n     }\n \n     @Override\n-    public SyncopeUser save(SyncopeUser syncopeUser) {\n+    public SyncopeUser save(final SyncopeUser syncopeUser) {\n         return entityManager.merge(syncopeUser);\n     }\n \n@@ -113,14 +117,19 @@ public void delete(Long id) {\n             return;\n         }\n \n+        // Not calling membershipDAO.delete() here because it would try\n+        // to save this user as well, thus going into\n+        // ConcurrentModificationException\n         for (Membership membership : user.getMemberships()) {\n             membership.setSyncopeUser(null);\n+\n             membership.getSyncopeRole().removeMembership(membership);\n+            syncopeRoleDAO.save(membership.getSyncopeRole());\n             membership.setSyncopeRole(null);\n \n             entityManager.remove(membership);\n         }\n-        user.setMemberships(Collections.EMPTY_LIST);\n+        user.getMemberships().clear();\n \n         entityManager.remove(user);\n     }\n@@ -132,8 +141,6 @@ public final List<SyncopeUser> search(final NodeCond searchCondition) {\n             LOG.debug(\"Search condition:\\n\" + searchCondition);\n         }\n \n-        Session hibernateSess = ((Session) entityManager.getDelegate());\n-\n         List<SyncopeUser> result = Collections.EMPTY_LIST;\n         try {\n             result = doSearch(searchCondition);"},{"sha":"ca89fe6dd10901f5b585c77eee23b9dff5279d56","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -39,6 +39,7 @@ public class RoleController extends AbstractController {\n \n     @Autowired\n     private SyncopeRoleDAO syncopeRoleDAO;\n+\n     @Autowired\n     private RoleDataBinder roleDataBinder;\n "},{"sha":"1aad015897d20725e4e2080084bf78c9227a067a","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":20,"deletions":29,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -320,9 +320,8 @@ public UserTO create(HttpServletResponse response,\n                     + syncRoles + \"\\n\" + syncResources);\n         }\n \n-        // By default, ignore id in UserTO:\n-        // set it explicitely in case of overwrite\n-        userTO.setId(0);\n+        // The user to be created\n+        SyncopeUser user = null;\n \n         WorkflowInitException wie = null;\n         Long workflowId = null;\n@@ -348,16 +347,19 @@ public UserTO create(HttpServletResponse response,\n                 case OVERWRITE:\n                     final Integer resetActionId = findWorkflowAction(\n                             wie.getWorkflowId(), Constants.ACTION_RESET);\n-                    if (resetActionId != null) {\n-                        syncopeUserDAO.save(\n-                                doExecuteAction(\n+                    if (resetActionId == null) {\n+                        user = syncopeUserDAO.find(wie.getSyncopeUserId());\n+                        if (user == null) {\n+                            throw new NotFoundException(\"User \"\n+                                    + wie.getSyncopeUserId());\n+                        }\n+                    } else {\n+                        user = doExecuteAction(\n                                 Constants.ACTION_RESET,\n                                 wie.getSyncopeUserId(),\n                                 Collections.singletonMap(Constants.USER_TO,\n-                                (Object) userTO)));\n+                                (Object) userTO));\n                     }\n-\n-                    userTO.setId(wie.getSyncopeUserId());\n                     break;\n \n                 case REJECT:\n@@ -375,20 +377,12 @@ public UserTO create(HttpServletResponse response,\n             }\n         }\n \n-        // Check if UserTO has a valued id: if so,\n-        // try to read the user from the db\n-        SyncopeUser user = null;\n-        if (userTO.getId() == 0) {\n+        // No overwrite: let's create a fresh new user\n+        if (user == null) {\n             user = new SyncopeUser();\n-        } else {\n-            user = syncopeUserDAO.find(userTO.getId());\n-            if (user == null) {\n-                throw new NotFoundException(\"User \" + userTO.getId());\n-            }\n         }\n \n-        ResourceOperations resourceOperations =\n-                userDataBinder.create(user, userTO);\n+        userDataBinder.create(user, userTO);\n \n         user.setWorkflowId(workflowId);\n         user = syncopeUserDAO.save(user);\n@@ -400,24 +394,21 @@ public UserTO create(HttpServletResponse response,\n         Set<String> syncResourceNames =\n                 getSyncResourceNames(user, syncRoles, syncResources);\n \n-        if (LOG.isDebugEnabled() && !syncResourceNames.isEmpty()) {\n-            LOG.debug(\"About to propagate synchronously onto resources \"\n-                    + syncResourceNames);\n-        }\n-\n-        if (resourceOperations.isEmpty()) {\n-            propagationManager.create(user, syncResourceNames);\n-        } else {\n-            propagationManager.update(user, resourceOperations,\n+        if (!syncResourceNames.isEmpty()) {\n+            LOG.debug(\"About to propagate synchronously onto resources {}\",\n                     syncResourceNames);\n         }\n \n+        propagationManager.create(user, syncResourceNames);\n+\n         // User is created locally and propagated, let's advance on the workflow\n         Map<String, Object> inputs = new HashMap<String, Object>();\n         inputs.put(Constants.SYNCOPE_USER, user);\n \n         int[] availableWorkflowActions =\n                 userWorkflow.getAvailableActions(workflowId, null);\n+        LOG.debug(\"Available workflow actions for user {}: {}\",\n+                user, availableWorkflowActions);\n \n         for (int availableWorkflowAction : availableWorkflowActions) {\n             userWorkflow.doAction("},{"sha":"299409a9274eec70770c92fb2f9988b0095fe00d","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":19,"deletions":13,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -71,24 +71,34 @@ public abstract class AbstractAttributableDataBinder {\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(\n             AbstractAttributableDataBinder.class);\n+\n     @Autowired\n     protected SyncopeRoleDAO syncopeRoleDAO;\n+\n     @Autowired\n     protected SchemaDAO schemaDAO;\n+\n     @Autowired\n     protected DerivedSchemaDAO derivedSchemaDAO;\n+\n     @Autowired\n     protected AttributeDAO attributeDAO;\n+\n     @Autowired\n     protected DerivedAttributeDAO derivedAttributeDAO;\n+\n     @Autowired\n     protected AttributeValueDAO attributeValueDAO;\n+\n     @Autowired\n     protected SyncopeUserDAO syncopeUserDAO;\n+\n     @Autowired\n     protected ResourceDAO resourceDAO;\n+\n     @Autowired\n     protected MembershipDAO membershipDAO;\n+\n     @Autowired\n     private JexlEngine jexlEngine;\n \n@@ -563,7 +573,7 @@ protected ResourceOperations fill(\n         return resourceOperations;\n     }\n \n-    protected AbstractAttributable fill(AbstractAttributable attributable,\n+    protected void fill(AbstractAttributable attributable,\n             AbstractAttributableTO attributableTO,\n             AttributableUtil attributableUtil,\n             SyncopeClientCompositeErrorException compositeErrorException)\n@@ -584,11 +594,11 @@ protected AbstractAttributable fill(AbstractAttributable attributable,\n                         attributableUtil.getSchemaClass());\n \n                 if (schema != null) {\n-                    attribute =\n-                            attributable.getAttribute(schema.getName()) == null\n-                            ? attributableUtil.newAttribute()\n-                            : attributable.getAttribute(schema.getName());\n-                    attribute.setSchema(schema);\n+                    attribute = attributable.getAttribute(schema.getName());\n+                    if (attribute == null) {\n+                        attribute = attributableUtil.newAttribute();\n+                        attribute.setSchema(schema);\n+                    }\n \n                     fillAttribute(attributeTO.getValues(),\n                             attributableUtil, schema, attribute, invalidValues);\n@@ -649,11 +659,9 @@ protected AbstractAttributable fill(AbstractAttributable attributable,\n         if (compositeErrorException.hasExceptions()) {\n             throw compositeErrorException;\n         }\n-\n-        return attributable;\n     }\n \n-    protected AbstractAttributableTO fillTO(\n+    protected void fillTO(\n             AbstractAttributableTO abstractAttributableTO,\n             Collection<? extends AbstractAttribute> attributes,\n             Collection<? extends AbstractDerivedAttribute> derivedAttributes,\n@@ -683,8 +691,6 @@ protected AbstractAttributableTO fillTO(\n         for (TargetResource resource : resources) {\n             abstractAttributableTO.addResource(resource.getName());\n         }\n-\n-        return abstractAttributableTO;\n     }\n \n     public void checkUniqueness(AbstractAttributable attributable)"},{"sha":"d473e74867b9b0b42ccfe5d9bf4675bf23cd4275","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -28,7 +28,7 @@\n @Component\n public class RoleDataBinder extends AbstractAttributableDataBinder {\n \n-    public SyncopeRole create(RoleTO roleTO)\n+    public SyncopeRole create(final RoleTO roleTO)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeRole role = new SyncopeRole();\n@@ -73,8 +73,7 @@ public SyncopeRole create(RoleTO roleTO)\n         }\n \n         // attributes, derived attributes and resources\n-        role = (SyncopeRole) fill(role, roleTO,\n-                AttributableUtil.ROLE, scce);\n+        fill(role, roleTO, AttributableUtil.ROLE, scce);\n \n         return role;\n     }\n@@ -130,11 +129,11 @@ public RoleTO getRoleTO(SyncopeRole role) {\n             roleTO.setParent(role.getParent().getId());\n         }\n \n-        roleTO = (RoleTO) fillTO(roleTO, role.getAttributes(),\n+        fillTO(roleTO, role.getAttributes(),\n                 role.getDerivedAttributes(), role.getTargetResources());\n \n         if (role.isInheritAttributes() || role.isInheritDerivedAttributes()) {\n-            roleTO = (RoleTO) fillTO(roleTO,\n+            fillTO(roleTO,\n                     role.isInheritAttributes()\n                     ? syncopeRoleDAO.findInheritedAttributes(role)\n                     : Collections.EMPTY_SET,"},{"sha":"fae62b4ff5ed1c3757624e5a3e336bfd1c83f8cd","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":8,"deletions":33,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -44,20 +44,13 @@\n @Component\n public class UserDataBinder extends AbstractAttributableDataBinder {\n \n-    public ResourceOperations create(SyncopeUser user, UserTO userTO)\n+    public void create(final SyncopeUser user, final UserTO userTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n \n         SyncopeClientCompositeErrorException scce =\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n \n-        // In case of overwrite, take into account memberships formerly\n-        // assigned to this user\n-        Set<Long> formerMembershipIds = new HashSet<Long>();\n-        for (Membership membership : user.getMemberships()) {\n-            formerMembershipIds.add(membership.getId());\n-        }\n-\n         // password\n         // TODO: check password policies\n         SyncopeClientException invalidPassword = new SyncopeClientException(\n@@ -97,31 +90,15 @@ public ResourceOperations create(SyncopeUser user, UserTO userTO)\n                     membership.setSyncopeUser(user);\n \n                     user.addMembership(membership);\n-                } else {\n-                    formerMembershipIds.remove(membership.getId());\n                 }\n \n-                membership = (Membership) fill(membership, membershipTO,\n-                        AttributableUtil.MEMBERSHIP, scce);\n+                fill(membership, membershipTO, AttributableUtil.MEMBERSHIP,\n+                        scce);\n             }\n         }\n \n         // attributes, derived attributes and resources\n-        user = (SyncopeUser) fill(\n-                user, userTO, AttributableUtil.USER, scce);\n-\n-        // remove from the DB any former membership that has not been\n-        // renewed in this overwrite\n-        ResourceOperations resourceOperations = new ResourceOperations();\n-        if (!formerMembershipIds.isEmpty()) {\n-            UserMod userMod = new UserMod();\n-            for (Long membershipId : formerMembershipIds) {\n-                userMod.addMembershipToBeRemoved(membershipId);\n-            }\n-            resourceOperations = update(user, userMod);\n-        }\n-\n-        return resourceOperations;\n+        fill(user, userTO, AttributableUtil.USER, scce);\n     }\n \n     public ResourceOperations update(SyncopeUser user, UserMod userMod)\n@@ -253,33 +230,31 @@ public UserTO getUserTO(SyncopeUser user, Workflow userWorkflow) {\n         userTO.setTokenExpireTime(user.getTokenExpireTime());\n         userTO.setPassword(user.getPassword());\n \n-        String status = null;\n         try {\n             List<Step> currentSteps = userWorkflow.getCurrentSteps(\n                     user.getWorkflowId());\n \n             if (currentSteps != null && !currentSteps.isEmpty()) {\n-                status = currentSteps.iterator().next().getStatus();\n+                userTO.setStatus(currentSteps.iterator().next().getStatus());\n             } else {\n                 LOG.error(\"Could not find status information for \" + user);\n             }\n         } catch (EntityNotFoundException e) {\n             LOG.error(\"Could not find workflow entry with id \"\n                     + user.getWorkflowId());\n         }\n-        userTO.setStatus(status);\n \n-        userTO = (UserTO) fillTO(userTO, user.getAttributes(),\n+        fillTO(userTO, user.getAttributes(),\n                 user.getDerivedAttributes(), user.getTargetResources());\n \n-        MembershipTO membershipTO = null;\n+        MembershipTO membershipTO;\n         for (Membership membership : user.getMemberships()) {\n             membershipTO = new MembershipTO();\n             membershipTO.setId(membership.getId());\n             membershipTO.setRoleId(membership.getSyncopeRole().getId());\n             membershipTO.setRoleName(membership.getSyncopeRole().getName());\n \n-            membershipTO = (MembershipTO) fillTO(membershipTO,\n+            fillTO(membershipTO,\n                     membership.getAttributes(),\n                     membership.getDerivedAttributes(),\n                     membership.getTargetResources());"},{"sha":"d22dcd790f99d52b5393ee58bd23c203ed2b40e2","filename":"core/src/main/java/org/syncope/core/workflow/EmptyUser.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -17,18 +17,19 @@\n import com.opensymphony.module.propertyset.PropertySet;\n import com.opensymphony.workflow.FunctionProvider;\n import com.opensymphony.workflow.WorkflowException;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Set;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.beans.membership.Membership;\n-import org.syncope.core.persistence.beans.membership.MembershipAttribute;\n-import org.syncope.core.persistence.beans.membership.MembershipDerivedAttribute;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UserAttribute;\n import org.syncope.core.persistence.beans.user.UserDerivedAttribute;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n+import org.syncope.core.persistence.dao.MembershipDAO;\n \n public class EmptyUser extends OSWorkflowComponent\n         implements FunctionProvider {\n@@ -41,14 +42,14 @@ public void execute(Map transientVars, Map args, PropertySet ps)\n         SyncopeUser user = (SyncopeUser) transientVars.get(\n                 Constants.SYNCOPE_USER);\n \n-        AttributeDAO attributeDAO =\n+        final AttributeDAO attributeDAO =\n                 (AttributeDAO) context.getBean(\"attributeDAOImpl\");\n         for (AbstractAttribute attribute : user.getAttributes()) {\n             attributeDAO.delete(attribute.getId(), UserAttribute.class);\n         }\n         user.getAttributes().clear();\n \n-        DerivedAttributeDAO derivedAttributeDAO =\n+        final DerivedAttributeDAO derivedAttributeDAO =\n                 (DerivedAttributeDAO) context.getBean(\n                 \"derivedAttributeDAOImpl\");\n         for (AbstractDerivedAttribute derivedAttribute :\n@@ -59,20 +60,15 @@ public void execute(Map transientVars, Map args, PropertySet ps)\n         }\n         user.getDerivedAttributes().clear();\n \n+        final MembershipDAO membershipDAO =\n+                (MembershipDAO) context.getBean(\"membershipDAOImpl\");\n+        final Set<Long> membershipIds =\n+                new HashSet<Long>(user.getMemberships().size());\n         for (Membership membership : user.getMemberships()) {\n-            for (AbstractAttribute attribute : membership.getAttributes()) {\n-                attributeDAO.delete(attribute.getId(),\n-                        MembershipAttribute.class);\n-            }\n-            membership.getAttributes().clear();\n-\n-            for (AbstractDerivedAttribute derivedAttribute :\n-                    membership.getDerivedAttributes()) {\n-\n-                derivedAttributeDAO.delete(derivedAttribute.getId(),\n-                        MembershipDerivedAttribute.class);\n-            }\n-            membership.getDerivedAttributes().clear();\n+            membershipIds.add(membership.getId());\n+        }\n+        for (Long membershipId : membershipIds) {\n+            membershipDAO.delete(membershipId);\n         }\n \n         user.setPassword(null);"},{"sha":"95062e3fa49201935ab8369ed5a7a81150c66e3e","filename":"core/src/main/resources/content.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -20,7 +20,10 @@\n     <hibernate_sequences sequence_name=\"SyncopeUser\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SchemaMapping\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"ConnectorInstance\" sequence_next_hi_value=\"10\"/>\n-\n+    <hibernate_sequences sequence_name=\"UserAttribute\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"RoleAttribute\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"MembershipAttribute\" sequence_next_hi_value=\"1000\"/>\n+    \n     <SyncopeConfiguration confKey=\"token.length\" confValue=\"256\"/>\n     <SyncopeConfiguration confKey=\"token.expireTime\" confValue=\"60\"/>\n     <SyncopeConfiguration confKey=\"smtp.host\" confValue=\"smtp.ngi.it\"/>"},{"sha":"7f057dbce729973a71b521167c1d463053117269","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":21,"deletions":20,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -91,7 +91,7 @@ public final void createWithException() {\n         newUserTO.addAttribute(attributeTO);\n \n         restTemplate.postForObject(BASE_URL + \"user/create\",\n-                                   newUserTO, UserTO.class);\n+                newUserTO, UserTO.class);\n     }\n \n     @Test\n@@ -118,7 +118,6 @@ public final void create() {\n         // add an attribute with null value: must be ignored\n         nullValueAttributeTO = new AttributeTO();\n         nullValueAttributeTO.setSchema(\"activationDate\");\n-        //nullValueAttributeTO.setValues(null);\n         nullValueAttributeTO.addValue(null);\n         userTO.addAttribute(nullValueAttributeTO);\n \n@@ -139,22 +138,24 @@ public final void create() {\n \n         // 2. activate user\n         newUserTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                                               newUserTO, UserTO.class);\n+                newUserTO, UserTO.class);\n         assertEquals(\"active\",\n-                     restTemplate.getForObject(BASE_URL + \"user/status/\"\n+                restTemplate.getForObject(BASE_URL + \"user/status/\"\n                 + newUserTO.getId(), String.class));\n \n         // 3. try (and fail) to create another user with same (unique) values\n         userTO = getSampleTO(\"pippo@c.com\");\n-        AttributeTO userIdTO = new AttributeTO();\n-        userIdTO.setSchema(\"userId\");\n-        userIdTO.addValue(\"a.b@c.com\");\n-        userTO.addAttribute(userIdTO);\n+        for (AttributeTO attr : userTO.getAttributes()) {\n+            if (\"userId\".equals(attr.getSchema())) {\n+                attr.getValues().clear();\n+                attr.addValue(\"a.b@c.com\");\n+            }\n+        }\n \n         SyncopeClientException syncopeClientException = null;\n         try {\n             restTemplate.postForObject(BASE_URL + \"user/create\",\n-                                       userTO, UserTO.class);\n+                    userTO, UserTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             syncopeClientException =\n                     e.getException(SyncopeClientExceptionType.InvalidUniques);\n@@ -224,14 +225,14 @@ public final void delete() {\n         UserTO userTO = getSampleTO(\"qqgf.z@nn.com\");\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                                            userTO, UserTO.class);\n+                userTO, UserTO.class);\n         userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                                            userTO, UserTO.class);\n+                userTO, UserTO.class);\n \n         restTemplate.delete(BASE_URL + \"user/delete/{userId}\", userTO.getId());\n         try {\n             restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\",\n-                                      UserTO.class, userTO.getId());\n+                    UserTO.class, userTO.getId());\n         } catch (HttpStatusCodeException e) {\n             assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n         }\n@@ -243,7 +244,7 @@ public final void list() {\n                 restTemplate.getForObject(\n                 BASE_URL + \"user/list.json\", UserTO[].class));\n         assertNotNull(users);\n-        assertEquals(4, users.size());\n+        assertFalse(users.isEmpty());\n         for (UserTO user : users) {\n             assertNotNull(user);\n         }\n@@ -264,9 +265,9 @@ public final void token() {\n         UserTO userTO = getSampleTO(\"d.e@f.com\");\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                                            userTO, UserTO.class);\n+                userTO, UserTO.class);\n         userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                                            userTO, UserTO.class);\n+                userTO, UserTO.class);\n         assertNull(userTO.getToken());\n \n         userTO = restTemplate.getForObject(\n@@ -275,7 +276,7 @@ public final void token() {\n         assertNotNull(userTO.getToken());\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/verifyToken\",\n-                                            userTO, UserTO.class);\n+                userTO, UserTO.class);\n         assertNull(userTO.getToken());\n     }\n \n@@ -321,9 +322,9 @@ public final void update() {\n         userTO.addMembership(membershipTO);\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                                            userTO, UserTO.class);\n+                userTO, UserTO.class);\n         userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                                            userTO, UserTO.class);\n+                userTO, UserTO.class);\n \n         assertTrue(userTO.getDerivedAttributes().isEmpty());\n         assertEquals(1, userTO.getMemberships().size());\n@@ -351,7 +352,7 @@ public final void update() {\n                 userTO.getMemberships().iterator().next().getId());\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n-                                            userMod, UserTO.class);\n+                userMod, UserTO.class);\n \n         assertEquals(\"newPassword\", userTO.getPassword());\n         assertEquals(1, userTO.getMemberships().size());\n@@ -364,7 +365,7 @@ public final void update() {\n                 attributeFound = true;\n \n                 assertEquals(Collections.singletonList(\"t.w@spre.net\"),\n-                             attributeTO.getValues());\n+                        attributeTO.getValues());\n             }\n         }\n         assertTrue(attributeFound);"},{"sha":"e433908cfff2bfea767057ac08da6c8f25d826bb","filename":"core/src/test/resources/content.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -20,7 +20,10 @@\n     <hibernate_sequences sequence_name=\"SyncopeUser\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SchemaMapping\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"ConnectorInstance\" sequence_next_hi_value=\"10\"/>\n-\n+    <hibernate_sequences sequence_name=\"UserAttribute\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"RoleAttribute\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"MembershipAttribute\" sequence_next_hi_value=\"1000\"/>\n+    \n     <SyncopeConfiguration confKey=\"token.length\" confValue=\"256\"/>\n     <SyncopeConfiguration confKey=\"token.expireTime\" confValue=\"60\"/>\n     <SyncopeConfiguration confKey=\"smtp.host\" confValue=\"smtp.ngi.it\"/>"},{"sha":"64f1de2baf0e81c9ac4ab1a075623f9bdd8eec79","filename":"core/src/test/resources/ehcache.xml","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Ftest%2Fresources%2Fehcache.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04805239e551bb6ee621ea933160f5e99a34c17d/core%2Fsrc%2Ftest%2Fresources%2Fehcache.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fehcache.xml?ref=04805239e551bb6ee621ea933160f5e99a34c17d","patch":"@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ehcache xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:noNamespaceSchemaLocation=\"http://ehcache.org/ehcache.xsd\">\n+  \n+    <diskStore path=\"java.io.tmpdir/syncope-cache\"/>\n+\n+    <defaultCache\n+            maxElementsInMemory=\"10000\"\n+            eternal=\"false\"\n+            timeToIdleSeconds=\"120\"\n+            timeToLiveSeconds=\"120\"\n+            overflowToDisk=\"true\"\n+            maxElementsOnDisk=\"10000000\"\n+            diskPersistent=\"false\"\n+            diskExpiryThreadIntervalSeconds=\"120\"\n+            memoryStoreEvictionPolicy=\"LRU\"\n+            />\n+</ehcache>"}]}