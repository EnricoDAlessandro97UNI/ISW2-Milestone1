{"sha":"1c62c889ea3c7784650cc40c528f660b72a2d9dd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFjNjJjODg5ZWEzYzc3ODQ2NTBjYzQwYzUyOGY2NjBiNzJhMmQ5ZGQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-01T10:52:19Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-01T10:52:19Z"},"message":"Base data structure in place\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1245970 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a2f4abeb5e961c156895bddc694e09840ae25031","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a2f4abeb5e961c156895bddc694e09840ae25031"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1c62c889ea3c7784650cc40c528f660b72a2d9dd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1c62c889ea3c7784650cc40c528f660b72a2d9dd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1c62c889ea3c7784650cc40c528f660b72a2d9dd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1c62c889ea3c7784650cc40c528f660b72a2d9dd/comments","author":null,"committer":null,"parents":[{"sha":"f8a1775d8cd84729ea7feb264730411e518f80fd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f8a1775d8cd84729ea7feb264730411e518f80fd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f8a1775d8cd84729ea7feb264730411e518f80fd"}],"stats":{"total":1169,"additions":976,"deletions":193},"files":[{"sha":"e9528880d99cf214483fb48f4e1da7d4b9642fc0","filename":"core/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -37,6 +37,11 @@\n \n     <dependencies>\n \n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-jexl</artifactId>\n+        </dependency>\n+\n         <dependency>\n             <groupId>com.forgerock.openam</groupId>\n             <artifactId>clientsdk</artifactId>"},{"sha":"2965a0de3376e795582a3ec8acda072b47cc3079","filename":"core/src/main/java/org/syncope/core/AttributeType.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2FAttributeType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2FAttributeType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2FAttributeType.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.enums;\n+package org.syncope.core;\n \n import java.text.DecimalFormat;\n import java.text.Format;","previous_filename":"core/src/main/java/org/syncope/core/enums/AttributeType.java"},{"sha":"b7c9d038d44c1499e606148f5566faf78e113478","filename":"core/src/main/java/org/syncope/core/beans/SyncopeUser.java","status":"modified","additions":41,"deletions":16,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FSyncopeUser.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -16,6 +16,8 @@\n \n import java.io.Serializable;\n import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n import java.util.Set;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n@@ -33,24 +35,54 @@ public class SyncopeUser implements Serializable {\n     private Long id;\n     @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER)\n-    private Set<UserAttributeValues> userAttributeValues;\n+    private Set<UserAttribute> attributes;\n+    @OneToMany(cascade = CascadeType.ALL,\n+    fetch = FetchType.EAGER, mappedBy = \"owner\")\n+    private Set<UserDerivedAttribute> derivedAttributes;\n \n     public SyncopeUser() {\n-        userAttributeValues = new HashSet<UserAttributeValues>();\n+        attributes = new HashSet<UserAttribute>();\n+        derivedAttributes = new HashSet<UserDerivedAttribute>();\n     }\n \n     public Long getId() {\n         return id;\n     }\n \n-    public Set<UserAttributeValues> getUserAttributeValues() {\n-        return userAttributeValues;\n+    public UserAttribute getAttribute(String name)\n+            throws NoSuchElementException {\n+\n+        UserAttribute result = null;\n+        UserAttribute userAttribute = null;\n+        for (Iterator<UserAttribute> itor = attributes.iterator();\n+                result == null && itor.hasNext();) {\n+\n+            userAttribute = itor.next();\n+\n+            if (name.equals(userAttribute.getSchema().getName())) {\n+                result = userAttribute;\n+            }\n+        }\n+\n+        return result;\n     }\n \n-    public void setUserAttributeValues(\n-            Set<UserAttributeValues> userAttributeValues) {\n+    public Set<UserAttribute> getAttributes() {\n+        return attributes;\n+    }\n \n-        this.userAttributeValues = userAttributeValues;\n+    public void setAttributes(Set<UserAttribute> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    public Set<UserDerivedAttribute> getDerivedAttributes() {\n+        return derivedAttributes;\n+    }\n+\n+    public void setDerivedAttributes(\n+            Set<UserDerivedAttribute> derivedAttributes) {\n+\n+        this.derivedAttributes = derivedAttributes;\n     }\n \n     @Override\n@@ -68,12 +100,6 @@ public boolean equals(Object obj) {\n \n             return false;\n         }\n-        if (this.userAttributeValues != other.userAttributeValues\n-                && (this.userAttributeValues == null\n-                || !this.userAttributeValues.equals(other.userAttributeValues))) {\n-\n-            return false;\n-        }\n \n         return true;\n     }\n@@ -82,8 +108,6 @@ public boolean equals(Object obj) {\n     public int hashCode() {\n         int hash = 7;\n         hash = 71 * hash + (this.id != null ? this.id.hashCode() : 0);\n-        hash = 71 * hash + (this.userAttributeValues != null\n-                ? this.userAttributeValues.hashCode() : 0);\n \n         return hash;\n     }\n@@ -92,7 +116,8 @@ public int hashCode() {\n     public String toString() {\n         return \"(\"\n                 + \"id=\" + id + \",\"\n-                + \"userAttributeValues=\" + userAttributeValues\n+                + \"attributes=\" + attributes\n+                + \"derivedAttributes=\" + derivedAttributes\n                 + \")\";\n     }\n }"},{"sha":"9901515e07ceb0c33fea45f253e2ff0cf9906b8e","filename":"core/src/main/java/org/syncope/core/beans/UserAttribute.java","status":"renamed","additions":56,"deletions":65,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttribute.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -34,85 +34,84 @@\n import org.slf4j.LoggerFactory;\n \n @Entity\n-public class UserAttributeValues implements Serializable {\n+public class UserAttribute implements Serializable {\n \n     private static final Logger log = LoggerFactory.getLogger(\n-            UserAttributeValues.class);\n+            UserAttribute.class);\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n-    @ManyToOne(cascade = CascadeType.REMOVE,\n-    fetch = FetchType.EAGER)\n-    private UserAttributeSchema userAttributeSchema;\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private UserAttributeSchema schema;\n     @Transient\n     private Class userAttributeClass;\n     @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER)\n-    private Set<UserAttributeValue> attributeValues;\n+    private Set<UserAttributeValue> values;\n \n-    protected UserAttributeValues() {\n-        attributeValues = new HashSet<UserAttributeValue>();\n+    protected UserAttribute() {\n+        values = new HashSet<UserAttributeValue>();\n     }\n \n-    public UserAttributeValues(UserAttributeSchema userAttributeSchema)\n+    public UserAttribute(UserAttributeSchema schema)\n             throws ClassNotFoundException {\n \n         this();\n-        this.setUserAttributeSchema(userAttributeSchema);\n+        this.setSchema(schema);\n     }\n \n     public Long getId() {\n         return id;\n     }\n \n-    public UserAttributeSchema getUserAttributeSchema() {\n-        return userAttributeSchema;\n+    public UserAttributeSchema getSchema() {\n+        return schema;\n     }\n \n-    public void setUserAttributeSchema(UserAttributeSchema userAttributeSchema)\n+    public void setSchema(UserAttributeSchema schema)\n             throws ClassNotFoundException {\n \n-        this.userAttributeSchema = userAttributeSchema;\n+        this.schema = schema;\n \n-        if (userAttributeSchema == null) {\n+        if (schema == null) {\n             throw new NullPointerException(\n                     \"Cannot set a NULL UserAttributeSchema!\");\n         }\n \n-        this.userAttributeSchema = userAttributeSchema;\n+        this.schema = schema;\n         this.userAttributeClass = Class.forName(\n-                userAttributeSchema.getType().getClassName());\n+                schema.getType().getClassName());\n     }\n \n-    public Set<? extends UserAttributeValue> getAttributeValues() {\n-        return attributeValues;\n+    public Set<UserAttributeValue> getValues() {\n+        return values;\n     }\n \n-    public void setAttributeValues(Set<UserAttributeValue> attributeValues) {\n-        this.attributeValues = attributeValues;\n+    public void setValues(Set<UserAttributeValue> values) {\n+        this.values = values;\n     }\n \n-    public boolean addAttributeValue(String value) {\n+    public boolean addValue(String value) {\n         UserAttributeValue actualValue = null;\n         try {\n-            actualValue = getUserattributeValue(value);\n+            actualValue = getValue(value);\n         } catch (ParseException e) {\n             log.error(\"While parsing '\" + value + \"' as \"\n                     + userAttributeClass.getClass().getName(), e);\n         }\n \n         boolean result = false;\n         if (actualValue != null) {\n-            if (!userAttributeSchema.isMultivalue()) {\n-                attributeValues.clear();\n+            if (!schema.isMultivalue()) {\n+                values.clear();\n             }\n-            result = attributeValues.add(actualValue);\n+            result = values.add(actualValue);\n         }\n \n         return result;\n     }\n \n-    public boolean addAttributeValue(Object value)\n+    public boolean addValue(Object value)\n             throws ClassCastException {\n \n         if (!userAttributeClass.isInstance(value)) {\n@@ -122,36 +121,36 @@ public boolean addAttributeValue(Object value)\n             throw getClassCastException(value);\n         }\n \n-        if (!userAttributeSchema.isMultivalue()) {\n-            attributeValues.clear();\n+        if (!schema.isMultivalue()) {\n+            values.clear();\n         }\n \n-        return attributeValues.add(getUserattributeValue(value));\n+        return values.add(getValue(value));\n     }\n \n-    public boolean removeAttributeValue(String value) {\n+    public boolean removeValue(String value) {\n         UserAttributeValue actualValue = null;\n         try {\n-            actualValue = getUserattributeValue(value);\n+            actualValue = getValue(value);\n         } catch (ParseException e) {\n             log.error(\"While parsing '\" + value + \"' as \"\n                     + userAttributeClass.getClass().getName(), e);\n         }\n \n         boolean result = false;\n         if (actualValue != null) {\n-            result = attributeValues.remove(actualValue);\n-            if (!attributeValues.isEmpty()\n-                    && !userAttributeSchema.isMultivalue()) {\n+            result = values.remove(actualValue);\n+            if (!values.isEmpty()\n+                    && !schema.isMultivalue()) {\n \n-                attributeValues.clear();\n+                values.clear();\n             }\n         }\n \n         return result;\n     }\n \n-    public boolean removeAttributeValue(Object value)\n+    public boolean removeValue(Object value)\n             throws ClassCastException {\n \n         if (!userAttributeClass.isInstance(value)) {\n@@ -161,22 +160,22 @@ public boolean removeAttributeValue(Object value)\n             throw getClassCastException(value);\n         }\n \n-        boolean result = attributeValues.remove(getUserattributeValue(value));\n-        if (!attributeValues.isEmpty()\n-                && !userAttributeSchema.isMultivalue()) {\n+        boolean result = values.remove(getValue(value));\n+        if (!values.isEmpty()\n+                && !schema.isMultivalue()) {\n \n-            attributeValues.clear();\n+            values.clear();\n         }\n \n         return result;\n     }\n \n-    private UserAttributeValue getUserattributeValue(String value)\n+    private UserAttributeValue getValue(String value)\n             throws ParseException {\n \n         UserAttributeValue result = null;\n \n-        switch (userAttributeSchema.getType()) {\n+        switch (schema.getType()) {\n \n             case String:\n                 result = new UserAttributeValueAsString(value);\n@@ -189,31 +188,31 @@ private UserAttributeValue getUserattributeValue(String value)\n \n             case Long:\n                 result = new UserAttributeValueAsLong(\n-                        Long.valueOf(userAttributeSchema.getFormatter(\n+                        Long.valueOf(schema.getFormatter(\n                         DecimalFormat.class).parse(value).longValue()));\n                 break;\n \n             case Double:\n                 result = new UserAttributeValueAsDouble(\n-                        Double.valueOf(userAttributeSchema.getFormatter(\n+                        Double.valueOf(schema.getFormatter(\n                         DecimalFormat.class).parse(value).doubleValue()));\n                 break;\n \n             case Date:\n                 result = new UserAttributeValueAsDate(\n-                        new Date(userAttributeSchema.getFormatter(\n+                        new Date(schema.getFormatter(\n                         SimpleDateFormat.class).parse(value).getTime()));\n                 break;\n         }\n \n         return result;\n     }\n \n-    private UserAttributeValue getUserattributeValue(Object value) {\n+    private UserAttributeValue getValue(Object value) {\n \n         UserAttributeValue result = null;\n \n-        switch (userAttributeSchema.getType()) {\n+        switch (schema.getType()) {\n \n             case String:\n                 result = new UserAttributeValueAsString((String) value);\n@@ -254,35 +253,27 @@ public boolean equals(Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final UserAttributeValues other = (UserAttributeValues) obj;\n+        final UserAttribute other = (UserAttribute) obj;\n         if (this.id != other.id\n                 && (this.id == null || !this.id.equals(other.id))) {\n \n             return false;\n         }\n-        if (this.userAttributeSchema != other.userAttributeSchema\n-                && (this.userAttributeSchema == null\n-                || !this.userAttributeSchema.equals(other.userAttributeSchema))) {\n+        if (this.schema != other.schema\n+                && (this.schema == null\n+                || !this.schema.equals(other.schema))) {\n \n             return false;\n         }\n-        if (this.attributeValues != other.attributeValues\n-                && (this.attributeValues == null\n-                || !this.attributeValues.equals(other.attributeValues))) {\n \n-            return false;\n-        }\n         return true;\n     }\n \n     @Override\n     public int hashCode() {\n-        int hash = 7;\n-        hash = 97 * hash + (this.id != null ? this.id.hashCode() : 0);\n-        hash = 97 * hash + (this.userAttributeSchema != null\n-                ? this.userAttributeSchema.hashCode() : 0);\n-        hash = 97 * hash + (this.attributeValues != null\n-                ? this.attributeValues.hashCode() : 0);\n+        int hash = 5;\n+        hash = 53 * hash + (this.id != null ? this.id.hashCode() : 0);\n+        hash = 53 * hash + (this.schema != null ? this.schema.hashCode() : 0);\n \n         return hash;\n     }\n@@ -291,8 +282,8 @@ public int hashCode() {\n     public String toString() {\n         return \"(\"\n                 + \"id=\" + getId() + \",\"\n-                + \"userAttributeSchema=\" + userAttributeSchema + \",\"\n-                + \"attributeValues=\" + attributeValues\n+                + \"schema=\" + schema + \",\"\n+                + \"values=\" + values\n                 + \")\";\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/beans/UserAttributeValues.java"},{"sha":"609f097436bae23a5a434a45487a907ea0c78581","filename":"core/src/main/java/org/syncope/core/beans/UserAttributeSchema.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeSchema.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -26,7 +26,7 @@\n import javax.persistence.Id;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.syncope.core.enums.AttributeType;\n+import org.syncope.core.AttributeType;\n \n @Entity\n public class UserAttributeSchema implements Serializable {"},{"sha":"2741b52af96b2c73db0273e1e4a23775dfc6645a","filename":"core/src/main/java/org/syncope/core/beans/UserDerivedAttribute.java","status":"added","additions":177,"deletions":0,"changes":177,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserDerivedAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserDerivedAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserDerivedAttribute.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -0,0 +1,177 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.beans;\n+\n+import java.io.Serializable;\n+import java.text.DecimalFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Set;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import org.apache.commons.jexl2.Expression;\n+import org.apache.commons.jexl2.JexlContext;\n+import org.apache.commons.jexl2.JexlEngine;\n+import org.apache.commons.jexl2.MapContext;\n+\n+/**\n+ * @see http://commons.apache.org/jexl/reference/index.html\n+ */\n+@Entity\n+public class UserDerivedAttribute implements Serializable {\n+\n+    private static final JexlEngine jexlEngine = new JexlEngine();\n+\n+    static {\n+        jexlEngine.setCache(512);\n+        jexlEngine.setLenient(false);\n+        jexlEngine.setSilent(false);\n+    }\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    protected Long id;\n+    @ManyToOne\n+    private SyncopeUser owner;\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private UserDerivedAttributeSchema schema;\n+\n+    /**\n+     * @see http://commons.apache.org/jexl/reference/index.html\n+     * @return\n+     */\n+    public String getValue() {\n+        Expression jexlExpression = jexlEngine.createExpression(\n+                schema.getExpression());\n+        JexlContext jexlContext = new MapContext();\n+\n+        Set<UserAttribute> attributes = owner.getAttributes();\n+        Set<UserAttributeValue> attributeValues = null;\n+        String expressionValue = null;\n+        UserAttributeValue userAttributeValue = null;\n+        for (UserAttribute attribute : attributes) {\n+            attributeValues = attribute.getValues();\n+            if (attributeValues.isEmpty()) {\n+                expressionValue = \"\";\n+            } else {\n+                userAttributeValue = attributeValues.iterator().next();\n+                switch (attribute.getSchema().getType()) {\n+                    case Boolean:\n+                        expressionValue =\n+                                ((UserAttributeValueAsBoolean) userAttributeValue).getActualValue().toString();\n+                        break;\n+                    case Date:\n+                        expressionValue = attribute.getSchema().getFormatter(\n+                                SimpleDateFormat.class).format(\n+                                ((UserAttributeValueAsDate) userAttributeValue).getActualValue());\n+                        break;\n+                    case Double:\n+                        expressionValue = attribute.getSchema().getFormatter(\n+                                DecimalFormat.class).format(\n+                                ((UserAttributeValueAsDouble) userAttributeValue).getActualValue());\n+                        break;\n+                    case Long:\n+                        expressionValue = attribute.getSchema().getFormatter(\n+                                DecimalFormat.class).format(\n+                                ((UserAttributeValueAsDouble) userAttributeValue).getActualValue());\n+                        break;\n+                    case String:\n+                        expressionValue =\n+                                ((UserAttributeValueAsString) userAttributeValue).getActualValue();\n+                        break;\n+                }\n+            }\n+\n+            jexlContext.set(attribute.getSchema().getName(), expressionValue);\n+        }\n+\n+        return jexlExpression.evaluate(jexlContext).toString();\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public SyncopeUser getOwner() {\n+        return owner;\n+    }\n+\n+    public void setOwner(SyncopeUser owner) {\n+        this.owner = owner;\n+    }\n+\n+    public UserDerivedAttributeSchema getSchema() {\n+        return schema;\n+    }\n+\n+    public void setSchema(UserDerivedAttributeSchema attributeSchema) {\n+        this.schema = attributeSchema;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final UserDerivedAttribute other = (UserDerivedAttribute) obj;\n+        if (this.id != other.id\n+                && (this.id == null || !this.id.equals(other.id))) {\n+\n+            return false;\n+        }\n+        if (this.owner != other.owner\n+                && (this.owner == null || !this.owner.equals(other.owner))) {\n+\n+            return false;\n+        }\n+        if (this.schema != other.schema\n+                && (this.schema == null\n+                || !this.schema.equals(other.schema))) {\n+\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 7;\n+        hash = 59 * hash + (this.id != null ? this.id.hashCode() : 0);\n+        hash = 59 * hash + (this.owner != null ? this.owner.hashCode() : 0);\n+        hash = 59 * hash + (this.schema != null\n+                ? this.schema.hashCode() : 0);\n+\n+        return hash;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\"\n+                + \"id=\" + getId() + \",\"\n+                + \"owner=\" + getOwner().getId() + \",\"\n+                + \"schema=\" + getSchema()\n+                + \")\";\n+    }\n+}"},{"sha":"b4c7c95a400f469a4ef2a85e0383970bcae8ec64","filename":"core/src/main/java/org/syncope/core/beans/UserDerivedAttributeSchema.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserDerivedAttributeSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserDerivedAttributeSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserDerivedAttributeSchema.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -0,0 +1,87 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.beans;\n+\n+import java.io.Serializable;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class UserDerivedAttributeSchema implements Serializable {\n+\n+    @Id\n+    private String name;\n+    private String expression;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getExpression() {\n+        return expression;\n+    }\n+\n+    public void setExpression(String expression) {\n+        this.expression = expression;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final UserDerivedAttributeSchema other = \n+                (UserDerivedAttributeSchema) obj;\n+        \n+        if ((this.name == null)\n+                ? (other.name != null) : !this.name.equals(other.name)) {\n+\n+            return false;\n+        }\n+        if ((this.expression == null)\n+                ? (other.expression != null)\n+                : !this.expression.equals(other.expression)) {\n+\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 3;\n+        hash = 79 * hash + (this.name != null ? this.name.hashCode() : 0);\n+        hash = 79 * hash + (this.expression != null\n+                ? this.expression.hashCode() : 0);\n+\n+        return hash;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\"\n+                + \"name=\" + getName() + \",\"\n+                + \"expression=\" + getExpression()\n+                + \")\";\n+    }\n+}"},{"sha":"fb293e26698d82e9afad65c88a70cfddfd2c5940","filename":"core/src/main/java/org/syncope/core/dao/UserAttributeDAO.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserAttributeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserAttributeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserAttributeDAO.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -15,15 +15,15 @@\n package org.syncope.core.dao;\n \n import java.util.List;\n-import org.syncope.core.beans.UserAttributeValues;\n+import org.syncope.core.beans.UserAttribute;\n \n-public interface UserAttributeValuesDAO extends DAO {\n+public interface UserAttributeDAO extends DAO {\n \n-    UserAttributeValues find(long id);\n+    UserAttribute find(long id);\n \n-    List<UserAttributeValues> findAll();\n+    List<UserAttribute> findAll();\n \n-    UserAttributeValues save(UserAttributeValues userAttributeValues);\n+    UserAttribute save(UserAttribute attribute);\n \n     void delete(long id);\n }","previous_filename":"core/src/main/java/org/syncope/core/dao/UserAttributeValuesDAO.java"},{"sha":"49fd8bc3ddef573a887bd1948bc71289c3a78b72","filename":"core/src/main/java/org/syncope/core/dao/UserDerivedAttributeDAO.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserDerivedAttributeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserDerivedAttributeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserDerivedAttributeDAO.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -0,0 +1,29 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.dao;\n+\n+import java.util.List;\n+import org.syncope.core.beans.UserDerivedAttribute;\n+\n+public interface UserDerivedAttributeDAO extends DAO {\n+\n+    UserDerivedAttribute find(long id);\n+\n+    List<UserDerivedAttribute> findAll();\n+\n+    UserDerivedAttribute save(UserDerivedAttribute attribute);\n+\n+    void delete(long id);\n+}"},{"sha":"6e4da3c8c0dc5e7cb5c652ba12b1e4aebf2795f4","filename":"core/src/main/java/org/syncope/core/dao/UserDerivedAttributeSchemaDAO.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserDerivedAttributeSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserDerivedAttributeSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserDerivedAttributeSchemaDAO.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -0,0 +1,29 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.dao;\n+\n+import java.util.List;\n+import org.syncope.core.beans.UserDerivedAttributeSchema;\n+\n+public interface UserDerivedAttributeSchemaDAO extends DAO {\n+\n+    UserDerivedAttributeSchema find(String name);\n+\n+    List<UserDerivedAttributeSchema> findAll();\n+\n+    UserDerivedAttributeSchema save(UserDerivedAttributeSchema attributeSchema);\n+\n+    void delete(String name);\n+}"},{"sha":"628a952d53fd5aef88691561e989f067cea62c0d","filename":"core/src/main/java/org/syncope/core/dao/impl/UserAttributeDAOImpl.java","status":"renamed","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeDAOImpl.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -17,28 +17,28 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.beans.UserAttributeValues;\n-import org.syncope.core.dao.UserAttributeValuesDAO;\n+import org.syncope.core.beans.UserAttribute;\n+import org.syncope.core.dao.UserAttributeDAO;\n \n-public class UserAttributeValuesDAOImpl extends AbstractDAOImpl\n-        implements UserAttributeValuesDAO {\n+public class UserAttributeDAOImpl extends AbstractDAOImpl\n+        implements UserAttributeDAO {\n \n     @Override\n-    public UserAttributeValues find(long id) {\n-        return entityManager.find(UserAttributeValues.class, id);\n+    public UserAttribute find(long id) {\n+        return entityManager.find(UserAttribute.class, id);\n     }\n \n     @Override\n-    public List<UserAttributeValues> findAll() {\n+    public List<UserAttribute> findAll() {\n         Query query = entityManager.createQuery(\n-                \"SELECT e FROM UserAttributeValues e\");\n+                \"SELECT e FROM UserAttribute e\");\n         return query.getResultList();\n     }\n \n     @Override\n     @Transactional\n-    public UserAttributeValues save(UserAttributeValues userAttributeValues) {\n-        UserAttributeValues result = entityManager.merge(userAttributeValues);\n+    public UserAttribute save(UserAttribute attribute) {\n+        UserAttribute result = entityManager.merge(attribute);\n         entityManager.flush();\n         return result;\n     }","previous_filename":"core/src/main/java/org/syncope/core/dao/impl/UserAttributeValuesDAOImpl.java"},{"sha":"609ce07f89e6105bf437c2a64b62a44dcc383d76","filename":"core/src/main/java/org/syncope/core/dao/impl/UserDerivedAttributeDAOImpl.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserDerivedAttributeDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserDerivedAttributeDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserDerivedAttributeDAOImpl.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -0,0 +1,51 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.beans.UserDerivedAttribute;\n+import org.syncope.core.dao.UserDerivedAttributeDAO;\n+\n+public class UserDerivedAttributeDAOImpl extends AbstractDAOImpl\n+        implements UserDerivedAttributeDAO {\n+\n+    @Override\n+    public UserDerivedAttribute find(long id) {\n+        return entityManager.find(UserDerivedAttribute.class, id);\n+    }\n+\n+    @Override\n+    public List<UserDerivedAttribute> findAll() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM UserDerivedAttribute e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public UserDerivedAttribute save(UserDerivedAttribute attribute) {\n+        UserDerivedAttribute result = entityManager.merge(attribute);\n+        entityManager.flush();\n+        return result;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void delete(long id) {\n+        entityManager.remove(find(id));\n+    }\n+}"},{"sha":"ed541dcc08dbee7c918c42d5de4054b7736aeb53","filename":"core/src/main/java/org/syncope/core/dao/impl/UserDerivedAttributeSchemaDAOImpl.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserDerivedAttributeSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserDerivedAttributeSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserDerivedAttributeSchemaDAOImpl.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -0,0 +1,53 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.beans.UserDerivedAttributeSchema;\n+import org.syncope.core.dao.UserDerivedAttributeSchemaDAO;\n+\n+public class UserDerivedAttributeSchemaDAOImpl extends AbstractDAOImpl\n+        implements UserDerivedAttributeSchemaDAO {\n+\n+    @Override\n+    public UserDerivedAttributeSchema find(String name) {\n+        return entityManager.find(UserDerivedAttributeSchema.class, name);\n+    }\n+\n+    @Override\n+    public List<UserDerivedAttributeSchema> findAll() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM UserDerivedAttributeSchema e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public UserDerivedAttributeSchema save(\n+            UserDerivedAttributeSchema attributeSchema) {\n+\n+        UserDerivedAttributeSchema result = entityManager.merge(attributeSchema);\n+        entityManager.flush();\n+        return result;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void delete(String name) {\n+        entityManager.remove(find(name));\n+    }\n+}"},{"sha":"5b5d7933a041cf0266e48e920232f916a264816e","filename":"core/src/main/resources/applicationContext.xml","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -40,8 +40,13 @@\n     <bean id=\"userAttributeSchemaDAO\" class=\"org.syncope.core.dao.impl.UserAttributeSchemaDAOImpl\">\n         <property name=\"entityManager\" ref=\"entityManager\" />\n     </bean>\n-    <bean id=\"userAttributeValuesDAO\" class=\"org.syncope.core.dao.impl.UserAttributeValuesDAOImpl\">\n+    <bean id=\"userAttributeDAO\" class=\"org.syncope.core.dao.impl.UserAttributeDAOImpl\">\n+        <property name=\"entityManager\" ref=\"entityManager\" />\n+    </bean>\n+    <bean id=\"userDerivedAttributeSchemaDAO\" class=\"org.syncope.core.dao.impl.UserDerivedAttributeSchemaDAOImpl\">\n+        <property name=\"entityManager\" ref=\"entityManager\" />\n+    </bean>\n+    <bean id=\"userDerivedAttributeDAO\" class=\"org.syncope.core.dao.impl.UserDerivedAttributeDAOImpl\">\n         <property name=\"entityManager\" ref=\"entityManager\" />\n     </bean>\n-    \n </beans>\n\\ No newline at end of file"},{"sha":"cc22d81a322762ff984b1260cc885f604794fd7b","filename":"core/src/main/resources/log4j.xml","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -40,10 +40,11 @@\n         <level value=\"INFO\"/>\n         <appender-ref ref=\"main\"/>\n     </logger>\n-    \n+\n     <root>\n-        <priority value=\"INFO\" />\n+        <priority value=\"INFO\"/>\n         <appender-ref ref=\"main\"/>\n+        <appender-ref ref=\"test\"/>\n     </root>\n </log4j:configuration>\n "},{"sha":"2b62e4f12cde208810e2f97d5153eb15bf2a59a0","filename":"core/src/test/java/org/syncope/core/test/dao/AbstractDAOTest.java","status":"modified","additions":54,"deletions":8,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FAbstractDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FAbstractDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FAbstractDAOTest.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -16,6 +16,10 @@\n \n import java.io.FileInputStream;\n import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n import javax.sql.DataSource;\n import org.dbunit.database.DatabaseConfig;\n import org.dbunit.database.DatabaseConnection;\n@@ -33,14 +37,12 @@\n \n public abstract class AbstractDAOTest extends AbstractJpaTests {\n \n-    protected String dataSetFileName;\n     protected DAO dao;\n     protected static final Logger log = LoggerFactory.getLogger(\n             AbstractDAOTest.class);\n \n-    protected AbstractDAOTest(String beanName, String dataSetFileName) {\n+    protected AbstractDAOTest(String beanName) {\n         super();\n-        this.dataSetFileName = dataSetFileName;\n \n         ApplicationContext ctx = super.getApplicationContext();\n         dao = (DAO) ctx.getBean(beanName);\n@@ -52,6 +54,35 @@ protected String[] getConfigLocations() {\n         return new String[]{\"applicationContext.xml\"};\n     }\n \n+    private void logTableContent(Connection conn, String tableName)\n+            throws SQLException {\n+\n+        Statement stmt = null;\n+        ResultSet rs = null;\n+        try {\n+            stmt = conn.createStatement();\n+\n+            rs = stmt.executeQuery(\"SELECT * FROM \" + tableName);\n+            ResultSetMetaData metaData = rs.getMetaData();\n+            log.debug(\"Table: \" + tableName);\n+            StringBuffer row = new StringBuffer();\n+            while (rs.next()) {\n+                for (int i = 0; i < metaData.getColumnCount(); i++) {\n+                    row.append(metaData.getColumnLabel(i + 1) + \"=\"\n+                            + rs.getString(i + 1) + \" \");\n+                }\n+\n+                log.debug(row.toString());\n+                row.delete(0, row.length());\n+            }\n+        } catch (SQLException sqle) {\n+            log.error(\"While dumping \" + tableName + \"content\", sqle);\n+        } finally {\n+            rs.close();\n+            stmt.close();\n+        }\n+    }\n+\n     @Override\n     protected void onSetUpInTransaction() throws Exception {\n         DataSource dataSource = jdbcTemplate.getDataSource();\n@@ -63,17 +94,32 @@ protected void onSetUpInTransaction() throws Exception {\n                 new HsqldbDataTypeFactory());\n \n         FlatXmlDataSetBuilder dataSetBuilder = new FlatXmlDataSetBuilder();\n-        IDataSet dataSet = dataSetBuilder.build(new FileInputStream(\n-                \"./src/test/resources/dbunit-test-data/\"\n-                + dataSetFileName + \".xml\"));\n-\n+        IDataSet dataSet = dataSetBuilder.build(\n+                new FileInputStream(\"./src/test/resources/dbunitTestData.xml\"));\n         try {\n-            DatabaseOperation.CLEAN_INSERT.execute(dbUnitConn, dataSet);\n+            DatabaseOperation.REFRESH.execute(dbUnitConn, dataSet);\n         } catch (Throwable t) {\n             log.error(\"While executing tests\", t);\n         } finally {\n             DataSourceUtils.releaseConnection(conn, dataSource);\n         }\n+\n+        if (log.isDebugEnabled()) {\n+            conn = DataSourceUtils.getConnection(dataSource);\n+\n+            String[] tableNames = new String[]{\n+                \"SyncopeUser\",\n+                \"UserAttributeSchema\",\n+                \"UserAttribute\",\n+                \"UserAttributeValue\",\n+                \"UserAttributeValueAsString\",\n+                \"UserAttributeValueAsDate\",\n+                \"UserAttribute_UserAttributeValue\",\n+                \"SyncopeUser_UserAttribute\"};\n+            for (int i = 0; i < tableNames.length; i++) {\n+                logTableContent(conn, tableNames[i]);\n+            }\n+        }\n     }\n \n     protected abstract DAO getDAO();"},{"sha":"0e92507e2841e4afc454de94b98785bf21abc4a6","filename":"core/src/test/java/org/syncope/core/test/dao/SyncopeUserDAOTest.java","status":"modified","additions":48,"deletions":3,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FSyncopeUserDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FSyncopeUserDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FSyncopeUserDAOTest.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -15,14 +15,32 @@\n package org.syncope.core.test.dao;\n \n import java.util.List;\n+import java.util.Set;\n import org.junit.Test;\n+import org.springframework.context.ApplicationContext;\n import org.syncope.core.beans.SyncopeUser;\n+import org.syncope.core.beans.UserAttributeSchema;\n+import org.syncope.core.beans.UserAttribute;\n import org.syncope.core.dao.SyncopeUserDAO;\n+import org.syncope.core.dao.UserAttributeSchemaDAO;\n+import org.syncope.core.dao.UserAttributeDAO;\n \n public class SyncopeUserDAOTest extends AbstractDAOTest {\n \n+    UserAttributeDAO userAttributeDAO;\n+    UserAttributeSchemaDAO userAttributeSchemaDAO;\n+\n     public SyncopeUserDAOTest() {\n-        super(\"syncopeUserDAO\", \"SyncopeUserDAOImpl\");\n+        super(\"syncopeUserDAO\");\n+        \n+        ApplicationContext ctx = super.getApplicationContext();\n+        userAttributeDAO =\n+                (UserAttributeDAO) ctx.getBean(\"userAttributeDAO\");\n+        assertNotNull(userAttributeDAO);\n+\n+        userAttributeSchemaDAO =\n+                (UserAttributeSchemaDAO) ctx.getBean(\"userAttributeSchemaDAO\");\n+        assertNotNull(userAttributeSchemaDAO);\n     }\n \n     @Override\n@@ -58,11 +76,38 @@ public final void testSave() {\n \n     @Test\n     public final void testDelete() {\n-        SyncopeUser user = getDAO().find(1L);\n+        SyncopeUser user = getDAO().find(3L);\n \n         getDAO().delete(user.getId());\n \n-        SyncopeUser actual = getDAO().find(1L);\n+        SyncopeUser actual = getDAO().find(3L);\n         assertNull(\"delete did not work\", actual);\n     }\n+\n+    @Test\n+    public final void testRelationships() {\n+        SyncopeUser user = getDAO().find(2L);\n+        Set<UserAttribute> attributes =\n+                user.getAttributes();\n+        int originalAttributesSize = attributes.size();\n+\n+        UserAttribute attribute = attributes.iterator().next();\n+        String attributeSchemaName =\n+                attribute.getSchema().getName();\n+\n+        userAttributeDAO.delete(attribute.getId());\n+        UserAttribute actualAttribute =\n+                userAttributeDAO.find(attribute.getId());\n+        assertNull(\"expected delete to work\", actualAttribute);\n+\n+        user = getDAO().find(2L);\n+        attributes = user.getAttributes();\n+        assertEquals(\"number of attributes differs\",\n+                originalAttributesSize, attributes.size());\n+\n+        UserAttributeSchema userAttributeSchema =\n+                userAttributeSchemaDAO.find(attributeSchemaName);\n+        assertNotNull(\"user attribute schema deleted when deleting values\",\n+                userAttributeSchema);\n+    }\n }"},{"sha":"d22f8f96b61e432f71422ce0f3b6eaff42edeb24","filename":"core/src/test/java/org/syncope/core/test/dao/UserAttributeDAOTest.java","status":"renamed","additions":42,"deletions":28,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeDAOTest.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -17,44 +17,45 @@\n import java.util.List;\n import org.junit.Test;\n import org.springframework.context.ApplicationContext;\n+import org.syncope.core.AttributeType;\n import org.syncope.core.beans.UserAttributeSchema;\n-import org.syncope.core.beans.UserAttributeValues;\n+import org.syncope.core.beans.UserAttribute;\n import org.syncope.core.dao.UserAttributeSchemaDAO;\n-import org.syncope.core.dao.UserAttributeValuesDAO;\n-import org.syncope.core.enums.AttributeType;\n+import org.syncope.core.dao.UserAttributeDAO;\n \n-public class UserAttributeValuesDAOTest extends AbstractDAOTest {\n+public class UserAttributeDAOTest extends AbstractDAOTest {\n \n     UserAttributeSchemaDAO userAttributeSchemaDAO;\n \n-    public UserAttributeValuesDAOTest() {\n-        super(\"userAttributeValuesDAO\", \"UserAttributeValuesDAOImpl\");\n+    public UserAttributeDAOTest() {\n+        super(\"userAttributeDAO\");\n \n         ApplicationContext ctx = super.getApplicationContext();\n-        userAttributeSchemaDAO = (UserAttributeSchemaDAO) ctx.getBean(\"userAttributeSchemaDAO\");\n+        userAttributeSchemaDAO =\n+                (UserAttributeSchemaDAO) ctx.getBean(\"userAttributeSchemaDAO\");\n         assertNotNull(userAttributeSchemaDAO);\n     }\n \n     @Override\n-    protected UserAttributeValuesDAO getDAO() {\n-        return (UserAttributeValuesDAO) dao;\n+    protected UserAttributeDAO getDAO() {\n+        return (UserAttributeDAO) dao;\n     }\n \n     @Test\n     public final void testFindAll() {\n-        List<UserAttributeValues> list = getDAO().findAll();\n-        assertEquals(\"did not get expected number of attribute schemas \",\n-                2, list.size());\n+        List<UserAttribute> list = getDAO().findAll();\n+        assertEquals(\"did not get expected number of attributes \",\n+                5, list.size());\n     }\n \n     @Test\n-    public final void testFindByName() {\n-        UserAttributeValues userAttributeValues = getDAO().find(100L);\n+    public final void testFindById() {\n+        UserAttribute attribute = getDAO().find(100L);\n         assertNotNull(\"did not find expected attribute schema\",\n-                userAttributeValues);\n-        userAttributeValues = getDAO().find(200L);\n+                attribute);\n+        attribute = getDAO().find(200L);\n         assertNotNull(\"did not find expected attribute schema\",\n-                userAttributeValues);\n+                attribute);\n     }\n \n     @Test\n@@ -72,26 +73,39 @@ public final void testSave() throws ClassNotFoundException {\n         assertNotNull(\"expected save to work for e-mail schema\",\n                 actualEmailSchema);\n \n-        UserAttributeValues userAttributeValues =\n-                new UserAttributeValues(actualEmailSchema);\n-        userAttributeValues.addAttributeValue(\"john.doe@gmail.com\");\n-        userAttributeValues.addAttributeValue(\"mario.rossi@gmail.com\");\n+        UserAttribute attribute =\n+                new UserAttribute(actualEmailSchema);\n+        attribute.addValue(\"john.doe@gmail.com\");\n+        attribute.addValue(\"mario.rossi@gmail.com\");\n \n-        userAttributeValues = getDAO().save(userAttributeValues);\n+        attribute = getDAO().save(attribute);\n \n-        UserAttributeValues actual = getDAO().find(userAttributeValues.getId());\n+        UserAttribute actual = getDAO().find(attribute.getId());\n         assertNotNull(\"expected save to work\", actual);\n-        assertEquals(userAttributeValues, actual);\n+        assertEquals(attribute, actual);\n     }\n \n     @Test\n     public final void testDelete() {\n+        UserAttribute attribute = getDAO().find(100L);\n \n-        UserAttributeValues userAttributeValues = getDAO().find(100L);\n+        getDAO().delete(attribute.getId());\n \n-        getDAO().delete(userAttributeValues.getId());\n-\n-        UserAttributeValues actual = getDAO().find(100L);\n+        UserAttribute actual = getDAO().find(100L);\n         assertNull(\"delete did not work\", actual);\n     }\n+\n+    @Test\n+    public final void testRelationships() {\n+        UserAttribute attribute = getDAO().find(200L);\n+        String attributeSchemaName =\n+                attribute.getSchema().getName();\n+\n+        getDAO().delete(attribute.getId());\n+\n+        UserAttributeSchema userAttributeSchema =\n+                userAttributeSchemaDAO.find(attributeSchemaName);\n+        assertNotNull(\"user attribute schema deleted when deleting values\",\n+                userAttributeSchema);\n+    }\n }","previous_filename":"core/src/test/java/org/syncope/core/test/dao/UserAttributeValuesDAOTest.java"},{"sha":"71b6be2d71d024ab83c370c85a1cceff960ba72a","filename":"core/src/test/java/org/syncope/core/test/dao/UserAttributeSchemaDAOTest.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeSchemaDAOTest.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -18,12 +18,12 @@\n import org.junit.Test;\n import org.syncope.core.beans.UserAttributeSchema;\n import org.syncope.core.dao.UserAttributeSchemaDAO;\n-import org.syncope.core.enums.AttributeType;\n+import org.syncope.core.AttributeType;\n \n public class UserAttributeSchemaDAOTest extends AbstractDAOTest {\n \n     public UserAttributeSchemaDAOTest() {\n-        super(\"userAttributeSchemaDAO\", \"UserAttributeSchemaDAOImpl\");\n+        super(\"userAttributeSchemaDAO\");\n     }\n \n     @Override\n@@ -35,17 +35,14 @@ protected UserAttributeSchemaDAO getDAO() {\n     public final void testFindAll() {\n         List<UserAttributeSchema> list = getDAO().findAll();\n         assertEquals(\"did not get expected number of attribute schemas \",\n-                3, list.size());\n+                4, list.size());\n     }\n \n     @Test\n     public final void testFindByName() {\n         UserAttributeSchema userAttributeSchema = getDAO().find(\"username\");\n         assertNotNull(\"did not find expected attribute schema\",\n                 userAttributeSchema);\n-        userAttributeSchema = getDAO().find(\"birthdate\");\n-        assertNotNull(\"did not find expected attribute schema\",\n-                userAttributeSchema);\n     }\n \n     @Test"},{"sha":"44e372f1e32d4d617599bd348c47eb9c1a6d224c","filename":"core/src/test/java/org/syncope/core/test/dao/UserDerivedAttributeDAOTest.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserDerivedAttributeDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserDerivedAttributeDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserDerivedAttributeDAOTest.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -0,0 +1,125 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.dao;\n+\n+import java.util.List;\n+import org.junit.Test;\n+import org.springframework.context.ApplicationContext;\n+import org.syncope.core.beans.SyncopeUser;\n+import org.syncope.core.beans.UserAttributeValue;\n+import org.syncope.core.beans.UserAttributeValueAsString;\n+import org.syncope.core.beans.UserDerivedAttributeSchema;\n+import org.syncope.core.beans.UserDerivedAttribute;\n+import org.syncope.core.dao.SyncopeUserDAO;\n+import org.syncope.core.dao.UserDerivedAttributeSchemaDAO;\n+import org.syncope.core.dao.UserDerivedAttributeDAO;\n+\n+public class UserDerivedAttributeDAOTest extends AbstractDAOTest {\n+\n+    SyncopeUserDAO syncopeUserDAO;\n+    UserDerivedAttributeSchemaDAO userDerivedAttributeSchemaDAO;\n+\n+    public UserDerivedAttributeDAOTest() {\n+        super(\"userDerivedAttributeDAO\");\n+\n+        ApplicationContext ctx = super.getApplicationContext();\n+\n+        userDerivedAttributeSchemaDAO =\n+                (UserDerivedAttributeSchemaDAO) ctx.getBean(\n+                \"userDerivedAttributeSchemaDAO\");\n+        assertNotNull(userDerivedAttributeSchemaDAO);\n+\n+        syncopeUserDAO =\n+                (SyncopeUserDAO) ctx.getBean(\n+                \"syncopeUserDAO\");\n+        assertNotNull(syncopeUserDAO);\n+    }\n+\n+    @Override\n+    protected UserDerivedAttributeDAO getDAO() {\n+        return (UserDerivedAttributeDAO) dao;\n+    }\n+\n+    @Test\n+    public final void testFindAll() {\n+        List<UserDerivedAttribute> list = getDAO().findAll();\n+        assertEquals(\"did not get expected number of derived attributes \",\n+                1, list.size());\n+    }\n+\n+    @Test\n+    public final void testFindById() {\n+        UserDerivedAttribute attribute = getDAO().find(1000L);\n+        assertNotNull(\"did not find expected attribute schema\",\n+                attribute);\n+    }\n+\n+    @Test\n+    public final void testSave() throws ClassNotFoundException {\n+        UserDerivedAttributeSchema userDerivedAttributeSchema =\n+                new UserDerivedAttributeSchema();\n+        userDerivedAttributeSchema.setName(\"cn2\");\n+        userDerivedAttributeSchema.setExpression(\"firstname + \\\" \\\" + surname\");\n+\n+        userDerivedAttributeSchemaDAO.save(userDerivedAttributeSchema);\n+\n+        UserDerivedAttributeSchema actualCN2Schema =\n+                userDerivedAttributeSchemaDAO.find(\"cn2\");\n+        assertNotNull(\"expected save to work for CN2 schema\",\n+                actualCN2Schema);\n+\n+        SyncopeUser owner = syncopeUserDAO.find(3L);\n+        assertNotNull(\"did not get expected user\", owner);\n+\n+        UserDerivedAttribute derivedAttribute = new UserDerivedAttribute();\n+        derivedAttribute.setSchema(userDerivedAttributeSchema);\n+        derivedAttribute.setOwner(owner);\n+\n+        derivedAttribute = getDAO().save(derivedAttribute);\n+\n+        UserDerivedAttribute actual = getDAO().find(derivedAttribute.getId());\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(derivedAttribute, actual);\n+\n+        UserAttributeValueAsString firstnameAttribute =\n+                (UserAttributeValueAsString) owner.getAttribute(\n+                \"firstname\").getValues().iterator().next();\n+        UserAttributeValueAsString surnameAttribute =\n+                (UserAttributeValueAsString) owner.getAttribute(\n+                \"surname\").getValues().iterator().next();\n+\n+        assertEquals(\"expected derived value\",\n+                firstnameAttribute.getActualValue() + \" \"\n+                + surnameAttribute.getActualValue(),\n+                derivedAttribute.getValue());\n+    }\n+\n+    @Test\n+    public final void testDeleteAndRelationships() {\n+        UserDerivedAttribute attribute = getDAO().find(1000L);\n+        String attributeSchemaName =\n+                attribute.getSchema().getName();\n+\n+        getDAO().delete(attribute.getId());\n+\n+        UserDerivedAttribute actual = getDAO().find(1000L);\n+        assertNull(\"delete did not work\", actual);\n+\n+        UserDerivedAttributeSchema userAttributeSchema =\n+                userDerivedAttributeSchemaDAO.find(attributeSchemaName);\n+        assertNotNull(\"user derived attribute schema deleted when deleting values\",\n+                userAttributeSchema);\n+    }\n+}"},{"sha":"4c153fc5557b031e30c91f1b0511a6dad207ad67","filename":"core/src/test/java/org/syncope/core/test/dao/UserDerivedAttributeSchemaDAOTest.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserDerivedAttributeSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserDerivedAttributeSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserDerivedAttributeSchemaDAOTest.java?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -0,0 +1,71 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.dao;\n+\n+import java.util.List;\n+import org.junit.Test;\n+import org.syncope.core.beans.UserDerivedAttributeSchema;\n+import org.syncope.core.dao.UserDerivedAttributeSchemaDAO;\n+\n+public class UserDerivedAttributeSchemaDAOTest extends AbstractDAOTest {\n+\n+    public UserDerivedAttributeSchemaDAOTest() {\n+        super(\"userDerivedAttributeSchemaDAO\");\n+    }\n+\n+    @Override\n+    protected UserDerivedAttributeSchemaDAO getDAO() {\n+        return (UserDerivedAttributeSchemaDAO) dao;\n+    }\n+\n+    @Test\n+    public final void testFindAll() {\n+        List<UserDerivedAttributeSchema> list = getDAO().findAll();\n+        assertEquals(\"did not get expected number of derived attribute schemas \",\n+                1, list.size());\n+    }\n+\n+    @Test\n+    public final void testFindByName() {\n+        UserDerivedAttributeSchema userAttributeSchema =\n+                getDAO().find(\"cn\");\n+        assertNotNull(\"did not find expected derived attribute schema\",\n+                userAttributeSchema);\n+    }\n+\n+    @Test\n+    public final void testSave() {\n+        UserDerivedAttributeSchema userDerivedAttributeSchema =\n+                new UserDerivedAttributeSchema();\n+        userDerivedAttributeSchema.setName(\"cn2\");\n+        userDerivedAttributeSchema.setExpression(\"name surname\");\n+\n+        getDAO().save(userDerivedAttributeSchema);\n+\n+        UserDerivedAttributeSchema actual = getDAO().find(\"cn2\");\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(userDerivedAttributeSchema, actual);\n+    }\n+\n+    @Test\n+    public final void testDelete() {\n+        UserDerivedAttributeSchema userAttributeSchema = getDAO().find(\"cn\");\n+\n+        getDAO().delete(userAttributeSchema.getName());\n+\n+        UserDerivedAttributeSchema actual = getDAO().find(\"cn\");\n+        assertNull(\"delete did not work\", actual);\n+    }\n+}"},{"sha":"1ae733f6e405759a0006cb40ef4a2f2776694f60","filename":"core/src/test/resources/dbunit-test-data/SyncopeUserDAOImpl.xml","status":"removed","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f8a1775d8cd84729ea7feb264730411e518f80fd/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FSyncopeUserDAOImpl.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f8a1775d8cd84729ea7feb264730411e518f80fd/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FSyncopeUserDAOImpl.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FSyncopeUserDAOImpl.xml?ref=f8a1775d8cd84729ea7feb264730411e518f80fd","patch":"@@ -1,6 +0,0 @@\n-<?xml version='1.0' encoding='UTF-8'?>\r\n-<dataset>\r\n-    <SyncopeUser id='1'/>\r\n-    <SyncopeUser id='2'/>\r\n-    <SyncopeUser id='3'/>\r\n-</dataset>\r"},{"sha":"bd81c4a98e20fdc2f747bd04c83fd865e3d1ea1b","filename":"core/src/test/resources/dbunit-test-data/UserAttributeSchemaDAOImpl.xml","status":"removed","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f8a1775d8cd84729ea7feb264730411e518f80fd/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeSchemaDAOImpl.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f8a1775d8cd84729ea7feb264730411e518f80fd/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeSchemaDAOImpl.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeSchemaDAOImpl.xml?ref=f8a1775d8cd84729ea7feb264730411e518f80fd","patch":"@@ -1,12 +0,0 @@\n-<?xml version='1.0' encoding='UTF-8'?>\r\n-<dataset>\r\n-    <UserAttributeSchema name=\"username\" type=\"String\"\r\n-                         mandatory=\"true\" multivalue=\"false\"\r\n-                         conversionPattern=\"NULL\"/>\r\n-    <UserAttributeSchema name=\"birthdate\" type=\"Date\"\r\n-                         mandatory=\"false\" multivalue=\"false\"\r\n-                         conversionPattern=\"yyyy-MM-dd\"/>\r\n-    <UserAttributeSchema name=\"salaries\" type=\"Double\"\r\n-                         mandatory=\"false\" multivalue=\"true\"\r\n-                         conversionPattern=\"###,###.###\"/>\r\n-</dataset>\r"},{"sha":"001f0f399652559bf794b77d18cfcfa0b56d425b","filename":"core/src/test/resources/dbunit-test-data/UserAttributeValuesDAOImpl.xml","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f8a1775d8cd84729ea7feb264730411e518f80fd/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeValuesDAOImpl.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f8a1775d8cd84729ea7feb264730411e518f80fd/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeValuesDAOImpl.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeValuesDAOImpl.xml?ref=f8a1775d8cd84729ea7feb264730411e518f80fd","patch":"@@ -1,28 +0,0 @@\n-<?xml version='1.0' encoding='UTF-8'?>\r\n-<dataset>\r\n-    <UserAttributeSchema name=\"username\" type=\"String\"\r\n-                         mandatory=\"true\" multivalue=\"false\"\r\n-                         conversionPattern=\"NULL\"/>\r\n-    <UserAttributeSchema name=\"loginDate\" type=\"Date\"\r\n-                         mandatory=\"false\" multivalue=\"true\"\r\n-                         conversionPattern=\"yyyy-MM-dd\"/>\r\n-\r\n-    <UserAttributeValues id=\"100\" userAttributeSchema_name=\"username\"/>\r\n-    <UserAttributeValues id=\"200\" userAttributeSchema_name=\"loginDate\"/>\r\n-\r\n-    <UserAttributeValue id=\"10\"/>\r\n-    <UserAttributeValue id=\"20\"/>\r\n-    <UserAttributeValue id=\"21\"/>\r\n-\r\n-    <UserAttributeValueAsString id=\"10\" actualValue=\"chicchiricco\"/>\r\n-\r\n-    <UserAttributeValueAsDate id=\"20\" actualValue=\"2009-05-26\"/>\r\n-    <UserAttributeValueAsDate id=\"21\" actualValue=\"2010-05-26 15:40:04\"/>\r\n-\r\n-    <UserAttributeValues_UserAttributeValue\r\n-        UserAttributeValues_id=\"100\" attributeValues_id=\"10\"/>\r\n-    <UserAttributeValues_UserAttributeValue\r\n-        UserAttributeValues_id=\"200\" attributeValues_id=\"20\"/>\r\n-    <UserAttributeValues_UserAttributeValue\r\n-        UserAttributeValues_id=\"200\" attributeValues_id=\"21\"/>\r\n-</dataset>\r"},{"sha":"5bcb85276519dcbbd85aac0b85459acdc5a0990a","filename":"core/src/test/resources/dbunitTestData.xml","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Ftest%2Fresources%2FdbunitTestData.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/core%2Fsrc%2Ftest%2Fresources%2FdbunitTestData.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FdbunitTestData.xml?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<dataset>\n+    <SyncopeUser id=\"1\"/>\n+    <SyncopeUser id=\"2\"/>\n+    <SyncopeUser id=\"3\"/>\n+\n+    <UserAttributeSchema name=\"username\" type=\"String\"\n+                         mandatory=\"true\" multivalue=\"false\"\n+                         conversionPattern=\"NULL\"/>\n+    <UserAttributeSchema name=\"loginDate\" type=\"Date\"\n+                         mandatory=\"false\" multivalue=\"true\"\n+                         conversionPattern=\"yyyy-MM-dd\"/>\n+    <UserAttributeSchema name=\"firstname\" type=\"String\"\n+                         mandatory=\"false\" multivalue=\"false\"\n+                         conversionPattern=\"NULL\"/>\n+    <UserAttributeSchema name=\"surname\" type=\"String\"\n+                         mandatory=\"true\" multivalue=\"false\"\n+                         conversionPattern=\"NULL\"/>\n+\n+    <UserAttribute id=\"100\" schema_name=\"username\"/>\n+    <UserAttribute id=\"200\" schema_name=\"loginDate\"/>\n+    <UserAttribute id=\"300\" schema_name=\"username\"/>\n+    <UserAttribute id=\"400\" schema_name=\"firstname\"/>\n+    <UserAttribute id=\"500\" schema_name=\"surname\"/>\n+\n+\n+    <UserAttributeValue id=\"10\"/>\n+    <UserAttributeValue id=\"11\"/>\n+    <UserAttributeValue id=\"20\"/>\n+    <UserAttributeValue id=\"21\"/>\n+    <UserAttributeValue id=\"30\"/>\n+    <UserAttributeValue id=\"31\"/>\n+\n+    <UserAttributeValueAsString id=\"10\" actualValue=\"chicchiricco\"/>\n+    <UserAttributeValueAsString id=\"11\" actualValue=\"fabio.martelli\"/>\n+\n+    <UserAttributeValueAsDate id=\"20\" actualValue=\"2009-05-26\"/>\n+    <UserAttributeValueAsDate id=\"21\" actualValue=\"2010-05-26 15:40:04\"/>\n+\n+    <UserAttributeValueAsString id=\"30\" actualValue=\"John\"/>\n+    <UserAttributeValueAsString id=\"31\" actualValue=\"Doe\"/>\n+\n+    <UserAttribute_UserAttributeValue\n+        UserAttribute_id=\"100\" values_id=\"10\"/>\n+    <UserAttribute_UserAttributeValue\n+        UserAttribute_id=\"200\" values_id=\"20\"/>\n+    <UserAttribute_UserAttributeValue\n+        UserAttribute_id=\"200\" values_id=\"21\"/>\n+    <UserAttribute_UserAttributeValue\n+        UserAttribute_id=\"300\" values_id=\"11\"/>\n+    <UserAttribute_UserAttributeValue\n+        UserAttribute_id=\"400\" values_id=\"30\"/>\n+    <UserAttribute_UserAttributeValue\n+        UserAttribute_id=\"500\" values_id=\"31\"/>\n+\n+    <SyncopeUser_UserAttribute SyncopeUser_id='1'\n+                               attributes_id='100'/>\n+    <SyncopeUser_UserAttribute SyncopeUser_id='1'\n+                               attributes_id='200'/>\n+    <SyncopeUser_UserAttribute SyncopeUser_id='2'\n+                               attributes_id='300'/>\n+    <SyncopeUser_UserAttribute SyncopeUser_id='3'\n+                               attributes_id='400'/>\n+    <SyncopeUser_UserAttribute SyncopeUser_id='3'\n+                               attributes_id='500'/>\n+\n+    <UserDerivedAttributeSchema name=\"cn\" expression=\"surname + ', ' + firstname\"/>\n+\n+    <UserDerivedAttribute id=\"1000\" owner_id=\"3\" schema_name=\"cn\"/>\n+</dataset>"},{"sha":"e36e5c317a282c5f0000cd6e6c8a709053e09f50","filename":"pom.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c62c889ea3c7784650cc40c528f660b72a2d9dd/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c62c889ea3c7784650cc40c528f660b72a2d9dd/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=1c62c889ea3c7784650cc40c528f660b72a2d9dd","patch":"@@ -92,6 +92,8 @@\n \n         <xerces.version>2.9.1</xerces.version>\n \n+        <commons-jexl.version>2.0.1</commons-jexl.version>\n+\n         <openam.version>snapshot9</openam.version>\n \n         <osworkflow.version>2.8.0</osworkflow.version>\n@@ -137,6 +139,12 @@\n                 <version>${xerces.version}</version>\n             </dependency>\n \n+            <dependency>\n+                <groupId>org.apache.commons</groupId>\n+                <artifactId>commons-jexl</artifactId>\n+                <version>${commons-jexl.version}</version>\n+            </dependency>\n+            \n             <dependency>\n                 <groupId>com.forgerock.openam</groupId>\n                 <artifactId>clientsdk</artifactId>"}]}