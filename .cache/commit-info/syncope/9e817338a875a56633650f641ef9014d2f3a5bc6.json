{"sha":"9e817338a875a56633650f641ef9014d2f3a5bc6","node_id":"C_kwDOJfYA1toAKDllODE3MzM4YTg3NWE1NjYzMzY1MGY2NDFlZjkwMTRkMmYzYTViYzY","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-12-09T13:22:52Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-12-09T13:22:52Z"},"message":"Prefer spring-boot-starter-mail over custom conf","tree":{"sha":"28973abc96654b2960517f5f32fa32569fafcb34","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/28973abc96654b2960517f5f32fa32569fafcb34"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9e817338a875a56633650f641ef9014d2f3a5bc6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9e817338a875a56633650f641ef9014d2f3a5bc6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9e817338a875a56633650f641ef9014d2f3a5bc6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9e817338a875a56633650f641ef9014d2f3a5bc6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2f4882cf8d7e36e4307d9339bc747f7ca349002d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2f4882cf8d7e36e4307d9339bc747f7ca349002d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2f4882cf8d7e36e4307d9339bc747f7ca349002d"}],"stats":{"total":300,"additions":67,"deletions":233},"files":[{"sha":"9102a808b5fc620fe0ed42fbf9176113d9e1c0f2","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/IdMLogicTestContext.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicTestContext.java?ref=9e817338a875a56633650f641ef9014d2f3a5bc6","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import static org.mockito.Mockito.mock;\n+\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n@@ -36,6 +38,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.context.annotation.PropertySource;\n+import org.springframework.mail.javamail.JavaMailSender;\n \n @PropertySource(\"classpath:core-test.properties\")\n @Import({ IdRepoLogicContext.class, IdMLogicContext.class, SecurityContext.class,\n@@ -53,6 +56,11 @@ public TestInitializer testInitializer(\n         return new TestInitializer(domainLoader, domainHolder, contentLoader, ctx);\n     }\n \n+    @Bean\n+    public JavaMailSender javaMailSender() {\n+        return mock(JavaMailSender.class);\n+    }\n+\n     @Bean\n     public ImplementationLookup implementationLookup() {\n         return new DummyImplementationLookup();"},{"sha":"ddc1abe2ab1e8103693a4fddbdc2b4e3366d5781","filename":"core/idrepo/logic/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fidrepo%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fidrepo%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fpom.xml?ref=9e817338a875a56633650f641ef9014d2f3a5bc6","patch":"@@ -100,6 +100,11 @@ under the License.\n       <artifactId>spring-test</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.junit.jupiter</groupId>\n       <artifactId>junit-jupiter</artifactId>"},{"sha":"ed654e422e4005713a799009ea93827ce36744c2","filename":"core/idrepo/logic/src/test/java/org/apache/syncope/core/logic/IdRepoLogicTestContext.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicTestContext.java?ref=9e817338a875a56633650f641ef9014d2f3a5bc6","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import static org.mockito.Mockito.mock;\n+\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n@@ -36,6 +38,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.context.annotation.PropertySource;\n+import org.springframework.mail.javamail.JavaMailSender;\n \n @PropertySource(\"classpath:core-test.properties\")\n @Import({ IdRepoLogicContext.class, IdRepoLogicContext.class, SecurityContext.class,\n@@ -53,6 +56,11 @@ public TestInitializer testInitializer(\n         return new TestInitializer(domainLoader, domainHolder, contentLoader, ctx);\n     }\n \n+    @Bean\n+    public JavaMailSender javaMailSender() {\n+        return mock(JavaMailSender.class);\n+    }\n+\n     @Bean\n     public ImplementationLookup implementationLookup() {\n         return new DummyImplementationLookup();"},{"sha":"fda5ce3d61fdcbb0cfc5586db534dc47fd914394","filename":"core/provisioning-java/pom.xml","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fpom.xml?ref=9e817338a875a56633650f641ef9014d2f3a5bc6","patch":"@@ -45,9 +45,10 @@ under the License.\n     </dependency>\n \n     <dependency>\n-      <groupId>org.springframework</groupId>\n-      <artifactId>spring-context-support</artifactId>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-mail</artifactId>\n     </dependency>\n+\n     <dependency>\n       <groupId>org.springframework.retry</groupId>\n       <artifactId>spring-retry</artifactId>\n@@ -146,13 +147,13 @@ under the License.\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>org.junit.jupiter</groupId>\n-      <artifactId>junit-jupiter</artifactId>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>org.mockito</groupId>\n-      <artifactId>mockito-junit-jupiter</artifactId>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter</artifactId>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>"},{"sha":"24d3945af2e8fb19a167a1bb00a3e98789df46e4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":0,"deletions":85,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=9e817338a875a56633650f641ef9014d2f3a5bc6","patch":"@@ -18,22 +18,14 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import java.io.IOException;\n-import java.io.PrintStream;\n import java.nio.charset.StandardCharsets;\n import java.util.Properties;\n import java.util.concurrent.Executor;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ThreadPoolExecutor;\n import javax.annotation.Resource;\n-import javax.mail.MessagingException;\n-import javax.mail.Session;\n-import javax.mail.Transport;\n-import javax.naming.NamingException;\n import javax.sql.DataSource;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n-import org.apache.syncope.common.lib.LogOutputStream;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n@@ -184,8 +176,6 @@\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -200,9 +190,7 @@\n import org.springframework.core.task.AsyncTaskExecutor;\n import org.springframework.core.task.support.TaskExecutorAdapter;\n import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n-import org.springframework.jndi.JndiObjectFactoryBean;\n import org.springframework.mail.javamail.JavaMailSender;\n-import org.springframework.mail.javamail.JavaMailSenderImpl;\n import org.springframework.scheduling.annotation.AsyncConfigurer;\n import org.springframework.scheduling.annotation.EnableAsync;\n import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n@@ -214,8 +202,6 @@\n @Configuration(proxyBeanMethods = false)\n public class ProvisioningContext {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ProvisioningContext.class);\n-\n     @Resource(name = \"MasterDataSource\")\n     private DataSource masterDataSource;\n \n@@ -381,77 +367,6 @@ public JobStatusUpdater jobStatusUpdater(final JobStatusDAO jobStatusDAO, final\n         return new JobStatusUpdater(jobStatusDAO, entityFactory);\n     }\n \n-    @ConditionalOnMissingBean\n-    @Bean\n-    public JavaMailSender mailSender(final ProvisioningProperties provisioningProperties)\n-            throws IllegalArgumentException, IOException {\n-\n-        JavaMailSenderImpl mailSender = new JavaMailSenderImpl() {\n-\n-            @Override\n-            protected Transport connectTransport() throws MessagingException {\n-                // ensure that no auth means no auth\n-                if (StringUtils.isBlank(getUsername())) {\n-                    Transport transport = getTransport(getSession());\n-                    transport.connect(getHost(), getPort(), null, null);\n-                    return transport;\n-                }\n-\n-                return super.connectTransport();\n-            }\n-        };\n-        mailSender.setDefaultEncoding(provisioningProperties.getSmtp().getDefaultEncoding());\n-        mailSender.setHost(provisioningProperties.getSmtp().getHost());\n-        mailSender.setPort(provisioningProperties.getSmtp().getPort());\n-        mailSender.setUsername(provisioningProperties.getSmtp().getUsername());\n-        mailSender.setPassword(provisioningProperties.getSmtp().getPassword());\n-        mailSender.setProtocol(provisioningProperties.getSmtp().getProtocol());\n-\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"[Mail] host:port = {}:{}\", mailSender.getHost(), mailSender.getPort());\n-            LOG.debug(\"[Mail] protocol = {}\", mailSender.getProtocol());\n-            LOG.debug(\"[Mail] username = {}\", mailSender.getUsername());\n-            LOG.debug(\"[Mail] default encoding = {}\", mailSender.getDefaultEncoding());\n-        }\n-\n-        JndiObjectFactoryBean mailSession = new JndiObjectFactoryBean();\n-        mailSession.setJndiName(\"mail/syncopeNotification\");\n-        try {\n-            mailSession.afterPropertiesSet();\n-        } catch (NamingException e) {\n-            LOG.debug(\"While looking up JNDI for mail session\", e);\n-        }\n-\n-        Session session = (Session) mailSession.getObject();\n-        if (session == null) {\n-            Properties javaMailProperties = mailSender.getJavaMailProperties();\n-\n-            provisioningProperties.getSmtp().getJavamailProperties().\n-                    forEach((key, value) -> javaMailProperties.setProperty(key, value));\n-\n-            if (StringUtils.isNotBlank(mailSender.getUsername())) {\n-                javaMailProperties.setProperty(\"mail.smtp.auth\", \"true\");\n-            }\n-\n-            if (LOG.isDebugEnabled()) {\n-                mailSender.getJavaMailProperties().\n-                        forEach((key, value) -> LOG.debug(\"[Mail] property: {} = {}\", key, value));\n-            }\n-\n-            if (provisioningProperties.getSmtp().isDebug()) {\n-                session = mailSender.getSession();\n-                session.setDebug(true);\n-                try (LogOutputStream los = new LogOutputStream(LOG)) {\n-                    session.setDebugOut(new PrintStream(los));\n-                }\n-            }\n-        } else {\n-            mailSender.setSession(session);\n-        }\n-\n-        return mailSender;\n-    }\n-\n     @ConditionalOnMissingBean\n     @Bean\n     public ConnectorManager connectorManager("},{"sha":"9eea8ace4c42b37f65e69c8e551adecfa76fbb1f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningProperties.java","status":"modified","additions":0,"deletions":87,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningProperties.java?ref=9e817338a875a56633650f641ef9014d2f3a5bc6","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.provisioning.java;\n \n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import org.quartz.impl.jdbcjobstore.DriverDelegate;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n@@ -91,85 +89,6 @@ public void setMisfireThreshold(final int misfireThreshold) {\n         }\n     }\n \n-    public static class SMTPProperties {\n-\n-        private String host;\n-\n-        private int port = 25;\n-\n-        private String username;\n-\n-        private String password;\n-\n-        private String protocol = \"smtp\";\n-\n-        private String defaultEncoding = \"UTF-8\";\n-\n-        private boolean debug = false;\n-\n-        private final Map<String, String> javamailProperties = new HashMap<>();\n-\n-        public String getHost() {\n-            return host;\n-        }\n-\n-        public void setHost(final String host) {\n-            this.host = host;\n-        }\n-\n-        public int getPort() {\n-            return port;\n-        }\n-\n-        public void setPort(final int port) {\n-            this.port = port;\n-        }\n-\n-        public String getUsername() {\n-            return username;\n-        }\n-\n-        public void setUsername(final String username) {\n-            this.username = username;\n-        }\n-\n-        public String getPassword() {\n-            return password;\n-        }\n-\n-        public void setPassword(final String password) {\n-            this.password = password;\n-        }\n-\n-        public String getProtocol() {\n-            return protocol;\n-        }\n-\n-        public void setProtocol(final String protocol) {\n-            this.protocol = protocol;\n-        }\n-\n-        public String getDefaultEncoding() {\n-            return defaultEncoding;\n-        }\n-\n-        public void setDefaultEncoding(final String defaultEncoding) {\n-            this.defaultEncoding = defaultEncoding;\n-        }\n-\n-        public boolean isDebug() {\n-            return debug;\n-        }\n-\n-        public void setDebug(final boolean debug) {\n-            this.debug = debug;\n-        }\n-\n-        public Map<String, String> getJavamailProperties() {\n-            return javamailProperties;\n-        }\n-    }\n-\n     private final ExecutorProperties asyncConnectorFacadeExecutor = new ExecutorProperties();\n \n     private final ExecutorProperties propagationTaskExecutorAsyncExecutor = new ExecutorProperties();\n@@ -180,8 +99,6 @@ public Map<String, String> getJavamailProperties() {\n \n     private final QuartzProperties quartz = new QuartzProperties();\n \n-    private final SMTPProperties smtp = new SMTPProperties();\n-\n     public String getVirAttrCacheSpec() {\n         return virAttrCacheSpec;\n     }\n@@ -205,8 +122,4 @@ public List<String> getConnIdLocation() {\n     public QuartzProperties getQuartz() {\n         return quartz;\n     }\n-\n-    public SMTPProperties getSmtp() {\n-        return smtp;\n-    }\n }"},{"sha":"ce03a87c274a16819d11f23be677942b07ed3324","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ProvisioningTestContext.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningTestContext.java?ref=9e817338a875a56633650f641ef9014d2f3a5bc6","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n+import static org.mockito.Mockito.mock;\n+\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n@@ -34,6 +36,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.context.annotation.PropertySource;\n+import org.springframework.mail.javamail.JavaMailSender;\n \n @PropertySource(\"classpath:core-test.properties\")\n @Import({ ProvisioningContext.class, SecurityContext.class,\n@@ -51,6 +54,11 @@ public TestInitializer testInitializer(\n         return new TestInitializer(domainLoader, domainHolder, contentLoader, ctx);\n     }\n \n+    @Bean\n+    public JavaMailSender javaMailSender() {\n+        return mock(JavaMailSender.class);\n+    }\n+\n     @Bean\n     public ImplementationLookup implementationLookup() {\n         return new DummyImplementationLookup();"},{"sha":"a24df7d357d6aa5478f249b2508598b483a6b31d","filename":"core/starter/src/main/resources/core.properties","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e817338a875a56633650f641ef9014d2f3a5bc6/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties?ref=9e817338a875a56633650f641ef9014d2f3a5bc6","patch":"@@ -73,17 +73,15 @@ provisioning.quartz.delegate=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\n provisioning.quartz.sql=tables_postgres.sql\n provisioning.quartz.disableInstance=false\n \n-provisioning.smtp.host=none.syncope.apache.org\n-provisioning.smtp.port=25\n-provisioning.smtp.username=\n-provisioning.smtp.password=\n-provisioning.smtp.protocol=smtp\n-provisioning.smtp.defaultEncoding=UTF-8\n-provisioning.smtp.debug=false\n-# Add more properties starting with mail.smtp.* from\n-# https://javaee.github.io/javamail/docs/api/com/sun/mail/smtp/package-summary.html#properties\n-provisioning.smtp.javamailProperties[mail.smtp.connectiontimeout]=3000\n-provisioning.smtp.javamailProperties[mail.smtp.starttls.enable]=false\n+#########\n+# Email #\n+#########\n+spring.mail.host=none.syncope.apache.org\n+spring.mail.port=25\n+spring.mail.username=\n+spring.mail.password=\n+spring.mail.properties.mail.smtp.auth=false\n+spring.mail.properties.mail.smtp.starttls.enable=false\n \n ############\n # Security #"},{"sha":"e090f38c8b82702d487a91649133f891707bcd35","filename":"fit/core-reference/src/main/resources/core-embedded.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e817338a875a56633650f641ef9014d2f3a5bc6/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-embedded.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e817338a875a56633650f641ef9014d2f3a5bc6/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-embedded.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-embedded.properties?ref=9e817338a875a56633650f641ef9014d2f3a5bc6","patch":"@@ -71,5 +71,5 @@ provisioning.quartz.waitForJobsToCompleteOnShutdown=false\n provisioning.connIdLocation=${connid.location},\\\n connid://${testconnectorserver.key}@localhost:${testconnectorserver.port}\n \n-provisioning.smtp.host=localhost\n-provisioning.smtp.port=${testmail.smtpport}\n+spring.mail.host=localhost\n+spring.mail.port=${testmail.smtpport}"},{"sha":"4cff58885b842dbbd68a4edb7819862b4e985b99","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e817338a875a56633650f641ef9014d2f3a5bc6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e817338a875a56633650f641ef9014d2f3a5bc6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationITCase.java?ref=9e817338a875a56633650f641ef9014d2f3a5bc6","patch":"@@ -58,8 +58,7 @@ private static NotificationTO buildNotificationTO() {\n \n     @Test\n     public void read() {\n-        NotificationTO notificationTO = NOTIFICATION_SERVICE.read(\n-                \"9e2b911c-25de-4c77-bcea-b86ed9451050\");\n+        NotificationTO notificationTO = NOTIFICATION_SERVICE.read(\"9e2b911c-25de-4c77-bcea-b86ed9451050\");\n         assertNotNull(notificationTO);\n     }\n "},{"sha":"b10cf92dbd4ba3d72aea83a2e37642bff116f2aa","filename":"src/main/asciidoc/reference-guide/configuration/email.adoc","status":"modified","additions":19,"deletions":40,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e817338a875a56633650f641ef9014d2f3a5bc6/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Femail.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e817338a875a56633650f641ef9014d2f3a5bc6/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Femail.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Femail.adoc?ref=9e817338a875a56633650f641ef9014d2f3a5bc6","patch":"@@ -21,59 +21,38 @@\n The `core.properties` file holds the configuration options to enable the effective delivery of\n <<notifications,notification>> e-mails:\n \n-* `provisioning.smtp.host` - the mail server host, typically an SMTP host;\n-* `provisioning.smtp.port` - the mail server port;\n-* `provisioning.smtp.username` - (optional) the username for the account at the mail host;\n-* `provisioning.smtp.password` - (optional) the password for the account at the mail host;\n-* `provisioning.smtp.protocol` - the message transport protocol: `smtp` (default) and `smtps` are supported;\n-* `provisioning.smtp.defaultEncoding` - the default encoding to use for MIME messages;\n-* `provisioning.smtp.debug` - when `true`, enable the debugging of email processing including the handshake, authentication, delivery\n- and disconnection; in order for this setting to be effective, it is also required to add the following elements to the\n-`log4j2.xml` configuration file:\n-[source,xml]\n-<asyncLogger name=\"org.apache.syncope.core.provisioning.java.job.notification\"\n-             additivity=\"false\" level=\"DEBUG\">\n-  <appender-ref ref=\"mainFile\"/>\n-  <appender-ref ref=\"main\"/>\n-</asyncLogger>\n-<asyncLogger name=\"javax.mail\" additivity=\"false\" level=\"DEBUG\">\n-  <appender-ref ref=\"mainFile\"/>\n-  <appender-ref ref=\"main\"/>\n-</asyncLogger>\n-* `provisioning.smtp.javamailProperties[provisioning.smtp.javamailProperties[mail.smtp.starttls.enable]]` - when `true`, enable the use of the `STARTTLS` command to switch the connection to a\n+* `spring.mail.host` - the mail server host, typically an SMTP host;\n+* `spring.mail.port` - the mail server port;\n+* `spring.mail.username` - (optional) the username for the account at the mail host;\n+* `spring.mail.password` - (optional) the password for the account at the mail host;\n+* `spring.mail.properties.mail.smtp.auth` - when `true`, the configured `username` and `password` are sent to SMTP server;\n+* `spring.mail.properties.mail.smtp.starttls.enable` - when `true`, enable the use of the `STARTTLS` command to switch the connection to a\n TLS-protected connection before issuing any login commands;\n-* `provisioning.smtp.javamailProperties[provisioning.smtp.javamailProperties[mail.smtp.connectiontimeout]]` - the connection timeout value in milliseconds, to the mail host;\n \n All the https://javaee.github.io/javamail/docs/api/com/sun/mail/smtp/package-summary.html#properties[JavaMail(TM) properties^]\n-are available for usage.\n+are available for usage with prefix `spring.mail.properties.`.\n \n .Basic configuration, no authentication\n ====\n ....\n-provisioning.smtp.host=your.local.smtp.server\n-provisioning.smtp.port=25\n-provisioning.smtp.username=\n-provisioning.smtp.password=\n-provisioning.smtp.protocol=smtp\n-provisioning.smtp.defaultEncoding=UTF-8\n-provisioning.smtp.debug=false\n-provisioning.smtp.javamailProperties[mail.smtp.connectiontimeout]=3000\n-provisioning.smtp.javamailProperties[mail.smtp.starttls.enable]=false\n+spring.mail.host=your.local.smtp.server\n+spring.mail.port=25\n+spring.mail.username=\n+spring.mail.password=\n+spring.mail.properties.mail.smtp.auth=false\n+spring.mail.properties.mail.smtp.starttls.enable=false\n ....\n ====\n \n .STARTTLS configuration, with authentication\n ====\n ....\n-provisioning.smtp.host=smtp.gmail.com\n-provisioning.smtp.port=587\n-provisioning.smtp.username=your_username@gmail.com\n-provisioning.smtp.password=your_password\n-provisioning.smtp.protocol=smtp\n-provisioning.smtp.defaultEncoding=UTF-8\n-provisioning.smtp.debug=false\n-provisioning.smtp.javamailProperties[mail.smtp.connectiontimeout]=3000\n-provisioning.smtp.javamailProperties[mail.smtp.starttls.enable]=true\n+spring.mail.host=smtp.gmail.com\n+spring.mail.port=587\n+spring.mail.username=your_username@gmail.com\n+spring.mail.password=your_password\n+spring.mail.properties.mail.smtp.auth=true\n+spring.mail.properties.mail.smtp.starttls.enable=true\n ....\n ====\n "}]}