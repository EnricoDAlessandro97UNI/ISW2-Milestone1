{"sha":"ab4c623a3f6ccdbe03968235b843ec81a2d97b1f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFiNGM2MjNhM2Y2Y2NkYmUwMzk2ODIzNWI4NDNlYzgxYTJkOTdiMWY=","commit":{"author":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-06-23T15:36:16Z"},"committer":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-06-23T15:36:48Z"},"message":"SYNCOPE-1120 - Use the standard Bearer Authorization header for JWT tokens","tree":{"sha":"66f15e0a7a167fffe78c307c525c53338a8463ce","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/66f15e0a7a167fffe78c307c525c53338a8463ce"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"e76c59da537ba66f29bea9759e3488c9a7a0e936","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e76c59da537ba66f29bea9759e3488c9a7a0e936","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e76c59da537ba66f29bea9759e3488c9a7a0e936"}],"stats":{"total":66,"additions":46,"deletions":20},"files":[{"sha":"4a780a694747e9acc919873157c042c5a77215cc","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/BaseRestClient.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java?ref=ab4c623a3f6ccdbe03968235b843ec81a2d97b1f","patch":"@@ -19,6 +19,9 @@\n package org.apache.syncope.client.console.rest;\n \n import java.net.URI;\n+\n+import javax.ws.rs.core.HttpHeaders;\n+\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -76,7 +79,7 @@ protected static <E extends JAXRSService, T> T getObject(\n         webClient.accept(SyncopeConsoleSession.get().getMediaType()).to(location.toASCIIString(), false);\n         return webClient.\n                 header(RESTHeaders.DOMAIN, SyncopeConsoleSession.get().getDomain()).\n-                header(RESTHeaders.TOKEN, SyncopeConsoleSession.get().getJWT()).\n+                header(HttpHeaders.AUTHORIZATION, \"Bearer \" + SyncopeConsoleSession.get().getJWT()).\n                 get(resultClass);\n     }\n }"},{"sha":"c13fa77ebf64bd83797c71657aaed8f9fa02c105","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":16,"deletions":8,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=ab4c623a3f6ccdbe03968235b843ec81a2d97b1f","patch":"@@ -27,6 +27,7 @@\n import java.util.Map;\n import java.util.Set;\n import javax.ws.rs.core.EntityTag;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n@@ -107,18 +108,19 @@ protected void init(final AuthenticationHandler handler) {\n             restClientFactory.setPassword(((BasicAuthenticationHandler) handler).getPassword());\n \n             String jwt = getService(AccessTokenService.class).login().getHeaderString(RESTHeaders.TOKEN);\n-            restClientFactory.getHeaders().put(RESTHeaders.TOKEN, Collections.singletonList(jwt));\n+            restClientFactory.getHeaders().put(HttpHeaders.AUTHORIZATION, Collections.singletonList(\"Bearer \" + jwt));\n \n             restClientFactory.setUsername(null);\n             restClientFactory.setPassword(null);\n         } else if (handler instanceof JWTAuthenticationHandler) {\n             restClientFactory.getHeaders().put(\n-                    RESTHeaders.TOKEN, Collections.singletonList(((JWTAuthenticationHandler) handler).getJwt()));\n+                    HttpHeaders.AUTHORIZATION,\n+                    Collections.singletonList(\"Bearer \" + ((JWTAuthenticationHandler) handler).getJwt()));\n         }\n     }\n \n     protected void cleanup() {\n-        restClientFactory.getHeaders().remove(RESTHeaders.TOKEN);\n+        restClientFactory.getHeaders().remove(HttpHeaders.AUTHORIZATION);\n         restClientFactory.setUsername(null);\n         restClientFactory.setPassword(null);\n     }\n@@ -128,7 +130,7 @@ protected void cleanup() {\n      */\n     public void refresh() {\n         String jwt = getService(AccessTokenService.class).refresh().getHeaderString(RESTHeaders.TOKEN);\n-        restClientFactory.getHeaders().put(RESTHeaders.TOKEN, Collections.singletonList(jwt));\n+        restClientFactory.getHeaders().put(HttpHeaders.AUTHORIZATION, Collections.singletonList(\"Bearer \" + jwt));\n     }\n \n     /**\n@@ -186,16 +188,22 @@ public static OrderByClauseBuilder getOrderByClauseBuilder() {\n     }\n \n     /**\n-     * Returns the JWT in used by this instance, passed with the {@link RESTHeaders#TOKEN} header in all requests.\n-     * It can be null (in case {@link NoAuthenticationHandler} or {@link AnonymousAuthenticationHandler} were used).\n+     * Returns the JWT in used by this instance, passed with the {@link HttpHeaders#AUTHORIZATION} header\n+     * in all requests. It can be null (in case {@link NoAuthenticationHandler} or\n+     * {@link AnonymousAuthenticationHandler} were used).\n      *\n      * @return the JWT in used by this instance\n      */\n     public String getJWT() {\n-        List<String> headerValues = restClientFactory.getHeaders().get(RESTHeaders.TOKEN);\n-        return headerValues == null || headerValues.isEmpty()\n+        List<String> headerValues = restClientFactory.getHeaders().get(HttpHeaders.AUTHORIZATION);\n+        String header = headerValues == null || headerValues.isEmpty()\n                 ? null\n                 : headerValues.get(0);\n+        if (header != null && header.startsWith(\"Bearer \")) {\n+            return header.substring(\"Bearer \".length());\n+\n+        }\n+        return null;\n     }\n \n     /**"},{"sha":"1e5924b783fc8f0c9ebae2adbaae95385c5aa684","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=ab4c623a3f6ccdbe03968235b843ec81a2d97b1f","patch":"@@ -245,7 +245,7 @@ public SyncopeClient create() {\n \n     /**\n      * Builds client instance with the given credentials.\n-     * Such credentials will be used only to obtain a valid JWT in the {@link RESTHeaders#TOKEN} header;\n+     * Such credentials will be used only to obtain a valid JWT in the {@link HttpHeaders#AUTHORIZATION} header;\n      *\n      * @param username username\n      * @param password password\n@@ -256,11 +256,11 @@ public SyncopeClient create(final String username, final String password) {\n     }\n \n     /**\n-     * Builds client instance which will be passing the provided value in the {@link RESTHeaders#TOKEN}\n+     * Builds client instance which will be passing the provided value in the {@link HttpHeaders#AUTHORIZATION}\n      * request header.\n      *\n      * @param jwt value received after login, in the {@link RESTHeaders#TOKEN} response header\n-     * @return client instance which will be passing the provided value in the {{@link RESTHeaders#TOKEN}\n+     * @return client instance which will be passing the provided value in the {@link HttpHeaders#AUTHORIZATION}\n      * request header\n      */\n     public SyncopeClient create(final String jwt) {"},{"sha":"e5b13de0c8a57c4ec69d7a7fcd7157a8c900e169","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationFilter.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java?ref=ab4c623a3f6ccdbe03968235b843ec81a2d97b1f","patch":"@@ -23,9 +23,10 @@\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -39,7 +40,7 @@\n import org.springframework.web.filter.OncePerRequestFilter;\n \n /**\n- * Processes the JSON Web Token provided as {@link RESTHeaders#TOKEN} HTTP header, putting the result into the\n+ * Processes the JSON Web Token provided as {@link HttpHeaders#AUTHORIZATION} HTTP header, putting the result into the\n  * {@link SecurityContextHolder}.\n  */\n public class JWTAuthenticationFilter extends OncePerRequestFilter {\n@@ -84,12 +85,14 @@ protected void doFilterInternal(\n             final FilterChain chain)\n             throws ServletException, IOException {\n \n-        String stringToken = request.getHeader(RESTHeaders.TOKEN);\n-        if (stringToken == null) {\n+        String auth = request.getHeader(HttpHeaders.AUTHORIZATION);\n+        String[] parts = auth == null ? null : auth.split(\" \");\n+        if (parts == null || parts.length != 2 || !\"Bearer\".equals(parts[0])) {\n             chain.doFilter(request, response);\n             return;\n         }\n \n+        String stringToken = parts[1];\n         LOG.debug(\"JWT received: {}\", stringToken);\n \n         JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(stringToken);"},{"sha":"94d14f1977ea04ba622c4f2a888554ae8a8973c4","filename":"ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPServiceImpl.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPServiceImpl.java?ref=ab4c623a3f6ccdbe03968235b843ec81a2d97b1f","patch":"@@ -20,14 +20,15 @@\n \n import java.io.IOException;\n import java.io.OutputStream;\n+\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n import org.apache.syncope.core.logic.SAML2SPLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -68,13 +69,22 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n     @Override\n     public SAML2RequestTO createLogoutRequest(final String spEntityID) {\n         return logic.createLogoutRequest(\n-                messageContext.getHttpHeaders().getHeaderString(RESTHeaders.TOKEN),\n+                getJWTToken(),\n                 StringUtils.appendIfMissing(spEntityID, \"/\"));\n     }\n \n     @Override\n     public void validateLogoutResponse(final SAML2ReceivedResponseTO response) {\n-        logic.validateLogoutResponse(messageContext.getHttpHeaders().getHeaderString(RESTHeaders.TOKEN), response);\n+        logic.validateLogoutResponse(getJWTToken(), response);\n     }\n \n+    private String getJWTToken() {\n+        String auth = messageContext.getHttpHeaders().getHeaderString(HttpHeaders.AUTHORIZATION);\n+        String[] parts = auth == null ? null : auth.split(\" \");\n+        if (parts == null || parts.length != 2 || !\"Bearer\".equals(parts[0])) {\n+            return null;\n+        }\n+\n+        return parts[1];\n+    }\n }"},{"sha":"b58480203c9bff3b84e51ef4b3e8db4fa7d9bde2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab4c623a3f6ccdbe03968235b843ec81a2d97b1f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=ab4c623a3f6ccdbe03968235b843ec81a2d97b1f","patch":"@@ -104,6 +104,8 @@\n import org.junit.runners.MethodSorters;\n import org.springframework.jdbc.core.JdbcTemplate;\n \n+import com.google.common.net.HttpHeaders;\n+\n @FixMethodOrder(MethodSorters.JVM)\n public abstract class AbstractITCase {\n \n@@ -322,7 +324,7 @@ public <T> T getObject(final URI location, final Class<?> serviceClass, final Cl\n \n         return webClient.\n                 header(RESTHeaders.DOMAIN, adminClient.getDomain()).\n-                header(RESTHeaders.TOKEN, adminClient.getJWT()).\n+                header(HttpHeaders.AUTHORIZATION, \"Bearer \" + adminClient.getJWT()).\n                 get(resultClass);\n     }\n "}]}