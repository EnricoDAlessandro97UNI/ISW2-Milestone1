{"sha":"9d36c7f843f8a773452eb931fb90ed21f6d3d15a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlkMzZjN2Y4NDNmOGE3NzM0NTJlYjkzMWZiOTBlZDIxZjZkM2QxNWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-07-02T12:56:41Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-07-02T15:21:10Z"},"message":"[SYNCOPE-1329] Flexible configuration allowing both HMAC and RS_SHA for JWS","tree":{"sha":"24d9373d7d95c6db25b2ece97f3378ff58b669cd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/24d9373d7d95c6db25b2ece97f3378ff58b669cd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9d36c7f843f8a773452eb931fb90ed21f6d3d15a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9d36c7f843f8a773452eb931fb90ed21f6d3d15a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9d36c7f843f8a773452eb931fb90ed21f6d3d15a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a8fbcd2aa0fd28308243a3750a19672c9bce8da1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a8fbcd2aa0fd28308243a3750a19672c9bce8da1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a8fbcd2aa0fd28308243a3750a19672c9bce8da1"}],"stats":{"total":422,"additions":348,"deletions":74},"files":[{"sha":"327b39653fbf1ad3c07a0426adef4dc1ae1c43da","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=9d36c7f843f8a773452eb931fb90ed21f6d3d15a","patch":"@@ -28,7 +28,6 @@\n import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactProducer;\n-import org.apache.cxf.rs.security.jose.jws.JwsSignatureProvider;\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n import org.apache.cxf.rs.security.jose.jwt.JwtToken;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n@@ -39,6 +38,7 @@\n import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.spring.security.DefaultCredentialChecker;\n+import org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n@@ -54,7 +54,7 @@ public class AccessTokenDataBinderImpl implements AccessTokenDataBinder {\n     private String jwtIssuer;\n \n     @Autowired\n-    private JwsSignatureProvider jwsSignatureProvider;\n+    private AccessTokenJwsSignatureProvider jwsSignatureProvider;\n \n     @Autowired\n     private AccessTokenDAO accessTokenDAO;"},{"sha":"903d2c76225d49479d392f8d9620baec3a19ac31","filename":"core/provisioning-java/src/test/resources/provisioningTest.xml","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2FprovisioningTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2FprovisioningTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2FprovisioningTest.xml?ref=9d36c7f843f8a773452eb931fb90ed21f6d3d15a","patch":"@@ -44,22 +44,20 @@ under the License.\n   <bean id=\"jwsKey\" class=\"java.lang.String\">\n     <constructor-arg value=\"${jwsKey}\"/>\n   </bean>\n-  <bean id=\"jwsSignatureVerifier\" class=\"org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureVerifier\">\n-    <constructor-arg value=\"#{jwsKey.getBytes()}\" index=\"0\"/>\n-    <constructor-arg index=\"1\">\n-      <value type=\"org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm\">HS512</value>\n-    </constructor-arg>\n+  <bean id=\"accessTokenJwsSignatureVerifier\"\n+        class=\"org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureVerifier\">\n+    <property name=\"jwsAlgorithm\" value=\"${jwsAlgorithm}\"/>\n+    <property name=\"jwsKey\" value=\"${jwsKey}\"/>\n   </bean>\n-  <bean id=\"jwsSignatureProvider\" class=\"org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureProvider\">\n-    <constructor-arg value=\"#{jwsKey.getBytes()}\" index=\"0\"/>\n-    <constructor-arg index=\"1\">\n-      <value type=\"org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm\">HS512</value>\n-    </constructor-arg>\n+  <bean id=\"accessTokenJwsSignatureProvider\"\n+        class=\"org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureProvider\">\n+    <property name=\"jwsAlgorithm\" value=\"${jwsAlgorithm}\"/>\n+    <property name=\"jwsKey\" value=\"${jwsKey}\"/>\n   </bean>\n   <bean id=\"credentialChecker\" class=\"org.apache.syncope.core.spring.security.DefaultCredentialChecker\">\n-      <constructor-arg value=\"${jwsKey}\" index=\"0\"/>\n-      <constructor-arg value=\"${adminPassword}\" index=\"1\"/>\n-      <constructor-arg value=\"${anonymousKey}\" index=\"2\"/>\n+    <constructor-arg value=\"${jwsKey}\" index=\"0\"/>\n+    <constructor-arg value=\"${adminPassword}\" index=\"1\"/>\n+    <constructor-arg value=\"${anonymousKey}\" index=\"2\"/>\n   </bean>\n   \n </beans>"},{"sha":"eef5fcb6772a5a12a65226f0612e5e857ad69ca6","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/DefaultCredentialChecker.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultCredentialChecker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultCredentialChecker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultCredentialChecker.java?ref=9d36c7f843f8a773452eb931fb90ed21f6d3d15a","patch":"@@ -67,5 +67,4 @@ public void checkIsDefaultAnonymousKeyInUse() {\n                     + \"This must be changed to avoid a security breach!\");\n         }\n     }\n-\n }"},{"sha":"08715e1b468bd8b9d65f610e5e836c5518159d80","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeJWTSSOProvider.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java?ref=9d36c7f843f8a773452eb931fb90ed21f6d3d15a","patch":"@@ -25,7 +25,6 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n-import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n import org.apache.cxf.rs.security.jose.jws.JwsVerificationSignature;\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -34,6 +33,7 @@\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureVerifier;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -51,8 +51,8 @@ public class SyncopeJWTSSOProvider implements JWTSSOProvider {\n     @Resource(name = \"jwtIssuer\")\n     private String jwtIssuer;\n \n-    @Resource(name = \"syncopeJWTSSOProviderDelegate\")\n-    private JwsSignatureVerifier delegate;\n+    @Autowired\n+    private AccessTokenJwsSignatureVerifier delegate;\n \n     @Autowired\n     private UserDAO userDAO;\n@@ -101,5 +101,4 @@ public Pair<User, Set<SyncopeGrantedAuthority>> resolve(final JwtClaims jwtClaim\n \n         return Pair.of(user, authorities);\n     }\n-\n }"},{"sha":"383cf891932c2493fb0bd2b44af92bc690959080","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/jws/AccessTokenJwsSignatureProvider.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2Fjws%2FAccessTokenJwsSignatureProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2Fjws%2FAccessTokenJwsSignatureProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2Fjws%2FAccessTokenJwsSignatureProvider.java?ref=9d36c7f843f8a773452eb931fb90ed21f6d3d15a","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.security.jws;\n+\n+import java.security.KeyFactory;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n+import org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureProvider;\n+import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignature;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureProvider;\n+import org.apache.cxf.rs.security.jose.jws.PrivateKeyJwsSignatureProvider;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.security.crypto.codec.Base64;\n+\n+public class AccessTokenJwsSignatureProvider implements JwsSignatureProvider, InitializingBean {\n+\n+    private SignatureAlgorithm jwsAlgorithm;\n+\n+    private String jwsKey;\n+\n+    private JwsSignatureProvider delegate;\n+\n+    public void setJwsAlgorithm(final SignatureAlgorithm jwsAlgorithm) {\n+        this.jwsAlgorithm = jwsAlgorithm;\n+    }\n+\n+    public void setJwsKey(final String jwsKey) {\n+        this.jwsKey = jwsKey;\n+    }\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        if (jwsAlgorithm == null) {\n+            throw new IllegalArgumentException(\"An instance of \" + SignatureAlgorithm.class + \" is required\");\n+        }\n+\n+        if (SignatureAlgorithm.isPublicKeyAlgorithm(jwsAlgorithm)) {\n+            if (!jwsAlgorithm.getJwaName().startsWith(\"RS\")) {\n+                throw new IllegalArgumentException(jwsAlgorithm.getJavaName() + \" not supported.\");\n+            }\n+\n+            if (jwsKey == null || jwsKey.indexOf(':') == -1) {\n+                throw new IllegalArgumentException(\"A key pair is required, in the 'private:public' format\");\n+            }\n+\n+            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n+            PKCS8EncodedKeySpec keySpecPKCS8 = new PKCS8EncodedKeySpec(\n+                    Base64.decode(StringUtils.substringBefore(jwsKey, \":\").getBytes()));\n+            delegate = new PrivateKeyJwsSignatureProvider(kf.generatePrivate(keySpecPKCS8), jwsAlgorithm);\n+        } else {\n+            if (jwsKey == null) {\n+                throw new IllegalArgumentException(\"A shared key is required\");\n+            }\n+\n+            delegate = new HmacJwsSignatureProvider(jwsKey.getBytes(), jwsAlgorithm);\n+        }\n+    }\n+\n+    @Override\n+    public SignatureAlgorithm getAlgorithm() {\n+        return delegate.getAlgorithm();\n+    }\n+\n+    @Override\n+    public byte[] sign(final JwsHeaders headers, final byte[] content) {\n+        return delegate.sign(headers, content);\n+    }\n+\n+    @Override\n+    public JwsSignature createJwsSignature(final JwsHeaders headers) {\n+        return delegate.createJwsSignature(headers);\n+    }\n+}"},{"sha":"fe8db3ea946180e80c5cd4330efe9c2202e308ca","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/jws/AccessTokenJwsSignatureVerifier.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2Fjws%2FAccessTokenJwsSignatureVerifier.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2Fjws%2FAccessTokenJwsSignatureVerifier.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2Fjws%2FAccessTokenJwsSignatureVerifier.java?ref=9d36c7f843f8a773452eb931fb90ed21f6d3d15a","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.security.jws;\n+\n+import java.security.KeyFactory;\n+import java.security.spec.X509EncodedKeySpec;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n+import org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureVerifier;\n+import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n+import org.apache.cxf.rs.security.jose.jws.JwsVerificationSignature;\n+import org.apache.cxf.rs.security.jose.jws.PublicKeyJwsSignatureVerifier;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.security.crypto.codec.Base64;\n+\n+public class AccessTokenJwsSignatureVerifier implements JwsSignatureVerifier, InitializingBean {\n+\n+    private SignatureAlgorithm jwsAlgorithm;\n+\n+    private String jwsKey;\n+\n+    private JwsSignatureVerifier delegate;\n+\n+    public void setJwsAlgorithm(final SignatureAlgorithm jwsAlgorithm) {\n+        this.jwsAlgorithm = jwsAlgorithm;\n+    }\n+\n+    public void setJwsKey(final String jwsKey) {\n+        this.jwsKey = jwsKey;\n+    }\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        if (jwsAlgorithm == null) {\n+            throw new IllegalArgumentException(\"An instance of \" + SignatureAlgorithm.class + \" is required\");\n+        }\n+\n+        if (SignatureAlgorithm.isPublicKeyAlgorithm(jwsAlgorithm)) {\n+            if (!jwsAlgorithm.getJwaName().startsWith(\"RS\")) {\n+                throw new IllegalArgumentException(jwsAlgorithm.getJavaName() + \" not supported.\");\n+            }\n+\n+            if (jwsKey == null || jwsKey.indexOf(':') == -1) {\n+                throw new IllegalArgumentException(\"A key pair is required, in the 'private:public' format\");\n+            }\n+\n+            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n+            X509EncodedKeySpec keySpecX509 = new X509EncodedKeySpec(\n+                    Base64.decode(StringUtils.substringAfter(jwsKey, \":\").getBytes()));\n+            delegate = new PublicKeyJwsSignatureVerifier(kf.generatePublic(keySpecX509), jwsAlgorithm);\n+        } else {\n+            if (jwsKey == null) {\n+                throw new IllegalArgumentException(\"A shared key is required\");\n+            }\n+\n+            delegate = new HmacJwsSignatureVerifier(jwsKey.getBytes(), jwsAlgorithm);\n+        }\n+    }\n+\n+    @Override\n+    public SignatureAlgorithm getAlgorithm() {\n+        return delegate.getAlgorithm();\n+    }\n+\n+    @Override\n+    public boolean verify(final JwsHeaders headers, final String unsignedText, final byte[] signature) {\n+        return delegate.verify(headers, unsignedText, signature);\n+    }\n+\n+    @Override\n+    public JwsVerificationSignature createJwsVerificationSignature(final JwsHeaders headers) {\n+        return delegate.createJwsVerificationSignature(headers);\n+    }\n+}"},{"sha":"a68eed158b64c066bfbf22c0820c99d0526b97be","filename":"core/spring/src/main/resources/security.properties","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fspring%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fspring%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties?ref=9d36c7f843f8a773452eb931fb90ed21f6d3d15a","patch":"@@ -25,11 +25,9 @@ anonymousKey=${anonymousKey}\n \n secretKey=${secretKey}\n \n-jwsKey=${jwsKey}\n jwtIssuer=ApacheSyncope\n-\n-# Algorthim used to create and authenticate access token\n-jwtSignAlgo=HS512\n+jwsAlgorithm=HS512\n+jwsKey=${jwsKey}\n \n # default for LDAP / RFC2307 SSHA\n digester.saltIterations=1"},{"sha":"bec0d12c42f7e8aa2b7aeecbea6ea50c348ccea5","filename":"core/spring/src/main/resources/securityContext.xml","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=9d36c7f843f8a773452eb931fb90ed21f6d3d15a","patch":"@@ -55,17 +55,15 @@ under the License.\n     <constructor-arg value=\"${anonymousKey}\" index=\"2\"/>\n   </bean>\n \n-  <bean id=\"syncopeJWTSSOProviderDelegate\" class=\"org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureVerifier\">\n-    <constructor-arg value=\"#{jwsKey.getBytes()}\" index=\"0\"/>\n-    <constructor-arg index=\"1\">\n-      <value type=\"org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm\">${jwtSignAlgo}</value>\n-    </constructor-arg>\n+  <bean id=\"accessTokenJwsSignatureVerifier\"\n+        class=\"org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureVerifier\">\n+    <property name=\"jwsAlgorithm\" value=\"${jwsAlgorithm}\"/>\n+    <property name=\"jwsKey\" value=\"${jwsKey}\"/>\n   </bean>\n-  <bean id=\"jwsSignatureProvider\" class=\"org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureProvider\">\n-    <constructor-arg value=\"#{jwsKey.getBytes()}\" index=\"0\"/>\n-    <constructor-arg index=\"1\">\n-      <value type=\"org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm\">${jwtSignAlgo}</value>\n-    </constructor-arg>\n+  <bean id=\"accessTokenJwsSignatureProvider\"\n+        class=\"org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureProvider\">\n+    <property name=\"jwsAlgorithm\" value=\"${jwsAlgorithm}\"/>\n+    <property name=\"jwsKey\" value=\"${jwsKey}\"/>\n   </bean>\n   \n   <bean class=\"${passwordGenerator}\"/>"},{"sha":"5bfc3575146925cfc2f3bcffaf5a0ae0c650ff96","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=9d36c7f843f8a773452eb931fb90ed21f6d3d15a","patch":"@@ -152,7 +152,7 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {\n     @Autowired\n     private SAML2ReaderWriter saml2rw;\n \n-    @Resource(name = \"syncopeJWTSSOProviderDelegate\")\n+    @Resource(name = \"accessTokenJwsSignatureVerifier\")\n     private JwsSignatureVerifier jwsSignatureVerifier;\n \n     private void validateUrl(final String url) {"},{"sha":"fece58b502a2376baa362d689decf3f6c8ed5230","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/CustomJWTSSOProvider.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCustomJWTSSOProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCustomJWTSSOProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCustomJWTSSOProvider.java?ref=9d36c7f843f8a773452eb931fb90ed21f6d3d15a","patch":"@@ -97,5 +97,4 @@ public Pair<User, Set<SyncopeGrantedAuthority>> resolve(final JwtClaims jwtClaim\n \n         return null;\n     }\n-\n }"},{"sha":"4ce392d54ce8af5b2f4192cec88200a70c0769f4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=9d36c7f843f8a773452eb931fb90ed21f6d3d15a","patch":"@@ -43,6 +43,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n@@ -183,6 +184,8 @@ public abstract class AbstractITCase {\n \n     protected static String JWT_ISSUER;\n \n+    protected static SignatureAlgorithm JWS_ALGORITHM;\n+\n     protected static SyncopeClientFactoryBean clientFactory;\n \n     protected static SyncopeClient adminClient;\n@@ -271,8 +274,9 @@ public static void securitySetup() {\n \n             ANONYMOUS_UNAME = props.getProperty(\"anonymousUser\");\n             ANONYMOUS_KEY = props.getProperty(\"anonymousKey\");\n-            JWS_KEY = props.getProperty(\"jwsKey\");\n             JWT_ISSUER = props.getProperty(\"jwtIssuer\");\n+            JWS_ALGORITHM = SignatureAlgorithm.valueOf(props.getProperty(\"jwsAlgorithm\"));\n+            JWS_KEY = props.getProperty(\"jwsKey\");\n         } catch (Exception e) {\n             LOG.error(\"Could not read secretKey\", e);\n         }"},{"sha":"663544a649fd1d2097a6988a72a72be9488844a5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/JWTITCase.java","status":"modified","additions":54,"deletions":37,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java?ref=9d36c7f843f8a773452eb931fb90ed21f6d3d15a","patch":"@@ -23,6 +23,7 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeFalse;\n \n import java.security.AccessControlException;\n import java.text.ParseException;\n@@ -38,7 +39,6 @@\n import org.apache.cxf.rs.security.jose.common.JoseType;\n import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureProvider;\n-import org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureVerifier;\n import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactProducer;\n@@ -52,15 +52,37 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.AccessTokenService;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n+import org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureProvider;\n+import org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureVerifier;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.core.reference.CustomJWTSSOProvider;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n /**\n  * Some tests for JWT Tokens.\n  */\n public class JWTITCase extends AbstractITCase {\n \n+    private JwsSignatureProvider jwsSignatureProvider;\n+\n+    private JwsSignatureVerifier jwsSignatureVerifier;\n+\n+    @BeforeEach\n+    public void setupVerifier() throws Exception {\n+        AccessTokenJwsSignatureProvider atjsp = new AccessTokenJwsSignatureProvider();\n+        atjsp.setJwsAlgorithm(JWS_ALGORITHM);\n+        atjsp.setJwsKey(JWS_KEY);\n+        atjsp.afterPropertiesSet();\n+        this.jwsSignatureProvider = atjsp;\n+\n+        AccessTokenJwsSignatureVerifier atjsv = new AccessTokenJwsSignatureVerifier();\n+        atjsv.setJwsAlgorithm(JWS_ALGORITHM);\n+        atjsv.setJwsKey(JWS_KEY);\n+        atjsv.afterPropertiesSet();\n+        this.jwsSignatureVerifier = atjsv;\n+    }\n+\n     @Test\n     public void getJWTToken() throws ParseException {\n         // Get the token\n@@ -75,8 +97,6 @@ public void getJWTToken() throws ParseException {\n \n         // Validate the signature\n         JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(token);\n-        JwsSignatureVerifier jwsSignatureVerifier =\n-                new HmacJwsSignatureVerifier(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n         assertTrue(consumer.verifySignatureWith(jwsSignatureVerifier));\n \n         Date now = new Date();\n@@ -161,12 +181,10 @@ public void tokenValidation() throws ParseException {\n         jwtClaims.setExpiryTime(expiry.getTime().getTime() / 1000L);\n         jwtClaims.setNotBefore(currentTime);\n \n-        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n+        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, JWS_ALGORITHM);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n-        JwsSignatureProvider jwsSignatureProvider =\n-                new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n         String signed = producer.signWith(jwsSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n@@ -202,12 +220,10 @@ public void invalidIssuer() throws ParseException {\n         jwtClaims.setExpiryTime(expiry.getTime().getTime() / 1000L);\n         jwtClaims.setNotBefore(currentTime);\n \n-        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n+        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, JWS_ALGORITHM);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n-        JwsSignatureProvider jwsSignatureProvider =\n-                new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n         String signed = producer.signWith(jwsSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n@@ -248,12 +264,10 @@ public void expiredToken() throws ParseException {\n         jwtClaims.setExpiryTime((now.getTime() - 5000L) / 1000L);\n         jwtClaims.setNotBefore(currentTime);\n \n-        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n+        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, JWS_ALGORITHM);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n-        JwsSignatureProvider jwsSignatureProvider =\n-                new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n         String signed = producer.signWith(jwsSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n@@ -294,12 +308,10 @@ public void notBefore() throws ParseException {\n         jwtClaims.setExpiryTime(expiry.getTime().getTime() / 1000L);\n         jwtClaims.setNotBefore(currentTime + 60L);\n \n-        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n+        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, JWS_ALGORITHM);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n-        JwsSignatureProvider jwsSignatureProvider =\n-                new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n         String signed = producer.signWith(jwsSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n@@ -337,8 +349,8 @@ public void noneSignature() throws ParseException {\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n-        JwsSignatureProvider jwsSignatureProvider = new NoneJwsSignatureProvider();\n-        String signed = producer.signWith(jwsSignatureProvider);\n+        JwsSignatureProvider noneJwsSignatureProvider = new NoneJwsSignatureProvider();\n+        String signed = producer.signWith(noneJwsSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n         UserSelfService jwtUserSelfService = jwtClient.getService(UserSelfService.class);\n@@ -376,12 +388,10 @@ public void unknownId() throws ParseException {\n         jwtClaims.setExpiryTime(expiry.getTime().getTime() / 1000L);\n         jwtClaims.setNotBefore(currentTime);\n \n-        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n+        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, JWS_ALGORITHM);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n-        JwsSignatureProvider jwsSignatureProvider =\n-                new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n         String signed = producer.signWith(jwsSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n@@ -396,6 +406,8 @@ public void unknownId() throws ParseException {\n \n     @Test\n     public void thirdPartyToken() throws ParseException {\n+        assumeFalse(SignatureAlgorithm.isPublicKeyAlgorithm(JWS_ALGORITHM));\n+\n         // Create a new token\n         Date now = new Date();\n         long currentTime = now.getTime() / 1000L;\n@@ -412,13 +424,13 @@ public void thirdPartyToken() throws ParseException {\n         jwtClaims.setExpiryTime(expiry.getTime().getTime() / 1000L);\n         jwtClaims.setNotBefore(currentTime);\n \n-        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n+        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, JWS_ALGORITHM);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n-        JwsSignatureProvider jwsSignatureProvider =\n-                new HmacJwsSignatureProvider(CustomJWTSSOProvider.CUSTOM_KEY.getBytes(), SignatureAlgorithm.HS512);\n-        String signed = producer.signWith(jwsSignatureProvider);\n+        JwsSignatureProvider customSignatureProvider =\n+                new HmacJwsSignatureProvider(CustomJWTSSOProvider.CUSTOM_KEY.getBytes(), JWS_ALGORITHM);\n+        String signed = producer.signWith(customSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n \n@@ -429,6 +441,8 @@ public void thirdPartyToken() throws ParseException {\n \n     @Test\n     public void thirdPartyTokenUnknownUser() throws ParseException {\n+        assumeFalse(SignatureAlgorithm.isPublicKeyAlgorithm(JWS_ALGORITHM));\n+\n         // Create a new token\n         Date now = new Date();\n         long currentTime = now.getTime() / 1000L;\n@@ -445,13 +459,13 @@ public void thirdPartyTokenUnknownUser() throws ParseException {\n         jwtClaims.setExpiryTime(expiry.getTime().getTime() / 1000L);\n         jwtClaims.setNotBefore(currentTime);\n \n-        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n+        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, JWS_ALGORITHM);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n-        JwsSignatureProvider jwsSignatureProvider =\n-                new HmacJwsSignatureProvider(CustomJWTSSOProvider.CUSTOM_KEY.getBytes(), SignatureAlgorithm.HS512);\n-        String signed = producer.signWith(jwsSignatureProvider);\n+        JwsSignatureProvider customSignatureProvider =\n+                new HmacJwsSignatureProvider(CustomJWTSSOProvider.CUSTOM_KEY.getBytes(), JWS_ALGORITHM);\n+        String signed = producer.signWith(customSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n \n@@ -465,6 +479,8 @@ public void thirdPartyTokenUnknownUser() throws ParseException {\n \n     @Test\n     public void thirdPartyTokenUnknownIssuer() throws ParseException {\n+        assumeFalse(SignatureAlgorithm.isPublicKeyAlgorithm(JWS_ALGORITHM));\n+\n         // Create a new token\n         Date now = new Date();\n         long currentTime = now.getTime() / 1000L;\n@@ -481,13 +497,13 @@ public void thirdPartyTokenUnknownIssuer() throws ParseException {\n         jwtClaims.setExpiryTime(expiry.getTime().getTime() / 1000L);\n         jwtClaims.setNotBefore(currentTime);\n \n-        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n+        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, JWS_ALGORITHM);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n-        JwsSignatureProvider jwsSignatureProvider =\n-                new HmacJwsSignatureProvider(CustomJWTSSOProvider.CUSTOM_KEY.getBytes(), SignatureAlgorithm.HS512);\n-        String signed = producer.signWith(jwsSignatureProvider);\n+        JwsSignatureProvider customSignatureProvider =\n+                new HmacJwsSignatureProvider(CustomJWTSSOProvider.CUSTOM_KEY.getBytes(), JWS_ALGORITHM);\n+        String signed = producer.signWith(customSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n \n@@ -501,6 +517,8 @@ public void thirdPartyTokenUnknownIssuer() throws ParseException {\n \n     @Test\n     public void thirdPartyTokenBadSignature() throws ParseException {\n+        assumeFalse(SignatureAlgorithm.isPublicKeyAlgorithm(JWS_ALGORITHM));\n+\n         // Create a new token\n         Date now = new Date();\n \n@@ -516,13 +534,13 @@ public void thirdPartyTokenBadSignature() throws ParseException {\n         jwtClaims.setExpiryTime(expiry.getTime().getTime());\n         jwtClaims.setNotBefore(now.getTime());\n \n-        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n+        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, JWS_ALGORITHM);\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n-        JwsSignatureProvider jwsSignatureProvider = new HmacJwsSignatureProvider(\n-                (CustomJWTSSOProvider.CUSTOM_KEY + \"_\").getBytes(), SignatureAlgorithm.HS512);\n-        String signed = producer.signWith(jwsSignatureProvider);\n+        JwsSignatureProvider customSignatureProvider =\n+                new HmacJwsSignatureProvider((CustomJWTSSOProvider.CUSTOM_KEY + \"_\").getBytes(), JWS_ALGORITHM);\n+        String signed = producer.signWith(customSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n \n@@ -533,5 +551,4 @@ public void thirdPartyTokenBadSignature() throws ParseException {\n             // expected\n         }\n     }\n-\n }"},{"sha":"47bdbe707d48e9f32ae9fd5f1c15a3232e752016","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/jws.adoc","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fjws.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fjws.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fjws.adoc?ref=9d36c7f843f8a773452eb931fb90ed21f6d3d15a","patch":"@@ -0,0 +1,78 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+==== Control JWT signature\n+\n+As explained <<rest-authentication-and-authorization,above>>, the authentication process generates, in case of success,\n+a unique signed JWT (JSON Web Token). +\n+Such JWT values are signed by Apache Syncope according to the https://tools.ietf.org/html/rfc7515[JWS^]\n+(JSON Web Signature) specification.\n+\n+[[jws-hmac]]\n+===== Hash-based Message Authentication Code\n+\n+This is the default configuration, where Core and clients posses a shared secret, configured under `security.properties`\n+as the `jwsKey` property value.\n+\n+.Default JWS configuration\n+====\n+[source,properties]\n+----\n+jwsAlgorithm=HS512 // <1>\n+jwsKey=ZW7pRixehFuNUtnY5Se47IemgMryTzazPPJ9CGX5LTCmsOJpOgHAQEuPQeV9A28f // <2>\n+----\n+<1> Valid values are `HS256`, `HS384` and `HS512`\n+<2> Any alphanumeric value satisfying the https://tools.ietf.org/html/rfc7518#section-3.2[length requirement^] can be\n+used\n+====\n+\n+\n+[[jws-rsa]]\n+===== RSA Public-Key Cryptography\n+\n+This configuration requires to specify a key pair: the former key value, said _private_, must be shared with clients,\n+while the latter key value, said _public_, must be kept secret for internal Core usage.\n+\n+The commands below will generate the required key pair via OpenSSL and format their values for usage with\n+`security.properties`:\n+\n+[source,bash]\n+----\n+$ openssl genrsa -out private_key.pem 2048\n+$ openssl pkcs8 -topk8 -in private_key.pem -inform pem -out jws.privateKey -outform pem -nocrypt\n+$ openssl rsa -pubout -in private_key.pem -out jws.publicKey\n+$ echo `sed '1d;$d' jws.privateKey | awk '{printf \"%s\", $0}'`:`sed '1d;$d' jws.publicKey | awk '{printf \"%s\", $0}'`\n+----\n+\n+.JWS configuration with RSA PKCS#1\n+====\n+[source,properties]\n+----\n+jwsAlgorithm=RS512 // <1>\n+jwsKey=MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCdXTaAPRoIAvWjm5MskNtcGakkME4HEhZ8oQ2J8XNU29ZT7Qq5TP769/O8OH5Pb56mPULswYSocycrAARPzjAKpxr+YN7w2/zo5MsBRZsASgpCxnCeYLCWtJzmzY/YYlAHdsu3jj/4wuAcYozR1xE5e2gEj0BQ6Xz7NELhceEZpbXIeKSDolLdCKrVZ1vdD0q/HdjY2qeBACqeG8yYXsj2MiAMJY6df80ZCqpHkcD9mhfzqUo5EcWCD7XzcOJQRNUKkBEObemq//tt5NHFbWnBeGeTJBcyXV7Uqqbjnd6hwBBS1d6usAagGQ4RWDHPBMk02BdEFyrZjgJXM1C1iU/9AgMBAAECggEBAJpbnaNKzCcBqCuU5ld3vARqk1QRIeijoHUdkWc29TdO8LygLr22vgI1h9qf255V0dwlCWmtJVAKrGfse05A5TT912egY+8FCt7z1gFoYnN1LP11I3DnTTB299UZ3DiXrwKzT368xRlhJm4RaSpIePfWiiC215LGhTbve48iongBXzkpzFYe1SCV1FmNl5Px6FE3C9GcTrFpe+rqVcIVrTLZ95+JDF4/YLgTRccW8V/YO+4OtqUo+vt8tckDGhrHrfwgTo53kxDQttecB4AryDg1eUe8vPMx1+yJz8VFwx0yaUa5fqEYlxPehRQiVJi0+YMosRqKtcm1mLxoGcwSyo0CgYEAynhB/FM9DnARwg/PsE/AuXVpXlxPU5F+shpYX2sF3rItTD4EWFr/glo26LT/MLw2ckNkLT11yAWdR8hAzVZ48Ly3Ur8Fi88iInLPEixunBIsPcR3dI2UoI9dswnTM+H/Z83yQ16VWGjtE3437LWSXBHEw/am9W9pArEunt3TQz8CgYEAxvgS7BAokIqASi0zBpmyogRVHGs0eC3mMWLG+t5VXJ5M1z1pV9dOuInnI29wJqBscefueOPcT6mNJngW/kHlcGGOxij+hRUnAdVltTod4CJ3Q/IyM6h/FzunEeumZyZ1BW3G5KTcpegcBquUW6impyJbnUvKV4p9rpLTEBooKcMCgYEAhB1skUWPdbhTHhpLH3UrANlIZDY/3Pv3fCgMulaPgf0p6bIeC7l1OI29fqN8UUS/Elg/KfYMwPRI6OoWvuZKDGxYAzp6V/xU/b2EuQsdMeH51GQ6vmcUMKDcN1OV6SjzC70q9CLnuMTezfVycJcaZdGCX4y27ThBgWw0S53bmOkCgYAdCHfiYF068irUKBJJBUZuo8kzk2UdoDz1ud8lHipAkIzP35MukSlYfi7vGcS4rjIE0P4YP8+XBDungGCCi2UKaAHoYnT5QGPnvZbQwgE4Am96x62RoiWhYz/2uncWmCL9Ps6F8JSN1Pe59XF5int+6eGKa1PEQF4kiiIoOFjh9wKBgG6XXGl84fBaOaTsCPu+oQcAAp1GzweSy4l1Y1L71YvbxU1bs5338vgiH5OeUA4d5w0Ei9d/bSw0PWV4aACWWGGclLhzv8ia6bEWqt0TskUiUJVzgTXWp3ojpsP/QE36Ty+uWWqckBXv6dnEXEgrLqzbA6qTAohSSFjV4FAjxBxa:MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnV02gD0aCAL1o5uTLJDbXBmpJDBOBxIWfKENifFzVNvWU+0KuUz++vfzvDh+T2+epj1C7MGEqHMnKwAET84wCqca/mDe8Nv86OTLAUWbAEoKQsZwnmCwlrSc5s2P2GJQB3bLt44/+MLgHGKM0dcROXtoBI9AUOl8+zRC4XHhGaW1yHikg6JS3Qiq1Wdb3Q9Kvx3Y2NqngQAqnhvMmF7I9jIgDCWOnX/NGQqqR5HA/ZoX86lKORHFgg+183DiUETVCpARDm3pqv/7beTRxW1pwXhnkyQXMl1e1Kqm453eocAQUtXerrAGoBkOEVgxzwTJNNgXRBcq2Y4CVzNQtYlP/QIDAQAB // <2>\n+----\n+<1> Valid values are `RS256`, `RS384` and `RS512`\n+<2> Value is obtained by the commands above; the public key value is the string after the `:` sign, e.g.\n+```\n+QB3bLt44/+MLgHGKM0dcROXtoBI9AUOl8+zRC4XHhGaW1yHikg6JS3Qiq1Wdb3Q9Kvx3Y2NqngQAqnhvMmF7I9jIgDCWOnX/NGQqqR5HA/ZoX86lKORHFgg+183DiUETVCpARDm3pqv/7beTRxW1pwXhnkyQXMl1e1Kqm453eocAQUtXerrAGoBkOEVgxzwTJNNgXRBcq2Y4CVzNQtYlP/QIDAQAB\n+``` \n+====\n+\n+[TIP]\n+Longer RSA keys offer stronger protection against cracking. The JWS specification suggests at least 2048 bits.\n+Please consider that higher CPU usage is involved with longer keys."},{"sha":"fa9353db7d5e916a1811a9857f299a543a427721","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/systemadministration.adoc","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fsystemadministration.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d36c7f843f8a773452eb931fb90ed21f6d3d15a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fsystemadministration.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fsystemadministration.adoc?ref=9d36c7f843f8a773452eb931fb90ed21f6d3d15a","patch":"@@ -74,4 +74,6 @@ include::emailconfiguration.adoc[]\n \n include::keystore.adoc[]\n \n+include::jws.adoc[]\n+\n include::configurationparameters.adoc[]"}]}