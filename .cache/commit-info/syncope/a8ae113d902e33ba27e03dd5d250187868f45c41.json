{"sha":"a8ae113d902e33ba27e03dd5d250187868f45c41","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE4YWUxMTNkOTAyZTMzYmEyN2UwM2RkNWQyNTAxODc4NjhmNDVjNDE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-04-05T08:17:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-04-05T08:17:26Z"},"message":"[SYNCOPE-1293] Explicitly allow token Vs  comparison","tree":{"sha":"91cd0e913d1d1a7e2f4c0d9db88b8b8330890fd7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/91cd0e913d1d1a7e2f4c0d9db88b8b8330890fd7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a8ae113d902e33ba27e03dd5d250187868f45c41","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a8ae113d902e33ba27e03dd5d250187868f45c41","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a8ae113d902e33ba27e03dd5d250187868f45c41","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a8ae113d902e33ba27e03dd5d250187868f45c41/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"95ee2ffe810336f3bf785e2d231fa15e71630919","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/95ee2ffe810336f3bf785e2d231fa15e71630919","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/95ee2ffe810336f3bf785e2d231fa15e71630919"}],"stats":{"total":40,"additions":30,"deletions":10},"files":[{"sha":"9103ba6d252e82a1550df2917e5f50299d6ccf81","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8ae113d902e33ba27e03dd5d250187868f45c41/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8ae113d902e33ba27e03dd5d250187868f45c41/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=a8ae113d902e33ba27e03dd5d250187868f45c41","patch":"@@ -175,7 +175,7 @@ protected void populate() {\n \n             @Override\n             protected List<String> load() {\n-                return SearchableFields.get(typeKind);\n+                return SearchableFields.get(typeKind.getTOClass());\n             }\n         };\n "},{"sha":"c5102a48caf9bfbe30a56bae116237690f299e98","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SearchableFields.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8ae113d902e33ba27e03dd5d250187868f45c41/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8ae113d902e33ba27e03dd5d250187868f45c41/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java?ref=a8ae113d902e33ba27e03dd5d250187868f45c41","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n public final class SearchableFields {\n \n@@ -42,19 +41,15 @@ public final class SearchableFields {\n     private static final Set<String> ANY_FIELDS = new HashSet<>();\n \n     static {\n-        ANY_FIELDS.addAll(SearchableFields.get(UserTO.class));\n-        ANY_FIELDS.addAll(SearchableFields.get(GroupTO.class));\n-        ANY_FIELDS.addAll(SearchableFields.get(AnyObjectTO.class));\n+        ANY_FIELDS.addAll(get(UserTO.class));\n+        ANY_FIELDS.addAll(get(GroupTO.class));\n+        ANY_FIELDS.addAll(get(AnyObjectTO.class));\n     }\n \n     public static boolean contains(final String schema) {\n         return ANY_FIELDS.contains(schema);\n     }\n \n-    public static List<String> get(final AnyTypeKind anyTypeKind) {\n-        return get(anyTypeKind.getTOClass());\n-    }\n-\n     public static List<String> get(final Class<? extends AnyTO> anyRef) {\n         final List<String> fieldNames = new ArrayList<>();\n "},{"sha":"468321d8082eba7467f8f76cbf8d6b9ea7a75cb9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8ae113d902e33ba27e03dd5d250187868f45c41/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8ae113d902e33ba27e03dd5d250187868f45c41/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=a8ae113d902e33ba27e03dd5d250187868f45c41","patch":"@@ -194,7 +194,9 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                             && leaf.getAttributeCond().getType() == AttributeCond.Type.ISNULL) {\n \n                         leaf.getAttributeCond().setType(AttributeCond.Type.ISNOTNULL);\n-                    } else if (leaf.getAnyCond() != null && leaf.getAnyCond().getType() == AnyCond.Type.ISNULL) {\n+                    } else if (leaf.getAnyCond() != null\n+                            && leaf.getAnyCond().getType() == AttributeCond.Type.ISNULL) {\n+\n                         leaf.getAnyCond().setType(AttributeCond.Type.ISNOTNULL);\n                     } else {\n                         leaf = SearchCond.getNotLeafCond(leaf);\n@@ -226,6 +228,20 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                 throw new IllegalArgumentException(String.format(\"Condition type %s is not supported\", ct.name()));\n         }\n \n+        // SYNCOPE-1293: explicitly re-process to allow 'token==$null' or 'token!=$null'\n+        if (leaf.getAttributeCond() != null\n+                && \"token\".equals(leaf.getAttributeCond().getSchema())\n+                && (leaf.getAttributeCond().getType() == AttributeCond.Type.ISNULL\n+                || leaf.getAttributeCond().getType() == AttributeCond.Type.ISNOTNULL)\n+                && leaf.getAttributeCond().getExpression() == null) {\n+\n+            AnyCond tokenCond = new AnyCond();\n+            tokenCond.setSchema(leaf.getAttributeCond().getSchema());\n+            tokenCond.setType(leaf.getAttributeCond().getType());\n+            tokenCond.setExpression(null);\n+            leaf = SearchCond.getLeafCond(tokenCond);\n+        }\n+\n         return leaf;\n     }\n "},{"sha":"c37c1c77d3cae70063e6b4f2c562323047270005","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8ae113d902e33ba27e03dd5d250187868f45c41/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8ae113d902e33ba27e03dd5d250187868f45c41/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=a8ae113d902e33ba27e03dd5d250187868f45c41","patch":"@@ -43,12 +43,14 @@\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserService;\n@@ -275,6 +277,9 @@ public void passwordReset() {\n         UserTO read = authClient.self().getRight();\n         assertNotNull(read);\n \n+        // SYNCOPE-1293:get users with token not null before requesting password reset\n+        PagedResult<UserTO> before = userService.search(new AnyQuery.Builder().fiql(\"token!=$null\").build());\n+\n         // 3. request password reset (as anonymous) providing the expected security answer\n         SyncopeClient anonClient = clientFactory.create();\n         try {\n@@ -285,6 +290,10 @@ public void passwordReset() {\n         }\n         anonClient.getService(UserSelfService.class).requestPasswordReset(user.getUsername(), \"Rossi\");\n \n+        // SYNCOPE-1293:get users with token not null before requesting password reset\n+        PagedResult<UserTO> after = userService.search(new AnyQuery.Builder().fiql(\"token!=$null\").build());\n+        assertEquals(before.getTotalCount() + 1, after.getTotalCount());\n+\n         // 4. get token (normally sent via e-mail, now reading as admin)\n         String token = userService.read(read.getKey()).getToken();\n         assertNotNull(token);"}]}