{"sha":"8a6ca9da74b9de016193cce9111ad626e2ffaba5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhhNmNhOWRhNzRiOWRlMDE2MTkzY2NlOTExMWFkNjI2ZTJmZmFiYTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-19T10:41:42Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-19T10:41:42Z"},"message":"Merge from 1_0_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1400035 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aa8e762a0d010c792f91ab4b2405d2824042e085","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/aa8e762a0d010c792f91ab4b2405d2824042e085"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8a6ca9da74b9de016193cce9111ad626e2ffaba5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a6ca9da74b9de016193cce9111ad626e2ffaba5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8a6ca9da74b9de016193cce9111ad626e2ffaba5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a6ca9da74b9de016193cce9111ad626e2ffaba5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3a6ebd3f21280e78a5f50d87f9f5741478c822a5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3a6ebd3f21280e78a5f50d87f9f5741478c822a5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3a6ebd3f21280e78a5f50d87f9f5741478c822a5"}],"stats":{"total":130,"additions":70,"deletions":60},"files":[{"sha":"b9eb6f5d519869f00396589a7b280b0d8cec24a1","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncopeUserValidator.java","status":"modified","additions":30,"deletions":21,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a6ca9da74b9de016193cce9111ad626e2ffaba5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a6ca9da74b9de016193cce9111ad626e2ffaba5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java?ref=8a6ca9da74b9de016193cce9111ad626e2ffaba5","patch":"@@ -58,39 +58,48 @@ public void initialize(final SyncopeUserCheck constraintAnnotation) {\n \n     @Override\n     public boolean isValid(final SyncopeUser object, final ConstraintValidatorContext context) {\n-\n         context.disableDefaultConstraintViolation();\n \n         // ------------------------------\n         // Verify password policies\n         // ------------------------------\n         LOG.debug(\"Password Policy enforcement\");\n \n-        try {\n-            for (Policy policy : getPasswordPolicies(object)) {\n-                // clearPassword must exist during creation/password update\n-                final String password = object.getClearPassword();\n-\n-                // evaluate/enforce only during creation or password update\n-                if (password != null) {\n+        if (object.getClearPassword() != null) {\n+            try {\n+                int maxPPSpecHistory = 0;\n+                for (Policy policy : getPasswordPolicies(object)) {\n                     // evaluate policy\n-                    final PasswordPolicySpec passwordPolicy = evaluator.evaluate(policy, object);\n-\n+                    final PasswordPolicySpec ppSpec = evaluator.evaluate(policy, object);\n                     // enforce policy\n-                    ppEnforcer.enforce(passwordPolicy, policy.getType(), password);\n+                    ppEnforcer.enforce(ppSpec, policy.getType(), object.getClearPassword());\n+\n+                    if (ppSpec.getHistoryLength() > maxPPSpecHistory) {\n+                        maxPPSpecHistory = ppSpec.getHistoryLength();\n+                    }\n                 }\n-            }\n-        } catch (Exception e) {\n-            LOG.debug(\"Invalid password\");\n \n-            context.buildConstraintViolationWithTemplate(e.getMessage()).addNode(\n-                    EntityViolationType.InvalidPassword.toString()).addConstraintViolation();\n+                // update user's password history with encrypted password\n+                if (maxPPSpecHistory > 0 && object.getPassword() != null) {\n+                    object.getPasswordHistory().add(object.getPassword());\n+                }\n+                // keep only the last maxPPSpecHistory items in user's password history\n+                if (maxPPSpecHistory < object.getPasswordHistory().size()) {\n+                    for (int i = 0; i < object.getPasswordHistory().size() - maxPPSpecHistory; i++) {\n+                        object.getPasswordHistory().remove(i);\n+                    }\n+                }\n+            } catch (Exception e) {\n+                LOG.debug(\"Invalid password\");\n \n-            return false;\n-        } finally {\n-            // password has been validated, let's remove its\n-            // clear version\n-            object.removeClearPassword();\n+                context.buildConstraintViolationWithTemplate(e.getMessage()).addNode(\n+                        EntityViolationType.InvalidPassword.toString()).addConstraintViolation();\n+\n+                return false;\n+            } finally {\n+                // password has been validated, let's remove its clear version\n+                object.removeClearPassword();\n+            }\n         }\n         // ------------------------------\n "},{"sha":"caa9bbda8c2c3a8f83709044aa08879e3eb49c2c","filename":"core/src/main/java/org/apache/syncope/core/policy/PolicyEvaluator.java","status":"modified","additions":15,"deletions":27,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a6ca9da74b9de016193cce9111ad626e2ffaba5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a6ca9da74b9de016193cce9111ad626e2ffaba5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java?ref=8a6ca9da74b9de016193cce9111ad626e2ffaba5","patch":"@@ -18,19 +18,18 @@\n  */\n package org.apache.syncope.core.policy;\n \n-import java.util.ArrayList;\n import java.util.List;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.BeanUtils;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.Policy;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.types.AbstractPolicySpec;\n import org.apache.syncope.types.AccountPolicySpec;\n import org.apache.syncope.types.PasswordPolicySpec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.stereotype.Component;\n \n @Component\n public class PolicyEvaluator {\n@@ -51,45 +50,34 @@ public <T extends AbstractPolicySpec> T evaluate(final Policy policy, final Abst\n             switch (policy.getType()) {\n                 case PASSWORD:\n                 case GLOBAL_PASSWORD:\n-                    final PasswordPolicySpec pspec = policy.getSpecification();\n-                    final PasswordPolicySpec passwordPolicy = new PasswordPolicySpec();\n+                    final PasswordPolicySpec ppSpec = policy.getSpecification();\n+                    final PasswordPolicySpec evaluatedPPSpec = new PasswordPolicySpec();\n \n-                    BeanUtils.copyProperties(pspec, passwordPolicy, new String[]{\"schemasNotPermitted\"});\n+                    BeanUtils.copyProperties(ppSpec, evaluatedPPSpec, new String[]{\"schemasNotPermitted\"});\n \n-                    for (String schema : pspec.getSchemasNotPermitted()) {\n+                    for (String schema : ppSpec.getSchemasNotPermitted()) {\n                         attribute = attributable.getAttribute(schema);\n                         if (attribute != null) {\n                             values = attribute.getValuesAsStrings();\n                             if (values != null && !values.isEmpty()) {\n-                                passwordPolicy.getWordsNotPermitted().add(values.get(0));\n+                                evaluatedPPSpec.getWordsNotPermitted().add(values.get(0));\n                             }\n                         }\n                     }\n \n                     // Password history verification and update\n \n                     if (!(attributable instanceof SyncopeUser)) {\n-                        LOG.error(\"Cannot check previous passwords. attributable is not a user object: \" + attributable.getClass().toString());\n-                        result = (T) passwordPolicy;\n+                        LOG.error(\"Cannot check previous passwords. attributable is not a user object: {}\",\n+                                attributable.getClass().getName());\n+                        result = (T) evaluatedPPSpec;\n                         break;\n                     }\n                     SyncopeUser user = (SyncopeUser) attributable;\n-                    final String password = user.getPassword();\n-                    final List<String> passwordHistory = user.getPasswordHistory();\n-\n-                    if (user.verifyPasswordHistory(user.getClearPassword(), pspec.getHistoryLength())) {\n-                        passwordPolicy.getWordsNotPermitted().add(user.getClearPassword());\n-                    } else {\n-                        if (pspec.getHistoryLength() > 0 && password != null) {\n-                            passwordHistory.add(password);\n-                        }\n-                        if (pspec.getHistoryLength() < passwordHistory.size()) {\n-                            for (int i = 0; i < passwordHistory.size() - pspec.getHistoryLength(); i++) {\n-                                passwordHistory.remove(i);\n-                            }\n-                        }\n+                    if (user.verifyPasswordHistory(user.getClearPassword(), ppSpec.getHistoryLength())) {\n+                        evaluatedPPSpec.getWordsNotPermitted().add(user.getClearPassword());\n                     }\n-                    result = (T) passwordPolicy;\n+                    result = (T) evaluatedPPSpec;\n                     break;\n                 case ACCOUNT:\n                 case GLOBAL_ACCOUNT:"},{"sha":"0a2b6c149529bab10df6f2e7258b133174949bfa","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/MembershipTest.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a6ca9da74b9de016193cce9111ad626e2ffaba5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a6ca9da74b9de016193cce9111ad626e2ffaba5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java?ref=8a6ca9da74b9de016193cce9111ad626e2ffaba5","patch":"@@ -18,9 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.core.persistence.dao.RoleDAO;\n-import org.apache.syncope.core.persistence.dao.MembershipDAO;\n import static org.junit.Assert.*;\n \n import java.util.List;\n@@ -47,7 +44,7 @@ public class MembershipTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<Membership> list = membershipDAO.findAll();\n-        assertEquals(6, list.size());\n+        assertEquals(7, list.size());\n     }\n \n     @Test"},{"sha":"c80945e98bdeeff1d3f53aba6898c1022a28c8dd","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/RoleTest.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a6ca9da74b9de016193cce9111ad626e2ffaba5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a6ca9da74b9de016193cce9111ad626e2ffaba5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java?ref=8a6ca9da74b9de016193cce9111ad626e2ffaba5","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import org.apache.syncope.core.persistence.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.dao.RoleDAO;\n import static org.junit.Assert.*;\n \n import java.util.List;\n@@ -43,12 +41,12 @@ public class RoleTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<SyncopeRole> list = roleDAO.findAll();\n-        assertEquals(\"did not get expected number of roles \", 13, list.size());\n+        assertEquals(\"did not get expected number of roles \", 14, list.size());\n     }\n \n     @Test\n     public void findChildren() {\n-        assertEquals(2, roleDAO.findChildren(4L).size());\n+        assertEquals(3, roleDAO.findChildren(4L).size());\n     }\n \n     @Test"},{"sha":"ceca468aca4d40d0fb5387d048292cae4539c148","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a6ca9da74b9de016193cce9111ad626e2ffaba5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a6ca9da74b9de016193cce9111ad626e2ffaba5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=8a6ca9da74b9de016193cce9111ad626e2ffaba5","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n-import org.apache.syncope.core.persistence.dao.UserDAO;\n import static org.junit.Assert.*;\n \n import java.util.Date;\n@@ -119,7 +117,7 @@ public void findById() {\n         assertNotNull(\"did not find expected user\", user);\n         user = userDAO.find(3L);\n         assertNotNull(\"did not find expected user\", user);\n-        user = userDAO.find(5L);\n+        user = userDAO.find(6L);\n         assertNull(\"found user but did not expect it\", user);\n     }\n \n@@ -129,7 +127,7 @@ public void findByUsername() {\n         assertNotNull(\"did not find expected user\", user);\n         user = userDAO.find(\"user3\");\n         assertNotNull(\"did not find expected user\", user);\n-        user = userDAO.find(\"user5\");\n+        user = userDAO.find(\"user6\");\n         assertNull(\"found user but did not expect it\", user);\n     }\n \n@@ -189,4 +187,14 @@ public void issue237() {\n         SyncopeUser actual = userDAO.save(user);\n         assertNotNull(actual);\n     }\n+\n+    @Test\n+    public void issueSYNCOPE226() {\n+        SyncopeUser user = userDAO.find(5L);\n+\n+        user.setPassword(\"123password\", CipherAlgorithm.AES, 0);\n+\n+        SyncopeUser actual = userDAO.save(user);\n+        assertNotNull(actual);\n+    }\n }"},{"sha":"66dd69ac8734c81f004c319c50e341396a784ea0","filename":"core/src/test/resources/content.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a6ca9da74b9de016193cce9111ad626e2ffaba5/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a6ca9da74b9de016193cce9111ad626e2ffaba5/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=8a6ca9da74b9de016193cce9111ad626e2ffaba5","patch":"@@ -40,6 +40,7 @@ under the License.\n   <Policy DTYPE=\"AccountPolicy\" id=\"5\" description=\"global account policy\" type=\"GLOBAL_ACCOUNT\" specification=\"%3Corg.apache.syncope.types.AccountPolicySpec%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E0%3C%2FminLength%3E%0A++%3CallUpperCase%3Efalse%3C%2FallUpperCase%3E%0A++%3CallLowerCase%3Efalse%3C%2FallLowerCase%3E%0A++%3CpropagateSuspension%3Efalse%3C%2FpropagateSuspension%3E%0A++%3CpermittedLoginRetries%3E0%3C%2FpermittedLoginRetries%3E%0A%3C%2Forg.apache.syncope.types.AccountPolicySpec%3E\"/>\n   <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" specification=\"%3Corg.apache.syncope.types.AccountPolicySpec%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E4%3C%2FminLength%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A++%3CallUpperCase%3Efalse%3C%2FallUpperCase%3E%0A++%3CallLowerCase%3Efalse%3C%2FallLowerCase%3E%0A++%3CpropagateSuspension%3Efalse%3C%2FpropagateSuspension%3E%0A++%3CpermittedLoginRetries%3E3%3C%2FpermittedLoginRetries%3E%0A%3C%2Forg.apache.syncope.types.AccountPolicySpec%3E\"/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"7\" description=\"sync policy 1\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.types.SyncPolicySpec%2F%3E\"/>\n+  <Policy DTYPE=\"PasswordPolicy\" id=\"8\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3Corg.apache.syncope.types.PasswordPolicySpec%3E%0A++%3ChistoryLength%3E0%3C%2FhistoryLength%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E10%3C%2FminLength%3E%0A++%3CnonAlphanumericRequired%3Efalse%3C%2FnonAlphanumericRequired%3E%0A++%3CalphanumericRequired%3Efalse%3C%2FalphanumericRequired%3E%0A++%3CdigitRequired%3Etrue%3C%2FdigitRequired%3E%0A++%3ClowercaseRequired%3Efalse%3C%2FlowercaseRequired%3E%0A++%3CuppercaseRequired%3Efalse%3C%2FuppercaseRequired%3E%0A++%3CmustStartWithDigit%3Efalse%3C%2FmustStartWithDigit%3E%0A++%3CmustntStartWithDigit%3Efalse%3C%2FmustntStartWithDigit%3E%0A++%3CmustEndWithDigit%3Efalse%3C%2FmustEndWithDigit%3E%0A++%3CmustntEndWithDigit%3Efalse%3C%2FmustntEndWithDigit%3E%0A++%3CmustStartWithNonAlpha%3Efalse%3C%2FmustStartWithNonAlpha%3E%0A++%3CmustStartWithAlpha%3Efalse%3C%2FmustStartWithAlpha%3E%0A++%3CmustntStartWithNonAlpha%3Efalse%3C%2FmustntStartWithNonAlpha%3E%0A++%3CmustntStartWithAlpha%3Efalse%3C%2FmustntStartWithAlpha%3E%0A++%3CmustEndWithNonAlpha%3Efalse%3C%2FmustEndWithNonAlpha%3E%0A++%3CmustEndWithAlpha%3Efalse%3C%2FmustEndWithAlpha%3E%0A++%3CmustntEndWithNonAlpha%3Efalse%3C%2FmustntEndWithNonAlpha%3E%0A++%3CmustntEndWithAlpha%3Efalse%3C%2FmustntEndWithAlpha%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A%3C%2Forg.apache.syncope.types.PasswordPolicySpec%3E\"/>\n     \n   <SyncopeUser id=\"1\" workflowId=\"0\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                username=\"user1\" creationDate=\"2010-10-20 11:00:00\"/>\n@@ -49,6 +50,8 @@ under the License.\n                username=\"user3\" creationDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeUser id=\"4\" workflowId=\"0\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                username=\"user4\" creationDate=\"2010-10-20 11:00:00\"/>\n+  <SyncopeUser id=\"5\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"\n+               username=\"user5\" creationDate=\"2010-10-20 11:00:00\"/>\n \n   <SyncopeRole id=\"1\" name=\"root\"/>\n   <SyncopeRole id=\"2\" name=\"child\" parent_id=\"1\"/>\n@@ -77,13 +80,20 @@ under the License.\n   <SyncopeRole id=\"11\" name=\"roleForWorkflowOptIn\" parent_id=\"1\"/>\n   <SyncopeRole id=\"12\" name=\"aRoleForPropagation\" parent_id=\"1\"/>\n   <SyncopeRole id=\"13\" name=\"bRoleForPropagation\" parent_id=\"1\"/>\n+  <SyncopeRole id=\"14\"\n+               name=\"artDirector\" parent_id=\"4\"\n+               inheritAttributes=\"1\" inheritDerivedAttributes=\"1\" inheritVirtualAttributes=\"1\"\n+               inheritPasswordPolicy=\"0\" inheritAccountPolicy=\"0\"\n+               passwordPolicy_id=\"8\"\n+               accountPolicy_id=\"6\"/>\n \n   <Membership id=\"1\" syncopeUser_id=\"1\" syncopeRole_id=\"1\"/>\n   <Membership id=\"2\" syncopeUser_id=\"2\" syncopeRole_id=\"1\"/>\n   <Membership id=\"3\" syncopeUser_id=\"2\" syncopeRole_id=\"2\"/>\n   <Membership id=\"4\" syncopeUser_id=\"4\" syncopeRole_id=\"7\"/>\n   <Membership id=\"5\" syncopeUser_id=\"1\" syncopeRole_id=\"8\"/>\n   <Membership id=\"6\" syncopeUser_id=\"2\" syncopeRole_id=\"3\"/>\n+  <Membership id=\"7\" syncopeUser_id=\"5\" syncopeRole_id=\"14\"/>\n \n   <USchema name=\"fullname\" type=\"String\"\n            mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"/>"}]}