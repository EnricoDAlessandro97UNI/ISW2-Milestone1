{"sha":"90d1d931735a9e29e96f735ddaded1d9d24bfa1c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkwZDFkOTMxNzM1YTllMjllOTZmNzM1ZGRhZGVkMWQ5ZDI0YmZhMWM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-11T14:38:12Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-11T14:38:12Z"},"message":"[SYNCOPE-1410] Now using [User,Group,AnyObject]CR instead of [\\1]TO for create","tree":{"sha":"8b529655545e2c322604a6c1f6b85646a37a366b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8b529655545e2c322604a6c1f6b85646a37a366b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/90d1d931735a9e29e96f735ddaded1d9d24bfa1c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90d1d931735a9e29e96f735ddaded1d9d24bfa1c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/90d1d931735a9e29e96f735ddaded1d9d24bfa1c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"366f56a75edb519e173d83abf5e019002090f052","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/366f56a75edb519e173d83abf5e019002090f052","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/366f56a75edb519e173d83abf5e019002090f052"}],"stats":{"total":4579,"additions":2890,"deletions":1689},"files":[{"sha":"4342c7155d76fe2f80af28f21c1d402a4b93e67a","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RemediationDirectoryPanel.java","status":"modified","additions":22,"deletions":6,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -52,10 +52,14 @@\n import org.apache.syncope.client.console.wizards.any.GroupWizardBuilder;\n import org.apache.syncope.client.console.wizards.any.UserWizardBuilder;\n import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -191,7 +195,8 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                             UserTO newUserTO;\n                             UserTO previousUserTO;\n                             if (remediationTO.getAnyURPayload() == null) {\n-                                newUserTO = (UserTO) remediationTO.getAnyTOPayload();\n+                                newUserTO = new UserTO();\n+                                EntityTOUtils.toAnyTO(remediationTO.getAnyCRPayload(), newUserTO);\n                                 previousUserTO = null;\n                             } else {\n                                 previousUserTO = new UserRestClient().\n@@ -217,7 +222,8 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                             GroupTO newGroupTO;\n                             GroupTO previousGroupTO;\n                             if (remediationTO.getAnyURPayload() == null) {\n-                                newGroupTO = (GroupTO) remediationTO.getAnyTOPayload();\n+                                newGroupTO = new GroupTO();\n+                                EntityTOUtils.toAnyTO(remediationTO.getAnyCRPayload(), newGroupTO);\n                                 previousGroupTO = null;\n                             } else {\n                                 previousGroupTO = new GroupRestClient().\n@@ -243,7 +249,8 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                             AnyObjectTO newAnyObjectTO;\n                             AnyObjectTO previousAnyObjectTO;\n                             if (remediationTO.getAnyURPayload() == null) {\n-                                newAnyObjectTO = (AnyObjectTO) remediationTO.getAnyTOPayload();\n+                                newAnyObjectTO = new AnyObjectTO();\n+                                EntityTOUtils.toAnyTO(remediationTO.getAnyCRPayload(), newAnyObjectTO);\n                                 previousAnyObjectTO = null;\n                             } else {\n                                 previousAnyObjectTO = new AnyObjectRestClient().\n@@ -371,7 +378,10 @@ protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n             ProvisioningResult<UserTO> result;\n \n             if (remediationTO.getAnyURPayload() == null) {\n-                result = restClient.remedy(remediationTO.getKey(), inner);\n+                UserCR req = new UserCR();\n+                EntityTOUtils.toAnyCR(inner, req);\n+\n+                result = restClient.remedy(remediationTO.getKey(), req);\n             } else {\n                 UserUR req = AnyOperations.diff(inner, previousUserTO, false);\n \n@@ -423,7 +433,10 @@ protected Serializable onApplyInternal(final AnyWrapper<GroupTO> modelObject) {\n             ProvisioningResult<GroupTO> result;\n \n             if (remediationTO.getAnyURPayload() == null) {\n-                result = restClient.remedy(remediationTO.getKey(), inner);\n+                GroupCR req = new GroupCR();\n+                EntityTOUtils.toAnyCR(inner, req);\n+\n+                result = restClient.remedy(remediationTO.getKey(), req);\n             } else {\n                 GroupUR req = AnyOperations.diff(inner, previousGroupTO, false);\n \n@@ -468,7 +481,10 @@ protected Serializable onApplyInternal(final AnyWrapper<AnyObjectTO> modelObject\n             ProvisioningResult<AnyObjectTO> result;\n \n             if (remediationTO.getAnyURPayload() == null) {\n-                result = restClient.remedy(remediationTO.getKey(), inner);\n+                AnyObjectCR req = new AnyObjectCR();\n+                EntityTOUtils.toAnyCR(inner, req);\n+\n+                result = restClient.remedy(remediationTO.getKey(), req);\n             } else {\n                 AnyObjectUR req = AnyOperations.diff(inner, previousAnyObjectTO, false);\n "},{"sha":"9b47662f1e801a12163f5544a5d357e469f86481","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyObjectRestClient.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -41,8 +42,8 @@ protected Class<? extends AnyService<AnyObjectTO>> getAnyServiceClass() {\n         return AnyObjectService.class;\n     }\n \n-    public ProvisioningResult<AnyObjectTO> create(final AnyObjectTO anyObjectTO) {\n-        Response response = getService(AnyObjectService.class).create(anyObjectTO);\n+    public ProvisioningResult<AnyObjectTO> create(final AnyObjectCR createReq) {\n+        Response response = getService(AnyObjectService.class).create(createReq);\n         return response.readEntity(new GenericType<ProvisioningResult<AnyObjectTO>>() {\n         });\n     }"},{"sha":"cea9301972e31046adc770397db8ce8a6e4209bd","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -42,8 +43,8 @@ protected Class<? extends AnyService<GroupTO>> getAnyServiceClass() {\n         return GroupService.class;\n     }\n \n-    public ProvisioningResult<GroupTO> create(final GroupTO groupTO) {\n-        Response response = getService(GroupService.class).create(groupTO);\n+    public ProvisioningResult<GroupTO> create(final GroupCR groupCR) {\n+        Response response = getService(GroupService.class).create(groupCR);\n         return response.readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n         });\n     }"},{"sha":"d2f20749fa247508715226c6d1392b70d4bae980","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/RemediationRestClient.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -49,9 +50,9 @@ public RemediationTO getRemediation(final String key) {\n         return getService(RemediationService.class).read(key);\n     }\n \n-    public <T extends AnyTO> ProvisioningResult<T> remedy(final String key, final T anyTO) {\n-        Response response = getService(RemediationService.class).remedy(key, anyTO);\n-        return response.readEntity(new GenericType<ProvisioningResult<T>>() {\n+    public <C extends AnyCR, A extends AnyTO> ProvisioningResult<A> remedy(final String key, final C anyCR) {\n+        Response response = getService(RemediationService.class).remedy(key, anyCR);\n+        return response.readEntity(new GenericType<ProvisioningResult<A>>() {\n         });\n     }\n "},{"sha":"4ff2bcae7b5f7c4842b3071109b5d1dfc3fcf96a","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.client.console.commons.status.StatusUtils;\n import org.apache.syncope.common.lib.request.BooleanReplacePatchItem;\n import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -51,8 +52,8 @@ protected Class<? extends AnyService<UserTO>> getAnyServiceClass() {\n         return UserService.class;\n     }\n \n-    public ProvisioningResult<UserTO> create(final UserTO userTO, final boolean storePassword) {\n-        Response response = getService(UserService.class).create(userTO, storePassword);\n+    public ProvisioningResult<UserTO> create(final UserCR createReq) {\n+        Response response = getService(UserService.class).create(createReq);\n         return response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         });\n     }"},{"sha":"d8f103bc719cf094de757022e5c034b8119dda86","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusDirectoryPanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -293,8 +293,7 @@ protected List<StatusBean> getStatusBeans(final long first, final long count) {\n                             getReconStatuses(anyTypeKind, anyTO.getKey(), Arrays.asList(resource));\n                 }\n \n-                return StatusUtils.getStatusBean(\n-                        actual,\n+                return StatusUtils.getStatusBean(actual,\n                         resource,\n                         statuses.isEmpty() ? null : statuses.get(0).getRight().getOnResource(),\n                         actual instanceof GroupTO);\n@@ -334,8 +333,7 @@ protected List<StatusBean> getStatusBeans(final long first, final long count) {\n                 statusBeans.addAll(resources.stream().\n                         filter(resource -> !anyTO.getResources().contains(resource)).\n                         map(resource -> {\n-                            StatusBean statusBean = StatusUtils.getStatusBean(\n-                                    actual,\n+                            StatusBean statusBean = StatusUtils.getStatusBean(actual,\n                                     resource,\n                                     null,\n                                     actual instanceof GroupTO);"},{"sha":"e3bdd0b06e0d53718a12977e1a7243ee0359761a","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -280,8 +280,7 @@ protected List<StatusBean> getStatusBeans(final long first, final long count) {\n                 List<? extends AnyTO> result = restClient.search(\n                         SyncopeConstants.ROOT_REALM, fiql, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);\n \n-                statusBeans.addAll(result.stream().map(any -> StatusUtils.getStatusBean(\n-                        any,\n+                statusBeans.addAll(result.stream().map(any -> StatusUtils.getStatusBean(any,\n                         resource.getKey(),\n                         null,\n                         any instanceof GroupTO)).collect(Collectors.toList()));"},{"sha":"1d63ea9cc1e43bcce2584f732e24071abfd75e78","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectWizardBuilder.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -25,6 +25,8 @@\n import org.apache.syncope.client.console.rest.AnyObjectRestClient;\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -70,7 +72,10 @@ protected Serializable onApplyInternal(final AnyWrapper<AnyObjectTO> modelObject\n \n         ProvisioningResult<AnyObjectTO> result;\n         if (inner.getKey() == null) {\n-            result = anyObjectRestClient.create(inner);\n+            AnyObjectCR req = new AnyObjectCR();\n+            EntityTOUtils.toAnyCR(inner, req);\n+\n+            result = anyObjectRestClient.create(req);\n         } else {\n             fixPlainAndVirAttrs(inner, getOriginalItem().getInnerObject());\n             AnyObjectUR req = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);"},{"sha":"575f6bc4ec43b7841da42bb191c812a95abd0259","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupWizardBuilder.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -28,6 +28,8 @@\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -89,7 +91,10 @@ protected Serializable onApplyInternal(final AnyWrapper<GroupTO> modelObject) {\n \n         ProvisioningResult<GroupTO> result;\n         if (inner.getKey() == null) {\n-            result = groupRestClient.create(inner);\n+            GroupCR req = new GroupCR();\n+            EntityTOUtils.toAnyCR(inner, req);\n+\n+            result = groupRestClient.create(req);\n         } else {\n             fixPlainAndVirAttrs(inner, getOriginalItem().getInnerObject());\n             GroupUR groupUR = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);"},{"sha":"8201ec155659c2d050c0be843c4a5e12de1c8a92","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/UserWizardBuilder.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -26,7 +26,9 @@\n import org.apache.syncope.client.console.rest.UserRestClient;\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -78,9 +80,13 @@ protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n \n         ProvisioningResult<UserTO> result;\n         if (inner.getKey() == null) {\n-            result = userRestClient.create(inner, modelObject instanceof UserWrapper\n+            UserCR req = new UserCR();\n+            EntityTOUtils.toAnyCR(inner, req);\n+            req.setStorePassword(modelObject instanceof UserWrapper\n                     ? UserWrapper.class.cast(modelObject).isStorePasswordInSyncope()\n                     : StringUtils.isNotBlank(inner.getPassword()));\n+\n+            result = userRestClient.create(req);\n         } else {\n             fixPlainAndVirAttrs(inner, getOriginalItem().getInnerObject());\n             UserUR userUR = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);"},{"sha":"5de8a2252369fe133ee866722510c4cbb398eca0","filename":"client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullActions.groovy","status":"modified","additions":22,"deletions":4,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullActions.groovy?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -17,8 +17,10 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n+import org.apache.syncope.common.lib.request.AnyCR\n import org.apache.syncope.common.lib.request.AnyUR\n import org.apache.syncope.common.lib.to.EntityTO\n+import org.apache.syncope.common.lib.to.RealmTO\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningActions\n@@ -40,15 +42,31 @@ class MyPullActions implements PullActions {\n   void beforeProvision(\n     ProvisioningProfile profile,\n     SyncDelta delta,\n-    EntityTO entity) throws JobExecutionException {\n+    AnyCR anyCR) throws JobExecutionException {\n+\n+  }\n+\n+  @Override\n+  void beforeProvision(\n+    ProvisioningProfile profile,\n+    SyncDelta delta,\n+    RealmTO realmTO) throws JobExecutionException {\n \n   }\n \n   @Override\n   void beforeAssign(\n     ProvisioningProfile profile,\n     SyncDelta delta,\n-    EntityTO entity) throws JobExecutionException {\n+    AnyCR anyCR) throws JobExecutionException {\n+\n+  }\n+\n+  @Override\n+  void beforeAssign(\n+    ProvisioningProfile profile,\n+    SyncDelta delta,\n+    RealmTO realmTO) throws JobExecutionException {\n \n   }\n \n@@ -85,11 +103,11 @@ class MyPullActions implements PullActions {\n   }\n \n   @Override\n-  <R extends AnyUR> void beforeUpdate(\n+  void beforeUpdate(\n     ProvisioningProfile profile,\n     SyncDelta delta,\n     EntityTO entity,\n-    R anyUR) throws JobExecutionException {\n+    AnyUR anyUR) throws JobExecutionException {\n \n   }\n "},{"sha":"d2b7a20d734d4c3ac68840b22a7f02321e9c8bc1","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FGroupResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FGroupResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FGroupResource.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -75,8 +75,8 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                         1,\n                         30).getResult();\n                 groupResponse.setTotGroups(totGroups);\n-                groupResponse.setGroupTOs(groupTOs.stream().collect(\n-                        Collectors.toMap(GroupTO::getKey, GroupTO::getName)));\n+                groupResponse.setGroupTOs(groupTOs.stream().\n+                        collect(Collectors.toMap(GroupTO::getKey, GroupTO::getName)));\n             } else {\n                 groupResponse.setTotGroups(0);\n                 Map<String, String> groups = new HashMap<>();"},{"sha":"41be448d94860856e631242082154e0f3dbdac3c","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.client.enduser.util.Validation;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -165,8 +166,22 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                     LOG.trace(\"Received user self registration request is: [{}]\", userTO);\n \n                     // adapt request and create user\n-                    final Response res = SyncopeEnduserSession.get().getService(UserSelfService.class).create(userTO,\n-                            true);\n+                    UserCR req = new UserCR.Builder().\n+                            realm(userTO.getRealm()).\n+                            username(userTO.getUsername()).\n+                            password(userTO.getPassword()).\n+                            mustChangePassword(userTO.isMustChangePassword()).\n+                            securityQuestion(userTO.getSecurityQuestion()).\n+                            securityAnswer(userTO.getSecurityAnswer()).\n+                            auxClasses(userTO.getAuxClasses()).\n+                            plainAttrs(userTO.getPlainAttrs()).\n+                            virAttrs(userTO.getVirAttrs()).\n+                            memberships(userTO.getMemberships()).\n+                            relationships(userTO.getRelationships()).\n+                            roles(userTO.getRoles()).\n+                            resources(userTO.getResources()).\n+                            build();\n+                    Response res = SyncopeEnduserSession.get().getService(UserSelfService.class).create(req);\n \n                     buildResponse(response, res.getStatus(),\n                             Response.Status.Family.SUCCESSFUL.equals(res.getStatusInfo().getFamily())"},{"sha":"0f9cb00d34f7afa6d97ea242dbee0b2ac6f6d220","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -31,9 +31,9 @@\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.request.GroupUR;\n-import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n-import org.apache.syncope.common.lib.request.RelationshipPatch;\n+import org.apache.syncope.common.lib.request.RelationshipUR;\n import org.apache.syncope.common.lib.request.AbstractReplacePatchItem;\n import org.apache.syncope.common.lib.request.BooleanReplacePatchItem;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n@@ -189,15 +189,15 @@ public static AnyObjectUR diff(\n         updatedRels.entrySet().stream().\n                 filter(entry -> (!originalRels.containsKey(entry.getKey()))).\n                 forEachOrdered(entry -> {\n-                    result.getRelationships().add(new RelationshipPatch.Builder().\n+                    result.getRelationships().add(new RelationshipUR.Builder().\n                             operation(PatchOperation.ADD_REPLACE).\n                             relationshipTO(entry.getValue()).build());\n                 });\n \n         if (!incremental) {\n             originalRels.keySet().stream().filter(relationship -> !updatedRels.containsKey(relationship)).\n                     forEach(key -> {\n-                        result.getRelationships().add(new RelationshipPatch.Builder().\n+                        result.getRelationships().add(new RelationshipUR.Builder().\n                                 operation(PatchOperation.DELETE).\n                                 relationshipTO(originalRels.get(key)).build());\n                     });\n@@ -208,7 +208,7 @@ public static AnyObjectUR diff(\n         Map<String, MembershipTO> originalMembs = EntityTOUtils.buildMembershipMap(original.getMemberships());\n \n         updatedMembs.forEach((key, value) -> {\n-            MembershipPatch membershipPatch = new MembershipPatch.Builder().\n+            MembershipUR membershipPatch = new MembershipUR.Builder().\n                     operation(PatchOperation.ADD_REPLACE).group(value.getGroupKey()).build();\n \n             diff(value, membershipPatch);\n@@ -223,7 +223,7 @@ public static AnyObjectUR diff(\n         if (!incremental) {\n             originalMembs.keySet().stream().filter(membership -> !updatedMembs.containsKey(membership)).\n                     forEach(key -> {\n-                        result.getMemberships().add(new MembershipPatch.Builder().\n+                        result.getMemberships().add(new MembershipUR.Builder().\n                                 operation(PatchOperation.DELETE).group(originalMembs.get(key).getGroupKey()).build());\n                     });\n         }\n@@ -233,7 +233,7 @@ public static AnyObjectUR diff(\n \n     private static void diff(\n             final MembershipTO updated,\n-            final MembershipPatch result) {\n+            final MembershipUR result) {\n \n         // 1. plain attributes\n         result.getPlainAttrs().addAll(updated.getPlainAttrs().stream().\n@@ -311,15 +311,15 @@ public static UserUR diff(final UserTO updated, final UserTO original, final boo\n         updatedRels.entrySet().stream().\n                 filter(entry -> (!originalRels.containsKey(entry.getKey()))).\n                 forEachOrdered(entry -> {\n-                    result.getRelationships().add(new RelationshipPatch.Builder().\n+                    result.getRelationships().add(new RelationshipUR.Builder().\n                             operation(PatchOperation.ADD_REPLACE).\n                             relationshipTO(entry.getValue()).build());\n                 });\n \n         if (!incremental) {\n             originalRels.keySet().stream().filter(relationship -> !updatedRels.containsKey(relationship)).\n                     forEach(key -> {\n-                        result.getRelationships().add(new RelationshipPatch.Builder().\n+                        result.getRelationships().add(new RelationshipUR.Builder().\n                                 operation(PatchOperation.DELETE).\n                                 relationshipTO(originalRels.get(key)).build());\n                     });\n@@ -330,7 +330,7 @@ public static UserUR diff(final UserTO updated, final UserTO original, final boo\n         Map<String, MembershipTO> originalMembs = EntityTOUtils.buildMembershipMap(original.getMemberships());\n \n         updatedMembs.forEach((key, value) -> {\n-            MembershipPatch membershipPatch = new MembershipPatch.Builder().\n+            MembershipUR membershipPatch = new MembershipUR.Builder().\n                     operation(PatchOperation.ADD_REPLACE).group(value.getGroupKey()).build();\n \n             diff(value, membershipPatch);\n@@ -345,7 +345,7 @@ public static UserUR diff(final UserTO updated, final UserTO original, final boo\n         if (!incremental) {\n             originalMembs.keySet().stream().filter(membership -> !updatedMembs.containsKey(membership)).\n                     forEach(key -> {\n-                        result.getMemberships().add(new MembershipPatch.Builder().\n+                        result.getMemberships().add(new MembershipUR.Builder().\n                                 operation(PatchOperation.DELETE).group(originalMembs.get(key).getGroupKey()).build());\n                     });\n         }\n@@ -511,7 +511,7 @@ public static AnyObjectTO patch(final AnyObjectTO anyObjectTO, final AnyObjectUR\n         anyObjectUR.getRelationships().\n                 forEach(relPatch -> {\n                     if (relPatch.getRelationshipTO() == null) {\n-                        LOG.warn(\"Invalid {} specified: {}\", RelationshipPatch.class.getName(), relPatch);\n+                        LOG.warn(\"Invalid {} specified: {}\", RelationshipUR.class.getName(), relPatch);\n                     } else {\n                         result.getRelationships().remove(relPatch.getRelationshipTO());\n                         if (relPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n@@ -524,7 +524,7 @@ public static AnyObjectTO patch(final AnyObjectTO anyObjectTO, final AnyObjectUR\n         anyObjectUR.getMemberships().\n                 forEach(membPatch -> {\n                     if (membPatch.getGroup() == null) {\n-                        LOG.warn(\"Invalid {} specified: {}\", MembershipPatch.class.getName(), membPatch);\n+                        LOG.warn(\"Invalid {} specified: {}\", MembershipUR.class.getName(), membPatch);\n                     } else {\n                         result.getMemberships().stream().\n                                 filter(membership -> membPatch.getGroup().equals(membership.getGroupKey())).\n@@ -566,7 +566,7 @@ public static UserTO patch(final UserTO userTO, final UserUR userUR) {\n         userUR.getRelationships().\n                 forEach(relPatch -> {\n                     if (relPatch.getRelationshipTO() == null) {\n-                        LOG.warn(\"Invalid {} specified: {}\", RelationshipPatch.class.getName(), relPatch);\n+                        LOG.warn(\"Invalid {} specified: {}\", RelationshipUR.class.getName(), relPatch);\n                     } else {\n                         result.getRelationships().remove(relPatch.getRelationshipTO());\n                         if (relPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n@@ -579,7 +579,7 @@ public static UserTO patch(final UserTO userTO, final UserUR userUR) {\n         userUR.getMemberships().\n                 forEach(membPatch -> {\n                     if (membPatch.getGroup() == null) {\n-                        LOG.warn(\"Invalid {} specified: {}\", MembershipPatch.class.getName(), membPatch);\n+                        LOG.warn(\"Invalid {} specified: {}\", MembershipUR.class.getName(), membPatch);\n                     } else {\n                         result.getMemberships().stream().\n                                 filter(membership -> membPatch.getGroup().equals(membership.getGroupKey()))."},{"sha":"d085a19723c90d3154889a5d0fe638d3183c9376","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/EntityTOUtils.java","status":"modified","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -23,9 +23,17 @@\n import java.util.HashMap;\n import java.util.Map;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.AnyCR;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n+import org.apache.syncope.common.lib.request.GroupCR;\n+import org.apache.syncope.common.lib.request.UserCR;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n \n public final class EntityTOUtils {\n \n@@ -52,6 +60,86 @@ public static Map<String, MembershipTO> buildMembershipMap(final Collection<Memb\n         return Collections.unmodifiableMap(result);\n     }\n \n+    public static <A extends AnyTO, C extends AnyCR> void toAnyCR(final A anyTO, final C anyCR) {\n+        anyCR.setRealm(anyTO.getRealm());\n+        anyCR.getAuxClasses().addAll(anyTO.getAuxClasses());\n+        anyCR.getPlainAttrs().addAll(anyTO.getPlainAttrs());\n+        anyCR.getVirAttrs().addAll(anyTO.getVirAttrs());\n+        anyCR.getResources().addAll(anyTO.getResources());\n+\n+        if (anyCR instanceof UserCR && anyTO instanceof UserTO) {\n+            UserCR userCR = (UserCR) anyCR;\n+            UserTO userTO = (UserTO) anyTO;\n+\n+            userCR.setUsername(userTO.getUsername());\n+            userCR.setPassword(userTO.getPassword());\n+            userCR.setSecurityQuestion(userTO.getSecurityQuestion());\n+            userCR.setSecurityAnswer(userTO.getSecurityAnswer());\n+            userCR.setMustChangePassword(userTO.isMustChangePassword());\n+            userCR.getRelationships().addAll(userTO.getRelationships());\n+            userCR.getMemberships().addAll(userTO.getMemberships());\n+            userCR.getRoles().addAll(userTO.getRoles());\n+        } else if (anyCR instanceof GroupCR && anyTO instanceof GroupTO) {\n+            GroupCR groupCR = (GroupCR) anyCR;\n+            GroupTO groupTO = (GroupTO) anyTO;\n+\n+            groupCR.setName(groupTO.getName());\n+            groupCR.setUserOwner(groupTO.getUserOwner());\n+            groupCR.setGroupOwner(groupTO.getGroupOwner());\n+            groupCR.setUDynMembershipCond(groupTO.getUDynMembershipCond());\n+            groupCR.getADynMembershipConds().putAll(groupTO.getADynMembershipConds());\n+            groupCR.getTypeExtensions().addAll(groupTO.getTypeExtensions());\n+        } else if (anyCR instanceof AnyObjectCR && anyTO instanceof AnyObjectTO) {\n+            AnyObjectCR anyObjectCR = (AnyObjectCR) anyCR;\n+            AnyObjectTO anyObjectTO = (AnyObjectTO) anyTO;\n+\n+            anyObjectCR.setType(anyObjectTO.getType());\n+            anyObjectCR.setName(anyObjectTO.getName());\n+            anyObjectCR.getRelationships().addAll(anyObjectTO.getRelationships());\n+            anyObjectCR.getMemberships().addAll(anyObjectTO.getMemberships());\n+        }\n+    }\n+\n+    public static <C extends AnyCR, A extends AnyTO> void toAnyTO(final C anyCR, final A anyTO) {\n+        anyTO.setRealm(anyCR.getRealm());\n+        anyTO.getAuxClasses().addAll(anyCR.getAuxClasses());\n+        anyTO.getPlainAttrs().addAll(anyCR.getPlainAttrs());\n+        anyTO.getVirAttrs().addAll(anyCR.getVirAttrs());\n+        anyTO.getResources().addAll(anyCR.getResources());\n+\n+        if (anyTO instanceof UserTO && anyCR instanceof UserCR) {\n+            UserTO userTO = (UserTO) anyTO;\n+            UserCR userCR = (UserCR) anyCR;\n+\n+            userTO.setUsername(userCR.getUsername());\n+            userTO.setPassword(userCR.getPassword());\n+            userTO.setSecurityQuestion(userCR.getSecurityQuestion());\n+            userTO.setSecurityAnswer(userCR.getSecurityAnswer());\n+            userTO.setMustChangePassword(userCR.isMustChangePassword());\n+            userTO.getRelationships().addAll(userCR.getRelationships());\n+            userTO.getMemberships().addAll(userCR.getMemberships());\n+            userTO.getRoles().addAll(userCR.getRoles());\n+        } else if (anyTO instanceof GroupTO && anyCR instanceof GroupCR) {\n+            GroupTO groupTO = (GroupTO) anyTO;\n+            GroupCR groupCR = (GroupCR) anyCR;\n+\n+            groupTO.setName(groupCR.getName());\n+            groupTO.setUserOwner(groupCR.getUserOwner());\n+            groupTO.setGroupOwner(groupCR.getGroupOwner());\n+            groupTO.setUDynMembershipCond(groupCR.getUDynMembershipCond());\n+            groupTO.getADynMembershipConds().putAll(groupCR.getADynMembershipConds());\n+            groupTO.getTypeExtensions().addAll(groupCR.getTypeExtensions());\n+        } else if (anyTO instanceof AnyObjectTO && anyCR instanceof AnyObjectCR) {\n+            AnyObjectTO anyObjectTO = (AnyObjectTO) anyTO;\n+            AnyObjectCR anyObjectCR = (AnyObjectCR) anyCR;\n+\n+            anyObjectTO.setType(anyObjectCR.getType());\n+            anyObjectTO.setName(anyObjectCR.getName());\n+            anyObjectTO.getRelationships().addAll(anyObjectCR.getRelationships());\n+            anyObjectTO.getMemberships().addAll(anyObjectCR.getMemberships());\n+        }\n+    }\n+\n     /**\n      * Private default constructor, for static-only classes.\n      */"},{"sha":"357f92fb0d3cff093e5dda8d6b719c7c63dd434d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AbstractPatch.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAbstractPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAbstractPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAbstractPatch.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n \n @XmlType\n-@XmlSeeAlso({ AbstractPatchItem.class, AttrPatch.class, MembershipPatch.class, RelationshipPatch.class })\n+@XmlSeeAlso({ AbstractPatchItem.class, AttrPatch.class, MembershipUR.class, RelationshipUR.class })\n public abstract class AbstractPatch implements Serializable {\n \n     private static final long serialVersionUID = -4729181508529829580L;"},{"sha":"49efeb13b48bccec298e2bf126abaf0b95acf952","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AnyCR.java","status":"added","additions":271,"deletions":0,"changes":271,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyCR.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.request;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlTransient;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.AttributableReqEntity;\n+\n+@XmlType\n+@XmlSeeAlso({ UserUR.class, GroupUR.class, AnyObjectUR.class })\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"@class\")\n+@JsonPropertyOrder(value = { \"@class\" })\n+@Schema(subTypes = { UserCR.class, GroupCR.class, AnyObjectCR.class }, discriminatorProperty = \"@class\")\n+public abstract class AnyCR implements Serializable, AttributableReqEntity {\n+\n+    private static final long serialVersionUID = -1180587903919947455L;\n+\n+    protected abstract static class Builder<R extends AnyCR, B extends Builder<R, B>> {\n+\n+        protected R instance;\n+\n+        protected abstract R newInstance();\n+\n+        protected R getInstance() {\n+            if (instance == null) {\n+                instance = newInstance();\n+            }\n+            return instance;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B realm(final String realm) {\n+            getInstance().setRealm(realm);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B auxClass(final String auxClass) {\n+            getInstance().getAuxClasses().add(auxClass);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B auxClasses(final String... auxClasses) {\n+            getInstance().getAuxClasses().addAll(Arrays.asList(auxClasses));\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B auxClasses(final Collection<String> auxClasses) {\n+            getInstance().getAuxClasses().addAll(auxClasses);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B plainAttr(final AttrTO plainAttr) {\n+            getInstance().getPlainAttrs().add(plainAttr);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B plainAttrs(final AttrTO... plainAttrs) {\n+            getInstance().getPlainAttrs().addAll(Arrays.asList(plainAttrs));\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B plainAttrs(final Collection<AttrTO> plainAttrs) {\n+            getInstance().getPlainAttrs().addAll(plainAttrs);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B virAttr(final AttrTO virAttr) {\n+            getInstance().getVirAttrs().add(virAttr);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B virAttrs(final Collection<AttrTO> virAttrs) {\n+            getInstance().getVirAttrs().addAll(virAttrs);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B virAttrs(final AttrTO... virAttrs) {\n+            getInstance().getVirAttrs().addAll(Arrays.asList(virAttrs));\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B resource(final String resource) {\n+            getInstance().getResources().add(resource);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B resources(final String... resources) {\n+            getInstance().getResources().addAll(Arrays.asList(resources));\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B resources(final Collection<String> resources) {\n+            getInstance().getResources().addAll(resources);\n+            return (B) this;\n+        }\n+\n+        public R build() {\n+            return getInstance();\n+        }\n+    }\n+\n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    private String discriminator;\n+\n+    private String realm;\n+\n+    private final Set<String> auxClasses = new HashSet<>();\n+\n+    private final Set<AttrTO> plainAttrs = new HashSet<>();\n+\n+    private final Set<AttrTO> virAttrs = new HashSet<>();\n+\n+    private final Set<String> resources = new HashSet<>();\n+\n+    @Schema(name = \"@class\", required = true)\n+    public abstract String getDiscriminator();\n+\n+    public void setDiscriminator(final String discriminator) {\n+        // do nothing\n+    }\n+\n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n+    @Override\n+    public String getRealm() {\n+        return realm;\n+    }\n+\n+    @Override\n+    public void setRealm(final String realm) {\n+        this.realm = realm;\n+    }\n+\n+    @XmlElementWrapper(name = \"auxClasses\")\n+    @XmlElement(name = \"class\")\n+    @JsonProperty(\"auxClasses\")\n+    @Override\n+    public Set<String> getAuxClasses() {\n+        return auxClasses;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public Optional<AttrTO> getPlainAttr(final String schema) {\n+        return plainAttrs.stream().filter(attr -> attr.getSchema().equals(schema)).findFirst();\n+    }\n+\n+    @XmlElementWrapper(name = \"plainAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"plainAttrs\")\n+    @Override\n+    public Set<AttrTO> getPlainAttrs() {\n+        return plainAttrs;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public Optional<AttrTO> getDerAttr(final String schema) {\n+        return Optional.empty();\n+    }\n+\n+    @XmlTransient\n+    @JsonIgnore\n+    @Override\n+    public Set<AttrTO> getDerAttrs() {\n+        return Collections.emptySet();\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public Optional<AttrTO> getVirAttr(final String schema) {\n+        return virAttrs.stream().filter(attr -> attr.getSchema().equals(schema)).findFirst();\n+    }\n+\n+    @XmlElementWrapper(name = \"virAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virAttrs\")\n+    @Override\n+    public Set<AttrTO> getVirAttrs() {\n+        return virAttrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"resources\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"resources\")\n+    @Override\n+    public Set<String> getResources() {\n+        return resources;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(discriminator).\n+                append(realm).\n+                append(auxClasses).\n+                append(plainAttrs).\n+                append(virAttrs).\n+                append(resources).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final AnyCR other = (AnyCR) obj;\n+        return new EqualsBuilder().\n+                append(discriminator, other.discriminator).\n+                append(realm, other.realm).\n+                append(auxClasses, other.auxClasses).\n+                append(plainAttrs, other.plainAttrs).\n+                append(virAttrs, other.virAttrs).\n+                append(resources, other.resources).\n+                build();\n+    }\n+}"},{"sha":"a833034dbf20dfecdb26acc9af9649cab6d6ad85","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AnyObjectCR.java","status":"added","additions":195,"deletions":0,"changes":195,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectCR.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.request;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n+\n+@XmlRootElement(name = \"anyObjectCR\")\n+@XmlType\n+@JsonPropertyOrder(value = { \"@class\", \"name\" })\n+@Schema(allOf = { AnyCR.class })\n+public class AnyObjectCR extends AnyCR implements GroupableRelatableTO {\n+\n+    private static final long serialVersionUID = 5460996992553869226L;\n+\n+    public static class Builder extends AnyCR.Builder<AnyObjectCR, Builder> {\n+\n+        @Override\n+        protected AnyObjectCR newInstance() {\n+            return new AnyObjectCR();\n+        }\n+\n+        public Builder(final String type) {\n+            getInstance().setType(type);\n+        }\n+\n+        public Builder name(final String name) {\n+            getInstance().setName(name);\n+            return this;\n+        }\n+\n+        public Builder relationship(final RelationshipTO relationship) {\n+            getInstance().getRelationships().add(relationship);\n+            return this;\n+        }\n+\n+        public Builder relationships(final RelationshipTO... relationships) {\n+            getInstance().getRelationships().addAll(Arrays.asList(relationships));\n+            return this;\n+        }\n+\n+        public Builder relationships(final Collection<RelationshipTO> relationships) {\n+            getInstance().getRelationships().addAll(relationships);\n+            return this;\n+        }\n+\n+        public Builder membership(final MembershipTO membership) {\n+            getInstance().getMemberships().add(membership);\n+            return this;\n+        }\n+\n+        public Builder memberships(final MembershipTO... memberships) {\n+            getInstance().getMemberships().addAll(Arrays.asList(memberships));\n+            return this;\n+        }\n+\n+        public Builder memberships(final Collection<MembershipTO> memberships) {\n+            getInstance().getMemberships().addAll(memberships);\n+            return this;\n+        }\n+    }\n+\n+    private String type;\n+\n+    private String name;\n+\n+    private final List<RelationshipTO> relationships = new ArrayList<>();\n+\n+    private final List<MembershipTO> memberships = new ArrayList<>();\n+\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.request.AnyObjectCR\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(final String type) {\n+        this.type = type;\n+    }\n+\n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public Optional<RelationshipTO> getRelationship(final String type, final String otherKey) {\n+        return relationships.stream().filter(\n+                relationship -> type.equals(relationship.getType()) && otherKey.equals(relationship.getOtherEndKey())).\n+                findFirst();\n+    }\n+\n+    @XmlElementWrapper(name = \"relationships\")\n+    @XmlElement(name = \"relationship\")\n+    @JsonProperty(\"relationships\")\n+    @Override\n+    public List<RelationshipTO> getRelationships() {\n+        return relationships;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public Optional<MembershipTO> getMembership(final String groupKey) {\n+        return memberships.stream().filter(membership -> groupKey.equals(membership.getGroupKey())).findFirst();\n+    }\n+\n+    @XmlElementWrapper(name = \"memberships\")\n+    @XmlElement(name = \"membership\")\n+    @JsonProperty(\"memberships\")\n+    @Override\n+    public List<MembershipTO> getMemberships() {\n+        return memberships;\n+    }\n+\n+    @Override\n+    public List<MembershipTO> getDynMemberships() {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(name).\n+                append(relationships).\n+                append(memberships).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final AnyObjectCR other = (AnyObjectCR) obj;\n+        return new EqualsBuilder().\n+                appendSuper(super.equals(obj)).\n+                append(name, other.name).\n+                append(relationships, other.relationships).\n+                append(memberships, other.memberships).\n+                build();\n+    }\n+}"},{"sha":"1f7cdbf53833a630f49bd216ac2b493b56b65b2a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AnyObjectUR.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -50,42 +50,42 @@ public Builder name(final StringReplacePatchItem name) {\n             return this;\n         }\n \n-        public Builder relationship(final RelationshipPatch relationship) {\n+        public Builder relationship(final RelationshipUR relationship) {\n             getInstance().getRelationships().add(relationship);\n             return this;\n         }\n \n-        public Builder relationships(final RelationshipPatch... relationships) {\n+        public Builder relationships(final RelationshipUR... relationships) {\n             getInstance().getRelationships().addAll(Arrays.asList(relationships));\n             return this;\n         }\n \n-        public Builder relationships(final Collection<RelationshipPatch> relationships) {\n+        public Builder relationships(final Collection<RelationshipUR> relationships) {\n             getInstance().getRelationships().addAll(relationships);\n             return this;\n         }\n \n-        public Builder membership(final MembershipPatch membership) {\n+        public Builder membership(final MembershipUR membership) {\n             getInstance().getMemberships().add(membership);\n             return this;\n         }\n \n-        public Builder memberships(final MembershipPatch... memberships) {\n+        public Builder memberships(final MembershipUR... memberships) {\n             getInstance().getMemberships().addAll(Arrays.asList(memberships));\n             return this;\n         }\n \n-        public Builder memberships(final Collection<MembershipPatch> memberships) {\n+        public Builder memberships(final Collection<MembershipUR> memberships) {\n             getInstance().getMemberships().addAll(memberships);\n             return this;\n         }\n     }\n \n     private StringReplacePatchItem name;\n \n-    private final Set<RelationshipPatch> relationships = new HashSet<>();\n+    private final Set<RelationshipUR> relationships = new HashSet<>();\n \n-    private final Set<MembershipPatch> memberships = new HashSet<>();\n+    private final Set<MembershipUR> memberships = new HashSet<>();\n \n     @JsonProperty(\"@class\")\n     @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.request.AnyObjectUR\")\n@@ -105,14 +105,14 @@ public void setName(final StringReplacePatchItem name) {\n     @XmlElementWrapper(name = \"relationships\")\n     @XmlElement(name = \"relationship\")\n     @JsonProperty(\"relationships\")\n-    public Set<RelationshipPatch> getRelationships() {\n+    public Set<RelationshipUR> getRelationships() {\n         return relationships;\n     }\n \n     @XmlElementWrapper(name = \"memberships\")\n     @XmlElement(name = \"membership\")\n     @JsonProperty(\"memberships\")\n-    public Set<MembershipPatch> getMemberships() {\n+    public Set<MembershipUR> getMemberships() {\n         return memberships;\n     }\n "},{"sha":"52a6b3f4e921bb0e8d7e829a75bb0c1358a0f926","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AnyUR.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -43,7 +43,7 @@\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"@class\")\n @JsonPropertyOrder(value = { \"@class\", \"key\" })\n @Schema(subTypes = { UserUR.class, GroupUR.class, AnyObjectUR.class }, discriminatorProperty = \"@class\")\n-public abstract class AnyUR implements Serializable, AttributableUR {\n+public abstract class AnyUR implements Serializable {\n \n     private static final long serialVersionUID = -7445489774552440544L;\n \n@@ -201,15 +201,13 @@ public Set<StringPatchItem> getAuxClasses() {\n     @XmlElementWrapper(name = \"plainAttrs\")\n     @XmlElement(name = \"attribute\")\n     @JsonProperty(\"plainAttrs\")\n-    @Override\n     public Set<AttrPatch> getPlainAttrs() {\n         return plainAttrs;\n     }\n \n     @XmlElementWrapper(name = \"virAttrs\")\n     @XmlElement(name = \"attribute\")\n     @JsonProperty(\"virAttrs\")\n-    @Override\n     public Set<AttrTO> getVirAttrs() {\n         return virAttrs;\n     }"},{"sha":"8830e1cf912d0a2ce3c2f42a115d8762658adae4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/GroupCR.java","status":"added","additions":197,"deletions":0,"changes":197,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupCR.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.request;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n+import org.apache.syncope.common.lib.to.TypeExtensionTO;\n+\n+@XmlRootElement(name = \"groupCR\")\n+@XmlType\n+@JsonPropertyOrder(value = { \"@class\", \"name\" })\n+@Schema(allOf = { AnyCR.class })\n+public class GroupCR extends AnyCR {\n+\n+    private static final long serialVersionUID = -4559772531167385473L;\n+\n+    public static class Builder extends AnyCR.Builder<GroupCR, Builder> {\n+\n+        @Override\n+        protected GroupCR newInstance() {\n+            return new GroupCR();\n+        }\n+\n+        public Builder name(final String name) {\n+            getInstance().setName(name);\n+            return this;\n+        }\n+\n+        public Builder userOwner(final String userOwner) {\n+            getInstance().setUserOwner(userOwner);\n+            return this;\n+        }\n+\n+        public Builder groupOwner(final String groupOwner) {\n+            getInstance().setGroupOwner(groupOwner);\n+            return this;\n+        }\n+\n+        public Builder udynMembershipCond(final String udynMembershipCond) {\n+            getInstance().setUDynMembershipCond(udynMembershipCond);\n+            return this;\n+        }\n+\n+        public Builder adynMembershipCond(final String type, final String fiql) {\n+            getInstance().getADynMembershipConds().put(type, fiql);\n+            return this;\n+        }\n+\n+        public Builder typeExtension(final TypeExtensionTO typeExtension) {\n+            getInstance().getTypeExtensions().add(typeExtension);\n+            return this;\n+        }\n+\n+        public Builder typeExtensions(final TypeExtensionTO... typeExtensions) {\n+            getInstance().getTypeExtensions().addAll(Arrays.asList(typeExtensions));\n+            return this;\n+        }\n+\n+        public Builder typeExtensions(final Collection<TypeExtensionTO> typeExtensions) {\n+            getInstance().getTypeExtensions().addAll(typeExtensions);\n+            return this;\n+        }\n+    }\n+\n+    private String name;\n+\n+    private String userOwner;\n+\n+    private String groupOwner;\n+\n+    private String udynMembershipCond;\n+\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    private final Map<String, String> adynMembershipConds = new HashMap<>();\n+\n+    private final List<TypeExtensionTO> typeExtensions = new ArrayList<>();\n+\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.request.GroupCR\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public String getUserOwner() {\n+        return userOwner;\n+    }\n+\n+    public void setUserOwner(final String userOwner) {\n+        this.userOwner = userOwner;\n+    }\n+\n+    public String getGroupOwner() {\n+        return groupOwner;\n+    }\n+\n+    public void setGroupOwner(final String groupOwner) {\n+        this.groupOwner = groupOwner;\n+    }\n+\n+    public String getUDynMembershipCond() {\n+        return udynMembershipCond;\n+    }\n+\n+    public void setUDynMembershipCond(final String uDynMembershipCond) {\n+        this.udynMembershipCond = uDynMembershipCond;\n+    }\n+\n+    @JsonProperty\n+    public Map<String, String> getADynMembershipConds() {\n+        return adynMembershipConds;\n+    }\n+\n+    @XmlElementWrapper(name = \"typeExtensions\")\n+    @XmlElement(name = \"typeExtension\")\n+    @JsonProperty(\"typeExtensions\")\n+    public List<TypeExtensionTO> getTypeExtensions() {\n+        return typeExtensions;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(name).\n+                append(userOwner).\n+                append(groupOwner).\n+                append(udynMembershipCond).\n+                append(adynMembershipConds).\n+                append(typeExtensions).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final GroupCR other = (GroupCR) obj;\n+        return new EqualsBuilder().\n+                appendSuper(super.equals(obj)).\n+                append(name, other.name).\n+                append(userOwner, other.userOwner).\n+                append(groupOwner, other.groupOwner).\n+                append(udynMembershipCond, other.udynMembershipCond).\n+                append(adynMembershipConds, other.adynMembershipConds).\n+                append(typeExtensions, other.typeExtensions).\n+                build();\n+    }\n+}"},{"sha":"dde21be0ccd8209674d78ca781f1841d0117cc23","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/MembershipUR.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FMembershipUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FMembershipUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FMembershipUR.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -31,17 +31,17 @@\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.to.AttrTO;\n \n-@XmlRootElement(name = \"membershipPatch\")\n+@XmlRootElement(name = \"membershipUR\")\n @XmlType\n-public class MembershipPatch extends AbstractPatch {\n+public class MembershipUR extends AbstractPatch {\n \n     private static final long serialVersionUID = -6783121761221554433L;\n \n-    public static class Builder extends AbstractPatch.Builder<MembershipPatch, Builder> {\n+    public static class Builder extends AbstractPatch.Builder<MembershipUR, Builder> {\n \n         @Override\n-        protected MembershipPatch newInstance() {\n-            return new MembershipPatch();\n+        protected MembershipUR newInstance() {\n+            return new MembershipUR();\n         }\n \n         public Builder group(final String group) {\n@@ -129,7 +129,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final MembershipPatch other = (MembershipPatch) obj;\n+        final MembershipUR other = (MembershipUR) obj;\n         return new EqualsBuilder().\n                 appendSuper(super.equals(obj)).\n                 append(group, other.group).","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/MembershipPatch.java"},{"sha":"d193fe8312b48f059e30e82d6f95ec45c0ce2f94","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/RelationshipUR.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FRelationshipUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FRelationshipUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FRelationshipUR.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -24,17 +24,17 @@\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n \n-@XmlRootElement(name = \"relationshipPatch\")\n+@XmlRootElement(name = \"relationshipUR\")\n @XmlType\n-public class RelationshipPatch extends AbstractPatch {\n+public class RelationshipUR extends AbstractPatch {\n \n     private static final long serialVersionUID = 1314175521205206511L;\n \n-    public static class Builder extends AbstractPatch.Builder<RelationshipPatch, Builder> {\n+    public static class Builder extends AbstractPatch.Builder<RelationshipUR, Builder> {\n \n         @Override\n-        protected RelationshipPatch newInstance() {\n-            return new RelationshipPatch();\n+        protected RelationshipUR newInstance() {\n+            return new RelationshipUR();\n         }\n \n         public Builder relationshipTO(final RelationshipTO relationshipTO) {\n@@ -72,7 +72,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final RelationshipPatch other = (RelationshipPatch) obj;\n+        final RelationshipUR other = (RelationshipUR) obj;\n         return new EqualsBuilder().\n                 appendSuper(super.equals(obj)).\n                 append(relationshipTO, other.relationshipTO).","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/RelationshipPatch.java"},{"sha":"38929fa36407b9ed4b687b6af7fe3ec90b9d3b2d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/UserCR.java","status":"added","additions":288,"deletions":0,"changes":288,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -0,0 +1,288 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.request;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n+\n+@XmlRootElement(name = \"userCR\")\n+@XmlType\n+@JsonPropertyOrder(value = { \"@class\", \"username\" })\n+@Schema(allOf = { AnyCR.class })\n+public class UserCR extends AnyCR implements GroupableRelatableTO {\n+\n+    private static final long serialVersionUID = 2808404532469484940L;\n+\n+    public static class Builder extends AnyCR.Builder<UserCR, Builder> {\n+\n+        @Override\n+        protected UserCR newInstance() {\n+            return new UserCR();\n+        }\n+\n+        public Builder username(final String username) {\n+            getInstance().setUsername(username);\n+            return this;\n+        }\n+\n+        public Builder password(final String password) {\n+            getInstance().setPassword(password);\n+            return this;\n+        }\n+\n+        public Builder storePassword(final boolean storePassword) {\n+            getInstance().setStorePassword(storePassword);\n+            return this;\n+        }\n+\n+        public Builder securityQuestion(final String securityQuestion) {\n+            getInstance().setSecurityQuestion(securityQuestion);\n+            return this;\n+        }\n+\n+        public Builder securityAnswer(final String securityAnswer) {\n+            getInstance().setSecurityAnswer(securityAnswer);\n+            return this;\n+        }\n+\n+        public Builder mustChangePassword(final boolean mustChangePassword) {\n+            getInstance().setMustChangePassword(mustChangePassword);\n+            return this;\n+        }\n+\n+        public Builder relationship(final RelationshipTO relationship) {\n+            getInstance().getRelationships().add(relationship);\n+            return this;\n+        }\n+\n+        public Builder relationships(final RelationshipTO... relationships) {\n+            getInstance().getRelationships().addAll(Arrays.asList(relationships));\n+            return this;\n+        }\n+\n+        public Builder relationships(final Collection<RelationshipTO> relationships) {\n+            getInstance().getRelationships().addAll(relationships);\n+            return this;\n+        }\n+\n+        public Builder membership(final MembershipTO membership) {\n+            getInstance().getMemberships().add(membership);\n+            return this;\n+        }\n+\n+        public Builder memberships(final MembershipTO... memberships) {\n+            getInstance().getMemberships().addAll(Arrays.asList(memberships));\n+            return this;\n+        }\n+\n+        public Builder memberships(final Collection<MembershipTO> memberships) {\n+            getInstance().getMemberships().addAll(memberships);\n+            return this;\n+        }\n+\n+        public Builder role(final String role) {\n+            getInstance().getRoles().add(role);\n+            return this;\n+        }\n+\n+        public Builder roles(final String... roles) {\n+            getInstance().getRoles().addAll(Arrays.asList(roles));\n+            return this;\n+        }\n+\n+        public Builder roles(final Collection<String> roles) {\n+            getInstance().getRoles().addAll(roles);\n+            return this;\n+        }\n+    }\n+\n+    private String username;\n+\n+    private String password;\n+\n+    private boolean storePassword = true;\n+\n+    private String securityQuestion;\n+\n+    private String securityAnswer;\n+\n+    private boolean mustChangePassword;\n+\n+    private final List<RelationshipTO> relationships = new ArrayList<>();\n+\n+    private final List<MembershipTO> memberships = new ArrayList<>();\n+\n+    private final Set<String> roles = new HashSet<>();\n+\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.request.UserCR\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(final String username) {\n+        this.username = username;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(final String password) {\n+        this.password = password;\n+    }\n+\n+    public boolean isStorePassword() {\n+        return storePassword;\n+    }\n+\n+    public void setStorePassword(final boolean storePassword) {\n+        this.storePassword = storePassword;\n+    }\n+\n+    public String getSecurityQuestion() {\n+        return securityQuestion;\n+    }\n+\n+    public void setSecurityQuestion(final String securityQuestion) {\n+        this.securityQuestion = securityQuestion;\n+    }\n+\n+    public String getSecurityAnswer() {\n+        return securityAnswer;\n+    }\n+\n+    public void setSecurityAnswer(final String securityAnswer) {\n+        this.securityAnswer = securityAnswer;\n+    }\n+\n+    public boolean isMustChangePassword() {\n+        return mustChangePassword;\n+    }\n+\n+    public void setMustChangePassword(final boolean mustChangePassword) {\n+        this.mustChangePassword = mustChangePassword;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public Optional<RelationshipTO> getRelationship(final String type, final String otherKey) {\n+        return relationships.stream().filter(\n+                relationship -> type.equals(relationship.getType()) && otherKey.equals(relationship.getOtherEndKey())).\n+                findFirst();\n+    }\n+\n+    @XmlElementWrapper(name = \"relationships\")\n+    @XmlElement(name = \"relationship\")\n+    @JsonProperty(\"relationships\")\n+    @Override\n+    public List<RelationshipTO> getRelationships() {\n+        return relationships;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public Optional<MembershipTO> getMembership(final String groupKey) {\n+        return memberships.stream().filter(membership -> groupKey.equals(membership.getGroupKey())).findFirst();\n+    }\n+\n+    @XmlElementWrapper(name = \"memberships\")\n+    @XmlElement(name = \"membership\")\n+    @JsonProperty(\"memberships\")\n+    @Override\n+    public List<MembershipTO> getMemberships() {\n+        return memberships;\n+    }\n+\n+    @Override\n+    public List<MembershipTO> getDynMemberships() {\n+        return Collections.emptyList();\n+    }\n+\n+    @XmlElementWrapper(name = \"roles\")\n+    @XmlElement(name = \"role\")\n+    @JsonProperty(\"roles\")\n+    public Set<String> getRoles() {\n+        return roles;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(username).\n+                append(roles).\n+                append(securityQuestion).\n+                append(securityAnswer).\n+                append(mustChangePassword).\n+                append(relationships).\n+                append(memberships).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final UserCR other = (UserCR) obj;\n+        return new EqualsBuilder().\n+                appendSuper(super.equals(obj)).\n+                append(username, other.username).\n+                append(roles, other.roles).\n+                append(securityQuestion, other.securityQuestion).\n+                append(securityAnswer, other.securityAnswer).\n+                append(mustChangePassword, other.mustChangePassword).\n+                append(relationships, other.relationships).\n+                append(memberships, other.memberships).\n+                build();\n+    }\n+}"},{"sha":"bc5f854e5ea0721da26ab28a6f2701b983cdb959","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/UserUR.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -70,32 +70,32 @@ public Builder mustChangePassword(final BooleanReplacePatchItem mustChangePasswo\n             return this;\n         }\n \n-        public Builder relationship(final RelationshipPatch relationship) {\n+        public Builder relationship(final RelationshipUR relationship) {\n             getInstance().getRelationships().add(relationship);\n             return this;\n         }\n \n-        public Builder relationships(final RelationshipPatch... relationships) {\n+        public Builder relationships(final RelationshipUR... relationships) {\n             getInstance().getRelationships().addAll(Arrays.asList(relationships));\n             return this;\n         }\n \n-        public Builder relationships(final Collection<RelationshipPatch> relationships) {\n+        public Builder relationships(final Collection<RelationshipUR> relationships) {\n             getInstance().getRelationships().addAll(relationships);\n             return this;\n         }\n \n-        public Builder membership(final MembershipPatch membership) {\n+        public Builder membership(final MembershipUR membership) {\n             getInstance().getMemberships().add(membership);\n             return this;\n         }\n \n-        public Builder memberships(final MembershipPatch... memberships) {\n+        public Builder memberships(final MembershipUR... memberships) {\n             getInstance().getMemberships().addAll(Arrays.asList(memberships));\n             return this;\n         }\n \n-        public Builder memberships(final Collection<MembershipPatch> memberships) {\n+        public Builder memberships(final Collection<MembershipUR> memberships) {\n             getInstance().getMemberships().addAll(memberships);\n             return this;\n         }\n@@ -126,9 +126,9 @@ public Builder roles(final Collection<StringPatchItem> roles) {\n \n     private BooleanReplacePatchItem mustChangePassword;\n \n-    private final Set<RelationshipPatch> relationships = new HashSet<>();\n+    private final Set<RelationshipUR> relationships = new HashSet<>();\n \n-    private final Set<MembershipPatch> memberships = new HashSet<>();\n+    private final Set<MembershipUR> memberships = new HashSet<>();\n \n     private final Set<StringPatchItem> roles = new HashSet<>();\n \n@@ -182,14 +182,14 @@ public void setMustChangePassword(final BooleanReplacePatchItem mustChangePasswo\n     @XmlElementWrapper(name = \"relationships\")\n     @XmlElement(name = \"relationship\")\n     @JsonProperty(\"relationships\")\n-    public Set<RelationshipPatch> getRelationships() {\n+    public Set<RelationshipUR> getRelationships() {\n         return relationships;\n     }\n \n     @XmlElementWrapper(name = \"memberships\")\n     @XmlElement(name = \"membership\")\n     @JsonProperty(\"memberships\")\n-    public Set<MembershipPatch> getMemberships() {\n+    public Set<MembershipUR> getMemberships() {\n         return memberships;\n     }\n "},{"sha":"499fb93943aaa5e9429a8a06e7b66526cb90c8ec","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractAnnotatedBean.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAnnotatedBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAnnotatedBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAnnotatedBean.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n-import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.Date;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.StringUtils;\n@@ -67,7 +66,6 @@ public abstract class AbstractAnnotatedBean extends BaseBean implements EntityTO\n      */\n     private Date lastChangeDate;\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public String getCreator() {\n         return creator;\n     }\n@@ -76,7 +74,6 @@ public void setCreator(final String creator) {\n         this.creator = creator;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public Date getCreationDate() {\n         if (creationDate != null) {\n             return new Date(creationDate.getTime());\n@@ -92,7 +89,6 @@ public void setCreationDate(final Date creationDate) {\n         }\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public String getLastModifier() {\n         return lastModifier;\n     }\n@@ -101,7 +97,6 @@ public void setLastModifier(final String lastModifier) {\n         this.lastModifier = lastModifier;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public Date getLastChangeDate() {\n         if (lastChangeDate != null) {\n             return new Date(lastChangeDate.getTime());"},{"sha":"a2973f9b0efdd5a345078be6100abb7030443369","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -93,7 +93,6 @@ public List<MembershipTO> getMemberships() {\n         return memberships;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     @XmlElementWrapper(name = \"dynMemberships\")\n     @XmlElement(name = \"dynMembership\")\n     @JsonProperty(\"dynMemberships\")"},{"sha":"25810136442fd7fa0b62335be14a68165fc80c64","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTO.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -41,7 +41,7 @@\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"@class\")\n @JsonPropertyOrder(value = { \"@class\", \"key\", \"type\", \"realm\", \"username\", \"name\" })\n @Schema(subTypes = { UserTO.class, GroupTO.class, AnyObjectTO.class }, discriminatorProperty = \"@class\")\n-public abstract class AnyTO extends AbstractAnnotatedBean implements EntityTO, AttributableTO {\n+public abstract class AnyTO extends AbstractAnnotatedBean implements EntityTO, AttributableReqEntity {\n \n     private static final long serialVersionUID = -754311920679872084L;\n \n@@ -59,7 +59,7 @@ public abstract class AnyTO extends AbstractAnnotatedBean implements EntityTO, A\n \n     private String status;\n \n-    private final List<String> auxClasses = new ArrayList<>();\n+    private final Set<String> auxClasses = new HashSet<>();\n \n     private final Set<AttrTO> plainAttrs = new HashSet<>();\n \n@@ -76,7 +76,6 @@ public void setDiscriminator(final String discriminator) {\n         // do nothing\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     @Override\n     public String getKey() {\n         return key;\n@@ -87,7 +86,6 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public String getType() {\n         return type;\n     }\n@@ -96,23 +94,23 @@ public void setType(final String type) {\n         this.type = type;\n     }\n \n+    @Override\n     public String getRealm() {\n         return realm;\n     }\n \n+    @Override\n     public void setRealm(final String realm) {\n         this.realm = realm;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     @XmlElementWrapper(name = \"dynRealms\")\n     @XmlElement(name = \"dynRealmF\")\n     @JsonProperty(\"dynRealms\")\n     public List<String> getDynRealms() {\n         return dynRealms;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public String getStatus() {\n         return status;\n     }\n@@ -124,7 +122,8 @@ public void setStatus(final String status) {\n     @XmlElementWrapper(name = \"auxClasses\")\n     @XmlElement(name = \"class\")\n     @JsonProperty(\"auxClasses\")\n-    public List<String> getAuxClasses() {\n+    @Override\n+    public Set<String> getAuxClasses() {\n         return auxClasses;\n     }\n \n@@ -173,6 +172,7 @@ public Optional<AttrTO> getVirAttr(final String schema) {\n     @XmlElementWrapper(name = \"resources\")\n     @XmlElement(name = \"resource\")\n     @JsonProperty(\"resources\")\n+    @Override\n     public Set<String> getResources() {\n         return resources;\n     }"},{"sha":"8180a5289b9cf28f58707112152c32b64c991681","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AttributableReqEntity.java","status":"renamed","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttributableReqEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttributableReqEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttributableReqEntity.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -16,14 +16,17 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.request;\n+package org.apache.syncope.common.lib.to;\n \n import java.util.Set;\n-import org.apache.syncope.common.lib.to.AttrTO;\n \n-public interface AttributableUR {\n+public interface AttributableReqEntity extends AttributableTO {\n \n-    Set<AttrPatch> getPlainAttrs();\n+    String getRealm();\n \n-    Set<AttrTO> getVirAttrs();\n+    void setRealm(String realm);\n+\n+    Set<String> getAuxClasses();\n+\n+    Set<String> getResources();\n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AttributableUR.java"},{"sha":"a7247d9a1c47ad20fe154483bbc0e8289a7ef416","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -115,7 +115,6 @@ public void setUDynMembershipCond(final String uDynMembershipCond) {\n         this.udynMembershipCond = uDynMembershipCond;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public int getStaticUserMembershipCount() {\n         return staticUserMembershipCount;\n     }\n@@ -124,7 +123,6 @@ public void setStaticUserMembershipCount(final int staticUserMembershipCount) {\n         this.staticUserMembershipCount = staticUserMembershipCount;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public int getDynamicUserMembershipCount() {\n         return dynamicUserMembershipCount;\n     }\n@@ -133,7 +131,6 @@ public void setDynamicUserMembershipCount(final int dynamicUserMembershipCount)\n         this.dynamicUserMembershipCount = dynamicUserMembershipCount;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public int getStaticAnyObjectMembershipCount() {\n         return staticAnyObjectMembershipCount;\n     }\n@@ -142,7 +139,6 @@ public void setStaticAnyObjectMembershipCount(final int staticAnyObjectMembershi\n         this.staticAnyObjectMembershipCount = staticAnyObjectMembershipCount;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public int getDynamicAnyObjectMembershipCount() {\n         return dynamicAnyObjectMembershipCount;\n     }"},{"sha":"65df20f1a10a69a769cb2336ce644600e4d38bb5","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RemediationTO.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -24,6 +24,7 @@\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.BaseBean;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n \n@@ -39,7 +40,7 @@ public class RemediationTO extends BaseBean implements EntityTO {\n \n     private ResourceOperation operation;\n \n-    private AnyTO anyTOPayload;\n+    private AnyCR anyCRPayload;\n \n     private AnyUR anyURPayload;\n \n@@ -85,12 +86,12 @@ public void setOperation(final ResourceOperation operation) {\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n-    public AnyTO getAnyTOPayload() {\n-        return anyTOPayload;\n+    public AnyCR getAnyCRPayload() {\n+        return anyCRPayload;\n     }\n \n-    public void setAnyTOPayload(final AnyTO anyTOPayload) {\n-        this.anyTOPayload = anyTOPayload;\n+    public void setAnyCRPayload(final AnyCR anyCRPayload) {\n+        this.anyCRPayload = anyCRPayload;\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)"},{"sha":"5cad50c9c4e3371aa914a07a58617cc8f40e5bdd","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -108,7 +108,6 @@ public List<String> getRoles() {\n         return roles;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     @XmlElementWrapper(name = \"dynRoles\")\n     @XmlElement(name = \"role\")\n     @JsonProperty(\"dynRoles\")\n@@ -123,7 +122,6 @@ public Set<String> getPrivileges() {\n         return privileges;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public String getToken() {\n         return token;\n     }\n@@ -132,7 +130,6 @@ public void setToken(final String token) {\n         this.token = token;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public Date getTokenExpireTime() {\n         if (tokenExpireTime != null) {\n             return new Date(tokenExpireTime.getTime());\n@@ -158,20 +155,17 @@ public void setUsername(final String username) {\n         this.username = username;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public Date getChangePwdDate() {\n         if (changePwdDate != null) {\n             return new Date(changePwdDate.getTime());\n         }\n         return null;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public Integer getFailedLogins() {\n         return failedLogins;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public Date getLastLoginDate() {\n         if (lastLoginDate != null) {\n             return new Date(lastLoginDate.getTime());\n@@ -215,7 +209,6 @@ public void setSecurityAnswer(final String securityAnswer) {\n         this.securityAnswer = securityAnswer;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public boolean isSuspended() {\n         return suspended;\n     }\n@@ -224,7 +217,6 @@ public void setSuspended(final boolean suspended) {\n         this.suspended = suspended;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public boolean isMustChangePassword() {\n         return mustChangePassword;\n     }\n@@ -263,7 +255,6 @@ public List<MembershipTO> getMemberships() {\n         return memberships;\n     }\n \n-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     @XmlElementWrapper(name = \"dynMemberships\")\n     @XmlElement(name = \"dynMembership\")\n     @JsonProperty(\"dynMemberships\")"},{"sha":"9971f131ea5749705707b38bef3691a5225686a7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AnyTypeKind.java","status":"modified","additions":22,"deletions":7,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -19,9 +19,13 @@\n package org.apache.syncope.common.lib.types;\n \n import javax.xml.bind.annotation.XmlEnum;\n+import org.apache.syncope.common.lib.request.AnyCR;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -31,25 +35,36 @@\n @XmlEnum\n public enum AnyTypeKind {\n \n-    USER(UserTO.class, UserUR.class),\n-    GROUP(GroupTO.class, GroupUR.class),\n-    ANY_OBJECT(AnyObjectTO.class, AnyObjectUR.class);\n+    USER(UserTO.class, UserCR.class, UserUR.class),\n+    GROUP(GroupTO.class, GroupCR.class, GroupUR.class),\n+    ANY_OBJECT(AnyObjectTO.class, AnyObjectCR.class, AnyObjectUR.class);\n \n     private final Class<? extends AnyTO> toClass;\n \n-    private final Class<? extends AnyUR> reqClass;\n+    private final Class<? extends AnyCR> crClass;\n+\n+    private final Class<? extends AnyUR> urClass;\n+\n+    AnyTypeKind(\n+            final Class<? extends AnyTO> toClass,\n+            final Class<? extends AnyCR> crClass,\n+            final Class<? extends AnyUR> urClass) {\n \n-    AnyTypeKind(final Class<? extends AnyTO> toClass, final Class<? extends AnyUR> reqClass) {\n         this.toClass = toClass;\n-        this.reqClass = reqClass;\n+        this.crClass = crClass;\n+        this.urClass = urClass;\n     }\n \n     public Class<? extends AnyTO> getTOClass() {\n         return toClass;\n     }\n \n+    public Class<? extends AnyCR> getCRClass() {\n+        return crClass;\n+    }\n+\n     public Class<? extends AnyUR> getURClass() {\n-        return reqClass;\n+        return urClass;\n     }\n \n     public static AnyTypeKind fromTOClass(final Class<? extends AnyTO> clazz) {"},{"sha":"780fc3078c41031f92c0ad5e69af33391365265e","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/JSONTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -100,8 +100,7 @@ public void provisioningResult() throws IOException {\n         StringWriter writer = new StringWriter();\n         mapper.writeValue(writer, original);\n \n-        ProvisioningResult<GroupTO> actual = mapper.readValue(\n-                writer.toString(), new TypeReference<ProvisioningResult<GroupTO>>() {\n+        ProvisioningResult<GroupTO> actual = mapper.readValue(writer.toString(), new TypeReference<ProvisioningResult<GroupTO>>() {\n         });\n         assertEquals(original, actual);\n     }"},{"sha":"3388b7cf0f1218cf7d5de0fef0da9942a9c39f4e","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -37,6 +37,7 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -71,7 +72,7 @@ public interface AnyObjectService extends AnyService<AnyObjectTO> {\n     /**\n      * Creates a new any object.\n      *\n-     * @param anyObjectTO any object to be created\n+     * @param createReq any object create request\n      * @return Response object featuring Location header of created any object as well as the any\n      * object itself enriched with propagation status information\n      */\n@@ -105,7 +106,7 @@ public interface AnyObjectService extends AnyService<AnyObjectTO> {\n     @POST\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response create(@NotNull AnyObjectTO anyObjectTO);\n+    Response create(@NotNull AnyObjectCR createReq);\n \n     /**\n      * Updates any object matching the provided key."},{"sha":"17ed036ef63642ada45ef7b89bd48b0c64ab06bc","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -40,6 +40,7 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -76,7 +77,7 @@ public interface GroupService extends AnyService<GroupTO> {\n     /**\n      * Creates a new group.\n      *\n-     * @param groupTO group to be created\n+     * @param createReq group create request\n      * @return Response object featuring Location header of created group as well as the any\n      * object itself enriched with propagation status information\n      */\n@@ -109,7 +110,7 @@ public interface GroupService extends AnyService<GroupTO> {\n     @POST\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response create(@NotNull GroupTO groupTO);\n+    Response create(@NotNull GroupCR createReq);\n \n     /**\n      * Updates group matching the provided key."},{"sha":"71b172e28d7442fcb43003323ae5ed4cfbe394fa","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RemediationService.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -41,8 +41,8 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n-import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RemediationTO;\n@@ -95,7 +95,7 @@ public interface RemediationService extends JAXRSService {\n      * Perform remediation by creating the provided user, group or any object.\n      *\n      * @param remediationKey key for remediation to act on\n-     * @param anyTO user, group or any object to create\n+     * @param createReq user, group or any object to create\n      * @return Response object featuring Location header of created object as well as the object itself\n      * enriched with propagation status information\n      */\n@@ -131,7 +131,7 @@ public interface RemediationService extends JAXRSService {\n     @Path(\"{remediationKey}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response remedy(@NotNull @PathParam(\"remediationKey\") String remediationKey, @NotNull AnyTO anyTO);\n+    Response remedy(@NotNull @PathParam(\"remediationKey\") String remediationKey, @NotNull AnyCR createReq);\n \n     /**\n      * Perform remediation by updating the provided user, group or any object."},{"sha":"923642ed3564e9d8bd685cbcb78a65c02d7e987f","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -31,7 +31,6 @@\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n-import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n import javax.ws.rs.PATCH;\n import javax.ws.rs.POST;\n@@ -43,6 +42,7 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -82,8 +82,7 @@ public interface UserSelfService extends JAXRSService {\n     /**\n      * Self-registration for new user.\n      *\n-     * @param userTO user to be created\n-     * @param storePassword whether password shall be stored internally\n+     * @param createReq user to be created\n      * @return Response object featuring Location header of self-registered user as well as the user itself\n      * enriched with propagation status information\n      */\n@@ -111,8 +110,7 @@ public interface UserSelfService extends JAXRSService {\n     @POST\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response create(@NotNull UserTO userTO,\n-            @DefaultValue(\"true\") @QueryParam(\"storePassword\") boolean storePassword);\n+    Response create(@NotNull UserCR createReq);\n \n     /**\n      * Self-updates user."},{"sha":"aef50d1308a1f4cd65793127d400d3e197196194","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -30,16 +30,15 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n-import javax.ws.rs.DefaultValue;\n import javax.ws.rs.PATCH;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -74,8 +73,7 @@ public interface UserService extends AnyService<UserTO> {\n     /**\n      * Creates a new user.\n      *\n-     * @param userTO user to be created\n-     * @param storePassword whether password shall be stored internally\n+     * @param createReq user create request\n      * @return Response object featuring Location header of created user as well as the user itself\n      * enriched with propagation status information\n      */\n@@ -108,9 +106,7 @@ public interface UserService extends AnyService<UserTO> {\n     @POST\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response create(\n-            @NotNull UserTO userTO,\n-            @DefaultValue(\"true\") @QueryParam(\"storePassword\") boolean storePassword);\n+    Response create(@NotNull UserCR createReq);\n \n     /**\n      * Updates user matching the provided key."},{"sha":"9ae073c6b5be0533d216230042ad0641f0f29d18","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":25,"deletions":21,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -22,15 +22,16 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.request.AnyCR;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.GroupCR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n@@ -50,7 +51,8 @@\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-public abstract class AbstractAnyLogic<TO extends AnyTO, R extends AnyUR> extends AbstractResourceAssociator<TO> {\n+public abstract class AbstractAnyLogic<TO extends AnyTO, C extends AnyCR, U extends AnyUR>\n+        extends AbstractResourceAssociator<TO> {\n \n     @Autowired\n     protected UserDAO userDAO;\n@@ -84,48 +86,50 @@ private List<LogicActions> getActions(final Realm realm) {\n         return actions;\n     }\n \n-    protected Pair<TO, List<LogicActions>> beforeCreate(final TO input) {\n+    protected Pair<C, List<LogicActions>> beforeCreate(final C input) {\n         Realm realm = realmDAO.findByFullPath(input.getRealm());\n         if (realm == null) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n             sce.getElements().add(input.getRealm());\n             throw sce;\n         }\n \n-        AnyType anyType = input instanceof UserTO\n-                ? anyTypeDAO.findUser()\n-                : input instanceof GroupTO\n-                        ? anyTypeDAO.findGroup()\n-                        : anyTypeDAO.find(input.getType());\n+        AnyType anyType = null;\n+        if (input instanceof UserCR) {\n+            anyType = anyTypeDAO.findUser();\n+        } else if (input instanceof GroupCR) {\n+            anyType = anyTypeDAO.findGroup();\n+        } else if (input instanceof AnyObjectCR) {\n+            anyType = anyTypeDAO.find(((AnyObjectCR) input).getType());\n+        }\n         if (anyType == null) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n-            sce.getElements().add(input.getType());\n             throw sce;\n         }\n \n-        TO any = input;\n+        C anyCR = input;\n \n-        templateUtils.apply(any, realm.getTemplate(anyType));\n+        templateUtils.apply(anyCR, realm.getTemplate(anyType));\n \n         List<LogicActions> actions = getActions(realm);\n         for (LogicActions action : actions) {\n-            any = action.beforeCreate(any);\n+            anyCR = action.beforeCreate(anyCR);\n         }\n \n-        LOG.debug(\"Input: {}\\nOutput: {}\\n\", input, any);\n+        LOG.debug(\"Input: {}\\nOutput: {}\\n\", input, anyCR);\n \n-        return ImmutablePair.of(any, actions);\n+        return Pair.of(anyCR, actions);\n     }\n \n-    protected Pair<R, List<LogicActions>> beforeUpdate(final R input, final String realmPath) {\n+    protected Pair<U, List<LogicActions>> beforeUpdate(final U input, final String realmPath) {\n         Realm realm = realmDAO.findByFullPath(realmPath);\n         if (realm == null) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n             sce.getElements().add(realmPath);\n             throw sce;\n         }\n \n-        R mod = input;\n+        U mod = input;\n \n         List<LogicActions> actions = getActions(realm);\n         for (LogicActions action : actions) {\n@@ -134,7 +138,7 @@ protected Pair<R, List<LogicActions>> beforeUpdate(final R input, final String r\n \n         LOG.debug(\"Input: {}\\nOutput: {}\\n\", input, mod);\n \n-        return ImmutablePair.of(mod, actions);\n+        return Pair.of(mod, actions);\n     }\n \n     protected Pair<TO, List<LogicActions>> beforeDelete(final TO input) {\n@@ -154,7 +158,7 @@ protected Pair<TO, List<LogicActions>> beforeDelete(final TO input) {\n \n         LOG.debug(\"Input: {}\\nOutput: {}\\n\", input, any);\n \n-        return ImmutablePair.of(any, actions);\n+        return Pair.of(any, actions);\n     }\n \n     protected ProvisioningResult<TO> afterCreate(\n@@ -253,7 +257,7 @@ public abstract Pair<Integer, List<TO>> search(\n             String realm,\n             boolean details);\n \n-    public abstract ProvisioningResult<TO> update(R updateReq, boolean nullPriorityAsync);\n+    public abstract ProvisioningResult<TO> update(U updateReq, boolean nullPriorityAsync);\n \n     public abstract ProvisioningResult<TO> delete(String key, boolean nullPriorityAsync);\n }"},{"sha":"05efdb710120297be1682fc041b25534d58070a5","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -28,6 +28,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -56,7 +57,7 @@\n  * Spring's Transactional logic at class level.\n  */\n @Component\n-public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectUR> {\n+public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectCR, AnyObjectUR> {\n \n     @Autowired\n     protected AnySearchDAO searchDAO;\n@@ -99,8 +100,8 @@ public Pair<Integer, List<AnyObjectTO>> search(\n         return Pair.of(count, result);\n     }\n \n-    public ProvisioningResult<AnyObjectTO> create(final AnyObjectTO anyObjectTO, final boolean nullPriorityAsync) {\n-        Pair<AnyObjectTO, List<LogicActions>> before = beforeCreate(anyObjectTO);\n+    public ProvisioningResult<AnyObjectTO> create(final AnyObjectCR createReq, final boolean nullPriorityAsync) {\n+        Pair<AnyObjectCR, List<LogicActions>> before = beforeCreate(createReq);\n \n         if (before.getLeft().getRealm() == null) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);"},{"sha":"a7aa6a0c36d1cc926459293b52f70972b3ab0e64","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -33,6 +33,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.ExecTO;\n@@ -81,7 +82,7 @@\n  * Spring's Transactional logic at class level.\n  */\n @Component\n-public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupUR> {\n+public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupCR, GroupUR> {\n \n     @Resource(name = \"adminUser\")\n     protected String adminUser;\n@@ -173,8 +174,8 @@ public Pair<Integer, List<GroupTO>> search(\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_CREATE + \"')\")\n-    public ProvisioningResult<GroupTO> create(final GroupTO groupTO, final boolean nullPriorityAsync) {\n-        Pair<GroupTO, List<LogicActions>> before = beforeCreate(groupTO);\n+    public ProvisioningResult<GroupTO> create(final GroupCR createReq, final boolean nullPriorityAsync) {\n+        Pair<GroupCR, List<LogicActions>> before = beforeCreate(createReq);\n \n         if (before.getLeft().getRealm() == null) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);"},{"sha":"e22f157d5df6a991a9cc878cbb41d583d98f6f46","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RemediationLogic.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -24,16 +24,16 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.AnyCR;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RemediationTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n@@ -104,7 +104,7 @@ public void delete(final String key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_REMEDY + \"')\")\n-    public ProvisioningResult<?> remedy(final String key, final AnyTO anyTO, final boolean nullPriorityAsync) {\n+    public ProvisioningResult<?> remedy(final String key, final AnyCR anyCR, final boolean nullPriorityAsync) {\n         Remediation remediation = remediationDAO.find(key);\n         if (remediation == null) {\n             LOG.error(\"Could not find remediation '\" + key + \"'\");\n@@ -116,15 +116,15 @@ public ProvisioningResult<?> remedy(final String key, final AnyTO anyTO, final b\n         switch (remediation.getAnyType().getKind()) {\n             case USER:\n             default:\n-                result = userLogic.create((UserTO) anyTO, true, nullPriorityAsync);\n+                result = userLogic.create((UserCR) anyCR, nullPriorityAsync);\n                 break;\n \n             case GROUP:\n-                result = groupLogic.create((GroupTO) anyTO, nullPriorityAsync);\n+                result = groupLogic.create((GroupCR) anyCR, nullPriorityAsync);\n                 break;\n \n             case ANY_OBJECT:\n-                result = anyObjectLogic.create((AnyObjectTO) anyTO, nullPriorityAsync);\n+                result = anyObjectLogic.create((AnyObjectCR) anyCR, nullPriorityAsync);\n         }\n \n         remediationDAO.delete(remediation);"},{"sha":"06674d0b433a8ebdeb7501f18c0404927425fe6d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":9,"deletions":14,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.StatusR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -65,7 +66,7 @@\n  * Spring's Transactional logic at class level.\n  */\n @Component\n-public class UserLogic extends AbstractAnyLogic<UserTO, UserUR> {\n+public class UserLogic extends AbstractAnyLogic<UserTO, UserCR, UserUR> {\n \n     @Autowired\n     protected AnySearchDAO searchDAO;\n@@ -125,26 +126,21 @@ public Pair<Integer, List<UserTO>> search(\n     }\n \n     @PreAuthorize(\"isAnonymous() or hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n-    public ProvisioningResult<UserTO> selfCreate(\n-            final UserTO userTO, final boolean storePassword, final boolean nullPriorityAsync) {\n-\n-        return doCreate(userTO, storePassword, true, nullPriorityAsync);\n+    public ProvisioningResult<UserTO> selfCreate(final UserCR createReq, final boolean nullPriorityAsync) {\n+        return doCreate(createReq, true, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_CREATE + \"')\")\n-    public ProvisioningResult<UserTO> create(\n-            final UserTO userTO, final boolean storePassword, final boolean nullPriorityAsync) {\n-\n-        return doCreate(userTO, storePassword, false, nullPriorityAsync);\n+    public ProvisioningResult<UserTO> create(final UserCR createReq, final boolean nullPriorityAsync) {\n+        return doCreate(createReq, false, nullPriorityAsync);\n     }\n \n     protected ProvisioningResult<UserTO> doCreate(\n-            final UserTO userTO,\n-            final boolean storePassword,\n+            final UserCR userCR,\n             final boolean self,\n             final boolean nullPriorityAsync) {\n \n-        Pair<UserTO, List<LogicActions>> before = beforeCreate(userTO);\n+        Pair<UserCR, List<LogicActions>> before = beforeCreate(userCR);\n \n         if (before.getLeft().getRealm() == null) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n@@ -157,8 +153,7 @@ protected ProvisioningResult<UserTO> doCreate(\n             securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n         }\n \n-        Pair<String, List<PropagationStatus>> created =\n-                provisioningManager.create(before.getLeft(), storePassword, nullPriorityAsync);\n+        Pair<String, List<PropagationStatus>> created = provisioningManager.create(before.getLeft(), nullPriorityAsync);\n \n         return afterCreate(\n                 binder.returnUserTO(binder.getUserTO(created.getKey())), created.getRight(), before.getRight());"},{"sha":"d9b53c3b1a9920ee79e279ee60751a83d1c4533b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.reflect.Field;\n import java.util.Set;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -50,7 +51,9 @@ public interface AnyUtils {\n \n     <T extends AnyTO> T newAnyTO();\n \n-    <P extends AnyUR> P newAnyUR(String key);\n+    <C extends AnyCR> C newAnyCR();\n+\n+    <U extends AnyUR> U newAnyUR(String key);\n \n     <A extends Any<?>> AnyDAO<A> dao();\n "},{"sha":"3504a1662964be41f81a8d4c939c018a2503215a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Remediation.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRemediation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRemediation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRemediation.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import java.util.Date;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n-import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n \n@@ -34,15 +34,15 @@ public interface Remediation extends Entity {\n \n     void setOperation(ResourceOperation operation);\n \n-    void setPayload(AnyTO anyTO);\n+    void setPayload(AnyCR anyCR);\n \n     void setPayload(AnyUR anyUR);\n \n     void setPayload(String key);\n \n-    <T extends AnyTO> T getPayloadAsTO(Class<T> reference);\n+    <C extends AnyCR> C getPayloadAsCR(Class<C> reference);\n \n-    <P extends AnyUR> P getPayloadAsUR(Class<P> reference);\n+    <U extends AnyUR> U getPayloadAsUR(Class<U> reference);\n \n     String getPayloadAsKey();\n "},{"sha":"46e5215b67f5fe00cf40946211bedc876d1fcca6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":32,"deletions":5,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -27,9 +27,13 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.ClassUtils;\n+import org.apache.syncope.common.lib.request.AnyCR;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -308,20 +312,43 @@ public <T extends AnyTO> T newAnyTO() {\n     }\n \n     @Override\n-    public <P extends AnyUR> P newAnyUR(final String key) {\n-        P result = null;\n+    public <C extends AnyCR> C newAnyCR() {\n+        C result = null;\n \n         switch (anyTypeKind) {\n             case USER:\n-                result = (P) new UserUR();\n+                result = (C) new UserCR();\n                 break;\n \n             case GROUP:\n-                result = (P) new GroupUR();\n+                result = (C) new GroupCR();\n                 break;\n \n             case ANY_OBJECT:\n-                result = (P) new AnyObjectUR();\n+                result = (C) new AnyObjectCR();\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <U extends AnyUR> U newAnyUR(final String key) {\n+        U result = null;\n+\n+        switch (anyTypeKind) {\n+            case USER:\n+                result = (U) new UserUR();\n+                break;\n+\n+            case GROUP:\n+                result = (U) new GroupUR();\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = (U) new AnyObjectUR();\n                 break;\n \n             default:"},{"sha":"d93c6fe7924498b27b2bff508f1bde86b84ea1bd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARemediation.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -28,8 +28,8 @@\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n-import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Remediation;\n@@ -94,12 +94,12 @@ public void setOperation(final ResourceOperation operation) {\n     }\n \n     @Override\n-    public <T extends AnyTO> T getPayloadAsTO(final Class<T> reference) {\n+    public <C extends AnyCR> C getPayloadAsCR(final Class<C> reference) {\n         return POJOHelper.deserialize(this.payload, reference);\n     }\n \n     @Override\n-    public <P extends AnyUR> P getPayloadAsUR(final Class<P> reference) {\n+    public <U extends AnyUR> U getPayloadAsUR(final Class<U> reference) {\n         return POJOHelper.deserialize(this.payload, reference);\n     }\n \n@@ -109,8 +109,8 @@ public String getPayloadAsKey() {\n     }\n \n     @Override\n-    public void setPayload(final AnyTO anyTO) {\n-        this.payload = POJOHelper.serialize(anyTO);\n+    public void setPayload(final AnyCR anyCR) {\n+        this.payload = POJOHelper.serialize(anyCR);\n     }\n \n     @Override"},{"sha":"98ab4a1d27fe72c4066acce33df638983db042c4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RemediationValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRemediationValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRemediationValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRemediationValidator.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -31,7 +31,7 @@ public boolean isValid(final Remediation remediation, final ConstraintValidatorC\n \n         switch (remediation.getOperation()) {\n             case CREATE:\n-                if (remediation.getPayloadAsTO(remediation.getAnyType().getKind().getTOClass()) == null) {\n+                if (remediation.getPayloadAsCR(remediation.getAnyType().getKind().getCRClass()) == null) {\n                     context.disableDefaultConstraintViolation();\n                     context.buildConstraintViolationWithTemplate(\n                             getTemplate(EntityViolationType.InvalidRemediation,"},{"sha":"7fe406405dbb97563a6f9f31b142df3031ff7b8d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AnyObjectProvisioningManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -22,14 +22,15 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n \n-public interface AnyObjectProvisioningManager extends ProvisioningManager<AnyObjectTO, AnyObjectUR> {\n+public interface AnyObjectProvisioningManager extends ProvisioningManager<AnyObjectTO, AnyObjectCR, AnyObjectUR> {\n \n     Pair<String, List<PropagationStatus>> create(\n-            AnyObjectTO anyObjectTO, Set<String> excludedResources, boolean nullPriorityAsync);\n+            AnyObjectCR anyObjectCR, Set<String> excludedResources, boolean nullPriorityAsync);\n \n     List<PropagationStatus> provision(String key, Collection<String> resources, boolean nullPriorityAsync);\n }"},{"sha":"4278be435b8ade1aed47e38d1ca29bbe634b2a9f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/GroupProvisioningManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -23,18 +23,18 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n \n-public interface GroupProvisioningManager extends ProvisioningManager<GroupTO, GroupUR> {\n+public interface GroupProvisioningManager extends ProvisioningManager<GroupTO, GroupCR, GroupUR> {\n \n     Pair<String, List<PropagationStatus>> create(\n-            GroupTO groupTO,\n+            GroupCR groupCR,\n             Map<String, String> groupOwnerMap,\n             Set<String> excludedResources,\n             boolean nullPriorityAsync);\n \n     List<PropagationStatus> provision(String key, Collection<String> resources, boolean nullPriorityAsync);\n-\n }"},{"sha":"4c57deecdd00af896319d0a6b7fe1673449e1b3f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/LogicActions.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n \n@@ -26,15 +27,15 @@\n  */\n public interface LogicActions {\n \n-    default <A extends AnyTO> A beforeCreate(A input) {\n+    default <C extends AnyCR> C beforeCreate(C input) {\n         return input;\n     }\n \n     default <A extends AnyTO> A afterCreate(A input) {\n         return input;\n     }\n \n-    default <P extends AnyUR> P beforeUpdate(P input) {\n+    default <U extends AnyUR> U beforeUpdate(U input) {\n         return input;\n     }\n "},{"sha":"99ab5b1c950b0372a8f8277ebbab38e5bffd083a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ProvisioningManager.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -22,26 +22,26 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n \n-public interface ProvisioningManager<T extends AnyTO, R extends AnyUR> {\n+public interface ProvisioningManager<T extends AnyTO, C extends AnyCR, U extends AnyUR> {\n \n-    Pair<String, List<PropagationStatus>> create(T anyTO, boolean nullPriorityAsync);\n+    Pair<String, List<PropagationStatus>> create(C anyCR, boolean nullPriorityAsync);\n \n-    Pair<R, List<PropagationStatus>> update(R anyUR, boolean nullPriorityAsync);\n+    Pair<U, List<PropagationStatus>> update(U anyUR, boolean nullPriorityAsync);\n \n-    Pair<R, List<PropagationStatus>> update(R anyUR, Set<String> excludedResources, boolean nullPriorityAsync);\n+    Pair<U, List<PropagationStatus>> update(U anyUR, Set<String> excludedResources, boolean nullPriorityAsync);\n \n     List<PropagationStatus> delete(String anyKey, boolean nullPriorityAsync);\n \n     List<PropagationStatus> delete(String anyKey, Set<String> excludedResources, boolean nullPriorityAsync);\n \n-    String unlink(R anyUR);\n+    String unlink(U anyUR);\n \n-    String link(R anyUR);\n+    String link(U anyUR);\n \n     List<PropagationStatus> deprovision(String anyKey, Collection<String> resources, boolean nullPriorityAsync);\n-\n }"},{"sha":"b39714973c869306a80a4efe74311c8e04e44c24","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/UserProvisioningManager.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -23,12 +23,13 @@\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n \n-public interface UserProvisioningManager extends ProvisioningManager<UserTO, UserUR> {\n+public interface UserProvisioningManager extends ProvisioningManager<UserTO, UserCR, UserUR> {\n \n     Pair<String, List<PropagationStatus>> activate(StatusR statusR, boolean nullPriorityAsync);\n \n@@ -38,11 +39,8 @@ public interface UserProvisioningManager extends ProvisioningManager<UserTO, Use\n \n     void internalSuspend(String key);\n \n-    Pair<String, List<PropagationStatus>> create(UserTO userTO, boolean storePassword, boolean nullPriorityAsync);\n-\n     Pair<String, List<PropagationStatus>> create(\n-            UserTO userTO,\n-            boolean storePassword,\n+            UserCR userCR,\n             boolean disablePwdPolicyCheck,\n             Boolean enabled,\n             Set<String> excludedResources,"},{"sha":"2fb8cb6c88886237df8bbe90490233f6575334a1","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AnyObjectDataBinder.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyObjectDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyObjectDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyObjectDataBinder.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -29,7 +30,7 @@ public interface AnyObjectDataBinder {\n \n     AnyObjectTO getAnyObjectTO(AnyObject anyObject, boolean details);\n \n-    void create(AnyObject anyObject, AnyObjectTO anyObjectTO);\n+    void create(AnyObject anyObject, AnyObjectCR anyObjectCR);\n \n     PropagationByResource update(AnyObject toBeUpdated, AnyObjectUR anyObjectUR);\n }"},{"sha":"0b13456072c765056a7e7e4834f38ef5767761e5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/GroupDataBinder.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import java.util.Map;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n@@ -34,7 +35,7 @@ public interface GroupDataBinder {\n \n     GroupTO getGroupTO(Group group, boolean details);\n \n-    void create(Group group, GroupTO groupTO);\n+    void create(Group group, GroupCR groupCR);\n \n     PropagationByResource update(Group group, GroupUR groupUR);\n "},{"sha":"43dc841d2eafcc01e7a2ae73682b6af579728a5f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/UserDataBinder.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -33,7 +34,7 @@ public interface UserDataBinder {\n \n     UserTO getUserTO(User user, boolean details);\n \n-    void create(User user, UserTO userTO, boolean storePassword);\n+    void create(User user, UserCR userCR);\n \n     /**\n      * Update user, given {@link UserUR}."},{"sha":"1a1a57888351cfc6df8ad80af425270f679dd987","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java","status":"modified","additions":40,"deletions":7,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,8 +18,10 @@\n  */\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n \n@@ -48,13 +50,29 @@ default SyncDelta preprocess(ProvisioningProfile<?, ?> profile, SyncDelta delta)\n      *\n      * @param profile profile of the pull being executed.\n      * @param delta retrieved pull information\n-     * @param entity entity\n+     * @param createReq create request\n      * @throws JobExecutionException in case of generic failure\n      */\n     default void beforeProvision(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            EntityTO entity) throws JobExecutionException {\n+            AnyCR createReq) throws JobExecutionException {\n+    }\n+\n+    /**\n+     * Action to be executed before to create a pulled realm locally.\n+     * The realm is created locally upon pull in case of the un-matching rule\n+     * {@link org.apache.syncope.common.lib.types.UnmatchingRule#PROVISION} (default un-matching rule) is applied.\n+     *\n+     * @param profile profile of the pull being executed.\n+     * @param delta retrieved pull information\n+     * @param realm realm\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    default void beforeProvision(\n+            ProvisioningProfile<?, ?> profile,\n+            SyncDelta delta,\n+            RealmTO realm) throws JobExecutionException {\n     }\n \n     /**\n@@ -64,13 +82,29 @@ default void beforeProvision(\n      *\n      * @param profile profile of the pull being executed.\n      * @param delta retrieved pull information\n-     * @param entity entity\n+     * @param createReq create request\n      * @throws JobExecutionException in case of generic failure\n      */\n     default void beforeAssign(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            EntityTO entity) throws JobExecutionException {\n+            AnyCR createReq) throws JobExecutionException {\n+    }\n+\n+    /**\n+     * Action to be executed before creating (and linking to the resource) a pulled realm locally.\n+     * The realm is created locally and linked to the pulled resource upon pull in case of the\n+     * un-matching rule {@link org.apache.syncope.common.lib.types.UnmatchingRule#ASSIGN} is applied.\n+     *\n+     * @param profile profile of the pull being executed.\n+     * @param delta retrieved pull information\n+     * @param realm realm\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    default void beforeAssign(\n+            ProvisioningProfile<?, ?> profile,\n+            SyncDelta delta,\n+            RealmTO realm) throws JobExecutionException {\n     }\n \n     /**\n@@ -142,18 +176,17 @@ default void beforeLink(\n      * The entity is updated upon pull in case of the matching rule\n      * {@link org.apache.syncope.common.lib.types.MatchingRule#UPDATE} (default matching rule) is applied.\n      *\n-     * @param <P> any object modifications\n      * @param profile profile of the pull being executed.\n      * @param delta retrieved pull information\n      * @param entity entity\n      * @param anyUR modification\n      * @throws JobExecutionException in case of generic failure.\n      */\n-    default <P extends AnyUR> void beforeUpdate(\n+    default void beforeUpdate(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n             EntityTO entity,\n-            P anyUR) throws JobExecutionException {\n+            AnyUR anyUR) throws JobExecutionException {\n     }\n \n     /**"},{"sha":"3f601e0a5283e2fd5f333bcc1faaf9d4efb602a9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -24,9 +24,9 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -63,24 +63,24 @@ public class DefaultAnyObjectProvisioningManager implements AnyObjectProvisionin\n \n     @Override\n     public Pair<String, List<PropagationStatus>> create(\n-            final AnyObjectTO anyObjectTO, final boolean nullPriorityAsync) {\n+            final AnyObjectCR anyObjectCR, final boolean nullPriorityAsync) {\n \n-        return create(anyObjectTO, Collections.<String>emptySet(), nullPriorityAsync);\n+        return create(anyObjectCR, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     public Pair<String, List<PropagationStatus>> create(\n-            final AnyObjectTO anyObjectTO, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+            final AnyObjectCR anyObjectCR, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n-        WorkflowResult<String> created = awfAdapter.create(anyObjectTO);\n+        WorkflowResult<String> created = awfAdapter.create(anyObjectCR);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getCreateTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 created.getResult(),\n                 null,\n                 created.getPropByRes(),\n-                anyObjectTO.getVirAttrs(),\n+                anyObjectCR.getVirAttrs(),\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n "},{"sha":"6b14f25f4d2f4dece14fe2feab6801f5784deee5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -28,9 +28,9 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -68,15 +68,15 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager\n     protected VirAttrHandler virtAttrHandler;\n \n     @Override\n-    public Pair<String, List<PropagationStatus>> create(final GroupTO groupTO, final boolean nullPriorityAsync) {\n-        WorkflowResult<String> created = gwfAdapter.create(groupTO);\n+    public Pair<String, List<PropagationStatus>> create(final GroupCR groupCR, final boolean nullPriorityAsync) {\n+        WorkflowResult<String> created = gwfAdapter.create(groupCR);\n \n         List<PropagationTaskInfo> tasks = propagationManager.getCreateTasks(\n                 AnyTypeKind.GROUP,\n                 created.getResult(),\n                 null,\n                 created.getPropByRes(),\n-                groupTO.getVirAttrs(),\n+                groupCR.getVirAttrs(),\n                 Collections.<String>emptySet());\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n@@ -86,23 +86,23 @@ public Pair<String, List<PropagationStatus>> create(final GroupTO groupTO, final\n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     public Pair<String, List<PropagationStatus>> create(\n-            final GroupTO groupTO,\n+            final GroupCR groupCR,\n             final Map<String, String> groupOwnerMap,\n             final Set<String> excludedResources,\n             final boolean nullPriorityAsync) {\n \n-        WorkflowResult<String> created = gwfAdapter.create(groupTO);\n+        WorkflowResult<String> created = gwfAdapter.create(groupCR);\n \n         // see ConnObjectUtils#getAnyTOFromConnObject for GroupOwnerSchema\n-        groupTO.getPlainAttr(StringUtils.EMPTY).ifPresent(groupOwner\n-                -> groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next()));\n+        groupCR.getPlainAttrs().stream().filter(attr -> StringUtils.EMPTY.equals(attr.getSchema())).findFirst().\n+                ifPresent(groupOwner -> groupOwnerMap.put(created.getResult(), groupOwner.getValues().get(0)));\n \n         List<PropagationTaskInfo> tasks = propagationManager.getCreateTasks(\n                 AnyTypeKind.GROUP,\n                 created.getResult(),\n                 null,\n                 created.getPropByRes(),\n-                groupTO.getVirAttrs(),\n+                groupCR.getVirAttrs(),\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n "},{"sha":"9847ed4485d8de99ebba6c270ae2cf4636a6b25c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":7,"deletions":16,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -29,9 +29,9 @@\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.StatusR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -75,36 +75,27 @@ public class DefaultUserProvisioningManager implements UserProvisioningManager {\n     protected UserDAO userDAO;\n \n     @Override\n-    public Pair<String, List<PropagationStatus>> create(final UserTO userTO, final boolean nullPriorityAsync) {\n-        return create(userTO, true, false, null, Collections.<String>emptySet(), nullPriorityAsync);\n-    }\n-\n-    @Override\n-    public Pair<String, List<PropagationStatus>> create(\n-            final UserTO userTO, final boolean storePassword, final boolean nullPriorityAsync) {\n-\n-        return create(userTO, storePassword, false, null, Collections.<String>emptySet(), nullPriorityAsync);\n+    public Pair<String, List<PropagationStatus>> create(final UserCR userCR, final boolean nullPriorityAsync) {\n+        return create(userCR, false, null, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     public Pair<String, List<PropagationStatus>> create(\n-            final UserTO userTO,\n-            final boolean storePassword,\n+            final UserCR userCR,\n             final boolean disablePwdPolicyCheck,\n             final Boolean enabled,\n             final Set<String> excludedResources,\n             final boolean nullPriorityAsync) {\n \n-        WorkflowResult<Pair<String, Boolean>> created =\n-                uwfAdapter.create(userTO, disablePwdPolicyCheck, enabled, storePassword);\n+        WorkflowResult<Pair<String, Boolean>> created = uwfAdapter.create(userCR, disablePwdPolicyCheck, enabled);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUserCreateTasks(\n                 created.getResult().getLeft(),\n-                userTO.getPassword(),\n+                userCR.getPassword(),\n                 created.getResult().getRight(),\n                 created.getPropByRes(),\n-                userTO.getVirAttrs(),\n+                userCR.getVirAttrs(),\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n "},{"sha":"c33e9dbb0758132c3ee1dde89cdd24f5554c4d20","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -31,6 +31,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n@@ -434,13 +435,13 @@ protected PropagationByResource fill(\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected void fill(\n             final Any any,\n-            final AnyTO anyTO,\n+            final AnyCR anyCR,\n             final AnyUtils anyUtils,\n             final SyncopeClientCompositeException scce) {\n \n         // 0. aux classes\n         any.getAuxClasses().clear();\n-        anyTO.getAuxClasses().stream().\n+        anyCR.getAuxClasses().stream().\n                 map(className -> anyTypeClassDAO.find(className)).\n                 forEachOrdered(auxClass -> {\n                     if (auxClass == null) {\n@@ -453,7 +454,7 @@ protected void fill(\n         // 1. attributes\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n-        anyTO.getPlainAttrs().stream().\n+        anyCR.getPlainAttrs().stream().\n                 filter(attrTO -> !attrTO.getValues().isEmpty()).\n                 forEach(attrTO -> {\n                     PlainSchema schema = getPlainSchema(attrTO.getSchema());\n@@ -484,7 +485,7 @@ protected void fill(\n         }\n \n         // 2. resources\n-        anyTO.getResources().forEach(resourceKey -> {\n+        anyCR.getResources().forEach(resourceKey -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n             if (resource == null) {\n                 LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \" {}, ignoring...\", resourceKey);"},{"sha":"02325d6c3cc672da8320d6a65304882e711d106e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -31,6 +31,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -131,11 +132,11 @@ public AnyObjectTO getAnyObjectTO(final AnyObject anyObject, final boolean detai\n     }\n \n     @Override\n-    public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n-        AnyType type = anyTypeDAO.find(anyObjectTO.getType());\n+    public void create(final AnyObject anyObject, final AnyObjectCR anyObjectCR) {\n+        AnyType type = anyTypeDAO.find(anyObjectCR.getType());\n         if (type == null) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n-            sce.getElements().add(anyObjectTO.getType());\n+            sce.getElements().add(anyObjectCR.getType());\n             throw sce;\n         }\n         anyObject.setType(type);\n@@ -144,27 +145,27 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n \n         // name\n         SyncopeClientException invalidGroups = SyncopeClientException.build(ClientExceptionType.InvalidGroup);\n-        if (anyObjectTO.getName() == null) {\n+        if (anyObjectCR.getName() == null) {\n             LOG.error(\"No name specified for this anyObject\");\n \n             invalidGroups.getElements().add(\"No name specified for this anyObject\");\n         } else {\n-            anyObject.setName(anyObjectTO.getName());\n+            anyObject.setName(anyObjectCR.getName());\n         }\n \n         // realm\n-        Realm realm = realmDAO.findByFullPath(anyObjectTO.getRealm());\n+        Realm realm = realmDAO.findByFullPath(anyObjectCR.getRealm());\n         if (realm == null) {\n             SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n-            noRealm.getElements().add(\"Invalid or null realm specified: \" + anyObjectTO.getRealm());\n+            noRealm.getElements().add(\"Invalid or null realm specified: \" + anyObjectCR.getRealm());\n             scce.addException(noRealm);\n         }\n         anyObject.setRealm(realm);\n \n         AnyUtils anyUtils = anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT);\n         if (anyObject.getRealm() != null) {\n             // relationships\n-            anyObjectTO.getRelationships().forEach(relationshipTO -> {\n+            anyObjectCR.getRelationships().forEach(relationshipTO -> {\n                 if (StringUtils.isBlank(relationshipTO.getOtherEndType())\n                         || AnyTypeKind.USER.name().equals(relationshipTO.getOtherEndType())\n                         || AnyTypeKind.GROUP.name().equals(relationshipTO.getOtherEndType())) {\n@@ -202,7 +203,7 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n             });\n \n             // memberships\n-            anyObjectTO.getMemberships().forEach(membershipTO -> {\n+            anyObjectCR.getMemberships().forEach(membershipTO -> {\n                 Group group = membershipTO.getGroupKey() == null\n                         ? groupDAO.findByName(membershipTO.getGroupName())\n                         : groupDAO.find(membershipTO.getGroupKey());\n@@ -230,7 +231,7 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n         }\n \n         // attributes and resources\n-        fill(anyObject, anyObjectTO, anyUtils, scce);\n+        fill(anyObject, anyObjectCR, anyUtils, scce);\n \n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {"},{"sha":"d14a7f58b062b3ca301ae3cc1a71af41f269aceb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -27,6 +27,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n@@ -95,54 +96,54 @@ private void setDynMembership(final Group group, final AnyType anyType, final St\n     }\n \n     @Override\n-    public void create(final Group group, final GroupTO groupTO) {\n+    public void create(final Group group, final GroupCR groupCR) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n         // name\n         SyncopeClientException invalidGroups = SyncopeClientException.build(ClientExceptionType.InvalidGroup);\n-        if (groupTO.getName() == null) {\n+        if (groupCR.getName() == null) {\n             LOG.error(\"No name specified for this group\");\n \n             invalidGroups.getElements().add(\"No name specified for this group\");\n         } else {\n-            group.setName(groupTO.getName());\n+            group.setName(groupCR.getName());\n         }\n \n         // realm\n-        Realm realm = realmDAO.findByFullPath(groupTO.getRealm());\n+        Realm realm = realmDAO.findByFullPath(groupCR.getRealm());\n         if (realm == null) {\n             SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n-            noRealm.getElements().add(\"Invalid or null realm specified: \" + groupTO.getRealm());\n+            noRealm.getElements().add(\"Invalid or null realm specified: \" + groupCR.getRealm());\n             scce.addException(noRealm);\n         }\n         group.setRealm(realm);\n \n         // attributes and resources\n-        fill(group, groupTO, anyUtilsFactory.getInstance(AnyTypeKind.GROUP), scce);\n+        fill(group, groupCR, anyUtilsFactory.getInstance(AnyTypeKind.GROUP), scce);\n \n         // owner\n-        if (groupTO.getUserOwner() != null) {\n-            User owner = userDAO.find(groupTO.getUserOwner());\n+        if (groupCR.getUserOwner() != null) {\n+            User owner = userDAO.find(groupCR.getUserOwner());\n             if (owner == null) {\n-                LOG.warn(\"Ignoring invalid user specified as owner: {}\", groupTO.getUserOwner());\n+                LOG.warn(\"Ignoring invalid user specified as owner: {}\", groupCR.getUserOwner());\n             } else {\n                 group.setUserOwner(owner);\n             }\n         }\n-        if (groupTO.getGroupOwner() != null) {\n-            Group owner = groupDAO.find(groupTO.getGroupOwner());\n+        if (groupCR.getGroupOwner() != null) {\n+            Group owner = groupDAO.find(groupCR.getGroupOwner());\n             if (owner == null) {\n-                LOG.warn(\"Ignoring invalid group specified as owner: {}\", groupTO.getGroupOwner());\n+                LOG.warn(\"Ignoring invalid group specified as owner: {}\", groupCR.getGroupOwner());\n             } else {\n                 group.setGroupOwner(owner);\n             }\n         }\n \n         // dynamic membership\n-        if (groupTO.getUDynMembershipCond() != null) {\n-            setDynMembership(group, anyTypeDAO.findUser(), groupTO.getUDynMembershipCond());\n+        if (groupCR.getUDynMembershipCond() != null) {\n+            setDynMembership(group, anyTypeDAO.findUser(), groupCR.getUDynMembershipCond());\n         }\n-        groupTO.getADynMembershipConds().forEach((type, fiql) -> {\n+        groupCR.getADynMembershipConds().forEach((type, fiql) -> {\n             AnyType anyType = anyTypeDAO.find(type);\n             if (anyType == null) {\n                 LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), type);\n@@ -152,7 +153,7 @@ public void create(final Group group, final GroupTO groupTO) {\n         });\n \n         // type extensions\n-        groupTO.getTypeExtensions().forEach(typeExtTO -> {\n+        groupCR.getTypeExtensions().forEach(typeExtTO -> {\n             AnyType anyType = anyTypeDAO.find(typeExtTO.getAnyType());\n             if (anyType == null) {\n                 LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), typeExtTO.getAnyType());"},{"sha":"5ae4b8bd411eaf14ec67ce1819e001b273609875","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RemediationDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -37,8 +37,8 @@ public RemediationTO getRemediationTO(final Remediation remediation) {\n \n         switch (remediation.getOperation()) {\n             case CREATE:\n-                remediationTO.setAnyTOPayload(\n-                        remediation.getPayloadAsTO(remediation.getAnyType().getKind().getTOClass()));\n+                remediationTO.setAnyCRPayload(\n+                        remediation.getPayloadAsCR(remediation.getAnyType().getKind().getCRClass()));\n                 break;\n \n             case UPDATE:"},{"sha":"79e7e03e798ca3690e4b4cfd92f93b649a60d414","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":16,"deletions":15,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -144,32 +145,32 @@ private void setPassword(final User user, final String password, final SyncopeCl\n     }\n \n     @Override\n-    public void create(final User user, final UserTO userTO, final boolean storePassword) {\n+    public void create(final User user, final UserCR userCR) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n         // set username\n-        user.setUsername(userTO.getUsername());\n+        user.setUsername(userCR.getUsername());\n \n         // set password\n-        if (StringUtils.isBlank(userTO.getPassword()) || !storePassword) {\n+        if (StringUtils.isBlank(userCR.getPassword()) || !userCR.isStorePassword()) {\n             LOG.debug(\"Password was not provided or not required to be stored\");\n         } else {\n-            setPassword(user, userTO.getPassword(), scce);\n+            setPassword(user, userCR.getPassword(), scce);\n         }\n \n-        user.setMustChangePassword(userTO.isMustChangePassword());\n+        user.setMustChangePassword(userCR.isMustChangePassword());\n \n         // security question / answer\n-        if (userTO.getSecurityQuestion() != null) {\n-            SecurityQuestion securityQuestion = securityQuestionDAO.find(userTO.getSecurityQuestion());\n+        if (userCR.getSecurityQuestion() != null) {\n+            SecurityQuestion securityQuestion = securityQuestionDAO.find(userCR.getSecurityQuestion());\n             if (securityQuestion != null) {\n                 user.setSecurityQuestion(securityQuestion);\n             }\n         }\n-        user.setSecurityAnswer(userTO.getSecurityAnswer());\n+        user.setSecurityAnswer(userCR.getSecurityAnswer());\n \n         // roles\n-        userTO.getRoles().forEach(roleKey -> {\n+        userCR.getRoles().forEach(roleKey -> {\n             Role role = roleDAO.find(roleKey);\n             if (role == null) {\n                 LOG.warn(\"Ignoring unknown role with id {}\", roleKey);\n@@ -179,18 +180,18 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n         });\n \n         // realm\n-        Realm realm = realmDAO.findByFullPath(userTO.getRealm());\n+        Realm realm = realmDAO.findByFullPath(userCR.getRealm());\n         if (realm == null) {\n             SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n-            noRealm.getElements().add(\"Invalid or null realm specified: \" + userTO.getRealm());\n+            noRealm.getElements().add(\"Invalid or null realm specified: \" + userCR.getRealm());\n             scce.addException(noRealm);\n         }\n         user.setRealm(realm);\n \n         AnyUtils anyUtils = anyUtilsFactory.getInstance(AnyTypeKind.USER);\n         if (user.getRealm() != null) {\n             // relationships\n-            userTO.getRelationships().forEach(relationshipTO -> {\n+            userCR.getRelationships().forEach(relationshipTO -> {\n                 AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getOtherEndKey());\n                 if (otherEnd == null) {\n                     LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getOtherEndKey());\n@@ -217,7 +218,7 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n             });\n \n             // memberships\n-            userTO.getMemberships().forEach(membershipTO -> {\n+            userCR.getMemberships().forEach(membershipTO -> {\n                 Group group = membershipTO.getGroupKey() == null\n                         ? groupDAO.findByName(membershipTO.getGroupName())\n                         : groupDAO.find(membershipTO.getGroupKey());\n@@ -245,7 +246,7 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n         }\n \n         // attributes and resources\n-        fill(user, userTO, anyUtils, scce);\n+        fill(user, userCR, anyUtils, scce);\n \n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {\n@@ -421,7 +422,7 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n                     plainAttrValueDAO.deleteAll(attr, anyUtils);\n                     plainAttrDAO.delete(attr);\n                 });\n-                \n+\n                 if (membPatch.getOperation() == PatchOperation.DELETE) {\n                     groupDAO.findAllResourceKeys(membership.getRightEnd().getKey()).stream().\n                             filter(resource -> reasons.containsKey(resource))."},{"sha":"4fca9f2a9b4482397e2fa68eb511b224701fba26","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SetUMembershipsJob.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n@@ -74,8 +74,7 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n                     groups.forEach(group -> {\n                         Set<String> before = membershipsBefore.get(user);\n                         if (before == null || !before.contains(group)) {\n-                            userUR.getMemberships().add(\n-                                    new MembershipPatch.Builder().\n+                            userUR.getMemberships().add(new MembershipUR.Builder().\n                                             operation(PatchOperation.ADD_REPLACE).\n                                             group(group).\n                                             build());\n@@ -95,8 +94,7 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n                     groups.forEach(group -> {\n                         Set<String> after = membershipsAfter.get(user);\n                         if (after == null || !after.contains(group)) {\n-                            userUR.getMemberships().add(\n-                                    new MembershipPatch.Builder().\n+                            userUR.getMemberships().add(new MembershipUR.Builder().\n                                             operation(PatchOperation.DELETE).\n                                             group(group).\n                                             build());"},{"sha":"22cfee1d996c80cc4e4a9dedacd2c3bc9237f088","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":20,"deletions":17,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -24,6 +24,7 @@\n import java.util.List;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -99,11 +100,13 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan\n \n     protected abstract String getName(AnyTO anyTO);\n \n-    protected abstract ProvisioningManager<?, ?> getProvisioningManager();\n+    protected abstract String getName(AnyCR anyCR);\n \n-    protected abstract AnyTO doCreate(AnyTO anyTO, SyncDelta delta);\n+    protected abstract ProvisioningManager<?, ?, ?> getProvisioningManager();\n \n-    protected abstract AnyUR doUpdate(AnyTO before, AnyUR req, SyncDelta delta, ProvisioningReport result);\n+    protected abstract AnyTO doCreate(AnyCR anyCR, SyncDelta delta);\n+\n+    protected abstract AnyUR doUpdate(AnyTO before, AnyUR anyUR, SyncDelta delta, ProvisioningReport result);\n \n     @Override\n     public void setPullExecutor(final SyncopePullExecutor executor) {\n@@ -182,25 +185,25 @@ protected List<ProvisioningReport> assign(\n             return Collections.<ProvisioningReport>emptyList();\n         }\n \n-        AnyTO anyTO = connObjectUtils.getAnyTO(delta.getObject(), profile.getTask(), provision, anyUtils);\n-        anyTO.getResources().add(profile.getTask().getResource().getKey());\n+        AnyCR anyCR = connObjectUtils.getAnyCR(delta.getObject(), profile.getTask(), provision, anyUtils);\n+        anyCR.getResources().add(profile.getTask().getResource().getKey());\n \n         ProvisioningReport result = new ProvisioningReport();\n         result.setOperation(ResourceOperation.CREATE);\n         result.setAnyType(provision.getAnyType().getKey());\n         result.setStatus(ProvisioningReport.Status.SUCCESS);\n-        result.setName(getName(anyTO));\n+        result.setName(getName(anyCR));\n         result.setUidValue(delta.getUid().getUidValue());\n \n         if (profile.isDryRun()) {\n             result.setKey(null);\n             finalize(UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), Result.SUCCESS, null, null, delta);\n         } else {\n             for (PullActions action : profile.getActions()) {\n-                action.beforeAssign(profile, delta, anyTO);\n+                action.beforeAssign(profile, delta, anyCR);\n             }\n \n-            create(anyTO, delta, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), provision, result);\n+            create(anyCR, delta, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), provision, result);\n         }\n \n         return Collections.singletonList(result);\n@@ -216,24 +219,24 @@ protected List<ProvisioningReport> provision(\n             return Collections.<ProvisioningReport>emptyList();\n         }\n \n-        AnyTO anyTO = connObjectUtils.getAnyTO(delta.getObject(), profile.getTask(), provision, anyUtils);\n+        AnyCR anyCR = connObjectUtils.getAnyCR(delta.getObject(), profile.getTask(), provision, anyUtils);\n \n         ProvisioningReport result = new ProvisioningReport();\n         result.setOperation(ResourceOperation.CREATE);\n         result.setAnyType(provision.getAnyType().getKey());\n         result.setStatus(ProvisioningReport.Status.SUCCESS);\n-        result.setName(getName(anyTO));\n+        result.setName(getName(anyCR));\n         result.setUidValue(delta.getUid().getUidValue());\n \n         if (profile.isDryRun()) {\n             result.setKey(null);\n             finalize(UnmatchingRule.toEventName(UnmatchingRule.PROVISION), Result.SUCCESS, null, null, delta);\n         } else {\n             for (PullActions action : profile.getActions()) {\n-                action.beforeProvision(profile, delta, anyTO);\n+                action.beforeProvision(profile, delta, anyCR);\n             }\n \n-            create(anyTO, delta, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), provision, result);\n+            create(anyCR, delta, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), provision, result);\n         }\n \n         return Collections.singletonList(result);\n@@ -258,7 +261,7 @@ protected void throwIgnoreProvisionException(final SyncDelta delta, final Except\n     }\n \n     protected void create(\n-            final AnyTO anyTO,\n+            final AnyCR anyCR,\n             final SyncDelta delta,\n             final String operation,\n             final Provision provision,\n@@ -269,7 +272,7 @@ protected void create(\n         Result resultStatus;\n \n         try {\n-            AnyTO created = doCreate(anyTO, delta);\n+            AnyTO created = doCreate(anyCR, delta);\n             output = created;\n             result.setKey(created.getKey());\n             result.setName(getName(created));\n@@ -283,23 +286,23 @@ protected void create(\n         } catch (PropagationException e) {\n             // A propagation failure doesn't imply a pull failure.\n             // The propagation exception status will be reported into the propagation task execution.\n-            LOG.error(\"Could not propagate {} {}\", anyTO.getType(), delta.getUid().getUidValue(), e);\n+            LOG.error(\"Could not propagate {} {}\", provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);\n             output = e;\n             resultStatus = Result.FAILURE;\n         } catch (Exception e) {\n             throwIgnoreProvisionException(delta, e);\n \n             result.setStatus(ProvisioningReport.Status.FAILURE);\n             result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-            LOG.error(\"Could not create {} {} \", anyTO.getType(), delta.getUid().getUidValue(), e);\n+            LOG.error(\"Could not create {} {} \", provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);\n             output = e;\n             resultStatus = Result.FAILURE;\n \n             if (profile.getTask().isRemediation()) {\n                 Remediation entity = entityFactory.newEntity(Remediation.class);\n                 entity.setAnyType(provision.getAnyType());\n                 entity.setOperation(ResourceOperation.CREATE);\n-                entity.setPayload(anyTO);\n+                entity.setPayload(anyCR);\n                 entity.setError(result.getMessage());\n                 entity.setInstant(new Date());\n                 entity.setRemoteName(delta.getObject().getName().getNameValue());"},{"sha":"d177613c2850f64517f0bcfa3d3dea43ce6c02ea","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DBPasswordPullActions.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.Optional;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -63,21 +65,21 @@ public class DBPasswordPullActions implements PullActions {\n     public void beforeProvision(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final EntityTO any) throws JobExecutionException {\n+            final AnyCR anyCR) throws JobExecutionException {\n \n-        if (any instanceof UserTO) {\n-            String password = ((UserTO) any).getPassword();\n+        if (anyCR instanceof UserCR) {\n+            String password = ((UserCR) anyCR).getPassword();\n             parseEncodedPassword(password, profile.getConnector());\n         }\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <M extends AnyUR> void beforeUpdate(\n+    public void beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final EntityTO entityTO,\n-            final M anyUR) throws JobExecutionException {\n+            final AnyUR anyUR) throws JobExecutionException {\n \n         if (anyUR instanceof UserUR) {\n             PasswordPatch modPassword = ((UserUR) anyUR).getPassword();"},{"sha":"08ae6639663726f0fb14ab473bca4546453d1b99","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultAnyObjectPullResultHandler.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -22,6 +22,8 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.AnyCR;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -53,7 +55,12 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected ProvisioningManager<?, ?> getProvisioningManager() {\n+    protected String getName(final AnyCR anyCR) {\n+        return AnyObjectCR.class.cast(anyCR).getName();\n+    }\n+\n+    @Override\n+    protected ProvisioningManager<?, ?, ?> getProvisioningManager() {\n         return anyObjectProvisioningManager;\n     }\n \n@@ -68,11 +75,11 @@ protected WorkflowResult<? extends AnyUR> update(final AnyUR req) {\n     }\n \n     @Override\n-    protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta) {\n-        AnyObjectTO anyObjectTO = AnyObjectTO.class.cast(anyTO);\n+    protected AnyTO doCreate(final AnyCR anyCR, final SyncDelta delta) {\n+        AnyObjectCR anyObjectCR = AnyObjectCR.class.cast(anyCR);\n \n         Map.Entry<String, List<PropagationStatus>> created = anyObjectProvisioningManager.create(\n-                anyObjectTO, Collections.singleton(profile.getTask().getResource().getKey()), true);\n+                anyObjectCR, Collections.singleton(profile.getTask().getResource().getKey()), true);\n \n         return getAnyTO(created.getKey());\n     }"},{"sha":"e4be81de9c5ce03239af5bcf5d9df60dec8d9afe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultGroupPullResultHandler.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -23,8 +23,10 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n@@ -63,7 +65,12 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected ProvisioningManager<?, ?> getProvisioningManager() {\n+    protected String getName(final AnyCR anyCR) {\n+        return GroupCR.class.cast(anyCR).getName();\n+    }\n+\n+    @Override\n+    protected ProvisioningManager<?, ?, ?> getProvisioningManager() {\n         return groupProvisioningManager;\n     }\n \n@@ -78,11 +85,11 @@ protected WorkflowResult<? extends AnyUR> update(final AnyUR req) {\n     }\n \n     @Override\n-    protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta) {\n-        GroupTO groupTO = GroupTO.class.cast(anyTO);\n+    protected AnyTO doCreate(final AnyCR anyCR, final SyncDelta delta) {\n+        GroupCR groupCR = GroupCR.class.cast(anyCR);\n \n         Map.Entry<String, List<PropagationStatus>> created = groupProvisioningManager.create(\n-                groupTO,\n+                groupCR,\n                 groupOwnerMap,\n                 Collections.singleton(profile.getTask().getResource().getKey()),\n                 true);"},{"sha":"f16b77bc50022423f2248e66162575fb0e720b4d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPullResultHandler.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -22,7 +22,9 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n@@ -53,7 +55,12 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected ProvisioningManager<?, ?> getProvisioningManager() {\n+    protected String getName(final AnyCR anyCR) {\n+        return UserCR.class.cast(anyCR).getUsername();\n+    }\n+\n+    @Override\n+    protected ProvisioningManager<?, ?, ?> getProvisioningManager() {\n         return userProvisioningManager;\n     }\n \n@@ -69,12 +76,12 @@ protected WorkflowResult<? extends AnyUR> update(final AnyUR req) {\n     }\n \n     @Override\n-    protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta) {\n-        UserTO userTO = UserTO.class.cast(anyTO);\n+    protected AnyTO doCreate(final AnyCR anyCR, final SyncDelta delta) {\n+        UserCR userCR = UserCR.class.cast(anyCR);\n \n         Boolean enabled = pullUtils.readEnabled(delta.getObject(), profile.getTask());\n         Map.Entry<String, List<PropagationStatus>> created =\n-                userProvisioningManager.create(userTO, true, true, enabled,\n+                userProvisioningManager.create(userCR, true, enabled,\n                         Collections.singleton(profile.getTask().getResource().getKey()), true);\n \n         return getAnyTO(created.getKey());"},{"sha":"b2a26af593e07e0e7a26121c7c46f42ddd07fdf7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -129,11 +129,11 @@ protected List<Object> getMembAttrValues(final SyncDelta delta, final Connector\n      */\n     @Transactional(readOnly = true)\n     @Override\n-    public <P extends AnyUR> void beforeUpdate(\n+    public void beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final EntityTO entity,\n-            final P anyUR) throws JobExecutionException {\n+            final AnyUR anyUR) throws JobExecutionException {\n \n         if (!(entity instanceof GroupTO)) {\n             super.beforeUpdate(profile, delta, entity, anyUR);"},{"sha":"3618cf8c411a291ffbcf5af81b49d590bf106941","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -20,8 +20,10 @@\n \n import java.util.Base64;\n import javax.xml.bind.DatatypeConverter;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -58,21 +60,21 @@ public class LDAPPasswordPullActions implements PullActions {\n     public void beforeProvision(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final EntityTO entity) throws JobExecutionException {\n+            final AnyCR anyCR) throws JobExecutionException {\n \n-        if (entity instanceof UserTO) {\n-            String password = ((UserTO) entity).getPassword();\n+        if (anyCR instanceof UserCR) {\n+            String password = ((UserCR) anyCR).getPassword();\n             parseEncodedPassword(password);\n         }\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <M extends AnyUR> void beforeUpdate(\n+    public void beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final EntityTO entityTO,\n-            final M anyUR) throws JobExecutionException {\n+            final AnyUR anyUR) throws JobExecutionException {\n \n         if (anyUR instanceof UserUR) {\n             PasswordPatch modPassword = ((UserUR) anyUR).getPassword();"},{"sha":"d971f4625e9a8817dcc3120d0901ff67f36e3aa5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":32,"deletions":29,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -25,7 +25,10 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -148,34 +151,34 @@ public static ConnObjectTO getConnObjectTO(final Set<Attribute> attrs) {\n     }\n \n     /**\n-     * Build a UserTO / GroupTO / AnyObjectTO out of connector object attributes and schema mapping.\n+     * Build a UserCR / GroupCR / AnyObjectCR out of connector object attributes and schema mapping.\n      *\n      * @param obj connector object\n      * @param pullTask pull task\n      * @param provision provision information\n      * @param anyUtils utils\n-     * @param <T> any object\n      * @return UserTO for the user to be created\n      */\n     @Transactional(readOnly = true)\n-    public <T extends AnyTO> T getAnyTO(\n+    public AnyCR getAnyCR(\n             final ConnectorObject obj,\n             final PullTask pullTask,\n             final Provision provision,\n             final AnyUtils anyUtils) {\n \n-        T anyTO = getAnyTOFromConnObject(obj, pullTask, provision, anyUtils);\n+        AnyTO anyTO = getAnyTOFromConnObject(obj, pullTask, provision, anyUtils);\n+        AnyCR anyCR = anyUtils.newAnyCR();\n+        EntityTOUtils.toAnyCR(anyTO, anyCR);\n \n         // (for users) if password was not set above, generate if resource is configured for that\n-        if (anyTO instanceof UserTO\n-                && StringUtils.isBlank(((UserTO) anyTO).getPassword())\n+        if (anyCR instanceof UserCR\n+                && StringUtils.isBlank(((UserCR) anyCR).getPassword())\n                 && provision.getResource().isRandomPwdIfNotProvided()) {\n \n-            UserTO userTO = (UserTO) anyTO;\n-\n+            UserCR userCR = (UserCR) anyCR;\n             List<PasswordPolicy> passwordPolicies = new ArrayList<>();\n \n-            Realm realm = realmDAO.findByFullPath(userTO.getRealm());\n+            Realm realm = realmDAO.findByFullPath(userCR.getRealm());\n             if (realm != null) {\n                 realmDAO.findAncestors(realm).stream().\n                         filter(ancestor -> ancestor.getPasswordPolicy() != null).\n@@ -184,7 +187,7 @@ public <T extends AnyTO> T getAnyTO(\n                         });\n             }\n \n-            userTO.getResources().stream().\n+            userCR.getResources().stream().\n                     map(resource -> resourceDAO.find(resource)).\n                     filter(resource -> resource != null && resource.getPasswordPolicy() != null).\n                     forEach(resource -> {\n@@ -195,24 +198,14 @@ public <T extends AnyTO> T getAnyTO(\n             try {\n                 password = passwordGenerator.generate(passwordPolicies);\n             } catch (InvalidPasswordRuleConf e) {\n-                LOG.error(\"Could not generate policy-compliant random password for {}\", userTO, e);\n+                LOG.error(\"Could not generate policy-compliant random password for {}\", userCR, e);\n \n                 password = SecureRandomUtils.generateRandomPassword(16);\n             }\n-            userTO.setPassword(password);\n+            userCR.setPassword(password);\n         }\n \n-        return anyTO;\n-    }\n-\n-    public RealmTO getRealmTO(final ConnectorObject obj, final PullTask task, final OrgUnit orgUnit) {\n-        RealmTO realmTO = new RealmTO();\n-\n-        MappingUtils.getPullItems(orgUnit.getItems()).forEach(item -> {\n-            mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), realmTO);\n-        });\n-\n-        return realmTO;\n+        return anyCR;\n     }\n \n     /**\n@@ -224,12 +217,12 @@ public RealmTO getRealmTO(final ConnectorObject obj, final PullTask task, final\n      * @param pullTask pull task\n      * @param provision provision information\n      * @param anyUtils utils\n-     * @param <T> any object\n+     * @param <U> any object\n      * @return modifications for the any object to be updated\n      */\n     @SuppressWarnings(\"unchecked\")\n     @Transactional(readOnly = true)\n-    public <T extends AnyUR> T getAnyUR(\n+    public <U extends AnyUR> U getAnyUR(\n             final String key,\n             final ConnectorObject obj,\n             final AnyTO original,\n@@ -240,7 +233,7 @@ public <T extends AnyUR> T getAnyUR(\n         AnyTO updated = getAnyTOFromConnObject(obj, pullTask, provision, anyUtils);\n         updated.setKey(key);\n \n-        T anyUR = null;\n+        U anyUR = null;\n         if (null != anyUtils.anyTypeKind()) {\n             switch (anyUtils.anyTypeKind()) {\n                 case USER:\n@@ -263,7 +256,7 @@ public <T extends AnyUR> T getAnyUR(\n                     updatedUser.setSecurityQuestion(updatedUser.getSecurityQuestion());\n                     updatedUser.setMustChangePassword(originalUser.isMustChangePassword());\n \n-                    anyUR = (T) AnyOperations.diff(updatedUser, originalUser, true);\n+                    anyUR = (U) AnyOperations.diff(updatedUser, originalUser, true);\n                     break;\n \n                 case GROUP:\n@@ -279,7 +272,7 @@ public <T extends AnyUR> T getAnyUR(\n                     updatedGroup.getADynMembershipConds().putAll(originalGroup.getADynMembershipConds());\n                     updatedGroup.getTypeExtensions().addAll(originalGroup.getTypeExtensions());\n \n-                    anyUR = (T) AnyOperations.diff(updatedGroup, originalGroup, true);\n+                    anyUR = (U) AnyOperations.diff(updatedGroup, originalGroup, true);\n                     break;\n \n                 case ANY_OBJECT:\n@@ -290,7 +283,7 @@ public <T extends AnyUR> T getAnyUR(\n                         updatedAnyObject.setName(originalAnyObject.getName());\n                     }\n \n-                    anyUR = (T) AnyOperations.diff(updatedAnyObject, originalAnyObject, true);\n+                    anyUR = (U) AnyOperations.diff(updatedAnyObject, originalAnyObject, true);\n                     break;\n \n                 default:\n@@ -323,4 +316,14 @@ private <T extends AnyTO> T getAnyTOFromConnObject(\n \n         return anyTO;\n     }\n+\n+    public RealmTO getRealmTO(final ConnectorObject obj, final PullTask task, final OrgUnit orgUnit) {\n+        RealmTO realmTO = new RealmTO();\n+\n+        MappingUtils.getPullItems(orgUnit.getItems()).forEach(item -> {\n+            mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), realmTO);\n+        });\n+\n+        return realmTO;\n+    }\n }"},{"sha":"65abf2fa90dc209d5f4e70c1d33b7005fc5bc736","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java","status":"modified","additions":43,"deletions":20,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -24,9 +24,12 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.request.GroupCR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.AttributableReqEntity;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -66,7 +69,7 @@ private AttrTO evaluateAttr(final AttrTO template, final MapContext jexlContext)\n         return result;\n     }\n \n-    private void fill(final AnyTO anyTO, final AnyTO template) {\n+    private void fill(final AttributableReqEntity anyTO, final AttributableReqEntity template) {\n         MapContext jexlContext = new MapContext();\n         JexlUtils.addFieldsToContext(anyTO, jexlContext);\n         JexlUtils.addAttrTOsToContext(anyTO.getPlainAttrs(), jexlContext);\n@@ -138,61 +141,81 @@ private void fillMemberships(final GroupableRelatableTO any, final GroupableRela\n     }\n \n     @Transactional(readOnly = true)\n-    public <T extends AnyTO> void apply(final T anyTO, final Optional<? extends AnyTemplate> anyTemplate) {\n-        if (anyTemplate.isPresent()) {\n-            apply(anyTO, anyTemplate.get().get());\n+    public void apply(final AttributableReqEntity reqEntity, final Optional<? extends AnyTemplate> template) {\n+        if (template.isPresent()) {\n+            apply(reqEntity, template.get().get());\n         }\n     }\n \n     @Transactional(readOnly = true)\n-    public <T extends AnyTO> void apply(final T anyTO, final AnyTO template) {\n-        fill(anyTO, template);\n+    public void apply(final AttributableReqEntity reqEntity, final AnyTO template) {\n+        fill(reqEntity, template);\n \n         MapContext jexlContext = new MapContext();\n-        JexlUtils.addFieldsToContext(anyTO, jexlContext);\n-        JexlUtils.addAttrTOsToContext(anyTO.getPlainAttrs(), jexlContext);\n-        JexlUtils.addAttrTOsToContext(anyTO.getDerAttrs(), jexlContext);\n-        JexlUtils.addAttrTOsToContext(anyTO.getVirAttrs(), jexlContext);\n+        JexlUtils.addFieldsToContext(reqEntity, jexlContext);\n+        JexlUtils.addAttrTOsToContext(reqEntity.getPlainAttrs(), jexlContext);\n+        JexlUtils.addAttrTOsToContext(reqEntity.getDerAttrs(), jexlContext);\n+        JexlUtils.addAttrTOsToContext(reqEntity.getVirAttrs(), jexlContext);\n \n         if (template instanceof AnyObjectTO) {\n-            fillRelationships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n-            fillMemberships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n+            fillRelationships((GroupableRelatableTO) reqEntity, ((GroupableRelatableTO) template));\n+            fillMemberships((GroupableRelatableTO) reqEntity, ((GroupableRelatableTO) template));\n         } else if (template instanceof UserTO) {\n             if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n                 String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), jexlContext);\n                 if (StringUtils.isNotBlank(evaluated)) {\n-                    ((UserTO) anyTO).setUsername(evaluated);\n+                    if (reqEntity instanceof UserTO) {\n+                        ((UserTO) reqEntity).setUsername(evaluated);\n+                    } else if (reqEntity instanceof UserCR) {\n+                        ((UserCR) reqEntity).setUsername(evaluated);\n+                    }\n                 }\n             }\n \n             if (StringUtils.isNotBlank(((UserTO) template).getPassword())) {\n                 String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), jexlContext);\n                 if (StringUtils.isNotBlank(evaluated)) {\n-                    ((UserTO) anyTO).setPassword(evaluated);\n+                    if (reqEntity instanceof UserTO) {\n+                        ((UserTO) reqEntity).setPassword(evaluated);\n+                    } else if (reqEntity instanceof UserCR) {\n+                        ((UserCR) reqEntity).setPassword(evaluated);\n+                    }\n                 }\n             }\n \n-            fillRelationships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n-            fillMemberships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n-            ((UserTO) anyTO).getRoles().addAll(((UserTO) template).getRoles());\n+            fillRelationships((GroupableRelatableTO) reqEntity, ((GroupableRelatableTO) template));\n+            fillMemberships((GroupableRelatableTO) reqEntity, ((GroupableRelatableTO) template));\n+            ((UserTO) reqEntity).getRoles().addAll(((UserTO) template).getRoles());\n         } else if (template instanceof GroupTO) {\n             if (StringUtils.isNotBlank(((GroupTO) template).getName())) {\n                 String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), jexlContext);\n                 if (StringUtils.isNotBlank(evaluated)) {\n-                    ((GroupTO) anyTO).setName(evaluated);\n+                    if (reqEntity instanceof GroupTO) {\n+                        ((GroupTO) reqEntity).setName(evaluated);\n+                    } else if (reqEntity instanceof GroupCR) {\n+                        ((GroupCR) reqEntity).setName(evaluated);\n+                    }\n                 }\n             }\n \n             if (((GroupTO) template).getUserOwner() != null) {\n                 final User userOwner = userDAO.find(((GroupTO) template).getUserOwner());\n                 if (userOwner != null) {\n-                    ((GroupTO) anyTO).setUserOwner(userOwner.getKey());\n+                    if (reqEntity instanceof GroupTO) {\n+                        ((GroupTO) reqEntity).setUserOwner(userOwner.getKey());\n+                    } else if (reqEntity instanceof GroupCR) {\n+                        ((GroupCR) reqEntity).setUserOwner(userOwner.getKey());\n+                    }\n                 }\n             }\n             if (((GroupTO) template).getGroupOwner() != null) {\n                 final Group groupOwner = groupDAO.find(((GroupTO) template).getGroupOwner());\n                 if (groupOwner != null) {\n-                    ((GroupTO) anyTO).setGroupOwner(groupOwner.getKey());\n+                    if (reqEntity instanceof GroupTO) {\n+                        ((GroupTO) reqEntity).setGroupOwner(groupOwner.getKey());\n+                    } else if (reqEntity instanceof GroupCR) {\n+                        ((GroupCR) reqEntity).setGroupOwner(groupOwner.getKey());\n+                    }\n                 }\n             }\n         }"},{"sha":"3277109a71414413b2fe320822639af5e6d97068","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -29,6 +29,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.ResourceAR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n@@ -55,13 +56,13 @@\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n \n-public abstract class AbstractAnyService<TO extends AnyTO, UR extends AnyUR>\n+public abstract class AbstractAnyService<TO extends AnyTO, CR extends AnyCR, UR extends AnyUR>\n         extends AbstractServiceImpl\n         implements AnyService<TO> {\n \n     protected abstract AnyDAO<?> getAnyDAO();\n \n-    protected abstract AbstractAnyLogic<TO, UR> getAnyLogic();\n+    protected abstract AbstractAnyLogic<TO, CR, UR> getAnyLogic();\n \n     protected abstract UR newUpdateReq(String key);\n "},{"sha":"76605628db99eff134fbf3212ec07f62862228ab","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -21,6 +21,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -37,7 +38,8 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class AnyObjectServiceImpl extends AbstractAnyService<AnyObjectTO, AnyObjectUR> implements AnyObjectService {\n+public class AnyObjectServiceImpl extends AbstractAnyService<AnyObjectTO, AnyObjectCR, AnyObjectUR>\n+        implements AnyObjectService {\n \n     @Autowired\n     private AnyObjectDAO anyObjectDAO;\n@@ -51,7 +53,7 @@ protected AnyDAO<?> getAnyDAO() {\n     }\n \n     @Override\n-    protected AbstractAnyLogic<AnyObjectTO, AnyObjectUR> getAnyLogic() {\n+    protected AbstractAnyLogic<AnyObjectTO, AnyObjectCR, AnyObjectUR> getAnyLogic() {\n         return logic;\n     }\n \n@@ -61,8 +63,8 @@ protected AnyObjectUR newUpdateReq(final String key) {\n     }\n \n     @Override\n-    public Response create(final AnyObjectTO anyObjectTO) {\n-        ProvisioningResult<AnyObjectTO> created = logic.create(anyObjectTO, isNullPriorityAsync());\n+    public Response create(final AnyObjectCR createReq) {\n+        ProvisioningResult<AnyObjectTO> created = logic.create(createReq, isNullPriorityAsync());\n         return createResponse(created);\n     }\n "},{"sha":"855dd87f47c6ababcdac1ce57ae7ccae09ecad1b","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -34,7 +35,7 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class GroupServiceImpl extends AbstractAnyService<GroupTO, GroupUR> implements GroupService {\n+public class GroupServiceImpl extends AbstractAnyService<GroupTO, GroupCR, GroupUR> implements GroupService {\n \n     @Autowired\n     private GroupDAO groupDAO;\n@@ -48,7 +49,7 @@ protected AnyDAO<?> getAnyDAO() {\n     }\n \n     @Override\n-    protected AbstractAnyLogic<GroupTO, GroupUR> getAnyLogic() {\n+    protected AbstractAnyLogic<GroupTO, GroupCR, GroupUR> getAnyLogic() {\n         return logic;\n     }\n \n@@ -58,8 +59,8 @@ protected GroupUR newUpdateReq(final String key) {\n     }\n \n     @Override\n-    public Response create(final GroupTO groupTO) {\n-        ProvisioningResult<GroupTO> created = logic.create(groupTO, isNullPriorityAsync());\n+    public Response create(final GroupCR createReq) {\n+        ProvisioningResult<GroupTO> created = logic.create(createReq, isNullPriorityAsync());\n         return createResponse(created);\n     }\n "},{"sha":"a0141c551f01e3d92024e2fb8567ab0a4fc2b74e","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RemediationServiceImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -22,8 +22,8 @@\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n-import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RemediationTO;\n@@ -72,8 +72,8 @@ public Response delete(final String key) {\n     }\n \n     @Override\n-    public Response remedy(final String remediationKey, final AnyTO anyTO) {\n-        ProvisioningResult<?> created = logic.remedy(remediationKey, anyTO, isNullPriorityAsync());\n+    public Response remedy(final String remediationKey, final AnyCR anyCR) {\n+        ProvisioningResult<?> created = logic.remedy(remediationKey, anyCR, isNullPriorityAsync());\n         return createResponse(created);\n     }\n "},{"sha":"2a0e2d303ae13abb007f8e64a4bc5c7e051227af","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -44,14 +45,14 @@ public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelf\n     private SyncopeLogic syncopeLogic;\n \n     @Override\n-    public Response create(final UserTO userTO, final boolean storePassword) {\n+    public Response create(final UserCR createReq) {\n         if (!syncopeLogic.isSelfRegAllowed()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.DelegatedAdministration);\n             sce.getElements().add(\"Self registration forbidden by configuration\");\n             throw sce;\n         }\n \n-        ProvisioningResult<UserTO> created = logic.selfCreate(userTO, storePassword, isNullPriorityAsync());\n+        ProvisioningResult<UserTO> created = logic.selfCreate(createReq, isNullPriorityAsync());\n         return createResponse(created);\n     }\n "},{"sha":"79d40233302c77bd6ba310ff733b9d111d3f2755","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -21,6 +21,7 @@\n import java.util.Date;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -33,7 +34,7 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class UserServiceImpl extends AbstractAnyService<UserTO, UserUR> implements UserService {\n+public class UserServiceImpl extends AbstractAnyService<UserTO, UserCR, UserUR> implements UserService {\n \n     @Autowired\n     private UserDAO userDAO;\n@@ -47,7 +48,7 @@ protected AnyDAO<?> getAnyDAO() {\n     }\n \n     @Override\n-    protected AbstractAnyLogic<UserTO, UserUR> getAnyLogic() {\n+    protected AbstractAnyLogic<UserTO, UserCR, UserUR> getAnyLogic() {\n         return logic;\n     }\n \n@@ -57,8 +58,8 @@ protected UserUR newUpdateReq(final String key) {\n     }\n \n     @Override\n-    public Response create(final UserTO userTO, final boolean storePassword) {\n-        ProvisioningResult<UserTO> created = logic.create(userTO, storePassword, isNullPriorityAsync());\n+    public Response create(final UserCR createReq) {\n+        ProvisioningResult<UserTO> created = logic.create(createReq, isNullPriorityAsync());\n         return createResponse(created);\n     }\n "},{"sha":"8aaaefca81602f4b6e159799bd3606e24f0a203a","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/AnyObjectWorkflowAdapter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FAnyObjectWorkflowAdapter.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.workflow.api;\n \n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n \n /**\n  * Interface for calling underlying workflow implementations.\n@@ -30,10 +30,10 @@ public interface AnyObjectWorkflowAdapter extends WorkflowAdapter {\n     /**\n      * Create a anyObject.\n      *\n-     * @param anyObjectTO anyObject to be created and whether to propagate it as active\n+     * @param anyObjectCR anyObject to be created and whether to propagate it as active\n      * @return anyObject just created\n      */\n-    WorkflowResult<String> create(AnyObjectTO anyObjectTO);\n+    WorkflowResult<String> create(AnyObjectCR anyObjectCR);\n \n     /**\n      * Update a anyObject."},{"sha":"8743d26d256e9ba4a2647d1b6697b33516175915","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/GroupWorkflowAdapter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FGroupWorkflowAdapter.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.workflow.api;\n \n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.common.lib.to.GroupTO;\n \n /**\n  * Interface for calling underlying workflow implementations.\n@@ -30,10 +30,10 @@ public interface GroupWorkflowAdapter extends WorkflowAdapter {\n     /**\n      * Create a group.\n      *\n-     * @param groupTO group to be created and whether to propagate it as active\n+     * @param groupCR group to be created and whether to propagate it as active\n      * @return group just created\n      */\n-    WorkflowResult<String> create(GroupTO groupTO);\n+    WorkflowResult<String> create(GroupCR groupCR);\n \n     /**\n      * Update a group."},{"sha":"2c728c354f9a25fd0edca20187c3ca9de280acf0","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/UserWorkflowAdapter.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.core.workflow.api;\n \n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.common.lib.to.UserTO;\n \n /**\n  * Interface for calling underlying workflow implementations.\n@@ -31,23 +31,20 @@ public interface UserWorkflowAdapter extends WorkflowAdapter {\n     /**\n      * Create an user.\n      *\n-     * @param userTO user to be created and whether to propagate it as active\n-     * @param storePassword whether password shall be stored into the internal storage\n+     * @param userCR user to be created and whether to propagate it as active\n      * @return user just created\n      */\n-    WorkflowResult<Pair<String, Boolean>> create(UserTO userTO, boolean storePassword);\n+    WorkflowResult<Pair<String, Boolean>> create(UserCR userCR);\n \n     /**\n      * Create an user, optionally disabling password policy check.\n      *\n-     * @param userTO user to be created and whether to propagate it as active\n+     * @param userCR user to be created and whether to propagate it as active\n      * @param disablePwdPolicyCheck disable password policy check?\n      * @param enabled specify true/false to force active/supended status\n-     * @param storePassword whether password shall be stored into the internal storage\n      * @return user just created\n      */\n-    WorkflowResult<Pair<String, Boolean>> create(\n-            UserTO userTO, boolean disablePwdPolicyCheck, final Boolean enabled, boolean storePassword);\n+    WorkflowResult<Pair<String, Boolean>> create(UserCR userCR, boolean disablePwdPolicyCheck, final Boolean enabled);\n \n     /**\n      * Activate an user."},{"sha":"5b4a975c6aa87c7a4f5442d21e19bab40554b9a3","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractAnyObjectWorkflowAdapter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -47,11 +47,11 @@ public String getPrefix() {\n         return null;\n     }\n \n-    protected abstract WorkflowResult<String> doCreate(AnyObjectTO anyObjectTO);\n+    protected abstract WorkflowResult<String> doCreate(AnyObjectCR anyObjectCR);\n \n     @Override\n-    public WorkflowResult<String> create(final AnyObjectTO anyObjectTO) {\n-        return doCreate(anyObjectTO);\n+    public WorkflowResult<String> create(final AnyObjectCR anyObjectCR) {\n+        return doCreate(anyObjectCR);\n     }\n \n     protected abstract WorkflowResult<AnyObjectUR> doUpdate(AnyObject anyObject, AnyObjectUR anyObjectUR);"},{"sha":"27d3adf7ea5b83fff7ed133be240f0fca5174971","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractGroupWorkflowAdapter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -47,11 +47,11 @@ public String getPrefix() {\n         return null;\n     }\n \n-    protected abstract WorkflowResult<String> doCreate(GroupTO groupTO);\n+    protected abstract WorkflowResult<String> doCreate(GroupCR groupCR);\n \n     @Override\n-    public WorkflowResult<String> create(final GroupTO groupTO) {\n-        return doCreate(groupTO);\n+    public WorkflowResult<String> create(final GroupCR groupCR) {\n+        return doCreate(groupCR);\n     }\n \n     protected abstract WorkflowResult<GroupUR> doUpdate(Group group, GroupUR groupUR);"},{"sha":"52af9a21c99f58962f8cdc82a157c9771d92606f","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractUserWorkflowAdapter.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -20,8 +20,8 @@\n \n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -54,21 +54,20 @@ public String getPrefix() {\n     }\n \n     @Override\n-    public WorkflowResult<Pair<String, Boolean>> create(final UserTO userTO, final boolean storePassword) {\n-        return create(userTO, false, null, storePassword);\n+    public WorkflowResult<Pair<String, Boolean>> create(final UserCR userCR) {\n+        return create(userCR, false, null);\n     }\n \n     protected abstract WorkflowResult<Pair<String, Boolean>> doCreate(\n-            UserTO userTO, boolean disablePwdPolicyCheck, Boolean enabled, boolean storePassword);\n+            UserCR userCR, boolean disablePwdPolicyCheck, Boolean enabled);\n \n     @Override\n     public WorkflowResult<Pair<String, Boolean>> create(\n-            final UserTO userTO,\n+            final UserCR userCR,\n             final boolean disablePwdPolicyCheck,\n-            final Boolean enabled,\n-            final boolean storePassword) {\n+            final Boolean enabled) {\n \n-        return doCreate(userTO, disablePwdPolicyCheck, enabled, storePassword);\n+        return doCreate(userCR, disablePwdPolicyCheck, enabled);\n     }\n \n     protected abstract WorkflowResult<String> doActivate(User user, String token);"},{"sha":"1439f25d9153ec836a2153def5da443269395dff","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultAnyObjectWorkflowAdapter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -31,9 +31,9 @@\n public class DefaultAnyObjectWorkflowAdapter extends AbstractAnyObjectWorkflowAdapter {\n \n     @Override\n-    protected WorkflowResult<String> doCreate(final AnyObjectTO anyObjectTO) {\n+    protected WorkflowResult<String> doCreate(final AnyObjectCR anyObjectCR) {\n         AnyObject anyObject = entityFactory.newEntity(AnyObject.class);\n-        dataBinder.create(anyObject, anyObjectTO);\n+        dataBinder.create(anyObject, anyObjectCR);\n         anyObject = anyObjectDAO.save(anyObject);\n \n         PropagationByResource propByRes = new PropagationByResource();"},{"sha":"691ee97ad2848dd8d7de0a431242f004c7dae837","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultGroupWorkflowAdapter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -31,9 +31,9 @@\n public class DefaultGroupWorkflowAdapter extends AbstractGroupWorkflowAdapter {\n \n     @Override\n-    protected WorkflowResult<String> doCreate(final GroupTO groupTO) {\n+    protected WorkflowResult<String> doCreate(final GroupCR groupCR) {\n         Group group = entityFactory.newEntity(Group.class);\n-        dataBinder.create(group, groupTO);\n+        dataBinder.create(group, groupCR);\n         group = groupDAO.saveAndRefreshDynMemberships(group);\n \n         PropagationByResource propByRes = new PropagationByResource();"},{"sha":"b71c5152b33233bebcad40d89427fea3a7531187","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -20,8 +20,8 @@\n \n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n@@ -40,13 +40,12 @@ public class DefaultUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n \n     @Override\n     protected WorkflowResult<Pair<String, Boolean>> doCreate(\n-            final UserTO userTO,\n+            final UserCR userCR,\n             final boolean disablePwdPolicyCheck,\n-            final Boolean enabled,\n-            final boolean storePassword) {\n+            final Boolean enabled) {\n \n         User user = entityFactory.newEntity(User.class);\n-        dataBinder.create(user, userTO, storePassword);\n+        dataBinder.create(user, userCR);\n \n         // this will make UserValidator not to consider password policies at all\n         if (disablePwdPolicyCheck) {"},{"sha":"a513955742cad5e1ac2137fde58b0b7020804ffc","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelAnyObjectProvisioningManager.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -27,9 +27,9 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.PollingConsumer;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n@@ -38,23 +38,23 @@\n         extends AbstractCamelProvisioningManager implements AnyObjectProvisioningManager {\n \n     @Override\n-    public Pair<String, List<PropagationStatus>> create(final AnyObjectTO any, final boolean nullPriorityAsync) {\n-        return create(any, Collections.<String>emptySet(), nullPriorityAsync);\n+    public Pair<String, List<PropagationStatus>> create(final AnyObjectCR req, final boolean nullPriorityAsync) {\n+        return create(req, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Pair<String, List<PropagationStatus>> create(\n-            final AnyObjectTO anyObjectTO, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+            final AnyObjectCR req, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:createAnyObjectPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n         props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        sendMessage(\"direct:createAnyObject\", anyObjectTO, props);\n+        sendMessage(\"direct:createAnyObject\", req, props);\n \n         Exchange exchange = pollingConsumer.receive();\n "},{"sha":"c66eeef2af74a74153465e949981c868c7b706bd","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelGroupProvisioningManager.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -27,9 +27,9 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.PollingConsumer;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n@@ -39,14 +39,14 @@\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<String, List<PropagationStatus>> create(final GroupTO groupTO, final boolean nullPriorityAsync) {\n+    public Pair<String, List<PropagationStatus>> create(final GroupCR req, final boolean nullPriorityAsync) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:createGroupPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", Collections.<String>emptySet());\n         props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        sendMessage(\"direct:createGroup\", groupTO, props);\n+        sendMessage(\"direct:createGroup\", req, props);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -61,7 +61,7 @@ public Pair<String, List<PropagationStatus>> create(final GroupTO groupTO, final\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Pair<String, List<PropagationStatus>> create(\n-            final GroupTO groupTO,\n+            final GroupCR req,\n             final Map<String, String> groupOwnerMap,\n             final Set<String> excludedResources,\n             final boolean nullPriorityAsync) {\n@@ -73,7 +73,7 @@ public Pair<String, List<PropagationStatus>> create(\n         props.put(\"excludedResources\", excludedResources);\n         props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        sendMessage(\"direct:createGroupInPull\", groupTO, props);\n+        sendMessage(\"direct:createGroupInPull\", req, props);\n \n         Exchange exchange = pollingConsumer.receive();\n "},{"sha":"4540ac83e02026c2cfbea806eb5afbddc2a614a3","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"modified","additions":5,"deletions":14,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -29,9 +29,9 @@\n import org.apache.camel.PollingConsumer;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n@@ -46,23 +46,15 @@ public class CamelUserProvisioningManager extends AbstractCamelProvisioningManag\n     private static final Logger LOG = LoggerFactory.getLogger(CamelUserProvisioningManager.class);\n \n     @Override\n-    public Pair<String, List<PropagationStatus>> create(final UserTO userTO, final boolean nullPriorityAsync) {\n-        return create(userTO, true, false, null, Collections.<String>emptySet(), nullPriorityAsync);\n-    }\n-\n-    @Override\n-    public Pair<String, List<PropagationStatus>> create(\n-            final UserTO userTO, final boolean storePassword, final boolean nullPriorityAsync) {\n-\n-        return create(userTO, storePassword, false, null, Collections.<String>emptySet(), nullPriorityAsync);\n+    public Pair<String, List<PropagationStatus>> create(final UserCR req, final boolean nullPriorityAsync) {\n+        return create(req, false, null, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Pair<String, List<PropagationStatus>> create(\n-            final UserTO userTO,\n-            final boolean storePassword,\n+            final UserCR req,\n             final boolean disablePwdPolicyCheck,\n             final Boolean enabled,\n             final Set<String> excludedResources,\n@@ -71,13 +63,12 @@ public Pair<String, List<PropagationStatus>> create(\n         PollingConsumer pollingConsumer = getConsumer(\"direct:createPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"storePassword\", storePassword);\n         props.put(\"disablePwdPolicyCheck\", disablePwdPolicyCheck);\n         props.put(\"enabled\", enabled);\n         props.put(\"excludedResources\", excludedResources);\n         props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        sendMessage(\"direct:createUser\", userTO, props);\n+        sendMessage(\"direct:createUser\", req, props);\n \n         Exchange exchange = pollingConsumer.receive();\n "},{"sha":"4f86cff6f0f141f045db461b92d2ac6892f2f6ff","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -25,10 +25,10 @@\n import org.apache.camel.Exchange;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.request.AnyCR;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n+import org.apache.syncope.common.lib.request.GroupCR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -48,46 +48,46 @@ public void process(final Exchange exchange) throws Exception {\n             Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n             Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n-            if (actual instanceof UserTO) {\n+            if (actual instanceof UserCR) {\n                 WorkflowResult<Pair<String, Boolean>> created =\n                         (WorkflowResult<Pair<String, Boolean>>) exchange.getIn().getBody();\n \n                 List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserCreateTasks(\n                         created.getResult().getKey(),\n-                        ((UserTO) actual).getPassword(),\n+                        ((UserCR) actual).getPassword(),\n                         created.getResult().getValue(),\n                         created.getPropByRes(),\n-                        ((UserTO) actual).getVirAttrs(),\n+                        ((UserCR) actual).getVirAttrs(),\n                         excludedResources);\n                 PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n \n                 exchange.getOut().setBody(\n                         Pair.of(created.getResult().getKey(), reporter.getStatuses()));\n-            } else if (actual instanceof AnyTO) {\n+            } else if (actual instanceof AnyCR) {\n                 WorkflowResult<String> created = (WorkflowResult<String>) exchange.getIn().getBody();\n \n-                if (actual instanceof GroupTO && isPull()) {\n+                if (actual instanceof GroupCR && isPull()) {\n                     Map<String, String> groupOwnerMap = exchange.getProperty(\"groupOwnerMap\", Map.class);\n-                    ((GroupTO) actual).getPlainAttr(StringUtils.EMPTY).ifPresent(groupOwner\n+                    ((GroupCR) actual).getPlainAttr(StringUtils.EMPTY).ifPresent(groupOwner\n                             -> groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next()));\n \n                     List<PropagationTaskInfo> taskInfos = getPropagationManager().getCreateTasks(\n                             AnyTypeKind.GROUP,\n                             created.getResult(),\n                             null,\n                             created.getPropByRes(),\n-                            ((AnyTO) actual).getVirAttrs(),\n+                            ((AnyCR) actual).getVirAttrs(),\n                             excludedResources);\n                     getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n \n                     exchange.getOut().setBody(Pair.of(created.getResult(), null));\n                 } else {\n                     List<PropagationTaskInfo> taskInfos = getPropagationManager().getCreateTasks(\n-                            actual instanceof AnyObjectTO ? AnyTypeKind.ANY_OBJECT : AnyTypeKind.GROUP,\n+                            actual instanceof AnyObjectCR ? AnyTypeKind.ANY_OBJECT : AnyTypeKind.GROUP,\n                             created.getResult(),\n                             null,\n                             created.getPropByRes(),\n-                            ((AnyTO) actual).getVirAttrs(),\n+                            ((AnyCR) actual).getVirAttrs(),\n                             excludedResources);\n                     PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n "},{"sha":"d7c3afd06dc5648baa4d710c83a96dd20d1146be","filename":"ext/camel/provisioning-camel/src/main/resources/userRoutes.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -25,7 +25,7 @@ under the License.\n       <simple>${body}</simple>\n     </setProperty>\n     <doTry>\n-      <bean method=\"create(${body},${property.disablePwdPolicyCheck},${property.enabled},${property.storePassword})\"\n+      <bean method=\"create(${body},${property.disablePwdPolicyCheck},${property.enabled})\"\n             ref=\"uwfAdapter\" />\n       <to uri=\"propagate:create?anyTypeKind=USER\"/>\n       <to uri=\"direct:createPort\"/>"},{"sha":"78f9e8f74351e8e1fc077499de3e0d818a8d8321","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -55,6 +55,8 @@ public final class FlowableRuntimeUtils {\n \n     public static final String FORM_SUBMITTER = \"formSubmitter\";\n \n+    public static final String USER_CR = \"userCR\";\n+\n     public static final String USER_TO = \"userTO\";\n \n     public static final String ENABLED = \"enabled\";\n@@ -73,8 +75,6 @@ public final class FlowableRuntimeUtils {\n \n     public static final String ENCRYPTED_PWD = \"encryptedPwd\";\n \n-    public static final String STORE_PASSWORD = \"storePassword\";\n-\n     public static final String EVENT = \"event\";\n \n     public static String encrypt(final String clear) {"},{"sha":"6ab00df5af872d5ec1095664140605920a19839b","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -26,8 +26,8 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowTask;\n import org.apache.syncope.common.lib.to.WorkflowTaskExecInput;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -82,16 +82,14 @@ protected User lazyLoad(final User user) {\n \n     @Override\n     protected WorkflowResult<Pair<String, Boolean>> doCreate(\n-            final UserTO userTO,\n+            final UserCR userCR,\n             final boolean disablePwdPolicyCheck,\n-            final Boolean enabled,\n-            final boolean storePassword) {\n+            final Boolean enabled) {\n \n         Map<String, Object> variables = new HashMap<>();\n         variables.put(FlowableRuntimeUtils.WF_EXECUTOR, AuthContextUtils.getUsername());\n-        variables.put(FlowableRuntimeUtils.USER_TO, userTO);\n+        variables.put(FlowableRuntimeUtils.USER_CR, userCR);\n         variables.put(FlowableRuntimeUtils.ENABLED, enabled);\n-        variables.put(FlowableRuntimeUtils.STORE_PASSWORD, storePassword);\n \n         ProcessInstance procInst = null;\n         try {\n@@ -105,9 +103,9 @@ protected WorkflowResult<Pair<String, Boolean>> doCreate(\n         engine.getRuntimeService().removeVariable(\n                 procInst.getProcessInstanceId(), FlowableRuntimeUtils.WF_EXECUTOR);\n         engine.getRuntimeService().removeVariable(\n-                procInst.getProcessInstanceId(), FlowableRuntimeUtils.USER_TO);\n+                procInst.getProcessInstanceId(), FlowableRuntimeUtils.USER_CR);\n         engine.getRuntimeService().removeVariable(\n-                procInst.getProcessInstanceId(), FlowableRuntimeUtils.STORE_PASSWORD);\n+                procInst.getProcessInstanceId(), FlowableRuntimeUtils.USER_TO);\n \n         User user = engine.getRuntimeService().\n                 getVariable(procInst.getProcessInstanceId(), FlowableRuntimeUtils.USER, User.class);\n@@ -149,7 +147,7 @@ protected WorkflowResult<Pair<String, Boolean>> doCreate(\n                 procInst.getProcessInstanceId(),\n                 created,\n                 dataBinder.getUserTO(created, true),\n-                userTO.getPassword(),\n+                userCR.getPassword(),\n                 enabled,\n                 propByRes);\n \n@@ -413,8 +411,8 @@ public WorkflowResult<String> executeNextTask(final WorkflowTaskExecInput workfl\n         FlowableRuntimeUtils.updateStatus(engine, procInstID, user);\n         user = userDAO.save(user);\n \n-        engine.getRuntimeService().setVariable(\n-                procInstID, FlowableRuntimeUtils.USER_TO, dataBinder.getUserTO(user, true));\n+        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.USER_TO, dataBinder.\n+                getUserTO(user, true));\n \n         if (engine.getRuntimeService().createProcessInstanceQuery().\n                 processInstanceId(procInstID).active().list().isEmpty()) {"},{"sha":"1d92553d6e5da3943e17a5a0f84915f00ff021fe","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableWorkflowUtils.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableWorkflowUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableWorkflowUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableWorkflowUtils.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -22,14 +22,12 @@\n import org.apache.syncope.core.flowable.support.DomainProcessEngine;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n \n public class FlowableWorkflowUtils {\n \n     @Autowired\n     protected DomainProcessEngine engine;\n \n-    @Transactional(readOnly = true)\n     public boolean isUserIngroup(final UserTO user, final String groupName) {\n         return user.getMemberships().stream().\n                 anyMatch(membership -> groupName != null && groupName.equals(membership.getGroupName()));"},{"sha":"a31cdf49569773ababe43d3c2e94d8802c160422","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Create.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FCreate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FCreate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FCreate.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.flowable.task;\n \n-import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n@@ -38,12 +38,11 @@ public class Create extends FlowableServiceTask {\n \n     @Override\n     protected void doExecute(final DelegateExecution execution) {\n-        UserTO userTO = execution.getVariable(FlowableRuntimeUtils.USER_TO, UserTO.class);\n-        Boolean storePassword = execution.getVariable(FlowableRuntimeUtils.STORE_PASSWORD, Boolean.class);\n+        UserCR userCR = execution.getVariable(FlowableRuntimeUtils.USER_CR, UserCR.class);\n \n         // create user\n         User user = entityFactory.newEntity(User.class);\n-        dataBinder.create(user, userTO, storePassword == null ? true : storePassword);\n+        dataBinder.create(user, userCR);\n \n         // report user as result\n         execution.setVariable(FlowableRuntimeUtils.USER, user);"},{"sha":"2df0dfd799afb9190394aa912bef84898bb41e23","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/oidc/OIDCUserManager.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -27,7 +27,9 @@\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n@@ -238,27 +240,30 @@ public void fill(final OIDCProvider op, final OIDCLoginResponseTO responseTO, fi\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     public String create(final OIDCProvider op, final OIDCLoginResponseTO responseTO, final String email) {\n-        UserTO userTO = new UserTO();\n+        UserCR userCR = new UserCR();\n+        userCR.setStorePassword(false);\n \n         if (op.getUserTemplate() != null && op.getUserTemplate().get() != null) {\n-            templateUtils.apply(userTO, op.getUserTemplate().get());\n+            templateUtils.apply(userCR, op.getUserTemplate().get());\n         }\n \n         List<OIDCProviderActions> actions = getActions(op);\n         for (OIDCProviderActions action : actions) {\n-            userTO = action.beforeCreate(userTO, responseTO);\n+            userCR = action.beforeCreate(userCR, responseTO);\n         }\n \n+        UserTO userTO = new UserTO();\n+        EntityTOUtils.toAnyTO(userCR, userTO);\n         fill(op, responseTO, userTO);\n \n-        if (userTO.getRealm() == null) {\n-            userTO.setRealm(SyncopeConstants.ROOT_REALM);\n+        if (userCR.getRealm() == null) {\n+            userCR.setRealm(SyncopeConstants.ROOT_REALM);\n         }\n-        if (userTO.getUsername() == null) {\n-            userTO.setUsername(email);\n+        if (userCR.getUsername() == null) {\n+            userCR.setUsername(email);\n         }\n \n-        Pair<String, List<PropagationStatus>> created = provisioningManager.create(userTO, false, false);\n+        Pair<String, List<PropagationStatus>> created = provisioningManager.create(userCR, false);\n         userTO = binder.getUserTO(created.getKey());\n \n         for (OIDCProviderActions action : actions) {"},{"sha":"45a3f3b144a00622978195860ce532b4ec3c70b1","filename":"ext/oidcclient/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/OIDCProviderActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Foidcclient%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FOIDCProviderActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Foidcclient%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FOIDCProviderActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FOIDCProviderActions.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,18 +18,18 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n import org.apache.syncope.common.lib.to.UserTO;\n \n public interface OIDCProviderActions {\n \n-    UserTO beforeCreate(UserTO input, OIDCLoginResponseTO loginResponse);\n+    UserCR beforeCreate(UserCR input, OIDCLoginResponseTO loginResponse);\n \n     UserTO afterCreate(UserTO input, OIDCLoginResponseTO loginResponse);\n \n     UserUR beforeUpdate(UserUR input, OIDCLoginResponseTO loginResponse);\n \n     UserTO afterUpdate(UserTO input, OIDCLoginResponseTO loginResponse);\n-\n }"},{"sha":"21505671ff8290950112a87182822858de852218","filename":"ext/oidcclient/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultOIDCProviderActions.java","status":"removed","additions":0,"deletions":48,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/366f56a75edb519e173d83abf5e019002090f052/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultOIDCProviderActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/366f56a75edb519e173d83abf5e019002090f052/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultOIDCProviderActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultOIDCProviderActions.java?ref=366f56a75edb519e173d83abf5e019002090f052","patch":"@@ -1,48 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java;\n-\n-import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.core.provisioning.api.OIDCProviderActions;\n-\n-public class DefaultOIDCProviderActions implements OIDCProviderActions {\n-\n-    @Override\n-    public UserTO beforeCreate(final UserTO input, final OIDCLoginResponseTO loginResponse) {\n-        return input;\n-    }\n-\n-    @Override\n-    public UserTO afterCreate(final UserTO input, final OIDCLoginResponseTO loginResponse) {\n-        return input;\n-    }\n-\n-    @Override\n-    public UserUR beforeUpdate(final UserUR input, final OIDCLoginResponseTO loginResponse) {\n-        return input;\n-    }\n-\n-    @Override\n-    public UserTO afterUpdate(final UserTO input, final OIDCLoginResponseTO loginResponse) {\n-        return input;\n-    }\n-\n-}"},{"sha":"7cc36e25a5fa5d18afe6275e6985b61ccad4c5a8","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2UserManager.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -27,7 +27,9 @@\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n@@ -252,27 +254,30 @@ public void fill(final String idpKey, final SAML2LoginResponseTO responseTO, fin\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     public String create(final SAML2IdPEntity idp, final SAML2LoginResponseTO responseTO, final String nameID) {\n-        UserTO userTO = new UserTO();\n+        UserCR userCR = new UserCR();\n+        userCR.setStorePassword(false);\n \n         if (idp.getUserTemplate() != null) {\n-            templateUtils.apply(userTO, idp.getUserTemplate());\n+            templateUtils.apply(userCR, idp.getUserTemplate());\n         }\n \n         List<SAML2IdPActions> actions = getActions(idp);\n         for (SAML2IdPActions action : actions) {\n-            userTO = action.beforeCreate(userTO, responseTO);\n+            userCR = action.beforeCreate(userCR, responseTO);\n         }\n \n+        UserTO userTO = new UserTO();\n+        EntityTOUtils.toAnyTO(userCR, userTO);\n         fill(idp.getKey(), responseTO, userTO);\n \n-        if (userTO.getRealm() == null) {\n-            userTO.setRealm(SyncopeConstants.ROOT_REALM);\n+        if (userCR.getRealm() == null) {\n+            userCR.setRealm(SyncopeConstants.ROOT_REALM);\n         }\n-        if (userTO.getUsername() == null) {\n-            userTO.setUsername(nameID);\n+        if (userCR.getUsername() == null) {\n+            userCR.setUsername(nameID);\n         }\n \n-        Pair<String, List<PropagationStatus>> created = provisioningManager.create(userTO, false, false);\n+        Pair<String, List<PropagationStatus>> created = provisioningManager.create(userCR, false);\n         userTO = binder.getUserTO(created.getKey());\n \n         for (SAML2IdPActions action : actions) {"},{"sha":"dddc6dc14c33a554f9f4393908a3c840853b4009","filename":"ext/saml2sp/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/SAML2IdPActions.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FSAML2IdPActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FSAML2IdPActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FSAML2IdPActions.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,13 +18,14 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n import org.apache.syncope.common.lib.to.UserTO;\n \n public interface SAML2IdPActions {\n \n-    default UserTO beforeCreate(UserTO input, SAML2LoginResponseTO loginResponse) {\n+    default UserCR beforeCreate(UserCR input, SAML2LoginResponseTO loginResponse) {\n         return input;\n     }\n "},{"sha":"bf122d5f9fcd9d3df2ad02307b73dff4d9fa623f","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java","status":"modified","additions":59,"deletions":52,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -24,14 +24,15 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.GroupCR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.scim.SCIMComplexConf;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n-import org.apache.syncope.common.lib.scim.SCIMUserAddressConf;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n@@ -491,36 +492,29 @@ public UserTO toUserTO(final SCIMUser user) {\n             }\n \n             if (conf.getUserConf().getDisplayName() != null && user.getDisplayName() != null) {\n-                setAttribute(userTO, conf.getUserConf().getDisplayName(),\n-                        user.getDisplayName());\n+                setAttribute(userTO, conf.getUserConf().getDisplayName(), user.getDisplayName());\n             }\n             if (conf.getUserConf().getNickName() != null && user.getNickName() != null) {\n-                setAttribute(userTO, conf.getUserConf().getNickName(),\n-                        user.getNickName());\n+                setAttribute(userTO, conf.getUserConf().getNickName(), user.getNickName());\n             }\n             if (conf.getUserConf().getProfileUrl() != null && user.getProfileUrl() != null) {\n-                setAttribute(userTO, conf.getUserConf().getProfileUrl(),\n-                        user.getProfileUrl());\n+                setAttribute(userTO, conf.getUserConf().getProfileUrl(), user.getProfileUrl());\n             }\n             if (conf.getUserConf().getTitle() != null && user.getTitle() != null) {\n                 setAttribute(userTO, conf.getUserConf().getTitle(),\n                         user.getTitle());\n             }\n             if (conf.getUserConf().getUserType() != null && user.getUserType() != null) {\n-                setAttribute(userTO, conf.getUserConf().getUserType(),\n-                        user.getUserType());\n+                setAttribute(userTO, conf.getUserConf().getUserType(), user.getUserType());\n             }\n             if (conf.getUserConf().getPreferredLanguage() != null && user.getPreferredLanguage() != null) {\n-                setAttribute(userTO, conf.getUserConf().getPreferredLanguage(),\n-                        user.getPreferredLanguage());\n+                setAttribute(userTO, conf.getUserConf().getPreferredLanguage(), user.getPreferredLanguage());\n             }\n             if (conf.getUserConf().getLocale() != null && user.getLocale() != null) {\n-                setAttribute(userTO, conf.getUserConf().getLocale(),\n-                        user.getLocale());\n+                setAttribute(userTO, conf.getUserConf().getLocale(), user.getLocale());\n             }\n             if (conf.getUserConf().getTimezone() != null && user.getTimezone() != null) {\n-                setAttribute(userTO, conf.getUserConf().getTimezone(),\n-                        user.getTimezone());\n+                setAttribute(userTO, conf.getUserConf().getTimezone(), user.getTimezone());\n             }\n \n             fill(userTO.getPlainAttrs(), conf.getUserConf().getEmails(), user.getEmails());\n@@ -529,41 +523,34 @@ public UserTO toUserTO(final SCIMUser user) {\n             fill(userTO.getPlainAttrs(), conf.getUserConf().getPhotos(), user.getPhotos());\n \n             user.getAddresses().stream().filter(address -> address.getType() != null).forEach(address -> {\n-                Optional<SCIMUserAddressConf> addressConf = conf.getUserConf().getAddresses().stream().\n-                        filter(object -> address.getType().equals(object.getType().name())).findFirst();\n-                if (addressConf.isPresent()) {\n-                    if (addressConf.get().getFormatted() != null && address.getFormatted() != null) {\n-                        setAttribute(userTO, addressConf.get().getFormatted(),\n-                                address.getFormatted());\n-                    }\n-                    if (addressConf.get().getStreetAddress() != null && address.getStreetAddress() != null) {\n-                        setAttribute(userTO, addressConf.get().getStreetAddress(),\n-                                address.getStreetAddress());\n-                    }\n-                    if (addressConf.get().getLocality() != null && address.getLocality() != null) {\n-                        setAttribute(userTO, addressConf.get().getLocality(),\n-                                address.getLocality());\n-                    }\n-                    if (addressConf.get().getRegion() != null && address.getRegion() != null) {\n-                        setAttribute(userTO, addressConf.get().getRegion(),\n-                                address.getRegion());\n-                    }\n-                    if (addressConf.get().getPostalCode() != null && address.getPostalCode() != null) {\n-                        setAttribute(userTO, addressConf.get().getPostalCode(),\n-                                address.getPostalCode());\n-                    }\n-                    if (addressConf.get().getCountry() != null && address.getCountry() != null) {\n-                        setAttribute(userTO, addressConf.get().getCountry(),\n-                                address.getCountry());\n-                    }\n-                }\n+                conf.getUserConf().getAddresses().stream().\n+                        filter(object -> address.getType().equals(object.getType().name())).findFirst().\n+                        ifPresent(addressConf -> {\n+                            if (addressConf.getFormatted() != null && address.getFormatted() != null) {\n+                                setAttribute(userTO, addressConf.getFormatted(), address.getFormatted());\n+                            }\n+                            if (addressConf.getStreetAddress() != null && address.getStreetAddress() != null) {\n+                                setAttribute(userTO, addressConf.getStreetAddress(), address.getStreetAddress());\n+                            }\n+                            if (addressConf.getLocality() != null && address.getLocality() != null) {\n+                                setAttribute(userTO, addressConf.getLocality(), address.getLocality());\n+                            }\n+                            if (addressConf.getRegion() != null && address.getRegion() != null) {\n+                                setAttribute(userTO, addressConf.getRegion(), address.getRegion());\n+                            }\n+                            if (addressConf.getPostalCode() != null && address.getPostalCode() != null) {\n+                                setAttribute(userTO, addressConf.getPostalCode(), address.getPostalCode());\n+                            }\n+                            if (addressConf.getCountry() != null && address.getCountry() != null) {\n+                                setAttribute(userTO, addressConf.getCountry(), address.getCountry());\n+                            }\n+                        });\n             });\n \n             for (int i = 0; i < user.getX509Certificates().size(); i++) {\n                 Value certificate = user.getX509Certificates().get(i);\n                 if (conf.getUserConf().getX509Certificates().size() > i) {\n-                    setAttribute(userTO, conf.getUserConf().getX509Certificates().get(i),\n-                            certificate.getValue());\n+                    setAttribute(userTO, conf.getUserConf().getX509Certificates().get(i), certificate.getValue());\n                 }\n             }\n         }\n@@ -609,17 +596,30 @@ public UserTO toUserTO(final SCIMUser user) {\n             }\n         }\n \n-        user.getGroups().forEach(group -> {\n-            userTO.getMemberships().add(new MembershipTO.Builder().group(group.getValue()).build());\n-        });\n+        userTO.getMemberships().addAll(user.getGroups().stream().\n+                map(group -> new MembershipTO.Builder().group(group.getValue()).build()).\n+                collect(Collectors.toList()));\n \n-        user.getRoles().forEach(role -> {\n-            userTO.getRoles().add(role.getValue());\n-        });\n+        userTO.getRoles().addAll(user.getRoles().stream().\n+                map(Value::getValue).\n+                collect(Collectors.toList()));\n \n         return userTO;\n     }\n \n+    public UserCR toUserCR(final SCIMUser user) {\n+        UserTO userTO = toUserTO(user);\n+\n+        return new UserCR.Builder().\n+                username(userTO.getUsername()).\n+                password(userTO.getPassword()).\n+                realm(userTO.getRealm()).\n+                plainAttrs(userTO.getPlainAttrs()).\n+                memberships(userTO.getMemberships()).\n+                roles(userTO.getRoles()).\n+                build();\n+    }\n+\n     private void setAttribute(final UserTO userTO, final String schema, final String value) {\n         switch (schema) {\n             case \"username\":\n@@ -690,4 +690,11 @@ public GroupTO toGroupTO(final SCIMGroup group) {\n         return groupTO;\n     }\n \n+    public GroupCR toGroupCR(final SCIMGroup group) {\n+        if (!GROUP_SCHEMAS.equals(group.getSchemas())) {\n+            throw new BadRequestException(ErrorType.invalidValue);\n+        }\n+\n+        return new GroupCR.Builder().realm(SyncopeConstants.ROOT_REALM).name(group.getDisplayName()).build();\n+    }\n }"},{"sha":"6ab1e8df48d2aae6f745b5fd89f2b64c5797894f","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -136,7 +136,7 @@ protected AnyDAO<?> anyDAO(final Resource type) {\n         }\n     }\n \n-    protected AbstractAnyLogic<?, ?> anyLogic(final Resource type) {\n+    protected AbstractAnyLogic<?, ?, ?> anyLogic(final Resource type) {\n         switch (type) {\n             case User:\n                 return userLogic();\n@@ -239,8 +239,7 @@ protected ListResponse<R> doSearch(\n                         request.getAttributes(),\n                         request.getExcludedAttributes());\n             } else if (anyTO instanceof GroupTO) {\n-                resource = binder().toSCIMGroup(\n-                        (GroupTO) anyTO,\n+                resource = binder().toSCIMGroup((GroupTO) anyTO,\n                         uriInfo.getAbsolutePathBuilder().path(anyTO.getKey()).build().toASCIIString(),\n                         request.getAttributes(),\n                         request.getExcludedAttributes());"},{"sha":"0a7a7472c066883982e62ee6abd700796eab86e4","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -29,7 +29,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -53,13 +53,13 @@ public class GroupServiceImpl extends AbstractService<SCIMGroup> implements Grou\n     @Override\n     public Response create(final SCIMGroup group) {\n         // first create group, no members assigned\n-        ProvisioningResult<GroupTO> result = groupLogic().create(binder().toGroupTO(group), false);\n+        ProvisioningResult<GroupTO> result = groupLogic().create(binder().toGroupCR(group), false);\n \n         // then assign members\n         group.getMembers().forEach(member -> {\n             UserUR req = new UserUR.Builder().\n                     key(member.getValue()).\n-                    membership(new MembershipPatch.Builder().\n+                    membership(new MembershipUR.Builder().\n                             operation(PatchOperation.ADD_REPLACE).group(result.getEntity().getKey()).build()).\n                     build();\n             try {\n@@ -138,7 +138,7 @@ public Response replace(final String id, final SCIMGroup group) {\n             if (!beforeMembers.contains(member.getValue())) {\n                 UserUR req = new UserUR.Builder().\n                         key(member.getValue()).\n-                        membership(new MembershipPatch.Builder().\n+                        membership(new MembershipUR.Builder().\n                                 operation(PatchOperation.ADD_REPLACE).group(result.getEntity().getKey()).build()).\n                         build();\n                 try {\n@@ -153,7 +153,7 @@ public Response replace(final String id, final SCIMGroup group) {\n         beforeMembers.stream().filter(member -> !afterMembers.contains(member)).forEach(user -> {\n             UserUR req = new UserUR.Builder().\n                     key(user).\n-                    membership(new MembershipPatch.Builder().\n+                    membership(new MembershipUR.Builder().\n                             operation(PatchOperation.DELETE).group(result.getEntity().getKey()).build()).\n                     build();\n             try {"},{"sha":"51deffd2dbd023b2bc080d301070071dc9a0589a","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -40,7 +40,7 @@ public class UserServiceImpl extends AbstractService<SCIMUser> implements UserSe\n \n     @Override\n     public Response create(final SCIMUser user) {\n-        ProvisioningResult<UserTO> result = userLogic().create(binder().toUserTO(user), true, false);\n+        ProvisioningResult<UserTO> result = userLogic().create(binder().toUserCR(user), false);\n         return createResponse(\n                 result.getEntity().getKey(),\n                 binder().toSCIMUser("},{"sha":"a2fb529122797d794cbf295841aae5b1e749ceae","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.fit.core.reference.flowable;\n \n-import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;\n import org.apache.syncope.core.flowable.task.FlowableServiceTask;\n@@ -50,7 +50,7 @@ protected void doExecute(final DelegateExecution execution) {\n \n             UserUR userUR = new UserUR();\n             userUR.setKey(user.getKey());\n-            userUR.getMemberships().add(new MembershipPatch.Builder().\n+            userUR.getMemberships().add(new MembershipUR.Builder().\n                     group(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").build());\n \n             PropagationByResource propByRes = dataBinder.update(user, userUR);"},{"sha":"19442553b3bb456d40a3357e7e0ee9dd21cadd0c","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.fit.core.reference.flowable;\n \n-import org.apache.syncope.common.lib.request.RelationshipPatch;\n+import org.apache.syncope.common.lib.request.RelationshipUR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;\n@@ -53,7 +53,7 @@ protected void doExecute(final DelegateExecution execution) {\n \n             UserUR userUR = new UserUR();\n             userUR.setKey(user.getKey());\n-            userUR.getRelationships().add(new RelationshipPatch.Builder().\n+            userUR.getRelationships().add(new RelationshipUR.Builder().\n                     relationshipTO(new RelationshipTO.Builder().\n                             otherEnd(\"PRINTER\", printer).type(\"neighborhood\").build()).\n                     build());"},{"sha":"ab339439145e3aa35b3f5ff069206f5c9d1ef9cc","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPullActions.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -19,12 +19,12 @@\n package org.apache.syncope.fit.core.reference;\n \n import java.util.Optional;\n+import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n-import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n@@ -41,39 +41,36 @@ public class TestPullActions implements PullActions {\n \n     @Override\n     public void beforeProvision(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity)\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final AnyCR anyCR)\n             throws JobExecutionException {\n \n-        if (entity instanceof AnyTO) {\n-            AnyTO any = (AnyTO) entity;\n-\n-            Optional<AttrTO> attrTO = any.getPlainAttr(\"fullname\");\n-            if (!attrTO.isPresent()) {\n-                attrTO = Optional.of(new AttrTO());\n-                attrTO.get().setSchema(\"fullname\");\n-                any.getPlainAttrs().add(attrTO.get());\n-            }\n-            attrTO.get().getValues().clear();\n-            attrTO.get().getValues().add(String.valueOf(counter++));\n+        Optional<AttrTO> attrTO = anyCR.getPlainAttrs().stream().\n+                filter(attr -> \"fullname\".equals(attr.getSchema())).findFirst();\n+        if (!attrTO.isPresent()) {\n+            attrTO = Optional.of(new AttrTO());\n+            attrTO.get().setSchema(\"fullname\");\n+            anyCR.getPlainAttrs().add(attrTO.get());\n         }\n+        attrTO.get().getValues().clear();\n+        attrTO.get().getValues().add(String.valueOf(counter++));\n     }\n \n     @Override\n     public void beforeAssign(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final EntityTO entity)\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final AnyCR anyCR)\n             throws JobExecutionException {\n \n-        if (entity instanceof UserTO && \"test2\".equals(UserTO.class.cast(entity).getUsername())) {\n+        if (anyCR instanceof UserCR && \"test2\".equals(UserCR.class.cast(anyCR).getUsername())) {\n             throw new IgnoreProvisionException();\n         }\n     }\n \n     @Override\n-    public <M extends AnyUR> void beforeUpdate(\n+    public void beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final EntityTO entityTO,\n-            final M anyUR) throws JobExecutionException {\n+            final AnyUR anyUR) throws JobExecutionException {\n \n         AttrPatch fullnamePatch = null;\n         for (AttrPatch attrPatch : anyUR.getPlainAttrs()) {"},{"sha":"2d61758763be8cfea5c5a880236e4dd4d921a034","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -52,6 +52,9 @@\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n+import org.apache.syncope.common.lib.request.GroupCR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -435,21 +438,17 @@ protected Pair<String, String> createNotificationTask(\n         assertNotNull(notification);\n \n         // 2. create user\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"notificationtest@syncope.apache.org\");\n-        userTO.getMemberships().add(\n+        UserCR req = UserITCase.getUniqueSample(\"notificationtest@syncope.apache.org\");\n+        req.getMemberships().add(\n                 new MembershipTO.Builder().group(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").build());\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(req).getEntity();\n         assertNotNull(userTO);\n-        return Pair.of(notification.getKey(), userTO.getUsername());\n+        return Pair.of(notification.getKey(), req.getUsername());\n     }\n \n-    protected ProvisioningResult<UserTO> createUser(final UserTO userTO) {\n-        return createUser(userTO, true);\n-    }\n-\n-    protected ProvisioningResult<UserTO> createUser(final UserTO userTO, final boolean storePassword) {\n-        Response response = userService.create(userTO, storePassword);\n+    protected ProvisioningResult<UserTO> createUser(final UserCR req) {\n+        Response response = userService.create(req);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n             if (ex != null) {\n@@ -472,8 +471,8 @@ protected ProvisioningResult<UserTO> deleteUser(final String key) {\n                 });\n     }\n \n-    protected ProvisioningResult<AnyObjectTO> createAnyObject(final AnyObjectTO anyObjectTO) {\n-        Response response = anyObjectService.create(anyObjectTO);\n+    protected ProvisioningResult<AnyObjectTO> createAnyObject(final AnyObjectCR req) {\n+        Response response = anyObjectService.create(req);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n             if (ex != null) {\n@@ -496,8 +495,8 @@ protected ProvisioningResult<AnyObjectTO> deleteAnyObject(final String key) {\n                 });\n     }\n \n-    protected ProvisioningResult<GroupTO> createGroup(final GroupTO groupTO) {\n-        Response response = groupService.create(groupTO);\n+    protected ProvisioningResult<GroupTO> createGroup(final GroupCR req) {\n+        Response response = groupService.create(req);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n             if (ex != null) {"},{"sha":"38fcc3d98e3ea4b05e028833c5cef06dd7ce29f8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyObjectITCase.java","status":"modified","additions":30,"deletions":31,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -46,22 +47,20 @@\n \n public class AnyObjectITCase extends AbstractITCase {\n \n-    public static AnyObjectTO getSampleTO(final String location) {\n-        AnyObjectTO anyObjectTO = new AnyObjectTO();\n-        anyObjectTO.setName(location + getUUIDString());\n-        anyObjectTO.setRealm(SyncopeConstants.ROOT_REALM);\n-        anyObjectTO.setType(\"PRINTER\");\n-        anyObjectTO.getPlainAttrs().add(attrTO(\"location\", location + getUUIDString()));\n-\n-        anyObjectTO.getResources().add(RESOURCE_NAME_DBSCRIPTED);\n-        return anyObjectTO;\n+    public static AnyObjectCR getSample(final String location) {\n+        return new AnyObjectCR.Builder(\"PRINTER\").\n+                name(location + getUUIDString()).\n+                realm(SyncopeConstants.ROOT_REALM).\n+                plainAttr(attrTO(\"location\", location + getUUIDString())).\n+                resource(RESOURCE_NAME_DBSCRIPTED).\n+                build();\n     }\n \n     @Test\n     public void create() {\n-        AnyObjectTO anyObjectTO = getSampleTO(\"create\");\n+        AnyObjectCR anyObjectCR = getSample(\"create\");\n \n-        anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n+        AnyObjectTO anyObjectTO = createAnyObject(anyObjectCR).getEntity();\n         assertNotNull(anyObjectTO);\n \n         ConnObjectTO connObjectTO =\n@@ -76,22 +75,22 @@ public void create() {\n     @Test\n     public void createInvalidMembership() {\n         // 1. create anyObject in realm /odd and attempt to assign group 15, from realm /even => exception\n-        AnyObjectTO anyObjectTO = getSampleTO(\"createInvalidMembership\");\n-        anyObjectTO.setRealm(\"/odd\");\n-        anyObjectTO.getMemberships().add(\n+        AnyObjectCR anyObjectCR = getSample(\"createInvalidMembership\");\n+        anyObjectCR.setRealm(\"/odd\");\n+        anyObjectCR.getMemberships().add(\n                 new MembershipTO.Builder().group(\"034740a9-fa10-453b-af37-dc7897e98fb1\").build());\n \n         try {\n-            createAnyObject(anyObjectTO);\n+            createAnyObject(anyObjectCR);\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidMembership, e.getType());\n         }\n \n         // 2. change anyObject's realm to /even/two, now it works\n-        anyObjectTO.setRealm(\"/even/two\");\n+        anyObjectCR.setRealm(\"/even/two\");\n \n-        anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n+        AnyObjectTO anyObjectTO = createAnyObject(anyObjectCR).getEntity();\n         assertNotNull(anyObjectTO.getMembership(\"034740a9-fa10-453b-af37-dc7897e98fb1\"));\n     }\n \n@@ -103,10 +102,10 @@ public void delete() {\n             assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n         }\n \n-        AnyObjectTO anyObjectTO = getSampleTO(\"deletable\");\n-        anyObjectTO.setRealm(\"/even\");\n+        AnyObjectCR anyObjectCR = getSample(\"deletable\");\n+        anyObjectCR.setRealm(\"/even\");\n \n-        anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n+        AnyObjectTO anyObjectTO = createAnyObject(anyObjectCR).getEntity();\n         assertNotNull(anyObjectTO);\n \n         AnyObjectTO deletedAnyObject = deleteAnyObject(anyObjectTO.getKey()).getEntity();\n@@ -140,8 +139,8 @@ public void read() {\n \n     @Test\n     public void update() {\n-        AnyObjectTO anyObjectTO = getSampleTO(\"update\");\n-        anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n+        AnyObjectCR anyObjectCR = getSample(\"update\");\n+        AnyObjectTO anyObjectTO = createAnyObject(anyObjectCR).getEntity();\n \n         assertEquals(1, anyObjectTO.getPlainAttrs().size());\n \n@@ -157,8 +156,8 @@ public void update() {\n \n     @Test\n     public void readAttrs() {\n-        AnyObjectTO anyObjectTO = getSampleTO(\"readAttrs\");\n-        anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n+        AnyObjectCR anyObjectCR = getSample(\"readAttrs\");\n+        AnyObjectTO anyObjectTO = createAnyObject(anyObjectCR).getEntity();\n         assertNotNull(anyObjectTO);\n \n         Set<AttrTO> attrs = anyObjectService.read(anyObjectTO.getKey(), SchemaType.PLAIN);\n@@ -170,8 +169,8 @@ public void readAttrs() {\n \n     @Test\n     public void updateAttr() {\n-        AnyObjectTO anyObjectTO = getSampleTO(\"updateAttr\");\n-        anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n+        AnyObjectCR anyObjectCR = getSample(\"updateAttr\");\n+        AnyObjectTO anyObjectTO = createAnyObject(anyObjectCR).getEntity();\n         assertNotNull(anyObjectTO);\n \n         AttrTO updated = attrTO(\"location\", \"newlocation\");\n@@ -183,8 +182,8 @@ public void updateAttr() {\n \n     @Test\n     public void deleteAttr() {\n-        AnyObjectTO anyObjectTO = getSampleTO(\"deleteAttr\");\n-        anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n+        AnyObjectCR anyObjectCR = getSample(\"deleteAttr\");\n+        AnyObjectTO anyObjectTO = createAnyObject(anyObjectCR).getEntity();\n         assertNotNull(anyObjectTO);\n         assertNotNull(anyObjectTO.getPlainAttr(\"location\"));\n \n@@ -200,12 +199,12 @@ public void deleteAttr() {\n \n     @Test\n     public void issueSYNCOPE756() {\n-        AnyObjectTO anyObjectTO = getSampleTO(\"issueSYNCOPE756\");\n-        anyObjectTO.getRelationships().add(new RelationshipTO.Builder().otherEnd(\n+        AnyObjectCR anyObjectCR = getSample(\"issueSYNCOPE756\");\n+        anyObjectCR.getRelationships().add(new RelationshipTO.Builder().otherEnd(\n                 AnyTypeKind.USER.name(), \"1417acbe-cbf6-4277-9372-e75e04f97000\").build());\n \n         try {\n-            createAnyObject(anyObjectTO).getEntity();\n+            createAnyObject(anyObjectCR).getEntity();\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidAnyType, e.getType());"},{"sha":"3a167f527fbcb219684617dd6e9334c1ac0c7a09","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":34,"deletions":33,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -39,13 +39,14 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.ResourceDR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.StatusR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n@@ -135,8 +136,8 @@ public void userSchemaAuthorization() {\n         assertEquals(schemaTO, newPlainSchemaTO);\n \n         // 2. create an user with the role created above (as admin)\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"auth@test.org\");\n-        userTO = createUser(userTO).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"auth@test.org\");\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         // 3. read the schema created above (as admin) - success\n@@ -162,10 +163,10 @@ public void userSchemaAuthorization() {\n \n     @Test\n     public void userRead() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"testuserread@test.org\");\n-        userTO.getRoles().add(\"User manager\");\n+        UserCR userCR = UserITCase.getUniqueSample(\"testuserread@test.org\");\n+        userCR.getRoles().add(\"User manager\");\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").\n@@ -187,10 +188,10 @@ public void userRead() {\n \n     @Test\n     public void userSearch() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"testusersearch@test.org\");\n-        userTO.getRoles().add(\"User reviewer\");\n+        UserCR userCR = UserITCase.getUniqueSample(\"testusersearch@test.org\");\n+        userCR.getRoles().add(\"User reviewer\");\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         // 1. user assigned to role 1, with search entitlement on realms /odd and /even: won't find anything with \n@@ -237,31 +238,31 @@ public void delegatedUserCRUD() {\n             assertNotNull(roleKey);\n \n             // 2. as admin, create delegated admin user, and assign the role just created\n-            UserTO delegatedAdmin = UserITCase.getUniqueSampleTO(\"admin@syncope.apache.org\");\n-            delegatedAdmin.getRoles().add(roleKey);\n-            delegatedAdmin = createUser(delegatedAdmin).getEntity();\n+            UserCR delegatedAdminCR = UserITCase.getUniqueSample(\"admin@syncope.apache.org\");\n+            delegatedAdminCR.getRoles().add(roleKey);\n+            UserTO delegatedAdmin = createUser(delegatedAdminCR).getEntity();\n             delegatedAdminKey = delegatedAdmin.getKey();\n \n             // 3. instantiate a delegate user service client, for further operatins\n             UserService delegatedUserService =\n                     clientFactory.create(delegatedAdmin.getUsername(), \"password123\").getService(UserService.class);\n \n             // 4. as delegated, create user under realm / -> fail\n-            UserTO user = UserITCase.getUniqueSampleTO(\"delegated@syncope.apache.org\");\n+            UserCR userCR = UserITCase.getUniqueSample(\"delegated@syncope.apache.org\");\n             try {\n-                delegatedUserService.create(user, true);\n+                delegatedUserService.create(userCR);\n                 fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n             }\n \n             // 5. set realm to /even/two -> succeed\n-            user.setRealm(\"/even/two\");\n+            userCR.setRealm(\"/even/two\");\n \n-            Response response = delegatedUserService.create(user, true);\n+            Response response = delegatedUserService.create(userCR);\n             assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n \n-            user = response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+            UserTO user = response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n             }).getEntity();\n             assertEquals(\"surname\", user.getPlainAttr(\"surname\").get().getValues().get(0));\n \n@@ -309,10 +310,10 @@ public void delegatedUserCRUD() {\n \n     @Test\n     public void checkFailedLogins() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"checkFailedLogin@syncope.apache.org\");\n-        userTO.getRoles().add(\"User manager\");\n+        UserCR userCR = UserITCase.getUniqueSample(\"checkFailedLogin@syncope.apache.org\");\n+        userCR.getRoles().add(\"User manager\");\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n         String userKey = userTO.getKey();\n \n@@ -342,11 +343,11 @@ public void checkFailedLogins() {\n \n     @Test\n     public void checkUserSuspension() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"checkSuspension@syncope.apache.org\");\n-        userTO.setRealm(\"/odd\");\n-        userTO.getRoles().add(\"User manager\");\n+        UserCR userCR = UserITCase.getUniqueSample(\"checkSuspension@syncope.apache.org\");\n+        userCR.setRealm(\"/odd\");\n+        userCR.getRoles().add(\"User manager\");\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         String userKey = userTO.getKey();\n         assertNotNull(userTO);\n \n@@ -437,7 +438,7 @@ public void anyTypeEntitlement() {\n                 anyMatch(entitlement -> entitlement.contains(anyTypeKey)));\n \n         // 3. attempt to create an instance of the type above: fail because no entitlement was assigned\n-        AnyObjectTO folder = new AnyObjectTO();\n+        AnyObjectCR folder = new AnyObjectCR();\n         folder.setName(\"home\");\n         folder.setRealm(SyncopeConstants.ROOT_REALM);\n         folder.setType(anyTypeKey);\n@@ -479,11 +480,11 @@ public void issueSYNCOPE434() {\n \n         // 1. create user with group 'groupForWorkflowApproval' \n         // (users with group groupForWorkflowApproval are defined in workflow as subject to approval)\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"createWithReject@syncope.apache.org\");\n-        userTO.getMemberships().add(\n+        UserCR userCR = UserITCase.getUniqueSample(\"createWithReject@syncope.apache.org\");\n+        userCR.getMemberships().add(\n                 new MembershipTO.Builder().group(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"createApproval\", userTO.getStatus());\n \n@@ -515,11 +516,11 @@ public void issueSYNCOPE434() {\n     @Test\n     public void issueSYNCOPE164() throws Exception {\n         // 1. create user with db resource\n-        UserTO user = UserITCase.getUniqueSampleTO(\"syncope164@syncope.apache.org\");\n-        user.setRealm(\"/even/two\");\n-        user.setPassword(\"password123\");\n-        user.getResources().add(RESOURCE_NAME_TESTDB);\n-        user = createUser(user).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope164@syncope.apache.org\");\n+        userCR.setRealm(\"/even/two\");\n+        userCR.setPassword(\"password123\");\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n+        UserTO user = createUser(userCR).getEntity();\n         assertNotNull(user);\n \n         // 2. unlink the resource from the created user"},{"sha":"693593511c9e9249216b7bd4df64d04dd77d8856","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/BatchITCase.java","status":"modified","additions":20,"deletions":19,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -50,7 +50,9 @@\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.client.lib.batch.BatchResponse;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -75,9 +77,9 @@ private String requestBody(final String boundary) throws JsonProcessingException\n         List<BatchRequestItem> reqItems = new ArrayList<>();\n \n         // 1. create user as JSON\n-        UserTO user = UserITCase.getUniqueSampleTO(\"batch@syncope.apache.org\");\n-        assertNotEquals(\"/odd\", user.getRealm());\n-        String createUserPayload = MAPPER.writeValueAsString(user);\n+        UserCR userCR = UserITCase.getUniqueSample(\"batch@syncope.apache.org\");\n+        assertNotEquals(\"/odd\", userCR.getRealm());\n+        String createUserPayload = MAPPER.writeValueAsString(userCR);\n \n         BatchRequestItem createUser = new BatchRequestItem();\n         createUser.setMethod(HttpMethod.POST);\n@@ -90,11 +92,11 @@ private String requestBody(final String boundary) throws JsonProcessingException\n         reqItems.add(createUser);\n \n         // 2. create group as XML\n-        GroupTO group = GroupITCase.getBasicSampleTO(\"batch\");\n-        JAXBContext context = JAXBContext.newInstance(GroupTO.class);\n+        GroupCR groupCR = GroupITCase.getBasicSample(\"batch\");\n+        JAXBContext context = JAXBContext.newInstance(GroupCR.class);\n         Marshaller marshaller = context.createMarshaller();\n         StringWriter writer = new StringWriter();\n-        marshaller.marshal(group, writer);\n+        marshaller.marshal(groupCR, writer);\n         String createGroupPayload = writer.toString();\n \n         BatchRequestItem createGroup = new BatchRequestItem();\n@@ -109,13 +111,13 @@ private String requestBody(final String boundary) throws JsonProcessingException\n \n         // 3. update the user above as JSON, request for no user data being returned\n         UserUR userUR = new UserUR();\n-        userUR.setKey(user.getUsername());\n+        userUR.setKey(userCR.getUsername());\n         userUR.setRealm(new StringReplacePatchItem.Builder().value(\"/odd\").build());\n         String updateUserPayload = MAPPER.writeValueAsString(userUR);\n \n         BatchRequestItem updateUser = new BatchRequestItem();\n         updateUser.setMethod(HttpMethod.PATCH);\n-        updateUser.setRequestURI(\"/users/\" + user.getUsername());\n+        updateUser.setRequestURI(\"/users/\" + userCR.getUsername());\n         updateUser.setHeaders(new HashMap<>());\n         updateUser.getHeaders().put(RESTHeaders.PREFER, Arrays.asList(Preference.RETURN_NO_CONTENT.toString()));\n         updateUser.getHeaders().put(HttpHeaders.ACCEPT, Arrays.asList(MediaType.APPLICATION_JSON));\n@@ -139,7 +141,7 @@ private String requestBody(final String boundary) throws JsonProcessingException\n         // 6, delete the group created above, expect deleted group as JSON\n         BatchRequestItem deleteGroup = new BatchRequestItem();\n         deleteGroup.setMethod(HttpMethod.DELETE);\n-        deleteGroup.setRequestURI(\"/groups/\" + group.getName());\n+        deleteGroup.setRequestURI(\"/groups/\" + groupCR.getName());\n         reqItems.add(deleteGroup);\n \n         String body = BatchPayloadGenerator.generate(reqItems, boundary);\n@@ -169,7 +171,7 @@ private void check(final List<BatchResponseItem> resItems) throws IOException, J\n         assertNotNull(resItems.get(1).getHeaders().get(RESTHeaders.RESOURCE_KEY));\n         assertEquals(MediaType.APPLICATION_XML, resItems.get(1).getHeaders().get(HttpHeaders.CONTENT_TYPE).get(0));\n \n-        JAXBContext context = JAXBContext.newInstance(ProvisioningResult.class, GroupTO.class);\n+        JAXBContext context = JAXBContext.newInstance(ProvisioningResult.class, GroupCR.class);\n         Unmarshaller unmarshaller = context.createUnmarshaller();\n         @SuppressWarnings(\"unchecked\")\n         ProvisioningResult<GroupTO> group = (ProvisioningResult<GroupTO>) unmarshaller.unmarshal(\n@@ -193,8 +195,7 @@ private void check(final List<BatchResponseItem> resItems) throws IOException, J\n         assertEquals(Response.Status.OK.getStatusCode(), resItems.get(5).getStatus());\n         assertNotNull(resItems.get(5).getHeaders().get(RESTHeaders.DOMAIN));\n         assertEquals(MediaType.APPLICATION_JSON, resItems.get(5).getHeaders().get(HttpHeaders.CONTENT_TYPE).get(0));\n-        group = MAPPER.readValue(\n-                resItems.get(5).getContent(), new TypeReference<ProvisioningResult<GroupTO>>() {\n+        group = MAPPER.readValue(resItems.get(5).getContent(), new TypeReference<ProvisioningResult<GroupTO>>() {\n         });\n         assertNotNull(group);\n     }\n@@ -273,23 +274,23 @@ private BatchRequest batchRequest() {\n \n         // 1. create user as JSON\n         UserService batchUserService = batchRequest.getService(UserService.class);\n-        UserTO user = UserITCase.getUniqueSampleTO(\"batch@syncope.apache.org\");\n-        assertNotEquals(\"/odd\", user.getRealm());\n-        batchUserService.create(user, true);\n+        UserCR userCR = UserITCase.getUniqueSample(\"batch@syncope.apache.org\");\n+        assertNotEquals(\"/odd\", userCR.getRealm());\n+        batchUserService.create(userCR);\n \n         // 2. create group as XML\n         GroupService batchGroupService = batchRequest.getService(GroupService.class);\n         Client client = WebClient.client(batchGroupService).reset();\n         client.type(MediaType.APPLICATION_XML).accept(MediaType.APPLICATION_XML);\n-        GroupTO group = GroupITCase.getBasicSampleTO(\"batch\");\n-        batchGroupService.create(group);\n+        GroupCR groupCR = GroupITCase.getBasicSample(\"batch\");\n+        batchGroupService.create(groupCR);\n \n         // 3. update the user above as JSON, request for no user data being returned\n         client = WebClient.client(batchUserService).reset();\n         client.type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON);\n         client.header(RESTHeaders.PREFER, Preference.RETURN_NO_CONTENT.toString());\n         UserUR userUR = new UserUR();\n-        userUR.setKey(user.getUsername());\n+        userUR.setKey(userCR.getUsername());\n         userUR.setRealm(new StringReplacePatchItem.Builder().value(\"/odd\").build());\n         batchUserService.update(userUR);\n \n@@ -302,7 +303,7 @@ private BatchRequest batchRequest() {\n         batchGroupService.delete(UUID.randomUUID().toString());\n \n         // 6, delete the group created above, expect deleted group as JSON\n-        batchGroupService.delete(group.getName());\n+        batchGroupService.delete(groupCR.getName());\n \n         return batchRequest;\n     }"},{"sha":"1bfe6091e012365a42ccd15d6b6f5d7441c81ee7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/CamelRouteITCase.java","status":"modified","additions":15,"deletions":14,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -25,6 +25,7 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n@@ -78,7 +79,7 @@ public void update() {\n                 + \"  </setProperty>\\n\"\n                 + \"  <doTry>\\n\"\n                 + \"    <bean ref=\\\"uwfAdapter\\\" method=\\\"create(${body},${property.disablePwdPolicyCheck},\\n\"\n-                + \"                             ${property.enabled},${property.storePassword})\\\"/>\\n\"\n+                + \"                             ${property.enabled})\\\"/>\\n\"\n                 + \"    <to uri=\\\"propagate:create?anyTypeKind=USER\\\"/>\\n\"\n                 + \"    <to uri=\\\"direct:createPort\\\"/>\\n\"\n                 + \"    <to uri=\\\"log:myLog\\\"/>\\n\"\n@@ -118,7 +119,7 @@ public void scriptingUpdate() {\n                 + \"    </setBody>\\n\"\n                 + \"    <doTry>\\n\"\n                 + \"      <bean ref=\\\"uwfAdapter\\\" method=\\\"create(${body},${property.disablePwdPolicyCheck},\\n\"\n-                + \"                                     ${property.enabled},${property.storePassword})\\\"/>\\n\"\n+                + \"                                     ${property.enabled})\\\"/>\\n\"\n                 + \"      <to uri=\\\"propagate:create?anyTypeKind=USER\\\"/>\\n\"\n                 + \"      <to uri=\\\"direct:createPort\\\"/>\\n\"\n                 + \"      <doCatch>        \\n\"\n@@ -144,18 +145,18 @@ public void scriptingUpdate() {\n             typeClass.getPlainSchemas().add(schemaTO.getKey());\n             anyTypeClassService.create(typeClass);\n \n-            UserTO userTO = new UserTO();\n-            userTO.setRealm(SyncopeConstants.ROOT_REALM);\n-            userTO.getAuxClasses().add(typeClass.getKey());\n+            UserCR userCR = new UserCR();\n+            userCR.setRealm(SyncopeConstants.ROOT_REALM);\n+            userCR.getAuxClasses().add(typeClass.getKey());\n             String userId = getUUIDString() + \"camelUser@syncope.apache.org\";\n-            userTO.setUsername(userId);\n-            userTO.setPassword(\"password123\");\n-            userTO.getPlainAttrs().add(attrTO(\"userId\", userId));\n-            userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n-            userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n-            userTO.getPlainAttrs().add(attrTO(\"camelAttribute\", \"false\"));\n-\n-            userTO = createUser(userTO).getEntity();\n+            userCR.setUsername(userId);\n+            userCR.setPassword(\"password123\");\n+            userCR.getPlainAttrs().add(attrTO(\"userId\", userId));\n+            userCR.getPlainAttrs().add(attrTO(\"fullname\", userId));\n+            userCR.getPlainAttrs().add(attrTO(\"surname\", userId));\n+            userCR.getPlainAttrs().add(attrTO(\"camelAttribute\", \"false\"));\n+\n+            UserTO userTO = createUser(userCR).getEntity();\n             assertNotNull(userTO);\n             assertEquals(\"true\", userTO.getPlainAttr(\"camelAttribute\").get().getValues().get(0));\n         } finally {\n@@ -174,7 +175,7 @@ public void issueSYNCOPE931() {\n                 + \"  </setProperty>\\n\"\n                 + \"  <doTry>\\n\"\n                 + \"    <bean ref=\\\"uwfAdapter\\\" method=\\\"create(${body},${property.disablePwdPolicyCheck},\\n\"\n-                + \"                             ${property.enabled},${property.storePassword})\\\"/>\\n\"\n+                + \"                             ${property.enabled})\\\"/>\\n\"\n                 + \"    <to uri=\\\"propagate:create123?anyTypeKind=USER\\\"/>\\n\"\n                 + \"    <to uri=\\\"direct:createPort\\\"/>\\n\"\n                 + \"    <to uri=\\\"log:myLog\\\"/>\\n\""},{"sha":"a8bf51343cebe102102f6a108f603960ff59f992","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DynRealmITCase.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -29,8 +29,10 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -116,26 +118,25 @@ public void delegatedAdmin() {\n             assertNotNull(role);\n \n             // 3. create new user and assign the new role\n-            UserTO dynRealmAdmin = UserITCase.getUniqueSampleTO(\"dynRealmAdmin@apache.org\");\n+            UserCR dynRealmAdmin = UserITCase.getUniqueSample(\"dynRealmAdmin@apache.org\");\n             dynRealmAdmin.setPassword(\"password123\");\n             dynRealmAdmin.getRoles().add(role.getKey());\n-            dynRealmAdmin = createUser(dynRealmAdmin).getEntity();\n-            assertNotNull(dynRealmAdmin);\n+            assertNotNull(createUser(dynRealmAdmin).getEntity());\n \n             // 4. create new user and group, assign resource-ldap\n-            UserTO user = UserITCase.getUniqueSampleTO(\"dynRealmUser@apache.org\");\n-            user.setRealm(\"/even/two\");\n-            user.getResources().clear();\n-            user.getResources().add(RESOURCE_NAME_LDAP);\n-            user = createUser(user).getEntity();\n+            UserCR userCR = UserITCase.getUniqueSample(\"dynRealmUser@apache.org\");\n+            userCR.setRealm(\"/even/two\");\n+            userCR.getResources().clear();\n+            userCR.getResources().add(RESOURCE_NAME_LDAP);\n+            UserTO user = createUser(userCR).getEntity();\n             assertNotNull(user);\n             final String userKey = user.getKey();\n \n-            GroupTO group = GroupITCase.getSampleTO(\"dynRealmGroup\");\n-            group.setRealm(\"/odd\");\n-            group.getResources().clear();\n-            group.getResources().add(RESOURCE_NAME_LDAP);\n-            group = createGroup(group).getEntity();\n+            GroupCR groupCR = GroupITCase.getSample(\"dynRealmGroup\");\n+            groupCR.setRealm(\"/odd\");\n+            groupCR.getResources().clear();\n+            groupCR.getResources().add(RESOURCE_NAME_LDAP);\n+            GroupTO group = createGroup(groupCR).getEntity();\n             assertNotNull(group);\n             final String groupKey = group.getKey();\n \n@@ -197,9 +198,8 @@ public void delegatedAdmin() {\n             GroupUR groupUR = new GroupUR();\n             groupUR.setKey(groupKey);\n             groupUR.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"icon\", \"modified\")).build());\n-            group = delegatedGroupService.update(groupUR).\n-                    readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n-                    }).getEntity();\n+            group = delegatedGroupService.update(groupUR).readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n+            }).getEntity();\n             assertNotNull(group);\n             assertEquals(\"modified\", group.getPlainAttr(\"icon\").get().getValues().get(0));\n         } finally {"},{"sha":"516de1a4cdbe0060e86a77ba269dfbb76b6862b0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ExceptionMapperITCase.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -27,12 +27,12 @@\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.GroupCR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -73,7 +73,7 @@ public void uniqueSchemaConstraint() {\n         anyTypeClassService.create(typeClass);\n \n         // 2. create an user with mandatory attributes and unique\n-        UserTO userTO1 = new UserTO();\n+        UserCR userTO1 = new UserCR();\n         userTO1.setRealm(SyncopeConstants.ROOT_REALM);\n         userTO1.getAuxClasses().add(typeClass.getKey());\n         String userId1 = getUUIDString() + \"issue654_1@syncope.apache.org\";\n@@ -88,7 +88,7 @@ public void uniqueSchemaConstraint() {\n         createUser(userTO1);\n \n         // 3. create an other user with mandatory attributes and unique with the same value of userTO1\n-        UserTO userTO2 = new UserTO();\n+        UserCR userTO2 = new UserCR();\n         userTO2.setRealm(SyncopeConstants.ROOT_REALM);\n         userTO2.getAuxClasses().add(typeClass.getKey());\n         String userId2 = getUUIDString() + \"issue654_2@syncope.apache.org\";\n@@ -114,13 +114,13 @@ public void sameGroupName() {\n         String groupUUID = getUUIDString();\n \n         // Create the first group\n-        GroupTO groupTO1 = new GroupTO();\n+        GroupCR groupTO1 = new GroupCR();\n         groupTO1.setName(\"child1\" + groupUUID);\n         groupTO1.setRealm(SyncopeConstants.ROOT_REALM);\n         createGroup(groupTO1);\n \n         // Create the second group, with the same name of groupTO1\n-        GroupTO groupTO2 = new GroupTO();\n+        GroupCR groupTO2 = new GroupCR();\n         groupTO2.setName(\"child1\" + groupUUID);\n         groupTO2.setRealm(SyncopeConstants.ROOT_REALM);\n         try {\n@@ -135,18 +135,18 @@ public void sameGroupName() {\n \n     @Test\n     public void headersMultiValue() {\n-        UserTO userTO = new UserTO();\n-        userTO.setRealm(SyncopeConstants.ROOT_REALM);\n+        UserCR userCR = new UserCR();\n+        userCR.setRealm(SyncopeConstants.ROOT_REALM);\n         String userId = getUUIDString() + \"issue654@syncope.apache.org\";\n-        userTO.setUsername(userId);\n-        userTO.setPassword(\"password123\");\n+        userCR.setUsername(userId);\n+        userCR.setPassword(\"password123\");\n \n-        userTO.getPlainAttrs().add(attrTO(\"userId\", \"issue654\"));\n-        userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n-        userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n+        userCR.getPlainAttrs().add(attrTO(\"userId\", \"issue654\"));\n+        userCR.getPlainAttrs().add(attrTO(\"fullname\", userId));\n+        userCR.getPlainAttrs().add(attrTO(\"surname\", userId));\n \n         try {\n-            createUser(userTO);\n+            createUser(userCR);\n             fail(\"This should not happen\");\n         } catch (SyncopeClientCompositeException e) {\n             assertEquals(2, e.getExceptions().size());"},{"sha":"c5221ed874d2c1078ff47eda7dae7c6afdb59bd3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":108,"deletions":105,"changes":213,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -46,13 +46,16 @@\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.request.ResourceAR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.ResourceDR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n@@ -95,29 +98,29 @@\n \n public class GroupITCase extends AbstractITCase {\n \n-    public static GroupTO getBasicSampleTO(final String name) {\n-        GroupTO groupTO = new GroupTO();\n-        groupTO.setRealm(SyncopeConstants.ROOT_REALM);\n-        groupTO.setName(name + getUUIDString());\n-        return groupTO;\n+    public static GroupCR getBasicSample(final String name) {\n+        return new GroupCR.Builder().\n+                realm(SyncopeConstants.ROOT_REALM).\n+                name(name + getUUIDString()).\n+                build();\n     }\n \n-    public static GroupTO getSampleTO(final String name) {\n-        GroupTO groupTO = getBasicSampleTO(name);\n+    public static GroupCR getSample(final String name) {\n+        GroupCR groupCR = getBasicSample(name);\n \n-        groupTO.getPlainAttrs().add(attrTO(\"icon\", \"anIcon\"));\n+        groupCR.getPlainAttrs().add(attrTO(\"icon\", \"anIcon\"));\n \n-        groupTO.getResources().add(RESOURCE_NAME_LDAP);\n-        return groupTO;\n+        groupCR.getResources().add(RESOURCE_NAME_LDAP);\n+        return groupCR;\n     }\n \n     @Test\n     public void create() {\n-        GroupTO groupTO = getSampleTO(\"lastGroup\");\n-        groupTO.getVirAttrs().add(attrTO(\"rvirtualdata\", \"rvirtualvalue\"));\n-        groupTO.setGroupOwner(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\");\n+        GroupCR groupCR = getSample(\"lastGroup\");\n+        groupCR.getVirAttrs().add(attrTO(\"rvirtualdata\", \"rvirtualvalue\"));\n+        groupCR.setGroupOwner(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\");\n \n-        groupTO = createGroup(groupTO).getEntity();\n+        GroupTO groupTO = createGroup(groupCR).getEntity();\n         assertNotNull(groupTO);\n \n         assertNotNull(groupTO.getVirAttr(\"rvirtualdata\").get().getValues());\n@@ -141,9 +144,9 @@ public void create() {\n \n     @Test\n     public void createWithInternationalCharacters() {\n-        GroupTO groupTO = getSampleTO(\"räksmörgås\");\n+        GroupCR groupCR = getSample(\"räksmörgås\");\n \n-        groupTO = createGroup(groupTO).getEntity();\n+        GroupTO groupTO = createGroup(groupCR).getEntity();\n         assertNotNull(groupTO);\n     }\n \n@@ -155,13 +158,13 @@ public void delete() {\n             assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n         }\n \n-        GroupTO groupTO = new GroupTO();\n-        groupTO.setName(\"toBeDeleted\" + getUUIDString());\n-        groupTO.setRealm(\"/even\");\n+        GroupCR groupCR = new GroupCR();\n+        groupCR.setName(\"toBeDeleted\" + getUUIDString());\n+        groupCR.setRealm(\"/even\");\n \n-        groupTO.getResources().add(RESOURCE_NAME_LDAP);\n+        groupCR.getResources().add(RESOURCE_NAME_LDAP);\n \n-        groupTO = createGroup(groupTO).getEntity();\n+        GroupTO groupTO = createGroup(groupCR).getEntity();\n         assertNotNull(groupTO);\n \n         GroupTO deletedGroup = deleteGroup(groupTO.getKey()).getEntity();\n@@ -217,8 +220,8 @@ public void selfRead() {\n \n     @Test\n     public void update() {\n-        GroupTO groupTO = getSampleTO(\"latestGroup\" + getUUIDString());\n-        groupTO = createGroup(groupTO).getEntity();\n+        GroupCR groupCR = getSample(\"latestGroup\" + getUUIDString());\n+        GroupTO groupTO = createGroup(groupCR).getEntity();\n \n         assertEquals(1, groupTO.getPlainAttrs().size());\n \n@@ -246,21 +249,21 @@ public void update() {\n \n     @Test\n     public void patch() {\n-        GroupTO original = getBasicSampleTO(\"patch\");\n-        original.setUDynMembershipCond(\"(($groups==3;$resources!=ws-target-resource-1);aLong==1)\");\n-        original.getADynMembershipConds().put(\n+        GroupCR createReq = getBasicSample(\"patch\");\n+        createReq.setUDynMembershipCond(\"(($groups==3;$resources!=ws-target-resource-1);aLong==1)\");\n+        createReq.getADynMembershipConds().put(\n                 \"PRINTER\",\n                 \"(($groups==7;cool==ss);$resources==ws-target-resource-2);$type==PRINTER\");\n \n-        GroupTO created = createGroup(original).getEntity();\n+        GroupTO created = createGroup(createReq).getEntity();\n \n         created.getPlainAttrs().add(new AttrTO.Builder().schema(\"icon\").build());\n         created.getPlainAttrs().add(new AttrTO.Builder().schema(\"show\").build());\n         created.getPlainAttrs().add(new AttrTO.Builder().schema(\"rderived_sx\").value(\"sx\").build());\n         created.getPlainAttrs().add(new AttrTO.Builder().schema(\"rderived_dx\").value(\"dx\").build());\n         created.getPlainAttrs().add(new AttrTO.Builder().schema(\"title\").value(\"mr\").build());\n \n-        original = groupService.read(created.getKey());\n+        GroupTO original = groupService.read(created.getKey());\n \n         GroupUR groupUR = AnyOperations.diff(created, original, true);\n         GroupTO updated = updateGroup(groupUR).getEntity();\n@@ -316,7 +319,7 @@ public void updateAsGroupOwner() {\n \n     @Test\n     public void unlink() throws IOException {\n-        GroupTO actual = createGroup(getSampleTO(\"unlink\")).getEntity();\n+        GroupTO actual = createGroup(getSample(\"unlink\")).getEntity();\n         assertNotNull(actual);\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n@@ -335,10 +338,10 @@ public void unlink() throws IOException {\n \n     @Test\n     public void link() throws IOException {\n-        GroupTO groupTO = getSampleTO(\"link\");\n-        groupTO.getResources().clear();\n+        GroupCR groupCR = getSample(\"link\");\n+        groupCR.getResources().clear();\n \n-        GroupTO actual = createGroup(groupTO).getEntity();\n+        GroupTO actual = createGroup(groupCR).getEntity();\n         assertNotNull(actual);\n \n         try {\n@@ -369,7 +372,7 @@ public void unassign() throws IOException {\n         GroupTO groupTO = null;\n \n         try {\n-            groupTO = createGroup(getSampleTO(\"unassign\")).getEntity();\n+            groupTO = createGroup(getSample(\"unassign\")).getEntity();\n             assertNotNull(groupTO);\n \n             assertNotNull(resourceService.readConnObject(\n@@ -401,11 +404,12 @@ public void unassign() throws IOException {\n \n     @Test\n     public void assign() throws IOException {\n-        GroupTO groupTO = getSampleTO(\"assign\");\n-        groupTO.getResources().clear();\n+        GroupCR groupCR = getSample(\"assign\");\n+        groupCR.getResources().clear();\n \n+        GroupTO groupTO = null;\n         try {\n-            groupTO = createGroup(groupTO).getEntity();\n+            groupTO = createGroup(groupCR).getEntity();\n             assertNotNull(groupTO);\n \n             try {\n@@ -425,7 +429,7 @@ public void assign() throws IOException {\n             assertNotNull(resourceService.readConnObject(\n                     RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey()));\n         } finally {\n-            if (groupTO.getKey() != null) {\n+            if (groupTO != null) {\n                 groupService.delete(groupTO.getKey());\n             }\n         }\n@@ -436,7 +440,7 @@ public void deprovision() throws IOException {\n         GroupTO groupTO = null;\n \n         try {\n-            groupTO = createGroup(getSampleTO(\"deprovision\")).getEntity();\n+            groupTO = createGroup(getSample(\"deprovision\")).getEntity();\n             assertNotNull(groupTO);\n             assertNotNull(groupTO.getKey());\n \n@@ -466,11 +470,12 @@ public void deprovision() throws IOException {\n \n     @Test\n     public void provision() throws IOException {\n-        GroupTO groupTO = getSampleTO(\"provision\");\n-        groupTO.getResources().clear();\n+        GroupCR groupCR = getSample(\"provision\");\n+        groupCR.getResources().clear();\n \n+        GroupTO groupTO = null;\n         try {\n-            groupTO = createGroup(groupTO).getEntity();\n+            groupTO = createGroup(groupCR).getEntity();\n             assertNotNull(groupTO);\n \n             try {\n@@ -491,19 +496,20 @@ public void provision() throws IOException {\n             assertNotNull(resourceService.readConnObject(\n                     RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey()));\n         } finally {\n-            if (groupTO.getKey() != null) {\n+            if (groupTO != null) {\n                 groupService.delete(groupTO.getKey());\n             }\n         }\n     }\n \n     @Test\n     public void deprovisionUnlinked() throws IOException {\n-        GroupTO groupTO = getSampleTO(\"deprovision\");\n-        groupTO.getResources().clear();\n+        GroupCR groupCR = getSample(\"deprovision\");\n+        groupCR.getResources().clear();\n \n+        GroupTO groupTO = null;\n         try {\n-            groupTO = createGroup(groupTO).getEntity();\n+            groupTO = createGroup(groupCR).getEntity();\n             assertNotNull(groupTO);\n \n             try {\n@@ -540,7 +546,7 @@ public void deprovisionUnlinked() throws IOException {\n                 assertNotNull(e);\n             }\n         } finally {\n-            if (groupTO.getKey() != null) {\n+            if (groupTO != null) {\n                 groupService.delete(groupTO.getKey());\n             }\n         }\n@@ -555,9 +561,8 @@ public void createWithMandatorySchema() {\n         schemaService.create(SchemaType.PLAIN, badge);\n \n         // 2. create a group *without* an attribute for that schema: it works\n-        GroupTO groupTO = getSampleTO(\"lastGroup\");\n-        assertFalse(groupTO.getPlainAttr(badge.getKey()).isPresent());\n-        groupTO = createGroup(groupTO).getEntity();\n+        GroupCR groupCR = getSample(\"lastGroup\");\n+        GroupTO groupTO = createGroup(groupCR).getEntity();\n         assertNotNull(groupTO);\n         assertFalse(groupTO.getPlainAttr(badge.getKey()).isPresent());\n \n@@ -625,9 +630,9 @@ public void anonymous() {\n     public void uDynMembership() {\n         assertTrue(userService.read(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\").getDynMemberships().isEmpty());\n \n-        GroupTO group = getBasicSampleTO(\"uDynMembership\");\n-        group.setUDynMembershipCond(\"cool==true\");\n-        group = createGroup(group).getEntity();\n+        GroupCR groupCR = getBasicSample(\"uDynMembership\");\n+        groupCR.setUDynMembershipCond(\"cool==true\");\n+        GroupTO group = createGroup(groupCR).getEntity();\n         assertNotNull(group);\n         final String groupKey = group.getKey();\n \n@@ -650,19 +655,19 @@ public void aDynMembership() {\n         String fiql = SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").is(\"location\").notNullValue().query();\n \n         // 1. create group with a given aDynMembership condition\n-        GroupTO group = getBasicSampleTO(\"aDynMembership\");\n-        group.getADynMembershipConds().put(\"PRINTER\", fiql);\n-        group = createGroup(group).getEntity();\n+        GroupCR groupCR = getBasicSample(\"aDynMembership\");\n+        groupCR.getADynMembershipConds().put(\"PRINTER\", fiql);\n+        GroupTO group = createGroup(groupCR).getEntity();\n         assertEquals(fiql, group.getADynMembershipConds().get(\"PRINTER\"));\n \n         group = groupService.read(group.getKey());\n         final String groupKey = group.getKey();\n         assertEquals(fiql, group.getADynMembershipConds().get(\"PRINTER\"));\n \n         // verify that the condition is dynamically applied\n-        AnyObjectTO newAny = AnyObjectITCase.getSampleTO(\"aDynMembership\");\n-        newAny.getResources().clear();\n-        newAny = createAnyObject(newAny).getEntity();\n+        AnyObjectCR newAnyCR = AnyObjectITCase.getSample(\"aDynMembership\");\n+        newAnyCR.getResources().clear();\n+        AnyObjectTO newAny = createAnyObject(newAnyCR).getEntity();\n         assertNotNull(newAny.getPlainAttr(\"location\"));\n         List<MembershipTO> memberships = anyObjectService.read(\n                 \"fc6dbc3a-6c07-4965-8781-921e7401a4a5\").getDynMemberships();\n@@ -711,18 +716,17 @@ public void aDynMembership() {\n     @Test\n     public void aDynMembershipCount() {\n         // Create a new printer as a dynamic member of a new group\n-        GroupTO group = getBasicSampleTO(\"aDynamicMembership\");\n+        GroupCR groupCR = getBasicSample(\"aDynamicMembership\");\n         String fiql = SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").is(\"location\").equalTo(\"home\").query();\n-        group.getADynMembershipConds().put(\"PRINTER\", fiql);\n-        group = createGroup(group).getEntity();\n+        groupCR.getADynMembershipConds().put(\"PRINTER\", fiql);\n+        GroupTO group = createGroup(groupCR).getEntity();\n \n-        AnyObjectTO printer = new AnyObjectTO();\n-        printer.setRealm(SyncopeConstants.ROOT_REALM);\n-        printer.setName(\"Printer_\" + getUUIDString());\n-        printer.setType(\"PRINTER\");\n-        AttrTO location = new AttrTO.Builder().schema(\"location\").value(\"home\").build();\n-        printer.getPlainAttrs().add(location);\n-        printer = createAnyObject(printer).getEntity();\n+        AnyObjectCR printerCR = new AnyObjectCR();\n+        printerCR.setRealm(SyncopeConstants.ROOT_REALM);\n+        printerCR.setName(\"Printer_\" + getUUIDString());\n+        printerCR.setType(\"PRINTER\");\n+        printerCR.getPlainAttrs().add(new AttrTO.Builder().schema(\"location\").value(\"home\").build());\n+        AnyObjectTO printer = createAnyObject(printerCR).getEntity();\n \n         group = groupService.read(group.getKey());\n         assertEquals(0, group.getStaticAnyObjectMembershipCount());\n@@ -735,17 +739,15 @@ public void aDynMembershipCount() {\n     @Test\n     public void aStaticMembershipCount() {\n         // Create a new printer as a static member of a new group\n-        GroupTO group = getBasicSampleTO(\"aStaticMembership\");\n-        group = createGroup(group).getEntity();\n-\n-        AnyObjectTO printer = new AnyObjectTO();\n-        printer.setRealm(SyncopeConstants.ROOT_REALM);\n-        printer.setName(\"Printer_\" + getUUIDString());\n-        printer.setType(\"PRINTER\");\n-        MembershipTO membership = new MembershipTO();\n-        membership.setGroupKey(group.getKey());\n-        printer.getMemberships().add(membership);\n-        printer = createAnyObject(printer).getEntity();\n+        GroupCR groupCR = getBasicSample(\"aStaticMembership\");\n+        GroupTO group = createGroup(groupCR).getEntity();\n+\n+        AnyObjectCR printerCR = new AnyObjectCR();\n+        printerCR.setRealm(SyncopeConstants.ROOT_REALM);\n+        printerCR.setName(\"Printer_\" + getUUIDString());\n+        printerCR.setType(\"PRINTER\");\n+        printerCR.getMemberships().add(new MembershipTO.Builder().group(group.getKey()).build());\n+        AnyObjectTO printer = createAnyObject(printerCR).getEntity();\n \n         group = groupService.read(group.getKey());\n         assertEquals(0, group.getDynamicAnyObjectMembershipCount());\n@@ -771,16 +773,16 @@ public void capabilitiesOverride() {\n \n         try {\n             // 1. create succeeds\n-            GroupTO group = getSampleTO(\"syncope714\");\n-            group.getPlainAttrs().add(attrTO(\"title\", \"first\"));\n-            group.getResources().add(RESOURCE_NAME_LDAP);\n+            GroupCR groupCR = getSample(\"syncope714\");\n+            groupCR.getPlainAttrs().add(attrTO(\"title\", \"first\"));\n+            groupCR.getResources().add(RESOURCE_NAME_LDAP);\n \n-            ProvisioningResult<GroupTO> result = createGroup(group);\n+            ProvisioningResult<GroupTO> result = createGroup(groupCR);\n             assertNotNull(result);\n             assertEquals(1, result.getPropagationStatuses().size());\n             assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n             assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-            group = result.getEntity();\n+            GroupTO group = result.getEntity();\n \n             // 2. update succeeds\n             GroupUR groupUR = new GroupUR();\n@@ -850,10 +852,10 @@ public void typeExtensions() {\n         typeExtension.setAnyType(AnyTypeKind.USER.name());\n         typeExtension.getAuxClasses().add(\"csv\");\n \n-        GroupTO groupTO = getBasicSampleTO(\"typeExtensions\");\n-        groupTO.getTypeExtensions().add(typeExtension);\n+        GroupCR groupCR = getBasicSample(\"typeExtensions\");\n+        groupCR.getTypeExtensions().add(typeExtension);\n \n-        groupTO = createGroup(groupTO).getEntity();\n+        GroupTO groupTO = createGroup(groupCR).getEntity();\n         assertNotNull(groupTO);\n         assertEquals(1, groupTO.getTypeExtensions().size());\n         assertEquals(1, groupTO.getTypeExtension(AnyTypeKind.USER.name()).get().getAuxClasses().size());\n@@ -879,13 +881,13 @@ public void typeExtensions() {\n     @Test\n     public void provisionMembers() throws InterruptedException {\n         // 1. create group without resources\n-        GroupTO groupTO = getBasicSampleTO(\"forProvision\");\n-        groupTO = createGroup(groupTO).getEntity();\n+        GroupCR groupCR = getBasicSample(\"forProvision\");\n+        GroupTO groupTO = createGroup(groupCR).getEntity();\n \n         // 2. create user with such group assigned\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"forProvision@syncope.apache.org\");\n-        userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n-        userTO = createUser(userTO).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"forProvision@syncope.apache.org\");\n+        userCR.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n+        UserTO userTO = createUser(userCR).getEntity();\n \n         // 3. modify the group by assiging the LDAP resource\n         GroupUR groupUR = new GroupUR();\n@@ -941,12 +943,12 @@ public void provisionMembers() throws InterruptedException {\n \n     @Test\n     public void issue178() {\n-        GroupTO groupTO = new GroupTO();\n+        GroupCR groupCR = new GroupCR();\n         String groupName = \"torename\" + getUUIDString();\n-        groupTO.setName(groupName);\n-        groupTO.setRealm(\"/\");\n+        groupCR.setName(groupName);\n+        groupCR.setRealm(\"/\");\n \n-        GroupTO actual = createGroup(groupTO).getEntity();\n+        GroupTO actual = createGroup(groupCR).getEntity();\n \n         assertNotNull(actual);\n         assertEquals(groupName, actual.getName());\n@@ -967,16 +969,17 @@ public void issueSYNCOPE632() {\n         DerSchemaTO modified = SerializationUtils.clone(orig);\n         modified.setExpression(\"icon + '_' + show\");\n \n-        GroupTO groupTO = GroupITCase.getSampleTO(\"lastGroup\");\n+        GroupCR groupCR = GroupITCase.getSample(\"lastGroup\");\n+        GroupTO groupTO = null;\n         try {\n             schemaService.update(SchemaType.DERIVED, modified);\n \n             // 0. create group\n-            groupTO.getPlainAttrs().add(attrTO(\"icon\", \"anIcon\"));\n-            groupTO.getPlainAttrs().add(attrTO(\"show\", \"true\"));\n-            groupTO.getResources().clear();\n+            groupCR.getPlainAttrs().add(attrTO(\"icon\", \"anIcon\"));\n+            groupCR.getPlainAttrs().add(attrTO(\"show\", \"true\"));\n+            groupCR.getResources().clear();\n \n-            groupTO = createGroup(groupTO).getEntity();\n+            groupTO = createGroup(groupCR).getEntity();\n             assertNotNull(groupTO);\n \n             // 1. create new LDAP resource having ConnObjectKey mapped to a derived attribute\n@@ -1054,7 +1057,7 @@ public void issueSYNCOPE632() {\n             assertEquals(1, entries);\n         } finally {\n             schemaService.update(SchemaType.DERIVED, orig);\n-            if (groupTO.getKey() != null) {\n+            if (groupTO != null) {\n                 groupService.delete(groupTO.getKey());\n             }\n             resourceService.delete(\"new-ldap\");\n@@ -1080,10 +1083,10 @@ public void issueSYNCOPE717() {\n         anyTypeClassService.update(minimalGroup);\n \n         // 2. create group, provide valid input value\n-        GroupTO groupTO = GroupITCase.getBasicSampleTO(\"syncope717\");\n-        groupTO.getPlainAttrs().add(attrTO(doubleSchemaName, \"11.23\"));\n+        GroupCR groupCR = GroupITCase.getBasicSample(\"syncope717\");\n+        groupCR.getPlainAttrs().add(attrTO(doubleSchemaName, \"11.23\"));\n \n-        groupTO = createGroup(groupTO).getEntity();\n+        GroupTO groupTO = createGroup(groupCR).getEntity();\n         assertNotNull(groupTO);\n         assertEquals(\"11.23\", groupTO.getPlainAttr(doubleSchemaName).get().getValues().get(0));\n "},{"sha":"6a2bd53eca87908ac9188de8b78b5f3dd2244136","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":48,"deletions":44,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -29,8 +29,10 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.ResourceDR;\n-import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n@@ -65,10 +67,10 @@ public class MembershipITCase extends AbstractITCase {\n \n     @Test\n     public void misc() {\n-        UserTO user = UserITCase.getUniqueSampleTO(\"memb@apache.org\");\n-        user.setRealm(\"/even/two\");\n-        user.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1976\").build());\n-        user.getPlainAttrs().remove(user.getPlainAttr(\"ctype\").get());\n+        UserCR userCR = UserITCase.getUniqueSample(\"memb@apache.org\");\n+        userCR.setRealm(\"/even/two\");\n+        userCR.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1976\").build());\n+        userCR.getPlainAttrs().removeIf(attr -> \"ctype\".equals(attr.getSchema()));\n \n         // the group 034740a9-fa10-453b-af37-dc7897e98fb1 has USER type extensions for 'csv' and 'other' \n         // any type classes\n@@ -78,11 +80,11 @@ public void misc() {\n         // 'fullname' is in 'minimal user', so it is not allowed for this membership\n         membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"fullname\").value(\"discarded\").build());\n \n-        user.getMemberships().add(membership);\n+        userCR.getMemberships().add(membership);\n \n         // user creation fails because of fullname\n         try {\n-            createUser(user);\n+            createUser(userCR);\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidUser, e.getType());\n@@ -91,16 +93,17 @@ public void misc() {\n \n         // remove fullname and try again\n         membership.getPlainAttrs().remove(membership.getPlainAttr(\"fullname\").get());\n+        UserTO userTO = null;\n         try {\n-            user = createUser(user).getEntity();\n+            userTO = createUser(userCR).getEntity();\n \n             // 1. verify that 'aLong' is correctly populated for user\n-            assertEquals(1, user.getPlainAttr(\"aLong\").get().getValues().size());\n-            assertEquals(\"1976\", user.getPlainAttr(\"aLong\").get().getValues().get(0));\n+            assertEquals(1, userTO.getPlainAttr(\"aLong\").get().getValues().size());\n+            assertEquals(\"1976\", userTO.getPlainAttr(\"aLong\").get().getValues().get(0));\n \n             // 2. verify that 'aLong' is correctly populated for user's membership\n-            assertEquals(1, user.getMemberships().size());\n-            membership = user.getMembership(\"034740a9-fa10-453b-af37-dc7897e98fb1\").get();\n+            assertEquals(1, userCR.getMemberships().size());\n+            membership = userTO.getMembership(\"034740a9-fa10-453b-af37-dc7897e98fb1\").get();\n             assertNotNull(membership);\n             assertEquals(1, membership.getPlainAttr(\"aLong\").get().getValues().size());\n             assertEquals(\"1977\", membership.getPlainAttr(\"aLong\").get().getValues().get(0));\n@@ -111,28 +114,28 @@ public void misc() {\n \n             // update user - change some values and add new membership attribute\n             UserUR userUR = new UserUR();\n-            userUR.setKey(user.getKey());\n+            userUR.setKey(userTO.getKey());\n \n             userUR.getPlainAttrs().add(new AttrPatch.Builder().\n                     attrTO(new AttrTO.Builder().schema(\"aLong\").value(\"1977\").build()).build());\n \n-            MembershipPatch membershipPatch = new MembershipPatch.Builder().group(membership.getGroupKey()).build();\n+            MembershipUR membershipPatch = new MembershipUR.Builder().group(membership.getGroupKey()).build();\n             membershipPatch.getPlainAttrs().add(\n                     new AttrTO.Builder().schema(\"aLong\").value(\"1976\").build());\n             membershipPatch.getPlainAttrs().add(\n                     new AttrTO.Builder().schema(\"ctype\").value(\"membership type\").build());\n             userUR.getMemberships().add(membershipPatch);\n \n-            user = updateUser(userUR).getEntity();\n+            userTO = updateUser(userUR).getEntity();\n \n             // 4. verify that 'aLong' is correctly populated for user\n-            assertEquals(1, user.getPlainAttr(\"aLong\").get().getValues().size());\n-            assertEquals(\"1977\", user.getPlainAttr(\"aLong\").get().getValues().get(0));\n-            assertFalse(user.getPlainAttr(\"ctype\").isPresent());\n+            assertEquals(1, userTO.getPlainAttr(\"aLong\").get().getValues().size());\n+            assertEquals(\"1977\", userTO.getPlainAttr(\"aLong\").get().getValues().get(0));\n+            assertFalse(userTO.getPlainAttr(\"ctype\").isPresent());\n \n             // 5. verify that 'aLong' is correctly populated for user's membership\n-            assertEquals(1, user.getMemberships().size());\n-            membership = user.getMembership(\"034740a9-fa10-453b-af37-dc7897e98fb1\").get();\n+            assertEquals(1, userCR.getMemberships().size());\n+            membership = userTO.getMembership(\"034740a9-fa10-453b-af37-dc7897e98fb1\").get();\n             assertNotNull(membership);\n             assertEquals(1, membership.getPlainAttr(\"aLong\").get().getValues().size());\n             assertEquals(\"1976\", membership.getPlainAttr(\"aLong\").get().getValues().get(0));\n@@ -142,33 +145,33 @@ public void misc() {\n \n             // finally remove membership\n             userUR = new UserUR();\n-            userUR.setKey(user.getKey());\n+            userUR.setKey(userTO.getKey());\n \n-            membershipPatch = new MembershipPatch.Builder().group(membership.getGroupKey()).\n+            membershipPatch = new MembershipUR.Builder().group(membership.getGroupKey()).\n                     operation(PatchOperation.DELETE).build();\n             userUR.getMemberships().add(membershipPatch);\n \n-            user = updateUser(userUR).getEntity();\n+            userTO = updateUser(userUR).getEntity();\n \n-            assertTrue(user.getMemberships().isEmpty());\n+            assertTrue(userTO.getMemberships().isEmpty());\n         } finally {\n-            if (user.getKey() != null) {\n-                userService.delete(user.getKey());\n+            if (userTO != null) {\n+                userService.delete(userTO.getKey());\n             }\n         }\n     }\n \n     @Test\n     public void deleteUserWithMembership() {\n-        UserTO user = UserITCase.getUniqueSampleTO(\"memb@apache.org\");\n-        user.setRealm(\"/even/two\");\n-        user.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1976\").build());\n+        UserCR userCR = UserITCase.getUniqueSample(\"memb@apache.org\");\n+        userCR.setRealm(\"/even/two\");\n+        userCR.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1976\").build());\n \n         MembershipTO membership = new MembershipTO.Builder().group(\"034740a9-fa10-453b-af37-dc7897e98fb1\").build();\n         membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1977\").build());\n-        user.getMemberships().add(membership);\n+        userCR.getMemberships().add(membership);\n \n-        user = createUser(user).getEntity();\n+        UserTO user = createUser(userCR).getEntity();\n         assertNotNull(user.getKey());\n \n         userService.delete(user.getKey());\n@@ -182,19 +185,19 @@ public void onGroupDelete() {\n         typeExtension.getAuxClasses().add(\"csv\");\n         typeExtension.getAuxClasses().add(\"other\");\n \n-        GroupTO groupTO = GroupITCase.getBasicSampleTO(\"typeExt\");\n-        groupTO.getTypeExtensions().add(typeExtension);\n-        groupTO = createGroup(groupTO).getEntity();\n+        GroupCR groupCR = GroupITCase.getBasicSample(\"typeExt\");\n+        groupCR.getTypeExtensions().add(typeExtension);\n+        GroupTO groupTO = createGroup(groupCR).getEntity();\n         assertNotNull(groupTO);\n \n         // pre: create user with membership to such group\n-        UserTO user = UserITCase.getUniqueSampleTO(\"typeExt@apache.org\");\n+        UserCR userCR = UserITCase.getUniqueSample(\"typeExt@apache.org\");\n \n         MembershipTO membership = new MembershipTO.Builder().group(groupTO.getKey()).build();\n         membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1454\").build());\n-        user.getMemberships().add(membership);\n+        userCR.getMemberships().add(membership);\n \n-        user = createUser(user).getEntity();\n+        UserTO user = createUser(userCR).getEntity();\n \n         // verify that 'aLong' is correctly populated for user's membership\n         assertEquals(1, user.getMemberships().size());\n@@ -238,17 +241,18 @@ public void pull() {\n             assertNotNull(newResource);\n \n             // 1. create user with new resource assigned\n-            UserTO user = UserITCase.getUniqueSampleTO(\"memb@apache.org\");\n-            user.setRealm(\"/even/two\");\n-            user.getPlainAttrs().remove(user.getPlainAttr(\"ctype\").get());\n-            user.getResources().clear();\n-            user.getResources().add(newResource.getKey());\n+            UserCR userCR = UserITCase.getUniqueSample(\"memb@apache.org\");\n+            userCR.setRealm(\"/even/two\");\n+            UserTO user;\n+            userCR.getPlainAttrs().removeIf(attr -> \"ctype\".equals(attr.getSchema()));\n+            userCR.getResources().clear();\n+            userCR.getResources().add(newResource.getKey());\n \n             MembershipTO membership = new MembershipTO.Builder().group(\"034740a9-fa10-453b-af37-dc7897e98fb1\").build();\n             membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"5432\").build());\n-            user.getMemberships().add(membership);\n+            userCR.getMemberships().add(membership);\n \n-            user = createUser(user).getEntity();\n+            user = createUser(userCR).getEntity();\n             assertNotNull(user);\n \n             // 2. verify that user was found on resource"},{"sha":"927ba4b7776c2b29763e524399b122c0e6828644","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n@@ -133,15 +134,15 @@ public void readRealm() {\n     public void createUser() {\n         assertNull(adminClient.getService(RealmService.class).list().get(0).getPasswordPolicy());\n \n-        UserTO user = new UserTO();\n-        user.setRealm(SyncopeConstants.ROOT_REALM);\n-        user.setUsername(getUUIDString());\n-        user.setPassword(\"password\");\n+        UserCR userCR = new UserCR();\n+        userCR.setRealm(SyncopeConstants.ROOT_REALM);\n+        userCR.setUsername(getUUIDString());\n+        userCR.setPassword(\"password\");\n \n-        Response response = adminClient.getService(UserService.class).create(user, true);\n+        Response response = adminClient.getService(UserService.class).create(userCR);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n \n-        user = response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        UserTO user = response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         }).getEntity();\n         assertNotNull(user);\n     }\n@@ -260,7 +261,7 @@ public void issueSYNCOPE1377() {\n         try {\n             new SyncopeClientFactoryBean().setAddress(ADDRESS).setDomain(\"NotExisting\").create().\n                     getService(UserSelfService.class).\n-                    create(UserITCase.getUniqueSampleTO(\"syncope1377@syncope.apache.org\"), true);\n+                    create(UserITCase.getUniqueSample(\"syncope1377@syncope.apache.org\"));\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());"},{"sha":"fa68c05b83c814c3d4104363a542509a556846f4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -27,6 +27,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n@@ -265,10 +266,10 @@ public void issueSYNCOPE446() throws Exception {\n         assertEquals(recipientsProvider.getKey(), notification.getRecipientsProvider());\n \n         // 2. create group\n-        GroupTO groupTO = new GroupTO();\n-        groupTO.setName(groupName);\n-        groupTO.setRealm(\"/even/two\");\n-        groupTO = createGroup(groupTO).getEntity();\n+        GroupCR groupCR = new GroupCR();\n+        groupCR.setName(groupName);\n+        groupCR.setRealm(\"/even/two\");\n+        GroupTO groupTO = createGroup(groupCR).getEntity();\n         assertNotNull(groupTO);\n \n         // 3. verify"},{"sha":"2b2fb8454626f1af1157aead585ba30f8d2be71b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PlainSchemaITCase.java","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -32,7 +32,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.AttrPatch;\n-import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n@@ -47,6 +47,7 @@\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n import org.apache.cxf.helpers.IOUtils;\n+import org.apache.syncope.common.lib.request.UserCR;\n \n public class PlainSchemaITCase extends AbstractITCase {\n \n@@ -178,9 +179,9 @@ public void binaryValidation() throws IOException {\n \n         createSchema(SchemaType.PLAIN, schemaTOjson2);\n \n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"test@syncope.apache.org\");\n+        UserCR userCR = UserITCase.getUniqueSample(\"test@syncope.apache.org\");\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         UserUR userUR = new UserUR();\n@@ -315,11 +316,11 @@ public void issue258() {\n         typeClass.getPlainSchemas().add(schemaTO.getKey());\n         anyTypeClassService.create(typeClass);\n \n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"issue258@syncope.apache.org\");\n-        userTO.getAuxClasses().add(typeClass.getKey());\n-        userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1.2\"));\n+        UserCR userCR = UserITCase.getUniqueSample(\"issue258@syncope.apache.org\");\n+        userCR.getAuxClasses().add(typeClass.getKey());\n+        userCR.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1.2\"));\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         schemaTO.setType(AttrSchemaType.Long);\n@@ -344,14 +345,14 @@ public void issue259() {\n         typeClass.getPlainSchemas().add(schemaTO.getKey());\n         anyTypeClassService.create(typeClass);\n \n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"issue259@syncope.apache.org\");\n-        userTO.getAuxClasses().add(typeClass.getKey());\n-        userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1\"));\n-        userTO = createUser(userTO).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"issue259@syncope.apache.org\");\n+        userCR.getAuxClasses().add(typeClass.getKey());\n+        userCR.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1\"));\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         UserUR req = new UserUR.Builder().key(userTO.getKey()).\n-                membership(new MembershipPatch.Builder().group(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\").build()).build();\n+                membership(new MembershipUR.Builder().group(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\").build()).build();\n \n         UserTO newUserTO = updateUser(req).getEntity();\n         assertNotNull(newUserTO);\n@@ -370,10 +371,10 @@ public void issue260() {\n         typeClass.getPlainSchemas().add(schemaTO.getKey());\n         anyTypeClassService.create(typeClass);\n \n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"issue260@syncope.apache.org\");\n-        userTO.getAuxClasses().add(typeClass.getKey());\n-        userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1.2\"));\n-        userTO = createUser(userTO).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"issue260@syncope.apache.org\");\n+        userCR.getAuxClasses().add(typeClass.getKey());\n+        userCR.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1.2\"));\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         schemaTO.setUniqueConstraint(false);"},{"sha":"f07a54630587c2df5f9262375dd6853dd437e1a1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":16,"deletions":14,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -32,7 +32,9 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.lib.batch.BatchRequest;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -96,9 +98,9 @@ public void read() {\n     @Test\n     public void batch() throws IOException {\n         // create user with testdb resource\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"taskBatch@apache.org\");\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n-        userTO = createUser(userTO).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"taskBatch@apache.org\");\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n+        UserTO userTO = createUser(userCR).getEntity();\n \n         List<PropagationTaskTO> tasks = new ArrayList<>(\n                 taskService.<PropagationTaskTO>search(new TaskQuery.Builder(TaskType.PROPAGATION).\n@@ -139,11 +141,12 @@ public void propagationJEXLTransformer() {\n             resourceService.update(resource);\n \n             // 1. create printer on external resource\n-            AnyObjectTO anyObjectTO = AnyObjectITCase.getSampleTO(\"propagationJEXLTransformer\");\n-            String originalLocation = anyObjectTO.getPlainAttr(\"location\").get().getValues().get(0);\n+            AnyObjectCR anyObjectCR = AnyObjectITCase.getSample(\"propagationJEXLTransformer\");\n+            String originalLocation = anyObjectCR.getPlainAttrs().stream().\n+                    filter(attr -> \"location\".equals(attr.getSchema())).findFirst().get().getValues().get(0);\n             assertFalse(originalLocation.endsWith(suffix));\n \n-            anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n+            AnyObjectTO anyObjectTO = createAnyObject(anyObjectCR).getEntity();\n             assertNotNull(anyObjectTO);\n \n             // 2. verify that JEXL MappingItemTransformer was applied during propagation\n@@ -179,11 +182,11 @@ public void privileges() {\n         ldap = createResource(ldap);\n \n         try {\n-            UserTO user = UserITCase.getUniqueSampleTO(\"privilege@syncope.apache.org\");\n-            user.getResources().add(ldap.getKey());\n-            user.getRoles().add(\"Other\");\n+            UserCR userCR = UserITCase.getUniqueSample(\"privilege@syncope.apache.org\");\n+            userCR.getResources().add(ldap.getKey());\n+            userCR.getRoles().add(\"Other\");\n \n-            ProvisioningResult<UserTO> result = createUser(user);\n+            ProvisioningResult<UserTO> result = createUser(userCR);\n             assertEquals(1, result.getPropagationStatuses().size());\n             assertNotNull(result.getPropagationStatuses().get(0).getAfterObj());\n \n@@ -245,10 +248,10 @@ public void issueSYNCOPE741() {\n     @Test\n     public void issueSYNCOPE1288() {\n         // create a new user\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"xxxyyy@xxx.xxx\");\n-        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+        UserCR userCR = UserITCase.getUniqueSample(\"xxxyyy@xxx.xxx\");\n+        userCR.getResources().add(RESOURCE_NAME_LDAP);\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         // generate some PropagationTasks\n@@ -312,5 +315,4 @@ public int compare(final TaskTO o1, final TaskTO o2) {\n \n         assertTrue(orderedTasks.getResult().equals(unorderedTasks.getResult()));\n     }\n-\n }"},{"sha":"1b850eb654201b9b93ae043bbaf1edbf59e8446e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":78,"deletions":74,"changes":152,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -52,6 +52,10 @@\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n+import org.apache.syncope.common.lib.request.AnyCR;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n+import org.apache.syncope.common.lib.request.GroupCR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -214,20 +218,20 @@ public void fromCSV() throws Exception {\n         // -----------------------------\n         // Create a new user ... it should be updated applying pull policy\n         // -----------------------------\n-        UserTO inUserTO = new UserTO();\n-        inUserTO.setRealm(SyncopeConstants.ROOT_REALM);\n-        inUserTO.setPassword(\"password123\");\n+        UserCR inUserRC = new UserCR();\n+        inUserRC.setRealm(SyncopeConstants.ROOT_REALM);\n+        inUserRC.setPassword(\"password123\");\n         String userName = \"test9\";\n-        inUserTO.setUsername(userName);\n-        inUserTO.getPlainAttrs().add(attrTO(\"firstname\", \"nome9\"));\n-        inUserTO.getPlainAttrs().add(attrTO(\"surname\", \"cognome\"));\n-        inUserTO.getPlainAttrs().add(attrTO(\"ctype\", \"a type\"));\n-        inUserTO.getPlainAttrs().add(attrTO(\"fullname\", \"nome cognome\"));\n-        inUserTO.getPlainAttrs().add(attrTO(\"userId\", \"puccini@syncope.apache.org\"));\n-        inUserTO.getPlainAttrs().add(attrTO(\"email\", \"puccini@syncope.apache.org\"));\n-        inUserTO.getAuxClasses().add(\"csv\");\n-\n-        inUserTO = createUser(inUserTO).getEntity();\n+        inUserRC.setUsername(userName);\n+        inUserRC.getPlainAttrs().add(attrTO(\"firstname\", \"nome9\"));\n+        inUserRC.getPlainAttrs().add(attrTO(\"surname\", \"cognome\"));\n+        inUserRC.getPlainAttrs().add(attrTO(\"ctype\", \"a type\"));\n+        inUserRC.getPlainAttrs().add(attrTO(\"fullname\", \"nome cognome\"));\n+        inUserRC.getPlainAttrs().add(attrTO(\"userId\", \"puccini@syncope.apache.org\"));\n+        inUserRC.getPlainAttrs().add(attrTO(\"email\", \"puccini@syncope.apache.org\"));\n+        inUserRC.getAuxClasses().add(\"csv\");\n+\n+        UserTO inUserTO = createUser(inUserRC).getEntity();\n         assertNotNull(inUserTO);\n         assertFalse(inUserTO.getResources().contains(RESOURCE_NAME_CSV));\n \n@@ -399,11 +403,11 @@ public void reconcileFromLDAP() {\n         // Check for SYNCOPE-1343\n         assertEquals(\"odd\", matchingUsers.getResult().get(0).getPlainAttr(\"title\").get().getValues().get(0));\n \n-        GroupTO groupTO = matchingGroups.getResult().iterator().next();\n+        GroupTO groupTO = matchingGroups.getResult().get(0);\n         assertNotNull(groupTO);\n         assertEquals(\"testLDAPGroup\", groupTO.getName());\n         assertEquals(\"true\", groupTO.getPlainAttr(\"show\").get().getValues().get(0));\n-        assertEquals(matchingUsers.getResult().iterator().next().getKey(), groupTO.getUserOwner());\n+        assertEquals(matchingUsers.getResult().get(0).getKey(), groupTO.getUserOwner());\n         assertNull(groupTO.getGroupOwner());\n         // SYNCOPE-1343, set value title to null on LDAP\n         ConnObjectTO userConnObject = resourceService.readConnObject(\n@@ -518,13 +522,12 @@ public void reconcileFromScriptedSQL() throws IOException {\n                     UUID.randomUUID().toString(), \"Mysterious Printer\", \"Nowhere\", true, new Date());\n \n             // 1. create printer on external resource\n-            AnyObjectTO anyObjectTO = AnyObjectITCase.getSampleTO(\"pull\");\n+            AnyObjectCR anyObjectCR = AnyObjectITCase.getSample(\"pull\");\n+            AnyObjectTO anyObjectTO = createAnyObject(anyObjectCR).getEntity();\n+            assertNotNull(anyObjectTO);\n             String originalLocation = anyObjectTO.getPlainAttr(\"location\").get().getValues().get(0);\n             assertFalse(originalLocation.startsWith(prefix));\n \n-            anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n-            assertNotNull(anyObjectTO);\n-\n             // 2. verify that PrefixMappingItemTransformer was applied during propagation\n             // (location starts with given prefix on external resource)\n             ConnObjectTO connObjectTO = resourceService.\n@@ -766,22 +769,23 @@ public void remediation() {\n             assertTrue(remediation.isPresent());\n             assertEquals(AnyTypeKind.USER.name(), remediation.get().getAnyType());\n             assertEquals(ResourceOperation.CREATE, remediation.get().getOperation());\n-            assertNotNull(remediation.get().getAnyTOPayload());\n+            assertNotNull(remediation.get().getAnyCRPayload());\n             assertNull(remediation.get().getAnyURPayload());\n             assertNull(remediation.get().getKeyPayload());\n             assertTrue(remediation.get().getError().contains(\"RequiredValuesMissing [userId]\"));\n \n             // 4. remedy by copying the email value to userId\n-            UserTO user = (UserTO) remediation.get().getAnyTOPayload();\n-            user.getResources().clear();\n+            AnyCR userCR = remediation.get().getAnyCRPayload();\n+            userCR.getResources().clear();\n \n-            String email = user.getPlainAttr(\"email\").get().getValues().get(0);\n-            user.getPlainAttrs().add(new AttrTO.Builder().schema(\"userId\").value(email).build());\n+            String email = userCR.getPlainAttrs().stream().\n+                    filter(attr -> \"email\".equals(attr.getSchema())).findFirst().get().getValues().get(0);\n+            userCR.getPlainAttrs().add(new AttrTO.Builder().schema(\"userId\").value(email).build());\n \n-            remediationService.remedy(remediation.get().getKey(), user);\n+            remediationService.remedy(remediation.get().getKey(), userCR);\n \n             // 5. user is now found\n-            user = userService.read(\"pullFromLDAP\");\n+            UserTO user = userService.read(\"pullFromLDAP\");\n             assertNotNull(user);\n             assertEquals(email, user.getPlainAttr(\"userId\").get().getValues().get(0));\n \n@@ -802,25 +806,25 @@ public void issueSYNCOPE68() {\n         //-----------------------------\n         // Create a new user ... it should be updated applying pull policy\n         //-----------------------------\n-        UserTO userTO = new UserTO();\n-        userTO.setRealm(SyncopeConstants.ROOT_REALM);\n-        userTO.setPassword(\"password123\");\n-        userTO.setUsername(\"testuser2\");\n-\n-        userTO.getPlainAttrs().add(attrTO(\"firstname\", \"testuser2\"));\n-        userTO.getPlainAttrs().add(attrTO(\"surname\", \"testuser2\"));\n-        userTO.getPlainAttrs().add(attrTO(\"ctype\", \"a type\"));\n-        userTO.getPlainAttrs().add(attrTO(\"fullname\", \"a type\"));\n-        userTO.getPlainAttrs().add(attrTO(\"userId\", \"testuser2@syncope.apache.org\"));\n-        userTO.getPlainAttrs().add(attrTO(\"email\", \"testuser2@syncope.apache.org\"));\n-\n-        userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION2);\n-        userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION4);\n-\n-        userTO.getMemberships().add(\n+        UserCR userCR = new UserCR();\n+        userCR.setRealm(SyncopeConstants.ROOT_REALM);\n+        userCR.setPassword(\"password123\");\n+        userCR.setUsername(\"testuser2\");\n+\n+        userCR.getPlainAttrs().add(attrTO(\"firstname\", \"testuser2\"));\n+        userCR.getPlainAttrs().add(attrTO(\"surname\", \"testuser2\"));\n+        userCR.getPlainAttrs().add(attrTO(\"ctype\", \"a type\"));\n+        userCR.getPlainAttrs().add(attrTO(\"fullname\", \"a type\"));\n+        userCR.getPlainAttrs().add(attrTO(\"userId\", \"testuser2@syncope.apache.org\"));\n+        userCR.getPlainAttrs().add(attrTO(\"email\", \"testuser2@syncope.apache.org\"));\n+\n+        userCR.getResources().add(RESOURCE_NAME_NOPROPAGATION2);\n+        userCR.getResources().add(RESOURCE_NAME_NOPROPAGATION4);\n+\n+        userCR.getMemberships().add(\n                 new MembershipTO.Builder().group(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").build());\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"testuser2\", userTO.getUsername());\n         assertEquals(1, userTO.getMemberships().size());\n@@ -941,17 +945,17 @@ public void issueSYNCOPE258() throws IOException {\n         Response response = taskService.create(TaskType.PULL, task);\n         task = getObject(response.getLocation(), TaskService.class, PullTaskTO.class);\n \n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"s258_1@apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_WS2);\n+        UserCR userCR = UserITCase.getUniqueSample(\"s258_1@apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getResources().add(RESOURCE_NAME_WS2);\n \n-        createUser(userTO);\n+        createUser(userCR);\n \n-        userTO = UserITCase.getUniqueSampleTO(\"s258_2@apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_WS2);\n+        userCR = UserITCase.getUniqueSample(\"s258_2@apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getResources().add(RESOURCE_NAME_WS2);\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n \n         // change email in order to unmatch the second user\n         UserUR userUR = new UserUR();\n@@ -975,11 +979,11 @@ public void issueSYNCOPE272() {\n         removeTestUsers();\n \n         // create user with testdb resource\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope272@syncope.apache.org\");\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope272@syncope.apache.org\");\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n \n-        ProvisioningResult<UserTO> result = createUser(userTO);\n-        userTO = result.getEntity();\n+        ProvisioningResult<UserTO> result = createUser(userCR);\n+        UserTO userTO = result.getEntity();\n         try {\n             assertNotNull(userTO);\n             assertEquals(1, result.getPropagationStatuses().size());\n@@ -1001,16 +1005,16 @@ public void issueSYNCOPE272() {\n \n     @Test\n     public void issueSYNCOPE307() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"s307@apache.org\");\n-        userTO.setUsername(\"test0\");\n-        userTO.getPlainAttr(\"firstname\").get().getValues().clear();\n-        userTO.getPlainAttr(\"firstname\").get().getValues().add(\"nome0\");\n-        userTO.getAuxClasses().add(\"csv\");\n+        UserCR userCR = UserITCase.getUniqueSample(\"s307@apache.org\");\n+        userCR.setUsername(\"test0\");\n+        userCR.getPlainAttrs().removeIf(attr -> \"firstname\".equals(attr.getSchema()));\n+        userCR.getPlainAttrs().add(attrTO(\"firstname\", \"nome0\"));\n+        userCR.getAuxClasses().add(\"csv\");\n \n-        userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_WS2);\n+        userCR.getResources().clear();\n+        userCR.getResources().add(RESOURCE_NAME_WS2);\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         userTO = userService.read(userTO.getKey());\n@@ -1046,10 +1050,10 @@ public void issueSYNCOPE307() {\n     @Test\n     public void issueSYNCOPE313DB() throws Exception {\n         // 1. create user in DB\n-        UserTO user = UserITCase.getUniqueSampleTO(\"syncope313-db@syncope.apache.org\");\n-        user.setPassword(\"security123\");\n-        user.getResources().add(RESOURCE_NAME_TESTDB);\n-        user = createUser(user).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope313-db@syncope.apache.org\");\n+        userCR.setPassword(\"security123\");\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n+        UserTO user = createUser(userCR).getEntity();\n         assertNotNull(user);\n         assertFalse(user.getResources().isEmpty());\n \n@@ -1118,10 +1122,10 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         try {\n             // 1. create user in LDAP\n             String oldCleanPassword = \"security123\";\n-            user = UserITCase.getUniqueSampleTO(\"syncope313-ldap@syncope.apache.org\");\n-            user.setPassword(oldCleanPassword);\n-            user.getResources().add(RESOURCE_NAME_LDAP);\n-            user = createUser(user).getEntity();\n+            UserCR userCR = UserITCase.getUniqueSample(\"syncope313-ldap@syncope.apache.org\");\n+            userCR.setPassword(oldCleanPassword);\n+            userCR.getResources().add(RESOURCE_NAME_LDAP);\n+            user = createUser(userCR).getEntity();\n             assertNotNull(user);\n             assertFalse(user.getResources().isEmpty());\n \n@@ -1213,9 +1217,9 @@ public void issueSYNCOPE1062() {\n         GroupTO group = null;\n         try {\n             // 1. create group with resource for propagation\n-            propagationGroup = GroupITCase.getBasicSampleTO(\"SYNCOPE1062\");\n-            propagationGroup.getResources().add(RESOURCE_NAME_DBPULL);\n-            propagationGroup = createGroup(propagationGroup).getEntity();\n+            GroupCR propagationGroupCR = GroupITCase.getBasicSample(\"SYNCOPE1062\");\n+            propagationGroupCR.getResources().add(RESOURCE_NAME_DBPULL);\n+            propagationGroup = createGroup(propagationGroupCR).getEntity();\n \n             // 2. create pull task for another resource, with user template assigning the group above\n             pullTask = new PullTaskTO();"},{"sha":"4988a8b2bf3cbfb670d777011b4dff32f7410c22","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -33,6 +33,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -365,14 +366,14 @@ public void issueSYNCOPE598() {\n         anyTypeClassService.create(typeClass);\n \n         // create a new sample group\n-        GroupTO groupTO = new GroupTO();\n-        groupTO.setName(\"all\" + getUUIDString());\n-        groupTO.setRealm(\"/even\");\n-        groupTO.getAuxClasses().add(typeClass.getKey());\n+        GroupCR groupCR = new GroupCR();\n+        groupCR.setName(\"all\" + getUUIDString());\n+        groupCR.setRealm(\"/even\");\n+        groupCR.getAuxClasses().add(typeClass.getKey());\n \n-        groupTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"all\"));\n+        groupCR.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"all\"));\n \n-        groupTO = createGroup(groupTO).getEntity();\n+        GroupTO groupTO = createGroup(groupCR).getEntity();\n         assertNotNull(groupTO);\n \n         String resourceName = \"resource-ldap-grouponly\";"},{"sha":"a0326a3cc8a1126e81602671f231aabf20fca726","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RESTITCase.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -44,6 +44,7 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n import org.apache.syncope.common.lib.request.UserUR;\n@@ -102,16 +103,16 @@ public void noContent() throws IOException {\n         GroupService noContentService = noContentclient.prefer(\n                 noContentclient.getService(GroupService.class), Preference.RETURN_NO_CONTENT);\n \n-        GroupTO group = GroupITCase.getSampleTO(\"noContent\");\n+        GroupCR groupCR = GroupITCase.getSample(\"noContent\");\n \n-        Response response = noContentService.create(group);\n+        Response response = noContentService.create(groupCR);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n         assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n         assertEquals(\n                 StringUtils.EMPTY,\n                 IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8));\n \n-        group = getObject(response.getLocation(), GroupService.class, GroupTO.class);\n+        GroupTO group = getObject(response.getLocation(), GroupService.class, GroupTO.class);\n         assertNotNull(group);\n \n         GroupUR groupUR = new GroupUR();\n@@ -135,7 +136,7 @@ public void noContent() throws IOException {\n \n     @Test\n     public void ifMatch() {\n-        UserTO userTO = userService.create(UserITCase.getUniqueSampleTO(\"ifmatch@syncope.apache.org\"), true).\n+        UserTO userTO = userService.create(UserITCase.getUniqueSample(\"ifmatch@syncope.apache.org\")).\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                 }).getEntity();\n         assertNotNull(userTO);"},{"sha":"4374459059380e22a73f839069eab2a825ab2d75","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReconciliationITCase.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -26,6 +26,7 @@\n \n import java.util.Date;\n import javax.sql.DataSource;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n@@ -49,9 +50,9 @@ public class ReconciliationITCase extends AbstractITCase {\n     @Test\n     public void push() {\n         // 1. create printer, with no resources\n-        AnyObjectTO printer = AnyObjectITCase.getSampleTO(\"reconciliation\");\n-        printer.getResources().clear();\n-        printer = createAnyObject(printer).getEntity();\n+        AnyObjectCR printerCR = AnyObjectITCase.getSample(\"reconciliation\");\n+        printerCR.getResources().clear();\n+        AnyObjectTO printer = createAnyObject(printerCR).getEntity();\n         assertNotNull(printer.getKey());\n \n         // 2. verify no printer with that name is on the external resource's db\n@@ -97,9 +98,9 @@ public void push() {\n     @Test\n     public void pull() {\n         // 1. create printer, with no resources\n-        AnyObjectTO printer = AnyObjectITCase.getSampleTO(\"reconciliation\");\n-        printer.getResources().clear();\n-        printer = createAnyObject(printer).getEntity();\n+        AnyObjectCR printerCR = AnyObjectITCase.getSample(\"reconciliation\");\n+        printerCR.getResources().clear();\n+        AnyObjectTO printer = createAnyObject(printerCR).getEntity();\n         assertNotNull(printer.getKey());\n         assertNotEquals(\"Nowhere\", printer.getPlainAttr(\"location\").get().getValues().get(0));\n "},{"sha":"8e92368fe64f9ff808d642294a17a25b3838a422","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":12,"deletions":8,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -40,6 +40,8 @@\n import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n@@ -406,16 +408,18 @@ public void syncToken() {\n         ResourceTO resource = resourceService.read(RESOURCE_NAME_DBSCRIPTED);\n         resource.setKey(resource.getKey() + getUUIDString());\n \n-        AnyObjectTO anyObject = AnyObjectITCase.getSampleTO(\"syncToken\");\n-        anyObject.getResources().clear();\n-        anyObject.getResources().add(resource.getKey());\n+        AnyObjectCR anyObjectCR = AnyObjectITCase.getSample(\"syncToken\");\n+        anyObjectCR.getResources().clear();\n+        anyObjectCR.getResources().add(resource.getKey());\n+\n+        AnyObjectTO anyObject = null;\n         try {\n             // create a new resource\n             resource = createResource(resource);\n             assertNull(resource.getProvision(\"PRINTER\").get().getSyncToken());\n \n             // create some object on the new resource\n-            anyObject = createAnyObject(anyObject).getEntity();\n+            anyObject = createAnyObject(anyObjectCR).getEntity();\n \n             // update sync token\n             resourceService.setLatestSyncToken(resource.getKey(), \"PRINTER\");\n@@ -429,7 +433,7 @@ public void syncToken() {\n             resource = resourceService.read(resource.getKey());\n             assertNull(resource.getProvision(\"PRINTER\").get().getSyncToken());\n         } finally {\n-            if (anyObject.getKey() != null) {\n+            if (anyObject != null) {\n                 anyObjectService.delete(anyObject.getKey());\n             }\n             resourceService.delete(resource.getKey());\n@@ -517,9 +521,9 @@ public void read() {\n     public void listConnObjects() {\n         List<String> groupKeys = new ArrayList<>();\n         for (int i = 0; i < 10; i++) {\n-            GroupTO group = GroupITCase.getSampleTO(\"group\");\n-            group.getResources().add(RESOURCE_NAME_LDAP);\n-            group = createGroup(group).getEntity();\n+            GroupCR groupCR = GroupITCase.getSample(\"group\");\n+            groupCR.getResources().add(RESOURCE_NAME_LDAP);\n+            GroupTO group = createGroup(groupCR).getEntity();\n             groupKeys.add(group.getKey());\n         }\n "},{"sha":"27f691a83fe14a4f8d6274f3c995e2551ad92f17","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SCIMITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -321,7 +321,7 @@ public void search() {\n         assertEquals(\"additional\", additional.getDisplayName());\n \n         // gt\n-        UserTO newUser = userService.create(UserITCase.getUniqueSampleTO(\"scimsearch@syncope.apache.org\"), true).\n+        UserTO newUser = userService.create(UserITCase.getUniqueSample(\"scimsearch@syncope.apache.org\")).\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                 }).getEntity();\n "},{"sha":"840da6e45822f743963313e8a6d436b86dc7d636","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":19,"deletions":16,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -28,9 +28,12 @@\n import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n-import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.GroupCR;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n@@ -133,9 +136,9 @@ public void searchByGroup() {\n \n     @Test\n     public void searchByDynGroup() {\n-        GroupTO group = GroupITCase.getBasicSampleTO(\"dynMembership\");\n-        group.setUDynMembershipCond(\"cool==true\");\n-        group = createGroup(group).getEntity();\n+        GroupCR groupCR = GroupITCase.getBasicSample(\"dynMembership\");\n+        groupCR.setUDynMembershipCond(\"cool==true\");\n+        GroupTO group = createGroup(groupCR).getEntity();\n         assertNotNull(group);\n \n         if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n@@ -373,11 +376,11 @@ public void searchByRelationshipType() {\n     @Test\n     public void searchBySecurityAnswer() {\n         String securityAnswer = RandomStringUtils.randomAlphanumeric(10);\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"securityAnswer@syncope.apache.org\");\n-        userTO.setSecurityQuestion(\"887028ea-66fc-41e7-b397-620d7ea6dfbb\");\n-        userTO.setSecurityAnswer(securityAnswer);\n+        UserCR userCR = UserITCase.getUniqueSample(\"securityAnswer@syncope.apache.org\");\n+        userCR.setSecurityQuestion(\"887028ea-66fc-41e7-b397-620d7ea6dfbb\");\n+        userCR.setSecurityAnswer(securityAnswer);\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO.getSecurityQuestion());\n \n         PagedResult<UserTO> matchingUsers = userService.search(\n@@ -477,18 +480,18 @@ public void issueSYNCOPE980() {\n \n         String serviceKey = null;\n         try {\n-            AnyObjectTO anyObjectTO = new AnyObjectTO();\n-            anyObjectTO.setName(\"one\");\n-            anyObjectTO.setRealm(SyncopeConstants.ROOT_REALM);\n-            anyObjectTO.setType(service.getKey());\n-            anyObjectTO.getMemberships().add(\n+            AnyObjectCR anyObjectCR = new AnyObjectCR();\n+            anyObjectCR.setName(\"one\");\n+            anyObjectCR.setRealm(SyncopeConstants.ROOT_REALM);\n+            anyObjectCR.setType(service.getKey());\n+            anyObjectCR.getMemberships().add(\n                     new MembershipTO.Builder().group(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build());\n-            serviceKey = createAnyObject(anyObjectTO).getEntity().getKey();\n+            serviceKey = createAnyObject(anyObjectCR).getEntity().getKey();\n \n             AnyObjectUR anyObjectUR = new AnyObjectUR();\n             anyObjectUR.setKey(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\");\n-            anyObjectUR.getMemberships().add(\n-                    new MembershipPatch.Builder().group(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build());\n+            anyObjectUR.getMemberships().add(new MembershipUR.Builder().group(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").\n+                    build());\n             updateAnyObject(anyObjectUR);\n \n             PagedResult<AnyObjectTO> matching = anyObjectService.search(new AnyQuery.Builder().fiql("},{"sha":"e5d3d37dc95484e9f447474fea1f6b766368aac8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":212,"deletions":213,"changes":425,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -51,14 +51,15 @@\n import org.apache.syncope.common.lib.request.ResourceAR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.request.ResourceDR;\n-import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.StatusR;\n import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.HaveIBeenPwnedPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n@@ -102,26 +103,23 @@ private boolean getBooleanAttribute(final ConnObjectTO connObjectTO, final Strin\n         return Boolean.parseBoolean(connObjectTO.getAttr(attrName).get().getValues().get(0));\n     }\n \n-    public static UserTO getUniqueSampleTO(final String email) {\n-        return getSampleTO(getUUIDString() + email);\n+    public static UserCR getUniqueSample(final String email) {\n+        return getSample(getUUIDString() + email);\n     }\n \n-    public static UserTO getSampleTO(final String email) {\n-        UserTO userTO = new UserTO();\n-        userTO.setRealm(SyncopeConstants.ROOT_REALM);\n-        userTO.setPassword(\"password123\");\n-        userTO.setUsername(email);\n-\n-        userTO.getPlainAttrs().add(attrTO(\"fullname\", email));\n-        userTO.getPlainAttrs().add(attrTO(\"firstname\", email));\n-        userTO.getPlainAttrs().add(attrTO(\"surname\", \"surname\"));\n-        userTO.getPlainAttrs().add(attrTO(\"ctype\", \"a type\"));\n-        userTO.getPlainAttrs().add(attrTO(\"userId\", email));\n-        userTO.getPlainAttrs().add(attrTO(\"email\", email));\n-        userTO.getPlainAttrs().add(\n-                attrTO(\"loginDate\", DateFormatUtils.ISO_8601_EXTENDED_DATETIME_FORMAT.format(new Date())));\n-\n-        return userTO;\n+    public static UserCR getSample(final String email) {\n+        return new UserCR.Builder().\n+                realm(SyncopeConstants.ROOT_REALM).\n+                password(\"password123\").\n+                username(email).\n+                plainAttr(attrTO(\"fullname\", email)).\n+                plainAttr(attrTO(\"firstname\", email)).\n+                plainAttr(attrTO(\"surname\", \"surname\")).\n+                plainAttr(attrTO(\"ctype\", \"a type\")).\n+                plainAttr(attrTO(\"userId\", email)).\n+                plainAttr(attrTO(\"email\", email)).\n+                plainAttr(attrTO(\"loginDate\", DateFormatUtils.ISO_8601_EXTENDED_DATETIME_FORMAT.format(new Date()))).\n+                build();\n     }\n \n     @Test\n@@ -134,11 +132,11 @@ public void readPrivileges() {\n     @Test\n     public void createUserWithNoPropagation() {\n         // create a new user\n-        UserTO userTO = getUniqueSampleTO(\"xxx@xxx.xxx\");\n-        userTO.setPassword(\"password123\");\n-        userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION);\n+        UserCR req = getUniqueSample(\"xxx@xxx.xxx\");\n+        req.setPassword(\"password123\");\n+        req.getResources().add(RESOURCE_NAME_NOPROPAGATION);\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(req).getEntity();\n \n         // get the propagation task just created\n         PagedResult<PropagationTaskTO> tasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n@@ -154,28 +152,28 @@ public void createUserWithNoPropagation() {\n \n     @Test\n     public void enforceMandatoryCondition() {\n-        UserTO userTO = getUniqueSampleTO(\"enforce@apache.org\");\n-        userTO.getResources().add(RESOURCE_NAME_WS2);\n-        userTO.setPassword(\"newPassword12\");\n+        UserCR userCR = getUniqueSample(\"enforce@apache.org\");\n+        userCR.getResources().add(RESOURCE_NAME_WS2);\n+        userCR.setPassword(\"newPassword12\");\n \n         AttrTO type = null;\n-        for (AttrTO attr : userTO.getPlainAttrs()) {\n+        for (AttrTO attr : userCR.getPlainAttrs()) {\n             if (\"ctype\".equals(attr.getSchema())) {\n                 type = attr;\n             }\n         }\n         assertNotNull(type);\n-        userTO.getPlainAttrs().remove(type);\n+        userCR.getPlainAttrs().remove(type);\n \n         try {\n-            userTO = createUser(userTO).getEntity();\n+            createUser(userCR).getEntity();\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n \n-        userTO.getPlainAttrs().add(type);\n-        userTO = createUser(userTO).getEntity();\n+        userCR.getPlainAttrs().add(type);\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n     }\n \n@@ -191,20 +189,20 @@ public void enforceMandatoryConditionOnDerived() {\n         assertNotNull(resourceTO);\n \n         try {\n-            UserTO userTO = getUniqueSampleTO(\"syncope222@apache.org\");\n-            userTO.getResources().add(resourceTO.getKey());\n-            userTO.setPassword(\"newPassword12\");\n+            UserCR userCR = getUniqueSample(\"syncope222@apache.org\");\n+            userCR.getResources().add(resourceTO.getKey());\n+            userCR.setPassword(\"newPassword12\");\n \n             try {\n-                userTO = createUser(userTO).getEntity();\n+                createUser(userCR).getEntity();\n                 fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n             }\n \n-            userTO.getAuxClasses().add(\"csv\");\n+            userCR.getAuxClasses().add(\"csv\");\n \n-            userTO = createUser(userTO).getEntity();\n+            UserTO userTO = createUser(userCR).getEntity();\n             assertNotNull(userTO);\n             assertEquals(Collections.singleton(resourceTO.getKey()), userTO.getResources());\n         } finally {\n@@ -214,9 +212,9 @@ public void enforceMandatoryConditionOnDerived() {\n \n     @Test\n     public void createUserWithDbPropagation() {\n-        UserTO userTO = getUniqueSampleTO(\"yyy@yyy.yyy\");\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n-        ProvisioningResult<UserTO> result = createUser(userTO);\n+        UserCR userCR = getUniqueSample(\"yyy@yyy.yyy\");\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n+        ProvisioningResult<UserTO> result = createUser(userCR);\n         assertNotNull(result);\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n@@ -225,56 +223,56 @@ public void createUserWithDbPropagation() {\n     @Test\n     public void createWithInvalidPassword() {\n         assertThrows(SyncopeClientException.class, () -> {\n-            UserTO userTO = getSampleTO(\"invalidpasswd@syncope.apache.org\");\n-            userTO.setPassword(\"pass\");\n-            createUser(userTO);\n+            UserCR userCR = getSample(\"invalidpasswd@syncope.apache.org\");\n+            userCR.setPassword(\"pass\");\n+            createUser(userCR);\n         });\n     }\n \n     @Test\n     public void createWithInvalidUsername() {\n         assertThrows(SyncopeClientException.class, () -> {\n-            UserTO userTO = getSampleTO(\"invalidusername@syncope.apache.org\");\n-            userTO.setUsername(\"us\");\n-            userTO.setRealm(\"/odd\");\n+            UserCR userCR = getSample(\"invalidusername@syncope.apache.org\");\n+            userCR.setUsername(\"us\");\n+            userCR.setRealm(\"/odd\");\n \n-            createUser(userTO);\n+            createUser(userCR);\n         });\n     }\n \n     @Test\n     public void createWithInvalidPasswordByRes() {\n         assertThrows(SyncopeClientException.class, () -> {\n-            UserTO userTO = getSampleTO(\"invalidPwdByRes@passwd.com\");\n+            UserCR userCR = getSample(\"invalidPwdByRes@passwd.com\");\n \n             // configured to be minLength=16\n-            userTO.setPassword(\"password1\");\n-            userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION);\n-            createUser(userTO);\n+            userCR.setPassword(\"password1\");\n+            userCR.getResources().add(RESOURCE_NAME_NOPROPAGATION);\n+            createUser(userCR);\n         });\n     }\n \n     @Test\n     public void createWithInvalidPasswordByGroup() {\n         assertThrows(SyncopeClientException.class, () -> {\n-            UserTO userTO = getSampleTO(\"invalidPwdByGroup@passwd.com\");\n+            UserCR userCR = getSample(\"invalidPwdByGroup@passwd.com\");\n \n             // configured to be minLength=16\n-            userTO.setPassword(\"password1\");\n+            userCR.setPassword(\"password1\");\n \n-            userTO.getMemberships().add(new MembershipTO.Builder().\n+            userCR.getMemberships().add(new MembershipTO.Builder().\n                     group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n-            createUser(userTO);\n+            createUser(userCR);\n         });\n     }\n \n     @Test\n     public void createWithException() {\n         assertThrows(SyncopeClientException.class, () -> {\n-            UserTO newUserTO = new UserTO();\n-            newUserTO.getPlainAttrs().add(attrTO(\"userId\", \"userId@nowhere.org\"));\n-            createUser(newUserTO);\n+            UserCR userCR = new UserCR();\n+            userCR.getPlainAttrs().add(attrTO(\"userId\", \"userId@nowhere.org\"));\n+            createUser(userCR);\n         });\n     }\n \n@@ -292,35 +290,35 @@ public void create() {\n         assertNotNull(taskTO);\n         int maxTaskExecutions = taskTO.getExecutions().size();\n \n-        UserTO userTO = getUniqueSampleTO(\"a.b@c.com\");\n+        UserCR userCR = getUniqueSample(\"a.b@c.com\");\n \n         // add a membership\n-        userTO.getMemberships().add(new MembershipTO.Builder().\n+        userCR.getMemberships().add(new MembershipTO.Builder().\n                 group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n         // add an attribute with a non-existing schema: must be ignored\n         AttrTO attrWithInvalidSchemaTO = attrTO(\"invalid schema\", \"a value\");\n-        userTO.getPlainAttrs().add(attrWithInvalidSchemaTO);\n+        userCR.getPlainAttrs().add(attrWithInvalidSchemaTO);\n \n         // add an attribute with null value: must be ignored\n-        userTO.getPlainAttrs().add(attrTO(\"activationDate\", null));\n+        userCR.getPlainAttrs().add(attrTO(\"activationDate\", null));\n \n         // 1. create user\n-        UserTO newUserTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n \n-        assertNotNull(newUserTO);\n+        assertNotNull(userTO);\n \n         // issue SYNCOPE-15\n-        assertNotNull(newUserTO.getCreationDate());\n-        assertNotNull(newUserTO.getCreator());\n-        assertNotNull(newUserTO.getLastChangeDate());\n-        assertNotNull(newUserTO.getLastModifier());\n-        assertTrue(newUserTO.getLastChangeDate().getTime() - newUserTO.getCreationDate().getTime() < 3000);\n+        assertNotNull(userTO.getCreationDate());\n+        assertNotNull(userTO.getCreator());\n+        assertNotNull(userTO.getLastChangeDate());\n+        assertNotNull(userTO.getLastModifier());\n+        assertTrue(userTO.getLastChangeDate().getTime() - userTO.getCreationDate().getTime() < 3000);\n \n-        assertFalse(newUserTO.getPlainAttrs().contains(attrWithInvalidSchemaTO));\n+        assertFalse(userTO.getPlainAttrs().contains(attrWithInvalidSchemaTO));\n \n         // check for changePwdDate\n-        assertNotNull(newUserTO.getCreationDate());\n+        assertNotNull(userTO.getCreationDate());\n \n         // get the new task list\n         tasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n@@ -343,27 +341,27 @@ public void create() {\n         // 3. verify password\n         try {\n             Pair<Map<String, Set<String>>, UserTO> self =\n-                    clientFactory.create(newUserTO.getUsername(), \"password123\").self();\n+                    clientFactory.create(userTO.getUsername(), \"password123\").self();\n             assertNotNull(self);\n         } catch (AccessControlException e) {\n             fail(\"Credentials should be valid and not cause AccessControlException\");\n         }\n \n         try {\n-            clientFactory.create(newUserTO.getUsername(), \"passwordXX\").getService(UserSelfService.class);\n+            clientFactory.create(userTO.getUsername(), \"passwordXX\").getService(UserSelfService.class);\n             fail(\"Credentials are invalid, thus request should raise AccessControlException\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n \n         // 4. try (and fail) to create another user with same (unique) values\n-        userTO = getSampleTO(userTO.getUsername());\n+        userCR = getSample(userTO.getUsername());\n         AttrTO userIdAttr = userTO.getPlainAttr(\"userId\").get();\n         userIdAttr.getValues().clear();\n         userIdAttr.getValues().add(\"a.b@c.com\");\n \n         try {\n-            createUser(userTO);\n+            createUser(userCR);\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n@@ -372,30 +370,32 @@ public void create() {\n \n     @Test\n     public void createWithRequiredValueMissing() {\n-        UserTO userTO = getUniqueSampleTO(\"a.b@c.it\");\n+        UserCR userCR = getUniqueSample(\"a.b@c.it\");\n \n-        AttrTO type = userTO.getPlainAttr(\"ctype\").get();\n-        userTO.getPlainAttrs().remove(type);\n+        AttrTO type = userCR.getPlainAttrs().stream().\n+                filter(attr -> \"ctype\".equals(attr.getSchema())).findFirst().get();\n+        userCR.getPlainAttrs().remove(type);\n \n-        userTO.getMemberships().add(new MembershipTO.Builder().\n+        userCR.getMemberships().add(new MembershipTO.Builder().\n                 group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n         // 1. create user without type (mandatory by UserSchema)\n         try {\n-            createUser(userTO);\n+            createUser(userCR);\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n \n-        userTO.getPlainAttrs().add(attrTO(\"ctype\", \"F\"));\n+        userCR.getPlainAttrs().add(attrTO(\"ctype\", \"F\"));\n \n-        AttrTO surname = userTO.getPlainAttr(\"surname\").get();\n-        userTO.getPlainAttrs().remove(surname);\n+        AttrTO surname = userCR.getPlainAttrs().stream().\n+                filter(attr -> \"surname\".equals(attr.getSchema())).findFirst().get();\n+        userCR.getPlainAttrs().remove(surname);\n \n         // 2. create user without surname (mandatory when type == 'F')\n         try {\n-            createUser(userTO);\n+            createUser(userCR);\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n@@ -410,12 +410,12 @@ public void delete() {\n             assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n         }\n \n-        UserTO userTO = getSampleTO(\"qqgf.z@nn.com\");\n+        UserCR userCR = getSample(\"qqgf.z@nn.com\");\n \n         // specify a propagation\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n \n         String key = userTO.getKey();\n \n@@ -438,12 +438,12 @@ public void delete() {\n \n     @Test\n     public void deleteByUsername() {\n-        UserTO userTO = getSampleTO(\"delete.by.username@apache.org\");\n+        UserCR userCR = getSample(\"delete.by.username@apache.org\");\n \n         // specify a propagation\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n \n         String key = userTO.getKey();\n         userTO = userService.read(key);\n@@ -501,10 +501,9 @@ public void read() {\n \n     @Test\n     public void updateWithoutPassword() {\n-        UserTO userTO = getUniqueSampleTO(\"updatewithout@password.com\");\n-\n-        userTO = createUser(userTO).getEntity();\n+        UserCR userCR = getUniqueSample(\"updatewithout@password.com\");\n \n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         UserUR userUR = new UserUR.Builder().key(userTO.getKey()).\n@@ -521,9 +520,9 @@ public void updateWithoutPassword() {\n     @Test\n     public void updateInvalidPassword() {\n         assertThrows(SyncopeClientException.class, () -> {\n-            UserTO userTO = getSampleTO(\"updateinvalid@password.com\");\n+            UserCR userCR = getSample(\"updateinvalid@password.com\");\n \n-            userTO = createUser(userTO).getEntity();\n+            UserTO userTO = createUser(userCR).getEntity();\n             assertNotNull(userTO);\n \n             UserUR userUR = new UserUR();\n@@ -537,10 +536,10 @@ public void updateInvalidPassword() {\n     @Test\n     public void updateSamePassword() {\n         assertThrows(SyncopeClientException.class, () -> {\n-            UserTO userTO = getUniqueSampleTO(\"updatesame@password.com\");\n-            userTO.setRealm(\"/even/two\");\n+            UserCR userCR = getUniqueSample(\"updatesame@password.com\");\n+            userCR.setRealm(\"/even/two\");\n \n-            userTO = createUser(userTO).getEntity();\n+            UserTO userTO = createUser(userCR).getEntity();\n             assertNotNull(userTO);\n \n             UserUR userUR = new UserUR();\n@@ -553,12 +552,12 @@ public void updateSamePassword() {\n \n     @Test\n     public void update() {\n-        UserTO userTO = getUniqueSampleTO(\"g.h@t.com\");\n+        UserCR userCR = getUniqueSample(\"g.h@t.com\");\n \n-        userTO.getMemberships().add(new MembershipTO.Builder().\n+        userCR.getMemberships().add(new MembershipTO.Builder().\n                 group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n \n         assertFalse(userTO.getDerAttrs().isEmpty());\n         assertEquals(1, userTO.getMemberships().size());\n@@ -573,9 +572,9 @@ public void update() {\n         String newFullName = getUUIDString() + \"g.h@t.com\";\n         userUR.getPlainAttrs().add(attrAddReplacePatch(\"fullname\", newFullName));\n \n-        userUR.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+        userUR.getMemberships().add(new MembershipUR.Builder().operation(PatchOperation.ADD_REPLACE).\n                 group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n-        userUR.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+        userUR.getMemberships().add(new MembershipUR.Builder().operation(PatchOperation.ADD_REPLACE).\n                 group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n         userTO = updateUser(userUR).getEntity();\n@@ -614,10 +613,10 @@ public void updatePasswordOnly() {\n                 new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n-        UserTO userTO = getUniqueSampleTO(\"pwdonly@t.com\");\n-        userTO.getMemberships().add(new MembershipTO.Builder().group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n+        UserCR userCR = getUniqueSample(\"pwdonly@t.com\");\n+        userCR.getMemberships().add(new MembershipTO.Builder().group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n \n         UserUR userUR = new UserUR();\n         userUR.setKey(userTO.getKey());\n@@ -649,14 +648,14 @@ public void verifyTaskRegistration() {\n         // --------------------------------------\n         // Create operation\n         // --------------------------------------\n-        UserTO userTO = getUniqueSampleTO(\"t@p.mode\");\n+        UserCR userCR = getUniqueSample(\"t@p.mode\");\n \n         // add a membership\n-        userTO.getMemberships().add(new MembershipTO.Builder().\n+        userCR.getMemberships().add(new MembershipTO.Builder().\n                 group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n         // 1. create user\n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         // get the new task list\n@@ -715,12 +714,12 @@ public void verifyTaskRegistration() {\n     public void createActivate() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n-        UserTO userTO = getUniqueSampleTO(\"createActivate@syncope.apache.org\");\n+        UserCR userCR = getUniqueSample(\"createActivate@syncope.apache.org\");\n \n-        userTO.getMemberships().add(new MembershipTO.Builder().\n+        userCR.getMemberships().add(new MembershipTO.Builder().\n                 group(\"268fed79-f440-4390-9435-b273768eb5d6\").build());\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getToken());\n@@ -742,12 +741,12 @@ public void createActivate() {\n \n     @Test\n     public void suspendReactivate() {\n-        UserTO userTO = getUniqueSampleTO(\"suspendReactivate@syncope.apache.org\");\n+        UserCR userCR = getUniqueSample(\"suspendReactivate@syncope.apache.org\");\n \n-        userTO.getMemberships().add(new MembershipTO.Builder().\n+        userCR.getMemberships().add(new MembershipTO.Builder().\n                 group(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").build());\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n \n         assertNotNull(userTO);\n         assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService)\n@@ -779,12 +778,12 @@ public void suspendReactivateOnResource() {\n         assertNotNull(ldap);\n \n         // Create user with reference to resources\n-        UserTO userTO = getUniqueSampleTO(\"suspreactonresource@syncope.apache.org\");\n-        userTO.getMemberships().clear();\n-        userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n-        userTO.getResources().add(RESOURCE_NAME_LDAP);\n-        userTO = createUser(userTO).getEntity();\n+        UserCR userCR = getUniqueSample(\"suspreactonresource@syncope.apache.org\");\n+        userCR.getMemberships().clear();\n+        userCR.getResources().clear();\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n+        userCR.getResources().add(RESOURCE_NAME_LDAP);\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n         assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService)\n                 ? \"active\"\n@@ -842,11 +841,11 @@ public void suspendReactivateOnResource() {\n \n     @Test\n     public void updateMultivalueAttribute() {\n-        UserTO userTO = getUniqueSampleTO(\"multivalue@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getVirAttrs().clear();\n+        UserCR userCR = getUniqueSample(\"multivalue@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getVirAttrs().clear();\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         AttrTO loginDate = userTO.getPlainAttr(\"loginDate\").get();\n@@ -887,12 +886,12 @@ public void async() {\n         SyncopeClient asyncClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n         UserService asyncService = asyncClient.nullPriorityAsync(asyncClient.getService(UserService.class), true);\n \n-        UserTO user = getUniqueSampleTO(\"async@syncope.apache.org\");\n-        user.getResources().add(RESOURCE_NAME_TESTDB);\n-        user.getResources().add(RESOURCE_NAME_TESTDB2);\n-        user.getResources().add(RESOURCE_NAME_LDAP);\n+        UserCR userCR = getUniqueSample(\"async@syncope.apache.org\");\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB2);\n+        userCR.getResources().add(RESOURCE_NAME_LDAP);\n \n-        ProvisioningResult<UserTO> result = asyncService.create(user, true).readEntity(\n+        ProvisioningResult<UserTO> result = asyncService.create(userCR).readEntity(\n                 new GenericType<ProvisioningResult<UserTO>>() {\n         });\n         assertNotNull(result);\n@@ -919,19 +918,19 @@ public void async() {\n \n     @Test\n     public void groupAttrPropagation() {\n-        UserTO userTO = getUniqueSampleTO(\"checkGroupAttrPropagation@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getVirAttrs().clear();\n+        UserCR userCR = getUniqueSample(\"checkGroupAttrPropagation@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getMemberships().clear();\n+        userCR.getVirAttrs().clear();\n \n-        userTO.getAuxClasses().add(\"csv\");\n+        userCR.getAuxClasses().add(\"csv\");\n \n-        userTO.getMemberships().add(new MembershipTO.Builder().\n+        userCR.getMemberships().add(new MembershipTO.Builder().\n                 group(\"37d15e4c-cdc1-460b-a591-8505c8133806\").build());\n \n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n+        userCR.getResources().add(RESOURCE_NAME_CSV);\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n         assertNotNull(userTO.getDerAttr(\"csvuserid\"));\n \n@@ -985,28 +984,28 @@ public void customPolicyRules() {\n         realmService.update(realm);\n \n         try {\n-            UserTO user = getUniqueSampleTO(\"custompolicyrules@syncope.apache.org\");\n-            user.setRealm(realm.getFullPath());\n+            UserCR userCR = getUniqueSample(\"custompolicyrules@syncope.apache.org\");\n+            userCR.setRealm(realm.getFullPath());\n             try {\n-                createUser(user);\n+                createUser(userCR);\n                 fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.InvalidUser, e.getType());\n                 assertTrue(e.getElements().iterator().next().startsWith(\"InvalidPassword\"));\n             }\n \n-            user.setPassword(user.getPassword() + \"XXX\");\n+            userCR.setPassword(userCR.getPassword() + \"XXX\");\n             try {\n-                createUser(user);\n+                createUser(userCR);\n                 fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.InvalidUser, e.getType());\n                 assertTrue(e.getElements().iterator().next().startsWith(\"InvalidUsername\"));\n             }\n \n-            user.setUsername(\"YYY\" + user.getUsername());\n-            user = createUser(user).getEntity();\n-            assertNotNull(user);\n+            userCR.setUsername(\"YYY\" + userCR.getUsername());\n+            UserTO userTO = createUser(userCR).getEntity();\n+            assertNotNull(userTO);\n         } finally {\n             realm.setAccountPolicy(oldAccountPolicy);\n             realm.setPasswordPolicy(oldPasswordPolicy);\n@@ -1019,13 +1018,13 @@ public void customPolicyRules() {\n \n     @Test\n     public void mappingPurpose() {\n-        UserTO userTO = getUniqueSampleTO(\"mpurpose@apache.org\");\n-        userTO.getAuxClasses().add(\"csv\");\n+        UserCR userCR = getUniqueSample(\"mpurpose@apache.org\");\n+        userCR.getAuxClasses().add(\"csv\");\n \n-        userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n+        userCR.getResources().clear();\n+        userCR.getResources().add(RESOURCE_NAME_CSV);\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         ConnObjectTO connObjectTO =\n@@ -1037,8 +1036,8 @@ public void mappingPurpose() {\n     public void batch() throws IOException {\n         List<String> users = new ArrayList<>();\n         for (int i = 0; i < 10; i++) {\n-            UserTO userTO = getUniqueSampleTO(\"batch_\" + i + \"@apache.org\");\n-            users.add(String.valueOf(createUser(userTO).getEntity().getKey()));\n+            UserCR userCR = getUniqueSample(\"batch_\" + i + \"@apache.org\");\n+            users.add(createUser(userCR).getEntity().getKey());\n         }\n \n         // check for a fail\n@@ -1092,14 +1091,14 @@ public void batch() throws IOException {\n \n     @Test\n     public void unlink() throws IOException {\n-        UserTO userTO = getUniqueSampleTO(\"unlink@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n-\n-        UserTO actual = createUser(userTO).getEntity();\n+        UserCR userCR = getUniqueSample(\"unlink@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getMemberships().clear();\n+        userCR.getVirAttrs().clear();\n+        userCR.getAuxClasses().add(\"csv\");\n+        userCR.getResources().add(RESOURCE_NAME_CSV);\n+\n+        UserTO actual = createUser(userCR).getEntity();\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n@@ -1117,13 +1116,13 @@ public void unlink() throws IOException {\n \n     @Test\n     public void link() throws IOException {\n-        UserTO userTO = getUniqueSampleTO(\"link@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n+        UserCR userCR = getUniqueSample(\"link@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getMemberships().clear();\n+        userCR.getVirAttrs().clear();\n+        userCR.getAuxClasses().add(\"csv\");\n \n-        UserTO actual = createUser(userTO).getEntity();\n+        UserTO actual = createUser(userCR).getEntity();\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n \n@@ -1153,14 +1152,14 @@ public void link() throws IOException {\n \n     @Test\n     public void unassign() throws IOException {\n-        UserTO userTO = getUniqueSampleTO(\"unassign@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n-\n-        UserTO actual = createUser(userTO).getEntity();\n+        UserCR userCR = getUniqueSample(\"unassign@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getMemberships().clear();\n+        userCR.getVirAttrs().clear();\n+        userCR.getAuxClasses().add(\"csv\");\n+        userCR.getResources().add(RESOURCE_NAME_CSV);\n+\n+        UserTO actual = createUser(userCR).getEntity();\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n@@ -1183,13 +1182,13 @@ public void unassign() throws IOException {\n \n     @Test\n     public void assign() throws IOException {\n-        UserTO userTO = getUniqueSampleTO(\"assign@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n+        UserCR userCR = getUniqueSample(\"assign@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getMemberships().clear();\n+        userCR.getVirAttrs().clear();\n+        userCR.getAuxClasses().add(\"csv\");\n \n-        UserTO actual = createUser(userTO).getEntity();\n+        UserTO actual = createUser(userCR).getEntity();\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n \n@@ -1213,14 +1212,14 @@ public void assign() throws IOException {\n \n     @Test\n     public void deprovision() throws IOException {\n-        UserTO userTO = getUniqueSampleTO(\"deprovision@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n-\n-        UserTO actual = createUser(userTO).getEntity();\n+        UserCR userCR = getUniqueSample(\"deprovision@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getMemberships().clear();\n+        userCR.getVirAttrs().clear();\n+        userCR.getAuxClasses().add(\"csv\");\n+        userCR.getResources().add(RESOURCE_NAME_CSV);\n+\n+        UserTO actual = createUser(userCR).getEntity();\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n@@ -1243,13 +1242,13 @@ public void deprovision() throws IOException {\n \n     @Test\n     public void provision() throws IOException {\n-        UserTO userTO = getUniqueSampleTO(\"provision@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n+        UserCR userCR = getUniqueSample(\"provision@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getMemberships().clear();\n+        userCR.getVirAttrs().clear();\n+        userCR.getAuxClasses().add(\"csv\");\n \n-        UserTO actual = createUser(userTO).getEntity();\n+        UserTO actual = createUser(userCR).getEntity();\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n \n@@ -1273,13 +1272,13 @@ public void provision() throws IOException {\n \n     @Test\n     public void deprovisionUnlinked() throws IOException {\n-        UserTO userTO = getUniqueSampleTO(\"provision@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n+        UserCR userCR = getUniqueSample(\"provision@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getMemberships().clear();\n+        userCR.getVirAttrs().clear();\n+        userCR.getAuxClasses().add(\"csv\");\n \n-        UserTO actual = createUser(userTO).getEntity();\n+        UserTO actual = createUser(userCR).getEntity();\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n \n@@ -1319,18 +1318,18 @@ public void deprovisionUnlinked() throws IOException {\n \n     @Test\n     public void restResource() {\n-        UserTO userTO = getUniqueSampleTO(\"rest@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getResources().add(\"rest-target-resource\");\n+        UserCR userCR = getUniqueSample(\"rest@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getResources().add(\"rest-target-resource\");\n \n         // 1. create\n-        ProvisioningResult<UserTO> result = userService.create(userTO, true).readEntity(\n+        ProvisioningResult<UserTO> result = userService.create(userCR).readEntity(\n                 new GenericType<ProvisioningResult<UserTO>>() {\n         });\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         assertEquals(\"rest-target-resource\", result.getPropagationStatuses().get(0).getResource());\n-        assertEquals(\"surname\", userTO.getPlainAttr(\"surname\").get().getValues().get(0));\n+        assertEquals(\"surname\", result.getEntity().getPlainAttr(\"surname\").get().getValues().get(0));\n \n         // verify user exists on the backend REST service\n         WebClient webClient = WebClient.create(\n@@ -1390,18 +1389,18 @@ public void haveIBeenPwned() {\n         realm.setPasswordPolicy(pwdPolicy.getKey());\n         realmService.create(SyncopeConstants.ROOT_REALM, realm);\n \n-        UserTO user = getUniqueSampleTO(\"hibp@syncope.apache.org\");\n-        user.setRealm(\"/hibp\");\n-        user.setPassword(\"password\");\n+        UserCR userCR = getUniqueSample(\"hibp@syncope.apache.org\");\n+        userCR.setRealm(\"/hibp\");\n+        userCR.setPassword(\"password\");\n         try {\n-            createUser(user);\n+            createUser(userCR);\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidUser, e.getType());\n             assertEquals(\"InvalidPassword: Password pwned\", e.getElements().iterator().next());\n         }\n \n-        user.setPassword(\"1\" + RandomStringUtils.randomAlphanumeric(10));\n-        user = createUser(user).getEntity();\n-        assertNotNull(user.getKey());\n+        userCR.setPassword(\"1\" + RandomStringUtils.randomAlphanumeric(10));\n+        UserTO userTO = createUser(userCR).getEntity();\n+        assertNotNull(userTO.getKey());\n     }\n }"},{"sha":"4ac01df6ba7f5eb0195816c5a9421743cbdeecf6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":236,"deletions":227,"changes":463,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -46,13 +46,15 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.request.AttrPatch;\n-import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.request.GroupCR;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -97,17 +99,17 @@ public class UserIssuesITCase extends AbstractITCase {\n     @Test\n     public void issue186() {\n         // 1. create an user with strict mandatory attributes only\n-        UserTO userTO = new UserTO();\n-        userTO.setRealm(SyncopeConstants.ROOT_REALM);\n+        UserCR userCR = new UserCR();\n+        userCR.setRealm(SyncopeConstants.ROOT_REALM);\n         String userId = getUUIDString() + \"issue186@syncope.apache.org\";\n-        userTO.setUsername(userId);\n-        userTO.setPassword(\"password123\");\n+        userCR.setUsername(userId);\n+        userCR.setPassword(\"password123\");\n \n-        userTO.getPlainAttrs().add(attrTO(\"userId\", userId));\n-        userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n-        userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n+        userCR.getPlainAttrs().add(attrTO(\"userId\", userId));\n+        userCR.getPlainAttrs().add(attrTO(\"fullname\", userId));\n+        userCR.getPlainAttrs().add(attrTO(\"surname\", userId));\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().isEmpty());\n \n@@ -151,10 +153,10 @@ public void issue186() {\n \n     @Test\n     public void issue213() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"issue213@syncope.apache.org\");\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+        UserCR userCR = UserITCase.getUniqueSample(\"issue213@syncope.apache.org\");\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getResources().size());\n \n@@ -182,7 +184,7 @@ public void issue213() {\n \n     @Test\n     public void issue234() {\n-        UserTO inUserTO = UserITCase.getUniqueSampleTO(\"issue234@syncope.apache.org\");\n+        UserCR inUserTO = UserITCase.getUniqueSample(\"issue234@syncope.apache.org\");\n         inUserTO.getResources().add(RESOURCE_NAME_LDAP);\n \n         UserTO userTO = createUser(inUserTO).getEntity();\n@@ -200,11 +202,11 @@ public void issue234() {\n \n     @Test\n     public void issue280() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"issue280@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n+        UserCR userCR = UserITCase.getUniqueSample(\"issue280@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getMemberships().clear();\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         UserUR userUR = new UserUR();\n@@ -229,12 +231,12 @@ public void issue280() {\n \n     @Test\n     public void issue281() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"issue281@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n+        UserCR userCR = UserITCase.getUniqueSample(\"issue281@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getMemberships().clear();\n+        userCR.getResources().add(RESOURCE_NAME_CSV);\n \n-        ProvisioningResult<UserTO> result = createUser(userTO);\n+        ProvisioningResult<UserTO> result = createUser(userCR);\n         assertNotNull(result);\n \n         List<PropagationStatus> propagations = result.getPropagationStatuses();\n@@ -248,7 +250,7 @@ public void issue281() {\n \n     @Test\n     public void issue288() {\n-        UserTO userTO = UserITCase.getSampleTO(\"issue288@syncope.apache.org\");\n+        UserCR userTO = UserITCase.getSample(\"issue288@syncope.apache.org\");\n         userTO.getPlainAttrs().add(attrTO(\"aLong\", \"STRING\"));\n \n         try {\n@@ -261,20 +263,20 @@ public void issue288() {\n \n     @Test\n     public void issueSYNCOPE108() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope108@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope108@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getMemberships().clear();\n+        userCR.getVirAttrs().clear();\n+        userCR.getAuxClasses().add(\"csv\");\n \n-        userTO.getMemberships().add(new MembershipTO.Builder().\n+        userCR.getMemberships().add(new MembershipTO.Builder().\n                 group(\"0626100b-a4ba-4e00-9971-86fad52a6216\").build());\n-        userTO.getMemberships().add(new MembershipTO.Builder().\n+        userCR.getMemberships().add(new MembershipTO.Builder().\n                 group(\"ba9ed509-b1f5-48ab-a334-c8530a6422dc\").build());\n \n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n+        userCR.getResources().add(RESOURCE_NAME_CSV);\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n         assertEquals(2, userTO.getMemberships().size());\n         assertEquals(1, userTO.getResources().size());\n@@ -289,7 +291,7 @@ public void issueSYNCOPE108() {\n         UserUR userUR = new UserUR();\n         userUR.setKey(userTO.getKey());\n \n-        userUR.getMemberships().add(new MembershipPatch.Builder().\n+        userUR.getMemberships().add(new MembershipUR.Builder().\n                 operation(PatchOperation.DELETE).group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n         userTO = updateUser(userUR).getEntity();\n@@ -324,7 +326,7 @@ public void issueSYNCOPE108() {\n         userUR = new UserUR();\n         userUR.setKey(userTO.getKey());\n \n-        userUR.getMemberships().add(new MembershipPatch.Builder().\n+        userUR.getMemberships().add(new MembershipUR.Builder().\n                 operation(PatchOperation.DELETE).group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n         userTO = updateUser(userUR).getEntity();\n@@ -343,16 +345,16 @@ public void issueSYNCOPE108() {\n     @Test\n     public void issueSYNCOPE185() {\n         // 1. create user with LDAP resource, succesfully propagated\n-        UserTO userTO = UserITCase.getSampleTO(\"syncope185@syncope.apache.org\");\n-        userTO.getVirAttrs().clear();\n-        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+        UserCR userCR = UserITCase.getSample(\"syncope185@syncope.apache.org\");\n+        userCR.getVirAttrs().clear();\n+        userCR.getResources().add(RESOURCE_NAME_LDAP);\n \n-        ProvisioningResult<UserTO> result = createUser(userTO);\n+        ProvisioningResult<UserTO> result = createUser(userCR);\n         assertNotNull(result);\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getEntity();\n+        UserTO userTO = result.getEntity();\n \n         // 2. delete this user\n         userService.delete(userTO.getKey());\n@@ -376,11 +378,11 @@ public void issueSYNCOPE51() {\n         AttrTO newCA = configurationService.get(defaultCA.getSchema());\n         assertEquals(defaultCA, newCA);\n \n-        UserTO userTO = UserITCase.getSampleTO(\"syncope51@syncope.apache.org\");\n-        userTO.setPassword(\"password\");\n+        UserCR userCR = UserITCase.getSample(\"syncope51@syncope.apache.org\");\n+        userCR.setPassword(\"password\");\n \n         try {\n-            createUser(userTO);\n+            createUser(userCR);\n             fail(\"Create user should not succeed\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n@@ -399,17 +401,17 @@ public void issueSYNCOPE267() {\n         // ----------------------------------\n         // create user and check virtual attribute value propagation\n         // ----------------------------------\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope267@apache.org\");\n-        userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualvalue\"));\n-        userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope267@apache.org\");\n+        userCR.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualvalue\"));\n+        userCR.getResources().clear();\n+        userCR.getResources().add(RESOURCE_NAME_DBVIRATTR);\n \n-        ProvisioningResult<UserTO> result = createUser(userTO);\n+        ProvisioningResult<UserTO> result = createUser(userCR);\n         assertNotNull(result);\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_DBVIRATTR, result.getPropagationStatuses().get(0).getResource());\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getEntity();\n+        UserTO userTO = result.getEntity();\n \n         ConnObjectTO connObjectTO =\n                 resourceService.readConnObject(RESOURCE_NAME_DBVIRATTR, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -426,10 +428,10 @@ public void issueSYNCOPE267() {\n \n     @Test\n     public void issueSYNCOPE266() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope266@apache.org\");\n-        userTO.getResources().clear();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope266@apache.org\");\n+        userCR.getResources().clear();\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         UserUR userUR = new UserUR();\n@@ -445,10 +447,10 @@ public void issueSYNCOPE266() {\n \n     @Test\n     public void issueSYNCOPE279() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope279@apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_TIMEOUT);\n-        ProvisioningResult<UserTO> result = createUser(userTO);\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope279@apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getResources().add(RESOURCE_NAME_TIMEOUT);\n+        ProvisioningResult<UserTO> result = createUser(userCR);\n         assertEquals(RESOURCE_NAME_TIMEOUT, result.getPropagationStatuses().get(0).getResource());\n         assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n         assertEquals(ExecStatus.FAILURE, result.getPropagationStatuses().get(0).getStatus());\n@@ -457,13 +459,13 @@ public void issueSYNCOPE279() {\n     @Test\n     public void issueSYNCOPE122() {\n         // 1. create user on testdb and testdb2\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope122@apache.org\");\n-        userTO.getResources().clear();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope122@apache.org\");\n+        userCR.getResources().clear();\n \n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB2);\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB2);\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB));\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB2));\n@@ -476,15 +478,15 @@ public void issueSYNCOPE122() {\n         assertNotNull(pwdOnTestDbAttr);\n         assertNotNull(pwdOnTestDbAttr.getValues());\n         assertFalse(pwdOnTestDbAttr.getValues().isEmpty());\n-        String pwdOnTestDb = pwdOnTestDbAttr.getValues().iterator().next();\n+        String pwdOnTestDb = pwdOnTestDbAttr.getValues().get(0);\n \n         ConnObjectTO userOnDb2 = resourceService.readConnObject(\n                 RESOURCE_NAME_TESTDB2, AnyTypeKind.USER.name(), userTO.getKey());\n         AttrTO pwdOnTestDb2Attr = userOnDb2.getAttr(OperationalAttributes.PASSWORD_NAME).get();\n         assertNotNull(pwdOnTestDb2Attr);\n         assertNotNull(pwdOnTestDb2Attr.getValues());\n         assertFalse(pwdOnTestDb2Attr.getValues().isEmpty());\n-        String pwdOnTestDb2 = pwdOnTestDb2Attr.getValues().iterator().next();\n+        String pwdOnTestDb2 = pwdOnTestDb2Attr.getValues().get(0);\n \n         // 2. request to change password only on testdb (no Syncope, no testdb2)\n         UserUR userUR = new UserUR();\n@@ -498,7 +500,7 @@ public void issueSYNCOPE122() {\n         // 3a. Chech that only a single propagation took place\n         assertNotNull(result.getPropagationStatuses());\n         assertEquals(1, result.getPropagationStatuses().size());\n-        assertEquals(RESOURCE_NAME_TESTDB, result.getPropagationStatuses().iterator().next().getResource());\n+        assertEquals(RESOURCE_NAME_TESTDB, result.getPropagationStatuses().get(0).getResource());\n \n         // 3b. verify that password hasn't changed on Syncope\n         assertEquals(pwdOnSyncope, userTO.getPassword());\n@@ -509,15 +511,15 @@ public void issueSYNCOPE122() {\n         assertNotNull(pwdOnTestDbAttrAfter);\n         assertNotNull(pwdOnTestDbAttrAfter.getValues());\n         assertFalse(pwdOnTestDbAttrAfter.getValues().isEmpty());\n-        assertNotEquals(pwdOnTestDb, pwdOnTestDbAttrAfter.getValues().iterator().next());\n+        assertNotEquals(pwdOnTestDb, pwdOnTestDbAttrAfter.getValues().get(0));\n \n         // 3d. verify that password hasn't changed on testdb2\n         userOnDb2 = resourceService.readConnObject(RESOURCE_NAME_TESTDB2, AnyTypeKind.USER.name(), userTO.getKey());\n         AttrTO pwdOnTestDb2AttrAfter = userOnDb2.getAttr(OperationalAttributes.PASSWORD_NAME).get();\n         assertNotNull(pwdOnTestDb2AttrAfter);\n         assertNotNull(pwdOnTestDb2AttrAfter.getValues());\n         assertFalse(pwdOnTestDb2AttrAfter.getValues().isEmpty());\n-        assertEquals(pwdOnTestDb2, pwdOnTestDb2AttrAfter.getValues().iterator().next());\n+        assertEquals(pwdOnTestDb2, pwdOnTestDb2AttrAfter.getValues().get(0));\n     }\n \n     @Test\n@@ -533,10 +535,10 @@ public void issueSYNCOPE136AES() {\n         UserTO userTO = null;\n         try {\n             // 3. create user with no resources\n-            userTO = UserITCase.getUniqueSampleTO(\"syncope136_AES@apache.org\");\n-            userTO.getResources().clear();\n+            UserCR userCR = UserITCase.getUniqueSample(\"syncope136_AES@apache.org\");\n+            userCR.getResources().clear();\n \n-            userTO = createUser(userTO).getEntity();\n+            userTO = createUser(userCR).getEntity();\n             assertNotNull(userTO);\n \n             // 4. update user, assign a propagation priority resource but don't provide any password\n@@ -555,7 +557,7 @@ public void issueSYNCOPE136AES() {\n             List<PropagationStatus> props = result.getPropagationStatuses();\n             assertNotNull(props);\n             assertEquals(1, props.size());\n-            PropagationStatus prop = props.iterator().next();\n+            PropagationStatus prop = props.get(0);\n             assertNotNull(prop);\n             assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n             assertEquals(ExecStatus.SUCCESS, prop.getStatus());\n@@ -573,9 +575,9 @@ public void issueSYNCOPE136AES() {\n     @Test\n     public void issueSYNCOPE136Random() {\n         // 1. create user with no resources\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope136_Random@apache.org\");\n-        userTO.getResources().clear();\n-        userTO = createUser(userTO).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope136_Random@apache.org\");\n+        userCR.getResources().clear();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         // 2. update user, assign a propagation priority resource but don't provide any password\n@@ -592,7 +594,7 @@ public void issueSYNCOPE136Random() {\n         List<PropagationStatus> props = result.getPropagationStatuses();\n         assertNotNull(props);\n         assertEquals(1, props.size());\n-        PropagationStatus prop = props.iterator().next();\n+        PropagationStatus prop = props.get(0);\n         assertNotNull(prop);\n         assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n         assertEquals(ExecStatus.SUCCESS, prop.getStatus());\n@@ -628,20 +630,20 @@ public void issueSYNCOPE354() {\n         resourceService.update(ldap);\n \n         // 1. create group with LDAP resource\n-        GroupTO groupTO = new GroupTO();\n-        groupTO.setName(\"SYNCOPE354-\" + getUUIDString());\n-        groupTO.setRealm(\"/\");\n-        groupTO.getResources().add(RESOURCE_NAME_LDAP);\n+        GroupCR groupCR = new GroupCR();\n+        groupCR.setName(\"SYNCOPE354-\" + getUUIDString());\n+        groupCR.setRealm(\"/\");\n+        groupCR.getResources().add(RESOURCE_NAME_LDAP);\n \n-        groupTO = createGroup(groupTO).getEntity();\n+        GroupTO groupTO = createGroup(groupCR).getEntity();\n         assertNotNull(groupTO);\n \n         // 2. create user with LDAP resource and membership of the above group\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope354@syncope.apache.org\");\n-        userTO.getResources().add(RESOURCE_NAME_LDAP);\n-        userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope354@syncope.apache.org\");\n+        userCR.getResources().add(RESOURCE_NAME_LDAP);\n+        userCR.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey()));\n \n@@ -655,7 +657,7 @@ public void issueSYNCOPE354() {\n         // 4. remove membership\n         UserUR userUR = new UserUR();\n         userUR.setKey(userTO.getKey());\n-        userUR.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.DELETE).\n+        userUR.getMemberships().add(new MembershipUR.Builder().operation(PatchOperation.DELETE).\n                 group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n         userTO = updateUser(userUR).getEntity();\n@@ -684,22 +686,22 @@ public void issueSYNCOPE354() {\n     @Test\n     public void issueSYNCOPE357() throws IOException {\n         // 1. create group with LDAP resource\n-        GroupTO groupTO = new GroupTO();\n-        groupTO.setName(\"SYNCOPE357-\" + getUUIDString());\n-        groupTO.setRealm(\"/\");\n-        groupTO.getResources().add(RESOURCE_NAME_LDAP);\n+        GroupCR groupCR = new GroupCR();\n+        groupCR.setName(\"SYNCOPE357-\" + getUUIDString());\n+        groupCR.setRealm(\"/\");\n+        groupCR.getResources().add(RESOURCE_NAME_LDAP);\n \n-        groupTO = createGroup(groupTO).getEntity();\n+        GroupTO groupTO = createGroup(groupCR).getEntity();\n         assertNotNull(groupTO);\n \n         // 2. create user with membership of the above group\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope357@syncope.apache.org\");\n-        userTO.getPlainAttrs().add(attrTO(\"obscure\", \"valueToBeObscured\"));\n-        userTO.getPlainAttrs().add(attrTO(\"photo\", Base64.getEncoder().encodeToString(\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope357@syncope.apache.org\");\n+        userCR.getPlainAttrs().add(attrTO(\"obscure\", \"valueToBeObscured\"));\n+        userCR.getPlainAttrs().add(attrTO(\"photo\", Base64.getEncoder().encodeToString(\n                 IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/favicon.jpg\")))));\n-        userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n+        userCR.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n         assertNotNull(userTO.getPlainAttr(\"obscure\"));\n         assertNotNull(userTO.getPlainAttr(\"photo\"));\n@@ -730,9 +732,9 @@ public void issueSYNCOPE357() throws IOException {\n     @Test\n     public void issueSYNCOPE383() {\n         // 1. create user without resources\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope383@apache.org\");\n-        userTO.getResources().clear();\n-        userTO = createUser(userTO).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope383@apache.org\");\n+        userCR.getResources().clear();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         // 2. assign resource without specifying a new pwd and check propagation failure\n@@ -764,17 +766,17 @@ public void issueSYNCOPE383() {\n     @Test\n     public void issueSYNCOPE402() {\n         // 1. create an user with strict mandatory attributes only\n-        UserTO userTO = new UserTO();\n-        userTO.setRealm(SyncopeConstants.ROOT_REALM);\n+        UserCR userCR = new UserCR();\n+        userCR.setRealm(SyncopeConstants.ROOT_REALM);\n         String userId = getUUIDString() + \"syncope402@syncope.apache.org\";\n-        userTO.setUsername(userId);\n-        userTO.setPassword(\"password123\");\n+        userCR.setUsername(userId);\n+        userCR.setPassword(\"password123\");\n \n-        userTO.getPlainAttrs().add(attrTO(\"userId\", userId));\n-        userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n-        userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n+        userCR.getPlainAttrs().add(attrTO(\"userId\", userId));\n+        userCR.getPlainAttrs().add(attrTO(\"fullname\", userId));\n+        userCR.getPlainAttrs().add(attrTO(\"surname\", userId));\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().isEmpty());\n \n@@ -816,16 +818,16 @@ public void issueSYNCOPE420() throws IOException {\n         }\n         assertNotNull(logicActions);\n \n-        RealmTO realm = realmService.list(\"/even/two\").iterator().next();\n+        RealmTO realm = realmService.list(\"/even/two\").get(0);\n         assertNotNull(realm);\n         realm.getActions().add(logicActions.getKey());\n         realmService.update(realm);\n \n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope420@syncope.apache.org\");\n-        userTO.setRealm(realm.getFullPath());\n-        userTO.getPlainAttrs().add(attrTO(\"makeItDouble\", \"3\"));\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope420@syncope.apache.org\");\n+        userCR.setRealm(realm.getFullPath());\n+        userCR.getPlainAttrs().add(attrTO(\"makeItDouble\", \"3\"));\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertEquals(\"6\", userTO.getPlainAttr(\"makeItDouble\").get().getValues().get(0));\n \n         UserUR userUR = new UserUR();\n@@ -838,8 +840,8 @@ public void issueSYNCOPE420() throws IOException {\n \n     @Test\n     public void issueSYNCOPE426() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope426@syncope.apache.org\");\n-        userTO = createUser(userTO).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope426@syncope.apache.org\");\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         UserUR userUR = new UserUR();\n@@ -853,9 +855,10 @@ public void issueSYNCOPE426() {\n     @Test\n     public void issueSYNCOPE435() {\n         // 1. create user without password\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope435@syncope.apache.org\");\n-        userTO.setPassword(null);\n-        userTO = createUser(userTO, false).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope435@syncope.apache.org\");\n+        userCR.setPassword(null);\n+        userCR.setStorePassword(false);\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         // 2. try to update user by subscribing a resource - works but propagation is not even attempted\n@@ -876,9 +879,9 @@ public void issueSYNCOPE435() {\n     @Test\n     public void issueSYNCOPE454() throws NamingException {\n         // 1. create user with LDAP resource (with 'Generate password if missing' enabled)\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope454@syncope.apache.org\");\n-        userTO.getResources().add(RESOURCE_NAME_LDAP);\n-        userTO = createUser(userTO).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope454@syncope.apache.org\");\n+        userCR.getResources().add(RESOURCE_NAME_LDAP);\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         // 2. read resource configuration for LDAP binding\n@@ -909,13 +912,13 @@ public void issueSYNCOPE454() throws NamingException {\n     @Test\n     public void issueSYNCOPE493() {\n         // 1.  create user and check that firstname is not propagated on resource with mapping for firstname set to NONE\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"493@test.org\");\n-        userTO.getResources().add(RESOURCE_NAME_WS1);\n-        ProvisioningResult<UserTO> result = createUser(userTO);\n-        assertNotNull(userTO);\n+        UserCR userCR = UserITCase.getUniqueSample(\"493@test.org\");\n+        userCR.getResources().add(RESOURCE_NAME_WS1);\n+        ProvisioningResult<UserTO> result = createUser(userCR);\n+        assertNotNull(result);\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getEntity();\n+        UserTO userTO = result.getEntity();\n \n         ConnObjectTO actual =\n                 resourceService.readConnObject(RESOURCE_NAME_WS1, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -981,9 +984,9 @@ public void issueSYNCOPE493() {\n     @Test\n     public void issueSYNCOPE505DB() throws Exception {\n         // 1. create user\n-        UserTO user = UserITCase.getUniqueSampleTO(\"syncope505-db@syncope.apache.org\");\n-        user.setPassword(\"security123\");\n-        user = createUser(user).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope505-db@syncope.apache.org\");\n+        userCR.setPassword(\"security123\");\n+        UserTO user = createUser(userCR).getEntity();\n         assertNotNull(user);\n         assertTrue(user.getResources().isEmpty());\n \n@@ -1031,9 +1034,9 @@ public void issueSYNCOPE505DB() throws Exception {\n     @Test\n     public void issueSYNCOPE505LDAP() throws Exception {\n         // 1. create user\n-        UserTO user = UserITCase.getUniqueSampleTO(\"syncope505-ldap@syncope.apache.org\");\n-        user.setPassword(\"security123\");\n-        user = createUser(user).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope505-ldap@syncope.apache.org\");\n+        userCR.setPassword(\"security123\");\n+        UserTO user = createUser(userCR).getEntity();\n         assertNotNull(user);\n         assertTrue(user.getResources().isEmpty());\n \n@@ -1086,28 +1089,30 @@ public void issueSYNCOPE505LDAP() throws Exception {\n     @Test\n     public void issueSYNCOPE391() {\n         // 1. create user on Syncope with null password\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n-        userTO.setPassword(null);\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope391@syncope.apache.org\");\n+        userCR.setPassword(null);\n+        userCR.setStorePassword(false);\n \n-        userTO = createUser(userTO, false).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n         assertNull(userTO.getPassword());\n \n         // 2. create existing user on csv and check that password on Syncope is null and that password on resource\n         // doesn't change\n-        userTO = new UserTO();\n-        userTO.setRealm(SyncopeConstants.ROOT_REALM);\n-        userTO.setPassword(null);\n-        userTO.setUsername(\"syncope391@syncope.apache.org\");\n-        userTO.getPlainAttrs().add(attrTO(\"fullname\", \"fullname\"));\n-        userTO.getPlainAttrs().add(attrTO(\"firstname\", \"nome0\"));\n-        userTO.getPlainAttrs().add(attrTO(\"surname\", \"cognome0\"));\n-        userTO.getPlainAttrs().add(attrTO(\"userId\", \"syncope391@syncope.apache.org\"));\n-        userTO.getPlainAttrs().add(attrTO(\"email\", \"syncope391@syncope.apache.org\"));\n-\n-        userTO.getAuxClasses().add(\"csv\");\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n-        userTO = createUser(userTO, false).getEntity();\n+        userCR = new UserCR();\n+        userCR.setRealm(SyncopeConstants.ROOT_REALM);\n+        userCR.setPassword(null);\n+        userCR.setStorePassword(false);\n+        userCR.setUsername(\"syncope391@syncope.apache.org\");\n+        userCR.getPlainAttrs().add(attrTO(\"fullname\", \"fullname\"));\n+        userCR.getPlainAttrs().add(attrTO(\"firstname\", \"nome0\"));\n+        userCR.getPlainAttrs().add(attrTO(\"surname\", \"cognome0\"));\n+        userCR.getPlainAttrs().add(attrTO(\"userId\", \"syncope391@syncope.apache.org\"));\n+        userCR.getPlainAttrs().add(attrTO(\"email\", \"syncope391@syncope.apache.org\"));\n+        userCR.getAuxClasses().add(\"csv\");\n+        userCR.getResources().add(RESOURCE_NAME_CSV);\n+\n+        userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         ConnObjectTO connObjectTO =\n@@ -1120,13 +1125,14 @@ public void issueSYNCOPE391() {\n \n         // 3. create user with not null password and propagate onto resource-csv, specify not to save password on\n         // Syncope local storage\n-        userTO = UserITCase.getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n-        userTO.setPassword(\"passwordTESTNULL1\");\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n-\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n-        userTO = createUser(userTO, false).getEntity();\n+        userCR = UserITCase.getUniqueSample(\"syncope391@syncope.apache.org\");\n+        userCR.setPassword(\"passwordTESTNULL1\");\n+        userCR.setStorePassword(false);\n+        userCR.getVirAttrs().clear();\n+        userCR.getAuxClasses().add(\"csv\");\n+        userCR.getResources().add(RESOURCE_NAME_CSV);\n+\n+        userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         connObjectTO =\n@@ -1140,14 +1146,14 @@ public void issueSYNCOPE391() {\n         assertNull(userTO.getPassword());\n \n         // 4. create user and propagate password on resource-csv and on Syncope local storage\n-        userTO = UserITCase.getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n-        userTO.setPassword(\"passwordTESTNULL1\");\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n+        userCR = UserITCase.getUniqueSample(\"syncope391@syncope.apache.org\");\n+        userCR.setPassword(\"passwordTESTNULL1\");\n+        userCR.getVirAttrs().clear();\n+        userCR.getAuxClasses().add(\"csv\");\n+        userCR.getResources().add(RESOURCE_NAME_CSV);\n \n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n         // storePassword true by default\n-        userTO = createUser(userTO).getEntity();\n+        userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -1170,13 +1176,14 @@ public void issueSYNCOPE391() {\n             csv = resourceService.read(RESOURCE_NAME_CSV);\n             assertEquals(\"55e5de0b-c79c-4e66-adda-251b6fb8579a\", csv.getPasswordPolicy());\n \n-            userTO = UserITCase.getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n-            userTO.setPassword(null);\n-            userTO.getVirAttrs().clear();\n-            userTO.getAuxClasses().add(\"csv\");\n+            userCR = UserITCase.getUniqueSample(\"syncope391@syncope.apache.org\");\n+            userCR.setPassword(null);\n+            userCR.setStorePassword(false);\n+            userCR.getVirAttrs().clear();\n+            userCR.getAuxClasses().add(\"csv\");\n+            userCR.getResources().add(RESOURCE_NAME_CSV);\n \n-            userTO.getResources().add(RESOURCE_NAME_CSV);\n-            createUser(userTO, false);\n+            createUser(userCR);\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidUser, e.getType());\n@@ -1190,18 +1197,18 @@ public void issueSYNCOPE391() {\n \n     @Test\n     public void issueSYNCOPE647() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope647@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope647@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getMemberships().clear();\n+        userCR.getVirAttrs().clear();\n+        userCR.getAuxClasses().add(\"csv\");\n \n-        userTO.getAuxClasses().add(\"generic membership\");\n-        userTO.getPlainAttrs().add(attrTO(\"postalAddress\", \"postalAddress\"));\n+        userCR.getAuxClasses().add(\"generic membership\");\n+        userCR.getPlainAttrs().add(attrTO(\"postalAddress\", \"postalAddress\"));\n \n-        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+        userCR.getResources().add(RESOURCE_NAME_LDAP);\n \n-        UserTO actual = createUser(userTO).getEntity();\n+        UserTO actual = createUser(userCR).getEntity();\n         assertNotNull(actual);\n         assertNotNull(actual.getDerAttr(\"csvuserid\"));\n \n@@ -1247,19 +1254,19 @@ public void issueSYNCOPE626() {\n         realmService.update(realm);\n \n         try {\n-            UserTO user = UserITCase.getUniqueSampleTO(\"syncope626@syncope.apache.org\");\n-            user.setRealm(realm.getFullPath());\n-            user.setPassword(user.getUsername());\n+            UserCR userCR = UserITCase.getUniqueSample(\"syncope626@syncope.apache.org\");\n+            userCR.setRealm(realm.getFullPath());\n+            userCR.setPassword(userCR.getUsername());\n             try {\n-                createUser(user);\n+                createUser(userCR);\n                 fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.InvalidUser, e.getType());\n                 assertTrue(e.getElements().iterator().next().startsWith(\"InvalidPassword\"));\n             }\n \n-            user.setPassword(\"password123\");\n-            user = createUser(user).getEntity();\n+            userCR.setPassword(\"password123\");\n+            UserTO user = createUser(userCR).getEntity();\n             assertNotNull(user);\n         } finally {\n             realm.setPasswordPolicy(oldPasswordPolicy);\n@@ -1282,22 +1289,22 @@ public void issueSYNCOPE686() {\n \n         try {\n             // 3. create group with LDAP resource assigned\n-            GroupTO group = GroupITCase.getBasicSampleTO(\"syncope686\");\n-            group.getResources().add(RESOURCE_NAME_LDAP);\n-            group = createGroup(group).getEntity();\n+            GroupCR groupCR = GroupITCase.getBasicSample(\"syncope686\");\n+            groupCR.getResources().add(RESOURCE_NAME_LDAP);\n+            GroupTO group = createGroup(groupCR).getEntity();\n             assertNotNull(group);\n \n             // 4. create user with no resources\n-            UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope686@apache.org\");\n-            userTO.getResources().clear();\n+            UserCR userCR = UserITCase.getUniqueSample(\"syncope686@apache.org\");\n+            userCR.getResources().clear();\n \n-            userTO = createUser(userTO).getEntity();\n+            UserTO userTO = createUser(userCR).getEntity();\n             assertNotNull(userTO);\n \n             // 5. update user with the new group, and don't provide any password\n             UserUR userUR = new UserUR();\n             userUR.setKey(userTO.getKey());\n-            userUR.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+            userUR.getMemberships().add(new MembershipUR.Builder().operation(PatchOperation.ADD_REPLACE).\n                     group(group.getKey()).build());\n \n             ProvisioningResult<UserTO> result = updateUser(userUR);\n@@ -1307,7 +1314,7 @@ public void issueSYNCOPE686() {\n             List<PropagationStatus> props = result.getPropagationStatuses();\n             assertNotNull(props);\n             assertEquals(1, props.size());\n-            PropagationStatus prop = props.iterator().next();\n+            PropagationStatus prop = props.get(0);\n             assertNotNull(prop);\n             assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n             assertEquals(ExecStatus.SUCCESS, prop.getStatus());\n@@ -1321,24 +1328,24 @@ public void issueSYNCOPE686() {\n     @Test\n     public void issueSYNCOPE710() {\n         // 1. create groups for indirect resource assignment\n-        GroupTO ldapGroup = GroupITCase.getBasicSampleTO(\"syncope710.ldap\");\n-        ldapGroup.getResources().add(RESOURCE_NAME_LDAP);\n-        ldapGroup = createGroup(ldapGroup).getEntity();\n+        GroupCR ldapGroupCR = GroupITCase.getBasicSample(\"syncope710.ldap\");\n+        ldapGroupCR.getResources().add(RESOURCE_NAME_LDAP);\n+        GroupTO ldapGroup = createGroup(ldapGroupCR).getEntity();\n \n-        GroupTO dbGroup = GroupITCase.getBasicSampleTO(\"syncope710.db\");\n-        dbGroup.getResources().add(RESOURCE_NAME_TESTDB);\n-        dbGroup = createGroup(dbGroup).getEntity();\n+        GroupCR dbGroupCR = GroupITCase.getBasicSample(\"syncope710.db\");\n+        dbGroupCR.getResources().add(RESOURCE_NAME_TESTDB);\n+        GroupTO dbGroup = createGroup(dbGroupCR).getEntity();\n \n         // 2. create user with memberships for the groups created above\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope710@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getMemberships().add(new MembershipTO.Builder().group(ldapGroup.getKey()).build());\n-        userTO.getMemberships().add(new MembershipTO.Builder().group(dbGroup.getKey()).build());\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope710@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getMemberships().clear();\n+        userCR.getMemberships().add(new MembershipTO.Builder().group(ldapGroup.getKey()).build());\n+        userCR.getMemberships().add(new MembershipTO.Builder().group(dbGroup.getKey()).build());\n \n-        ProvisioningResult<UserTO> result = createUser(userTO);\n+        ProvisioningResult<UserTO> result = createUser(userCR);\n         assertEquals(2, result.getPropagationStatuses().size());\n-        userTO = result.getEntity();\n+        UserTO userTO = result.getEntity();\n \n         // 3. request to propagate password only to db\n         UserUR userUR = new UserUR();\n@@ -1354,19 +1361,19 @@ public void issueSYNCOPE710() {\n     @Test\n     public void issueSYNCOPE881() {\n         // 1. create group and assign LDAP\n-        GroupTO group = GroupITCase.getSampleTO(\"syncope881G\");\n-        group.getVirAttrs().add(attrTO(\"rvirtualdata\", \"rvirtualvalue\"));\n+        GroupCR groupCR = GroupITCase.getSample(\"syncope881G\");\n+        groupCR.getVirAttrs().add(attrTO(\"rvirtualdata\", \"rvirtualvalue\"));\n \n-        group = createGroup(group).getEntity();\n+        GroupTO group = createGroup(groupCR).getEntity();\n         assertNotNull(group);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), group.getKey()));\n \n         // 2. create user and assign such group\n-        UserTO user = UserITCase.getUniqueSampleTO(\"syncope881U@apache.org\");\n-        user.getMemberships().clear();\n-        user.getMemberships().add(new MembershipTO.Builder().group(group.getKey()).build());\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope881U@apache.org\");\n+        userCR.getMemberships().clear();\n+        userCR.getMemberships().add(new MembershipTO.Builder().group(group.getKey()).build());\n \n-        user = createUser(user).getEntity();\n+        UserTO user = createUser(userCR).getEntity();\n         assertNotNull(user);\n \n         // 3. verify that user is in LDAP\n@@ -1388,23 +1395,25 @@ public void issueSYNCOPE881() {\n     @Test\n     public void issueSYNCOPE1099() {\n         // 1. create group with dynamic condition and resource\n-        GroupTO group = GroupITCase.getSampleTO(\"syncope1099G\");\n-        group.getResources().clear();\n-        group.getResources().add(RESOURCE_NAME_TESTDB);\n-        group.setUDynMembershipCond(\"firstname==issueSYNCOPE1099\");\n+        GroupCR groupCR = GroupITCase.getSample(\"syncope1099G\");\n+        groupCR.getResources().clear();\n+        groupCR.getResources().add(RESOURCE_NAME_TESTDB);\n+        groupCR.setUDynMembershipCond(\"firstname==issueSYNCOPE1099\");\n \n-        group = createGroup(group).getEntity();\n+        GroupTO group = createGroup(groupCR).getEntity();\n         assertNotNull(group);\n \n         // 2. create user matching the condition above\n-        UserTO user = UserITCase.getUniqueSampleTO(\"syncope1099U@apache.org\");\n-        user.getPlainAttr(\"firstname\").get().getValues().set(0, \"issueSYNCOPE1099\");\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope1099U@apache.org\");\n+        userCR.getPlainAttrs().stream().\n+                filter(attr -> \"firstname\".equals(attr.getSchema())).findFirst().get().\n+                getValues().set(0, \"issueSYNCOPE1099\");\n \n-        ProvisioningResult<UserTO> created = createUser(user);\n+        ProvisioningResult<UserTO> created = createUser(userCR);\n         assertNotNull(created);\n \n         // 3. verify that dynamic membership is set and that resource is consequently assigned\n-        user = created.getEntity();\n+        UserTO user = created.getEntity();\n         String groupKey = group.getKey();\n         assertTrue(user.getDynMemberships().stream().anyMatch(m -> m.getGroupKey().equals(groupKey)));\n         assertTrue(user.getResources().contains(RESOURCE_NAME_TESTDB));\n@@ -1416,8 +1425,8 @@ public void issueSYNCOPE1099() {\n \n     @Test\n     public void issueSYNCOPE1166() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope1166@apache.org\");\n-        userTO = createUser(userTO).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope1166@apache.org\");\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         UserUR userUR = new UserUR();\n@@ -1445,18 +1454,18 @@ public void issueSYNCOPE1166() {\n     @Test\n     public void issueSYNCOPE1206() {\n         // 1. create group with dynamic user condition 'cool==true'\n-        GroupTO dynGroup = GroupITCase.getSampleTO(\"syncope1206\");\n-        dynGroup.setUDynMembershipCond(\n+        GroupCR dynGroupCR = GroupITCase.getSample(\"syncope1206\");\n+        dynGroupCR.setUDynMembershipCond(\n                 SyncopeClient.getUserSearchConditionBuilder().is(\"cool\").equalTo(\"true\").query());\n-        dynGroup = createGroup(dynGroup).getEntity();\n+        GroupTO dynGroup = createGroup(dynGroupCR).getEntity();\n         assertNotNull(dynGroup);\n         assertTrue(dynGroup.getResources().contains(RESOURCE_NAME_LDAP));\n \n         // 2. create user (no value for cool, no dynamic membership, no propagation to LDAP)\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope1206@apache.org\");\n-        userTO.getResources().clear();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope1206@apache.org\");\n+        userCR.getResources().clear();\n \n-        ProvisioningResult<UserTO> result = createUser(userTO);\n+        ProvisioningResult<UserTO> result = createUser(userCR);\n         assertTrue(result.getPropagationStatuses().isEmpty());\n \n         // 3. update user to match the dynamic condition: expect propagation to LDAP\n@@ -1489,10 +1498,10 @@ public void issueSYNCOPE1337() {\n \n         try {\n             // 2. create user under /even/two to get password policy with history length 1\n-            UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope1337@apache.org\");\n-            userTO.setPassword(\"Password123\");\n-            userTO.setRealm(\"/even/two\");\n-            userTO = createUser(userTO).getEntity();\n+            UserCR userCR = UserITCase.getUniqueSample(\"syncope1337@apache.org\");\n+            userCR.setPassword(\"Password123\");\n+            userCR.setRealm(\"/even/two\");\n+            UserTO userTO = createUser(userCR).getEntity();\n             assertNotNull(userTO);\n \n             // 3. attempt to set the same password value: fails"},{"sha":"dd5b907a1fe53fe0f28843e0dd754a222badd383","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserRequestITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -60,7 +60,7 @@ public static void loadBpmnProcesses() throws IOException {\n     public void twoLevelsApproval() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n-        UserTO user = createUser(UserITCase.getUniqueSampleTO(\"twoLevelsApproval@tirasa.net\")).getEntity();\n+        UserTO user = createUser(UserITCase.getUniqueSample(\"twoLevelsApproval@tirasa.net\")).getEntity();\n         assertNotNull(user);\n         assertFalse(user.getMembership(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").isPresent());\n \n@@ -144,7 +144,7 @@ public void cancel() {\n                 userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n-        UserTO user = createUser(UserITCase.getUniqueSampleTO(\"twoLevelsApproval@tirasa.net\")).getEntity();\n+        UserTO user = createUser(UserITCase.getUniqueSample(\"twoLevelsApproval@tirasa.net\")).getEntity();\n         assertNotNull(user);\n         assertFalse(user.getMembership(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").isPresent());\n \n@@ -178,7 +178,7 @@ public void userSelection() {\n                 userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n-        UserTO user = createUser(UserITCase.getUniqueSampleTO(\"userSelection@tirasa.net\")).getEntity();\n+        UserTO user = createUser(UserITCase.getUniqueSample(\"userSelection@tirasa.net\")).getEntity();\n         assertNotNull(user);\n         List<RelationshipTO> relationships = userService.read(user.getKey()).getRelationships();\n         assertTrue(relationships.isEmpty());"},{"sha":"90ba42b85580996e8ef62e481d9e4ad9d725cb09","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -41,10 +41,11 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.BooleanReplacePatchItem;\n-import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -86,7 +87,7 @@ public void create() {\n \n         // 1. self-registration as admin: failure\n         try {\n-            userSelfService.create(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"), true);\n+            userSelfService.create(UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\"));\n             fail(\"This should not happen\");\n         } catch (ForbiddenException e) {\n             assertNotNull(e);\n@@ -95,7 +96,7 @@ public void create() {\n         // 2. self-registration as anonymous: works\n         SyncopeClient anonClient = clientFactory.create();\n         UserTO self = anonClient.getService(UserSelfService.class).\n-                create(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"), true).\n+                create(UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\")).\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                 }).getEntity();\n         assertNotNull(self);\n@@ -107,14 +108,14 @@ public void createAndApprove() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n         // 1. self-create user with membership: goes 'createApproval' with resources and membership but no propagation\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\");\n-        userTO.getMemberships().add(\n+        UserCR userCR = UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\");\n+        userCR.getMemberships().add(\n                 new MembershipTO.Builder().group(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build());\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n \n         SyncopeClient anonClient = clientFactory.create();\n-        userTO = anonClient.getService(UserSelfService.class).\n-                create(userTO, true).\n+        UserTO userTO = anonClient.getService(UserSelfService.class).\n+                create(userCR).\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                 }).getEntity();\n         assertNotNull(userTO);\n@@ -145,13 +146,13 @@ public void createAndUnclaim() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n         // 1. self-create user with membership: goes 'createApproval' with resources and membership but no propagation\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\");\n-        userTO.getMemberships().add(\n+        UserCR userCR = UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\");\n+        userCR.getMemberships().add(\n                 new MembershipTO.Builder().group(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build());\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n         SyncopeClient anonClient = clientFactory.create();\n-        userTO = anonClient.getService(UserSelfService.class).\n-                create(userTO, true).\n+        UserTO userTO = anonClient.getService(UserSelfService.class).\n+                create(userCR).\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                 }).getEntity();\n         assertNotNull(userTO);\n@@ -192,7 +193,7 @@ public void createAndUnclaim() {\n \n     @Test\n     public void read() {\n-        UserTO user = createUser(UserITCase.getUniqueSampleTO(\"selfread@syncope.apache.org\")).getEntity();\n+        UserTO user = createUser(UserITCase.getUniqueSample(\"selfread@syncope.apache.org\")).getEntity();\n         UserService us2 = clientFactory.create(user.getUsername(), \"password123\").getService(UserService.class);\n         try {\n             us2.read(user.getKey());\n@@ -219,7 +220,7 @@ public void authenticateByPlainAttribute() {\n     @Test\n     public void updateWithoutApproval() {\n         // 1. create user as admin\n-        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).getEntity();\n+        UserTO created = createUser(UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\")).getEntity();\n         assertNotNull(created);\n         assertFalse(created.getUsername().endsWith(\"XX\"));\n \n@@ -243,15 +244,15 @@ public void updateWithApproval() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n         // 1. create user as admin\n-        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).getEntity();\n+        UserTO created = createUser(UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\")).getEntity();\n         assertNotNull(created);\n         assertFalse(created.getUsername().endsWith(\"XX\"));\n \n         // 2. self-update (username + memberships + resource) - works but needs approval\n         UserUR userUR = new UserUR();\n         userUR.setKey(created.getKey());\n         userUR.setUsername(new StringReplacePatchItem.Builder().value(created.getUsername() + \"XX\").build());\n-        userUR.getMemberships().add(new MembershipPatch.Builder().\n+        userUR.getMemberships().add(new MembershipUR.Builder().\n                 operation(PatchOperation.ADD_REPLACE).\n                 group(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").\n                 build());\n@@ -296,7 +297,7 @@ public void updateWithApproval() {\n \n     @Test\n     public void delete() {\n-        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).getEntity();\n+        UserTO created = createUser(UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\")).getEntity();\n         assertNotNull(created);\n \n         SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n@@ -314,7 +315,7 @@ public void passwordReset() {\n         configurationService.set(attrTO(\"passwordReset.securityQuestion\", \"true\"));\n \n         // 1. create an user with security question and answer\n-        UserTO user = UserITCase.getUniqueSampleTO(\"pwdReset@syncope.apache.org\");\n+        UserCR user = UserITCase.getUniqueSample(\"pwdReset@syncope.apache.org\");\n         user.setSecurityQuestion(\"887028ea-66fc-41e7-b397-620d7ea6dfbb\");\n         user.setSecurityAnswer(\"Rossi\");\n         user.getResources().add(RESOURCE_NAME_TESTDB);\n@@ -381,7 +382,7 @@ public void passwordResetWithoutSecurityQuestion() {\n         configurationService.set(attrTO(\"passwordReset.securityQuestion\", \"false\"));\n \n         // 1. create an user with security question and answer\n-        UserTO user = UserITCase.getUniqueSampleTO(\"pwdResetNoSecurityQuestion@syncope.apache.org\");\n+        UserCR user = UserITCase.getUniqueSample(\"pwdResetNoSecurityQuestion@syncope.apache.org\");\n         createUser(user);\n \n         // 2. verify that new user is able to authenticate\n@@ -458,14 +459,14 @@ public void mustChangePassword() {\n     public void createWithReject() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"createWithReject@syncope.apache.org\");\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+        UserCR userCR = UserITCase.getUniqueSample(\"createWithReject@syncope.apache.org\");\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n \n         // User with group 0cbcabd2-4410-4b6b-8f05-a052b451d18f are defined in workflow as subject to approval\n-        userTO.getMemberships().add(new MembershipTO.Builder().group(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder().group(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n \n         // 1. create user with group 0cbcabd2-4410-4b6b-8f05-a052b451d18f\n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getMemberships().size());\n         assertEquals(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\", userTO.getMemberships().get(0).getGroupKey());\n@@ -536,17 +537,17 @@ public void createWithApproval() {\n         PagedResult<UserRequestForm> forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"createWithApproval@syncope.apache.org\");\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+        UserCR userCR = UserITCase.getUniqueSample(\"createWithApproval@syncope.apache.org\");\n+        userCR.getResources().add(RESOURCE_NAME_TESTDB);\n \n         // User with group 0cbcabd2-4410-4b6b-8f05-a052b451d18f are defined in workflow as subject to approval\n-        userTO.getMemberships().add(\n+        userCR.getMemberships().add(\n                 new MembershipTO.Builder().group(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n \n         // 1. create user and verify that no propagation occurred)\n-        ProvisioningResult<UserTO> result = createUser(userTO);\n+        ProvisioningResult<UserTO> result = createUser(userCR);\n         assertNotNull(result);\n-        userTO = result.getEntity();\n+        UserTO userTO = result.getEntity();\n         assertEquals(1, userTO.getMemberships().size());\n         assertEquals(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\", userTO.getMemberships().get(0).getGroupKey());\n         assertEquals(\"createApproval\", userTO.getStatus());\n@@ -624,14 +625,14 @@ public void updateApproval() {\n                 new UserRequestFormQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n-        UserTO created = createUser(UserITCase.getUniqueSampleTO(\"updateApproval@syncope.apache.org\")).getEntity();\n+        UserTO created = createUser(UserITCase.getUniqueSample(\"updateApproval@syncope.apache.org\")).getEntity();\n         assertNotNull(created);\n         assertEquals(\"/\", created.getRealm());\n         assertEquals(0, created.getMemberships().size());\n \n         UserUR req = new UserUR();\n         req.setKey(created.getKey());\n-        req.getMemberships().add(new MembershipPatch.Builder().group(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\").build());\n+        req.getMemberships().add(new MembershipUR.Builder().group(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\").build());\n \n         SyncopeClient client = clientFactory.create(created.getUsername(), \"password123\");\n         Response response = client.getService(UserSelfService.class).update(req);\n@@ -682,7 +683,7 @@ public void updateApproval() {\n     public void availableTasks() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n-        UserTO user = createUser(UserITCase.getUniqueSampleTO(\"availableTasks@apache.org\")).getEntity();\n+        UserTO user = createUser(UserITCase.getUniqueSample(\"availableTasks@apache.org\")).getEntity();\n         assertEquals(\"active\", user.getStatus());\n \n         List<WorkflowTask> tasks = userWorkflowTaskService.getAvailableTasks(user.getKey());\n@@ -700,18 +701,17 @@ public void issueSYNCOPE15() {\n         PagedResult<UserRequestForm> forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"issueSYNCOPE15@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getDerAttrs().clear();\n-        userTO.getMemberships().clear();\n+        UserCR userCR = UserITCase.getUniqueSample(\"issueSYNCOPE15@syncope.apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getVirAttrs().clear();\n+        userCR.getMemberships().clear();\n \n         // Users with group 0cbcabd2-4410-4b6b-8f05-a052b451d18f are defined in workflow as subject to approval\n-        userTO.getMemberships().add(\n+        userCR.getMemberships().add(\n                 new MembershipTO.Builder().group(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n \n         // 1. create user with group 9 (and verify that no propagation occurred)\n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n         assertNotEquals(0L, userTO.getKey());\n         assertNotNull(userTO.getCreationDate());"},{"sha":"70784328878e9b4d2fd17589175420cf339769eb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirAttrITCase.java","status":"modified","additions":79,"deletions":78,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -33,9 +33,11 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.StatusR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -74,14 +76,14 @@ public class VirAttrITCase extends AbstractITCase {\n \n     @Test\n     public void issueSYNCOPE16() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"issue16@apache.org\");\n-        userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualvalue\"));\n-        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n-        userTO.getMemberships().add(\n+        UserCR userCR = UserITCase.getUniqueSample(\"issue16@apache.org\");\n+        userCR.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualvalue\"));\n+        userCR.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+        userCR.getMemberships().add(\n                 new MembershipTO.Builder().group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n         // 1. create user\n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         // 2. check for virtual attribute value\n@@ -128,17 +130,17 @@ public void issueSYNCOPE260() {\n         // ----------------------------------\n         // create user and check virtual attribute value propagation\n         // ----------------------------------\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"260@a.com\");\n-        userTO.getAuxClasses().add(newClass.getKey());\n-        userTO.getVirAttrs().add(attrTO(virSchema.getKey(), \"virtualvalue\"));\n-        userTO.getResources().add(RESOURCE_NAME_WS2);\n+        UserCR userCR = UserITCase.getUniqueSample(\"260@a.com\");\n+        userCR.getAuxClasses().add(newClass.getKey());\n+        userCR.getVirAttrs().add(attrTO(virSchema.getKey(), \"virtualvalue\"));\n+        userCR.getResources().add(RESOURCE_NAME_WS2);\n \n-        ProvisioningResult<UserTO> result = createUser(userTO);\n+        ProvisioningResult<UserTO> result = createUser(userCR);\n         assertNotNull(result);\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_WS2, result.getPropagationStatuses().get(0).getResource());\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getEntity();\n+        UserTO userTO = result.getEntity();\n \n         ConnObjectTO connObjectTO =\n                 resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -209,20 +211,20 @@ public void issueSYNCOPE260() {\n \n     @Test\n     public void virAttrCache() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"virattrcache@apache.org\");\n-        userTO.getVirAttrs().clear();\n+        UserCR userCR = UserITCase.getUniqueSample(\"virattrcache@apache.org\");\n+        userCR.getVirAttrs().clear();\n \n         AttrTO virAttrTO = new AttrTO();\n         virAttrTO.setSchema(\"virtualdata\");\n         virAttrTO.getValues().add(\"virattrcache\");\n-        userTO.getVirAttrs().add(virAttrTO);\n+        userCR.getVirAttrs().add(virAttrTO);\n \n-        userTO.getMemberships().clear();\n-        userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+        userCR.getMemberships().clear();\n+        userCR.getResources().clear();\n+        userCR.getResources().add(RESOURCE_NAME_DBVIRATTR);\n \n         // 1. create user\n-        UserTO actual = createUser(userTO).getEntity();\n+        UserTO actual = createUser(userCR).getEntity();\n         assertNotNull(actual);\n \n         // 2. check for virtual attribute value\n@@ -297,18 +299,18 @@ public void issueSYNCOPE397() {\n             newClass = getObject(response.getLocation(), AnyTypeClassService.class, AnyTypeClassTO.class);\n \n             // create a new user\n-            UserTO userTO = UserITCase.getUniqueSampleTO(\"397@syncope.apache.org\");\n-            userTO.getAuxClasses().add(\"csv\");\n-            userTO.getAuxClasses().add(newClass.getKey());\n-            userTO.getResources().clear();\n-            userTO.getMemberships().clear();\n-\n-            userTO.getVirAttrs().clear();\n-            userTO.getVirAttrs().add(attrTO(virSchema.getKey(), \"test@testone.org\"));\n+            UserCR userCR = UserITCase.getUniqueSample(\"397@syncope.apache.org\");\n+            userCR.getAuxClasses().add(\"csv\");\n+            userCR.getAuxClasses().add(newClass.getKey());\n+            userCR.getResources().clear();\n+            userCR.getMemberships().clear();\n+\n+            userCR.getVirAttrs().clear();\n+            userCR.getVirAttrs().add(attrTO(virSchema.getKey(), \"test@testone.org\"));\n             // assign resource-csv to user\n-            userTO.getResources().add(RESOURCE_NAME_CSV);\n+            userCR.getResources().add(RESOURCE_NAME_CSV);\n             // save user\n-            userTO = createUser(userTO).getEntity();\n+            UserTO userTO = createUser(userCR).getEntity();\n             // make std controls about user\n             assertNotNull(userTO);\n             assertTrue(RESOURCE_NAME_CSV.equals(userTO.getResources().iterator().next()));\n@@ -347,20 +349,20 @@ public void issueSYNCOPE397() {\n \n     @Test\n     public void issueSYNCOPE442() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope442@apache.org\");\n-        userTO.getVirAttrs().clear();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope442@apache.org\");\n+        userCR.getVirAttrs().clear();\n \n         AttrTO virAttrTO = new AttrTO();\n         virAttrTO.setSchema(\"virtualdata\");\n         virAttrTO.getValues().add(\"virattrcache\");\n-        userTO.getVirAttrs().add(virAttrTO);\n+        userCR.getVirAttrs().add(virAttrTO);\n \n-        userTO.getMemberships().clear();\n-        userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+        userCR.getMemberships().clear();\n+        userCR.getResources().clear();\n+        userCR.getResources().add(RESOURCE_NAME_DBVIRATTR);\n \n         // 1. create user\n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n         // 2. check for virtual attribute value\n@@ -433,12 +435,12 @@ public void issueSYNCOPE442() {\n \n     @Test\n     public void issueSYNCOPE436() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope436@syncope.apache.org\");\n-        userTO.getMemberships().clear();\n-        userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_LDAP);\n-        userTO.getVirAttrs().add(attrTO(\"virtualReadOnly\", \"readOnly\"));\n-        userTO = createUser(userTO).getEntity();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope436@syncope.apache.org\");\n+        userCR.getMemberships().clear();\n+        userCR.getResources().clear();\n+        userCR.getResources().add(RESOURCE_NAME_LDAP);\n+        userCR.getVirAttrs().add(attrTO(\"virtualReadOnly\", \"readOnly\"));\n+        UserTO userTO = createUser(userCR).getEntity();\n         // finding no values because the virtual attribute is readonly \n         assertTrue(userTO.getVirAttr(\"virtualReadOnly\").get().getValues().isEmpty());\n     }\n@@ -519,12 +521,12 @@ public void issueSYNCOPE453() {\n                     resourceService.create(resourceTO).getLocation(), ResourceService.class, ResourceTO.class));\n             // -------------------------------------------\n \n-            GroupTO groupTO = new GroupTO();\n-            groupTO.setName(groupName);\n-            groupTO.setRealm(\"/\");\n-            groupTO.getVirAttrs().add(attrTO(rvirtualdata.getKey(), \"ml@group.it\"));\n-            groupTO.getResources().add(RESOURCE_NAME_LDAP);\n-            groupTO = createGroup(groupTO).getEntity();\n+            GroupCR groupCR = new GroupCR();\n+            groupCR.setName(groupName);\n+            groupCR.setRealm(\"/\");\n+            groupCR.getVirAttrs().add(attrTO(rvirtualdata.getKey(), \"ml@group.it\"));\n+            groupCR.getResources().add(RESOURCE_NAME_LDAP);\n+            GroupTO groupTO = createGroup(groupCR).getEntity();\n             groupKey = groupTO.getKey();\n             assertEquals(1, groupTO.getVirAttrs().size());\n             assertEquals(\"ml@group.it\", groupTO.getVirAttrs().iterator().next().getValues().get(0));\n@@ -533,20 +535,20 @@ public void issueSYNCOPE453() {\n             // -------------------------------------------\n             // Create new user\n             // -------------------------------------------\n-            UserTO userTO = UserITCase.getUniqueSampleTO(\"syn453@syncope.apache.org\");\n-            userTO.getPlainAttrs().add(attrTO(\"fullname\", \"123\"));\n-            userTO.getResources().clear();\n-            userTO.getResources().add(resourceName);\n-            userTO.getVirAttrs().clear();\n-            userTO.getMemberships().clear();\n+            UserCR userCR = UserITCase.getUniqueSample(\"syn453@syncope.apache.org\");\n+            userCR.getPlainAttrs().add(attrTO(\"fullname\", \"123\"));\n+            userCR.getResources().clear();\n+            userCR.getResources().add(resourceName);\n+            userCR.getVirAttrs().clear();\n+            userCR.getMemberships().clear();\n \n-            userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n+            userCR.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n \n-            ProvisioningResult<UserTO> result = createUser(userTO);\n+            ProvisioningResult<UserTO> result = createUser(userCR);\n             assertEquals(2, result.getPropagationStatuses().size());\n             assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n             assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(1).getStatus());\n-            userTO = result.getEntity();\n+            UserTO userTO = result.getEntity();\n \n             JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n \n@@ -573,31 +575,31 @@ public void issueSYNCOPE453() {\n \n     @Test\n     public void issueSYNCOPE459() {\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope459@apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_LDAP);\n-        userTO.getMemberships().clear();\n-        userTO.getVirAttrs().clear();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope459@apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getResources().add(RESOURCE_NAME_LDAP);\n+        userCR.getMemberships().clear();\n+        userCR.getVirAttrs().clear();\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n \n         assertNotNull(userTO.getVirAttr(\"virtualReadOnly\"));\n     }\n \n     @Test\n     public void issueSYNCOPE501() {\n         // 1. create user and propagate him on resource-db-virattr\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope501@apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getVirAttrs().clear();\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope501@apache.org\");\n+        userCR.getResources().clear();\n+        userCR.getMemberships().clear();\n+        userCR.getVirAttrs().clear();\n \n-        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+        userCR.getResources().add(RESOURCE_NAME_DBVIRATTR);\n \n         // virtualdata is mapped with username\n-        userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"syncope501@apache.org\"));\n+        userCR.getVirAttrs().add(attrTO(\"virtualdata\", \"syncope501@apache.org\"));\n \n-        userTO = createUser(userTO).getEntity();\n+        UserTO userTO = createUser(userCR).getEntity();\n \n         assertNotNull(userTO.getVirAttr(\"virtualdata\"));\n         assertEquals(\"syncope501@apache.org\", userTO.getVirAttr(\"virtualdata\").get().getValues().get(0));\n@@ -653,22 +655,22 @@ public void issueSYNCOPE691() {\n             newClass = getObject(response.getLocation(), AnyTypeClassService.class, AnyTypeClassTO.class);\n \n             // create a new user\n-            UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope691@syncope.apache.org\");\n-            userTO.getAuxClasses().add(newClass.getKey());\n-            userTO.getResources().clear();\n-            userTO.getMemberships().clear();\n-            userTO.getVirAttrs().clear();\n+            UserCR userCR = UserITCase.getUniqueSample(\"syncope691@syncope.apache.org\");\n+            userCR.getAuxClasses().add(newClass.getKey());\n+            userCR.getResources().clear();\n+            userCR.getMemberships().clear();\n+            userCR.getVirAttrs().clear();\n \n             AttrTO emailTO = new AttrTO();\n             emailTO.setSchema(virSchema.getKey());\n             emailTO.getValues().add(\"test@issue691.dom1.org\");\n             emailTO.getValues().add(\"test@issue691.dom2.org\");\n \n-            userTO.getVirAttrs().add(emailTO);\n+            userCR.getVirAttrs().add(emailTO);\n             // assign resource-ldap691 to user\n-            userTO.getResources().add(ldap.getKey());\n+            userCR.getResources().add(ldap.getKey());\n             // save user\n-            userTO = createUser(userTO).getEntity();\n+            UserTO userTO = createUser(userCR).getEntity();\n             // make std controls about user\n             assertNotNull(userTO);\n             assertTrue(ldap.getKey().equals(userTO.getResources().iterator().next()));\n@@ -700,5 +702,4 @@ public void issueSYNCOPE691() {\n             }\n         }\n     }\n-\n }"},{"sha":"2ea45ca28c8bc3b396fc728a3b9b9f4e41b076bc","filename":"fit/core-reference/src/test/resources/DoubleValueLogicActions.groovy","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FDoubleValueLogicActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1d931735a9e29e96f735ddaded1d9d24bfa1c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FDoubleValueLogicActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FDoubleValueLogicActions.groovy?ref=90d1d931735a9e29e96f735ddaded1d9d24bfa1c","patch":"@@ -18,9 +18,9 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n+import org.apache.syncope.common.lib.request.AnyCR\n import org.apache.syncope.common.lib.request.AnyUR\n import org.apache.syncope.common.lib.request.AttrPatch\n-import org.apache.syncope.common.lib.to.AnyTO\n import org.apache.syncope.common.lib.to.AttrTO\n import org.apache.syncope.core.provisioning.api.LogicActions\n \n@@ -33,7 +33,7 @@ class DoubleValueLogicActions implements LogicActions {\n   private static final String NAME = \"makeItDouble\";\n \n   @Override\n-  <A extends AnyTO> A beforeCreate(final A input) {\n+  <C extends AnyCR> C beforeCreate(final C input) {\n     for (AttrTO attr : input.getPlainAttrs()) {\n       if (NAME.equals(attr.getSchema())) {\n         List<String> values = new ArrayList<String>(attr.getValues().size());"}]}