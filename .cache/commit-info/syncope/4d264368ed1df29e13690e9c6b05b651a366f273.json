{"sha":"4d264368ed1df29e13690e9c6b05b651a366f273","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRkMjY0MzY4ZWQxZGYyOWUxMzY5MGU5YzZiMDViNjUxYTM2NmYyNzM=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2014-11-06T08:46:13Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2014-11-06T08:46:13Z"},"message":"[SYNCOPE-598] fixed","tree":{"sha":"e2f41aa1c27ee2a38c6fb7d72ba84e356c3f3474","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e2f41aa1c27ee2a38c6fb7d72ba84e356c3f3474"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4d264368ed1df29e13690e9c6b05b651a366f273","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4d264368ed1df29e13690e9c6b05b651a366f273","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4d264368ed1df29e13690e9c6b05b651a366f273","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4d264368ed1df29e13690e9c6b05b651a366f273/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"84587034cfcab2f8f978ae893de577bb51462dd1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/84587034cfcab2f8f978ae893de577bb51462dd1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/84587034cfcab2f8f978ae893de577bb51462dd1"}],"stats":{"total":185,"additions":151,"deletions":34},"files":[{"sha":"f8cb658863173668ff87ff8b282faef2dce8b285","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSubjectPushResultHandler.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d264368ed1df29e13690e9c6b05b651a366f273/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d264368ed1df29e13690e9c6b05b651a366f273/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectPushResultHandler.java?ref=4d264368ed1df29e13690e9c6b05b651a366f273","patch":"@@ -73,40 +73,40 @@ public abstract class AbstractSubjectPushResultHandler extends AbstractSyncopeRe\n     protected abstract ConnectorObject getRemoteObject(final String accountId);\n \n     @Transactional\n-    public boolean handle(final AbstractSubject subject) {\n+    public boolean handle(final long subjectId) {\n         try {\n-            doHandle(subject);\n+            doHandle(subjectId);\n             return true;\n         } catch (JobExecutionException e) {\n             LOG.error(\"Synchronization failed\", e);\n             return false;\n         }\n     }\n \n-    protected final void doHandle(final AbstractSubject subject)\n+    protected final void doHandle(final long subjectId)\n             throws JobExecutionException {\n \n         if (profile.getResults() == null) {\n             profile.setResults(new ArrayList<SyncResult>());\n         }\n \n-        final AbstractSubject toBeHandled = getSubject(subject.getId());\n+        final AbstractSubject subject = getSubject(subjectId);\n \n-        final AttributableUtil attrUtil = AttributableUtil.getInstance(toBeHandled);\n+        final AttributableUtil attrUtil = AttributableUtil.getInstance(subject);\n \n         final SyncResult result = new SyncResult();\n         profile.getResults().add(result);\n \n-        result.setId(toBeHandled.getId());\n+        result.setId(subject.getId());\n         result.setSubjectType(attrUtil.getType());\n-        result.setName(getName(toBeHandled));\n+        result.setName(getName(subject));\n \n-        final Boolean enabled = toBeHandled instanceof SyncopeUser && profile.getSyncTask().isSyncStatus()\n-                ? ((SyncopeUser) toBeHandled).isSuspended() ? Boolean.FALSE : Boolean.TRUE\n+        final Boolean enabled = subject instanceof SyncopeUser && profile.getSyncTask().isSyncStatus()\n+                ? ((SyncopeUser) subject).isSuspended() ? Boolean.FALSE : Boolean.TRUE\n                 : null;\n \n         LOG.debug(\"Propagating {} with ID {} towards {}\",\n-                attrUtil.getType(), toBeHandled.getId(), profile.getSyncTask().getResource());\n+                attrUtil.getType(), subject.getId(), profile.getSyncTask().getResource());\n \n         Object output = null;\n         Result resultStatus = null;\n@@ -138,37 +138,37 @@ protected final void doHandle(final AbstractSubject subject)\n                     switch (profile.getSyncTask().getUnmatchingRule()) {\n                         case ASSIGN:\n                             for (PushActions action : profile.getActions()) {\n-                                action.beforeAssign(this.getProfile(), toBeHandled);\n+                                action.beforeAssign(this.getProfile(), subject);\n                             }\n \n                             if (!profile.getSyncTask().isPerformCreate()) {\n                                 LOG.debug(\"PushTask not configured for create\");\n                             } else {\n-                                assign(toBeHandled, status);\n+                                assign(subject, status);\n                             }\n \n                             break;\n                         case PROVISION:\n                             for (PushActions action : profile.getActions()) {\n-                                action.beforeProvision(this.getProfile(), toBeHandled);\n+                                action.beforeProvision(this.getProfile(), subject);\n                             }\n \n                             if (!profile.getSyncTask().isPerformCreate()) {\n                                 LOG.debug(\"PushTask not configured for create\");\n                             } else {\n-                                provision(toBeHandled, status);\n+                                provision(subject, status);\n                             }\n \n                             break;\n                         case UNLINK:\n                             for (PushActions action : profile.getActions()) {\n-                                action.beforeUnlink(this.getProfile(), toBeHandled);\n+                                action.beforeUnlink(this.getProfile(), subject);\n                             }\n \n                             if (!profile.getSyncTask().isPerformUpdate()) {\n                                 LOG.debug(\"PushTask not configured for update\");\n                             } else {\n-                                link(toBeHandled, true);\n+                                link(subject, true);\n                             }\n \n                             break;\n@@ -183,60 +183,60 @@ protected final void doHandle(final AbstractSubject subject)\n                     switch (profile.getSyncTask().getMatchingRule()) {\n                         case UPDATE:\n                             for (PushActions action : profile.getActions()) {\n-                                action.beforeUpdate(this.getProfile(), toBeHandled);\n+                                action.beforeUpdate(this.getProfile(), subject);\n                             }\n                             if (!profile.getSyncTask().isPerformUpdate()) {\n                                 LOG.debug(\"PushTask not configured for update\");\n                             } else {\n-                                update(toBeHandled, status);\n+                                update(subject, status);\n                             }\n \n                             break;\n                         case DEPROVISION:\n                             for (PushActions action : profile.getActions()) {\n-                                action.beforeDeprovision(this.getProfile(), toBeHandled);\n+                                action.beforeDeprovision(this.getProfile(), subject);\n                             }\n \n                             if (!profile.getSyncTask().isPerformDelete()) {\n                                 LOG.debug(\"PushTask not configured for delete\");\n                             } else {\n-                                deprovision(toBeHandled);\n+                                deprovision(subject);\n                             }\n \n                             break;\n                         case UNASSIGN:\n                             for (PushActions action : profile.getActions()) {\n-                                action.beforeUnassign(this.getProfile(), toBeHandled);\n+                                action.beforeUnassign(this.getProfile(), subject);\n                             }\n \n                             if (!profile.getSyncTask().isPerformDelete()) {\n                                 LOG.debug(\"PushTask not configured for delete\");\n                             } else {\n-                                unassign(toBeHandled);\n+                                unassign(subject);\n                             }\n \n                             break;\n                         case LINK:\n                             for (PushActions action : profile.getActions()) {\n-                                action.beforeLink(this.getProfile(), toBeHandled);\n+                                action.beforeLink(this.getProfile(), subject);\n                             }\n \n                             if (!profile.getSyncTask().isPerformUpdate()) {\n                                 LOG.debug(\"PushTask not configured for update\");\n                             } else {\n-                                link(toBeHandled, false);\n+                                link(subject, false);\n                             }\n \n                             break;\n                         case UNLINK:\n                             for (PushActions action : profile.getActions()) {\n-                                action.beforeUnlink(this.getProfile(), toBeHandled);\n+                                action.beforeUnlink(this.getProfile(), subject);\n                             }\n \n                             if (!profile.getSyncTask().isPerformUpdate()) {\n                                 LOG.debug(\"PushTask not configured for update\");\n                             } else {\n-                                link(toBeHandled, true);\n+                                link(subject, true);\n                             }\n \n                             break;\n@@ -246,7 +246,7 @@ protected final void doHandle(final AbstractSubject subject)\n                 }\n \n                 for (PushActions action : profile.getActions()) {\n-                    action.after(this.getProfile(), toBeHandled, result);\n+                    action.after(this.getProfile(), subject, result);\n                 }\n \n                 result.setStatus(SyncResult.Status.SUCCESS);\n@@ -258,7 +258,7 @@ protected final void doHandle(final AbstractSubject subject)\n                 resultStatus = AuditElements.Result.FAILURE;\n                 output = e;\n \n-                LOG.warn(\"Error pushing {} towards {}\", toBeHandled, profile.getSyncTask().getResource(), e);\n+                LOG.warn(\"Error pushing {} towards {}\", subject, profile.getSyncTask().getResource(), e);\n                 throw new JobExecutionException(e);\n             } finally {\n                 notificationManager.createTasks(\n@@ -269,7 +269,7 @@ protected final void doHandle(final AbstractSubject subject)\n                         resultStatus,\n                         beforeObj,\n                         output,\n-                        toBeHandled);\n+                        subject);\n                 auditManager.audit(\n                         AuditElements.EventCategoryType.PUSH,\n                         AttributableType.USER.name().toLowerCase(),\n@@ -278,7 +278,7 @@ protected final void doHandle(final AbstractSubject subject)\n                         resultStatus,\n                         beforeObj,\n                         output,\n-                        toBeHandled);\n+                        subject);\n             }\n         }\n     }"},{"sha":"73e1d48c192564fbe972c66b9dbc10562c496333","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/PushJob.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d264368ed1df29e13690e9c6b05b651a366f273/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FPushJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d264368ed1df29e13690e9c6b05b651a366f273/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FPushJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FPushJob.java?ref=4d264368ed1df29e13690e9c6b05b651a366f273","patch":"@@ -116,7 +116,7 @@ protected String executeWithSecurityContext(\n                 for (SyncopeUser localUser : localUsers) {\n                     try {\n                         // user propagation\n-                        uhandler.handle(localUser);\n+                        uhandler.handle(localUser.getId());\n                     } catch (Exception e) {\n                         LOG.warn(\"Failure pushing user '{}' on '{}'\", localUser, pushTask.getResource(), e);\n                         throw new JobExecutionException(\"While pushing users on connector\", e);\n@@ -131,7 +131,7 @@ protected String executeWithSecurityContext(\n             for (SyncopeRole localRole : localRoles) {\n                 try {\n                     // role propagation\n-                    rhandler.handle(localRole);\n+                    rhandler.handle(localRole.getId());\n                 } catch (Exception e) {\n                     LOG.warn(\"Failure pushing role '{}' on '{}'\", localRole, pushTask.getResource(), e);\n                     throw new JobExecutionException(\"While pushing roles on connector\", e);"},{"sha":"c29b49e888b068c2841a3e0fdc78c44022f32cf5","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/RolePushResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d264368ed1df29e13690e9c6b05b651a366f273/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRolePushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d264368ed1df29e13690e9c6b05b651a366f273/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRolePushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRolePushResultHandler.java?ref=4d264368ed1df29e13690e9c6b05b651a366f273","patch":"@@ -123,7 +123,7 @@ protected AbstractSubject getSubject(final long id) {\n         try {\n             return roleDataBinder.getRoleFromId(id);\n         } catch (Exception e) {\n-            LOG.warn(\"Error retrieving user {}\", id, e);\n+            LOG.warn(\"Error retrieving role {}\", id, e);\n             return null;\n         }\n     }"},{"sha":"468b8f97cae78e7bc2b9b0adf2a9ad544d130f76","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":118,"deletions":1,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d264368ed1df29e13690e9c6b05b651a366f273/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d264368ed1df29e13690e9c6b05b651a366f273/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=4d264368ed1df29e13690e9c6b05b651a366f273","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.apache.syncope.core.rest.AbstractTest.userService;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n@@ -63,14 +62,22 @@\n import org.apache.syncope.common.to.TaskExecTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.reqres.PagedResult;\n+import org.apache.syncope.common.services.ResourceService;\n+import org.apache.syncope.common.to.MappingItemTO;\n+import org.apache.syncope.common.to.MappingTO;\n import org.apache.syncope.common.to.PushTaskTO;\n+import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.common.types.CipherAlgorithm;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.IntMappingType;\n+import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.MatchingRule;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.common.types.SubjectType;\n@@ -1268,4 +1275,114 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         connectorService.update(ldapResource.getConnectorId(), resourceConnector);\n         deleteUser(updatedUser.getId());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE598() {\n+        // create a new role schema\n+        final SchemaTO schemaTO = new SchemaTO();\n+        schemaTO.setName(\"LDAPGroupName\" + getUUIDString());\n+        schemaTO.setType(AttributeSchemaType.String);\n+        schemaTO.setMandatoryCondition(\"true\");\n+\n+        final SchemaTO newSchemaTO = createSchema(AttributableType.ROLE, SchemaType.NORMAL, schemaTO);\n+        assertEquals(schemaTO, newSchemaTO);\n+\n+        // create a new sample role\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"all\" + getUUIDString());\n+        roleTO.setParent(8L);\n+\n+        roleTO.getRAttrTemplates().add(newSchemaTO.getName());\n+        roleTO.getAttrs().add(attributeTO(newSchemaTO.getName(), \"all\"));\n+\n+        roleTO = createRole(roleTO);\n+        assertNotNull(roleTO);\n+\n+        String resourceName = \"resource-ldap-roleonly\";\n+        ResourceTO newResourceTO = null;\n+\n+        try {\n+            // Create resource ad-hoc\n+            ResourceTO resourceTO = new ResourceTO();\n+            resourceTO.setName(resourceName);\n+            resourceTO.setConnectorId(105L);\n+\n+            final MappingTO umapping = new MappingTO();\n+            MappingItemTO item = new MappingItemTO();\n+            item.setIntMappingType(IntMappingType.Username);\n+            item.setExtAttrName(\"cn\");\n+            item.setAccountid(true);\n+            item.setPurpose(MappingPurpose.PROPAGATION);\n+            item.setMandatoryCondition(\"true\");\n+            umapping.setAccountIdItem(item);\n+\n+            item = new MappingItemTO();\n+            item.setIntMappingType(IntMappingType.UserSchema);\n+            item.setExtAttrName(\"surname\");\n+            item.setIntAttrName(\"sn\");\n+            item.setPurpose(MappingPurpose.BOTH);\n+            umapping.addItem(item);\n+\n+            item = new MappingItemTO();\n+            item.setIntMappingType(IntMappingType.UserSchema);\n+            item.setExtAttrName(\"email\");\n+            item.setIntAttrName(\"mail\");\n+            item.setPurpose(MappingPurpose.BOTH);\n+            umapping.addItem(item);\n+\n+            item = new MappingItemTO();\n+            item.setIntMappingType(IntMappingType.Password);\n+            item.setPassword(true);\n+            item.setPurpose(MappingPurpose.BOTH);\n+            item.setMandatoryCondition(\"true\");\n+            umapping.addItem(item);\n+\n+            umapping.setAccountLink(\"'cn=' + username + ',ou=people,o=isp'\");\n+\n+            final MappingTO rmapping = new MappingTO();\n+\n+            item = new MappingItemTO();\n+            item.setIntMappingType(IntMappingType.RoleSchema);\n+            item.setExtAttrName(\"cn\");\n+            item.setIntAttrName(newSchemaTO.getName());\n+            item.setAccountid(true);\n+            item.setPurpose(MappingPurpose.BOTH);\n+            rmapping.setAccountIdItem(item);\n+\n+            rmapping.setAccountLink(\"'cn=' + \" + newSchemaTO.getName() + \" + ',ou=groups,o=isp'\");\n+\n+            resourceTO.setRmapping(rmapping);\n+\n+            Response response = resourceService.create(resourceTO);\n+            newResourceTO = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+\n+            assertNotNull(newResourceTO);\n+            assertNull(newResourceTO.getUmapping());\n+            assertNotNull(newResourceTO.getRmapping());\n+\n+            // create push task ad-hoc\n+            final PushTaskTO task = new PushTaskTO();\n+            task.setName(\"issueSYNCOPE598\");\n+            task.setResource(resourceName);\n+            task.setPerformCreate(true);\n+            task.setPerformDelete(true);\n+            task.setPerformUpdate(true);\n+            task.setUnmatchingRule(UnmatchingRule.ASSIGN);\n+            task.setMatchingRule(MatchingRule.UPDATE);\n+\n+            response = taskService.create(task);\n+            final PushTaskTO push = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n+\n+            assertNotNull(push);\n+\n+            // execute the new task\n+            final TaskExecTO pushExec = execSyncTask(push.getId(), 50, false);\n+            assertTrue(PropagationTaskExecStatus.valueOf(pushExec.getStatus()).isSuccessful());\n+        } finally {\n+            roleService.delete(roleTO.getId());\n+            if (newResourceTO != null) {\n+                resourceService.delete(resourceName);\n+            }\n+        }\n+    }\n }"}]}