{"sha":"e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUwYzJmZDk3MjUyM2ZlMmQzNGY1Y2UxZTk4ZGIyM2MyZjYzOTg5ZjU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-10-09T12:33:54Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-10-09T13:21:28Z"},"message":"[SYNCOPE-1501] Connector Objects can now be filtered via FIQL","tree":{"sha":"64cd6386dc05276e55a77747f2e9dcf737c8fd21","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/64cd6386dc05276e55a77747f2e9dcf737c8fd21"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4cef608c6c58569057d5a8ac00cfc0cf882f9f96","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4cef608c6c58569057d5a8ac00cfc0cf882f9f96","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4cef608c6c58569057d5a8ac00cfc0cf882f9f96"}],"stats":{"total":1088,"additions":907,"deletions":181},"files":[{"sha":"ff5e2012220a09609430cdede7128b3faf2484a0","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n+import org.apache.syncope.common.rest.api.beans.ConnObjectTOQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n \n@@ -62,7 +62,7 @@ public static Pair<String, List<ConnObjectTO>> listConnObjects(\n         final String pagedResultCookie,\n         final SortParam<String> sort) {\n \n-        ConnObjectTOListQuery.Builder builder = new ConnObjectTOListQuery.Builder().\n+        ConnObjectTOQuery.Builder builder = new ConnObjectTOQuery.Builder().\n                 pagedResultsCookie(pagedResultCookie).\n                 size(size).\n                 orderBy(toOrderBy(sort));\n@@ -72,7 +72,7 @@ public static Pair<String, List<ConnObjectTO>> listConnObjects(\n \n         PagedConnObjectTOResult list;\n         try {\n-            list = getService(ResourceService.class).listConnObjects(resource, anyTypeKey, builder.build());\n+            list = getService(ResourceService.class).searchConnObjects(resource, anyTypeKey, builder.build());\n             result.addAll(list.getResult());\n             nextPageResultCookie = list.getPagedResultsCookie();\n         } catch (Exception e) {"},{"sha":"2979c9b4dcf6253e028d1815baafbc9d37fb02a3","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -42,6 +42,7 @@\n import org.apache.cxf.transport.http.URLConnectionHTTPConduit;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.search.AnyObjectFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.search.ConnObjectTOFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.OrderByClauseBuilder;\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n@@ -187,6 +188,15 @@ public static AnyObjectFiqlSearchConditionBuilder getAnyObjectSearchConditionBui\n         return new AnyObjectFiqlSearchConditionBuilder(type);\n     }\n \n+    /**\n+     * Returns a new instance of {@link ConnObjectTOFiqlSearchConditionBuilder}, for assisted building of FIQL queries.\n+     *\n+     * @return default instance of {@link ConnObjectTOFiqlSearchConditionBuilder}\n+     */\n+    public static ConnObjectTOFiqlSearchConditionBuilder getConnObjectTOFiqlSearchConditionBuilder() {\n+        return new ConnObjectTOFiqlSearchConditionBuilder();\n+    }\n+\n     /**\n      * Returns a new instance of {@link OrderByClauseBuilder}, for assisted building of {@code orderby} clauses.\n      *"},{"sha":"cca2ac0b1688ccaab11abca272ee76ff8a86ee41","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -45,7 +45,7 @@\n import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n+import org.apache.syncope.common.rest.api.beans.ConnObjectTOQuery;\n \n /**\n  * REST operations for external resources.\n@@ -62,33 +62,34 @@ public interface ResourceService extends JAXRSService {\n      *\n      * @param key name of resource to read connector object from\n      * @param anyTypeKey any object type\n-     * @param anyKey any object key\n+     * @param value if value looks like a UUID then it is interpreted as user, group or any object key, otherwise\n+     * as key value on the resource\n      * @return connector object from the external resource, for the given type and key\n      */\n     @GET\n-    @Path(\"{key}/{anyTypeKey}/{anyKey}\")\n+    @Path(\"{key}/{anyTypeKey}/{value}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     ConnObjectTO readConnObject(\n             @NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey,\n-            @NotNull @PathParam(\"anyKey\") String anyKey);\n+            @NotNull @PathParam(\"value\") String value);\n \n     /**\n      * Returns a paged list of connector objects from external resource, for the given type, matching\n      * page/size conditions.\n      *\n      * @param key name of resource to read connector object from\n      * @param anyTypeKey any object type\n-     * @param listQuery query conditions\n+     * @param connObjectTOQuery query conditions\n      * @return connector objects from the external resource, for the given type\n      */\n     @GET\n     @Path(\"{key}/{anyTypeKey}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    PagedConnObjectTOResult listConnObjects(\n+    PagedConnObjectTOResult searchConnObjects(\n             @NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey,\n-            @BeanParam ConnObjectTOListQuery listQuery);\n+            @BeanParam ConnObjectTOQuery connObjectTOQuery);\n \n     /**\n      * Returns the resource with matching name."},{"sha":"5f8aa430cb73a0c30721ce773d362474d3c06c79","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/AbstractFiqlSearchConditionBuilder.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -146,6 +146,5 @@ public CompleteCondition notInDynRealms(final String dynRealm, final String... m\n             this.result = SpecialAttr.DYNREALMS.toString();\n             return condition(FiqlParser.NEQ, dynRealm, (Object[]) moreDynRealms);\n         }\n-\n     }\n }"},{"sha":"b497c7b7a237841caeb61fe4fbae212debf11b63","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/AnyObjectFiqlSearchConditionBuilder.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -162,6 +162,5 @@ public CompleteCondition isAssignable() {\n             this.result = SpecialAttr.ASSIGNABLE.toString();\n             return condition(FiqlParser.EQ, SpecialAttr.NULL);\n         }\n-\n     }\n }"},{"sha":"d028a7181bb5964e458ca28b3cc7bf42e8879e09","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/ConnObjectTOFiqlSearchConditionBuilder.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOFiqlSearchConditionBuilder.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+import java.util.Map;\n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+\n+/**\n+ * Extends {@link AbstractFiqlSearchConditionBuilder} by providing some additional facilities for searching\n+ * connector objects.\n+ */\n+public class ConnObjectTOFiqlSearchConditionBuilder extends AbstractFiqlSearchConditionBuilder {\n+\n+    private static final long serialVersionUID = 4983742159694010935L;\n+\n+    @Override\n+    protected Builder newBuilderInstance() {\n+        return new Builder(properties);\n+    }\n+\n+    @Override\n+    public SyncopeProperty is(final String property) {\n+        return newBuilderInstance().is(property);\n+    }\n+\n+    protected class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n+            implements SyncopeProperty, CompleteCondition {\n+\n+        public Builder(final Map<String, String> properties) {\n+            super(properties);\n+        }\n+\n+        public Builder(final Builder parent) {\n+            super(parent);\n+        }\n+\n+        @Override\n+        public SyncopeProperty is(final String property) {\n+            Builder b = new Builder(this);\n+            b.result = property;\n+            return b;\n+        }\n+\n+        @Override\n+        public CompleteCondition inDynRealms(final String dynRealm, final String... moreDynRealms) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public CompleteCondition notInDynRealms(final String dynRealm, final String... moreDynRealms) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public CompleteCondition hasResources(final String resource, final String... moreResources) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public CompleteCondition hasNotResources(final String resource, final String... moreResources) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+}"},{"sha":"1a875c991598a7b18222e4ed5dbc9e4592cb4b64","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/GroupFiqlSearchConditionBuilder.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -93,6 +93,5 @@ public CompleteCondition withoutMembers(final String member, final String... mor\n             this.result = SpecialAttr.MEMBER.toString();\n             return condition(FiqlParser.NEQ, member, (Object[]) moreMembers);\n         }\n-\n     }\n }"},{"sha":"db874ceb3912013020e5140e1824784d214f8bc1","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ConnObjectTOQuery.java","status":"renamed","additions":24,"deletions":9,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOQuery.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -19,23 +19,21 @@\n package org.apache.syncope.common.rest.api.beans;\n \n import java.io.Serializable;\n-import java.util.Optional;\n-\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n-public class ConnObjectTOListQuery implements Serializable {\n+public class ConnObjectTOQuery implements Serializable {\n \n     private static final long serialVersionUID = -371488230250055359L;\n \n     private static final int MAX_SIZE = 100;\n \n     public static class Builder {\n \n-        private final ConnObjectTOListQuery instance = new ConnObjectTOListQuery();\n+        private final ConnObjectTOQuery instance = new ConnObjectTOQuery();\n \n         public Builder size(final Integer size) {\n             instance.setSize(size);\n@@ -52,10 +50,14 @@ public Builder orderBy(final String orderBy) {\n             return this;\n         }\n \n-        public ConnObjectTOListQuery build() {\n-            return instance;\n+        public Builder fiql(final String fiql) {\n+            instance.setFiql(fiql);\n+            return this;\n         }\n \n+        public ConnObjectTOQuery build() {\n+            return instance;\n+        }\n     }\n \n     private Integer size;\n@@ -64,10 +66,14 @@ public ConnObjectTOListQuery build() {\n \n     private String orderBy;\n \n+    private String fiql;\n+\n     public Integer getSize() {\n-        return Optional.ofNullable(size).map(integer -> integer > MAX_SIZE\n-            ? MAX_SIZE\n-            : integer).orElse(25);\n+        return size == null\n+                ? 25\n+                : size > MAX_SIZE\n+                        ? MAX_SIZE\n+                        : size;\n     }\n \n     @Min(1)\n@@ -95,4 +101,13 @@ public String getOrderBy() {\n     public void setOrderBy(final String orderBy) {\n         this.orderBy = orderBy;\n     }\n+\n+    public String getFiql() {\n+        return fiql;\n+    }\n+\n+    @QueryParam(JAXRSService.PARAM_FIQL)\n+    public void setFiql(final String fiql) {\n+        this.fiql = fiql;\n+    }\n }","previous_filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ConnObjectTOListQuery.java"},{"sha":"9dd0c93480ccd55596279a01c3f14d2560b646b1","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":75,"deletions":58,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -27,37 +27,32 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.commons.lang3.tuple.ImmutableTriple;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.collections.IteratorChain;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n@@ -74,6 +69,7 @@\n import org.identityconnectors.framework.common.objects.OperationOptions;\n import org.identityconnectors.framework.common.objects.SearchResult;\n import org.identityconnectors.framework.common.objects.Uid;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.identityconnectors.framework.spi.SearchResultsHandler;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -89,18 +85,9 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n-\n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n \n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private GroupDAO groupDAO;\n-\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n@@ -116,6 +103,9 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     @Autowired\n     private ConnectorFactory connFactory;\n \n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n     protected static void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n         boolean authorized = effectiveRealms.stream().anyMatch(realm::startsWith);\n         if (!authorized) {\n@@ -277,69 +267,57 @@ public List<ResourceTO> list() {\n         return resourceDAO.findAll().stream().map(binder::getResourceTO).collect(Collectors.toList());\n     }\n \n-    private Triple<ExternalResource, AnyType, Provision> connObjectInit(\n+    private Pair<AnyType, Provision> connObjectInit(\n             final String resourceKey, final String anyTypeKey) {\n \n         ExternalResource resource = resourceDAO.authFind(resourceKey);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceKey + '\\'');\n         }\n+\n         AnyType anyType = anyTypeDAO.find(anyTypeKey);\n         if (anyType == null) {\n             throw new NotFoundException(\"AnyType '\" + anyTypeKey + '\\'');\n         }\n-        Optional<? extends Provision> provision = resource.getProvision(anyType);\n-        if (provision.isEmpty()) {\n-            throw new NotFoundException(\"Provision on resource '\" + resourceKey + \"' for type '\" + anyTypeKey + '\\'');\n-        }\n \n-        return ImmutableTriple.of(resource, anyType, provision.get());\n-    }\n+        Provision provision = resource.getProvision(anyType).\n+                orElseThrow(() -> new NotFoundException(\n+                \"Provision on resource '\" + resourceKey + \"' for type '\" + anyTypeKey + \"'\"));\n \n-    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n-    @Transactional(readOnly = true)\n-    public ConnObjectTO readConnObject(final String key, final String anyTypeKey, final String anyKey) {\n-        Triple<ExternalResource, AnyType, Provision> init = connObjectInit(key, anyTypeKey);\n+        return Pair.of(anyType, provision);\n+    }\n \n-        // 1. find any\n-        Any<?> any = init.getMiddle().getKind() == AnyTypeKind.USER\n-                ? userDAO.find(anyKey)\n-                : init.getMiddle().getKind() == AnyTypeKind.ANY_OBJECT\n-                ? anyObjectDAO.find(anyKey)\n-                : groupDAO.find(anyKey);\n-        if (any == null) {\n-            throw new NotFoundException(init.getMiddle() + \" \" + anyKey);\n-        }\n+    private ConnObjectTO readConnObject(\n+            final Provision provision,\n+            final String connObjectKeyValue) {\n \n-        // 2. build connObjectKeyItem\n-        MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(init.getRight()).\n+        // 0. build connObjectKeyItem\n+        MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision).\n                 orElseThrow(() -> new NotFoundException(\n-                \"ConnObjectKey mapping for \" + init.getMiddle() + ' ' + anyKey + \" on resource '\" + key + '\\''));\n-        String connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, init.getRight()).\n-                orElseThrow(() -> new NotFoundException(\n-                \"ConnObjectKey value for \" + init.getMiddle() + ' ' + anyKey + \" on resource '\" + key + '\\''));\n+                \"ConnObjectKey mapping for \" + provision.getAnyType().getKey()\n+                + \" on resource '\" + provision.getResource().getKey() + \"'\"));\n \n-        // 3. determine attributes to query\n-        Set<MappingItem> linkinMappingItems = virSchemaDAO.findByProvision(init.getRight()).stream().\n-                map(VirSchema::asLinkingMappingItem).collect(Collectors.toSet());\n+        // 1. determine attributes to query\n+        Set<MappingItem> linkinMappingItems = virSchemaDAO.findByProvision(provision).stream().\n+                map(virSchema -> virSchema.asLinkingMappingItem()).collect(Collectors.toSet());\n         Iterator<MappingItem> mapItems = new IteratorChain<>(\n-                init.getRight().getMapping().getItems().iterator(),\n+                provision.getMapping().getItems().iterator(),\n                 linkinMappingItems.iterator());\n \n-        // 4. read from the underlying connector\n-        Connector connector = connFactory.getConnector(init.getLeft());\n+        // 2. read from the underlying connector\n+        Connector connector = connFactory.getConnector(provision.getResource());\n         ConnectorObject connectorObject = connector.getObject(\n-                init.getRight().getObjectClass(),\n+                provision.getObjectClass(),\n                 AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKeyValue),\n-                init.getRight().isIgnoreCaseMatch(),\n+                provision.isIgnoreCaseMatch(),\n                 MappingUtils.buildOperationOptions(mapItems));\n         if (connectorObject == null) {\n             throw new NotFoundException(\n-                    \"Object \" + connObjectKeyValue + \" with class \" + init.getRight().getObjectClass()\n-                    + \" not found on resource \" + key);\n+                    \"Object \" + connObjectKeyValue + \" with class \" + provision.getObjectClass()\n+                    + \" not found on resource \" + provision.getResource().getKey());\n         }\n \n-        // 5. build result\n+        // 3. build result\n         Set<Attribute> attributes = connectorObject.getAttributes();\n         if (AttributeUtil.find(Uid.NAME, attributes) == null) {\n             attributes.add(connectorObject.getUid());\n@@ -351,10 +329,49 @@ public ConnObjectTO readConnObject(final String key, final String anyTypeKey, fi\n         return ConnObjectUtils.getConnObjectTO(connectorObject);\n     }\n \n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n+    @Transactional(readOnly = true)\n+    public ConnObjectTO readConnObjectByAnyKey(\n+            final String key,\n+            final String anyTypeKey,\n+            final String anyKey) {\n+\n+        Pair<AnyType, Provision> init = connObjectInit(key, anyTypeKey);\n+\n+        // 1. find any\n+        Any<?> any = anyUtilsFactory.getInstance(init.getLeft().getKind()).dao().authFind(anyKey);\n+        if (any == null) {\n+            throw new NotFoundException(init.getLeft() + \" \" + anyKey);\n+        }\n+\n+        // 2. find connObjectKeyValue\n+        String connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, init.getRight()).\n+                orElseThrow(() -> new NotFoundException(\n+                \"ConnObjectKey value for \" + init.getLeft() + \" \" + anyKey + \" on resource '\" + key + \"'\"));\n+\n+        return readConnObject(init.getRight(), connObjectKeyValue);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n+    @Transactional(readOnly = true)\n+    public ConnObjectTO readConnObjectByConnObjectKey(\n+            final String key,\n+            final String anyTypeKey,\n+            final String connObjectKeyValue) {\n+\n+        Pair<AnyType, Provision> init = connObjectInit(key, anyTypeKey);\n+        return readConnObject(init.getRight(), connObjectKeyValue);\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_LIST_CONNOBJECT + \"')\")\n     @Transactional(readOnly = true)\n-    public Pair<SearchResult, List<ConnObjectTO>> listConnObjects(final String key, final String anyTypeKey,\n-            final int size, final String pagedResultsCookie, final List<OrderByClause> orderBy) {\n+    public Pair<SearchResult, List<ConnObjectTO>> searchConnObjects(\n+            final Filter filter,\n+            final String key,\n+            final String anyTypeKey,\n+            final int size,\n+            final String pagedResultsCookie,\n+            final List<OrderByClause> orderBy) {\n \n         ExternalResource resource;\n         ObjectClass objectClass;\n@@ -372,8 +389,8 @@ public Pair<SearchResult, List<ConnObjectTO>> listConnObjects(final String key,\n             options = MappingUtils.buildOperationOptions(\n                     MappingUtils.getPropagationItems(resource.getOrgUnit().getItems()).iterator());\n         } else {\n-            Triple<ExternalResource, AnyType, Provision> init = connObjectInit(key, anyTypeKey);\n-            resource = init.getLeft();\n+            Pair<AnyType, Provision> init = connObjectInit(key, anyTypeKey);\n+            resource = init.getRight().getResource();\n             objectClass = init.getRight().getObjectClass();\n             init.getRight().getMapping().getItems();\n \n@@ -387,7 +404,7 @@ public Pair<SearchResult, List<ConnObjectTO>> listConnObjects(final String key,\n \n         List<ConnObjectTO> connObjects = new ArrayList<>();\n         SearchResult searchResult = connFactory.getConnector(resource).\n-                search(objectClass, null, new SearchResultsHandler() {\n+                search(objectClass, filter, new SearchResultsHandler() {\n \n                     private int count;\n "},{"sha":"ea255deff844fdb3caa0f54e6cdcb89309a42a83","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":41,"deletions":8,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -25,15 +25,23 @@\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.UriBuilder;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n+import org.apache.syncope.common.rest.api.beans.ConnObjectTOQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.core.logic.ResourceLogic;\n+import org.apache.syncope.core.persistence.api.search.FilterVisitor;\n import org.identityconnectors.framework.common.objects.SearchResult;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n@@ -83,16 +91,41 @@ public List<ResourceTO> list() {\n     }\n \n     @Override\n-    public ConnObjectTO readConnObject(final String key, final String anyTypeKey, final String anyKey) {\n-        return logic.readConnObject(key, anyTypeKey, anyKey);\n+    public ConnObjectTO readConnObject(final String key, final String anyTypeKey, final String value) {\n+        return SyncopeConstants.UUID_PATTERN.matcher(value).matches()\n+                ? logic.readConnObjectByAnyKey(key, anyTypeKey, value)\n+                : logic.readConnObjectByConnObjectKey(key, anyTypeKey, value);\n     }\n \n     @Override\n-    public PagedConnObjectTOResult listConnObjects(\n-            final String key, final String anyTypeKey, final ConnObjectTOListQuery listQuery) {\n+    public PagedConnObjectTOResult searchConnObjects(\n+            final String key, final String anyTypeKey, final ConnObjectTOQuery query) {\n+\n+        Filter filter = null;\n+        if (StringUtils.isNotBlank(query.getFiql())) {\n+            try {\n+                FilterVisitor visitor = new FilterVisitor();\n+                SearchCondition<SearchBean> sc = searchContext.getCondition(query.getFiql(), SearchBean.class);\n+                sc.accept(visitor);\n+\n+                filter = visitor.getQuery();\n+            } catch (Exception e) {\n+                LOG.error(\"Invalid FIQL expression: {}\", query.getFiql(), e);\n+\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+                sce.getElements().add(query.getFiql());\n+                sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));\n+                throw sce;\n+            }\n+        }\n \n-        Pair<SearchResult, List<ConnObjectTO>> list = logic.listConnObjects(key, anyTypeKey,\n-                listQuery.getSize(), listQuery.getPagedResultsCookie(), getOrderByClauses(listQuery.getOrderBy()));\n+        Pair<SearchResult, List<ConnObjectTO>> list = logic.searchConnObjects(\n+                filter,\n+                key,\n+                anyTypeKey,\n+                query.getSize(),\n+                query.getPagedResultsCookie(),\n+                getOrderByClauses(query.getOrderBy()));\n \n         PagedConnObjectTOResult result = new PagedConnObjectTOResult();\n         if (list.getLeft() != null) {\n@@ -111,7 +144,7 @@ public PagedConnObjectTOResult listConnObjects(\n         if (StringUtils.isNotBlank(result.getPagedResultsCookie())) {\n             result.setNext(builder.\n                     replaceQueryParam(PARAM_CONNID_PAGED_RESULTS_COOKIE, result.getPagedResultsCookie()).\n-                    replaceQueryParam(PARAM_SIZE, listQuery.getSize()).\n+                    replaceQueryParam(PARAM_SIZE, query.getSize()).\n                     build());\n         }\n "},{"sha":"b57c8548f0d76acd921d7d64889e9105ab220611","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/FilterConverter.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverter.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.search;\n+\n+import java.net.URLDecoder;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.search.SyncopeFiqlParser;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n+\n+/**\n+ * Converts FIQL expressions to ConnId's {@link Filter}.\n+ */\n+public final class FilterConverter {\n+\n+    /**\n+     * Parses a FIQL expression into ConnId's {@link Filter}, using {@link SyncopeFiqlParser}.\n+     *\n+     * @param fiql FIQL string\n+     * @return {@link Filter} instance for given FIQL expression\n+     */\n+    public static Filter convert(final String fiql) {\n+        SyncopeFiqlParser<SearchBean> parser = new SyncopeFiqlParser<>(\n+                SearchBean.class, AbstractFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n+\n+        try {\n+            FilterVisitor visitor = new FilterVisitor();\n+            SearchCondition<SearchBean> sc = parser.parse(URLDecoder.decode(fiql, StandardCharsets.UTF_8));\n+            sc.accept(visitor);\n+\n+            return visitor.getQuery();\n+        } catch (Exception e) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            sce.getElements().add(fiql);\n+            sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));\n+            throw sce;\n+        }\n+    }\n+\n+    private FilterConverter() {\n+        // empty constructor for static utility class        \n+    }\n+}"},{"sha":"8a159d4b20e10a791c91e6f5011ac37082234c73","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/FilterVisitor.java","status":"added","additions":166,"deletions":0,"changes":166,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterVisitor.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.search;\n+\n+import java.net.URLDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.cxf.jaxrs.ext.search.ConditionType;\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n+import org.apache.cxf.jaxrs.ext.search.SearchUtils;\n+import org.apache.cxf.jaxrs.ext.search.visitor.AbstractSearchConditionVisitor;\n+import org.apache.syncope.common.lib.search.SpecialAttr;\n+import org.apache.syncope.common.lib.search.SyncopeFiqlParser;\n+import org.apache.syncope.common.lib.search.SyncopeFiqlSearchCondition;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n+import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n+\n+public class FilterVisitor extends AbstractSearchConditionVisitor<SearchBean, Filter> {\n+\n+    private Filter filter;\n+\n+    public FilterVisitor() {\n+        super(null);\n+    }\n+\n+    private Filter visitPrimitive(final SearchCondition<SearchBean> sc) {\n+        String name = getRealPropertyName(sc.getStatement().getProperty());\n+        Optional<SpecialAttr> specialAttrName = SpecialAttr.fromString(name);\n+\n+        String value = SearchUtils.toSqlWildcardString(\n+                URLDecoder.decode(sc.getStatement().getValue().toString(), StandardCharsets.UTF_8), false).\n+                replaceAll(\"\\\\\\\\_\", \"_\");\n+        Optional<SpecialAttr> specialAttrValue = SpecialAttr.fromString(value);\n+\n+        ConditionType ct = sc.getConditionType();\n+        if (sc instanceof SyncopeFiqlSearchCondition && sc.getConditionType() == ConditionType.CUSTOM) {\n+            SyncopeFiqlSearchCondition<SearchBean> sfsc = (SyncopeFiqlSearchCondition<SearchBean>) sc;\n+            switch (sfsc.getOperator()) {\n+                case SyncopeFiqlParser.IEQ:\n+                    ct = ConditionType.EQUALS;\n+                    break;\n+\n+                case SyncopeFiqlParser.NIEQ:\n+                    ct = ConditionType.NOT_EQUALS;\n+                    break;\n+\n+                default:\n+                    throw new IllegalArgumentException(\n+                            String.format(\"Condition type %s is not supported\", sfsc.getOperator()));\n+            }\n+        }\n+\n+        Attribute attr = AttributeBuilder.build(name, value);\n+\n+        Filter leaf;\n+        switch (ct) {\n+            case EQUALS:\n+            case NOT_EQUALS:\n+                if (!specialAttrName.isPresent()) {\n+                    if (specialAttrValue.isPresent() && specialAttrValue.get() == SpecialAttr.NULL) {\n+                        leaf = FilterBuilder.equalTo(AttributeBuilder.build(name));\n+                    } else if (value.indexOf('%') == -1) {\n+                        leaf = sc.getConditionType() == ConditionType.CUSTOM\n+                                ? FilterBuilder.equalsIgnoreCase(attr)\n+                                : FilterBuilder.equalTo(attr);\n+                    } else if (sc.getConditionType() != ConditionType.CUSTOM && value.startsWith(\"%\")) {\n+                        leaf = FilterBuilder.endsWith(\n+                                AttributeBuilder.build(name, value.substring(1)));\n+                    } else if (sc.getConditionType() != ConditionType.CUSTOM && value.endsWith(\"%\")) {\n+                        leaf = FilterBuilder.startsWith(\n+                                AttributeBuilder.build(name, value.substring(0, value.length() - 1)));\n+                    } else {\n+                        throw new IllegalArgumentException(\n+                                String.format(\"Unsupported search value %s\", value));\n+                    }\n+                } else {\n+                    throw new IllegalArgumentException(\n+                            String.format(\"Special attr name %s is not supported\", specialAttrName));\n+                }\n+                if (ct == ConditionType.NOT_EQUALS) {\n+                    leaf = FilterBuilder.not(leaf);\n+                }\n+                break;\n+\n+            case GREATER_OR_EQUALS:\n+                leaf = FilterBuilder.greaterThanOrEqualTo(attr);\n+                break;\n+\n+            case GREATER_THAN:\n+                leaf = FilterBuilder.greaterThan(attr);\n+                break;\n+\n+            case LESS_OR_EQUALS:\n+                leaf = FilterBuilder.lessThanOrEqualTo(attr);\n+                break;\n+\n+            case LESS_THAN:\n+                leaf = FilterBuilder.lessThan(attr);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(String.format(\"Condition type %s is not supported\", ct.name()));\n+        }\n+\n+        return leaf;\n+    }\n+\n+    private Filter visitCompount(final SearchCondition<SearchBean> sc) {\n+        List<Filter> searchConds = new ArrayList<>();\n+        sc.getSearchConditions().forEach(searchCond -> {\n+            searchConds.add(searchCond.getStatement() == null\n+                    ? visitCompount(searchCond)\n+                    : visitPrimitive(searchCond));\n+        });\n+\n+        Filter compound;\n+        switch (sc.getConditionType()) {\n+            case AND:\n+                compound = FilterBuilder.and(searchConds);\n+                break;\n+\n+            case OR:\n+                compound = FilterBuilder.or(searchConds);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\n+                        String.format(\"Condition type %s is not supported\", sc.getConditionType().name()));\n+        }\n+\n+        return compound;\n+    }\n+\n+    @Override\n+    public void visit(final SearchCondition<SearchBean> sc) {\n+        filter = sc.getStatement() == null\n+                ? visitCompount(sc)\n+                : visitPrimitive(sc);\n+    }\n+\n+    @Override\n+    public Filter getQuery() {\n+        return filter;\n+    }\n+}"},{"sha":"616a1958275b191312fc539e8b4930b870024be3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":15,"deletions":11,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -98,13 +98,18 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n         ConditionType ct = sc.getConditionType();\n         if (sc instanceof SyncopeFiqlSearchCondition && sc.getConditionType() == ConditionType.CUSTOM) {\n             SyncopeFiqlSearchCondition<SearchBean> sfsc = (SyncopeFiqlSearchCondition<SearchBean>) sc;\n-            if (SyncopeFiqlParser.IEQ.equals(sfsc.getOperator())) {\n-                ct = ConditionType.EQUALS;\n-            } else if (SyncopeFiqlParser.NIEQ.equals(sfsc.getOperator())) {\n-                ct = ConditionType.NOT_EQUALS;\n-            } else {\n-                throw new IllegalArgumentException(\n-                        String.format(\"Condition type %s is not supported\", sfsc.getOperator()));\n+            switch (sfsc.getOperator()) {\n+                case SyncopeFiqlParser.IEQ:\n+                    ct = ConditionType.EQUALS;\n+                    break;\n+\n+                case SyncopeFiqlParser.NIEQ:\n+                    ct = ConditionType.NOT_EQUALS;\n+                    break;\n+\n+                default:\n+                    throw new IllegalArgumentException(\n+                            String.format(\"Condition type %s is not supported\", sfsc.getOperator()));\n             }\n         }\n \n@@ -252,9 +257,9 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n \n     private SearchCond visitCompount(final SearchCondition<SearchBean> sc) {\n         List<SearchCond> searchConds = new ArrayList<>();\n-        sc.getSearchConditions().forEach(searchCondition -> searchConds.add(searchCondition.getStatement() == null\n-                ? visitCompount(searchCondition)\n-                : visitPrimitive(searchCondition)));\n+        sc.getSearchConditions().forEach(searchCond -> searchConds.add(searchCond.getStatement() == null\n+                ? visitCompount(searchCond)\n+                : visitPrimitive(searchCond)));\n \n         SearchCond compound;\n         switch (sc.getConditionType()) {\n@@ -285,5 +290,4 @@ public void visit(final SearchCondition<SearchBean> sc) {\n     public SearchCond getQuery() {\n         return searchCond;\n     }\n-\n }"},{"sha":"40c9b692987fab6d6afa2baa5f1b63f83154ea2a","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/FilterConverterTest.java","status":"added","additions":289,"deletions":0,"changes":289,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -0,0 +1,289 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.search;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.List;\n+import java.util.ListIterator;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.search.SpecialAttr;\n+import org.apache.syncope.common.lib.search.ConnObjectTOFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.filter.AndFilter;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n+import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n+import org.identityconnectors.framework.common.objects.filter.NotFilter;\n+import org.identityconnectors.framework.common.objects.filter.OrFilter;\n+import org.junit.jupiter.api.Test;\n+\n+public class FilterConverterTest {\n+\n+    private boolean equals(final Filter filter1, final Filter filter2) {\n+        return EqualsBuilder.reflectionEquals(filter1, filter2);\n+    }\n+\n+    private boolean equals(final List<Filter> filters1, final List<Filter> filters2) {\n+        ListIterator<Filter> e1 = filters1.listIterator();\n+        ListIterator<Filter> e2 = filters2.listIterator();\n+        while (e1.hasNext() && e2.hasNext()) {\n+            Filter o1 = e1.next();\n+            Filter o2 = e2.next();\n+            if (!equals(o1, o2)) {\n+                return false;\n+            }\n+        }\n+        return !(e1.hasNext() || e2.hasNext());\n+    }\n+\n+    @Test\n+    public void eq() {\n+        String fiql = new ConnObjectTOFiqlSearchConditionBuilder().is(\"username\").equalTo(\"rossini\").query();\n+        assertEquals(\"username==rossini\", fiql);\n+\n+        Filter filter = FilterBuilder.equalTo(AttributeBuilder.build(\"username\", \"rossini\"));\n+\n+        assertTrue(equals(filter, FilterConverter.convert(fiql)));\n+    }\n+\n+    @Test\n+    public void ieq() {\n+        String fiql = new ConnObjectTOFiqlSearchConditionBuilder().is(\"username\").equalToIgnoreCase(\"rossini\").query();\n+        assertEquals(\"username=~rossini\", fiql);\n+\n+        Filter filter = FilterBuilder.equalsIgnoreCase(AttributeBuilder.build(\"username\", \"rossini\"));\n+\n+        assertTrue(equals(filter, FilterConverter.convert(fiql)));\n+    }\n+\n+    @Test\n+    public void nieq() {\n+        String fiql = new ConnObjectTOFiqlSearchConditionBuilder().is(\"username\").notEqualTolIgnoreCase(\"rossini\").\n+                query();\n+        assertEquals(\"username!~rossini\", fiql);\n+\n+        Filter filter = FilterBuilder.not(\n+                FilterBuilder.equalsIgnoreCase(AttributeBuilder.build(\"username\", \"rossini\")));\n+        assertTrue(filter instanceof NotFilter);\n+\n+        Filter converted = FilterConverter.convert(fiql);\n+        assertTrue(converted instanceof NotFilter);\n+\n+        assertTrue(equals(\n+                ((NotFilter) filter).getFilter(), ((NotFilter) converted).getFilter()));\n+    }\n+\n+    @Test\n+    public void like() {\n+        String fiql = new ConnObjectTOFiqlSearchConditionBuilder().is(\"username\").equalTo(\"ros*\").query();\n+        assertEquals(\"username==ros*\", fiql);\n+\n+        Filter filter = FilterBuilder.startsWith(AttributeBuilder.build(\"username\", \"ros\"));\n+\n+        assertTrue(equals(filter, FilterConverter.convert(fiql)));\n+\n+        fiql = new ConnObjectTOFiqlSearchConditionBuilder().is(\"username\").equalTo(\"*ini\").query();\n+        assertEquals(\"username==*ini\", fiql);\n+\n+        filter = FilterBuilder.endsWith(AttributeBuilder.build(\"username\", \"ini\"));\n+\n+        assertTrue(equals(filter, FilterConverter.convert(fiql)));\n+\n+        fiql = new ConnObjectTOFiqlSearchConditionBuilder().is(\"username\").equalTo(\"r*ini\").query();\n+        assertEquals(\"username==r*ini\", fiql);\n+\n+        try {\n+            FilterConverter.convert(fiql);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void ilike() {\n+        String fiql = new ConnObjectTOFiqlSearchConditionBuilder().is(\"username\").equalToIgnoreCase(\"ros*\").query();\n+        assertEquals(\"username=~ros*\", fiql);\n+\n+        try {\n+            FilterConverter.convert(fiql);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void nilike() {\n+        String fiql = new ConnObjectTOFiqlSearchConditionBuilder().is(\"username\").notEqualTolIgnoreCase(\"ros*\").query();\n+        assertEquals(\"username!~ros*\", fiql);\n+\n+        try {\n+            FilterConverter.convert(fiql);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void isNull() {\n+        String fiql = new ConnObjectTOFiqlSearchConditionBuilder().is(\"loginDate\").nullValue().query();\n+        assertEquals(\"loginDate==\" + SpecialAttr.NULL, fiql);\n+\n+        Filter filter = FilterBuilder.equalTo(AttributeBuilder.build(\"loginDate\"));\n+\n+        assertTrue(equals(filter, FilterConverter.convert(fiql)));\n+    }\n+\n+    @Test\n+    public void isNotNull() {\n+        String fiql = new ConnObjectTOFiqlSearchConditionBuilder().is(\"loginDate\").notNullValue().query();\n+        assertEquals(\"loginDate!=\" + SpecialAttr.NULL, fiql);\n+\n+        Filter filter = FilterBuilder.not(FilterBuilder.equalTo(AttributeBuilder.build(\"loginDate\")));\n+        assertTrue(filter instanceof NotFilter);\n+\n+        Filter converted = FilterConverter.convert(fiql);\n+        assertTrue(converted instanceof NotFilter);\n+\n+        assertTrue(equals(\n+                ((NotFilter) filter).getFilter(), ((NotFilter) converted).getFilter()));\n+    }\n+\n+    @Test\n+    public void inDynRealms() {\n+        try {\n+            new ConnObjectTOFiqlSearchConditionBuilder().inDynRealms(\"realm\").query();\n+            fail();\n+        } catch (UnsupportedOperationException e) {\n+            assertNotNull(e);\n+        }\n+\n+        try {\n+            FilterConverter.convert(SpecialAttr.DYNREALMS + \"==realm\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void notInDynRealms() {\n+        try {\n+            new ConnObjectTOFiqlSearchConditionBuilder().notInDynRealms(\"realm\").query();\n+            fail();\n+        } catch (UnsupportedOperationException e) {\n+            assertNotNull(e);\n+        }\n+\n+        try {\n+            FilterConverter.convert(SpecialAttr.DYNREALMS + \"!=realm\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void hasResources() {\n+        try {\n+            new ConnObjectTOFiqlSearchConditionBuilder().hasResources(\"resource\").query();\n+            fail();\n+        } catch (UnsupportedOperationException e) {\n+            assertNotNull(e);\n+        }\n+\n+        try {\n+            FilterConverter.convert(SpecialAttr.RESOURCES + \"==resource\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void hasNotResources() {\n+        try {\n+            new ConnObjectTOFiqlSearchConditionBuilder().hasNotResources(\"resource\").query();\n+            fail();\n+        } catch (UnsupportedOperationException e) {\n+            assertNotNull(e);\n+        }\n+\n+        try {\n+            FilterConverter.convert(SpecialAttr.RESOURCES + \"!=resource\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void and() {\n+        String fiql = new ConnObjectTOFiqlSearchConditionBuilder().\n+                is(\"fullname\").equalTo(\"ro*\").and(\"fullname\").equalTo(\"*i\").query();\n+        assertEquals(\"fullname==ro*;fullname==*i\", fiql);\n+\n+        Filter filter1 = FilterBuilder.startsWith(AttributeBuilder.build(\"fullname\", \"ro\"));\n+        Filter filter2 = FilterBuilder.endsWith(AttributeBuilder.build(\"fullname\", \"i\"));\n+\n+        Filter filter = FilterBuilder.and(filter1, filter2);\n+        assertTrue(filter instanceof AndFilter);\n+\n+        Filter converted = FilterConverter.convert(fiql);\n+        assertTrue(converted instanceof AndFilter);\n+\n+        assertTrue(equals(\n+                (List<Filter>) ((AndFilter) filter).getFilters(), (List<Filter>) ((AndFilter) converted).getFilters()));\n+    }\n+\n+    @Test\n+    public void or() {\n+        String fiql = new ConnObjectTOFiqlSearchConditionBuilder().\n+                is(\"fullname\").equalTo(\"ro*\").or(\"fullname\").equalTo(\"*i\").query();\n+        assertEquals(\"fullname==ro*,fullname==*i\", fiql);\n+\n+        Filter filter1 = FilterBuilder.startsWith(AttributeBuilder.build(\"fullname\", \"ro\"));\n+        Filter filter2 = FilterBuilder.endsWith(AttributeBuilder.build(\"fullname\", \"i\"));\n+\n+        Filter filter = FilterBuilder.or(filter1, filter2);\n+        assertTrue(filter instanceof OrFilter);\n+\n+        Filter converted = FilterConverter.convert(fiql);\n+        assertTrue(converted instanceof OrFilter);\n+\n+        assertTrue(equals(\n+                (List<Filter>) ((OrFilter) filter).getFilters(), (List<Filter>) ((OrFilter) converted).getFilters()));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE1223() {\n+        String fiql = new ConnObjectTOFiqlSearchConditionBuilder().is(\"ctype\").equalTo(\"ou=sample%252Co=isp\").query();\n+\n+        Filter filter = FilterBuilder.equalTo(AttributeBuilder.build(\"ctype\", \"ou=sample,o=isp\"));\n+\n+        assertTrue(equals(filter, FilterConverter.convert(fiql)));\n+    }\n+}"},{"sha":"a04a07f5496852f617b163776ce7fc43e963578e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LinkedAccountITCase.java","status":"modified","additions":12,"deletions":22,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -30,8 +30,6 @@\n import java.util.Optional;\n import java.util.UUID;\n import javax.naming.NamingException;\n-import javax.naming.directory.Attributes;\n-import javax.naming.ldap.LdapContext;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n@@ -44,6 +42,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.LinkedAccountTO;\n@@ -102,15 +101,11 @@ public void createWithLinkedAccountThenUpdateThenRemove() throws NamingException\n         assertEquals(ResourceOperation.CREATE, tasks.getResult().get(0).getOperation());\n         assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());\n \n-        LdapContext ldapObj = (LdapContext) getLdapRemoteObject(\n-                RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectKeyValue);\n+        ConnObjectTO ldapObj = resourceService.readConnObject(\n+                RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), connObjectKeyValue);\n         assertNotNull(ldapObj);\n-\n-        Attributes ldapAttrs = ldapObj.getAttributes(\"\");\n-        assertEquals(\n-                user.getPlainAttr(\"email\").get().getValues().get(0),\n-                ldapAttrs.get(\"mail\").getAll().next().toString());\n-        assertEquals(\"LINKED_SURNAME\", ldapAttrs.get(\"sn\").getAll().next().toString());\n+        assertEquals(user.getPlainAttr(\"email\").get().getValues(), ldapObj.getAttr(\"mail\").get().getValues());\n+        assertEquals(\"LINKED_SURNAME\", ldapObj.getAttr(\"sn\").get().getValues().get(0));\n \n         // 3. remove linked account from user\n         UserUR userUR = new UserUR();\n@@ -125,12 +120,11 @@ public void createWithLinkedAccountThenUpdateThenRemove() throws NamingException\n         assertEquals(1, user.getLinkedAccounts().size());\n \n         // 4 verify that account was updated on resource\n-        ldapObj = (LdapContext) getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectKeyValue);\n+        ldapObj = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), connObjectKeyValue);\n         assertNotNull(ldapObj);\n \n-        ldapAttrs = ldapObj.getAttributes(\"\");\n-        assertEquals(\"UPDATED_EMAIL@syncope.apache.org\", ldapAttrs.get(\"mail\").getAll().next().toString());\n-        assertEquals(\"UPDATED_SURNAME\", ldapAttrs.get(\"sn\").getAll().next().toString());\n+        assertTrue(ldapObj.getAttr(\"mail\").get().getValues().contains(\"UPDATED_EMAIL@syncope.apache.org\"));\n+        assertEquals(\"UPDATED_SURNAME\", ldapObj.getAttr(\"sn\").get().getValues().get(0));\n \n         // 5. remove linked account from user\n         userUR = new UserUR();\n@@ -196,15 +190,11 @@ public void createWithoutLinkedAccountThenAdd() throws NamingException {\n         assertEquals(ResourceOperation.CREATE, tasks.getResult().get(0).getOperation());\n         assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());\n \n-        LdapContext ldapObj = (LdapContext) getLdapRemoteObject(\n-                RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectKeyValue);\n+        ConnObjectTO ldapObj = resourceService.readConnObject(\n+                RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), connObjectKeyValue);\n         assertNotNull(ldapObj);\n-\n-        Attributes ldapAttrs = ldapObj.getAttributes(\"\");\n-        assertEquals(\n-                user.getPlainAttr(\"email\").get().getValues().get(0),\n-                ldapAttrs.get(\"mail\").getAll().next().toString());\n-        assertEquals(\"LINKED_SURNAME\", ldapAttrs.get(\"sn\").getAll().next().toString());\n+        assertEquals(user.getPlainAttr(\"email\").get().getValues(), ldapObj.getAttr(\"mail\").get().getValues());\n+        assertEquals(\"LINKED_SURNAME\", ldapObj.getAttr(\"sn\").get().getValues().get(0));\n     }\n \n     @Test"},{"sha":"d1d88269eac7865dfbcdb0e7b18cef4a123e963e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -27,26 +27,19 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.stream.Collectors;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.SerializationUtils;\n-import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n-import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.OrgUnitTO;\n-import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -58,7 +51,6 @@\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.TraceLevel;\n-import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -517,56 +509,6 @@ public void read() {\n         assertFalse(provision.get().getMapping().getLinkingItems().isEmpty());\n     }\n \n-    @Test\n-    public void listConnObjects() {\n-        List<String> groupKeys = new ArrayList<>();\n-        for (int i = 0; i < 10; i++) {\n-            GroupCR groupCR = GroupITCase.getSample(\"group\");\n-            groupCR.getResources().add(RESOURCE_NAME_LDAP);\n-            GroupTO group = createGroup(groupCR).getEntity();\n-            groupKeys.add(group.getKey());\n-        }\n-\n-        int totalRead = 0;\n-        Set<String> read = new HashSet<>();\n-        try {\n-            ConnObjectTOListQuery.Builder builder = new ConnObjectTOListQuery.Builder().size(10);\n-            PagedConnObjectTOResult list;\n-            do {\n-                list = null;\n-\n-                boolean succeeded = false;\n-                // needed because ApacheDS seems to randomly fail when searching with cookie\n-                for (int i = 0; i < 5 && !succeeded; i++) {\n-                    try {\n-                        list = resourceService.listConnObjects(\n-                                RESOURCE_NAME_LDAP,\n-                                AnyTypeKind.GROUP.name(),\n-                                builder.build());\n-                        succeeded = true;\n-                    } catch (SyncopeClientException e) {\n-                        assertEquals(ClientExceptionType.ConnectorException, e.getType());\n-                    }\n-                }\n-                assertNotNull(list);\n-\n-                totalRead += list.getResult().size();\n-                read.addAll(list.getResult().stream().\n-                        map(input -> input.getAttr(ConnIdSpecialName.NAME).get().getValues().get(0)).\n-                        collect(Collectors.toList()));\n-\n-                if (list.getPagedResultsCookie() != null) {\n-                    builder.pagedResultsCookie(list.getPagedResultsCookie());\n-                }\n-            } while (list.getPagedResultsCookie() != null);\n-\n-            assertEquals(totalRead, read.size());\n-            assertTrue(totalRead >= 10);\n-        } finally {\n-            groupKeys.forEach(key -> groupService.delete(key));\n-        }\n-    }\n-\n     @Test\n     public void history() {\n         List<ResourceHistoryConfTO> history = resourceHistoryService.list(RESOURCE_NAME_LDAP);"},{"sha":"347e0b798a799be05f5af3e6032f3fdd07e4ff8e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":120,"deletions":2,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","patch":"@@ -25,8 +25,14 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -39,18 +45,22 @@\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n+import org.apache.syncope.common.rest.api.beans.ConnObjectTOQuery;\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.ElasticsearchDetector;\n import org.junit.jupiter.api.Assertions;\n+import org.identityconnectors.framework.common.objects.Name;\n import org.junit.jupiter.api.Test;\n \n public class SearchITCase extends AbstractITCase {\n@@ -75,7 +85,8 @@ public void searchUser() {\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n-        assertEquals(2, matchingUsers.getResult().stream().filter(user -> \"74cd8ece-715a-44a4-a736-e17b46c4e7e6\".equals(user.getKey())\n+        assertEquals(2, matchingUsers.getResult().stream().filter(user -> \"74cd8ece-715a-44a4-a736-e17b46c4e7e6\".equals(\n+                user.getKey())\n                 || \"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\".equals(user.getKey())).count());\n     }\n \n@@ -444,6 +455,113 @@ public void orderBy() {\n         matchingUsers.getResult().forEach(Assertions::assertNotNull);\n     }\n \n+    @Test\n+    public void searchConnObjectsBrowsePagedResult() {\n+        List<String> groupKeys = new ArrayList<>();\n+        for (int i = 0; i < 10; i++) {\n+            GroupCR groupCR = GroupITCase.getSample(\"group\");\n+            groupCR.getResources().add(RESOURCE_NAME_LDAP);\n+            GroupTO group = createGroup(groupCR).getEntity();\n+            groupKeys.add(group.getKey());\n+        }\n+\n+        int totalRead = 0;\n+        Set<String> read = new HashSet<>();\n+        try {\n+            // 1. first search with no filters\n+            ConnObjectTOQuery.Builder builder = new ConnObjectTOQuery.Builder().size(10);\n+            PagedConnObjectTOResult matches;\n+            do {\n+                matches = null;\n+\n+                boolean succeeded = false;\n+                // needed because ApacheDS seems to randomly fail when searching with cookie\n+                for (int i = 0; i < 5 && !succeeded; i++) {\n+                    try {\n+                        matches = resourceService.searchConnObjects(\n+                                RESOURCE_NAME_LDAP,\n+                                AnyTypeKind.GROUP.name(),\n+                                builder.build());\n+                        succeeded = true;\n+                    } catch (SyncopeClientException e) {\n+                        assertEquals(ClientExceptionType.ConnectorException, e.getType());\n+                    }\n+                }\n+                assertNotNull(matches);\n+\n+                totalRead += matches.getResult().size();\n+                read.addAll(matches.getResult().stream().\n+                        map(input -> input.getAttr(ConnIdSpecialName.NAME).get().getValues().get(0)).\n+                        collect(Collectors.toList()));\n+\n+                if (matches.getPagedResultsCookie() != null) {\n+                    builder.pagedResultsCookie(matches.getPagedResultsCookie());\n+                }\n+            } while (matches.getPagedResultsCookie() != null);\n+\n+            assertEquals(totalRead, read.size());\n+            assertTrue(totalRead >= 10);\n+        } finally {\n+            groupKeys.forEach(key -> {\n+                groupService.delete(key);\n+            });\n+        }\n+    }\n+\n+    @Test\n+    public void searchConnObjectsWithFilter() {\n+        ConnObjectTO user = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), \"pullFromLDAP\");\n+        assertNotNull(user);\n+\n+        PagedConnObjectTOResult matches = resourceService.searchConnObjects(\n+                RESOURCE_NAME_LDAP,\n+                AnyTypeKind.USER.name(),\n+                new ConnObjectTOQuery.Builder().size(100).fiql(\n+                        SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n+                                is(\"givenName\").equalTo(\"pullFromLDAP\").query()).build());\n+        assertTrue(matches.getResult().contains(user));\n+\n+        matches = resourceService.searchConnObjects(\n+                RESOURCE_NAME_LDAP,\n+                AnyTypeKind.USER.name(),\n+                new ConnObjectTOQuery.Builder().size(100).fiql(\n+                        SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n+                                is(\"mail\").equalTo(\"pullFromLDAP*\").query()).build());\n+        assertTrue(matches.getResult().contains(user));\n+\n+        matches = resourceService.searchConnObjects(\n+                RESOURCE_NAME_LDAP,\n+                AnyTypeKind.USER.name(),\n+                new ConnObjectTOQuery.Builder().size(100).fiql(\n+                        SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n+                                is(\"mail\").equalTo(\"*@syncope.apache.org\").query()).build());\n+        assertTrue(matches.getResult().contains(user));\n+\n+        matches = resourceService.searchConnObjects(\n+                RESOURCE_NAME_LDAP,\n+                AnyTypeKind.USER.name(),\n+                new ConnObjectTOQuery.Builder().size(100).fiql(\n+                        SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n+                                is(\"givenName\").equalToIgnoreCase(\"pullfromldap\").query()).build());\n+        assertTrue(matches.getResult().contains(user));\n+\n+        matches = resourceService.searchConnObjects(\n+                RESOURCE_NAME_LDAP,\n+                AnyTypeKind.USER.name(),\n+                new ConnObjectTOQuery.Builder().size(100).fiql(\n+                        SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n+                                is(Name.NAME).equalTo(\"uid=pullFromLDAP%252Cou=people%252Co=isp\").query()).build());\n+        assertTrue(matches.getResult().contains(user));\n+\n+        matches = resourceService.searchConnObjects(\n+                RESOURCE_NAME_LDAP,\n+                AnyTypeKind.USER.name(),\n+                new ConnObjectTOQuery.Builder().size(100).fiql(\n+                        SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder().\n+                                is(\"givenName\").notEqualTo(\"pullFromLDAP\").query()).build());\n+        assertFalse(matches.getResult().contains(user));\n+    }\n+\n     @Test\n     public void issueSYNCOPE768() {\n         int usersWithNullable = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n@@ -534,7 +652,7 @@ public void issueSYNCOPE1223() {\n         req.getPlainAttrs().add(new AttrPatch.Builder(attr(\"ctype\", \"ou=sample,o=isp\")).build());\n         userService.update(req);\n \n-\tif (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+        if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {"}]}