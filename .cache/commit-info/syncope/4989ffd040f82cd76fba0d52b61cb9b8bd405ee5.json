{"sha":"4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ5ODlmZmQwNDBmODJjZDc2ZmJhMGQ1MmI2MWNiOWI4YmQ0MDVlZTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-11-06T12:50:09Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-11-06T12:57:02Z"},"message":"[SYNCOPE-152] SCIM filter","tree":{"sha":"002bbc8b94b835fe2d5972361f3b0816c981c839","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/002bbc8b94b835fe2d5972361f3b0816c981c839"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9129ee05f76ed6cd525622731c215ce3a4b5d781","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9129ee05f76ed6cd525622731c215ce3a4b5d781","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9129ee05f76ed6cd525622731c215ce3a4b5d781"}],"stats":{"total":597,"additions":587,"deletions":10},"files":[{"sha":"4569445a6b511ff8c155501bac92afee62189f0a","filename":"ext/scimv2/logic/pom.xml","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fpom.xml?ref=4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","patch":"@@ -35,6 +35,7 @@ under the License.\n   \n   <properties>\n     <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+    <antlr4.visitor>true</antlr4.visitor>\n   </properties>\n \n   <dependencies>\n@@ -49,13 +50,39 @@ under the License.\n       <artifactId>syncope-ext-scimv2-scim-rest-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    \n+    <dependency>\n+      <groupId>org.antlr</groupId>\n+      <artifactId>antlr4-runtime</artifactId>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <build>\n     <plugins>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-checkstyle-plugin</artifactId>\n+        <configuration>\n+          <sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>\n+        </configuration>\n+      </plugin>\n+      \n+      <plugin>\n+        <groupId>org.antlr</groupId>\n+        <artifactId>antlr4-maven-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>antlr4</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n       </plugin>\n     </plugins>\n   </build>"},{"sha":"ffddf3217c9af02ed9cc961548a1b15d011e41ba","filename":"ext/scimv2/logic/src/main/antlr4/org/apache/syncope/core/logic/scim/SCIMFilter.g4","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fantlr4%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilter.g4","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fantlr4%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilter.g4","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fantlr4%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilter.g4?ref=4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+grammar SCIMFilter;\n+\n+options\n+{\n+  language = Java;\n+}\n+\n+scimFilter\n+ : expression* EOF\n+ ;\n+\n+expression\n+ : NOT WS+? expression                        # NOT_EXPR\n+ | expression WS+? AND WS+? expression        # EXPR_AND_EXPR\n+ | expression WS+? OR WS+ expression          # EXPR_OR_EXPR\n+ | expression WS+? operator WS+? expression   # EXPR_OPER_EXPR\n+ | ATTRNAME WS+? PR                           # ATTR_PR\n+ | ATTRNAME WS+? operator WS+? expression     # ATTR_OPER_EXPR\n+ | ATTRNAME WS+? operator WS+? criteria       # ATTR_OPER_CRITERIA\n+ | LPAREN WS*? expression WS*? RPAREN         # LPAREN_EXPR_RPAREN\n+ | ATTRNAME LBRAC WS*? expression WS*? RBRAC  # LBRAC_EXPR_RBRAC\n+ ;\n+\n+criteria : '\"' .+? '\"';\n+\n+operator\n+ : EQ | NE | CO | SW | EW | GT | LT | GE | LE\n+ ;\n+\n+EQ : [eE][qQ];\n+NE : [nN][eE];\n+CO : [cC][oO];\n+SW : [sS][wW];\n+EW : [eE][wW];\n+GT : [gG][tT];\n+LT : [lL][tT];\n+GE : [gG][eE];\n+LE : [lL][eE];\n+\n+NOT : [nN][oO][tT];\n+\n+AND : [aA][nN][dD];\n+OR  : [oO][rR];\n+\n+PR : [pP][rR];\n+\n+LPAREN : '(';\n+RPAREN : ')';\n+\n+LBRAC : '[';\n+RBRAC : ']';\n+\n+WS : ' ';\n+\n+ATTRNAME : [-_.:a-zA-Z0-9]+;\n+\n+ANY : ~('\"' | '(' | ')' | '[' | ']');\n+\n+EOL : [\\t\\r\\n\\u000C]+ -> skip;"},{"sha":"db2bfbd4a0c37d8deb2bc0336205c416136cb890","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SCIMFilterErrorHandler.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilterErrorHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilterErrorHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilterErrorHandler.java?ref=4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.scim;\n+\n+import org.antlr.v4.runtime.DefaultErrorStrategy;\n+import org.antlr.v4.runtime.InputMismatchException;\n+import org.antlr.v4.runtime.Parser;\n+import org.antlr.v4.runtime.RecognitionException;\n+import org.antlr.v4.runtime.Token;\n+\n+public class SCIMFilterErrorHandler extends DefaultErrorStrategy {\n+\n+    @Override\n+    public void recover(final Parser recognizer, final RecognitionException e) {\n+        throw e;\n+    }\n+\n+    @Override\n+    public Token recoverInline(final Parser recognizer) throws RecognitionException {\n+        throw new InputMismatchException(recognizer);\n+    }\n+\n+    @Override\n+    public void sync(final Parser recognizer) throws RecognitionException {\n+    }\n+}"},{"sha":"fd45f436fed0848494139355ba7fe4f547637b4d","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondConverter.java?ref=4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.scim;\n+\n+import org.antlr.v4.runtime.CharStreams;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.ext.scimv2.api.SCIMBadRequestException;\n+import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Converts SCIM filter expressions to Syncope's {@link SearchCond}.\n+ */\n+public final class SearchCondConverter {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SearchCondConverter.class);\n+\n+    public static SearchCond convert(final String filter) {\n+        SCIMFilterParser parser = new SCIMFilterParser(new CommonTokenStream(\n+                new SCIMFilterLexer(CharStreams.fromString(filter))));\n+        parser.setBuildParseTree(true);\n+        parser.setTrimParseTree(true);\n+        parser.setProfile(true);\n+        parser.removeErrorListeners();\n+        parser.setErrorHandler(new SCIMFilterErrorHandler());\n+\n+        try {\n+            return new SearchCondVisitor().visit(parser.scimFilter());\n+        } catch (Exception e) {\n+            LOG.error(\"Could not parse {}\", filter, e);\n+            throw new SCIMBadRequestException(ErrorType.invalidFilter, e.getMessage());\n+        }\n+    }\n+\n+    private SearchCondConverter() {\n+        // empty constructor for static utility class        \n+    }\n+}"},{"sha":"18825053d97b3f76d92f469288387c2d3869eb18","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java?ref=4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","patch":"@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.scim;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.ext.scimv2.api.type.Resource;\n+\n+/**\n+ * Visits SCIM filter expression and produces {@link SearchCond}.\n+ */\n+public class SearchCondVisitor extends SCIMFilterBaseVisitor<SearchCond> {\n+\n+    @Override\n+    public SearchCond visitScimFilter(final SCIMFilterParser.ScimFilterContext ctx) {\n+        return visit(ctx.expression(0));\n+    }\n+\n+    private AttributeCond createAttributeCond(final String schema) {\n+        AttributeCond attributeCond;\n+        if (\"userName\".equalsIgnoreCase(schema)\n+                || (Resource.User.schema() + \":userName\").equalsIgnoreCase(schema)) {\n+\n+            attributeCond = new AnyCond();\n+            attributeCond.setSchema(\"username\");\n+        } else if (\"displayName\".equalsIgnoreCase(schema)\n+                || (Resource.Group.schema() + \":displayName\").equalsIgnoreCase(schema)) {\n+\n+            attributeCond = new AnyCond();\n+            attributeCond.setSchema(\"name\");\n+        } else if (\"meta.created\".equals(schema)) {\n+            attributeCond = new AnyCond();\n+            attributeCond.setSchema(\"creationDate\");\n+        } else if (\"meta.lastModified\".equals(schema)) {\n+            attributeCond = new AnyCond();\n+            attributeCond.setSchema(\"lastChangeDate\");\n+        } else {\n+            attributeCond = new AttributeCond();\n+            attributeCond.setSchema(schema);\n+        }\n+\n+        return attributeCond;\n+    }\n+\n+    private SearchCond transform(final String operator, final String left, final String right) {\n+        AttributeCond attributeCond = createAttributeCond(left);\n+        attributeCond.setExpression(StringUtils.strip(right, \"\\\"\"));\n+\n+        switch (operator) {\n+            case \"eq\":\n+            default:\n+                attributeCond.setType(AttributeCond.Type.IEQ);\n+                break;\n+\n+            case \"ne\":\n+                attributeCond.setType(AttributeCond.Type.IEQ);\n+                break;\n+\n+            case \"sw\":\n+                attributeCond.setType(AttributeCond.Type.ILIKE);\n+                attributeCond.setExpression(attributeCond.getExpression() + \"%\");\n+                break;\n+\n+            case \"co\":\n+                attributeCond.setType(AttributeCond.Type.ILIKE);\n+                attributeCond.setExpression(\"%\" + attributeCond.getExpression() + \"%\");\n+                break;\n+\n+            case \"ew\":\n+                attributeCond.setType(AttributeCond.Type.ILIKE);\n+                attributeCond.setExpression(\"%\" + attributeCond.getExpression());\n+                break;\n+\n+            case \"gt\":\n+                attributeCond.setType(AttributeCond.Type.GT);\n+                break;\n+\n+            case \"ge\":\n+                attributeCond.setType(AttributeCond.Type.GE);\n+                break;\n+\n+            case \"lt\":\n+                attributeCond.setType(AttributeCond.Type.LT);\n+                break;\n+\n+            case \"le\":\n+                attributeCond.setType(AttributeCond.Type.LE);\n+                break;\n+\n+        }\n+\n+        return \"ne\".equals(operator)\n+                ? SearchCond.getNotLeafCond(attributeCond)\n+                : SearchCond.getLeafCond(attributeCond);\n+    }\n+\n+    @Override\n+    public SearchCond visitEXPR_OPER_EXPR(final SCIMFilterParser.EXPR_OPER_EXPRContext ctx) {\n+        return transform(ctx.operator().getText(), ctx.expression(0).getText(), ctx.expression(1).getText());\n+    }\n+\n+    @Override\n+    public SearchCond visitATTR_OPER_CRITERIA(final SCIMFilterParser.ATTR_OPER_CRITERIAContext ctx) {\n+        return transform(ctx.operator().getText(), ctx.ATTRNAME().getText(), ctx.criteria().getText());\n+    }\n+\n+    @Override\n+    public SearchCond visitATTR_OPER_EXPR(final SCIMFilterParser.ATTR_OPER_EXPRContext ctx) {\n+        return transform(ctx.operator().getText(), ctx.ATTRNAME().getText(), ctx.expression().getText());\n+    }\n+\n+    @Override\n+    public SearchCond visitATTR_PR(final SCIMFilterParser.ATTR_PRContext ctx) {\n+        AttributeCond cond = createAttributeCond(ctx.ATTRNAME().getText());\n+        cond.setType(AttributeCond.Type.ISNOTNULL);\n+        return SearchCond.getLeafCond(cond);\n+    }\n+\n+    @Override\n+    public SearchCond visitLPAREN_EXPR_RPAREN(final SCIMFilterParser.LPAREN_EXPR_RPARENContext ctx) {\n+        return visit(ctx.expression());\n+    }\n+\n+    @Override\n+    public SearchCond visitNOT_EXPR(final SCIMFilterParser.NOT_EXPRContext ctx) {\n+        SearchCond cond = visit(ctx.expression());\n+        if (cond.getAttributeCond() != null) {\n+            if (cond.getAttributeCond().getType() == AttributeCond.Type.ISNULL) {\n+                cond.getAttributeCond().setType(AttributeCond.Type.ISNOTNULL);\n+            } else if (cond.getAttributeCond().getType() == AttributeCond.Type.ISNOTNULL) {\n+                cond.getAttributeCond().setType(AttributeCond.Type.ISNULL);\n+            }\n+        } else if (cond.getAnyCond() != null) {\n+            if (cond.getAnyCond().getType() == AnyCond.Type.ISNULL) {\n+                cond.getAnyCond().setType(AnyCond.Type.ISNOTNULL);\n+            } else if (cond.getAnyCond().getType() == AnyCond.Type.ISNOTNULL) {\n+                cond.getAnyCond().setType(AnyCond.Type.ISNULL);\n+            }\n+        } else {\n+            cond = SearchCond.getNotLeafCond(cond);\n+        }\n+\n+        return cond;\n+    }\n+\n+    @Override\n+    public SearchCond visitEXPR_AND_EXPR(final SCIMFilterParser.EXPR_AND_EXPRContext ctx) {\n+        return SearchCond.getAndCond(visit(ctx.expression(0)), visit(ctx.expression(1)));\n+    }\n+\n+    @Override\n+    public SearchCond visitEXPR_OR_EXPR(final SCIMFilterParser.EXPR_OR_EXPRContext ctx) {\n+        return SearchCond.getOrCond(visit(ctx.expression(0)), visit(ctx.expression(1)));\n+    }\n+\n+}"},{"sha":"d488725769e29a7d55724ffc0faabd8025d48668","filename":"ext/scimv2/logic/src/test/java/org/apache/syncope/core/logic/scim/SCIMFilterTest.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilterTest.java?ref=4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.scim;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.junit.jupiter.api.Test;\n+\n+public class SCIMFilterTest {\n+\n+    @Test\n+    public void eq() {\n+        SearchCond cond = SearchCondConverter.convert(\"userName eq \\\"bjensen\\\"\");\n+        assertNotNull(cond);\n+        assertNotNull(cond.getAnyCond());\n+        assertEquals(\"username\", cond.getAnyCond().getSchema());\n+        assertEquals(AttributeCond.Type.IEQ, cond.getAnyCond().getType());\n+        assertEquals(\"bjensen\", cond.getAnyCond().getExpression());\n+    }\n+\n+    @Test\n+    public void sw() {\n+        SearchCond cond = SearchCondConverter.convert(\"userName sw \\\"J\\\"\");\n+        assertNotNull(cond);\n+        assertNotNull(cond.getAnyCond());\n+        assertEquals(\"username\", cond.getAnyCond().getSchema());\n+        assertEquals(AttributeCond.Type.ILIKE, cond.getAnyCond().getType());\n+        assertEquals(\"J%\", cond.getAnyCond().getExpression());\n+\n+        SearchCond fqn = SearchCondConverter.convert(\"urn:ietf:params:scim:schemas:core:2.0:User:userName sw \\\"J\\\"\");\n+        assertEquals(cond, fqn);\n+    }\n+\n+    @Test\n+    public void pr() {\n+        SearchCond cond = SearchCondConverter.convert(\"title pr\");\n+        assertNotNull(cond);\n+        assertNotNull(cond.getAttributeCond());\n+        assertEquals(\"title\", cond.getAttributeCond().getSchema());\n+        assertEquals(AttributeCond.Type.ISNOTNULL, cond.getAttributeCond().getType());\n+        assertNull(cond.getAttributeCond().getExpression());\n+    }\n+\n+    @Test\n+    public void gt() {\n+        SearchCond cond = SearchCondConverter.convert(\"meta.lastModified gt \\\"2011-05-13T04:42:34Z\\\"\");\n+        assertNotNull(cond);\n+        assertNotNull(cond.getAnyCond());\n+        assertEquals(\"lastChangeDate\", cond.getAnyCond().getSchema());\n+        assertEquals(AttributeCond.Type.GT, cond.getAnyCond().getType());\n+        assertEquals(\"2011-05-13T04:42:34Z\", cond.getAnyCond().getExpression());\n+    }\n+\n+    @Test\n+    public void not() {\n+        SearchCond cond = SearchCondConverter.convert(\"not (title pr)\");\n+        assertNotNull(cond);\n+        assertNotNull(cond.getAttributeCond());\n+        assertEquals(\"title\", cond.getAttributeCond().getSchema());\n+        assertEquals(AttributeCond.Type.ISNULL, cond.getAttributeCond().getType());\n+        assertNull(cond.getAttributeCond().getExpression());\n+    }\n+\n+    @Test\n+    public void and() {\n+        SearchCond cond = SearchCondConverter.convert(\"title pr and userName sw \\\"J\\\"\");\n+        assertNotNull(cond);\n+        assertEquals(SearchCond.Type.AND, cond.getType());\n+\n+        SearchCond left = cond.getLeftSearchCond();\n+        assertNotNull(left);\n+        assertNotNull(left.getAttributeCond());\n+        assertEquals(\"title\", left.getAttributeCond().getSchema());\n+        assertEquals(AttributeCond.Type.ISNOTNULL, left.getAttributeCond().getType());\n+        assertNull(left.getAttributeCond().getExpression());\n+\n+        SearchCond right = cond.getRightSearchCond();\n+        assertNotNull(right);\n+        assertNotNull(right.getAnyCond());\n+        assertEquals(\"username\", right.getAnyCond().getSchema());\n+        assertEquals(AttributeCond.Type.ILIKE, right.getAnyCond().getType());\n+        assertEquals(\"J%\", right.getAnyCond().getExpression());\n+    }\n+\n+    @Test\n+    public void or() {\n+        SearchCond cond = SearchCondConverter.convert(\"title pr or displayName eq \\\"Other\\\"\");\n+        assertNotNull(cond);\n+        assertEquals(SearchCond.Type.OR, cond.getType());\n+\n+        SearchCond left = cond.getLeftSearchCond();\n+        assertNotNull(left);\n+        assertNotNull(left.getAttributeCond());\n+        assertEquals(\"title\", left.getAttributeCond().getSchema());\n+        assertEquals(AttributeCond.Type.ISNOTNULL, left.getAttributeCond().getType());\n+        assertNull(left.getAttributeCond().getExpression());\n+\n+        SearchCond right = cond.getRightSearchCond();\n+        assertNotNull(right);\n+        assertNotNull(right.getAnyCond());\n+        assertEquals(\"name\", right.getAnyCond().getSchema());\n+        assertEquals(AttributeCond.Type.IEQ, right.getAnyCond().getType());\n+        assertEquals(\"Other\", right.getAnyCond().getExpression());\n+    }\n+}"},{"sha":"f84d5594aff0702ee6f9522f316e959dfb3003d6","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Group.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FGroup.java?ref=4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","patch":"@@ -39,7 +39,7 @@ public Group(\n             @JsonProperty(\"display\") final String display,\n             @JsonProperty(\"type\") final Function type) {\n \n-        super(value, ref, display);\n+        super(value, display, ref);\n         this.type = type;\n     }\n "},{"sha":"902217d0f5e9e5bcd6f5aaadc2f78ff3716d518f","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMember.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMember.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMember.java?ref=4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","patch":"@@ -37,7 +37,7 @@ public Member(\n             @JsonProperty(\"display\") final String display,\n             @JsonProperty(\"type\") final Resource type) {\n \n-        super(value, ref, display);\n+        super(value, display, ref);\n         this.type = type;\n     }\n "},{"sha":"f0548c45af9a4624a3ccad796c8a97199447ce08","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java?ref=4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","patch":"@@ -24,6 +24,7 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.Arrays;\n import java.util.List;\n+import org.apache.syncope.ext.scimv2.api.SCIMBadRequestException;\n import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n \n@@ -40,6 +41,10 @@ public class SCIMError extends SCIMBean {\n     @JsonFormat(shape = Shape.STRING)\n     private final int status = 400;\n \n+    public SCIMError(final SCIMBadRequestException ex) {\n+        this(ex.getErrorType(), ex.getMessage());\n+    }\n+\n     @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n     public SCIMError(\n             @JsonProperty(\"scimType\") final ErrorType scimType,"},{"sha":"4525d8262132266aa8315e6328c7884a40aecd01","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java?ref=4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","patch":"@@ -41,6 +41,7 @@\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.apache.syncope.ext.scimv2.api.ConflictException;\n import org.apache.syncope.ext.scimv2.api.PayloadTooLargeException;\n+import org.apache.syncope.ext.scimv2.api.SCIMBadRequestException;\n import org.apache.syncope.ext.scimv2.api.data.SCIMError;\n import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n import org.identityconnectors.framework.common.exceptions.ConfigurationException;\n@@ -108,9 +109,7 @@ public Response toResponse(final Exception ex) {\n                 && ENTITYEXISTS_EXCLASS.isAssignableFrom(ex.getCause().getClass())) {\n \n             builder = builder(ClientExceptionType.EntityExists, ExceptionUtils.getRootCauseMessage(ex));\n-        } else if (ex instanceof DataIntegrityViolationException\n-                || JPASYSTEM_EXCLASS.isAssignableFrom(ex.getClass())) {\n-\n+        } else if (ex instanceof DataIntegrityViolationException || JPASYSTEM_EXCLASS.isAssignableFrom(ex.getClass())) {\n             builder = builder(ClientExceptionType.DataIntegrityViolation, ExceptionUtils.getRootCauseMessage(ex));\n         } else if (CONNECTOR_EXCLASS.isAssignableFrom(ex.getClass())) {\n             builder = builder(ClientExceptionType.ConnectorException, ExceptionUtils.getRootCauseMessage(ex));\n@@ -125,7 +124,8 @@ public Response toResponse(final Exception ex) {\n             }\n             // ...or just report as InternalServerError\n             if (builder == null) {\n-                builder = Response.status(Response.Status.INTERNAL_SERVER_ERROR);\n+                builder = Response.status(Response.Status.INTERNAL_SERVER_ERROR).\n+                        entity(ExceptionUtils.getRootCauseMessage(ex));\n             }\n         }\n \n@@ -188,6 +188,8 @@ private ResponseBuilder processBadRequestExceptions(final Exception ex) {\n             return builder(ClientExceptionType.InvalidValues, ExceptionUtils.getRootCauseMessage(ex));\n         } else if (ex instanceof MalformedPathException) {\n             return builder(ClientExceptionType.InvalidPath, ExceptionUtils.getRootCauseMessage(ex));\n+        } else if (ex instanceof SCIMBadRequestException) {\n+            return Response.status(Response.Status.BAD_REQUEST).entity(new SCIMError((SCIMBadRequestException) ex));\n         }\n \n         return null;"},{"sha":"73dbd5ae075beca9d7218717d59f1217a78c6d5e","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractSCIMService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractSCIMService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractSCIMService.java?ref=4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n import org.apache.syncope.core.logic.GroupLogic;\n import org.apache.syncope.core.logic.UserLogic;\n+import org.apache.syncope.core.logic.scim.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -189,11 +190,9 @@ protected ListResponse<R> doSearch(\n             throw new UnsupportedOperationException();\n         }\n \n-        int page = startIndex == null || startIndex <= 1 ? 1 : (startIndex / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n-\n         Pair<Integer, ? extends List<? extends AnyTO>> result = anyLogic(type).search(\n-                null,\n-                page,\n+                StringUtils.isBlank(filter) ? null : SearchCondConverter.convert(filter),\n+                startIndex == null || startIndex <= 1 ? 1 : (startIndex / AnyDAO.DEFAULT_PAGE_SIZE) + 1,\n                 AnyDAO.DEFAULT_PAGE_SIZE,\n                 Collections.<OrderByClause>emptyList(),\n                 SyncopeConstants.ROOT_REALM,"},{"sha":"cc8a92e2f3678d460842cff576da31f53a882a7d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SCIMITCase.java","status":"modified","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java?ref=4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","patch":"@@ -27,13 +27,18 @@\n import com.fasterxml.jackson.databind.node.ArrayNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.io.IOException;\n+import java.text.SimpleDateFormat;\n import java.util.Arrays;\n+import java.util.Date;\n import java.util.List;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.ext.scimv2.api.SCIMConstants;\n import org.apache.syncope.ext.scimv2.api.data.ListResponse;\n import org.apache.syncope.ext.scimv2.api.data.ResourceType;\n@@ -50,6 +55,16 @@ public class SCIMITCase extends AbstractITCase {\n \n     public static final String SCIM_ADDRESS = \"http://localhost:9080/syncope/scim/v2\";\n \n+    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n+\n+        @Override\n+        protected SimpleDateFormat initialValue() {\n+            SimpleDateFormat sdf = new SimpleDateFormat();\n+            sdf.applyPattern(SyncopeConstants.DEFAULT_DATE_PATTERN);\n+            return sdf;\n+        }\n+    };\n+\n     private WebClient webClient() {\n         return WebClient.create(SCIM_ADDRESS, Arrays.asList(new JacksonSCIMJsonProvider())).\n                 accept(SCIMConstants.APPLICATION_SCIM_JSON_TYPE).\n@@ -159,4 +174,45 @@ public void list() throws IOException {\n             assertNotNull(group.getDisplayName());\n         });\n     }\n+\n+    @Test\n+    public void search() {\n+        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n+\n+        // eq\n+        Response response = webClient().path(\"Groups\").query(\"filter\", \"displayName eq \\\"additional\\\"\").get();\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+        assertEquals(\n+                SCIMConstants.APPLICATION_SCIM_JSON,\n+                StringUtils.substringBefore(response.getHeaderString(HttpHeaders.CONTENT_TYPE), \";\"));\n+\n+        ListResponse<SCIMGroup> groups = response.readEntity(new GenericType<ListResponse<SCIMGroup>>() {\n+        });\n+        assertNotNull(groups);\n+        assertEquals(1, groups.getTotalResults());\n+\n+        SCIMGroup additional = groups.getResources().get(0);\n+        assertEquals(\"additional\", additional.getDisplayName());\n+\n+        // gt\n+        UserTO newUser = userService.create(UserITCase.getUniqueSampleTO(\"scimsearch@syncope.apache.org\")).readEntity(\n+                new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getEntity();\n+\n+        Date value = new Date(newUser.getCreationDate().getTime() - 1000);\n+        response = webClient().path(\"Users\").query(\"filter\", \"meta.created gt \\\"\"\n+                + DATE_FORMAT.get().format(value) + \"\\\"\").get();\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+        assertEquals(\n+                SCIMConstants.APPLICATION_SCIM_JSON,\n+                StringUtils.substringBefore(response.getHeaderString(HttpHeaders.CONTENT_TYPE), \";\"));\n+\n+        ListResponse<SCIMUser> users = response.readEntity(new GenericType<ListResponse<SCIMUser>>() {\n+        });\n+        assertNotNull(users);\n+        assertEquals(1, users.getTotalResults());\n+\n+        SCIMUser newSCIMUser = users.getResources().get(0);\n+        assertEquals(newUser.getUsername(), newSCIMUser.getUserName());\n+    }\n }"},{"sha":"c8f6e52c24cd464aef47de6dd28cf47917ef77b6","filename":"pom.xml","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4989ffd040f82cd76fba0d52b61cb9b8bd405ee5/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=4989ffd040f82cd76fba0d52b61cb9b8bd405ee5","patch":"@@ -462,6 +462,8 @@ under the License.\n     <tycho.version>1.0.0</tycho.version>\n     <netbeans.version>RELEASE82</netbeans.version>\n \n+    <antlr4.version>4.7</antlr4.version>\n+\n     <testds.port>1389</testds.port>\n     <testdb.webport>9082</testdb.webport>\n \n@@ -1569,6 +1571,12 @@ under the License.\n         <version>${netbeans.version}</version>\n       </dependency>\n \n+      <dependency>\n+        <groupId>org.antlr</groupId>\n+        <artifactId>antlr4-runtime</artifactId>\n+        <version>${antlr4.version}</version>\n+      </dependency>\n+\n       <!-- TEST -->\n       <dependency>\n         <groupId>com.github.detro</groupId>\n@@ -1935,6 +1943,12 @@ under the License.\n           <artifactId>exec-maven-plugin</artifactId>\n           <version>1.6.0</version>\n         </plugin>\n+        \n+        <plugin>\n+          <groupId>org.antlr</groupId>\n+          <artifactId>antlr4-maven-plugin</artifactId>\n+          <version>${antlr4.version}</version>\n+        </plugin>\n       </plugins>\n     </pluginManagement>\n "}]}