{"sha":"e87e4102dac8b64954cbe1402cf462fd84a7e7a4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU4N2U0MTAyZGFjOGI2NDk1NGNiZTE0MDJjZjQ2MmZkODRhN2U3YTQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-04-28T16:15:21Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-04-28T16:15:21Z"},"message":"Refactoring Task and Report common interface and logic","tree":{"sha":"f01dabb5574db68b6ebb56a43b629c33562fe845","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f01dabb5574db68b6ebb56a43b629c33562fe845"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e87e4102dac8b64954cbe1402cf462fd84a7e7a4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e87e4102dac8b64954cbe1402cf462fd84a7e7a4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e87e4102dac8b64954cbe1402cf462fd84a7e7a4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"eed24866ec55c8f73d91f21f2d6478cfbe808d09","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eed24866ec55c8f73d91f21f2d6478cfbe808d09","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/eed24866ec55c8f73d91f21f2d6478cfbe808d09"}],"stats":{"total":671,"additions":391,"deletions":280},"files":[{"sha":"abc62a6fcf41e84bf0e62993a881bcae4c799b33","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n-import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -63,7 +63,7 @@ public int count(final AnyTypeKind anyTypeKind, final String anyTypeKey, final T\n \n     public int countExecutions(final String taskKey) {\n         return getService(TaskService.class).\n-                listExecutions(new TaskExecQuery.Builder().key(taskKey).page(1).size(1).build()).getTotalCount();\n+                listExecutions(new ExecQuery.Builder().key(taskKey).page(1).size(1).build()).getTotalCount();\n     }\n \n     public List<PropagationTaskTO> listPropagationTasks(\n@@ -141,7 +141,7 @@ public <T extends AbstractTaskTO> List<T> list(\n \n     public List<ExecTO> listExecutions(final String taskKey, final int page, final int size) {\n         return getService(TaskService.class).\n-                listExecutions(new TaskExecQuery.Builder().key(taskKey).page(page).size(size).build()).getResult();\n+                listExecutions(new ExecQuery.Builder().key(taskKey).page(page).size(size).build()).getResult();\n     }\n \n     private TaskType getTaskType(final Class<?> reference) {"},{"sha":"e13eb29f760f2313b4d17b1d819fca7fed42edf9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -198,6 +198,8 @@ public final class StandardEntitlement {\n \n     public static final String NOTIFICATION_DELETE = \"NOTIFICATION_DELETE\";\n \n+    public static final String NOTIFICATION_EXECUTE = \"NOTIFICATION_EXECUTE\";\n+\n     public static final String REPORT_TEMPLATE_LIST = \"REPORT_TEMPLATE_LIST\";\n \n     public static final String REPORT_TEMPLATE_CREATE = \"REPORT_TEMPLATE_CREATE\";"},{"sha":"3b735a5e320174fbb707572a29d51c517606a855","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecQuery.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecQuery.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -21,15 +21,15 @@\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.PathParam;\n \n-public class TaskExecQuery extends AbstractQuery {\n+public class ExecQuery extends AbstractQuery {\n \n     private static final long serialVersionUID = -8792519310029596796L;\n \n-    public static class Builder extends AbstractQuery.Builder<TaskExecQuery, Builder> {\n+    public static class Builder extends AbstractQuery.Builder<ExecQuery, Builder> {\n \n         @Override\n-        protected TaskExecQuery newInstance() {\n-            return new TaskExecQuery();\n+        protected ExecQuery newInstance() {\n+            return new ExecQuery();\n         }\n \n         public Builder key(final String key) {","previous_filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/TaskExecQuery.java"},{"sha":"b97f252ad2f0a1308c3bee38a86c9577a5ab5920","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import java.util.List;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.BeanParam;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.JobTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n+\n+public interface ExecutableService extends JAXRSService {\n+\n+    /**\n+     * Returns a paged list of executions matching the given query.\n+     *\n+     * @param query query conditions\n+     * @return paged list of executions the given query\n+     */\n+    @GET\n+    @Path(\"{key}/executions\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    PagedResult<ExecTO> listExecutions(@BeanParam ExecQuery query);\n+\n+    /**\n+     * Returns the list of recently completed executions, ordered by end date descendent.\n+     *\n+     * @param max the maximum number of executions to return\n+     * @return list of recently completed executions, ordered by end date descendent\n+     */\n+    @GET\n+    @Path(\"executions/recent\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    List<ExecTO> listRecentExecutions(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);\n+\n+    /**\n+     * Deletes the executable execution matching the provided key.\n+     *\n+     * @param executionKey key of executable execution to be deleted\n+     */\n+    @DELETE\n+    @Path(\"executions/{executionKey}\")\n+    void deleteExecution(@NotNull @PathParam(\"executionKey\") String executionKey);\n+\n+    /**\n+     * Deletes the executions belonging matching the given query.\n+     *\n+     * @param query query conditions\n+     * @return bulk action result\n+     */\n+    @DELETE\n+    @Path(\"{key}/executions\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    BulkActionResult deleteExecutions(@BeanParam BulkExecDeleteQuery query);\n+\n+    /**\n+     * Executes the executable matching the given query.\n+     *\n+     * @param query query conditions\n+     * @return execution report for the executable matching the given query\n+     */\n+    @POST\n+    @Path(\"{key}/execute\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    ExecTO execute(@BeanParam ExecuteQuery query);\n+\n+    /**\n+     * List jobs (running and / or scheduled).\n+     *\n+     * @return jobs (running and / or scheduled)\n+     */\n+    @GET\n+    @Path(\"jobs\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    List<JobTO> listJobs();\n+\n+    /**\n+     * Executes an action on an existing executable's job.\n+     *\n+     * @param key executable key\n+     * @param action action to execute\n+     */\n+    @POST\n+    @Path(\"jobs/{key}\")\n+    void actionJob(@NotNull @PathParam(\"key\") String key, @QueryParam(\"action\") JobAction action);\n+}"},{"sha":"cf796820690516e61f13254172263c00960c4e33","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":1,"deletions":72,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -19,12 +19,9 @@\n package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n-import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n-import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.PUT;\n@@ -34,20 +31,14 @@\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n-import org.apache.syncope.common.lib.to.ExecTO;\n-import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n-import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n-import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n \n /**\n  * REST operations for reports.\n  */\n @Path(\"reports\")\n-public interface ReportService extends JAXRSService {\n+public interface ReportService extends ExecutableService {\n \n     /**\n      * Returns report with matching key.\n@@ -98,48 +89,6 @@ public interface ReportService extends JAXRSService {\n     @Path(\"{key}\")\n     void delete(@NotNull @PathParam(\"key\") String key);\n \n-    /**\n-     * Returns the list of recently completed report executions, ordered by end date descendent.\n-     *\n-     * @param max the maximum number of executions to return\n-     * @return list of recently completed report executions, ordered by end date descendent\n-     */\n-    @GET\n-    @Path(\"executions/recent\")\n-    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    List<ExecTO> listRecentExecutions(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);\n-\n-    /**\n-     * Deletes report execution with matching key.\n-     *\n-     * @param executionKey key of execution report to be deleted\n-     */\n-    @DELETE\n-    @Path(\"executions/{executionKey}\")\n-    void deleteExecution(@NotNull @PathParam(\"executionKey\") String executionKey);\n-\n-    /**\n-     * Deletes the report executions belonging matching the given query.\n-     *\n-     * @param query query conditions\n-     * @return bulk action result\n-     */\n-    @DELETE\n-    @Path(\"{key}/executions\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    BulkActionResult deleteExecutions(@BeanParam BulkExecDeleteQuery query);\n-\n-    /**\n-     * Executes the report matching the given query.\n-     *\n-     * @param query query conditions\n-     * @return execution report for the report matching the given query\n-     */\n-    @POST\n-    @Path(\"{key}/execute\")\n-    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    ExecTO execute(@BeanParam ExecuteQuery query);\n-\n     /**\n      * Exports the report execution with matching key in the requested format.\n      *\n@@ -153,24 +102,4 @@ public interface ReportService extends JAXRSService {\n     Response exportExecutionResult(\n             @NotNull @PathParam(\"executionKey\") String executionKey,\n             @QueryParam(\"format\") ReportExecExportFormat fmt);\n-\n-    /**\n-     * List report jobs (running and / or scheduled).\n-     *\n-     * @return report jobs (running and / or scheduled)\n-     */\n-    @GET\n-    @Path(\"jobs\")\n-    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    List<JobTO> listJobs();\n-\n-    /**\n-     * Executes an action on an existing report's job.\n-     *\n-     * @param key report key\n-     * @param action action to execute\n-     */\n-    @POST\n-    @Path(\"jobs/{key}\")\n-    void actionJob(@NotNull @PathParam(\"key\") String key, @QueryParam(\"action\") JobAction action);\n }"},{"sha":"0d1bf41eed1403eca39a77766ca27b4bd29abf47","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":1,"deletions":82,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n-import java.util.List;\n-import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n@@ -37,21 +35,15 @@\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n-import org.apache.syncope.common.lib.to.ExecTO;\n-import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n-import org.apache.syncope.common.lib.types.JobAction;\n-import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n-import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n \n /**\n  * REST operations for tasks.\n  */\n @Path(\"tasks\")\n-public interface TaskService extends JAXRSService {\n+public interface TaskService extends ExecutableService {\n \n     /**\n      * Returns the task matching the given key.\n@@ -108,59 +100,6 @@ <T extends AbstractTaskTO> T read(\n     @Path(\"{key}\")\n     void delete(@NotNull @PathParam(\"key\") String key);\n \n-    /**\n-     * Returns a paged list of task executions matching the given query.\n-     *\n-     * @param query query conditions\n-     * @return paged list of task executions the given query\n-     */\n-    @GET\n-    @Path(\"{key}/executions\")\n-    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    PagedResult<ExecTO> listExecutions(@BeanParam TaskExecQuery query);\n-\n-    /**\n-     * Returns the list of recently completed task executions, ordered by end date descendent.\n-     *\n-     * @param max the maximum number of executions to return\n-     * @return list of recently completed task executions, ordered by end date descendent\n-     */\n-    @GET\n-    @Path(\"executions/recent\")\n-    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    List<ExecTO> listRecentExecutions(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);\n-\n-    /**\n-     * Deletes the task execution matching the provided key.\n-     *\n-     * @param executionKey key of task execution to be deleted\n-     */\n-    @DELETE\n-    @Path(\"executions/{executionKey}\")\n-    void deleteExecution(@NotNull @PathParam(\"executionKey\") String executionKey);\n-\n-    /**\n-     * Deletes the task executions belonging matching the given query.\n-     *\n-     * @param query query conditions\n-     * @return bulk action result\n-     */\n-    @DELETE\n-    @Path(\"{key}/executions\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    BulkActionResult deleteExecutions(@BeanParam BulkExecDeleteQuery query);\n-\n-    /**\n-     * Executes the task matching the given query.\n-     *\n-     * @param query query conditions\n-     * @return execution report for the task matching the given query\n-     */\n-    @POST\n-    @Path(\"{key}/execute\")\n-    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    ExecTO execute(@BeanParam ExecuteQuery query);\n-\n     /**\n      * Executes the provided bulk action.\n      *\n@@ -172,24 +111,4 @@ <T extends AbstractTaskTO> T read(\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     BulkActionResult bulk(@NotNull BulkAction bulkAction);\n-\n-    /**\n-     * List task jobs (running and / or scheduled).\n-     *\n-     * @return task jobs (running and / or scheduled)\n-     */\n-    @GET\n-    @Path(\"jobs\")\n-    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    List<JobTO> listJobs();\n-\n-    /**\n-     * Executes an action on an existing task's job.\n-     *\n-     * @param key task key\n-     * @param action action to execute\n-     */\n-    @POST\n-    @Path(\"jobs/{key}\")\n-    void actionJob(@NotNull @PathParam(\"key\") String key, @QueryParam(\"action\") JobAction action);\n }"},{"sha":"8a7d677da14aa05551c55c65292b03077a3fe201","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractExecutableLogic.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.Date;\n+import java.util.List;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.JobTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+\n+public abstract class AbstractExecutableLogic<T extends AbstractBaseBean> extends AbstractJobLogic<T> {\n+\n+    public abstract ExecTO execute(String key, Date startAt, boolean dryRun);\n+\n+    public abstract int countExecutions(String key);\n+\n+    public abstract List<ExecTO> listExecutions(String key, int page, int size, List<OrderByClause> orderByClauses);\n+\n+    public abstract List<ExecTO> listRecentExecutions(int max);\n+\n+    public abstract ExecTO deleteExecution(String executionKey);\n+\n+    public abstract BulkActionResult deleteExecutions(\n+            String key, Date startedBefore, Date startedAfter, Date endedBefore, Date endedAfter);\n+\n+    public abstract List<JobTO> listJobs();\n+\n+    public abstract void actionJob(String key, JobAction action);\n+}"},{"sha":"2473f6df22666c2f467adbd43bb7af5548517ee5","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractJobLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -44,7 +44,7 @@\n \n     protected abstract Triple<JobType, String, String> getReference(final JobKey jobKey);\n \n-    protected List<JobTO> listJobs() {\n+    protected List<JobTO> doListJobs() {\n         List<JobTO> jobTOs = new ArrayList<>();\n \n         try {\n@@ -80,7 +80,7 @@ protected List<JobTO> listJobs() {\n         return jobTOs;\n     }\n \n-    protected void actionJob(final JobKey jobKey, final JobAction action) {\n+    protected void doActionJob(final JobKey jobKey, final JobAction action) {\n         try {\n             if (scheduler.getScheduler().checkExists(jobKey)) {\n                 switch (action) {"},{"sha":"aa54c0d47edb89c0d92a6841ca335b9857ac063c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -115,12 +115,13 @@ protected Triple<JobType, String, String> getReference(final JobKey jobKey) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_LIST + \"')\")\n     public JobTO getJob() {\n-        List<JobTO> jobs = super.listJobs();\n+        List<JobTO> jobs = super.doListJobs();\n         return jobs.isEmpty() ? null : jobs.get(0);\n     }\n \n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_EXECUTE + \"')\")\n     public void actionJob(final JobAction action) {\n-        super.actionJob(JobManager.NOTIFICATION_JOB, action);\n+        super.doActionJob(JobManager.NOTIFICATION_JOB, action);\n     }\n \n     @Override"},{"sha":"3fd8ccf15e1e141b38325e1e9e96016930de3514","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":37,"deletions":5,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -62,14 +62,15 @@\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.logic.report.XSLTTransformer;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.xmlgraphics.util.MimeConstants;\n import org.quartz.JobKey;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n \n @Component\n-public class ReportLogic extends AbstractJobLogic<ReportTO> {\n+public class ReportLogic extends AbstractExecutableLogic<ReportTO> {\n \n     @Autowired\n     private ConfDAO confDAO;\n@@ -156,7 +157,8 @@ public ReportTO read(final String key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")\n-    public ExecTO execute(final String key, final Date startAt) {\n+    @Override\n+    public ExecTO execute(final String key, final Date startAt, final boolean dryRun) {\n         Report report = reportDAO.find(key);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + key);\n@@ -297,7 +299,34 @@ public ReportTO delete(final String key) {\n         return deletedReport;\n     }\n \n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n+    @Override\n+    public int countExecutions(final String key) {\n+        return reportExecDAO.count(key);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n+    @Override\n+    public List<ExecTO> listExecutions(\n+            final String key, final int page, final int size, final List<OrderByClause> orderByClauses) {\n+\n+        Report report = reportDAO.find(key);\n+        if (report == null) {\n+            throw new NotFoundException(\"Report \" + key);\n+        }\n+\n+        return CollectionUtils.collect(reportExecDAO.findAll(report, page, size, orderByClauses),\n+                new Transformer<ReportExec, ExecTO>() {\n+\n+            @Override\n+            public ExecTO transform(final ReportExec reportExec) {\n+                return binder.getExecTO(reportExec);\n+            }\n+        }, new ArrayList<ExecTO>());\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n+    @Override\n     public List<ExecTO> listRecentExecutions(final int max) {\n         return CollectionUtils.collect(reportExecDAO.findRecent(max), new Transformer<ReportExec, ExecTO>() {\n \n@@ -309,6 +338,7 @@ public ExecTO transform(final ReportExec reportExec) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_DELETE + \"')\")\n+    @Override\n     public ExecTO deleteExecution(final String executionKey) {\n         ReportExec reportExec = reportExecDAO.find(executionKey);\n         if (reportExec == null) {\n@@ -321,6 +351,7 @@ public ExecTO deleteExecution(final String executionKey) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_DELETE + \"')\")\n+    @Override\n     public BulkActionResult deleteExecutions(\n             final String key,\n             final Date startedBefore, final Date startedAfter, final Date endedBefore, final Date endedAfter) {\n@@ -355,20 +386,21 @@ protected Triple<JobType, String, String> getReference(final JobKey jobKey) {\n                 : Triple.of(JobType.REPORT, key, binder.buildRefDesc(report));\n     }\n \n-    @Override\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n+    @Override\n     public List<JobTO> listJobs() {\n-        return super.listJobs();\n+        return super.doListJobs();\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")\n+    @Override\n     public void actionJob(final String key, final JobAction action) {\n         Report report = reportDAO.find(key);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + key);\n         }\n \n-        actionJob(JobNamer.getJobKey(report), action);\n+        doActionJob(JobNamer.getJobKey(report), action);\n     }\n \n     @Override"},{"sha":"8136e46afd616c0b35d61e8ba18c280343f7cc5b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -65,7 +65,7 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class TaskLogic extends AbstractJobLogic<AbstractTaskTO> {\n+public class TaskLogic extends AbstractExecutableLogic<AbstractTaskTO> {\n \n     @Autowired\n     private TaskDAO taskDAO;\n@@ -191,6 +191,7 @@ public <T extends AbstractTaskTO> T read(final String key, final boolean details\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n+    @Override\n     public ExecTO execute(final String key, final Date startAt, final boolean dryRun) {\n         Task task = taskDAO.find(key);\n         if (task == null) {\n@@ -276,11 +277,13 @@ public <T extends AbstractTaskTO> T delete(final String key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n+    @Override\n     public int countExecutions(final String key) {\n         return taskExecDAO.count(key);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n+    @Override\n     public List<ExecTO> listExecutions(\n             final String key, final int page, final int size, final List<OrderByClause> orderByClauses) {\n \n@@ -300,6 +303,7 @@ public ExecTO transform(final TaskExec taskExec) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n+    @Override\n     public List<ExecTO> listRecentExecutions(final int max) {\n         return CollectionUtils.collect(taskExecDAO.findRecent(max), new Transformer<TaskExec, ExecTO>() {\n \n@@ -311,6 +315,7 @@ public ExecTO transform(final TaskExec taskExec) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n+    @Override\n     public ExecTO deleteExecution(final String execKey) {\n         TaskExec taskExec = taskExecDAO.find(execKey);\n         if (taskExec == null) {\n@@ -323,6 +328,7 @@ public ExecTO deleteExecution(final String execKey) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n+    @Override\n     public BulkActionResult deleteExecutions(\n             final String key,\n             final Date startedBefore, final Date startedAfter, final Date endedBefore, final Date endedAfter) {\n@@ -357,20 +363,21 @@ protected Triple<JobType, String, String> getReference(final JobKey jobKey) {\n                 : Triple.of(JobType.TASK, key, binder.buildRefDesc(task));\n     }\n \n-    @Override\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n+    @Override\n     public List<JobTO> listJobs() {\n-        return super.listJobs();\n+        return super.doListJobs();\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n+    @Override\n     public void actionJob(final String key, final JobAction action) {\n         Task task = taskDAO.find(key);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + key);\n         }\n \n-        actionJob(JobNamer.getJobKey(task), action);\n+        doActionJob(JobNamer.getJobKey(task), action);\n     }\n \n     @Override"},{"sha":"61c7cfcfed3a4ed5d8a806f08598de3319c7f7ff","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ReportExecDAO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Date;\n import java.util.List;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n \n@@ -33,6 +34,10 @@ public interface ReportExecDAO extends DAO<ReportExec> {\n \n     ReportExec findLatestEnded(Report report);\n \n+    int count(String reportKey);\n+\n+    List<ReportExec> findAll(Report report, int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n+\n     List<ReportExec> findAll(Report report, Date startedBefore, Date startedAfter, Date endedBefore, Date endedAfter);\n \n     ReportExec save(ReportExec execution);"},{"sha":"e90cc8d25b3e7a721ee756a229c70a8489097862","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskExecDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -34,13 +34,13 @@ public interface TaskExecDAO extends DAO<TaskExec> {\n \n     <T extends Task> TaskExec findLatestEnded(T task);\n \n-    <T extends Task> List<TaskExec> findAll(\n-            T task, Date startedBefore, Date startedAfter, Date endedBefore, Date endedAfter);\n-\n     int count(String taskKey);\n \n     <T extends Task> List<TaskExec> findAll(T task, int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n \n+    <T extends Task> List<TaskExec> findAll(\n+            T task, Date startedBefore, Date startedAfter, Date endedBefore, Date endedAfter);\n+\n     TaskExec save(TaskExec execution);\n \n     void saveAndAdd(String taskKey, TaskExec execution);"},{"sha":"de8f5ec6ddb9a8ff0ebe16a06dd7abd53356ce60","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java","status":"modified","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -20,13 +20,16 @@\n \n import java.util.Date;\n import java.util.List;\n+import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.persistence.jpa.entity.JPAReportExec;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.ReflectionUtils;\n \n @Repository\n public class JPAReportExecDAO extends AbstractDAO<ReportExec> implements ReportExecDAO {\n@@ -69,6 +72,54 @@ public ReportExec findLatestEnded(final Report report) {\n         return findLatest(report, \"end\");\n     }\n \n+    @Override\n+    public int count(final String reportKey) {\n+        Query countQuery = entityManager().createNativeQuery(\n+                \"SELECT COUNT(e.id) FROM \" + JPAReportExec.TABLE + \" e WHERE e.report_id=?1\");\n+        countQuery.setParameter(1, reportKey);\n+\n+        return ((Number) countQuery.getSingleResult()).intValue();\n+    }\n+\n+    private String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n+        StringBuilder statement = new StringBuilder();\n+\n+        for (OrderByClause clause : orderByClauses) {\n+            String field = clause.getField().trim();\n+            if (ReflectionUtils.findField(JPAReportExec.class, field) != null) {\n+                statement.append(\"e.\").append(field).append(' ').append(clause.getDirection().name());\n+            }\n+        }\n+\n+        if (statement.length() == 0) {\n+            statement.append(\"ORDER BY e.id DESC\");\n+        } else {\n+            statement.insert(0, \"ORDER BY \");\n+        }\n+        return statement.toString();\n+    }\n+\n+    @Override\n+    public List<ReportExec> findAll(final Report report,\n+            final int page, final int itemsPerPage, final List<OrderByClause> orderByClauses) {\n+\n+        String queryString =\n+                \"SELECT e FROM \" + JPAReportExec.class.getSimpleName() + \" e WHERE e.report=:report \"\n+                + toOrderByStatement(orderByClauses);\n+\n+        TypedQuery<ReportExec> query = entityManager().createQuery(queryString, ReportExec.class);\n+        query.setParameter(\"report\", report);\n+\n+        // page starts from 1, while setFirtResult() starts from 0\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+\n+        if (itemsPerPage >= 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public List<ReportExec> findAll(\n             final Report report,"},{"sha":"c6a191739b78069f8060d9b783a989a17ac2f4fe","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.JobTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n+import org.apache.syncope.common.rest.api.service.ExecutableService;\n+import org.apache.syncope.core.logic.AbstractExecutableLogic;\n+\n+public abstract class AbstractExecutableService extends AbstractServiceImpl implements ExecutableService {\n+\n+    protected abstract AbstractExecutableLogic<?> getExecutableLogic();\n+\n+    @Override\n+    public PagedResult<ExecTO> listExecutions(final ExecQuery query) {\n+        return buildPagedResult(\n+                getExecutableLogic().listExecutions(\n+                        query.getKey(),\n+                        query.getPage(),\n+                        query.getSize(),\n+                        getOrderByClauses(query.getOrderBy())),\n+                query.getPage(),\n+                query.getSize(),\n+                getExecutableLogic().countExecutions(query.getKey()));\n+    }\n+\n+    @Override\n+    public List<ExecTO> listRecentExecutions(final int max) {\n+        return getExecutableLogic().listRecentExecutions(max);\n+    }\n+\n+    @Override\n+    public void deleteExecution(final String executionKey) {\n+        getExecutableLogic().deleteExecution(executionKey);\n+    }\n+\n+    @Override\n+    public BulkActionResult deleteExecutions(final BulkExecDeleteQuery query) {\n+        return getExecutableLogic().deleteExecutions(\n+                query.getKey(),\n+                query.getStartedBefore(),\n+                query.getStartedAfter(),\n+                query.getEndedBefore(),\n+                query.getEndedAfter());\n+    }\n+\n+    @Override\n+    public ExecTO execute(final ExecuteQuery query) {\n+        return getExecutableLogic().execute(query.getKey(), query.getStartAt(), query.getDryRun());\n+    }\n+\n+    @Override\n+    public List<JobTO> listJobs() {\n+        return getExecutableLogic().listJobs();\n+    }\n+\n+    @Override\n+    public void actionJob(final String key, final JobAction action) {\n+        getExecutableLogic().actionJob(key, action);\n+    }\n+\n+}"},{"sha":"0826b99a6b8a478f35f8fec34fa44ff2f52c7f60","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":7,"deletions":42,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -25,27 +25,27 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n-import org.apache.syncope.common.lib.to.JobTO;\n-import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n-import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.service.ReportService;\n+import org.apache.syncope.core.logic.AbstractExecutableLogic;\n import org.apache.syncope.core.logic.ReportLogic;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class ReportServiceImpl extends AbstractServiceImpl implements ReportService {\n+public class ReportServiceImpl extends AbstractExecutableService implements ReportService {\n \n     @Autowired\n     private ReportLogic logic;\n \n+    @Override\n+    protected AbstractExecutableLogic<?> getExecutableLogic() {\n+        return logic;\n+    }\n+\n     @Override\n     public Response create(final ReportTO reportTO) {\n         ReportTO createdReportTO = logic.create(reportTO);\n@@ -87,43 +87,8 @@ public void write(final OutputStream os) throws IOException {\n                 build();\n     }\n \n-    @Override\n-    public ExecTO execute(final ExecuteQuery query) {\n-        return logic.execute(query.getKey(), query.getStartAt());\n-    }\n-\n     @Override\n     public void delete(final String key) {\n         logic.delete(key);\n     }\n-\n-    @Override\n-    public List<ExecTO> listRecentExecutions(final int size) {\n-        return logic.listRecentExecutions(size);\n-    }\n-\n-    @Override\n-    public void deleteExecution(final String executionKey) {\n-        logic.deleteExecution(executionKey);\n-    }\n-\n-    @Override\n-    public BulkActionResult deleteExecutions(final BulkExecDeleteQuery query) {\n-        return logic.deleteExecutions(\n-                query.getKey(),\n-                query.getStartedBefore(),\n-                query.getStartedAfter(),\n-                query.getEndedBefore(),\n-                query.getEndedAfter());\n-    }\n-\n-    @Override\n-    public List<JobTO> listJobs() {\n-        return logic.listJobs();\n-    }\n-\n-    @Override\n-    public void actionJob(final String key, final JobAction action) {\n-        logic.actionJob(key, action);\n-    }\n }"},{"sha":"16ba72ad4237e9f2508fe2a305d542a10c2e0401","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":7,"deletions":56,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -19,35 +19,34 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.net.URI;\n-import java.util.List;\n import javax.ws.rs.BadRequestException;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n-import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n-import org.apache.syncope.common.lib.to.ExecTO;\n-import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n-import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.syncope.core.logic.AbstractExecutableLogic;\n import org.apache.syncope.core.logic.TaskLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class TaskServiceImpl extends AbstractServiceImpl implements TaskService {\n+public class TaskServiceImpl extends AbstractExecutableService implements TaskService {\n \n     @Autowired\n     private TaskLogic logic;\n \n+    @Override\n+    protected AbstractExecutableLogic<?> getExecutableLogic() {\n+        return logic;\n+    }\n+\n     @Override\n     public Response create(final SchedTaskTO taskTO) {\n         SchedTaskTO createdTask;\n@@ -68,11 +67,6 @@ public void delete(final String key) {\n         logic.delete(key);\n     }\n \n-    @Override\n-    public ExecTO execute(final ExecuteQuery query) {\n-        return logic.execute(query.getKey(), query.getStartAt(), query.getDryRun());\n-    }\n-\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractTaskTO> PagedResult<T> list(final TaskQuery query) {\n@@ -111,39 +105,6 @@ public void update(final AbstractTaskTO taskTO) {\n         }\n     }\n \n-    @Override\n-    public PagedResult<ExecTO> listExecutions(final TaskExecQuery query) {\n-        return buildPagedResult(\n-                logic.listExecutions(\n-                        query.getKey(),\n-                        query.getPage(),\n-                        query.getSize(),\n-                        getOrderByClauses(query.getOrderBy())),\n-                query.getPage(),\n-                query.getSize(),\n-                logic.countExecutions(query.getKey()));\n-    }\n-\n-    @Override\n-    public List<ExecTO> listRecentExecutions(final int max) {\n-        return logic.listRecentExecutions(max);\n-    }\n-\n-    @Override\n-    public void deleteExecution(final String executionKey) {\n-        logic.deleteExecution(executionKey);\n-    }\n-\n-    @Override\n-    public BulkActionResult deleteExecutions(final BulkExecDeleteQuery query) {\n-        return logic.deleteExecutions(\n-                query.getKey(),\n-                query.getStartedBefore(),\n-                query.getStartedAfter(),\n-                query.getEndedBefore(),\n-                query.getEndedAfter());\n-    }\n-\n     @Override\n     public BulkActionResult bulk(final BulkAction bulkAction) {\n         BulkActionResult result = new BulkActionResult();\n@@ -189,14 +150,4 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n \n         return result;\n     }\n-\n-    @Override\n-    public List<JobTO> listJobs() {\n-        return logic.listJobs();\n-    }\n-\n-    @Override\n-    public void actionJob(final String key, final JobAction action) {\n-        logic.actionJob(key, action);\n-    }\n }"},{"sha":"4008a08d4c6705ffda0047c62608e31d190facbc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n-import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -142,8 +142,7 @@ public void issueSYNCOPE741() {\n         assertFalse(task.getExecutions().isEmpty());\n \n         // check list executions\n-        PagedResult<ExecTO> execs = taskService.listExecutions(\n-                new TaskExecQuery.Builder().key(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\").\n+        PagedResult<ExecTO> execs = taskService.listExecutions(new ExecQuery.Builder().key(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\").\n                 page(1).size(2).build());\n         assertTrue(execs.getTotalCount() >= execs.getResult().size());\n     }"},{"sha":"fcaf479e12818dabf3926d841ed73456de1ca3e5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e87e4102dac8b64954cbe1402cf462fd84a7e7a4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=e87e4102dac8b64954cbe1402cf462fd84a7e7a4","patch":"@@ -42,7 +42,7 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n-import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.fit.core.reference.TestSampleJobDelegate;\n@@ -124,7 +124,7 @@ public void deferred() {\n         } while (task.getExecutions().isEmpty() && i < maxit);\n \n         PagedResult<ExecTO> execs =\n-                taskService.listExecutions(new TaskExecQuery.Builder().key(task.getKey()).build());\n+                taskService.listExecutions(new ExecQuery.Builder().key(task.getKey()).build());\n         assertEquals(1, execs.getTotalCount());\n         assertTrue(execs.getResult().get(0).getStart().after(initial));\n         // round 1 sec for safety"}]}