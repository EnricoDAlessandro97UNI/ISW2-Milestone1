{"sha":"101b10711c5a37b4cea4fb615dc056cbe0f6d583","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjEwMWIxMDcxMWM1YTM3YjRjZWE0ZmI2MTVkYzA1NmNiZTBmNmQ1ODM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-07T11:07:02Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-07T11:07:02Z"},"message":"More replacements thanks to commons-collections","tree":{"sha":"17f310aadd0078ffc815934da8ae695fd5d29be1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/17f310aadd0078ffc815934da8ae695fd5d29be1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/101b10711c5a37b4cea4fb615dc056cbe0f6d583","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/101b10711c5a37b4cea4fb615dc056cbe0f6d583","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/101b10711c5a37b4cea4fb615dc056cbe0f6d583","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/101b10711c5a37b4cea4fb615dc056cbe0f6d583/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"678e968cb9cfb5f11cbfbea0d17ed5d70dbde0b6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/678e968cb9cfb5f11cbfbea0d17ed5d70dbde0b6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/678e968cb9cfb5f11cbfbea0d17ed5d70dbde0b6"}],"stats":{"total":176,"additions":88,"deletions":88},"files":[{"sha":"cbc858dc87d235f445b4b880a54faeee8431f2a0","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractSubjectTO.java","status":"modified","additions":0,"deletions":15,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/101b10711c5a37b4cea4fb615dc056cbe0f6d583/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSubjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/101b10711c5a37b4cea4fb615dc056cbe0f6d583/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSubjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSubjectTO.java?ref=101b10711c5a37b4cea4fb615dc056cbe0f6d583","patch":"@@ -26,8 +26,6 @@\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n \n @XmlType\n public abstract class AbstractSubjectTO extends AbstractAttributableTO {\n@@ -45,19 +43,6 @@ public Set<String> getResources() {\n         return resources;\n     }\n \n-    public boolean removePropagationTO(final String resource) {\n-        if (resource != null && getPropagationStatusTOs().isEmpty()) {\n-            return CollectionUtils.filterInverse(propagationStatusTOs, new Predicate<PropagationStatus>() {\n-\n-                @Override\n-                public boolean evaluate(final PropagationStatus propagationStatus) {\n-                    return resource.equals(propagationStatus.getResource());\n-                }\n-            });\n-        }\n-        return false;\n-    }\n-\n     @XmlElementWrapper(name = \"propagationStatuses\")\n     @XmlElement(name = \"propagationStatus\")\n     @JsonProperty(\"propagationStatuses\")"},{"sha":"e148b0462273658368da34e5e3f47c0c89ebe22a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConnInstanceDAO.java","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/101b10711c5a37b4cea4fb615dc056cbe0f6d583/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/101b10711c5a37b4cea4fb615dc056cbe0f6d583/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java?ref=101b10711c5a37b4cea4fb615dc056cbe0f6d583","patch":"@@ -18,10 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n import javax.persistence.TypedQuery;\n+import org.apache.commons.collections4.Closure;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -75,13 +76,15 @@ public void delete(final Long key) {\n             return;\n         }\n \n-        Set<String> resourceNames = new HashSet<>(connInstance.getResources().size());\n-        for (ExternalResource resource : connInstance.getResources()) {\n-            resourceNames.add(resource.getKey());\n-        }\n-        for (String resourceName : resourceNames) {\n-            resourceDAO.delete(resourceName);\n-        }\n+        CollectionUtils.forAllDo(new CopyOnWriteArrayList<>(connInstance.getResources()),\n+                new Closure<ExternalResource>() {\n+\n+                    @Override\n+                    public void execute(final ExternalResource input) {\n+                        resourceDAO.delete(input.getKey());\n+                    }\n+\n+                });\n \n         entityManager.remove(connInstance);\n "},{"sha":"18f7e68465d64a7a6d2da93caeed0c8ceedaff33","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":19,"deletions":15,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/101b10711c5a37b4cea4fb615dc056cbe0f6d583/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/101b10711c5a37b4cea4fb615dc056cbe0f6d583/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=101b10711c5a37b4cea4fb615dc056cbe0f6d583","patch":"@@ -18,11 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.HashSet;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.TypedQuery;\n+import org.apache.commons.collections4.Closure;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.core.persistence.api.dao.AttrTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n@@ -108,21 +107,26 @@ public void delete(final String key, final AttributableUtil attributableUtil) {\n             return;\n         }\n \n-        final Set<Long> attrIds = new HashSet<>();\n-        for (DerAttr attr : findAttrs(schema, attributableUtil.derAttrClass())) {\n-            attrIds.add(attr.getKey());\n-        }\n-        for (Long attrId : attrIds) {\n-            derAttrDAO.delete(attrId, attributableUtil.derAttrClass());\n-        }\n+        CollectionUtils.forAllDo(findAttrs(schema, attributableUtil.derAttrClass()), new Closure<DerAttr>() {\n+\n+            @Override\n+            public void execute(final DerAttr input) {\n+                derAttrDAO.delete(input.getKey(), attributableUtil.derAttrClass());\n+            }\n+\n+        });\n \n         if (attributableUtil.getType() != AttributableType.USER) {\n-            for (Iterator<Number> it = attrTemplateDAO.\n-                    findBySchemaName(schema.getKey(), attributableUtil.derAttrTemplateClass()).iterator();\n-                    it.hasNext();) {\n+            CollectionUtils.forAllDo(attrTemplateDAO.\n+                    findBySchemaName(schema.getKey(), attributableUtil.derAttrTemplateClass()).iterator(),\n+                    new Closure<Number>() {\n \n-                attrTemplateDAO.delete(it.next().longValue(), attributableUtil.derAttrTemplateClass());\n-            }\n+                        @Override\n+                        public void execute(final Number input) {\n+                            attrTemplateDAO.delete(input.longValue(), attributableUtil.derAttrTemplateClass());\n+                        }\n+\n+                    });\n         }\n \n         resourceDAO.deleteMapping(key, attributableUtil.derIntMappingType(), UMappingItem.class);"},{"sha":"9f79e49b8596a32b7993094e584f4d5c87330103","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/101b10711c5a37b4cea4fb615dc056cbe0f6d583/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/101b10711c5a37b4cea4fb615dc056cbe0f6d583/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=101b10711c5a37b4cea4fb615dc056cbe0f6d583","patch":"@@ -102,7 +102,8 @@ protected Subject<GPlainAttr, GDerAttr, GVirAttr> findInternal(final Long key) {\n \n     @Override\n     public Group find(final Long key) {\n-        TypedQuery<Group> query = entityManager.createQuery(\"SELECT e FROM \" + JPAGroup.class.getSimpleName() + \" e WHERE e.id = :id\", Group.class);\n+        TypedQuery<Group> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAGroup.class.getSimpleName() + \" e WHERE e.id = :id\", Group.class);\n         query.setParameter(\"id\", key);\n \n         Group result = null;\n@@ -117,7 +118,8 @@ public Group find(final Long key) {\n \n     @Override\n     public List<Group> find(final String name) {\n-        TypedQuery<Group> query = entityManager.createQuery(\"SELECT e FROM \" + JPAGroup.class.getSimpleName() + \" e WHERE e.name = :name\", Group.class);\n+        TypedQuery<Group> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAGroup.class.getSimpleName() + \" e WHERE e.name = :name\", Group.class);\n         query.setParameter(\"name\", name);\n \n         return query.getResultList();\n@@ -196,7 +198,7 @@ public List<Group> findOwnedByGroup(final Long groupId) {\n         TypedQuery<Group> query = entityManager.createQuery(queryString.toString(), Group.class);\n         query.setParameter(\"owner\", owner);\n \n-        List<Group> result = new ArrayList<Group>();\n+        List<Group> result = new ArrayList<>();\n         for (Group group : query.getResultList()) {\n             findSameOwnerDescendants(result, group);\n         }"},{"sha":"9b3ae5b9654f7824ee11c6bb32bb7c04a5696308","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":21,"deletions":17,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/101b10711c5a37b4cea4fb615dc056cbe0f6d583/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/101b10711c5a37b4cea4fb615dc056cbe0f6d583/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=101b10711c5a37b4cea4fb615dc056cbe0f6d583","patch":"@@ -18,11 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.HashSet;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.TypedQuery;\n+import org.apache.commons.collections4.Closure;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.core.persistence.api.dao.AttrTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -51,7 +50,7 @@\n public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema, String> implements PlainSchemaDAO {\n \n     @Autowired\n-    private PlainAttrDAO attrDAO;\n+    private PlainAttrDAO plainAttrDAO;\n \n     @Autowired\n     private AttrTemplateDAO<PlainSchema> attrTemplateDAO;\n@@ -88,7 +87,7 @@ public <T extends PlainSchema> List<T> findAll(final Class<T> reference) {\n     @Override\n     public <T extends PlainAttr> List<T> findAttrs(final PlainSchema schema, final Class<T> reference) {\n         final StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n-                append(((JPAPlainAttrDAO) attrDAO).getJPAEntityReference(reference).getSimpleName()).\n+                append(((JPAPlainAttrDAO) plainAttrDAO).getJPAEntityReference(reference).getSimpleName()).\n                 append(\" e WHERE e.\");\n         if (GPlainAttr.class.isAssignableFrom(reference) || MPlainAttr.class.isAssignableFrom(reference)) {\n             queryString.append(\"template.\");\n@@ -114,23 +113,28 @@ public void delete(final String key, final AttributableUtil attributableUtil) {\n             return;\n         }\n \n-        final Set<Long> attrIds = new HashSet<>();\n-        for (PlainAttr attr : findAttrs(schema, attributableUtil.plainAttrClass())) {\n-            attrIds.add(attr.getKey());\n-        }\n-        for (Long attrId : attrIds) {\n-            attrDAO.delete(attrId, attributableUtil.plainAttrClass());\n-        }\n+        CollectionUtils.forAllDo(findAttrs(schema, attributableUtil.plainAttrClass()), new Closure<PlainAttr>() {\n+\n+            @Override\n+            public void execute(final PlainAttr input) {\n+                plainAttrDAO.delete(input.getKey(), attributableUtil.plainAttrClass());\n+            }\n+\n+        });\n \n         if (attributableUtil.getType() == AttributableType.GROUP\n                 || attributableUtil.getType() == AttributableType.MEMBERSHIP) {\n \n-            for (Iterator<Number> it = attrTemplateDAO.\n-                    findBySchemaName(schema.getKey(), attributableUtil.plainAttrTemplateClass()).iterator();\n-                    it.hasNext();) {\n+            CollectionUtils.forAllDo(attrTemplateDAO.\n+                    findBySchemaName(schema.getKey(), attributableUtil.plainAttrTemplateClass()).iterator(),\n+                    new Closure<Number>() {\n \n-                attrTemplateDAO.delete(it.next().longValue(), attributableUtil.plainAttrTemplateClass());\n-            }\n+                        @Override\n+                        public void execute(final Number input) {\n+                            attrTemplateDAO.delete(input.longValue(), attributableUtil.plainAttrTemplateClass());\n+                        }\n+\n+                    });\n         }\n \n         resourceDAO.deleteMapping(key, attributableUtil.plainIntMappingType(), UMappingItem.class);"},{"sha":"db0d6f2b32fe977e20e90897dcdb9d6ce5c28ed6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/101b10711c5a37b4cea4fb615dc056cbe0f6d583/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/101b10711c5a37b4cea4fb615dc056cbe0f6d583/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=101b10711c5a37b4cea4fb615dc056cbe0f6d583","patch":"@@ -18,10 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import javax.persistence.Query;\n+import org.apache.commons.collections4.Closure;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -171,15 +172,13 @@ public void delete(final Task task) {\n \n     @Override\n     public void deleteAll(final ExternalResource resource, final TaskType type) {\n-        List<Task> tasks = findAll(resource, type);\n-        if (tasks != null) {\n-            List<Long> taskIds = new ArrayList<>(tasks.size());\n-            for (Task task : tasks) {\n-                taskIds.add(task.getKey());\n-            }\n-            for (Long taskId : taskIds) {\n-                delete(taskId);\n+        CollectionUtils.forAllDo(findAll(resource, type), new Closure<Task>() {\n+\n+            @Override\n+            public void execute(final Task input) {\n+                delete(input.getKey());\n             }\n-        }\n+\n+        });\n     }\n }"},{"sha":"873e0c3c6ad3ea6fedcfec01222b57fa541d4753","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":22,"deletions":18,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/101b10711c5a37b4cea4fb615dc056cbe0f6d583/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/101b10711c5a37b4cea4fb615dc056cbe0f6d583/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=101b10711c5a37b4cea4fb615dc056cbe0f6d583","patch":"@@ -18,11 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.HashSet;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.TypedQuery;\n+import org.apache.commons.collections4.Closure;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.core.persistence.api.dao.AttrTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -101,30 +100,35 @@ public <T extends VirSchema> T save(final T virSchema) {\n     }\n \n     @Override\n-    public void delete(final String name, final AttributableUtil attributableUtil) {\n-        final VirSchema schema = find(name, attributableUtil.virSchemaClass());\n+    public void delete(final String key, final AttributableUtil attributableUtil) {\n+        final VirSchema schema = find(key, attributableUtil.virSchemaClass());\n         if (schema == null) {\n             return;\n         }\n \n-        final Set<Long> attrIds = new HashSet<>();\n-        for (VirAttr attr : findAttrs(schema, attributableUtil.virAttrClass())) {\n-            attrIds.add(attr.getKey());\n-        }\n-        for (Long attrId : attrIds) {\n-            virAttrDAO.delete(attrId, attributableUtil.virAttrClass());\n-        }\n+        CollectionUtils.forAllDo(findAttrs(schema, attributableUtil.virAttrClass()), new Closure<VirAttr>() {\n+\n+            @Override\n+            public void execute(final VirAttr input) {\n+                virAttrDAO.delete(input.getKey(), attributableUtil.virAttrClass());\n+            }\n+\n+        });\n \n         if (attributableUtil.getType() != AttributableType.USER) {\n-            for (Iterator<Number> it = attrTemplateDAO.\n-                    findBySchemaName(schema.getKey(), attributableUtil.virAttrTemplateClass()).iterator();\n-                    it.hasNext();) {\n+            CollectionUtils.forAllDo(attrTemplateDAO.\n+                    findBySchemaName(schema.getKey(), attributableUtil.virAttrTemplateClass()).iterator(),\n+                    new Closure<Number>() {\n \n-                attrTemplateDAO.delete(it.next().longValue(), attributableUtil.virAttrTemplateClass());\n-            }\n+                        @Override\n+                        public void execute(final Number input) {\n+                            attrTemplateDAO.delete(input.longValue(), attributableUtil.virAttrTemplateClass());\n+                        }\n+\n+                    });\n         }\n \n-        resourceDAO.deleteMapping(name, attributableUtil.virIntMappingType(), UMappingItem.class);\n+        resourceDAO.deleteMapping(key, attributableUtil.virIntMappingType(), UMappingItem.class);\n \n         entityManager.remove(schema);\n     }"},{"sha":"8823a19482d8089153a07690dd3c01c77be9aed1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/101b10711c5a37b4cea4fb615dc056cbe0f6d583/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/101b10711c5a37b4cea4fb615dc056cbe0f6d583/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=101b10711c5a37b4cea4fb615dc056cbe0f6d583","patch":"@@ -211,7 +211,6 @@ private MappingItem getMappingItem(final MappingItemTO itemTO, final MappingItem\n \n             SyncopeClientException invalidMandatoryCondition = SyncopeClientException.build(\n                     ClientExceptionType.InvalidValues);\n-\n             invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n \n             scce.addException(invalidMandatoryCondition);"}]}