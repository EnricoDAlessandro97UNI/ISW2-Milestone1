{"sha":"0edb2a245fbd06f06f841e4fc0b0df34d132d892","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBlZGIyYTI0NWZiZDA2ZjA2Zjg0MWU0ZmMwYjBkZjM0ZDEzMmQ4OTI=","commit":{"author":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2015-01-08T10:17:49Z"},"committer":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2015-01-08T10:17:49Z"},"message":"[SYNCOPE-627] Separating route management","tree":{"sha":"ff10ee610611856ddc803ffc6bc333a050d7aeec","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ff10ee610611856ddc803ffc6bc333a050d7aeec"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0edb2a245fbd06f06f841e4fc0b0df34d132d892","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0edb2a245fbd06f06f841e4fc0b0df34d132d892","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0edb2a245fbd06f06f841e4fc0b0df34d132d892","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0edb2a245fbd06f06f841e4fc0b0df34d132d892/comments","author":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"committer":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"parents":[{"sha":"184b89f8d84095f51b5d48292fbd70350a3a8ec1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/184b89f8d84095f51b5d48292fbd70350a3a8ec1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/184b89f8d84095f51b5d48292fbd70350a3a8ec1"}],"stats":{"total":266,"additions":194,"deletions":72},"files":[{"sha":"2082fc5505027d3c0bfb930926cb33062a645c5d","filename":"common/src/main/java/org/apache/syncope/common/services/RouteService.java","status":"modified","additions":17,"deletions":6,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0edb2a245fbd06f06f841e4fc0b0df34d132d892/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRouteService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0edb2a245fbd06f06f841e4fc0b0df34d132d892/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRouteService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRouteService.java?ref=0edb2a245fbd06f06f841e4fc0b0df34d132d892","patch":"@@ -32,34 +32,45 @@\n import org.apache.syncope.common.to.RouteTO;\n import org.apache.syncope.common.types.SubjectType;\n \n-@Path(\"routes/{kind}\")\n+@Path(\"routes/{subject}\")\n public interface RouteService extends JAXRSService {\n \n     /**\n      * Checks whether Camel is choosed as default provisioning engine.\n      *\n-     * @param kind user or role\n+     * @param subject user or role\n      * @return <tt>Response</tt> contains special syncope HTTP header indicating if Camel is enabled for\n      * users / roles provisioning\n      * @see org.apache.syncope.common.types.RESTHeaders#CAMEL_USER_PROVISIONING_MANAGER\n      * @see org.apache.syncope.common.types.RESTHeaders#CAMEL_ROLE_PROVISIONING_MANAGER\n      *\n      */\n     @OPTIONS\n-    Response getOptions(@NotNull @PathParam(\"kind\") SubjectType kind);\n+    Response getOptions(@NotNull @PathParam(\"subject\") SubjectType subject);\n \n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<RouteTO> getRoutes(@NotNull @PathParam(\"kind\") SubjectType kind);\n+    List<RouteTO> getRoutes(@NotNull @PathParam(\"subject\") SubjectType subject);\n \n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Path(\"{id}\")\n-    public RouteTO getRoute(@NotNull @PathParam(\"kind\") SubjectType kind, @PathParam(\"id\") Long Id);\n+    public RouteTO getRoute(@NotNull @PathParam(\"subject\") SubjectType subject, @PathParam(\"id\") Long Id);\n+    \n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Path(\"{id}\")\n+    public RouteTO getRoute(@PathParam(\"id\") Long Id);\n \n     @PUT\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Path(\"{id}\")\n-    void importRoute(@NotNull @PathParam(\"kind\") SubjectType kind,@PathParam(\"id\") Long id, RouteTO route);\n+    void importRoute(@NotNull @PathParam(\"subject\") SubjectType subject,@PathParam(\"id\") Long id, RouteTO route);\n+    \n+    @PUT\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Path(\"{id}\")\n+    void importRoute(@PathParam(\"id\") Long id, RouteTO route);\n+\n \n }"},{"sha":"0f97ff5c99c4bae875f0017c292301a28ac20043","filename":"console/src/main/java/org/apache/syncope/console/pages/Configuration.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0edb2a245fbd06f06f841e4fc0b0df34d132d892/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0edb2a245fbd06f06f841e4fc0b0df34d132d892/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=0edb2a245fbd06f06f841e4fc0b0df34d132d892","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.console.commons.AttrLayoutType;\n import org.apache.syncope.common.types.LoggerLevel;\n import org.apache.syncope.common.types.PolicyType;\n+import org.apache.syncope.common.types.SubjectType;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.HttpResourceStream;\n import org.apache.syncope.console.commons.PreferenceManager;\n@@ -52,7 +53,6 @@\n import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.syncope.console.wicket.markup.html.link.VeilPopupSettings;\n-import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n@@ -860,7 +860,8 @@ public RouteProvider() {\n \n         @Override\n         public Iterator<? extends RouteTO> iterator(long first, long count) {\n-            List<RouteTO> list =  routeRestClient.readRoutes();\n+            List<RouteTO> list =  routeRestClient.readRoutes(SubjectType.USER);\n+            list.addAll(routeRestClient.readRoutes(SubjectType.ROLE));\n \n             Collections.sort(list, comparator);\n \n@@ -869,7 +870,8 @@ public Iterator<? extends RouteTO> iterator(long first, long count) {\n \n         @Override\n         public long size() {\n-            return routeRestClient.readRoutes().size();\n+            return (routeRestClient.readRoutes(SubjectType.USER).size() + \n+                    routeRestClient.readRoutes(SubjectType.ROLE).size());\n         }\n \n         @Override"},{"sha":"422b4ee4978db0388cb7cf2c0380761b7b04eced","filename":"console/src/main/java/org/apache/syncope/console/rest/RouteRestClient.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0edb2a245fbd06f06f841e4fc0b0df34d132d892/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRouteRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0edb2a245fbd06f06f841e4fc0b0df34d132d892/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRouteRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRouteRestClient.java?ref=0edb2a245fbd06f06f841e4fc0b0df34d132d892","patch":"@@ -33,18 +33,18 @@ public class RouteRestClient extends BaseRestClient{\n     \n     protected static final Logger LOG = LoggerFactory.getLogger(RouteRestClient.class);\n     \n-    public List<RouteTO> readRoutes(){\n-        return getService(RouteService.class).getRoutes(SubjectType.USER);\n+    public List<RouteTO> readRoutes(final SubjectType subject){\n+        return getService(RouteService.class).getRoutes(subject);\n     }\n     \n     public RouteTO readRoute(Long id){\n-        return getService(RouteService.class).getRoute(SubjectType.USER, id);\n+        return getService(RouteService.class).getRoute(id);\n     }\n     \n     public void updateRoute(Long id, String definition){\n         RouteTO routeTO = readRoute(id);        \n         routeTO.setRouteContent(definition);     \n-        getService(RouteService.class).importRoute(SubjectType.USER, routeTO.getId(), routeTO);\n+        getService(RouteService.class).importRoute(routeTO.getId(), routeTO);\n     }\n     \n     public boolean isCamelEnabledForUsers() {"},{"sha":"a293da4a62a29f1471210df85f1a54a8a394726f","filename":"core/src/main/java/org/apache/syncope/core/init/CamelRouteLoader.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FCamelRouteLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FCamelRouteLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FCamelRouteLoader.java?ref=0edb2a245fbd06f06f841e4fc0b0df34d132d892","patch":"@@ -21,7 +21,6 @@\n import java.io.File;\n import java.io.StringWriter;\n import java.net.URL;\n-import javax.sql.DataSource;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.transform.OutputKeys;\n@@ -30,13 +29,13 @@\n import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n+import org.apache.syncope.common.types.SubjectType;\n import org.apache.syncope.core.persistence.beans.CamelRoute;\n import org.apache.syncope.core.persistence.dao.RouteDAO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.dao.DataAccessException;\n-import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.w3c.dom.Document;\n@@ -51,45 +50,46 @@ public class CamelRouteLoader {\n \n     @Autowired\n     private RouteDAO routeDAO;\n-\n-    @Autowired\n-    private DataSource dataSource;\n+    \n+    private int size = 0;\n \n     @Transactional\n     public void load() {\n+        loadRoutes(\"/userRoute.xml\", SubjectType.USER);\n+        loadRoutes(\"/roleRoute.xml\", SubjectType.ROLE);\n+    }\n+    \n+    public void loadRoutes(String path, SubjectType subject) {\n \n-        //if(routeDAO.findAll().isEmpty()){\n-        URL url = getClass().getResource(\"/camelRoute.xml\");\n-\n-        File file = new File(url.getPath());\n-        String query = \"INSERT INTO CamelRoute(ID, NAME, ROUTECONTENT) VALUES (?, ?, ?)\";\n-        try {\n-\n-            DocumentBuilder dBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n-            Document doc = dBuilder.parse(file);\n-            doc.getDocumentElement().normalize();\n+        if(routeDAO.findAll(subject).isEmpty()){\n+            URL url = getClass().getResource(path);\n \n-            JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+            File file = new File(url.getPath());\n+            \n+            try {\n \n-            NodeList listOfRoutes = doc.getElementsByTagName(\"route\");\n-            for (int s = 0; s < listOfRoutes.getLength(); s++) {\n-                //getting the route node element\n-                Node routeEl = listOfRoutes.item(s);\n-                //crate an instance of CamelRoute Entity\n-                CamelRoute route = new CamelRoute();\n-                route.setName(((Element) routeEl).getAttribute(\"id\"));\n-                route.setRouteContent(nodeToString(listOfRoutes.item(s)));\n+                DocumentBuilder dBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+                Document doc = dBuilder.parse(file);\n+                doc.getDocumentElement().normalize();\n \n-                jdbcTemplate.update(query, new Object[] { s + 1, ((Element) routeEl).getAttribute(\"id\"), nodeToString(\n-                    listOfRoutes.item(s)) });\n-                LOG.info(\"Route Registration Successed\");\n+                NodeList listOfRoutes = doc.getElementsByTagName(\"route\");\n+                for (int s = 0; s < listOfRoutes.getLength(); s++) {\n+                    //getting the route node element\n+                    Node routeEl = listOfRoutes.item(s);\n+                    //crate an instance of CamelRoute Entity\n+                    CamelRoute route = new CamelRoute();\n+                    route.setSubject(subject);\n+                    route.setName(((Element) routeEl).getAttribute(\"id\"));\n+                    route.setRouteContent(nodeToString(listOfRoutes.item(s)));                    \n+                    routeDAO.save(route);\n+                    LOG.info(\"Route with id {} Registration Successed\", ((Element) routeEl).getAttribute(\"id\"));\n+                }\n+            } catch (DataAccessException e) {\n+                LOG.error(\"While trying to store queries {}\", e);\n+            } catch (Exception e) {\n+                LOG.error(\"Route Registration failed {}\", e.getMessage());\n             }\n-        } catch (DataAccessException e) {\n-            LOG.error(\"While trying to perform {}\", query, e);\n-        } catch (Exception e) {\n-            LOG.error(\"Route Registration failed {}\", e.getMessage());\n         }\n-        //}\n     }\n \n     private String nodeToString(Node node) {"},{"sha":"fc8c8d27e224c3e7023101a68bc12b69a291d713","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/CamelRoute.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FCamelRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FCamelRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FCamelRoute.java?ref=0edb2a245fbd06f06f841e4fc0b0df34d132d892","patch":"@@ -24,6 +24,10 @@\n import javax.persistence.Lob;\n import javax.persistence.GenerationType;\n import javax.persistence.Column;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.types.SubjectType;\n \n @Entity\n public class CamelRoute {\n@@ -34,21 +38,33 @@ public class CamelRoute {\n     private Long id;\n \n     private String name;\n+    \n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    private SubjectType subject;\n \n     @Lob\n     private String routeContent;\n \n     public Long getId() {\n         return id;\n     }\n-\n+    \n     public void setName(String name) {\n         this.name = name;\n     }\n \n     public String getName() {\n         return name;\n     }\n+        \n+    public SubjectType getSubject() {\n+        return subject;\n+    }\n+\n+    public void setSubject(SubjectType subject) {\n+        this.subject = subject;\n+    }\n \n     public String getRouteContent() {\n         return routeContent;"},{"sha":"eb95fefbcc657095f3299e0cd29dd4ed4689d440","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/RouteDAO.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRouteDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRouteDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRouteDAO.java?ref=0edb2a245fbd06f06f841e4fc0b0df34d132d892","patch":"@@ -19,16 +19,21 @@\n package org.apache.syncope.core.persistence.dao;\n \n import java.util.List;\n+import org.apache.syncope.common.types.SubjectType;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.apache.syncope.core.persistence.beans.CamelRoute;\n \n public interface RouteDAO {\n \n     CamelRoute find(Long id);\n-\n+    \n+    CamelRoute find(Long id, SubjectType subject);\n+    \n     List<CamelRoute> findAll();\n \n+    List<CamelRoute> findAll(SubjectType subject);\n+\n     CamelRoute save(CamelRoute route) throws InvalidEntityException;\n \n-    void delete(Long id);\n+    void delete(Long id, SubjectType subject);\n }"},{"sha":"2a1527a266454af485f7025e5e059864f2ea4b76","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/RouteDAOImpl.java","status":"modified","additions":18,"deletions":3,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRouteDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRouteDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRouteDAOImpl.java?ref=0edb2a245fbd06f06f841e4fc0b0df34d132d892","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.types.SubjectType;\n import org.apache.syncope.core.persistence.beans.CamelRoute;\n import org.apache.syncope.core.persistence.dao.RouteDAO;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n@@ -33,12 +34,26 @@ public class RouteDAOImpl extends AbstractDAOImpl implements RouteDAO {\n     public CamelRoute find(final Long id) {\n         return entityManager.find(CamelRoute.class, id);\n     }\n+    \n+    @Override\n+    public CamelRoute find(final Long id, final SubjectType subject) {\n+        return find(id);\n+    }\n \n     @Transactional(readOnly = true)\n     @Override\n     public List<CamelRoute> findAll() {\n         TypedQuery<CamelRoute> query = entityManager.createQuery(\"SELECT e FROM \" + CamelRoute.class.getSimpleName()\n-                + \" e\", CamelRoute.class);\n+                + \" e \", CamelRoute.class);\n+        return query.getResultList();\n+    }\n+    \n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<CamelRoute> findAll(final SubjectType subject) {\n+        TypedQuery<CamelRoute> query = entityManager.createQuery(\"SELECT e FROM \" + CamelRoute.class.getSimpleName()\n+                + \" e WHERE e.subject = :subject\", CamelRoute.class);\n+        query.setParameter(\"subject\",subject);\n         return query.getResultList();\n     }\n \n@@ -48,8 +63,8 @@ public CamelRoute save(final CamelRoute route) throws InvalidEntityException {\n     }\n \n     @Override\n-    public void delete(Long id) {\n-        CamelRoute route = find(id);\n+    public void delete(Long id, final SubjectType subject) {\n+        CamelRoute route = find(id, subject);\n         if (route != null) {\n             entityManager.remove(route);\n         }"},{"sha":"137ae80403d2582a4ccb253b2eb617994bb4a3cb","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=0edb2a245fbd06f06f841e4fc0b0df34d132d892","patch":"@@ -43,6 +43,7 @@\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.PropagationStatus;\n import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.SubjectType;\n import org.apache.syncope.core.persistence.beans.CamelRoute;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.RouteDAO;\n@@ -103,8 +104,8 @@ public SpringCamelContext getContext() {\n         return contextFactory.getContext(routeDAO);\n     }\n \n-    protected List<CamelRoute> getRoutes() {\n-        return routeDAO.findAll();\n+    protected List<CamelRoute> getRoutes(SubjectType subject) {\n+        return routeDAO.findAll(subject);\n     }\n \n     public void changeRoute(String routePath) {"},{"sha":"1a59a7090f95d7c9c3357fc658261a51095e4f5d","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/SyncopeCamelContext.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java?ref=0edb2a245fbd06f06f841e4fc0b0df34d132d892","patch":"@@ -24,17 +24,15 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.logging.Level;\n import javax.xml.bind.JAXBContext;\n import javax.xml.bind.JAXBElement;\n import javax.xml.bind.Unmarshaller;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n-import org.apache.camel.CamelContext;\n import org.apache.camel.model.Constants;\n import org.apache.camel.model.RouteDefinition;\n-import org.apache.camel.model.RoutesDefinition;\n import org.apache.camel.spring.SpringCamelContext;\n+import org.apache.syncope.common.types.SubjectType;\n import org.apache.syncope.core.persistence.beans.CamelRoute;\n import org.apache.syncope.core.persistence.dao.RouteDAO;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n@@ -61,7 +59,9 @@ public SpringCamelContext getContext(RouteDAO routeDAO) {\n         }\n         if (camelContext.getRouteDefinitions().isEmpty()) {\n \n-            List<CamelRoute> crl = routeDAO.findAll();\n+            List<CamelRoute> crl = new ArrayList<CamelRoute>();\n+            crl.addAll(routeDAO.findAll(SubjectType.USER));\n+            crl.addAll(routeDAO.findAll(SubjectType.ROLE));\n             LOG.info(\"{} route(s) are going to be loaded \", crl.size());\n             loadContext(routeDAO, crl);\n \n@@ -101,7 +101,9 @@ public void loadContext(RouteDAO routeDAO, List<CamelRoute> crl) {\n \n     public void reloadContext(RouteDAO routeDAO) {\n \n-        List<CamelRoute> crl = routeDAO.findAll();\n+        List<CamelRoute> crl = new ArrayList<CamelRoute>();\n+        crl.addAll(routeDAO.findAll(SubjectType.USER));\n+        crl.addAll(routeDAO.findAll(SubjectType.ROLE));\n         if (camelContext == null) {\n             getContext(routeDAO);\n         } else {"},{"sha":"404e1013edee3f28eae650921485d89b1493c906","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RouteController.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRouteController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRouteController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRouteController.java?ref=0edb2a245fbd06f06f841e4fc0b0df34d132d892","patch":"@@ -23,6 +23,7 @@\n import java.util.Iterator;\n import java.util.List;\n import org.apache.syncope.common.to.RouteTO;\n+import org.apache.syncope.common.types.SubjectType;\n import org.apache.syncope.core.persistence.beans.CamelRoute;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.RouteDAO;\n@@ -50,9 +51,9 @@ public class RouteController extends AbstractTransactionalController<RouteTO> {\n \n     @PreAuthorize(\"hasRole('ROUTE_LIST')\")\n     @Transactional(readOnly = true)\n-    public List<RouteTO> listRoutes() {\n+    public List<RouteTO> listRoutes(final SubjectType subject) {\n         List<RouteTO> routes = new ArrayList<RouteTO>();\n-        Iterator it = routeDao.findAll().iterator();\n+        Iterator it = routeDao.findAll(subject).iterator();\n         while (it.hasNext()) {\n             routes.add(binder.getRouteTO((CamelRoute) it.next()));\n         }\n@@ -69,6 +70,17 @@ public RouteTO readRoute(Long id) {\n \n         return binder.getRouteTO(route);\n     }\n+    \n+    @PreAuthorize(\"hasRole('ROUTE_READ')\")\n+    @Transactional(readOnly = true)\n+    public RouteTO readRoute(Long id, SubjectType subject) {\n+        CamelRoute route = routeDao.find(id, subject);\n+        if (route == null) {\n+            throw new NotFoundException(\"Route with id=\" + id);\n+        }\n+\n+        return binder.getRouteTO(route);\n+    }\n \n     @PreAuthorize(\"hasRole('ROUTE_UPDATE')\")\n     public void updateRoute(RouteTO routeTO) {"},{"sha":"71f94ac77aadf82fe6461c2a08b007dfe13be348","filename":"core/src/main/java/org/apache/syncope/core/services/RouteServiceImpl.java","status":"modified","additions":16,"deletions":6,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRouteServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRouteServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRouteServiceImpl.java?ref=0edb2a245fbd06f06f841e4fc0b0df34d132d892","patch":"@@ -36,10 +36,10 @@\n public class RouteServiceImpl extends AbstractServiceImpl implements RouteService {\n     \n     @Override\n-    public Response getOptions(final SubjectType kind) {\n+    public Response getOptions(final SubjectType subject) {\n         String key;\n         String value;\n-        if (kind == SubjectType.USER) {\n+        if (subject == SubjectType.USER) {\n             key = RESTHeaders.CAMEL_USER_PROVISIONING_MANAGER;\n             value = Boolean.toString(CamelDetector.isCamelEnabledForUsers());\n         } else {\n@@ -57,19 +57,29 @@ public Response getOptions(final SubjectType kind) {\n     private RouteController controller;\n \n     @Override\n-    public List<RouteTO> getRoutes(SubjectType kind) {\n+    public List<RouteTO> getRoutes(SubjectType subject) {\n \n-        return controller.listRoutes();\n+        return controller.listRoutes(subject);\n     }\n \n     @Override\n-    public RouteTO getRoute(SubjectType kind, Long id) {\n+    public RouteTO getRoute(Long id) {\n \n         return controller.readRoute(id);\n     }\n+    \n+    @Override\n+    public RouteTO getRoute(SubjectType subject, Long Id) {\n+        return controller.readRoute(Id, subject);\n+    }\n+\n+    @Override\n+    public void importRoute(Long id, RouteTO route) {\n+        controller.updateRoute(route);\n+    }\n \n     @Override\n-    public void importRoute(SubjectType kind,Long id, RouteTO route) {\n+    public void importRoute(SubjectType kind, Long id, RouteTO route) {\n         controller.updateRoute(route);\n     }\n "},{"sha":"6c5a3943497ac4d680bf640d6b573bc296f01b5b","filename":"core/src/main/resources/userRoute.xml","status":"modified","additions":54,"deletions":6,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fresources%2FuserRoute.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0edb2a245fbd06f06f841e4fc0b0df34d132d892/core%2Fsrc%2Fmain%2Fresources%2FuserRoute.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FuserRoute.xml?ref=0edb2a245fbd06f06f841e4fc0b0df34d132d892","patch":"@@ -29,14 +29,23 @@ under the License.\n       main operations consist in user workflow creation and its propagation.         \n   -->\n   <routeContext id=\"defaultUserRoutes\" xmlns=\"http://camel.apache.org/schema/spring\">  \t\n+    <!--\n+        CREATE USER\n+        This is the entry point of the route and is involved in accepting\n+        the UserTO. When it arrives, the user workflow is created. If the\n+        creation is successfull, the result is sent to propagation, otherwise\n+        if an exception was raised, the exception has to be returned to the\n+        caller. The property actual allows to store the received UserTO in\n+        order to use it later.\n+    -->\n+        \n     <route id=\"createUser\">\n       <from uri=\"direct:createUser\"/>\n       <setProperty propertyName=\"actual\">\n         <simple>${body}</simple>\n       </setProperty>\n       <doTry>\n-        <bean ref=\"uwfAdapter\" \n-              method=\"create(${body},${property.disablePwdPolicyCheck},\n+        <bean ref=\"uwfAdapter\" method=\"create(${body},${property.disablePwdPolicyCheck},\n                                  ${property.enabled},${property.storePassword})\"/>\n         <process ref=\"defaultUserCreatePropagation\" />\n         <to uri=\"direct:createPort\"/>\n@@ -101,7 +110,7 @@ under the License.\n     <route id=\"syncUserStatus\">\n       <from uri=\"direct:syncUserStatus\"/>\n       <process ref=\"userStatusOnSync\" />\n-      <process ref=\"defaultUserUpdateSyncPropagation\" />\n+      <process ref=\"defaultUserUpdateInSyncPropagation\" />\n       <to uri=\"direct:updateSyncPort\"/>\n     </route>\n     <!--\n@@ -240,9 +249,11 @@ under the License.\n       <process ref=\"defaultUserDeprovisionPropagation\" />\n       <to uri=\"direct:deprovisionPort\"/>              \n     </route>\n-\n-\n-\n+    \n+    <!--\n+        SUSPEND USER AFTER POLICY VIOLATION\n+    -->\n+        \n     <route id=\"suspendUserWF\">\n       <from uri=\"direct:suspendUserWF\"/>\n       <doTry>\n@@ -258,6 +269,43 @@ under the License.\n         </doCatch>\n       </doTry>  \n     </route>\n+        \n+    <!--\n+        REQUEST PASSWORD RESET ROUTE\n+    -->\n+        \n+    <route id=\"requestPwdReset\">\n+      <from uri=\"direct:requestPwdReset\"/>\n+      <doTry>\n+        <bean ref=\"uwfAdapter\" method=\"requestPasswordReset(${body})\"/>\n+        <to uri=\"direct:requestPwdResetPort\"/>\n+        <doCatch>        \n+          <exception>java.lang.RuntimeException</exception>\n+          <handled>\n+            <constant>false</constant>\n+          </handled>\n+          <to uri=\"direct:requestPwdResetPort\"/>\n+        </doCatch>\n+      </doTry>  \n+    </route>\n+    <!--\n+        CONFIRM PASSWORD RESET\n+    -->\n+    <route id=\"confirmPwdReset\">\n+      <from uri=\"direct:confirmPwdReset\"/>\n+      <doTry>\n+        <bean ref=\"uwfAdapter\" method=\"confirmPasswordReset(${property.userId},${property.token},${property.password})\"/>\n+        <process ref=\"defaultUserConfirmPwdResetPropagation\" />\n+        <to uri=\"direct:confirmPwdResetPort\"/>\n+        <doCatch>        \n+          <exception>java.lang.RuntimeException</exception>\n+          <handled>\n+            <constant>false</constant>\n+          </handled>\n+          <to uri=\"direct:confirmPwdResetPort\"/>\n+        </doCatch>\n+      </doTry>\n+    </route>\n \n   </routeContext>\n </beans>"}]}