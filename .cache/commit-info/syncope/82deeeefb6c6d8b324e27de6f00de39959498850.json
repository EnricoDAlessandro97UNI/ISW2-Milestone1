{"sha":"82deeeefb6c6d8b324e27de6f00de39959498850","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgyZGVlZWVmYjZjNmQ4YjMyNGUyN2RlNmYwMGRlMzk5NTk0OTg4NTA=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-01-30T12:15:54Z"},"committer":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-01-30T13:39:01Z"},"message":"cherry-pick from 2_1_X: check for presence of value before using Optional","tree":{"sha":"25122a02b25d983e974df12fb2e07eda421a36e4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/25122a02b25d983e974df12fb2e07eda421a36e4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/82deeeefb6c6d8b324e27de6f00de39959498850","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEElUyo8doQ6pkfeJVxEb3Dumou+aoFAl4y3HUACgkQEb3Dumou\n+arn0wgAonVmS/Ohcmj0L3owP64SxZ/noS5f4xTiAUqnI0dxV/hSv040qybX4Ubr\nV0BUvEfagNUXtmsVcVSry4c48KU952b8iIbNBmrCuVkpxeIKVZ1iO8BQaGcOZOmv\nkAaC3OM59L3lF1fmhrZw0hT8K8eS0VOaMIxYB1Foza2DBkY7KQvSPtUvbiFl4Rkx\ng1cp/k0K2VqQsJApTkNUaOKHtlRBisgkT2eq3ybspbOpkCVaqk4+AStHck3EtML8\nGOA/54GdetQYd879UJFBeaL2GahJ9kkHgOQtMDK3C/RdLd0vUigESlrDzp4SKtJY\nxdAlb2pjCwZEpYY54i7vaM0oLZJpDw==\n=2g5u\n-----END PGP SIGNATURE-----","payload":"tree 25122a02b25d983e974df12fb2e07eda421a36e4\nparent 254611fed6623e1dafb8dda63d201413c63c1291\nauthor Misagh Moayyed <mm1844@gmail.com> 1580386554 +0400\ncommitter Misagh Moayyed <mm1844@gmail.com> 1580391541 +0400\n\ncherry-pick from 2_1_X: check for presence of value before using Optional\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/82deeeefb6c6d8b324e27de6f00de39959498850","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/82deeeefb6c6d8b324e27de6f00de39959498850","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/82deeeefb6c6d8b324e27de6f00de39959498850/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"parents":[{"sha":"254611fed6623e1dafb8dda63d201413c63c1291","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/254611fed6623e1dafb8dda63d201413c63c1291","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/254611fed6623e1dafb8dda63d201413c63c1291"}],"stats":{"total":63,"additions":51,"deletions":12},"files":[{"sha":"338854f2d5aed3d7519599f2f301ae0d88a2620f","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjectListViewPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/82deeeefb6c6d8b324e27de6f00de39959498850/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/82deeeefb6c6d8b324e27de6f00de39959498850/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java?ref=82deeeefb6c6d8b324e27de6f00de39959498850","patch":"@@ -184,7 +184,7 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n                     Optional<Attr> attr =\n                             bean.getAttrs().stream().filter(object -> object.getSchema().equals(key)).findAny();\n \n-                    return !attr.isPresent() || attr.get().getValues().isEmpty()\n+                    return attr.isEmpty() || attr.get().getValues().isEmpty()\n                             ? new Label(\"field\", StringUtils.EMPTY)\n                             : new CollectionPanel(\"field\", attr.get().getValues());\n                 }"},{"sha":"48608f9d21a2a7f2488999c19e9d3d7203e96323","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/82deeeefb6c6d8b324e27de6f00de39959498850/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/82deeeefb6c6d8b324e27de6f00de39959498850/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java?ref=82deeeefb6c6d8b324e27de6f00de39959498850","patch":"@@ -23,6 +23,7 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n@@ -33,14 +34,18 @@\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.wicket.WicketRuntimeException;\n import org.apache.wicket.core.util.lang.PropertyResolver;\n import org.apache.wicket.markup.head.IHeaderResponse;\n import org.apache.wicket.markup.head.OnDomReadyHeaderItem;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.util.ListModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class AbstractAttrs<S extends SchemaTO> extends AbstractAttrsWizardStep<S> {\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractAttrs.class);\n \n     private static final long serialVersionUID = -5387344116983102292L;\n \n@@ -105,7 +110,13 @@ private void setSchemas(final String membership, final List<String> anyTypeClass\n     protected List<String> getMembershipAuxClasses(final MembershipTO membershipTO, final String anyType) {\n         try {\n             final GroupTO groupTO = groupRestClient.read(membershipTO.getGroupKey());\n-            return groupTO.getTypeExtension(anyType).get().getAuxClasses();\n+            Optional<TypeExtensionTO> typeExtension = groupTO.getTypeExtension(anyType);\n+            if (typeExtension.isEmpty()) {\n+                LOG.trace(\"Unable to locate type extension for \" + anyType);\n+                return Collections.emptyList();\n+            }\n+            return typeExtension.get().getAuxClasses();\n+\n         } catch (Exception e) {\n             return List.of();\n         }"},{"sha":"5c2f4881fe94c526d6df40404b9a54779b5cb35c","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/82deeeefb6c6d8b324e27de6f00de39959498850/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/82deeeefb6c6d8b324e27de6f00de39959498850/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=82deeeefb6c6d8b324e27de6f00de39959498850","patch":"@@ -344,7 +344,7 @@ public void pull(final ReconQuery query, final PullTaskTO pullTask) {\n             Any<?> any = getAny(provision, query.getAnyKey());\n             connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, provision);\n         }\n-        if (!connObjectKeyValue.isPresent()) {\n+        if (connObjectKeyValue.isEmpty()) {\n             throw new NotFoundException(\n                     \"ConnObjectKey for \" + provision.getAnyType().getKey()\n                     + \" on resource '\" + provision.getResource().getKey() + \"'\");\n@@ -353,6 +353,9 @@ public void pull(final ReconQuery query, final PullTaskTO pullTask) {\n         if (pullTask.getDestinationRealm() == null || realmDAO.findByFullPath(pullTask.getDestinationRealm()) == null) {\n             throw new NotFoundException(\"Realm \" + pullTask.getDestinationRealm());\n         }\n+        if (provision.getMapping().getConnObjectKeyItem().isEmpty()) {\n+            throw new NotFoundException(\"ConnObjectKey cannot be determined for mapping \" + provision.getMapping().getKey());\n+        }\n \n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Reconciliation);\n         try {"},{"sha":"c2ef89aac67321369750178e77b563c147ef2cd6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/82deeeefb6c6d8b324e27de6f00de39959498850/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/82deeeefb6c6d8b324e27de6f00de39959498850/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=82deeeefb6c6d8b324e27de6f00de39959498850","patch":"@@ -851,7 +851,12 @@ private String getGroupOwnerValue(final Provision provision, final Any<?> any) {\n     @Transactional(readOnly = true)\n     @Override\n     public Optional<String> getConnObjectKeyValue(final Any<?> any, final Provision provision) {\n-        MappingItem mapItem = provision.getMapping().getConnObjectKeyItem().get();\n+        Optional<? extends MappingItem> connObjectKeyItem = provision.getMapping().getConnObjectKeyItem();\n+        if (connObjectKeyItem.isEmpty()) {\n+             LOG.error(\"Unable to locate conn object key item for \" + provision.getMapping().getKey());\n+             return Optional.empty();\n+        }\n+        MappingItem mapItem = connObjectKeyItem.get();\n         Pair<AttrSchemaType, List<PlainAttrValue>> intValues;\n         try {\n             intValues = getIntValues(provision,\n@@ -873,10 +878,13 @@ public Optional<String> getConnObjectKeyValue(final Any<?> any, final Provision\n     @Transactional(readOnly = true)\n     @Override\n     public Optional<String> getConnObjectKeyValue(final Realm realm, final OrgUnit orgUnit) {\n-        OrgUnitItem orgUnitItem = orgUnit.getConnObjectKeyItem().get();\n-\n-        return Optional.ofNullable(Optional.of(orgUnitItem)\n-                .map(unitItem -> getIntValue(realm, unitItem)).orElse(null));\n+        Optional<? extends OrgUnitItem> connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n+        if (connObjectKeyItem.isEmpty()) {\n+            LOG.error(\"Unable to locate conn object key item for \" + orgUnit.getKey());\n+            return Optional.empty();\n+        }\n+        OrgUnitItem orgUnitItem = connObjectKeyItem.get();\n+        return Optional.ofNullable(getIntValue(realm, orgUnitItem));\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"4c3ab199783ca1572f166dcdd8cd3cc25cb63d11","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/InboundMatcher.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/82deeeefb6c6d8b324e27de6f00de39959498850/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/82deeeefb6c6d8b324e27de6f00de39959498850/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java?ref=82deeeefb6c6d8b324e27de6f00de39959498850","patch":"@@ -119,7 +119,7 @@ public Optional<PullMatch> match(\n             final Connector connector) {\n \n         Optional<? extends Provision> provision = resource.getProvision(anyType);\n-        if (!provision.isPresent()) {\n+        if (provision.isEmpty()) {\n             return Optional.empty();\n         }\n "},{"sha":"eb041ed669f0fb1d3cbabd2889ff997797cd9224","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/82deeeefb6c6d8b324e27de6f00de39959498850/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/82deeeefb6c6d8b324e27de6f00de39959498850/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=82deeeefb6c6d8b324e27de6f00de39959498850","patch":"@@ -24,10 +24,13 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n import org.apache.commons.lang3.ArrayUtils;\n+import javax.security.auth.login.AccountNotFoundException;\n+\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n@@ -39,6 +42,8 @@\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -231,8 +236,16 @@ protected boolean authenticate(final User user, final String password) {\n             ExternalResource resource = itor.next();\n             String connObjectKey = null;\n             try {\n-                connObjectKey = mappingManager.getConnObjectKeyValue(\n-                        user, resource.getProvision(anyTypeDAO.findUser()).get()).get();\n+                AnyType userType = anyTypeDAO.findUser();\n+                Optional<? extends Provision> provision = resource.getProvision(userType);\n+                if (provision.isEmpty()) {\n+                    throw new AccountNotFoundException(\"Unable to locate provision for user type \" + userType.getKey());\n+                }\n+                Optional<String> connObjectKeyValue = mappingManager.getConnObjectKeyValue(user, provision.get());\n+                if (connObjectKeyValue.isEmpty()) {\n+                    throw new AccountNotFoundException(\"Unable to locate conn object key value for \" + userType.getKey());\n+                }\n+                connObjectKey = connObjectKeyValue.get();\n                 Uid uid = connFactory.getConnector(resource).authenticate(connObjectKey, password, null);\n                 if (uid != null) {\n                     authenticated = true;"},{"sha":"798b4aad1457b0446b232b8a327133eee64e8de9","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2UserManager.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/82deeeefb6c6d8b324e27de6f00de39959498850/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/82deeeefb6c6d8b324e27de6f00de39959498850/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java?ref=82deeeefb6c6d8b324e27de6f00de39959498850","patch":"@@ -20,6 +20,7 @@\n \n import java.text.ParseException;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n@@ -93,7 +94,10 @@ public List<String> findMatchingUser(final String connObjectKeyValue, final Stri\n             LOG.warn(\"Invalid IdP: {}\", idpKey);\n             return List.of();\n         }\n-\n+        if (idp.getConnObjectKeyItem().isEmpty()) {\n+            LOG.warn(\"Unable to determine conn object key item for  IdP: {}\", idpKey);\n+            return Collections.emptyList();\n+        }\n         return inboundMatcher.matchByConnObjectKeyValue(\n                 idp.getConnObjectKeyItem().get(), connObjectKeyValue, AnyTypeKind.USER, false, null).stream().\n                 filter(match -> match.getAny() != null)."}]}