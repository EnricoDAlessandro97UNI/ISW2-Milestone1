{"sha":"030d1c24929209e31e318cb5601be36306405207","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAzMGQxYzI0OTI5MjA5ZTMxZTMxOGNiNTYwMWJlMzYzMDY0MDUyMDc=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-05-27T09:22:22Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-05-27T09:22:22Z"},"message":"[SYNCOPE-745] provides policy management + console integration tests","tree":{"sha":"c722c410c9753340171df5b287ad49cfdabe8143","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c722c410c9753340171df5b287ad49cfdabe8143"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/030d1c24929209e31e318cb5601be36306405207","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/030d1c24929209e31e318cb5601be36306405207","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/030d1c24929209e31e318cb5601be36306405207","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/030d1c24929209e31e318cb5601be36306405207/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"51383dd9c7f5d33bc52baf9c309613460a7a4079","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/51383dd9c7f5d33bc52baf9c309613460a7a4079","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/51383dd9c7f5d33bc52baf9c309613460a7a4079"}],"stats":{"total":3639,"additions":3357,"deletions":282},"files":[{"sha":"19b1ce158ed86dfc3a0f572e61cf404029088c41","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/Constants.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -114,6 +114,10 @@ public final class Constants {\n \n     public static final String PREF_REPORTLET_TASKS_PAGINATOR_ROWS = \"reportlet.paginator.rows\";\n \n+    public static final String PREF_POLICY_RULE_PAGINATOR_ROWS = \"policy.rules.paginator.rows\";\n+\n+    public static final String PREF_POLICY_PAGINATOR_ROWS = \"policy.paginator.rows\";\n+\n     public static final String PREF_TASK_EXECS_PAGINATOR_ROWS = \"task.execs.paginator.rows\";\n \n     public static final String PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS = \"notificationtasks.paginator.rows\";\n@@ -134,8 +138,6 @@ public final class Constants {\n \n     public static final String PAGEPARAM_CURRENT_PAGE = \"_current_page\";\n \n-    public static final String PREF_POLICY_PAGINATOR_ROWS = \"policy.paginator.rows\";\n-\n     public static final String PREF_ANY_OBJECT_DETAILS_VIEW = \"anyobject.%s.details.view\";\n \n     public static final String PREF_ANY_OBJECT_PLAIN_ATTRS_VIEW = \"anyobject.%s.plain.attrs.view\";"},{"sha":"508c6c809cfb090d26d5eddeb0d742402651f597","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Policies.java","status":"modified","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -18,7 +18,18 @@\n  */\n package org.apache.syncope.client.console.pages;\n \n+import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n+import java.util.ArrayList;\n+import java.util.List;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n+import org.apache.syncope.client.console.policies.AccountPolicyDirectoryPanel;\n+import org.apache.syncope.client.console.policies.PasswordPolicyDirectoryPanel;\n+import org.apache.syncope.client.console.policies.PullPolicyDirectoryPanel;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n public class Policies extends BasePage {\n@@ -29,5 +40,47 @@ public Policies(final PageParameters parameters) {\n         super(parameters);\n \n         body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));\n+\n+        WebMarkupContainer content = new WebMarkupContainer(\"content\");\n+        content.setOutputMarkupId(true);\n+        content.setMarkupId(\"policies\");\n+        content.add(new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList()));\n+        body.add(content);\n+    }\n+\n+    private List<ITab> buildTabList() {\n+        final List<ITab> tabs = new ArrayList<>();\n+\n+        tabs.add(new AbstractTab(new ResourceModel(\"policy.account\")) {\n+\n+            private static final long serialVersionUID = -6815067322125799251L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new AccountPolicyDirectoryPanel(panelId, getPageReference());\n+            }\n+        });\n+\n+        tabs.add(new AbstractTab(new ResourceModel(\"policy.password\")) {\n+\n+            private static final long serialVersionUID = -6815067322125799251L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new PasswordPolicyDirectoryPanel(panelId, getPageReference());\n+            }\n+        });\n+\n+        tabs.add(new AbstractTab(new ResourceModel(\"policy.pull\")) {\n+\n+            private static final long serialVersionUID = -6815067322125799251L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new PullPolicyDirectoryPanel(panelId, getPageReference());\n+            }\n+        });\n+\n+        return tabs;\n     }\n }"},{"sha":"fe09351bd2efaa2fb583dedf7d1bf1857946c313","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"added","additions":307,"deletions":0,"changes":307,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,307 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.ParameterizedType;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.client.console.panels.search.AnyObjectSearchPanel;\n+import org.apache.syncope.client.console.panels.search.GroupSearchPanel;\n+import org.apache.syncope.client.console.panels.search.SearchClause;\n+import org.apache.syncope.client.console.panels.search.SearchUtils;\n+import org.apache.syncope.client.console.panels.search.UserSearchPanel;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSpinnerFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.DateTimeFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.report.Schema;\n+import org.apache.syncope.common.lib.report.SearchCondition;\n+import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.util.ListModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanWrapper;\n+import org.springframework.beans.PropertyAccessorFactory;\n+import org.springframework.util.ClassUtils;\n+\n+public class BeanPanel<T extends Serializable> extends Panel {\n+\n+    private static final long serialVersionUID = 3905038169553185171L;\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(BeanPanel.class);\n+\n+    private final List<String> excluded;\n+\n+    private final Map<String, Pair<AbstractFiqlSearchConditionBuilder, List<SearchClause>>> sCondWrapper;\n+\n+    public BeanPanel(final String id, final IModel<T> bean, final String... excluded) {\n+        this(id, bean, null, excluded);\n+    }\n+\n+    public BeanPanel(\n+            final String id,\n+            final IModel<T> bean,\n+            final Map<String, Pair<AbstractFiqlSearchConditionBuilder, List<SearchClause>>> sCondWrapper,\n+            final String... excluded) {\n+        super(id, bean);\n+        setOutputMarkupId(true);\n+\n+        this.sCondWrapper = sCondWrapper;\n+\n+        this.excluded = new ArrayList<>(Arrays.asList(excluded));\n+        this.excluded.add(\"serialVersionUID\");\n+        this.excluded.add(\"class\");\n+\n+        final LoadableDetachableModel<List<String>> model = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                List<String> result = new ArrayList<String>();\n+\n+                if (BeanPanel.this.getDefaultModelObject() != null) {\n+                    for (Field field : BeanPanel.this.getDefaultModelObject().getClass().getDeclaredFields()) {\n+                        if (!BeanPanel.this.excluded.contains(field.getName())) {\n+                            result.add(field.getName());\n+                        }\n+                    }\n+                }\n+\n+                return result;\n+            }\n+        };\n+\n+        add(new ListView<String>(\"propView\", model) {\n+\n+            private static final long serialVersionUID = 9101744072914090143L;\n+\n+            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                final String fieldName = item.getModelObject();\n+\n+                item.add(new Label(\"fieldName\", new ResourceModel(fieldName, fieldName)));\n+\n+                Field field = null;\n+                try {\n+                    field = bean.getObject().getClass().getDeclaredField(fieldName);\n+                } catch (NoSuchFieldException | SecurityException e) {\n+                    LOG.error(\"Could not find field {} in class {}\", fieldName, bean.getObject().getClass(), e);\n+                }\n+\n+                if (field == null) {\n+                    return;\n+                }\n+\n+                final SearchCondition scondAnnot = field.getAnnotation(SearchCondition.class);\n+                final Schema schemaAnnot = field.getAnnotation(Schema.class);\n+\n+                BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(bean.getObject());\n+\n+                Panel panel;\n+\n+                if (scondAnnot != null) {\n+                    final String fiql = (String) wrapper.getPropertyValue(fieldName);\n+\n+                    final List<SearchClause> clauses;\n+                    if (StringUtils.isEmpty(fiql)) {\n+                        clauses = new ArrayList<>();\n+                    } else {\n+                        clauses = SearchUtils.getSearchClauses(fiql);\n+                    }\n+\n+                    final AbstractFiqlSearchConditionBuilder builder;\n+\n+                    switch (scondAnnot.type()) {\n+                        case \"USER\":\n+                            panel = new UserSearchPanel.Builder(\n+                                    new ListModel<SearchClause>(clauses)).required(false).build(\"value\");\n+                            builder = SyncopeClient.getUserSearchConditionBuilder();\n+                            break;\n+                        case \"GROUP\":\n+                            panel = new GroupSearchPanel.Builder(\n+                                    new ListModel<SearchClause>(clauses)).required(false).build(\"value\");\n+                            builder = SyncopeClient.getGroupSearchConditionBuilder();\n+                            break;\n+                        default:\n+                            panel = new AnyObjectSearchPanel.Builder(\n+                                    scondAnnot.type(),\n+                                    new ListModel<SearchClause>(clauses)).required(false).build(\"value\");\n+                            builder = SyncopeClient.getAnyObjectSearchConditionBuilder(null);\n+                    }\n+\n+                    if (BeanPanel.this.sCondWrapper != null) {\n+                        BeanPanel.this.sCondWrapper.put(fieldName, Pair.of(builder, clauses));\n+                    }\n+                } else if (List.class.equals(field.getType())) {\n+                    Class<?> listItemType = String.class;\n+                    if (field.getGenericType() instanceof ParameterizedType) {\n+                        listItemType = (Class<?>) ((ParameterizedType) field.getGenericType()).\n+                                getActualTypeArguments()[0];\n+                    }\n+\n+                    if (listItemType.equals(String.class) && schemaAnnot != null) {\n+                        SchemaRestClient schemaRestClient = new SchemaRestClient();\n+\n+                        final List<AbstractSchemaTO> choices = new ArrayList<>();\n+\n+                        for (IntMappingType type : schemaAnnot.type()) {\n+                            switch (type) {\n+                                case UserPlainSchema:\n+                                    choices.addAll(\n+                                            schemaRestClient.getSchemas(SchemaType.PLAIN, AnyTypeKind.USER));\n+                                    break;\n+\n+                                case UserDerivedSchema:\n+                                    choices.addAll(\n+                                            schemaRestClient.getSchemas(SchemaType.DERIVED, AnyTypeKind.USER));\n+                                    break;\n+\n+                                case UserVirtualSchema:\n+                                    choices.addAll(\n+                                            schemaRestClient.getSchemas(SchemaType.VIRTUAL, AnyTypeKind.USER));\n+                                    break;\n+\n+                                case GroupPlainSchema:\n+                                    choices.addAll(\n+                                            schemaRestClient.getSchemas(SchemaType.PLAIN, AnyTypeKind.GROUP));\n+                                    break;\n+\n+                                case GroupDerivedSchema:\n+                                    choices.addAll(\n+                                            schemaRestClient.getSchemas(SchemaType.DERIVED, AnyTypeKind.GROUP));\n+                                    break;\n+\n+                                case GroupVirtualSchema:\n+                                    choices.addAll(\n+                                            schemaRestClient.getSchemas(SchemaType.VIRTUAL, AnyTypeKind.GROUP));\n+                                    break;\n+\n+                                case AnyObjectPlainSchema:\n+                                    choices.addAll(\n+                                            schemaRestClient.getSchemas(SchemaType.PLAIN, AnyTypeKind.ANY_OBJECT));\n+                                    break;\n+\n+                                case AnyObjectDerivedSchema:\n+                                    choices.addAll(\n+                                            schemaRestClient.getSchemas(SchemaType.DERIVED, AnyTypeKind.ANY_OBJECT));\n+                                    break;\n+\n+                                case AnyObjectVirtualSchema:\n+                                    choices.addAll(\n+                                            schemaRestClient.getSchemas(SchemaType.VIRTUAL, AnyTypeKind.ANY_OBJECT));\n+                                    break;\n+\n+                                default:\n+                            }\n+                        }\n+\n+                        panel = new AjaxPalettePanel.Builder<String>().setName(fieldName).build(\n+                                \"value\",\n+                                new PropertyModel<List<String>>(bean.getObject(), fieldName),\n+                                new ListModel<String>(\n+                                        CollectionUtils.collect(\n+                                                choices, new Transformer<AbstractSchemaTO, String>() {\n+\n+                                            @Override\n+                                            public String transform(final AbstractSchemaTO input) {\n+                                                return input.getKey();\n+                                            }\n+                                        }, new ArrayList<String>()))).hideLabel();\n+                    } else if (listItemType.isEnum()) {\n+                        panel = new AjaxPalettePanel.Builder<String>().setName(fieldName).build(\n+                                \"value\",\n+                                new PropertyModel<List<String>>(bean.getObject(), fieldName),\n+                                new ListModel(Arrays.asList(listItemType.getEnumConstants()))).hideLabel();\n+                    } else {\n+                        if (((List) wrapper.getPropertyValue(fieldName)).isEmpty()) {\n+                            ((List) wrapper.getPropertyValue(fieldName)).add(null);\n+                        }\n+\n+                        panel = new MultiFieldPanel.Builder<String>(\n+                                new PropertyModel<List<String>>(bean.getObject(), fieldName)).build(\n+                                \"value\",\n+                                fieldName,\n+                                buildSinglePanel(bean.getObject(), field.getType(), fieldName, \"panel\")).hideLabel();\n+                    }\n+                } else {\n+                    panel = buildSinglePanel(bean.getObject(), field.getType(), fieldName, \"value\").hideLabel();\n+                }\n+\n+                item.add(panel.setRenderBodyOnly(true));\n+            }\n+\n+        }.setReuseItems(true).setOutputMarkupId(true));\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private FieldPanel buildSinglePanel(\n+            final Serializable bean, final Class<?> type, final String fieldName, final String id) {\n+        FieldPanel result = null;\n+        PropertyModel model = new PropertyModel(bean, fieldName);\n+        if (ClassUtils.isAssignable(Boolean.class, type)) {\n+            result = new AjaxCheckBoxPanel(id, fieldName, model);\n+        } else if (ClassUtils.isAssignable(Number.class, type)) {\n+            result = new AjaxSpinnerFieldPanel.Builder<Number>().build(\n+                    id, fieldName, (Class<Number>) ClassUtils.resolvePrimitiveIfNecessary(type), model);\n+        } else if (Date.class.equals(type)) {\n+            result = new DateTimeFieldPanel(id, fieldName, model, SyncopeConstants.DEFAULT_DATE_PATTERN);\n+        } else if (type.isEnum()) {\n+            result = new AjaxDropDownChoicePanel(id, fieldName, model).setChoices(\n+                    Arrays.asList(type.getEnumConstants()));\n+        }\n+\n+        // treat as String if nothing matched above\n+        if (result == null) {\n+            result = new AjaxTextFieldPanel(id, fieldName, model);\n+        }\n+\n+        result.hideLabel();\n+        return result;\n+    }\n+}"},{"sha":"5671bdd71eaff4e084ac2a048ff4d8658c66e2fd","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/AccountPolicyDirectoryPanel.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import static org.apache.wicket.Component.ENABLE;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.CollectionPropertyColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+/**\n+ * Account policies page.\n+ */\n+public class AccountPolicyDirectoryPanel extends PolicyDirectoryPanel<AccountPolicyTO> {\n+\n+    private static final long serialVersionUID = 4984337552918213290L;\n+\n+    public AccountPolicyDirectoryPanel(final String id, final PageReference pageRef) {\n+        super(id, PolicyType.ACCOUNT, pageRef);\n+\n+        this.addNewItemPanelBuilder(new PolicyModalPanelBuilder<AccountPolicyTO>(\n+                new AccountPolicyTO(), modal, pageRef), true);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, ENABLE, StandardEntitlement.POLICY_CREATE);\n+\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected void addCustomColumnFields(final List<IColumn<AccountPolicyTO, String>> columns) {\n+        columns.add(new CollectionPropertyColumn<AccountPolicyTO>(new StringResourceModel(\n+                \"passthroughResources\", this, null), \"passthroughResources\", \"passthroughResources\"));\n+\n+        columns.add(new PropertyColumn<AccountPolicyTO, String>(new StringResourceModel(\n+                \"maxAuthenticationAttempts\", this, null), \"maxAuthenticationAttempts\", \"maxAuthenticationAttempts\"));\n+\n+        columns.add(new BooleanPropertyColumn<AccountPolicyTO>(new StringResourceModel(\n+                \"propagateSuspension\", this, null), \"propagateSuspension\", \"propagateSuspension\"));\n+    }\n+\n+    @Override\n+    protected void addCustomActions(\n+            final ActionLinksPanel.Builder<AccountPolicyTO> panel, final IModel<AccountPolicyTO> model) {\n+        panel.add(new ActionLink<AccountPolicyTO>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final AccountPolicyTO ignore) {\n+                target.add(ruleCompositionModal.setContent(new PolicyRuleDirectoryPanel<AccountPolicyTO>(\n+                        ruleCompositionModal, model.getObject().getKey(), PolicyType.ACCOUNT, pageRef)));\n+\n+                ruleCompositionModal.header(new StringResourceModel(\n+                        \"policy.rule.conf\", AccountPolicyDirectoryPanel.this, Model.of(model.getObject())));\n+\n+                MetaDataRoleAuthorizationStrategy.authorize(\n+                        ruleCompositionModal.getForm(), ENABLE, StandardEntitlement.POLICY_UPDATE);\n+\n+                ruleCompositionModal.show(true);\n+            }\n+        }, ActionLink.ActionType.COMPOSE, StandardEntitlement.POLICY_UPDATE);\n+    }\n+\n+}"},{"sha":"c05f983b02c4c3f5aca287df952275707987ffac","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PasswordPolicyDirectoryPanel.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPasswordPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPasswordPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPasswordPolicyDirectoryPanel.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import static org.apache.wicket.Component.ENABLE;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+/**\n+ * Password policies page.\n+ */\n+public class PasswordPolicyDirectoryPanel extends PolicyDirectoryPanel<PasswordPolicyTO> {\n+\n+    private static final long serialVersionUID = 4984337552918213290L;\n+\n+    public PasswordPolicyDirectoryPanel(final String id, final PageReference pageRef) {\n+        super(id, PolicyType.PASSWORD, pageRef);\n+\n+        this.addNewItemPanelBuilder(\n+                new PolicyModalPanelBuilder<PasswordPolicyTO>(new PasswordPolicyTO(), modal, pageRef), true);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, ENABLE, StandardEntitlement.POLICY_CREATE);\n+\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected void addCustomColumnFields(final List<IColumn<PasswordPolicyTO, String>> columns) {\n+        columns.add(new PropertyColumn<PasswordPolicyTO, String>(new StringResourceModel(\n+                \"historyLength\", this, null), \"historyLength\", \"historyLength\"));\n+\n+        columns.add(new BooleanPropertyColumn<PasswordPolicyTO>(new StringResourceModel(\n+                \"allowNullPassword\", this, null), \"allowNullPassword\", \"allowNullPassword\"));\n+    }\n+\n+    @Override\n+    protected void addCustomActions(\n+            final ActionLinksPanel.Builder<PasswordPolicyTO> panel, final IModel<PasswordPolicyTO> model) {\n+        panel.add(new ActionLink<PasswordPolicyTO>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final PasswordPolicyTO ignore) {\n+                target.add(ruleCompositionModal.setContent(new PolicyRuleDirectoryPanel<PasswordPolicyTO>(\n+                        ruleCompositionModal, model.getObject().getKey(), PolicyType.PASSWORD, pageRef)));\n+\n+                ruleCompositionModal.header(new StringResourceModel(\n+                        \"policy.rule.conf\", PasswordPolicyDirectoryPanel.this, Model.of(model.getObject())));\n+\n+                MetaDataRoleAuthorizationStrategy.authorize(\n+                        ruleCompositionModal.getForm(), ENABLE, StandardEntitlement.POLICY_UPDATE);\n+\n+                ruleCompositionModal.show(true);\n+            }\n+        }, ActionLink.ActionType.COMPOSE, StandardEntitlement.POLICY_UPDATE);\n+    }\n+}"},{"sha":"dfce46dd957c11e08d6df1005a5d2761ec41b43c","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.java","status":"added","additions":264,"deletions":0,"changes":264,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.panels.DirectoryPanel;\n+import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.CollectionPropertyColumn;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.KeyPropertyColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink.ActionType;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.client.console.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+/**\n+ * Policies page.\n+ *\n+ * @param <T> policy type.\n+ */\n+public abstract class PolicyDirectoryPanel<T extends AbstractPolicyTO>\n+        extends DirectoryPanel<T, T, DirectoryDataProvider<T>, PolicyRestClient> {\n+\n+    private static final long serialVersionUID = 4984337552918213290L;\n+\n+    protected final BaseModal<T> ruleCompositionModal = new BaseModal<T>(\"outer\") {\n+\n+        private static final long serialVersionUID = 389935548143327858L;\n+\n+        @Override\n+        protected void onConfigure() {\n+            super.onConfigure();\n+            setFooterVisible(false);\n+        }\n+\n+    };\n+\n+    protected final BaseModal<T> policySpecModal = new BaseModal<T>(\"outer\");\n+\n+    private final PolicyType policyType;\n+\n+    public PolicyDirectoryPanel(final String id, final PolicyType policyType, final PageReference pageRef) {\n+        super(id, pageRef, true);\n+        this.policyType = policyType;\n+        this.restClient = new PolicyRestClient();\n+\n+        ruleCompositionModal.size(Modal.Size.Large);\n+        setWindowClosedReloadCallback(ruleCompositionModal);\n+        addOuterObject(ruleCompositionModal);\n+\n+        policySpecModal.size(Modal.Size.Large);\n+        policySpecModal.addSubmitButton();\n+        setWindowClosedReloadCallback(policySpecModal);\n+        addOuterObject(policySpecModal);\n+\n+        modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487129L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                updateResultTable(target);\n+                modal.show(false);\n+            }\n+        });\n+\n+        setFooterVisibility(true);\n+        modal.addSubmitButton();\n+        modal.size(Modal.Size.Large);\n+    }\n+\n+    @Override\n+    protected List<IColumn<T, String>> getColumns() {\n+        final List<IColumn<T, String>> columns = new ArrayList<>();\n+\n+        columns.add(new KeyPropertyColumn<T>(\n+                new StringResourceModel(\"key\", this, null), \"key\", \"key\"));\n+\n+        columns.add(new PropertyColumn<T, String>(new StringResourceModel(\n+                \"description\", this, null), \"description\", \"description\"));\n+\n+        columns.add(new CollectionPropertyColumn<T>(\n+                new StringResourceModel(\"usedByResources\", this, null), \"usedByResources\", \"usedByResources\"));\n+\n+        columns.add(new CollectionPropertyColumn<T>(\n+                new StringResourceModel(\"usedByRealms\", this, null), \"usedByRealms\", \"usedByRealms\"));\n+\n+        addCustomColumnFields(columns);\n+\n+        columns.add(new ActionColumn<T, String>(new ResourceModel(\"actions\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public ActionLinksPanel<T> getActions(final String componentId, final IModel<T> model) {\n+\n+                final ActionLinksPanel.Builder<T> panel = ActionLinksPanel.<T>builder().\n+                        add(new ActionLink<T>() {\n+\n+                            private static final long serialVersionUID = -3722207913631435501L;\n+\n+                            @Override\n+                            public void onClick(final AjaxRequestTarget target, final AbstractPolicyTO ignore) {\n+                                final AbstractPolicyTO clone = SerializationUtils.clone(model.getObject());\n+                                clone.setKey(null);\n+                                send(PolicyDirectoryPanel.this, Broadcast.EXACT,\n+                                        new AjaxWizard.EditItemActionEvent<>(clone, target));\n+                            }\n+                        }, ActionLink.ActionType.CLONE, StandardEntitlement.POLICY_CREATE).\n+                        add(new ActionLink<T>() {\n+\n+                            private static final long serialVersionUID = -3722207913631435501L;\n+\n+                            @Override\n+                            public void onClick(final AjaxRequestTarget target, final AbstractPolicyTO ignore) {\n+                                send(PolicyDirectoryPanel.this, Broadcast.EXACT,\n+                                        new AjaxWizard.EditItemActionEvent<>(\n+                                                restClient.getPolicy(model.getObject().getKey()), target));\n+                            }\n+                        }, ActionLink.ActionType.EDIT, StandardEntitlement.POLICY_UPDATE).\n+                        add(new ActionLink<T>() {\n+\n+                            private static final long serialVersionUID = -3722207913631435501L;\n+\n+                            @Override\n+                            public void onClick(final AjaxRequestTarget target, final AbstractPolicyTO ignore) {\n+                                final T policyTO = model.getObject();\n+                                try {\n+                                    restClient.delete(policyTO.getKey());\n+                                    info(getString(Constants.OPERATION_SUCCEEDED));\n+                                    target.add(container);\n+                                } catch (SyncopeClientException e) {\n+                                    LOG.error(\"While deleting {}\", policyTO.getKey(), e);\n+                                    error(StringUtils.isBlank(e.getMessage())\n+                                            ? e.getClass().getName() : e.getMessage());\n+                                }\n+                                SyncopeConsoleSession.get().getNotificationPanel().refresh(target);\n+                            }\n+                        }, ActionLink.ActionType.DELETE, StandardEntitlement.POLICY_DELETE);\n+\n+                addCustomActions(panel, model);\n+                return panel.build(componentId);\n+            }\n+\n+            @Override\n+            public ActionLinksPanel<ReportTO> getHeader(final String componentId) {\n+                final ActionLinksPanel.Builder<ReportTO> panel = ActionLinksPanel.builder();\n+\n+                return panel.add(new ActionLink<ReportTO>() {\n+\n+                    private static final long serialVersionUID = -7978723352517770644L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n+                        if (target != null) {\n+                            target.add(container);\n+                        }\n+                    }\n+                }, ActionLink.ActionType.RELOAD, StandardEntitlement.TASK_LIST).build(componentId);\n+            }\n+        });\n+\n+        return columns;\n+    }\n+\n+    protected void addCustomColumnFields(final List<IColumn<T, String>> columns) {\n+    }\n+\n+    protected void addCustomActions(final ActionLinksPanel.Builder<T> panel, final IModel<T> model) {\n+    }\n+\n+    @Override\n+    protected Collection<ActionType> getBulkActions() {\n+        final List<ActionType> bulkActions = new ArrayList<>();\n+        bulkActions.add(ActionType.EXECUTE);\n+        bulkActions.add(ActionType.DELETE);\n+        return bulkActions;\n+    }\n+\n+    @Override\n+    protected PolicyDataProvider dataProvider() {\n+        return new PolicyDataProvider(rows);\n+    }\n+\n+    @Override\n+    protected String paginatorRowsKey() {\n+        return Constants.PREF_POLICY_PAGINATOR_ROWS;\n+    }\n+\n+    protected class PolicyDataProvider extends DirectoryDataProvider<T> {\n+\n+        private static final long serialVersionUID = 4725679400450513556L;\n+\n+        private final SortableDataProviderComparator<T> comparator;\n+\n+        public PolicyDataProvider(final int paginatorRows) {\n+            super(paginatorRows);\n+\n+            setSort(\"description\", SortOrder.DESCENDING);\n+            comparator = new SortableDataProviderComparator<>(this);\n+        }\n+\n+        @Override\n+        public Iterator<T> iterator(final long first, final long count) {\n+            List<T> list = restClient.getPolicies(policyType);\n+            Collections.sort(list, comparator);\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return restClient.getPolicies(policyType).size();\n+        }\n+\n+        @Override\n+        public IModel<T> model(final T object) {\n+            return new CompoundPropertyModel<>(object);\n+        }\n+    }\n+}"},{"sha":"1c99859313c462e8a03341cc2c62fb0d867b68ed","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java","status":"added","additions":169,"deletions":0,"changes":169,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.AbstractModalPanel;\n+import org.apache.syncope.client.console.panels.WizardModalPanel;\n+import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.rest.ResourceRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSpinnerFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wizards.AbstractModalPanelBuilder;\n+import org.apache.syncope.client.console.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.util.ListModel;\n+\n+public class PolicyModalPanelBuilder<T extends AbstractPolicyTO> extends AbstractModalPanelBuilder<T> {\n+\n+    private static final long serialVersionUID = 5945391813567245081L;\n+\n+    private final BaseModal<T> modal;\n+\n+    private final PolicyRestClient restClient = new PolicyRestClient();\n+\n+    public PolicyModalPanelBuilder(final T policyTO, final BaseModal<T> modal, final PageReference pageRef) {\n+        super(policyTO, pageRef);\n+        this.modal = modal;\n+    }\n+\n+    @Override\n+    public WizardModalPanel<T> build(final String id, final int index, final AjaxWizard.Mode mode) {\n+        return new Profile(newModelObject(), modal, pageRef);\n+    }\n+\n+    public class Profile extends AbstractModalPanel<T> {\n+\n+        private static final long serialVersionUID = -3043839139187792810L;\n+\n+        private final T policyTO;\n+\n+        private final LoadableDetachableModel<List<String>> resources = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return CollectionUtils.collect(\n+                        new ResourceRestClient().list(),\n+                        new Transformer<ResourceTO, String>() {\n+\n+                    @Override\n+                    public String transform(final ResourceTO input) {\n+                        return input.getKey();\n+                    }\n+                }, new ArrayList<String>());\n+            }\n+        };\n+\n+        public Profile(final T policyTO, final BaseModal<T> modal, final PageReference pageRef) {\n+            super(modal, pageRef);\n+            modal.setFormModel(policyTO);\n+\n+            this.policyTO = policyTO;\n+\n+            final List<Component> components = new ArrayList<>();\n+\n+            components.add(new AjaxTextFieldPanel(\n+                    \"field\", \"description\", new PropertyModel<String>(policyTO, \"description\"), false));\n+\n+            if (policyTO instanceof AccountPolicyTO) {\n+                components.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n+                        \"field\",\n+                        \"maxAuthenticationAttempts\",\n+                        Integer.class,\n+                        new PropertyModel<Integer>(policyTO, \"maxAuthenticationAttempts\")));\n+\n+                components.add(new AjaxCheckBoxPanel(\n+                        \"field\",\n+                        \"propagateSuspension\",\n+                        new PropertyModel<Boolean>(policyTO, \"propagateSuspension\"),\n+                        false));\n+\n+                components.add(new AjaxPalettePanel.Builder<String>().setName(\"passthroughResources\").build(\n+                        \"field\",\n+                        new PropertyModel<List<String>>(policyTO, \"passthroughResources\"),\n+                        new ListModel<String>(resources.getObject())));\n+            }\n+\n+            if (policyTO instanceof PasswordPolicyTO) {\n+                components.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n+                        \"field\",\n+                        \"historyLength\",\n+                        Integer.class,\n+                        new PropertyModel<Integer>(policyTO, \"historyLength\")));\n+\n+                components.add(new AjaxCheckBoxPanel(\n+                        \"field\",\n+                        \"allowNullPassword\",\n+                        new PropertyModel<Boolean>(policyTO, \"allowNullPassword\"),\n+                        false));\n+            }\n+\n+            add(new ListView<Component>(\"fields\", components) {\n+\n+                private static final long serialVersionUID = -9180479401817023838L;\n+\n+                @Override\n+                protected void populateItem(final ListItem<Component> item) {\n+                    item.add(item.getModelObject());\n+                }\n+\n+            });\n+        }\n+\n+        @Override\n+        public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+            try {\n+                if (policyTO.getKey() == null) {\n+                    restClient.createPolicy(policyTO);\n+                } else {\n+                    restClient.updatePolicy(policyTO);\n+                }\n+                info(getString(Constants.OPERATION_SUCCEEDED));\n+                Profile.this.modal.close(target);\n+            } catch (Exception e) {\n+                LOG.error(\"While creating/updating policy\", e);\n+                error(StringUtils.isBlank(e.getMessage()) ? e.getClass().getName() : e.getMessage());\n+            }\n+            SyncopeConsoleSession.get().getNotificationPanel().refresh(target);\n+        }\n+    }\n+\n+}"},{"sha":"2d1ce5ef6c6dc35854a2b1b14432b11ccfc86cef","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"added","additions":332,"deletions":0,"changes":332,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,332 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.panels.DirectoryPanel;\n+import org.apache.syncope.client.console.panels.ModalPanel;\n+import org.apache.syncope.client.console.policies.PolicyRuleDirectoryPanel.PolicyRuleWrapper;\n+import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink.ActionType;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.client.console.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.RuleConf;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.core.util.lang.PropertyResolver;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+/**\n+ * Policy rules page.\n+ *\n+ * @param <T> policy type.\n+ */\n+public class PolicyRuleDirectoryPanel<T extends AbstractPolicyTO> extends DirectoryPanel<\n+        PolicyRuleWrapper, PolicyRuleWrapper, DirectoryDataProvider<PolicyRuleWrapper>, PolicyRestClient>\n+        implements ModalPanel {\n+\n+    private static final long serialVersionUID = 4984337552918213290L;\n+\n+    private final BaseModal<T> baseModal;\n+\n+    private final String policy;\n+\n+    protected PolicyRuleDirectoryPanel(\n+            final BaseModal<T> baseModal, final String policy, final PolicyType type, final PageReference pageRef) {\n+        super(BaseModal.CONTENT_ID, pageRef, false);\n+\n+        disableCheckBoxes();\n+\n+        this.baseModal = baseModal;\n+        this.policy = policy;\n+        this.restClient = new PolicyRestClient();\n+\n+        enableExitButton();\n+\n+        this.addNewItemPanelBuilder(new PolicyRuleWizardBuilder(policy, type, new PolicyRuleWrapper(), pageRef), true);\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, ENABLE, StandardEntitlement.POLICY_UPDATE);\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected List<IColumn<PolicyRuleWrapper, String>> getColumns() {\n+        final List<IColumn<PolicyRuleWrapper, String>> columns = new ArrayList<>();\n+\n+        columns.add(new PropertyColumn<PolicyRuleWrapper, String>(\n+                new StringResourceModel(\"ruleConf\", this, null), \"name\", \"name\"));\n+\n+        columns.add(new AbstractColumn<PolicyRuleWrapper, String>(\n+                new StringResourceModel(\"configuration\", this, null)) {\n+\n+            private static final long serialVersionUID = -4008579357070833846L;\n+\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<PolicyRuleWrapper>> cellItem,\n+                    final String componentId,\n+                    final IModel<PolicyRuleWrapper> rowModel) {\n+                cellItem.add(new Label(componentId, rowModel.getObject().getConf().getClass().getName()));\n+            }\n+        });\n+\n+        columns.add(new ActionColumn<PolicyRuleWrapper, String>(new ResourceModel(\"actions\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public ActionLinksPanel<PolicyRuleWrapper> getActions(final String componentId,\n+                    final IModel<PolicyRuleWrapper> model) {\n+\n+                final ActionLinksPanel<PolicyRuleWrapper> panel = ActionLinksPanel.<PolicyRuleWrapper>builder().\n+                        add(new ActionLink<PolicyRuleWrapper>() {\n+\n+                            private static final long serialVersionUID = -3722207913631435501L;\n+\n+                            @Override\n+                            public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper ignore) {\n+                                RuleConf clone = SerializationUtils.clone(model.getObject().getConf());\n+\n+                                send(PolicyRuleDirectoryPanel.this, Broadcast.EXACT,\n+                                        new AjaxWizard.EditItemActionEvent<>(\n+                                                new PolicyRuleWrapper().setConf(clone),\n+                                                target));\n+                            }\n+                        }, ActionLink.ActionType.CLONE, StandardEntitlement.POLICY_UPDATE).\n+                        add(new ActionLink<PolicyRuleWrapper>() {\n+\n+                            private static final long serialVersionUID = -3722207913631435501L;\n+\n+                            @Override\n+                            public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper ignore) {\n+                                send(PolicyRuleDirectoryPanel.this, Broadcast.EXACT,\n+                                        new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n+                            }\n+                        }, ActionLink.ActionType.EDIT, StandardEntitlement.POLICY_UPDATE).\n+                        add(new ActionLink<PolicyRuleWrapper>() {\n+\n+                            private static final long serialVersionUID = -3722207913631435501L;\n+\n+                            @Override\n+                            public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper ignore) {\n+                                final RuleConf rule = model.getObject().getConf();\n+                                try {\n+                                    final T actual = restClient.getPolicy(policy);\n+                                    CollectionUtils.filter(getRuleConf(actual), new Predicate<RuleConf>() {\n+\n+                                        @Override\n+                                        public boolean evaluate(final RuleConf object) {\n+                                            return !object.getName().equals(rule.getName());\n+                                        }\n+                                    });\n+                                    restClient.updatePolicy(actual);\n+                                    info(getString(Constants.OPERATION_SUCCEEDED));\n+                                    customActionOnCloseCallback(target);\n+                                } catch (SyncopeClientException e) {\n+                                    LOG.error(\"While deleting {}\", rule.getName(), e);\n+                                    error(StringUtils.isBlank(e.getMessage())\n+                                            ? e.getClass().getName() : e.getMessage());\n+                                }\n+                                SyncopeConsoleSession.get().getNotificationPanel().refresh(target);\n+                            }\n+                        }, ActionLink.ActionType.DELETE, StandardEntitlement.POLICY_UPDATE).build(componentId);\n+\n+                return panel;\n+            }\n+\n+            @Override\n+            public ActionLinksPanel<PolicyRuleWrapper> getHeader(final String componentId) {\n+                final ActionLinksPanel.Builder<PolicyRuleWrapper> panel = ActionLinksPanel.builder();\n+\n+                return panel.add(new ActionLink<PolicyRuleWrapper>() {\n+\n+                    private static final long serialVersionUID = -7978723352517770644L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper ignore) {\n+                        if (target != null) {\n+                            customActionOnCloseCallback(target);\n+                        }\n+                    }\n+                }, ActionLink.ActionType.RELOAD, StandardEntitlement.TASK_LIST).build(componentId);\n+            }\n+        });\n+\n+        return columns;\n+    }\n+\n+    @Override\n+    protected Collection<ActionType> getBulkActions() {\n+        final List<ActionType> bulkActions = new ArrayList<>();\n+        bulkActions.add(ActionType.DELETE);\n+        return bulkActions;\n+    }\n+\n+    @Override\n+    protected PolicyRuleDataProvider dataProvider() {\n+        return new PolicyRuleDataProvider(rows);\n+    }\n+\n+    @Override\n+    protected String paginatorRowsKey() {\n+        return Constants.PREF_POLICY_RULE_PAGINATOR_ROWS;\n+    }\n+\n+    protected class PolicyRuleDataProvider extends DirectoryDataProvider<PolicyRuleWrapper> {\n+\n+        private static final long serialVersionUID = 4725679400450513556L;\n+\n+        private final SortableDataProviderComparator<PolicyRuleWrapper> comparator;\n+\n+        public PolicyRuleDataProvider(final int paginatorRows) {\n+            super(paginatorRows);\n+\n+            //Default sorting\n+            setSort(\"name\", SortOrder.DESCENDING);\n+            comparator = new SortableDataProviderComparator<>(this);\n+        }\n+\n+        @Override\n+        public Iterator<PolicyRuleWrapper> iterator(final long first, final long count) {\n+            final T actual = restClient.getPolicy(policy);\n+\n+            final ArrayList<PolicyRuleWrapper> rules = CollectionUtils.collect(getRuleConf(actual),\n+                    new Transformer<RuleConf, PolicyRuleWrapper>() {\n+\n+                @Override\n+                public PolicyRuleWrapper transform(final RuleConf input) {\n+                    return new PolicyRuleWrapper(input.getName()).setName(input.getName()).setConf(input);\n+                }\n+            }, new ArrayList<PolicyRuleWrapper>());\n+\n+            Collections.sort(rules, comparator);\n+            return rules.subList((int) first, (int) (first + count)).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            final T actual = restClient.getPolicy(policy);\n+            return getRuleConf(actual).size();\n+        }\n+\n+        @Override\n+        public IModel<PolicyRuleWrapper> model(final PolicyRuleWrapper object) {\n+            return new CompoundPropertyModel<>(object);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private List<RuleConf> getRuleConf(final T policyTO) {\n+        Object res = PropertyResolver.getValue(\"ruleConfs\", policyTO);\n+        if (res instanceof List) {\n+            return (List<RuleConf>) res;\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public static class PolicyRuleWrapper implements Serializable {\n+\n+        private static final long serialVersionUID = 2472755929742424558L;\n+\n+        private String oldname;\n+\n+        private String name;\n+\n+        private RuleConf conf;\n+\n+        public PolicyRuleWrapper() {\n+            this(null);\n+        }\n+\n+        public PolicyRuleWrapper(final String name) {\n+            this.oldname = name;\n+        }\n+\n+        public boolean isNew() {\n+            return oldname == null;\n+        }\n+\n+        public String getOldName() {\n+            return this.oldname;\n+        }\n+\n+        public String getName() {\n+            return this.name;\n+        }\n+\n+        public PolicyRuleWrapper setName(final String name) {\n+            this.name = name;\n+            return this;\n+        }\n+\n+        public RuleConf getConf() {\n+            return conf;\n+        }\n+\n+        public PolicyRuleWrapper setConf(final RuleConf conf) {\n+            this.conf = conf;\n+            return this;\n+        }\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        super.onEvent(event);\n+        if (event.getPayload() instanceof ExitEvent && modal != null) {\n+            final AjaxRequestTarget target = ExitEvent.class.cast(event.getPayload()).getTarget();\n+            baseModal.show(false);\n+            baseModal.close(target);\n+        }\n+    }\n+}"},{"sha":"6854cf141ad56815df42893ea0563e6974b33652","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder.java","status":"added","additions":170,"deletions":0,"changes":170,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.panels.BeanPanel;\n+import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.ComposablePolicy;\n+import org.apache.syncope.common.lib.policy.RuleConf;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.wizard.WizardModel;\n+import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.springframework.beans.BeanWrapper;\n+import org.springframework.beans.PropertyAccessorFactory;\n+\n+public class PolicyRuleWizardBuilder\n+        extends AjaxWizardBuilder<PolicyRuleDirectoryPanel.PolicyRuleWrapper> {\n+\n+    private static final long serialVersionUID = 5945391813567245081L;\n+\n+    private final PolicyRestClient restClient = new PolicyRestClient();\n+\n+    private final String policy;\n+\n+    private final PolicyType type;\n+\n+    public PolicyRuleWizardBuilder(\n+            final String policy,\n+            final PolicyType type,\n+            final PolicyRuleDirectoryPanel.PolicyRuleWrapper reportlet,\n+            final PageReference pageRef) {\n+        super(reportlet, pageRef);\n+        this.policy = policy;\n+        this.type = type;\n+    }\n+\n+    @Override\n+    protected Serializable onApplyInternal(final PolicyRuleDirectoryPanel.PolicyRuleWrapper modelObject) {\n+        BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(modelObject.getConf());\n+        wrapper.setPropertyValue(\"name\", modelObject.getName());\n+\n+        AbstractPolicyTO policyTO = restClient.getPolicy(policy);\n+\n+        final ComposablePolicy<RuleConf> composable;\n+        if (policyTO instanceof ComposablePolicy) {\n+            composable = (ComposablePolicy<RuleConf>) policyTO;\n+        } else {\n+            throw new IllegalStateException(\"Non composable policy\");\n+        }\n+\n+        if (modelObject.isNew()) {\n+            composable.getRuleConfs().add(modelObject.getConf());\n+        } else {\n+            CollectionUtils.filter(\n+                    composable.getRuleConfs(), new Predicate<RuleConf>() {\n+\n+                @Override\n+                public boolean evaluate(final RuleConf object) {\n+                    return !object.getName().equals(modelObject.getOldName());\n+                }\n+            });\n+            composable.getRuleConfs().add(modelObject.getConf());\n+        }\n+\n+        restClient.updatePolicy(policyTO);\n+        return modelObject;\n+    }\n+\n+    @Override\n+    protected WizardModel buildModelSteps(\n+            final PolicyRuleDirectoryPanel.PolicyRuleWrapper modelObject, final WizardModel wizardModel) {\n+        wizardModel.add(new Profile(modelObject));\n+        wizardModel.add(new Configuration(modelObject));\n+        return wizardModel;\n+    }\n+\n+    public class Profile extends WizardStep {\n+\n+        private static final long serialVersionUID = -3043839139187792810L;\n+\n+        public Profile(final PolicyRuleDirectoryPanel.PolicyRuleWrapper rule) {\n+\n+            final AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n+                    \"name\", \"rule\", new PropertyModel<String>(rule, \"name\"), false);\n+            name.addRequiredLabel();\n+            add(name);\n+\n+            final AjaxDropDownChoicePanel<String> conf = new AjaxDropDownChoicePanel<>(\n+                    \"configuration\", \"configuration\", new PropertyModel<String>(rule, \"conf\") {\n+\n+                private static final long serialVersionUID = -6427731218492117883L;\n+\n+                @Override\n+                public String getObject() {\n+                    return rule.getConf() == null ? null : rule.getConf().getClass().getName();\n+                }\n+\n+                @Override\n+                public void setObject(final String object) {\n+                    RuleConf conf = null;\n+\n+                    try {\n+                        conf = RuleConf.class.cast(Class.forName(object).newInstance());\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        LOG.warn(\"Error retrieving reportlet configuration instance\", e);\n+                    }\n+\n+                    rule.setConf(conf);\n+                }\n+            });\n+\n+            if (type == PolicyType.ACCOUNT) {\n+                conf.setChoices(new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getAccountRules()));\n+            } else if (type == PolicyType.PASSWORD) {\n+                conf.setChoices(new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getPasswordRules()));\n+            }\n+\n+            conf.addRequiredLabel();\n+            add(conf);\n+        }\n+    }\n+\n+    public class Configuration extends WizardStep {\n+\n+        private static final long serialVersionUID = -785981096328637758L;\n+\n+        private final LoadableDetachableModel<Serializable> bean;\n+\n+        public Configuration(final PolicyRuleDirectoryPanel.PolicyRuleWrapper rule) {\n+            bean = new LoadableDetachableModel<Serializable>() {\n+\n+                private static final long serialVersionUID = 2092144708018739371L;\n+\n+                @Override\n+                protected Serializable load() {\n+                    return rule.getConf();\n+                }\n+            };\n+\n+            add(new BeanPanel(\"bean\", bean).setRenderBodyOnly(true));\n+        }\n+    }\n+}"},{"sha":"f166d10a84f0c0e6b8cc1661904866e359a7fb0a","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicySpecModalPanel.java","status":"added","additions":353,"deletions":0,"changes":353,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,353 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.AbstractModalPanel;\n+import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n+import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.MultiPanel;\n+import org.apache.syncope.common.lib.policy.PullPolicyTO;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class PolicySpecModalPanel extends AbstractModalPanel<PullPolicyTO> {\n+\n+    private static final long serialVersionUID = 5945391813567245081L;\n+\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    private final IModel<List<CorrelationRule>> model;\n+\n+    private final PolicyRestClient restClient = new PolicyRestClient();\n+\n+    public PolicySpecModalPanel(\n+            final PullPolicyTO policyTO, final BaseModal<PullPolicyTO> modal, final PageReference pageRef) {\n+        super(modal, pageRef);\n+        modal.setFormModel(policyTO);\n+\n+        add(new AjaxDropDownChoicePanel<ConflictResolutionAction>(\n+                \"conflictResolutionAction\",\n+                \"conflictResolutionAction\",\n+                new PropertyModel<ConflictResolutionAction>(policyTO.getSpecification(), \"conflictResolutionAction\")).\n+                setChoices(Arrays.asList(ConflictResolutionAction.values())));\n+\n+        model = new PropertyModel<List<CorrelationRule>>(policyTO.getSpecification(), \"correlationRules\") {\n+\n+            private static final long serialVersionUID = -8168676563540297301L;\n+\n+            private List<CorrelationRule> rules = CollectionUtils.collect(\n+                    policyTO.getSpecification().getCorrelationRules() == null\n+                            ? Collections.<String>emptySet()\n+                            : policyTO.getSpecification().getCorrelationRules().keySet(),\n+                    new Transformer<String, CorrelationRule>() {\n+\n+                @Override\n+                public CorrelationRule transform(final String input) {\n+                    return new CorrelationRule(input, policyTO.getSpecification().getCorrelationRules().get(\n+                            input));\n+                }\n+            }, new ArrayList<CorrelationRule>());\n+\n+            @Override\n+            public List<CorrelationRule> getObject() {\n+                return rules;\n+            }\n+\n+            @Override\n+            public void setObject(final List<CorrelationRule> object) {\n+                policyTO.getSpecification().getCorrelationRules().clear();\n+                for (CorrelationRule rule : rules) {\n+                    policyTO.getSpecification().getCorrelationRules().put(rule.getAny(), rule.getRule());\n+                }\n+            }\n+\n+        };\n+\n+        add(new MultiPanel<CorrelationRule>(\"correlationRules\", \"correlationRules\", model, false) {\n+\n+            private static final long serialVersionUID = -2481579077338205547L;\n+\n+            @Override\n+            protected CorrelationRule newModelObject() {\n+                return new CorrelationRule();\n+            }\n+\n+            @Override\n+            protected CorrelationRulePanel getItemPanel(final ListItem<CorrelationRule> item) {\n+                return new CorrelationRulePanel(\"panel\", item.getModelObject());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+        try {\n+            getItem().getSpecification().getCorrelationRules().clear();\n+            for (CorrelationRule rule : model.getObject()) {\n+                getItem().getSpecification().getCorrelationRules().put(rule.getAny(), rule.getRule());\n+            }\n+            restClient.updatePolicy(getItem());\n+            info(getString(Constants.OPERATION_SUCCEEDED));\n+            this.modal.close(target);\n+        } catch (Exception e) {\n+            LOG.error(\"While creating/updating policy\", e);\n+            error(StringUtils.isBlank(e.getMessage()) ? e.getClass().getName() : e.getMessage());\n+        }\n+        SyncopeConsoleSession.get().getNotificationPanel().refresh(target);\n+    }\n+\n+    public static class CorrelationRulePanel extends Panel {\n+\n+        private static final long serialVersionUID = -4708008994320210839L;\n+\n+        public CorrelationRulePanel(final String id, final CorrelationRule rule) {\n+            super(id);\n+\n+            final AjaxDropDownChoicePanel<String> anyType = new AjaxDropDownChoicePanel<>(\n+                    \"anyType\", \"any.type\", new PropertyModel<String>(rule, \"any\")).\n+                    setNullValid(true).\n+                    setChoices(CollectionUtils.collect(\n+                            new AnyTypeRestClient().list(),\n+                            new Transformer<AnyTypeTO, String>() {\n+\n+                        @Override\n+                        public String transform(final AnyTypeTO input) {\n+                            return input.getKey();\n+                        }\n+                    }, new ArrayList<String>()));\n+            add(anyType);\n+\n+            final AjaxDropDownChoicePanel<String> ruleType = new AjaxDropDownChoicePanel<>(\n+                    \"ruleType\", \"rule.type\", new PropertyModel<String>(rule, \"type\"), false).\n+                    setNullValid(true).\n+                    setChoices(Arrays.asList(\"PLAIN\", \"JAVA\"));\n+            add(ruleType);\n+\n+            // ---------------------------------------------------------------\n+            // Java rule palette\n+            // ---------------------------------------------------------------\n+            final AjaxDropDownChoicePanel<String> javaRule = new AjaxDropDownChoicePanel<>(\n+                    \"javaRule\", \"rule.java\", new PropertyModel<String>(rule, \"rule\")).setChoices(\n+                    new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getPullCorrelationRules()));\n+            javaRule.setOutputMarkupPlaceholderTag(true);\n+            add(javaRule.setVisible(\"JAVA\".equals(rule.getType())));\n+            // ---------------------------------------------------------------\n+\n+            // ---------------------------------------------------------------\n+            // Json rule palette\n+            // ---------------------------------------------------------------\n+            final LoadableDetachableModel<List<String>> plainSchemas = new LoadableDetachableModel<List<String>>() {\n+\n+                private static final long serialVersionUID = 5275935387613157437L;\n+\n+                @Override\n+                protected List<String> load() {\n+                    return getPlainSchemas(rule);\n+                }\n+            };\n+\n+            final AjaxPalettePanel.Builder<String> jsonRuleBuilder\n+                    = new AjaxPalettePanel.Builder<String>().setName(\"rule.json\");\n+\n+            final PropertyModel<List<String>> jsonRuleModel = new PropertyModel<List<String>>(rule, \"rule\") {\n+\n+                private static final long serialVersionUID = 3799387950428254072L;\n+\n+                @Override\n+                public List<String> getObject() {\n+                    final List<String> res = new ArrayList<>();\n+                    try {\n+                        JsonNode obj = OBJECT_MAPPER.readTree(rule.getRule());\n+                        if (obj.isArray()) {\n+                            for (final JsonNode objNode : obj) {\n+                                res.add(objNode.asText());\n+                            }\n+                        }\n+                    } catch (IOException e) {\n+                        LOG.warn(\"Error deserializing json tree\", e);\n+                    }\n+                    return res;\n+                }\n+\n+                @Override\n+                public void setObject(final List<String> object) {\n+                    final StringBuilder bld = new StringBuilder();\n+                    bld.append(\"[\");\n+\n+                    boolean comma = false;\n+                    for (String obj : object) {\n+                        if (comma) {\n+                            bld.append(\",\");\n+                        } else {\n+                            comma = true;\n+                        }\n+                        bld.append(\"\\\"\").append(obj).append(\"\\\"\");\n+                    }\n+                    bld.append(\"]\");\n+                    rule.setRule(bld.toString());\n+                }\n+            };\n+\n+            final AjaxPalettePanel<String> jsonRule = jsonRuleBuilder.build(\"jsonRule\", jsonRuleModel, plainSchemas);\n+\n+            jsonRule.setOutputMarkupPlaceholderTag(true);\n+\n+            anyType.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                private static final long serialVersionUID = -1107858522700306810L;\n+\n+                @Override\n+                protected void onUpdate(final AjaxRequestTarget target) {\n+                    if (jsonRule.isVisibleInHierarchy()) {\n+                        jsonRule.getChoicesModel().setObject(getPlainSchemas(rule));\n+                        jsonRule.reload(target);\n+                    }\n+                }\n+            });\n+\n+            add(jsonRule.setVisible(\"PLAIN\".equals(rule.getType())));\n+            // ---------------------------------------------------------------\n+\n+            ruleType.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                private static final long serialVersionUID = -1107858522700306810L;\n+\n+                @Override\n+                protected void onUpdate(final AjaxRequestTarget target) {\n+                    switch (ruleType.getModelObject() == null ? StringUtils.EMPTY : ruleType.getModelObject()) {\n+                        case \"PLAIN\":\n+                            jsonRule.setVisible(true);\n+                            jsonRule.getChoicesModel().setObject(getPlainSchemas(rule));\n+                            jsonRule.reload(target);\n+\n+                            javaRule.setVisible(false);\n+\n+                            break;\n+                        case \"JAVA\":\n+                            jsonRule.setVisible(false);\n+                            javaRule.setVisible(true);\n+                            break;\n+                        default:\n+                            javaRule.setVisible(false);\n+                            jsonRule.setVisible(false);\n+\n+                    }\n+                    target.add(jsonRule);\n+                    target.add(javaRule);\n+                }\n+            });\n+        }\n+\n+        private static List<String> getPlainSchemas(final CorrelationRule rule) {\n+            final List<String> choices = StringUtils.isEmpty(rule.getAny())\n+                    ? new ArrayList<String>()\n+                    : CollectionUtils.collect(\n+                            new SchemaRestClient().getSchemas(SchemaType.PLAIN,\n+                                    rule.getAny().equals(AnyTypeKind.USER.name())\n+                                    ? AnyTypeKind.USER : rule.getAny().equals(AnyTypeKind.GROUP.name())\n+                                    ? AnyTypeKind.GROUP\n+                                    : AnyTypeKind.ANY_OBJECT), new Transformer<AbstractSchemaTO, String>() {\n+\n+                        @Override\n+                        public String transform(final AbstractSchemaTO input) {\n+                            return input.getKey();\n+                        }\n+                    }, new ArrayList<String>());\n+\n+            Collections.sort(choices);\n+            return choices;\n+        }\n+    }\n+\n+    protected static class CorrelationRule implements Serializable {\n+\n+        private static final long serialVersionUID = 5250228867297353011L;\n+\n+        private String any;\n+\n+        private String type;\n+\n+        private String rule;\n+\n+        public CorrelationRule() {\n+            this.any = AnyTypeKind.USER.name();\n+            this.type = \"PLAIN\";\n+            this.rule = \"[]\";\n+        }\n+\n+        public CorrelationRule(final String any, final String rule) {\n+            this.any = any;\n+            this.type = StringUtils.isEmpty(rule) || rule.trim().startsWith(\"[\") ? \"PLAIN\" : \"JAVA\";\n+            this.rule = rule;\n+        }\n+\n+        public String getAny() {\n+            return any;\n+        }\n+\n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getRule() {\n+            return rule;\n+        }\n+\n+        public void setAny(final String any) {\n+            this.any = any;\n+        }\n+\n+        public void setType(final String type) {\n+            this.type = type;\n+        }\n+\n+        public void setRule(final String rule) {\n+            this.rule = rule;\n+        }\n+    }\n+}"},{"sha":"99bd048d3d12cf505d2cbcd6995df511e0235711","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import static org.apache.wicket.Component.ENABLE;\n+\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.common.lib.policy.PullPolicySpec;\n+import org.apache.syncope.common.lib.policy.PullPolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+/**\n+ * Pull policies page.\n+ */\n+public class PullPolicyDirectoryPanel extends PolicyDirectoryPanel<PullPolicyTO> {\n+\n+    private static final long serialVersionUID = 4984337552918213290L;\n+\n+    public PullPolicyDirectoryPanel(final String id, final PageReference pageRef) {\n+        super(id, PolicyType.PULL, pageRef);\n+\n+        final PullPolicyTO defaultItem = new PullPolicyTO();\n+        defaultItem.setSpecification(new PullPolicySpec());\n+\n+        this.addNewItemPanelBuilder(\n+                new PolicyModalPanelBuilder<PullPolicyTO>(defaultItem, modal, pageRef), true);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, ENABLE, StandardEntitlement.POLICY_CREATE);\n+\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected void addCustomActions(\n+            final ActionLinksPanel.Builder<PullPolicyTO> panel, final IModel<PullPolicyTO> model) {\n+        panel.add(new ActionLink<PullPolicyTO>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final PullPolicyTO ignore) {\n+                target.add(policySpecModal.setContent(\n+                        new PolicySpecModalPanel(model.getObject(), policySpecModal, pageRef)));\n+\n+                policySpecModal.header(new StringResourceModel(\n+                        \"policy.rule.conf\", PullPolicyDirectoryPanel.this, Model.of(model.getObject())));\n+\n+                MetaDataRoleAuthorizationStrategy.authorize(\n+                        policySpecModal.getForm(), ENABLE, StandardEntitlement.POLICY_UPDATE);\n+\n+                policySpecModal.show(true);\n+            }\n+        }, ActionLink.ActionType.COMPOSE, StandardEntitlement.POLICY_UPDATE);\n+    }\n+}"},{"sha":"1eb86e21687d8488d7a9bd4a00762c59372901d1","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -98,7 +98,6 @@ protected ReportletDirectoryPanel(\n         this.addNewItemPanelBuilder(new ReportletWizardBuilder(report, new ReportletWrapper(), pageRef), true);\n \n         MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, ENABLE, StandardEntitlement.REPORT_UPDATE);\n-        restClient = new ReportRestClient();\n         initResultTable();\n     }\n "},{"sha":"7156acf7cb88c4096727b0d2e8ce5b9813d4ef54","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletWizardBuilder.java","status":"modified","additions":8,"deletions":224,"changes":232,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -19,61 +19,30 @@\n package org.apache.syncope.client.console.reports;\n \n import java.io.Serializable;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.ParameterizedType;\n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Date;\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.console.panels.search.AnyObjectSearchPanel;\n-import org.apache.syncope.client.console.panels.search.GroupSearchPanel;\n+import org.apache.syncope.client.console.panels.BeanPanel;\n import org.apache.syncope.client.console.panels.search.SearchClause;\n import org.apache.syncope.client.console.panels.search.SearchUtils;\n-import org.apache.syncope.client.console.panels.search.UserSearchPanel;\n import org.apache.syncope.client.console.rest.ReportRestClient;\n-import org.apache.syncope.client.console.rest.SchemaRestClient;\n-import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.DateTimeFieldPanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.report.AbstractReportletConf;\n-import org.apache.syncope.common.lib.report.Schema;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardModel;\n import org.apache.wicket.extensions.wizard.WizardStep;\n-import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.markup.html.list.ListItem;\n-import org.apache.wicket.markup.html.list.ListView;\n-import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.PropertyModel;\n-import org.apache.wicket.model.ResourceModel;\n-import org.apache.wicket.model.util.ListModel;\n import org.springframework.beans.BeanWrapper;\n import org.springframework.beans.PropertyAccessorFactory;\n-import org.springframework.util.ClassUtils;\n-import org.apache.syncope.common.lib.report.SearchCondition;\n import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n+import org.apache.wicket.model.LoadableDetachableModel;\n \n public class ReportletWizardBuilder extends AjaxWizardBuilder<ReportletDirectoryPanel.ReportletWrapper> {\n \n@@ -177,204 +146,19 @@ public class Configuration extends WizardStep {\n \n         private static final long serialVersionUID = -785981096328637758L;\n \n-        private final String[] excluded = new String[] { \"serialVersionUID\", \"class\", \"name\", \"reportletClassName\" };\n-\n-        private final ReportletDirectoryPanel.ReportletWrapper reportlet;\n-\n         public Configuration(final ReportletDirectoryPanel.ReportletWrapper reportlet) {\n-            this.reportlet = reportlet;\n-\n-            LoadableDetachableModel<List<String>> propViewModel = new LoadableDetachableModel<List<String>>() {\n+            final LoadableDetachableModel<Serializable> bean = new LoadableDetachableModel<Serializable>() {\n \n-                private static final long serialVersionUID = 5275935387613157437L;\n+                private static final long serialVersionUID = 2092144708018739371L;\n \n                 @Override\n-                protected List<String> load() {\n-                    List<String> result = new ArrayList<String>();\n-                    if (Configuration.this.reportlet.getConf() != null) {\n-                        for (Field field : Configuration.this.reportlet.getConf().getClass().getDeclaredFields()) {\n-                            if (!ArrayUtils.contains(excluded, field.getName())) {\n-                                result.add(field.getName());\n-                            }\n-                        }\n-                    }\n-\n-                    return result;\n+                protected Serializable load() {\n+                    return reportlet.getConf();\n                 }\n             };\n \n-            add(new ListView<String>(\"propView\", propViewModel) {\n-\n-                private static final long serialVersionUID = 9101744072914090143L;\n-\n-                @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-                @Override\n-                protected void populateItem(final ListItem<String> item) {\n-                    final String fieldName = item.getModelObject();\n-\n-                    item.add(new Label(\"fieldName\", new ResourceModel(fieldName, fieldName)));\n-\n-                    Field field = null;\n-                    try {\n-                        field = reportlet.getConf().getClass().getDeclaredField(fieldName);\n-                    } catch (NoSuchFieldException | SecurityException e) {\n-                        LOG.error(\"Could not find field {} in class {}\", fieldName, reportlet.getConf().getClass(), e);\n-                    }\n-\n-                    if (field == null) {\n-                        return;\n-                    }\n-\n-                    final SearchCondition scondAnnot = field.getAnnotation(SearchCondition.class);\n-                    final Schema schemaAnnot = field.getAnnotation(Schema.class);\n-\n-                    BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(reportlet.getConf());\n-\n-                    Panel panel;\n-\n-                    if (scondAnnot != null) {\n-                        final String fiql = (String) wrapper.getPropertyValue(fieldName);\n-\n-                        final List<SearchClause> clauses;\n-                        if (StringUtils.isEmpty(fiql)) {\n-                            clauses = new ArrayList<>();\n-                        } else {\n-                            clauses = SearchUtils.getSearchClauses(fiql);\n-                        }\n-\n-                        final AbstractFiqlSearchConditionBuilder builder;\n-\n-                        switch (scondAnnot.type()) {\n-                            case \"USER\":\n-                                panel = new UserSearchPanel.Builder(\n-                                        new ListModel<SearchClause>(clauses)).required(false).build(\"value\");\n-                                builder = SyncopeClient.getUserSearchConditionBuilder();\n-                                break;\n-                            case \"GROUP\":\n-                                panel = new GroupSearchPanel.Builder(\n-                                        new ListModel<SearchClause>(clauses)).required(false).build(\"value\");\n-                                builder = SyncopeClient.getGroupSearchConditionBuilder();\n-                                break;\n-                            default:\n-                                panel = new AnyObjectSearchPanel.Builder(\n-                                        scondAnnot.type(),\n-                                        new ListModel<SearchClause>(clauses)).required(false).build(\"value\");\n-                                builder = SyncopeClient.getAnyObjectSearchConditionBuilder(null);\n-                        }\n-\n-                        reportlet.getSCondWrapper().put(fieldName, Pair.of(builder, clauses));\n-                    } else if (List.class.equals(field.getType())) {\n-                        Class<?> listItemType = String.class;\n-                        if (field.getGenericType() instanceof ParameterizedType) {\n-                            listItemType = (Class<?>) ((ParameterizedType) field.getGenericType()).\n-                                    getActualTypeArguments()[0];\n-                        }\n-\n-                        if (listItemType.equals(String.class) && schemaAnnot != null) {\n-                            SchemaRestClient schemaRestClient = new SchemaRestClient();\n-\n-                            List<AbstractSchemaTO> choices;\n-                            switch (schemaAnnot.type()) {\n-                                case UserPlainSchema:\n-                                    choices = schemaRestClient.getSchemas(SchemaType.PLAIN, AnyTypeKind.USER);\n-                                    break;\n-\n-                                case UserDerivedSchema:\n-                                    choices = schemaRestClient.getSchemas(SchemaType.DERIVED, AnyTypeKind.USER);\n-                                    break;\n-\n-                                case UserVirtualSchema:\n-                                    choices = schemaRestClient.getSchemas(SchemaType.VIRTUAL, AnyTypeKind.USER);\n-                                    break;\n-\n-                                case GroupPlainSchema:\n-                                    choices = schemaRestClient.getSchemas(SchemaType.PLAIN, AnyTypeKind.GROUP);\n-                                    break;\n-\n-                                case GroupDerivedSchema:\n-                                    choices = schemaRestClient.getSchemas(SchemaType.DERIVED, AnyTypeKind.GROUP);\n-                                    break;\n-\n-                                case GroupVirtualSchema:\n-                                    choices = schemaRestClient.getSchemas(SchemaType.VIRTUAL, AnyTypeKind.GROUP);\n-                                    break;\n-\n-                                case AnyObjectPlainSchema:\n-                                    choices = schemaRestClient.getSchemas(SchemaType.PLAIN, AnyTypeKind.ANY_OBJECT);\n-                                    break;\n-\n-                                case AnyObjectDerivedSchema:\n-                                    choices = schemaRestClient.getSchemas(SchemaType.DERIVED, AnyTypeKind.ANY_OBJECT);\n-                                    break;\n-\n-                                case AnyObjectVirtualSchema:\n-                                    choices = schemaRestClient.getSchemas(SchemaType.VIRTUAL, AnyTypeKind.ANY_OBJECT);\n-                                    break;\n-\n-                                default:\n-                                    choices = Collections.emptyList();\n-                            }\n-\n-                            panel = new AjaxPalettePanel.Builder<String>().setName(fieldName).build(\n-                                    \"value\",\n-                                    new PropertyModel<List<String>>(reportlet.getConf(), fieldName),\n-                                    new ListModel<String>(\n-                                            CollectionUtils.collect(\n-                                                    choices, new Transformer<AbstractSchemaTO, String>() {\n-\n-                                                @Override\n-                                                public String transform(final AbstractSchemaTO input) {\n-                                                    return input.getKey();\n-                                                }\n-                                            }, new ArrayList<String>()))).hideLabel();\n-                        } else if (listItemType.isEnum()) {\n-                            panel = new AjaxPalettePanel.Builder<String>().setName(fieldName).build(\n-                                    \"value\",\n-                                    new PropertyModel<List<String>>(reportlet.getConf(), fieldName),\n-                                    new ListModel(Arrays.asList(listItemType.getEnumConstants()))).hideLabel();\n-                        } else {\n-                            if (((List) wrapper.getPropertyValue(fieldName)).isEmpty()) {\n-                                ((List) wrapper.getPropertyValue(fieldName)).add(null);\n-                            }\n-\n-                            panel = new MultiFieldPanel.Builder<String>(\n-                                    new PropertyModel<List<String>>(reportlet.getConf(), fieldName)).build(\n-                                    \"value\",\n-                                    fieldName,\n-                                    buildSinglePanel(field.getType(), fieldName, \"panel\")).hideLabel();\n-                        }\n-                    } else {\n-                        panel = buildSinglePanel(field.getType(), fieldName, \"value\").hideLabel();\n-                    }\n-\n-                    item.add(panel.setRenderBodyOnly(true));\n-                }\n-            });\n-        }\n-\n-        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-        private FieldPanel buildSinglePanel(final Class<?> type, final String fieldName, final String id) {\n-            FieldPanel result = null;\n-            PropertyModel model = new PropertyModel(reportlet.getConf(), fieldName);\n-            if (ClassUtils.isAssignable(Boolean.class, type)) {\n-                result = new AjaxCheckBoxPanel(id, fieldName, model);\n-            } else if (ClassUtils.isAssignable(Number.class, type)) {\n-                result = new AjaxSpinnerFieldPanel.Builder<Number>().build(\n-                        id, fieldName, (Class<Number>) ClassUtils.resolvePrimitiveIfNecessary(type), model);\n-            } else if (Date.class.equals(type)) {\n-                result = new DateTimeFieldPanel(id, fieldName, model, SyncopeConstants.DEFAULT_DATE_PATTERN);\n-            } else if (type.isEnum()) {\n-                result = new AjaxDropDownChoicePanel(id, fieldName, model).setChoices(\n-                        Arrays.asList(type.getEnumConstants()));\n-            }\n-\n-            // treat as String if nothing matched above\n-            if (result == null) {\n-                result = new AjaxTextFieldPanel(id, fieldName, model);\n-            }\n-\n-            result.hideLabel();\n-            return result;\n+            add(new BeanPanel<>(\"bean\", bean, reportlet.getSCondWrapper(), \"name\", \"reportletClassName\").\n+                    setRenderBodyOnly(true));\n         }\n     }\n }"},{"sha":"3bfaef65ae51701da099ac55afc0215bb5defb71","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/PolicyRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -62,7 +62,7 @@ public <T extends AbstractPolicyTO> void updatePolicy(final T policy) {\n         getService(PolicyService.class).update(policy);\n     }\n \n-    public void delete(final String key, final Class<? extends AbstractPolicyTO> policyClass) {\n+    public void delete(final String key) {\n         getService(PolicyService.class).delete(key);\n     }\n }"},{"sha":"4f1f71439eb18eeb50452babac8ad4282f7b877a","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxPalettePanel.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -41,7 +41,6 @@\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n-import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.util.string.Strings;\n \n public class AjaxPalettePanel<T extends Serializable> extends AbstractFieldPanel<List<T>> {\n@@ -73,7 +72,7 @@ protected List<T> getChoices() {\n     }\n \n     public AjaxPalettePanel(\n-            final String id, final IModel<List<T>> model, final ListModel<T> choices, final Builder<T> builder) {\n+            final String id, final IModel<List<T>> model, final IModel<List<T>> choices, final Builder<T> builder) {\n         super(id, builder.name == null ? id : builder.name, model);\n \n         choicesModel = new PaletteLoadableDetachableModel(builder) {\n@@ -198,6 +197,10 @@ public Collection<T> getModelCollection() {\n         return palette.getModelCollection();\n     }\n \n+    public void reload(final AjaxRequestTarget target) {\n+        target.add(palette);\n+    }\n+\n     public static class Builder<T extends Serializable> implements Serializable {\n \n         private static final long serialVersionUID = 991248996001040352L;\n@@ -268,7 +271,7 @@ public Builder<T> withFilter(final String defaultFilter) {\n             return this;\n         }\n \n-        public AjaxPalettePanel<T> build(final String id, final IModel<List<T>> model, final ListModel<T> choices) {\n+        public AjaxPalettePanel<T> build(final String id, final IModel<List<T>> model, final IModel<List<T>> choices) {\n             return new AjaxPalettePanel<>(id, model, choices, this);\n         }\n "},{"sha":"1f5a15950412c5f8989067b0bebce2ddab4f7348","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/JsonEditorPanel.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FJsonEditorPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FJsonEditorPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FJsonEditorPanel.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wicket.markup.html.form;\n+\n+import java.io.Serializable;\n+import org.apache.syncope.client.console.panels.AbstractModalPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.markup.head.IHeaderResponse;\n+import org.apache.wicket.markup.head.OnLoadHeaderItem;\n+import org.apache.wicket.markup.html.form.TextArea;\n+import org.apache.wicket.model.IModel;\n+\n+public class JsonEditorPanel extends AbstractModalPanel<Serializable> {\n+\n+    private static final long serialVersionUID = -5110368813584745668L;\n+\n+    private final IModel<String> content;\n+\n+    public JsonEditorPanel(final IModel<String> content) {\n+        this(null, content, null);\n+    }\n+\n+    public JsonEditorPanel(\n+            final BaseModal<Serializable> modal,\n+            final IModel<String> content,\n+            final PageReference pageRef) {\n+        super(modal, pageRef);\n+        this.content = content;\n+        final TextArea<String> jsonEditorInfoDefArea = new TextArea<>(\"jsonEditorInfo\", this.content);\n+        jsonEditorInfoDefArea.setMarkupId(\"jsonEditorInfo\").setOutputMarkupPlaceholderTag(true);\n+        add(jsonEditorInfoDefArea);\n+    }\n+\n+    @Override\n+    public void renderHead(final IHeaderResponse response) {\n+        super.renderHead(response);\n+        response.render(OnLoadHeaderItem.forScript(\n+                \"CodeMirror.fromTextArea(document.getElementById('jsonEditorInfo'), {\"\n+                + \"  lineNumbers: true, \"\n+                + \"  lineWrapping: true, \"\n+                + \"  matchBrackets: true,\"\n+                + \"  autoCloseBrackets: true,\"\n+                + \"  autoRefresh: true\"\n+                + \"}).on('change', updateTextArea);\"));\n+    }\n+\n+    @Override\n+    public IModel<String> getItem() {\n+        return content;\n+    }\n+}"},{"sha":"b96752abc380e24429b4d9d96c76e0d6cd738729","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Policies.html","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.html?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -22,7 +22,6 @@\n     <section class=\"content-header\">\n       <h1>\n         &nbsp;\n-        <small>Work in progress</small>\n       </h1>\n       <ol class=\"breadcrumb\">\n         <li><a wicket:id=\"dashboardBr\"><i class=\"fa fa-dashboard\"></i> <wicket:message key=\"dashboard\"/></a></li>\n@@ -31,11 +30,10 @@ <h1>\n       </ol>\n     </section>\n \n-    <section class=\"content\">\n-      <div class=\"progress progress active\" style=\"margin:100px\">\n-        <div style=\"width: 70%\" aria-valuemax=\"100\" aria-valuemin=\"0\" aria-valuenow=\"20\" role=\"progressbar\" class=\"progress-bar progress-bar-success progress-bar-striped\">\n-          <span class=\"sr-only\">20% Complete</span>\n-        </div>\n+\n+    <section class=\"content\" wicket:id=\"content\">\n+      <div class=\"box\">\n+        <div class=\"box-body\" wicket:id=\"tabbedPanel\"/>\n       </div>\n     </section>\n "},{"sha":"1df0602b2f9bc04ddd39cab87e3749f6d7e4eb01","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Policies.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+policy.account=Account Policy\n+policy.password=Password Policy\n+policy.pull=Pull Policy"},{"sha":"1df0602b2f9bc04ddd39cab87e3749f6d7e4eb01","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Policies_it.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_it.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+policy.account=Account Policy\n+policy.password=Password Policy\n+policy.pull=Pull Policy"},{"sha":"1df0602b2f9bc04ddd39cab87e3749f6d7e4eb01","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Policies_pt_BR.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_pt_BR.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+policy.account=Account Policy\n+policy.password=Password Policy\n+policy.pull=Pull Policy"},{"sha":"710e45858b6921750c4b2305614b7218cd91495a","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Policies_ru.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ru.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+# reports=\\u00d0\\u00a3\\u00d0\\u00b2\\u00d0\\u00b5\\u00d0\\u00b4\\u00d0\\u00be\\u00d0\\u00bc\\u00d0\\u00bb\\u00d0\\u00b5\\u00d0\\u00bd\\u00d0\\u00b8\\u00d1\\u008f\n+policy.account=Account Policy\n+policy.password=Password Policy\n+policy.pull=Pull Policy"},{"sha":"3d584102abf361b50f8e7bc565e6901561f6f4fa","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/BeanPanel.html","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.html?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,28 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"propView\">\n+      <div class=\"form-group inforow\">\n+        <label wicket:id=\"fieldName\">[LABEL]</label>\n+        <span wicket:id=\"value\">[value]</span>\n+      </div>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"5c2d7faf687f1210338c8344fbe9e75bbf905085","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.properties","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,29 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+description=Description\n+usedByResources=Used By Resource\n+usedByRealms=Used By Realm\n+passthroughResources=Passthrough Resources\n+maxAuthenticationAttempts=Max Authentication Attempts\n+propagateSuspension=Propagate Suspension\n+historyLength=History Length\n+allowNullPassword=Allow Null Password\n+policy.rule.conf=Policy '${key}' Rule Configuration\n+any.edit=Edit ${key}\n+any.new=New Policy\n+any.finish=Submit ${key}\n+any.cancel=Cancel ${key}"},{"sha":"2b6d87c102ff689eaf172895fe04ceef1fb64870","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_it.properties","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,29 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+description=Descrizione\n+usedByResources=Usata Dalla Risorsa\n+usedByRealms=Usata Dal Realm\n+passthroughResources=Risorse Passthrough\n+maxAuthenticationAttempts=Numero Massimo Tentativi Authenticazione\n+propagateSuspension=Propagare Sospensione\n+historyLength=Lunghezza Storico\n+allowNullPassword=Permetti Password Nulla\n+policy.rule.conf=Configurazione Regola Policy '${key}'\n+any.edit=Modifica ${key}\n+any.new=Nuova Policy\n+any.finish=Invia ${key}\n+any.cancel=Annulla ${key}"},{"sha":"5c2d7faf687f1210338c8344fbe9e75bbf905085","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_pt_BR.properties","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,29 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+description=Description\n+usedByResources=Used By Resource\n+usedByRealms=Used By Realm\n+passthroughResources=Passthrough Resources\n+maxAuthenticationAttempts=Max Authentication Attempts\n+propagateSuspension=Propagate Suspension\n+historyLength=History Length\n+allowNullPassword=Allow Null Password\n+policy.rule.conf=Policy '${key}' Rule Configuration\n+any.edit=Edit ${key}\n+any.new=New Policy\n+any.finish=Submit ${key}\n+any.cancel=Cancel ${key}"},{"sha":"064b0e6853f1dfd198a0d4cfecb0b4016fe4fef4","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ru.properties","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,31 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+# reports=\\u00d0\\u00a3\\u00d0\\u00b2\\u00d0\\u00b5\\u00d0\\u00b4\\u00d0\\u00be\\u00d0\\u00bc\\u00d0\\u00bb\\u00d0\\u00b5\\u00d0\\u00bd\\u00d0\\u00b8\\u00d1\\u008f\n+description=Description\n+usedByResources=Used By Resource\n+usedByRealms=Used By Realm\n+passthroughResources=Passthrough Resources\n+maxAuthenticationAttempts=Max Authentication Attempts\n+propagateSuspension=Propagate Suspension\n+historyLength=History Length\n+allowNullPassword=Allow Null Password\n+policy.rule.conf=Policy '${key}' Rule Configuration\n+any.edit=Edit ${key}\n+any.new=New Policy\n+any.finish=Submit ${key}\n+any.cancel=Cancel ${key}"},{"sha":"78bd42627ac579b01e95f0eb9059197fea88854b","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder$Profile.html","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder%24Profile.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder%24Profile.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder%24Profile.html?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,27 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"fields\">\n+      <div class=\"form-group\">\n+        <span wicket:id=\"field\"/>\n+      </div>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"d55a5338875c51cd9e8c84ec47cb5e13bfcfc623","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+ruleConf=Rule\n+configuration=Type"},{"sha":"1ee8471c4523a9cc8183d2ca43a402815f82a0b0","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel_it.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel_it.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+ruleConf=Regola\n+configuration=Tipo"},{"sha":"d55a5338875c51cd9e8c84ec47cb5e13bfcfc623","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel_pt_BR.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel_pt_BR.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+ruleConf=Rule\n+configuration=Type"},{"sha":"57196fb9516f333e21ec07a017dc4d81ec6f3299","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel_ru.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel_ru.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+# reports=\\u00d0\\u00a3\\u00d0\\u00b2\\u00d0\\u00b5\\u00d0\\u00b4\\u00d0\\u00be\\u00d0\\u00bc\\u00d0\\u00bb\\u00d0\\u00b5\\u00d0\\u00bd\\u00d0\\u00b8\\u00d1\\u008f\n+ruleConf=Rule\n+configuration=Type"},{"sha":"7772c93b7b0f9ede0879d65b1ee4014cc4497248","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder$Configuration.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder%24Configuration.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder%24Configuration.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder%24Configuration.html?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <span wicket:id=\"bean\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"5ce95401f8187aaea408eb836750cacdae30145c","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder$Profile.html","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder%24Profile.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder%24Profile.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder%24Profile.html?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,28 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"name\"/>\n+    </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"configuration\"/>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"eafcadb0801ff3d1047dc99a6229ce239c4e6fa8","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicySpecModalPanel$CorrelationRulePanel.html","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel%24CorrelationRulePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel%24CorrelationRulePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel%24CorrelationRulePanel.html?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,32 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"anyType\"/>\n+    </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"ruleType\"/>\n+    </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"javaRule\"/>\n+      <span wicket:id=\"jsonRule\"/>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"9aaced7a96f949c5a26ffcdf0181ccad84235be9","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicySpecModalPanel.html","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.html?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,28 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"conflictResolutionAction\"/>\n+    </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"correlationRules\"/>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"18b0ba1eb04b83fd72c449036c7f908d4fd42e46","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicySpecModalPanel.properties","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+rule.java=Java Class\n+rule.json=JSON Rule\n+rule.type=Rule Type\n+JSON=JSON Rule\n+JAVA=Java Class\n+any.type=Policy Specificaton Target\n+correlationRules=Correlation Rules\n+conflictResolutionAction=Conflice Resolution Action"},{"sha":"7ecc0d6276e655400e2fa34488ea844ebd97029f","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicySpecModalPanel_it.properties","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel_it.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+rule.java=Classe Java\n+rule.json=Regola JSON\n+rule.type=Tipo Regola\n+JSON=Regola JSON\n+JAVA=Classe Java\n+any.type=Target Specifica Policy\n+correlationRules=Regole di Correlazione\n+conflictResolutionAction=Azione di Risoluzione Conflitti"},{"sha":"18b0ba1eb04b83fd72c449036c7f908d4fd42e46","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicySpecModalPanel_pt_BR.properties","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel_pt_BR.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+rule.java=Java Class\n+rule.json=JSON Rule\n+rule.type=Rule Type\n+JSON=JSON Rule\n+JAVA=Java Class\n+any.type=Policy Specificaton Target\n+correlationRules=Correlation Rules\n+conflictResolutionAction=Conflice Resolution Action"},{"sha":"7d84cbecba63f18d03e58876cfb239ac5ebd8d15","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PolicySpecModalPanel_ru.properties","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicySpecModalPanel_ru.properties?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,26 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+# reports=\\u00d0\\u00a3\\u00d0\\u00b2\\u00d0\\u00b5\\u00d0\\u00b4\\u00d0\\u00be\\u00d0\\u00bc\\u00d0\\u00bb\\u00d0\\u00b5\\u00d0\\u00bd\\u00d0\\u00b8\\u00d1\\u008f\n+rule.java=Java Class\n+rule.json=JSON Rule\n+rule.type=Rule Type\n+JSON=JSON Rule\n+JAVA=Java Class\n+any.type=Policy Specificaton Target\n+correlationRules=Correlation Rules\n+conflictResolutionAction=Conflice Resolution Action"},{"sha":"7772c93b7b0f9ede0879d65b1ee4014cc4497248","filename":"client/console/src/main/resources/org/apache/syncope/client/console/reports/ReportletWizardBuilder$Configuration.html","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder%24Configuration.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder%24Configuration.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder%24Configuration.html?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -18,11 +18,6 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n-    <div wicket:id=\"propView\">\n-      <div class=\"form-group inforow\">\n-        <label wicket:id=\"fieldName\">[LABEL]</label>\n-        <span wicket:id=\"value\">[value]</span>\n-      </div>\n-    </div>\n+    <span wicket:id=\"bean\"/>\n   </wicket:panel>\n </html>"},{"sha":"e7b558f0fad320a5d84fc29f9df3e90f1151a6c2","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/JsonEditorPanel.html","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FJsonEditorPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FJsonEditorPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FJsonEditorPanel.html?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,54 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:head>\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"webjars/codemirror/${codemirror.version}/lib/codemirror.css\"/>\n+\n+    <script type=\"text/javascript\" src=\"webjars/codemirror/${codemirror.version}/lib/codemirror.js\"></script>\n+    <script type=\"text/javascript\" src=\"webjars/codemirror/${codemirror.version}/mode/javascript/javascript.js\"></script>\n+    <script type=\"text/javascript\" src=\"webjars/codemirror/${codemirror.version}/addon/display/autorefresh.js\"></script>\n+    <script type=\"text/javascript\" src=\"webjars/codemirror/${codemirror.version}/addon/search/search.js\"></script>\n+    <script type=\"text/javascript\" src=\"webjars/codemirror/${codemirror.version}/addon/search/searchcursor.js\"></script>\n+    <script type=\"text/javascript\" src=\"webjars/codemirror/${codemirror.version}/addon/edit/matchbrackets.js\"></script>\n+    <script type=\"text/javascript\" src=\"webjars/codemirror/${codemirror.version}/addon/edit/closebrackets.js\"></script>\n+    <script type=\"text/javascript\">\n+      function updateTextArea(editor) {\n+        document.getElementById(\"jsonEditorInfoDefForm\").children[\"jsonEditorInfo\"].value = editor.getValue();\n+      }\n+    </script>\n+    <style>\n+      .w_content_3 {\n+        padding: 0;\n+        color: #333333;\n+        font-family: Verdana,Tahoma,sans-serif;\n+        font-size: 100%;\n+        border: 1px solid #BBBBBB;\n+        padding: 1%;\n+      }\n+    </style>\n+  </wicket:head>\n+  <wicket:panel>\n+    <div style=\"padding: 1%;\">\n+      <div class=\"w_content_3\" id=\"jsonEditorInfoDefForm\">\n+        <textarea wicket:id=\"jsonEditorInfo\" id=\"consoleLayoutInfo\" name=\"jsonEditorInfo\" style=\"width: 100%; height: 350px;\">\n+        </textarea>\n+      </div>\n+    </div>\n+  </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"caf2506c68751a4e0d9665d06917a245d6fc5129","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountPolicyTO.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -28,7 +28,7 @@\n \n @XmlRootElement(name = \"accountPolicy\")\n @XmlType\n-public class AccountPolicyTO extends AbstractPolicyTO {\n+public class AccountPolicyTO extends AbstractPolicyTO implements ComposablePolicy<AbstractAccountRuleConf> {\n \n     private static final long serialVersionUID = -1557150042828800134L;\n \n@@ -38,7 +38,7 @@ public class AccountPolicyTO extends AbstractPolicyTO {\n \n     private final List<AbstractAccountRuleConf> ruleConfs = new ArrayList<>();\n \n-    private final List<String> resources = new ArrayList<>();\n+    private final List<String> passthroughResources = new ArrayList<>();\n \n     public boolean isPropagateSuspension() {\n         return propagateSuspension;\n@@ -59,14 +59,15 @@ public void setMaxAuthenticationAttempts(final int maxAuthenticationAttempts) {\n     @XmlElementWrapper(name = \"ruleConfs\")\n     @XmlElement(name = \"ruleConf\")\n     @JsonProperty(\"ruleConfs\")\n+    @Override\n     public List<AbstractAccountRuleConf> getRuleConfs() {\n         return ruleConfs;\n     }\n \n-    @XmlElementWrapper(name = \"resources\")\n-    @XmlElement(name = \"resource\")\n-    @JsonProperty(\"resources\")\n-    public List<String> getResources() {\n-        return resources;\n+    @XmlElementWrapper(name = \"passthroughResources\")\n+    @XmlElement(name = \"passthroughResource\")\n+    @JsonProperty(\"passthroughResources\")\n+    public List<String> getPassthroughResources() {\n+        return passthroughResources;\n     }\n }"},{"sha":"b03d5384a14f746847a662c70c5e98b28f1f529f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/ComposablePolicy.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FComposablePolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FComposablePolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FComposablePolicy.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+public interface ComposablePolicy<T extends RuleConf> extends Serializable {\n+\n+    /**\n+     * Return policy rules.\n+     *\n+     * @return policy rules.\n+     */\n+    List<T> getRuleConfs();\n+}"},{"sha":"1d7cdb3c6abeea9034fae65bf87e4da2dceb889d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccountRuleConf.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -25,6 +25,8 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.report.Schema;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n \n @XmlRootElement(name = \"defaultAccountRuleConf\")\n @XmlType\n@@ -65,6 +67,8 @@ public class DefaultAccountRuleConf extends AbstractAccountRuleConf implements A\n     /**\n      * User attribute values not permitted.\n      */\n+    @Schema(type\n+            = { IntMappingType.UserPlainSchema, IntMappingType.UserDerivedSchema, IntMappingType.UserVirtualSchema })\n     private final List<String> schemasNotPermitted = new ArrayList<>();\n \n     /**"},{"sha":"b75ff9c07e23cdeac6f31fd3b7591e5825066407","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPasswordRuleConf.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -25,6 +25,8 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.report.Schema;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n \n @XmlRootElement(name = \"defaultPasswordRuleConf\")\n @XmlType\n@@ -140,6 +142,8 @@ public class DefaultPasswordRuleConf extends AbstractPasswordRuleConf {\n     /**\n      * User attribute values not permitted.\n      */\n+    @Schema(type\n+            = { IntMappingType.UserPlainSchema, IntMappingType.UserDerivedSchema, IntMappingType.UserVirtualSchema })\n     private final List<String> schemasNotPermitted = new ArrayList<>();\n \n     /**"},{"sha":"b9d6d3e1b4d3f0a05f29062122ba1cf0995ce708","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordPolicyTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -28,7 +28,7 @@\n \n @XmlRootElement(name = \"passwordPolicy\")\n @XmlType\n-public class PasswordPolicyTO extends AbstractPolicyTO {\n+public class PasswordPolicyTO extends AbstractPolicyTO implements ComposablePolicy<AbstractPasswordRuleConf> {\n \n     private static final long serialVersionUID = -5606086441294799690L;\n \n@@ -57,6 +57,7 @@ public void setHistoryLength(final int historyLength) {\n     @XmlElementWrapper(name = \"ruleConfs\")\n     @XmlElement(name = \"ruleConf\")\n     @JsonProperty(\"ruleConfs\")\n+    @Override\n     public List<AbstractPasswordRuleConf> getRuleConfs() {\n         return ruleConfs;\n     }"},{"sha":"edb139a2dd7b351bea6ec46035afc5a949607323","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/RuleConf.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FRuleConf.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -19,9 +19,10 @@\n package org.apache.syncope.common.lib.policy;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import java.io.Serializable;\n \n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n-public interface RuleConf {\n+public interface RuleConf extends Serializable {\n \n     /**\n      * Give name of related rule instance."},{"sha":"31844af1413bc38a2ab6f2d5540a260d2118679e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/Schema.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FSchema.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -28,5 +28,5 @@\n @Retention(RetentionPolicy.RUNTIME)\n public @interface Schema {\n \n-    IntMappingType type() default IntMappingType.UserPlainSchema;\n+    IntMappingType[] type() default { IntMappingType.UserPlainSchema };\n }"},{"sha":"5a76d63194469688218036c9ee844e83938e3ca1","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -177,8 +177,8 @@ public PlatformInfo platform() {\n                 PLATFORM_INFO.setPasswordGenerator(passwordGenerator.getClass().getName());\n \n                 PLATFORM_INFO.getReportletConfs().addAll(implLookup.getClassNames(Type.REPORTLET_CONF));\n-                PLATFORM_INFO.getAccountRules().addAll(implLookup.getClassNames(Type.ACCOUNT_RULE));\n-                PLATFORM_INFO.getPasswordRules().addAll(implLookup.getClassNames(Type.PASSWORD_RULE));\n+                PLATFORM_INFO.getAccountRules().addAll(implLookup.getClassNames(Type.ACCOUNT_RULE_CONF));\n+                PLATFORM_INFO.getPasswordRules().addAll(implLookup.getClassNames(Type.PASSWORD_RULE_CONF));\n                 PLATFORM_INFO.getMappingItemTransformers().addAll(\n                         implLookup.getClassNames(Type.MAPPING_ITEM_TRANSFORMER));\n                 PLATFORM_INFO.getTaskJobs().addAll(implLookup.getClassNames(Type.TASKJOBDELEGATE));"},{"sha":"ac641a2d300e672506fd4c3b4ad3afba64a74a42","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":12,"deletions":6,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -57,6 +57,7 @@\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.provisioning.java.data.JEXLMappingItemTransformer;\n import org.apache.syncope.core.provisioning.java.job.GroupMemberProvisionTaskJobDelegate;\n+import org.apache.syncope.core.provisioning.java.pushpull.PlainAttrsPullCorrelationRule;\n \n /**\n  * Cache class names for all implementations of Syncope interfaces found in classpath, for later usage.\n@@ -123,17 +124,21 @@ public void load() {\n                 }\n \n                 if (AccountRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n-                    classNames.get(Type.ACCOUNT_RULE).add(clazz.getName());\n-\n                     AccountRuleConfClass annotation = clazz.getAnnotation(AccountRuleConfClass.class);\n-                    if (annotation != null) {\n+                    if (annotation == null) {\n+                        LOG.warn(\"Found account policy rule {} without declared configuration\", clazz.getName());\n+                    } else {\n+                        classNames.get(Type.ACCOUNT_RULE_CONF).add(annotation.value().getName());\n                         accountRuleClasses.put(annotation.value(), (Class<? extends AccountRule>) clazz);\n                     }\n                 }\n+\n                 if (PasswordRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n-                    classNames.get(Type.PASSWORD_RULE).add(clazz.getName());\n                     PasswordRuleConfClass annotation = clazz.getAnnotation(PasswordRuleConfClass.class);\n-                    if (annotation != null) {\n+                    if (annotation == null) {\n+                        LOG.warn(\"Found password policy rule {} without declared configuration\", clazz.getName());\n+                    } else {\n+                        classNames.get(Type.PASSWORD_RULE_CONF).add(annotation.value().getName());\n                         passwordRuleClasses.put(annotation.value(), (Class<? extends PasswordRule>) clazz);\n                     }\n                 }\n@@ -172,7 +177,8 @@ public void load() {\n                     classNames.get(Type.PUSH_ACTIONS).add(bd.getBeanClassName());\n                 }\n \n-                if (PullCorrelationRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                if (PullCorrelationRule.class.isAssignableFrom(clazz) && !isAbsractClazz\n+                        && !PlainAttrsPullCorrelationRule.class.isAssignableFrom(clazz)) {\n                     classNames.get(Type.PULL_CORRELATION_RULE).add(bd.getBeanClassName());\n                 }\n "},{"sha":"c3c1c2d6d63a99be4d16269ec8e84d3b135fd9d7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -31,8 +31,8 @@ public interface ImplementationLookup extends SyncopeLoader {\n     enum Type {\n \n         REPORTLET_CONF,\n-        ACCOUNT_RULE,\n-        PASSWORD_RULE,\n+        ACCOUNT_RULE_CONF,\n+        PASSWORD_RULE_CONF,\n         MAPPING_ITEM_TRANSFORMER,\n         TASKJOBDELEGATE,\n         RECONCILIATION_FILTER_BUILDER,"},{"sha":"8829c032e670c740861dd59e532265f6cd1a9f55","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -104,7 +104,7 @@ private <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO po\n             }\n \n             accountPolicy.getResources().clear();\n-            for (String resourceName : accountPolicyTO.getResources()) {\n+            for (String resourceName : accountPolicyTO.getPassthroughResources()) {\n                 ExternalResource resource = resourceDAO.find(resourceName);\n                 if (resource == null) {\n                     LOG.debug(\"Ignoring invalid resource {} \", resourceName);\n@@ -167,7 +167,7 @@ public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n                 accountPolicyTO.getRuleConfs().add((AbstractAccountRuleConf) ruleConf);\n             }\n \n-            accountPolicyTO.getResources().addAll(accountPolicy.getResourceNames());\n+            accountPolicyTO.getPassthroughResources().addAll(accountPolicy.getResourceNames());\n         } else if (policy instanceof PullPolicy) {\n             policyTO = (T) new PullPolicyTO();\n             ((PullPolicyTO) policyTO).setSpecification(((PullPolicy) policy).getSpecification());"},{"sha":"b40e46643dae9bbf833fb4c0ac1ed094a2b76a71","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/panels/CamelRoutesDirectoryPanel.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.panels;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -101,16 +100,6 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                     }\n                 };\n             }\n-\n-            @Override\n-            protected void onCancelInternal(final CamelRouteTO modelObject) {\n-            }\n-\n-            @Override\n-            protected Serializable onApplyInternal(final CamelRouteTO modelObject) {\n-                // do nothing\n-                return null;\n-            }\n         }, false);\n     }\n "},{"sha":"44bc308371a68a5842f8ba6a74c658faaa415d4e","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRuleConf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -28,7 +28,7 @@ public class TestAccountRuleConf extends AbstractAccountRuleConf {\n \n     private static final long serialVersionUID = -1803947511928491978L;\n \n-    private String mustContainSubstring = \"YYY\";\n+    private final String mustContainSubstring = \"YYY\";\n \n     public String getMustContainSubstring() {\n         return mustContainSubstring;"},{"sha":"ecd3cb4bde6df4c6603ee69ff31fe94396cef6d4","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRuleConf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -28,7 +28,7 @@ public class TestPasswordRuleConf extends AbstractPasswordRuleConf {\n \n     private static final long serialVersionUID = -1803947511928491978L;\n \n-    private String mustEndWith = \"XXX\";\n+    private final String mustEndWith = \"XXX\";\n \n     public String getMustEndWith() {\n         return mustEndWith;"},{"sha":"efb59e1933805a2c6407fb1a88617e219224e10e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AbstractConsoleITCase.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -20,6 +20,7 @@\n \n import java.io.Serializable;\n import java.lang.reflect.Method;\n+import java.util.List;\n import javax.servlet.ServletContext;\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n@@ -29,6 +30,8 @@\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n+import org.apache.wicket.behavior.AbstractAjaxBehavior;\n+import org.apache.wicket.behavior.Behavior;\n import org.apache.wicket.core.util.lang.PropertyResolver;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.util.tester.FormTester;\n@@ -100,4 +103,13 @@ public void component(final ListItem<?> object, final IVisit<Component> visit) {\n                     }\n                 });\n     }\n+\n+    protected void closeCallBack(final Component modal) {\n+        final List<? extends Behavior> behaviors = modal.getBehaviors();\n+        for (Behavior behavior : behaviors) {\n+            if (behavior instanceof AbstractAjaxBehavior) {\n+                wicketTester.executeBehavior((AbstractAjaxBehavior) behavior);\n+            }\n+        }\n+    }\n }"},{"sha":"acbe4544ec35acb0702e5a977ed7990aa1647f37","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/PoliciesITCase.java","status":"added","additions":669,"deletions":0,"changes":669,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -0,0 +1,669 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.console;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.pages.Policies;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.util.tester.FormTester;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class PoliciesITCase extends AbstractConsoleITCase {\n+\n+    private void createAccountPolicy(final String description) {\n+        wicketTester.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:0:link\");\n+        wicketTester.clickLink(\"body:content:tabbedPanel:panel:container:content:add\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        Component modal = wicketTester.getComponentFromLastRenderedPage(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\");\n+\n+        FormTester formTester = wicketTester.newFormTester(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n+        formTester.setValue(\"content:fields:0:field:textField\", description);\n+        formTester.setValue(\"content:fields:1:field:spinner\", \"1\");\n+        formTester.setValue(\"content:fields:2:field:checkboxField\", true);\n+        formTester.setValue(\"content:fields:3:field:paletteField:recorder\", \"resource-csv\");\n+\n+        wicketTester.clickLink(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        closeCallBack(modal);\n+\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", WebMarkupContainer.class);\n+\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:9:cell:panelEdit:editLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n+                + \":content:fields:0:field:textField\", description);\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n+                + \":content:fields:1:field:spinner\", 1);\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n+                + \":content:fields:2:field:checkboxField\", true);\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n+                + \":content:fields:3:field:paletteField:recorder\", \"resource-csv\");\n+\n+        wicketTester.executeAjaxEvent(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:buttons:0:button\",\n+                Constants.ON_CLICK);\n+\n+        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+    }\n+\n+    private void createPasswordPolicy(final String description) {\n+        wicketTester.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:1:link\");\n+        wicketTester.clickLink(\"body:content:tabbedPanel:panel:container:content:add\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        Component modal = wicketTester.getComponentFromLastRenderedPage(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\");\n+\n+        FormTester formTester = wicketTester.newFormTester(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n+        formTester.setValue(\"content:fields:0:field:textField\", description);\n+        formTester.setValue(\"content:fields:1:field:spinner\", \"1\");\n+        formTester.setValue(\"content:fields:2:field:checkboxField\", true);\n+\n+        wicketTester.clickLink(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        closeCallBack(modal);\n+\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:8:cell:panelEdit:editLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n+                + \":content:fields:0:field:textField\", description);\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n+                + \":content:fields:1:field:spinner\", 1);\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n+                + \":content:fields:2:field:checkboxField\", true);\n+\n+        wicketTester.executeAjaxEvent(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:buttons:0:button\",\n+                Constants.ON_CLICK);\n+\n+        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+    }\n+\n+    private void createPullPolicy(final String description) {\n+        wicketTester.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:2:link\");\n+        wicketTester.clickLink(\"body:content:tabbedPanel:panel:container:content:add\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        Component modal = wicketTester.getComponentFromLastRenderedPage(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\");\n+\n+        FormTester formTester = wicketTester.newFormTester(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n+        formTester.setValue(\"content:fields:0:field:textField\", description);\n+\n+        wicketTester.executeAjaxEvent(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\",\n+                Constants.ON_CLICK);\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        closeCallBack(modal);\n+\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:6:cell:panelEdit:editLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n+                + \":content:fields:0:field:textField\", description);\n+\n+        wicketTester.executeAjaxEvent(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:buttons:0:button\",\n+                Constants.ON_CLICK);\n+\n+        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+    }\n+\n+    private void deleteAccountPolicy(final String description) {\n+        wicketTester.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:0:link\");\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+\n+        wicketTester.getRequest().addParameter(\"confirm\", \"true\");\n+        wicketTester.clickLink(wicketTester.getComponentFromLastRenderedPage(\n+                component.getPageRelativePath() + \":cells:9:cell:panelDelete:deleteLink\"));\n+\n+        wicketTester.executeAjaxEvent(wicketTester.getComponentFromLastRenderedPage(\n+                component.getPageRelativePath() + \":cells:9:cell:panelDelete:deleteLink\"), Constants.ON_CLICK);\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        Assert.assertNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+    }\n+\n+    private void deletePasswordPolicy(final String description) {\n+        wicketTester.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:1:link\");\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+\n+        wicketTester.getRequest().addParameter(\"confirm\", \"true\");\n+        wicketTester.clickLink(\n+                wicketTester.getComponentFromLastRenderedPage(\n+                        component.getPageRelativePath() + \":cells:8:cell:panelDelete:deleteLink\"));\n+\n+        wicketTester.executeAjaxEvent(wicketTester.getComponentFromLastRenderedPage(\n+                component.getPageRelativePath() + \":cells:8:cell:panelDelete:deleteLink\"), Constants.ON_CLICK);\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        Assert.assertNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+    }\n+\n+    private void deletePullPolicy(final String description) {\n+        wicketTester.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:2:link\");\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+\n+        wicketTester.getRequest().addParameter(\"confirm\", \"true\");\n+        wicketTester.clickLink(\n+                wicketTester.getComponentFromLastRenderedPage(\n+                        component.getPageRelativePath() + \":cells:6:cell:panelDelete:deleteLink\"));\n+\n+        wicketTester.executeAjaxEvent(wicketTester.getComponentFromLastRenderedPage(\n+                component.getPageRelativePath() + \":cells:6:cell:panelDelete:deleteLink\"), Constants.ON_CLICK);\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        Assert.assertNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+    }\n+\n+    @Before\n+    public void login() {\n+        doLogin(ADMIN_UNAME, ADMIN_PWD);\n+        wicketTester.clickLink(\"body:configurationLI:configurationUL:policiesLI:policies\");\n+        wicketTester.assertRenderedPage(Policies.class);\n+    }\n+\n+    @Test\n+    public void read() {\n+        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", \"an account policy\"));\n+    }\n+\n+    @Test\n+    public void createDeleteAccountPolicy() {\n+        final String description = \"My Test Account Policy\";\n+        createAccountPolicy(description);\n+        deleteAccountPolicy(description);\n+    }\n+\n+    @Test\n+    public void cloneDeleteAccountPolicy() {\n+        final String description = \"My Test Account Policy to be cloned\";\n+        createAccountPolicy(description);\n+\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:9:cell:panelClone:cloneLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        Component modal = wicketTester.getComponentFromLastRenderedPage(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\");\n+\n+        FormTester formTester = wicketTester.newFormTester(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n+        formTester.setValue(\"content:fields:0:field:textField\", description + \"2\");\n+\n+        wicketTester.clickLink(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        closeCallBack(modal);\n+\n+        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+\n+        deleteAccountPolicy(description);\n+\n+        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description + \"2\"));\n+\n+        deleteAccountPolicy(description + \"2\");\n+    }\n+\n+    @Test\n+    public void createDeletePasswordPolicy() {\n+        final String description = \"My Test Password Policy\";\n+        createPasswordPolicy(description);\n+        deletePasswordPolicy(description);\n+    }\n+\n+    @Test\n+    public void cloneDeletePasswordPolicy() {\n+        final String description = \"My Test Password Policy to be cloned\";\n+        createPasswordPolicy(description);\n+\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:8:cell:panelClone:cloneLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        Component modal = wicketTester.getComponentFromLastRenderedPage(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\");\n+\n+        FormTester formTester = wicketTester.newFormTester(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n+        formTester.setValue(\"content:fields:0:field:textField\", description + \"2\");\n+\n+        wicketTester.clickLink(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        closeCallBack(modal);\n+\n+        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+\n+        deletePasswordPolicy(description);\n+\n+        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description + \"2\"));\n+\n+        deletePasswordPolicy(description + \"2\");\n+    }\n+\n+    @Test\n+    public void createDeletePullPolicy() {\n+        final String description = \"My Test Pull Policy\";\n+        createPullPolicy(description);\n+        deletePullPolicy(description);\n+    }\n+\n+    @Test\n+    public void cloneDeletePullPolicy() {\n+        final String description = \"My Test Pull Policy to be cloned\";\n+        createPullPolicy(description);\n+\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:6:cell:panelClone:cloneLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        Component modal = wicketTester.getComponentFromLastRenderedPage(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\");\n+\n+        FormTester formTester = wicketTester.newFormTester(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n+        formTester.setValue(\"content:fields:0:field:textField\", description + \"2\");\n+\n+        wicketTester.clickLink(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        closeCallBack(modal);\n+\n+        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+\n+        deletePullPolicy(description);\n+\n+        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description + \"2\"));\n+\n+        deletePullPolicy(description + \"2\");\n+    }\n+\n+    @Test\n+    public void createUpdateDeleteAccountPolicy() {\n+        final String description = \"Account Policy To Be Updated\";\n+        createAccountPolicy(description);\n+\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:9:cell:panelEdit:editLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        Component modal = wicketTester.getComponentFromLastRenderedPage(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\");\n+\n+        FormTester formTester = wicketTester.newFormTester(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n+        formTester.setValue(\"content:fields:1:field:spinner\", \"2\");\n+\n+        wicketTester.clickLink(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        closeCallBack(modal);\n+\n+        component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.assertLabel(component.getPageRelativePath() + \":cells:7:cell\", \"2\");\n+\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:9:cell:panelEdit:editLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n+                + \":content:fields:1:field:spinner\", 2);\n+\n+        wicketTester.executeAjaxEvent(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:buttons:0:button\",\n+                Constants.ON_CLICK);\n+\n+        deleteAccountPolicy(description);\n+    }\n+\n+    @Test\n+    public void createComposeDeleteAccountPolicy() {\n+        final String description = \"Account Policy To Be Composed\";\n+        createAccountPolicy(description);\n+\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:9:cell:panelCompose:composeLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        Component modal = wicketTester.getComponentFromLastRenderedPage(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:3:outer\");\n+\n+        wicketTester.clickLink(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:3:outer:form:content:container:content:add\");\n+\n+        FormTester formTester = wicketTester.newFormTester(\"body:content:tabbedPanel:panel:outerObjectsRepeater:3:\"\n+                + \"outer:form:content:container:content:wizard:form\");\n+        formTester.setValue(\"view:name:textField\", \"myrule\");\n+        formTester.setValue(\"view:configuration:dropDownChoiceField\", \"1\");\n+        formTester.submit(\"buttons:next\");\n+\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:3:outer:form:content:\"\n+                + \"container:content:wizard:form:view:bean:propView:1:value:spinner\", 0);\n+\n+        formTester = wicketTester.newFormTester(\"body:content:tabbedPanel:panel:outerObjectsRepeater:3:\"\n+                + \"outer:form:content:container:content:wizard:form\");\n+        formTester.submit(\"buttons:finish\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        component = findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:outerObjectsRepeater:3:outer:form:\"\n+                + \"content:container:content:searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\",\n+                \"myrule\");\n+\n+        Assert.assertNotNull(component);\n+\n+        wicketTester.clickLink(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:3:outer:form:content:container:content:exit\");\n+\n+        closeCallBack(modal);\n+\n+        deleteAccountPolicy(description);\n+    }\n+\n+    @Test\n+    public void createUpdateDeletePasswordPolicy() {\n+        final String description = \"Password Policy To Be Updated\";\n+        createPasswordPolicy(description);\n+\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:8:cell:panelEdit:editLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        Component modal = wicketTester.getComponentFromLastRenderedPage(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\");\n+\n+        FormTester formTester = wicketTester.newFormTester(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n+        formTester.setValue(\"content:fields:1:field:spinner\", \"2\");\n+\n+        wicketTester.clickLink(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        closeCallBack(modal);\n+\n+        component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.assertLabel(component.getPageRelativePath() + \":cells:6:cell\", \"2\");\n+\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:8:cell:panelEdit:editLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n+                + \":content:fields:1:field:spinner\", 2);\n+\n+        wicketTester.executeAjaxEvent(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:buttons:0:button\",\n+                Constants.ON_CLICK);\n+\n+        deletePasswordPolicy(description);\n+    }\n+\n+    @Test\n+    public void createComposeDeletePasswordPolicy() {\n+        final String description = \"Password Policy To Be Composed\";\n+        createPasswordPolicy(description);\n+\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:8:cell:panelCompose:composeLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:3:outer\", Modal.class);\n+\n+        Component modal = wicketTester.getComponentFromLastRenderedPage(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:3:outer\");\n+\n+        wicketTester.clickLink(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:3:outer:form:content:container:content:add\");\n+\n+        FormTester formTester = wicketTester.newFormTester(\"body:content:tabbedPanel:panel:outerObjectsRepeater:3:\"\n+                + \"outer:form:content:container:content:wizard:form\");\n+        formTester.setValue(\"view:name:textField\", \"myrule\");\n+        formTester.setValue(\"view:configuration:dropDownChoiceField\", \"1\");\n+        formTester.submit(\"buttons:next\");\n+\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:3:outer:form:content:\"\n+                + \"container:content:wizard:form:view:bean:propView:0:value:spinner\", 0);\n+\n+        formTester = wicketTester.newFormTester(\"body:content:tabbedPanel:panel:outerObjectsRepeater:3:\"\n+                + \"outer:form:content:container:content:wizard:form\");\n+        formTester.submit(\"buttons:finish\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        component = findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:outerObjectsRepeater:3:outer:form:\"\n+                + \"content:container:content:searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\",\n+                \"myrule\");\n+\n+        Assert.assertNotNull(component);\n+\n+        wicketTester.clickLink(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:3:outer:form:content:container:content:exit\");\n+\n+        closeCallBack(modal);\n+\n+        deletePasswordPolicy(description);\n+    }\n+\n+    @Test\n+    public void createUpdateDeletePullPolicy() {\n+        final String description = \"Pull Policy To Be Updated\";\n+        createPullPolicy(description);\n+\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Component modal = wicketTester.getComponentFromLastRenderedPage(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\");\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:6:cell:panelEdit:editLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        FormTester formTester = wicketTester.newFormTester(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n+        formTester.setValue(\"content:fields:0:field:textField\", description + \"2\");\n+\n+        wicketTester.clickLink(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        closeCallBack(modal);\n+\n+        component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description + \"2\");\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:6:cell:panelEdit:editLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n+\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n+                + \":content:fields:0:field:textField\", description + \"2\");\n+\n+        wicketTester.executeAjaxEvent(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:buttons:0:button\",\n+                Constants.ON_CLICK);\n+\n+        deletePullPolicy(description + \"2\");\n+    }\n+\n+    @Test\n+    public void createComposeDeletePullPolicy() {\n+        final String description = \"Pull Policy To Be Composed\";\n+        createPullPolicy(description);\n+\n+        Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:6:cell:panelCompose:composeLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:4:outer\", Modal.class);\n+\n+        Component modal = wicketTester.getComponentFromLastRenderedPage(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:4:outer\");\n+\n+        FormTester formTester = wicketTester.newFormTester(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:4:outer:form\");\n+\n+        wicketTester.executeAjaxEvent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:4:outer:form:content:\"\n+                + \"correlationRules:multiValueContainer:innerForm:content:panelPlus:add\", Constants.ON_CLICK);\n+\n+        formTester.setValue(\"content:conflictResolutionAction:dropDownChoiceField\", \"1\");\n+        formTester.setValue(\"content:correlationRules:multiValueContainer:innerForm:content:view:0:panel:\"\n+                + \"jsonRule:paletteField:recorder\", \"fullname\");\n+\n+        wicketTester.clickLink(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:4:outer:dialog:footer:inputs:0:submit\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        closeCallBack(modal);\n+\n+        component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+\n+        Assert.assertNotNull(component);\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:6:cell:panelCompose:composeLink\");\n+        wicketTester.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:4:outer\", Modal.class);\n+\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:4:outer:form:\"\n+                + \"content:conflictResolutionAction:dropDownChoiceField\", ConflictResolutionAction.FIRSTMATCH);\n+\n+        wicketTester.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:4:outer:form:\"\n+                + \"content:correlationRules:multiValueContainer:innerForm:content:view:0:panel:\"\n+                + \"jsonRule:paletteField:recorder\", \"fullname\");\n+\n+        wicketTester.clickLink(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:4:outer:dialog:footer:buttons:0:button\");\n+\n+        closeCallBack(modal);\n+\n+        deletePullPolicy(description);\n+    }\n+}"},{"sha":"d4a5b9c0e5c079854ed3997e1e8f339640aa4924","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/TopologyITCase.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -119,8 +119,7 @@ public void createNewResurceAndProvisionRules() {\n         wicketTester.executeAjaxEvent(\n                 \"body:toggle:container:content:togglePanelContainer:container:actions:create\", Constants.ON_CLICK);\n \n-        FormTester formTester =\n-                wicketTester.newFormTester(\"body:toggle:outerObjectsRepeater:0:outer:form:content:form\");\n+        FormTester formTester = wicketTester.newFormTester(\"body:toggle:outerObjectsRepeater:0:outer:form:content:form\");\n \n         formTester.setValue(\"view:container:key:textField\", res);\n         formTester.submit(\"buttons:next\");\n@@ -440,4 +439,19 @@ public void addGroupTemplate() {\n         wicketTester.assertInfoMessages(\"Operation executed successfully\");\n         wicketTester.cleanupFeedbackMessages();\n     }\n+\n+    @Test\n+    public void reloadConnectors() {\n+        wicketTester.clickLink(\"body:topologyLI:topology\");\n+        wicketTester.executeAjaxEvent(\"body:syncope\", Constants.ON_CLICK);\n+        wicketTester.assertComponent(\"body:toggle:container:content:togglePanelContainer:container:actions:reload\",\n+                AjaxLink.class);\n+\n+        wicketTester.cleanupFeedbackMessages();\n+        wicketTester.getRequest().addParameter(\"confirm\", \"true\");\n+        wicketTester.clickLink(\"body:toggle:container:content:togglePanelContainer:container:actions:reload\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+    }\n }"},{"sha":"c66e4d0b066c0cb4c51cf42bd09a447117ee1460","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/030d1c24929209e31e318cb5601be36306405207/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/030d1c24929209e31e318cb5601be36306405207/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=030d1c24929209e31e318cb5601be36306405207","patch":"@@ -159,7 +159,7 @@ public void delete() {\n \n     @Test\n     public void getCorrelationRules() {\n-        assertEquals(2, syncopeService.platform().getPullCorrelationRules().size());\n+        assertEquals(1, syncopeService.platform().getPullCorrelationRules().size());\n     }\n \n     @Test\n@@ -180,7 +180,7 @@ public void issueSYNCOPE553() {\n     public void issueSYNCOPE682() {\n         AccountPolicyTO policy = new AccountPolicyTO();\n         policy.setDescription(\"SYNCOPE682\");\n-        policy.getResources().add(RESOURCE_NAME_LDAP);\n+        policy.getPassthroughResources().add(RESOURCE_NAME_LDAP);\n \n         DefaultAccountRuleConf ruleConf = new DefaultAccountRuleConf();\n         ruleConf.setMinLength(3);"}]}