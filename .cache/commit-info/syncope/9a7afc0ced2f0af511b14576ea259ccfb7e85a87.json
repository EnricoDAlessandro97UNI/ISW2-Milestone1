{"sha":"9a7afc0ced2f0af511b14576ea259ccfb7e85a87","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlhN2FmYzBjZWQyZjBhZjUxMWIxNDU3NmVhMjU5Y2NmYjdlODVhODc=","commit":{"author":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-04-12T13:21:30Z"},"committer":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-04-12T15:00:39Z"},"message":"[SYNCOPE-1302] Added new expression model in mapping for internal attributes to access user relationships","tree":{"sha":"23420448c80ea1e730370e99233d3d4963b4f52a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/23420448c80ea1e730370e99233d3d4963b4f52a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9a7afc0ced2f0af511b14576ea259ccfb7e85a87","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9a7afc0ced2f0af511b14576ea259ccfb7e85a87","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9a7afc0ced2f0af511b14576ea259ccfb7e85a87","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"parents":[{"sha":"e5860a76a5584edf780df180eb9229ddf44de684","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e5860a76a5584edf780df180eb9229ddf44de684","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e5860a76a5584edf780df180eb9229ddf44de684"}],"stats":{"total":468,"additions":323,"deletions":145},"files":[{"sha":"83f948f67bd52be4060d13085fe7a422a072d8b1","filename":"client/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWizardBuilder.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java?ref=9a7afc0ced2f0af511b14576ea259ccfb7e85a87","patch":"@@ -353,7 +353,9 @@ public Recipients(final NotificationWrapper modelObject) {\n             recipientAttrName.addRequiredLabel();\n             recipientAttrName.setTitle(getString(\"intAttrNameInfo.help\")\n                     + \"<code>groups[groupName].attribute</code>, \"\n+                    + \"<code>users[userName].attribute</code>, \"\n                     + \"<code>anyObjects[anyObjectName].attribute</code>, \"\n+                    + \"<code>relationships[relationshipType][anyType].attribute</code> or \"\n                     + \"<code>memberships[groupName].attribute</code> or \"\n                     + \"<code>privileges[applicationKey]</code>\", true);\n             add(recipientAttrName);"},{"sha":"ad63013cd2dcbfb1886e433c09f8cd570a98aea3","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/AbstractMappingPanel.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java?ref=9a7afc0ced2f0af511b14576ea259ccfb7e85a87","patch":"@@ -152,7 +152,9 @@ public AbstractMappingPanel(\n                 Model.<String>of(),\n                 Model.of(getString(\"intAttrNameInfo.help\")\n                         + \"<code>groups[groupName].attribute</code>, \"\n+                        + \"<code>users[userName].attribute</code>, \"\n                         + \"<code>anyObjects[anyObjectName].attribute</code>, \"\n+                        + \"<code>relationships[relationshipType][anyType].attribute</code> or \"\n                         + \"<code>memberships[groupName].attribute</code> or \"\n                         + \"<code>privileges[applicationKey]</code>\"),\n                 new PopoverConfig().withHtml(true).withPlacement(TooltipConfig.Placement.right)) {"},{"sha":"c504fd24a36eea70040e080c4fce0a8f7bb9f4de","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/IntAttrName.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrName.java?ref=9a7afc0ced2f0af511b14576ea259ccfb7e85a87","patch":"@@ -35,12 +35,18 @@ public class IntAttrName {\n \n     private String enclosingGroup;\n \n+    private String relatedUser;\n+\n     private String relatedAnyObject;\n \n     private String membershipOfGroup;\n \n     private String privilegesOfApplication;\n \n+    private String relationshipType;\n+\n+    private String relationshipAnyType;\n+\n     public AnyTypeKind getAnyTypeKind() {\n         return anyTypeKind;\n     }\n@@ -81,6 +87,14 @@ public void setEnclosingGroup(final String enclosingGroup) {\n         this.enclosingGroup = enclosingGroup;\n     }\n \n+    public String getRelatedUser() {\n+        return relatedUser;\n+    }\n+\n+    public void setRelatedUser(final String relatedUser) {\n+        this.relatedUser = relatedUser;\n+    }\n+\n     public String getRelatedAnyObject() {\n         return relatedAnyObject;\n     }\n@@ -105,6 +119,22 @@ public void setPrivilegesOfApplication(final String privilegesOfApplication) {\n         this.privilegesOfApplication = privilegesOfApplication;\n     }\n \n+    public String getRelationshipType() {\n+        return relationshipType;\n+    }\n+\n+    public void setRelationshipType(final String relationshipType) {\n+        this.relationshipType = relationshipType;\n+    }\n+\n+    public String getRelationshipAnyType() {\n+        return relationshipAnyType;\n+    }\n+\n+    public void setRelationshipAnyType(final String relationshipAnyType) {\n+        this.relationshipAnyType = relationshipAnyType;\n+    }\n+\n     @Override\n     public String toString() {\n         return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);"},{"sha":"914d2485fd84b69326ea5f986d63190996a92bc8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/IntAttrNameParser.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParser.java?ref=9a7afc0ced2f0af511b14576ea259ccfb7e85a87","patch":"@@ -41,12 +41,19 @@ public class IntAttrNameParser {\n     private static final Pattern ENCLOSING_GROUP_PATTERN = Pattern.compile(\n             \"^groups\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\\\\.(.+)\");\n \n+    private static final Pattern RELATED_USER_PATTERN = Pattern.compile(\n+            \"^users\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\\\\.(.+)\");\n+\n     private static final Pattern RELATED_ANY_OBJECT_PATTERN = Pattern.compile(\n             \"^anyObjects\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\\\\.(.+)\");\n \n     private static final Pattern MEMBERSHIP_PATTERN = Pattern.compile(\n             \"^memberships\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\\\\.(.+)\");\n \n+    private static final Pattern RELATIONSHIP_PATTERN = Pattern.compile(\n+            \"^relationships\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\"\n+            + \"\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\\\\.(.+)\");\n+\n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n@@ -124,7 +131,22 @@ public IntAttrName parse(final String intAttrName, final AnyTypeKind provisionAn\n                         result.setMembershipOfGroup(matcher.group(1));\n                         setFieldOrSchemaName(matcher.group(2), result.getAnyTypeKind(), result);\n                     } else {\n-                        throw new ParseException(\"Unparsable expression: \" + intAttrName, 0);\n+                        matcher = RELATED_USER_PATTERN.matcher(intAttrName);\n+                        if (matcher.matches()) {\n+                            result.setAnyTypeKind(AnyTypeKind.USER);\n+                            result.setRelatedUser(matcher.group(1));\n+                            setFieldOrSchemaName(matcher.group(2), result.getAnyTypeKind(), result);\n+                        } else {\n+                            matcher = RELATIONSHIP_PATTERN.matcher(intAttrName);\n+                            if (matcher.matches()) {\n+                                result.setAnyTypeKind(AnyTypeKind.ANY_OBJECT);\n+                                result.setRelationshipType(matcher.group(1));\n+                                result.setRelationshipAnyType(matcher.group(2));\n+                                setFieldOrSchemaName(matcher.group(3), result.getAnyTypeKind(), result);\n+                            } else {\n+                                throw new ParseException(\"Unparsable expression: \" + intAttrName, 0);\n+                            }\n+                        }\n                     }\n                 }\n             }"},{"sha":"23af3cc7fe9a224fad7b6174a0f29ac69d6a10dd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":183,"deletions":144,"changes":327,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=9a7afc0ced2f0af511b14576ea259ccfb7e85a87","patch":"@@ -26,6 +26,7 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.reflect.FieldUtils;\n@@ -39,6 +40,7 @@\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -48,9 +50,11 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Application;\n@@ -61,6 +65,8 @@\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.Relationship;\n+import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -123,6 +129,9 @@ public class MappingManagerImpl implements MappingManager {\n     @Autowired\n     private GroupDAO groupDAO;\n \n+    @Autowired\n+    private RelationshipTypeDAO relationshipTypeDAO;\n+\n     @Autowired\n     private RealmDAO realmDAO;\n \n@@ -409,10 +418,14 @@ public List<PlainAttrValue> getIntValues(\n \n         LOG.debug(\"Get internal values for {} as '{}' on {}\", any, mapItem.getIntAttrName(), provision.getResource());\n \n-        Any<?> reference = null;\n+        List<Any<?>> references = new ArrayList<>();\n         Membership<?> membership = null;\n-        if (intAttrName.getEnclosingGroup() == null && intAttrName.getRelatedAnyObject() == null) {\n-            reference = any;\n+        if (intAttrName.getEnclosingGroup() == null\n+                && intAttrName.getRelatedAnyObject() == null\n+                && intAttrName.getRelationshipAnyType() == null\n+                && intAttrName.getRelationshipType() == null\n+                && intAttrName.getRelatedUser() == null) {\n+            references.add(any);\n         }\n         if (any instanceof GroupableRelatable) {\n             GroupableRelatable<?, ?, ?, ?, ?> groupableRelatable = (GroupableRelatable<?, ?, ?, ?, ?>) any;\n@@ -423,184 +436,210 @@ public List<PlainAttrValue> getIntValues(\n                     LOG.warn(\"No membership for {} in {}, ignoring\",\n                             intAttrName.getEnclosingGroup(), groupableRelatable);\n                 } else {\n-                    reference = group;\n+                    references.add(group);\n+                }\n+            } else if (intAttrName.getRelatedUser() != null) {\n+                User user = userDAO.findByUsername(intAttrName.getRelatedUser());\n+                if (user == null || user.getRelationships(groupableRelatable.getKey()).isEmpty()) {\n+                    LOG.warn(\"No relationship for {} in {}, ignoring\",\n+                            intAttrName.getRelatedUser(), groupableRelatable);\n+                } else if (groupableRelatable.getType().getKind() == AnyTypeKind.USER) {\n+                    LOG.warn(\"Users cannot have relationship with other users, ignoring\");\n+                } else {\n+                    references.add(user);\n                 }\n             } else if (intAttrName.getRelatedAnyObject() != null) {\n                 AnyObject anyObject = anyObjectDAO.findByName(intAttrName.getRelatedAnyObject());\n                 if (anyObject == null || groupableRelatable.getRelationships(anyObject.getKey()).isEmpty()) {\n                     LOG.warn(\"No relationship for {} in {}, ignoring\",\n                             intAttrName.getRelatedAnyObject(), groupableRelatable);\n                 } else {\n-                    reference = anyObject;\n+                    references.add(anyObject);\n+                }\n+            } else if (intAttrName.getRelationshipAnyType() != null && intAttrName.getRelationshipType() != null) {\n+                RelationshipType relationshipType = relationshipTypeDAO.find(intAttrName.getRelationshipType());\n+                final AnyType anyType = anyTypeDAO.find(intAttrName.getRelationshipAnyType());\n+                if (relationshipType == null || groupableRelatable.getRelationships(relationshipType).isEmpty()) {\n+                    LOG.warn(\"No relationship for type {} in {}, ignoring\",\n+                            intAttrName.getRelationshipType(), groupableRelatable);\n+                } else if (anyType == null) {\n+                    LOG.warn(\"No anyType {}, ignoring\", intAttrName.getRelationshipAnyType());\n+                } else {\n+                    references.addAll(groupableRelatable.getRelationships(relationshipType).stream().\n+                            filter(relationship -> anyType.equals(relationship.getRightEnd().getType())).\n+                            map(Relationship::getRightEnd).\n+                            collect(Collectors.toList()));\n                 }\n             } else if (intAttrName.getMembershipOfGroup() != null) {\n                 Group group = groupDAO.findByName(intAttrName.getMembershipOfGroup());\n                 membership = groupableRelatable.getMembership(group.getKey()).orElse(null);\n             }\n         }\n-        if (reference == null) {\n+        if (references.isEmpty()) {\n             LOG.warn(\"Could not determine the reference instance for {}\", mapItem.getIntAttrName());\n             return Collections.emptyList();\n         }\n \n         List<PlainAttrValue> values = new ArrayList<>();\n         boolean transform = true;\n \n-        AnyUtils anyUtils = anyUtilsFactory.getInstance(reference);\n-        if (intAttrName.getField() != null) {\n-            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-\n-            switch (intAttrName.getField()) {\n-                case \"key\":\n-                    attrValue.setStringValue(reference.getKey());\n-                    values.add(attrValue);\n-                    break;\n+        for (Any<?> reference : references) {\n+            AnyUtils anyUtils = anyUtilsFactory.getInstance(reference);\n+            if (intAttrName.getField() != null) {\n+                PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n \n-                case \"realm\":\n-                    attrValue.setStringValue(reference.getRealm().getFullPath());\n-                    values.add(attrValue);\n-                    break;\n+                switch (intAttrName.getField()) {\n+                    case \"key\":\n+                        attrValue.setStringValue(reference.getKey());\n+                        values.add(attrValue);\n+                        break;\n \n-                case \"password\":\n-                    // ignore\n-                    break;\n+                    case \"realm\":\n+                        attrValue.setStringValue(reference.getRealm().getFullPath());\n+                        values.add(attrValue);\n+                        break;\n+\n+                    case \"password\":\n+                        // ignore\n+                        break;\n+\n+                    case \"userOwner\":\n+                    case \"groupOwner\":\n+                        Mapping uMapping = provision.getAnyType().equals(anyTypeDAO.findUser())\n+                                ? provision.getMapping()\n+                                : null;\n+                        Mapping gMapping = provision.getAnyType().equals(anyTypeDAO.findGroup())\n+                                ? provision.getMapping()\n+                                : null;\n+\n+                        if (reference instanceof Group) {\n+                            Group group = (Group) reference;\n+                            String groupOwnerValue = null;\n+                            if (group.getUserOwner() != null && uMapping != null) {\n+                                groupOwnerValue = getGroupOwnerValue(provision, group.getUserOwner());\n+                            }\n+                            if (group.getGroupOwner() != null && gMapping != null) {\n+                                groupOwnerValue = getGroupOwnerValue(provision, group.getGroupOwner());\n+                            }\n \n-                case \"userOwner\":\n-                case \"groupOwner\":\n-                    Mapping uMapping = provision.getAnyType().equals(anyTypeDAO.findUser())\n-                            ? provision.getMapping()\n-                            : null;\n-                    Mapping gMapping = provision.getAnyType().equals(anyTypeDAO.findGroup())\n-                            ? provision.getMapping()\n-                            : null;\n-\n-                    if (reference instanceof Group) {\n-                        Group group = (Group) reference;\n-                        String groupOwnerValue = null;\n-                        if (group.getUserOwner() != null && uMapping != null) {\n-                            groupOwnerValue = getGroupOwnerValue(provision, group.getUserOwner());\n-                        }\n-                        if (group.getGroupOwner() != null && gMapping != null) {\n-                            groupOwnerValue = getGroupOwnerValue(provision, group.getGroupOwner());\n+                            if (StringUtils.isNotBlank(groupOwnerValue)) {\n+                                attrValue.setStringValue(groupOwnerValue);\n+                                values.add(attrValue);\n+                            }\n                         }\n+                        break;\n \n-                        if (StringUtils.isNotBlank(groupOwnerValue)) {\n-                            attrValue.setStringValue(groupOwnerValue);\n+                    case \"suspended\":\n+                        if (reference instanceof User) {\n+                            attrValue.setBooleanValue(((User) reference).isSuspended());\n                             values.add(attrValue);\n                         }\n-                    }\n-                    break;\n-\n-                case \"suspended\":\n-                    if (reference instanceof User) {\n-                        attrValue.setBooleanValue(((User) reference).isSuspended());\n-                        values.add(attrValue);\n-                    }\n-                    break;\n+                        break;\n \n-                case \"mustChangePassword\":\n-                    if (reference instanceof User) {\n-                        attrValue.setBooleanValue(((User) reference).isMustChangePassword());\n-                        values.add(attrValue);\n-                    }\n-                    break;\n+                    case \"mustChangePassword\":\n+                        if (reference instanceof User) {\n+                            attrValue.setBooleanValue(((User) reference).isMustChangePassword());\n+                            values.add(attrValue);\n+                        }\n+                        break;\n \n-                default:\n-                    try {\n-                        Object fieldValue = FieldUtils.readField(reference, intAttrName.getField(), true);\n-                        if (fieldValue instanceof Date) {\n-                            // needed because ConnId does not natively supports the Date type\n-                            attrValue.setStringValue(DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.\n-                                    format((Date) fieldValue));\n-                        } else if (Boolean.TYPE.isInstance(fieldValue)) {\n-                            attrValue.setBooleanValue((Boolean) fieldValue);\n-                        } else if (Double.TYPE.isInstance(fieldValue) || Float.TYPE.isInstance(fieldValue)) {\n-                            attrValue.setDoubleValue((Double) fieldValue);\n-                        } else if (Long.TYPE.isInstance(fieldValue) || Integer.TYPE.isInstance(fieldValue)) {\n-                            attrValue.setLongValue((Long) fieldValue);\n+                    default:\n+                        try {\n+                            Object fieldValue = FieldUtils.readField(reference, intAttrName.getField(), true);\n+                            if (fieldValue instanceof Date) {\n+                                // needed because ConnId does not natively supports the Date type\n+                                attrValue.setStringValue(DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.\n+                                        format((Date) fieldValue));\n+                            } else if (Boolean.TYPE.isInstance(fieldValue)) {\n+                                attrValue.setBooleanValue((Boolean) fieldValue);\n+                            } else if (Double.TYPE.isInstance(fieldValue) || Float.TYPE.isInstance(fieldValue)) {\n+                                attrValue.setDoubleValue((Double) fieldValue);\n+                            } else if (Long.TYPE.isInstance(fieldValue) || Integer.TYPE.isInstance(fieldValue)) {\n+                                attrValue.setLongValue((Long) fieldValue);\n+                            } else {\n+                                attrValue.setStringValue(fieldValue.toString());\n+                            }\n+                            values.add(attrValue);\n+                        } catch (Exception e) {\n+                            LOG.error(\"Could not read value of '{}' from {}\", intAttrName.getField(), reference, e);\n+                        }\n+                }\n+            } else if (intAttrName.getSchemaType() != null) {\n+                switch (intAttrName.getSchemaType()) {\n+                    case PLAIN:\n+                        PlainAttr<?> attr;\n+                        if (membership == null) {\n+                            attr = reference.getPlainAttr(intAttrName.getSchemaName()).orElse(null);\n                         } else {\n-                            attrValue.setStringValue(fieldValue.toString());\n+                            attr = ((GroupableRelatable<?, ?, ?, ?, ?>) reference).getPlainAttr(\n+                                    intAttrName.getSchemaName(), membership).orElse(null);\n                         }\n-                        values.add(attrValue);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Could not read value of '{}' from {}\", intAttrName.getField(), reference, e);\n-                    }\n-            }\n-        } else if (intAttrName.getSchemaType() != null) {\n-            switch (intAttrName.getSchemaType()) {\n-                case PLAIN:\n-                    PlainAttr<?> attr;\n-                    if (membership == null) {\n-                        attr = reference.getPlainAttr(intAttrName.getSchemaName()).orElse(null);\n-                    } else {\n-                        attr = ((GroupableRelatable<?, ?, ?, ?, ?>) reference).getPlainAttr(\n-                                intAttrName.getSchemaName(), membership).orElse(null);\n-                    }\n-                    if (attr == null) {\n-                        LOG.warn(\"Invalid PlainSchema {} or PlainAttr not found for {}\",\n-                                intAttrName.getSchemaName(), reference);\n-                    } else {\n-                        if (attr.getUniqueValue() != null) {\n-                            values.add(anyUtils.clonePlainAttrValue(attr.getUniqueValue()));\n-                        } else if (attr.getValues() != null) {\n-                            attr.getValues().forEach(value -> values.add(anyUtils.clonePlainAttrValue(value)));\n+                        if (attr == null) {\n+                            LOG.warn(\"Invalid PlainSchema {} or PlainAttr not found for {}\",\n+                                    intAttrName.getSchemaName(), reference);\n+                        } else {\n+                            if (attr.getUniqueValue() != null) {\n+                                values.add(anyUtils.clonePlainAttrValue(attr.getUniqueValue()));\n+                            } else if (attr.getValues() != null) {\n+                                attr.getValues().forEach(value -> values.add(anyUtils.clonePlainAttrValue(value)));\n+                            }\n                         }\n-                    }\n-                    break;\n+                        break;\n \n-                case DERIVED:\n-                    DerSchema derSchema = derSchemaDAO.find(intAttrName.getSchemaName());\n-                    if (derSchema == null) {\n-                        LOG.warn(\"Invalid DerSchema: {}\", intAttrName.getSchemaName());\n-                    } else {\n-                        String derValue = membership == null\n-                                ? derAttrHandler.getValue(reference, derSchema)\n-                                : derAttrHandler.getValue(reference, membership, derSchema);\n-                        if (derValue != null) {\n-                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                            attrValue.setStringValue(derValue);\n-                            values.add(attrValue);\n+                    case DERIVED:\n+                        DerSchema derSchema = derSchemaDAO.find(intAttrName.getSchemaName());\n+                        if (derSchema == null) {\n+                            LOG.warn(\"Invalid DerSchema: {}\", intAttrName.getSchemaName());\n+                        } else {\n+                            String derValue = membership == null\n+                                    ? derAttrHandler.getValue(reference, derSchema)\n+                                    : derAttrHandler.getValue(reference, membership, derSchema);\n+                            if (derValue != null) {\n+                                PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n+                                attrValue.setStringValue(derValue);\n+                                values.add(attrValue);\n+                            }\n                         }\n-                    }\n-                    break;\n+                        break;\n \n-                case VIRTUAL:\n-                    // virtual attributes don't get transformed\n-                    transform = false;\n+                    case VIRTUAL:\n+                        // virtual attributes don't get transformed\n+                        transform = false;\n \n-                    VirSchema virSchema = virSchemaDAO.find(intAttrName.getSchemaName());\n-                    if (virSchema == null) {\n-                        LOG.warn(\"Invalid VirSchema: {}\", intAttrName.getSchemaName());\n-                    } else {\n-                        LOG.debug(\"Expire entry cache {}-{}\", reference, intAttrName.getSchemaName());\n-                        virAttrCache.expire(\n-                                reference.getType().getKey(), reference.getKey(), intAttrName.getSchemaName());\n-\n-                        List<String> virValues = membership == null\n-                                ? virAttrHandler.getValues(reference, virSchema)\n-                                : virAttrHandler.getValues(reference, membership, virSchema);\n-                        virValues.forEach(virValue -> {\n-                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                            attrValue.setStringValue(virValue);\n-                            values.add(attrValue);\n-                        });\n-                    }\n-                    break;\n+                        VirSchema virSchema = virSchemaDAO.find(intAttrName.getSchemaName());\n+                        if (virSchema == null) {\n+                            LOG.warn(\"Invalid VirSchema: {}\", intAttrName.getSchemaName());\n+                        } else {\n+                            LOG.debug(\"Expire entry cache {}-{}\", reference, intAttrName.getSchemaName());\n+                            virAttrCache.expire(\n+                                    reference.getType().getKey(), reference.getKey(), intAttrName.getSchemaName());\n+\n+                            List<String> virValues = membership == null\n+                                    ? virAttrHandler.getValues(reference, virSchema)\n+                                    : virAttrHandler.getValues(reference, membership, virSchema);\n+                            virValues.forEach(virValue -> {\n+                                PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n+                                attrValue.setStringValue(virValue);\n+                                values.add(attrValue);\n+                            });\n+                        }\n+                        break;\n \n-                default:\n-            }\n-        } else if (intAttrName.getPrivilegesOfApplication() != null && reference instanceof User) {\n-            Application application = applicationDAO.find(intAttrName.getPrivilegesOfApplication());\n-            if (application == null) {\n-                LOG.warn(\"Invalid application: {}\", intAttrName.getPrivilegesOfApplication());\n-            } else {\n-                userDAO.findAllRoles((User) reference).stream().\n-                        flatMap(role -> role.getPrivileges(application).stream()).\n-                        forEach(privilege -> {\n-                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                            attrValue.setStringValue(privilege.getKey());\n-                            values.add(attrValue);\n-                        });\n+                    default:\n+                }\n+            } else if (intAttrName.getPrivilegesOfApplication() != null && reference instanceof User) {\n+                Application application = applicationDAO.find(intAttrName.getPrivilegesOfApplication());\n+                if (application == null) {\n+                    LOG.warn(\"Invalid application: {}\", intAttrName.getPrivilegesOfApplication());\n+                } else {\n+                    userDAO.findAllRoles((User) reference).stream().\n+                            flatMap(role -> role.getPrivileges(application).stream()).\n+                            forEach(privilege -> {\n+                                PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n+                                attrValue.setStringValue(privilege.getKey());\n+                                values.add(attrValue);\n+                            });\n+                }\n             }\n         }\n "},{"sha":"6154658332b6836ebf1c49bc8888e869f94f6940","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=9a7afc0ced2f0af511b14576ea259ccfb7e85a87","patch":"@@ -523,6 +523,21 @@ private void populateMapping(\n                                         \"No need to map virtual schema on linking resource\");\n                             }\n                         }\n+                        if (intAttrName.getRelatedUser() != null\n+                                && item.getPurpose() != MappingPurpose.PROPAGATION) {\n+\n+                            invalidMapping.getElements().add(\n+                                    \"Only \" + MappingPurpose.PROPAGATION.name()\n+                                    + \" allowed when referring to users\");\n+                        }\n+                        if ((intAttrName.getRelationshipType() != null\n+                                || intAttrName.getRelationshipAnyType() != null)\n+                                && item.getPurpose() != MappingPurpose.PROPAGATION) {\n+\n+                            invalidMapping.getElements().add(\n+                                    \"Only \" + MappingPurpose.PROPAGATION.name()\n+                                    + \" allowed when referring to relationships\");\n+                        }\n                     } else {\n                         LOG.error(\"'{}' not allowed\", itemTO.getIntAttrName());\n                         invalidMapping.getElements().add(\"'\" + itemTO.getIntAttrName() + \"' not allowed\");"},{"sha":"205300ffa567a230a34c057227efb689f1adbffc","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/IntAttrNameParserTest.java","status":"modified","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParserTest.java?ref=9a7afc0ced2f0af511b14576ea259ccfb7e85a87","patch":"@@ -50,6 +50,9 @@ public void ownFields() throws ParseException {\n         assertNull(intAttrName.getMembershipOfGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n         assertNull(intAttrName.getPrivilegesOfApplication());\n+        assertNull(intAttrName.getRelationshipAnyType());\n+        assertNull(intAttrName.getRelationshipType());\n+        assertNull(intAttrName.getRelatedUser());\n \n         intAttrName = intAttrNameParser.parse(\"name\", AnyTypeKind.GROUP);\n         assertNotNull(intAttrName);\n@@ -62,6 +65,9 @@ public void ownFields() throws ParseException {\n         assertNull(intAttrName.getMembershipOfGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n         assertNull(intAttrName.getPrivilegesOfApplication());\n+        assertNull(intAttrName.getRelationshipAnyType());\n+        assertNull(intAttrName.getRelationshipType());\n+        assertNull(intAttrName.getRelatedUser());\n \n         intAttrName = intAttrNameParser.parse(\"userOwner\", AnyTypeKind.GROUP);\n         assertNotNull(intAttrName);\n@@ -74,6 +80,9 @@ public void ownFields() throws ParseException {\n         assertNull(intAttrName.getMembershipOfGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n         assertNull(intAttrName.getPrivilegesOfApplication());\n+        assertNull(intAttrName.getRelationshipAnyType());\n+        assertNull(intAttrName.getRelationshipType());\n+        assertNull(intAttrName.getRelatedUser());\n \n         intAttrName = intAttrNameParser.parse(\"name\", AnyTypeKind.USER);\n         assertNotNull(intAttrName);\n@@ -93,6 +102,9 @@ public void ownSchema() throws ParseException {\n         assertNull(intAttrName.getMembershipOfGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n         assertNull(intAttrName.getPrivilegesOfApplication());\n+        assertNull(intAttrName.getRelationshipAnyType());\n+        assertNull(intAttrName.getRelationshipType());\n+        assertNull(intAttrName.getRelatedUser());\n \n         intAttrName = intAttrNameParser.parse(\"cn\", AnyTypeKind.ANY_OBJECT);\n         assertNotNull(intAttrName);\n@@ -104,6 +116,9 @@ public void ownSchema() throws ParseException {\n         assertNull(intAttrName.getMembershipOfGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n         assertNull(intAttrName.getPrivilegesOfApplication());\n+        assertNull(intAttrName.getRelationshipAnyType());\n+        assertNull(intAttrName.getRelationshipType());\n+        assertNull(intAttrName.getRelatedUser());\n \n         intAttrName = intAttrNameParser.parse(\"rvirtualdata\", AnyTypeKind.ANY_OBJECT);\n         assertNotNull(intAttrName);\n@@ -115,6 +130,9 @@ public void ownSchema() throws ParseException {\n         assertNull(intAttrName.getMembershipOfGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n         assertNull(intAttrName.getPrivilegesOfApplication());\n+        assertNull(intAttrName.getRelationshipAnyType());\n+        assertNull(intAttrName.getRelationshipType());\n+        assertNull(intAttrName.getRelatedUser());\n     }\n \n     @Test\n@@ -129,6 +147,26 @@ public void enclosingGroup() throws ParseException {\n         assertNull(intAttrName.getMembershipOfGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n         assertNull(intAttrName.getPrivilegesOfApplication());\n+        assertNull(intAttrName.getRelationshipAnyType());\n+        assertNull(intAttrName.getRelationshipType());\n+        assertNull(intAttrName.getRelatedUser());\n+    }\n+\n+    @Test\n+    public void relatedUser() throws ParseException {\n+        IntAttrName intAttrName = intAttrNameParser.parse(\"users[bellini].firstname\", AnyTypeKind.USER);\n+        assertNotNull(intAttrName);\n+        assertEquals(AnyTypeKind.USER, intAttrName.getAnyTypeKind());\n+        assertNull(intAttrName.getField());\n+        assertEquals(\"firstname\", intAttrName.getSchemaName());\n+        assertEquals(SchemaType.PLAIN, intAttrName.getSchemaType());\n+        assertEquals(\"bellini\", intAttrName.getRelatedUser());\n+        assertNull(intAttrName.getEnclosingGroup());\n+        assertNull(intAttrName.getMembershipOfGroup());\n+        assertNull(intAttrName.getRelatedAnyObject());\n+        assertNull(intAttrName.getPrivilegesOfApplication());\n+        assertNull(intAttrName.getRelationshipAnyType());\n+        assertNull(intAttrName.getRelationshipType());\n     }\n \n     @Test\n@@ -143,6 +181,9 @@ public void relatedAnyObject() throws ParseException {\n         assertEquals(\"hp\", intAttrName.getRelatedAnyObject());\n         assertNull(intAttrName.getMembershipOfGroup());\n         assertNull(intAttrName.getPrivilegesOfApplication());\n+        assertNull(intAttrName.getRelationshipAnyType());\n+        assertNull(intAttrName.getRelationshipType());\n+        assertNull(intAttrName.getRelatedUser());\n     }\n \n     @Test\n@@ -157,6 +198,9 @@ public void membership() throws ParseException {\n         assertEquals(\"top\", intAttrName.getMembershipOfGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n         assertNull(intAttrName.getPrivilegesOfApplication());\n+        assertNull(intAttrName.getRelationshipAnyType());\n+        assertNull(intAttrName.getRelationshipType());\n+        assertNull(intAttrName.getRelatedUser());\n     }\n \n     @Test\n@@ -170,6 +214,26 @@ public void privileges() throws ParseException {\n         assertNull(intAttrName.getEnclosingGroup());\n         assertNull(intAttrName.getRelatedAnyObject());\n         assertEquals(\"mightyApp\", intAttrName.getPrivilegesOfApplication());\n+        assertNull(intAttrName.getRelationshipAnyType());\n+        assertNull(intAttrName.getRelationshipType());\n+        assertNull(intAttrName.getRelatedUser());\n+    }\n+\n+    @Test\n+    public void relationship() throws ParseException {\n+        IntAttrName intAttrName = intAttrNameParser.parse(\"relationships[inclusion][PRINTER].location\",\n+                AnyTypeKind.USER);\n+        assertNotNull(intAttrName);\n+        assertEquals(AnyTypeKind.ANY_OBJECT, intAttrName.getAnyTypeKind());\n+        assertNull(intAttrName.getField());\n+        assertEquals(\"location\", intAttrName.getSchemaName());\n+        assertEquals(SchemaType.PLAIN, intAttrName.getSchemaType());\n+        assertEquals(\"inclusion\", intAttrName.getRelationshipType());\n+        assertEquals(\"PRINTER\", intAttrName.getRelationshipAnyType());\n+        assertNull(intAttrName.getEnclosingGroup());\n+        assertNull(intAttrName.getRelatedAnyObject());\n+        assertNull(intAttrName.getPrivilegesOfApplication());\n+        assertNull(intAttrName.getRelatedUser());\n     }\n \n     @Test"},{"sha":"a4c83d27a57fbed31cac2eabdb96046acce1ad0e","filename":"src/main/asciidoc/reference-guide/concepts/externalresources.adoc","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fexternalresources.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a7afc0ced2f0af511b14576ea259ccfb7e85a87/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fexternalresources.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fexternalresources.adoc?ref=9a7afc0ced2f0af511b14576ea259ccfb7e85a87","patch":"@@ -122,8 +122,12 @@ specified by an expression matching one of the following models:\n ** `schema` - resolves to the attribute for the given `schema`, owned by the mapped entity (user, group, any object)\n ** `groups[groupName].schema` - resolves to the attribute for the given `schema`, owned by the group with name\n `groupName`, if a membership for the mapped entity exists\n+** `users[userName].schema` - resolves to the attribute for the given `schema`, owned by the user with name\n+`userName`, if a relationship with the mapped entity exists\n ** `anyObjects[anyObjectName].schema` - resolves to the attribute for the given `schema`, owned by the any object with\n name `anyObjectName`, if a relationship with the mapped entity exists\n+** `relationships[relationshipType][relationshipAnyType].schema` - resolves to the attribute for the given `schema`, \n+owned by the any object of type `relationshipAnyType`, if a relationship with the mapped entity and type `relationshipType` exists\n ** `memberships[groupName].schema` - resolves to the attribute for the given `schema`, owned by the membership for group\n `groupName` of the mapped entity (user, any object), if such a membership exists\n ** `privileges[applicationKey]` - resolves to the list of <<privileges,privileges>> related to the given application,"}]}