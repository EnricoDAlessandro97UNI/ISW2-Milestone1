{"sha":"10f5c397dcc40e98e09ef025fd6a3de92a30f2f4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjEwZjVjMzk3ZGNjNDBlOThlMDllZjAyNWZkNmEzZGU5MmEzMGYyZjQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-21T10:55:16Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-21T10:55:16Z"},"message":"[SYNCOPE-1420] Replacing expired access tokens upon login","tree":{"sha":"020d207d0537b0dbc2e8c58f857056dbd7fdc83d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/020d207d0537b0dbc2e8c58f857056dbd7fdc83d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/10f5c397dcc40e98e09ef025fd6a3de92a30f2f4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/10f5c397dcc40e98e09ef025fd6a3de92a30f2f4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/10f5c397dcc40e98e09ef025fd6a3de92a30f2f4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/10f5c397dcc40e98e09ef025fd6a3de92a30f2f4/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4a293350217a4c065781be22d8f8067729ab4df9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4a293350217a4c065781be22d8f8067729ab4df9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4a293350217a4c065781be22d8f8067729ab4df9"}],"stats":{"total":43,"additions":41,"deletions":2},"files":[{"sha":"9ccc4e5d4e3cc8ab977c8cf26120691e500c6692","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/10f5c397dcc40e98e09ef025fd6a3de92a30f2f4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/10f5c397dcc40e98e09ef025fd6a3de92a30f2f4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=10f5c397dcc40e98e09ef025fd6a3de92a30f2f4","patch":"@@ -133,8 +133,8 @@ public Pair<String, Date> create(\n             accessToken.setKey(SecureRandomUtils.generateRandomUUID().toString());\n \n             accessToken = replace(subject, claims, authorities, accessToken);\n-        } else if (replace) {\n-            // AccessToken found, but replace requested: update existing\n+        } else if (replace || accessToken.getExpiryTime() == null || accessToken.getExpiryTime().before(new Date())) {\n+            // AccessToken found, but either replace was requested or it is expired: update existing\n             accessToken = replace(subject, claims, authorities, accessToken);\n         }\n "},{"sha":"406909bef042cd892f6d18693419483ab54e18ba","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/JWTITCase.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/10f5c397dcc40e98e09ef025fd6a3de92a30f2f4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/10f5c397dcc40e98e09ef025fd6a3de92a30f2f4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java?ref=10f5c397dcc40e98e09ef025fd6a3de92a30f2f4","patch":"@@ -20,6 +20,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n@@ -48,6 +49,8 @@\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n import org.apache.cxf.rs.security.jose.jwt.JwtToken;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.AccessTokenService;\n@@ -551,4 +554,40 @@ public void thirdPartyTokenBadSignature() throws ParseException {\n             // expected\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1420() {\n+        Attr orig = configurationService.get(\"jwt.lifetime.minutes\");\n+        try {\n+            // set for immediate JWT expiration\n+            configurationService.set(new Attr.Builder(\"jwt.lifetime.minutes\").value(\"0\").build());\n+\n+            UserCR userCR = UserITCase.getUniqueSample(\"syncope164@syncope.apache.org\");\n+            UserTO user = createUser(userCR).getEntity();\n+            assertNotNull(user);\n+\n+            // login, get JWT with  expiryTime\n+            String jwt = clientFactory.create(user.getUsername(), \"password123\").getJWT();\n+\n+            JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(jwt);\n+            assertTrue(consumer.verifySignatureWith(jwsSignatureVerifier));\n+            Long expiryTime = consumer.getJwtClaims().getExpiryTime();\n+            assertNotNull(expiryTime);\n+\n+            // wait for 1 sec, check that JWT is effectively expired\n+            try {\n+                Thread.sleep(1000L);\n+            } catch (InterruptedException e) {\n+                // ignore\n+            }\n+            assertTrue(expiryTime < System.currentTimeMillis());\n+\n+            // login again, get new JWT\n+            // (even if ExpiredAccessTokenCleanup did not run yet, as it is scheduled every 5 minutes)\n+            String newJWT = clientFactory.create(user.getUsername(), \"password123\").getJWT();\n+            assertNotEquals(jwt, newJWT);\n+        } finally {\n+            configurationService.set(orig);\n+        }\n+    }\n }"}]}