{"sha":"ee50849a4aaed45a843be341341895da3d09dd1c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmVlNTA4NDlhNGFhZWQ0NWE4NDNiZTM0MTM0MTg5NWRhM2QwOWRkMWM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-18T16:51:22Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-18T16:51:22Z"},"message":"Removing unused (and little meaningful) methods for listing report and task executions form everywhere\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1447389 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"88b2235ce9e76035ef845edc3a1af4fffc130bbb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/88b2235ce9e76035ef845edc3a1af4fffc130bbb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ee50849a4aaed45a843be341341895da3d09dd1c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ee50849a4aaed45a843be341341895da3d09dd1c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ee50849a4aaed45a843be341341895da3d09dd1c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ee50849a4aaed45a843be341341895da3d09dd1c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"af56850b35643a76f2eda8cc6e69e8a0ceae15b7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/af56850b35643a76f2eda8cc6e69e8a0ceae15b7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/af56850b35643a76f2eda8cc6e69e8a0ceae15b7"}],"stats":{"total":172,"additions":21,"deletions":151},"files":[{"sha":"ff5207d03dd00c0f93951ccfe999f5d4f6a93b02","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ReportServiceProxy.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -64,11 +64,6 @@ public List<ReportTO> list(final int page, final int size) {\n                 page, size));\r\n     }\r\n \r\n-    @Override\r\n-    public List<ReportExecTO> listExecutions() {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"report/execution/list\", ReportExecTO[].class));\r\n-    }\r\n-\r\n     @Override\r\n     public ReportletConfClasses getReportletConfClasses() {\r\n         List<String> confClasses = Arrays.asList(getRestTemplate().getForObject(\r"},{"sha":"93de882b1027d27d291cb3ae1fdf7e61727a800f","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/TaskServiceProxy.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -61,8 +61,8 @@ public Response create(final TaskTO taskTO) {\n         String subTypeString = (taskTO instanceof SyncTaskTO)\r\n                 ? \"sync\"\r\n                 : (taskTO instanceof SchedTaskTO)\r\n-                        ? \"sched\"\r\n-                        : \"\";\r\n+                ? \"sched\"\r\n+                : \"\";\r\n \r\n         TaskTO task = getRestTemplate().postForObject(baseUrl + \"task/create/{type}\", taskTO, taskTO.getClass(),\r\n                 subTypeString);\r\n@@ -166,12 +166,6 @@ public List<? extends TaskTO> list(final TaskType type, final int page, final in\n         }\r\n     }\r\n \r\n-    @Override\r\n-    public List<TaskExecTO> listExecutions(final TaskType type) {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/execution/list.json\",\r\n-                TaskExecTO[].class, type));\r\n-    }\r\n-\r\n     @Override\r\n     public <T extends TaskTO> T read(final TaskType type, final Long taskId) {\r\n         return (T) getRestTemplate().getForObject(baseUrl + \"task/read/{taskId}.json\", getTOClass(type), taskId);\r\n@@ -195,8 +189,8 @@ public void update(final Long taskId, final TaskTO taskTO) {\n         String path = (taskTO instanceof SyncTaskTO)\r\n                 ? \"sync\"\r\n                 : (taskTO instanceof SchedTaskTO)\r\n-                        ? \"sched\"\r\n-                        : null;\r\n+                ? \"sched\"\r\n+                : null;\r\n         if (path == null) {\r\n             throw new IllegalArgumentException(\"Task can only be instance of SchedTaskTO or SyncTaskTO\");\r\n         }\r"},{"sha":"441441a5c2966a458a2232d04b6140aceeee7395","filename":"common/src/main/java/org/apache/syncope/common/services/ReportService.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -103,13 +103,6 @@ Response exportExecutionResult(@PathParam(\"executionId\") Long executionId,\n     List<ReportTO> list(@QueryParam(\"page\") int page,\r\n             @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n \r\n-    /**\r\n-     * @return Returns list of all previous executions\r\n-     */\r\n-    @GET\r\n-    @Path(\"executions\")\r\n-    List<ReportExecTO> listExecutions();\r\n-\r\n     /**\r\n      * @param reportId ID of report to be read\r\n      * @return Report with matching ID\r"},{"sha":"eba8820db3347dfd0380e96f246120a3629fd37a","filename":"common/src/main/java/org/apache/syncope/common/services/TaskService.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -113,14 +113,6 @@ public interface TaskService {\n     List<? extends TaskTO> list(@PathParam(\"type\") TaskType taskType, @QueryParam(\"page\") int page,\r\n             @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n \r\n-    /**\r\n-     * @param taskType Type of task executions to be listed\r\n-     * @return Returns list of task executions where executed task matches type\r\n-     */\r\n-    @GET\r\n-    @Path(\"{type}/executions\")\r\n-    List<TaskExecTO> listExecutions(@PathParam(\"type\") TaskType taskType);\r\n-\r\n     /**\r\n      * @param taskType Type of task to be read\r\n      * @param taskId Id of task to be read\r\n@@ -154,5 +146,4 @@ List<? extends TaskTO> list(@PathParam(\"type\") TaskType taskType, @QueryParam(\"p\n     @PUT\r\n     @Path(\"{taskId}\")\r\n     void update(@PathParam(\"taskId\") Long taskId, TaskTO taskTO);\r\n-\r\n }\r"},{"sha":"6a510dc99f342a8fb8ef8f42a150d6518e04d886","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -143,7 +143,6 @@ public enum PolicySubCategory {\n     public enum ReportSubCategory {\r\n \r\n         list,\r\n-        listExecutions,\r\n         create,\r\n         read,\r\n         readExecution,\r\n@@ -213,7 +212,6 @@ public enum TaskSubCategory {\n         read,\r\n         update,\r\n         delete,\r\n-        listExecutions,\r\n         getJobClasses,\r\n         getSyncActionsClasses,\r\n         readExecution,\r"},{"sha":"0fe0e4ee09d0c12ef54afd701aee0d221250a92a","filename":"console/src/main/java/org/apache/syncope/console/pages/UserTemplateModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserTemplateModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserTemplateModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserTemplateModalPage.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -52,7 +52,7 @@ public UserTemplateModalPage(final PageReference callerPageRef, final ModalWindo\n     }\n \n     @Override\n-    protected void submitAction(AjaxRequestTarget target, Form form) {\n+    protected void submitAction(final AjaxRequestTarget target, final Form form) {\n         syncTaskTO.setUserTemplate((UserTO) form.getModelObject());\n         taskRestClient.updateSyncTask(syncTaskTO);\n     }"},{"sha":"dcb3c8367aa822d7a2dde80cac3c515053e1d8d0","filename":"console/src/main/java/org/apache/syncope/console/rest/ExecutionRestClient.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FExecutionRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FExecutionRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FExecutionRestClient.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -18,15 +18,9 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import java.util.List;\n-\n-import org.apache.syncope.common.to.AbstractExecTO;\n-\n public interface ExecutionRestClient {\n \n-    List<? extends AbstractExecTO> listExecutions();\n-\n-    void startExecution(final Long executionCollectorId);\n+    void startExecution(long executionCollectorId);\n \n-    void deleteExecution(final Long executionId);\n+    void deleteExecution(long executionId);\n }"},{"sha":"8657af02bd0440724ab857185fbb41702f7d0530","filename":"console/src/main/java/org/apache/syncope/console/rest/ReportRestClient.java","status":"modified","additions":2,"deletions":13,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -23,7 +23,6 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.services.ReportService;\n import org.apache.syncope.common.services.ReportletConfClasses;\n-import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n import org.apache.syncope.common.types.ReportExecExportFormat;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n@@ -85,7 +84,7 @@ public void delete(final Long reportId) {\n      * @param reportId report id\n      */\n     @Override\n-    public void startExecution(final Long reportId) {\n+    public void startExecution(final long reportId) {\n         getService(ReportService.class).execute(reportId);\n     }\n \n@@ -95,20 +94,10 @@ public void startExecution(final Long reportId) {\n      * @param reportExecId report execution id\n      */\n     @Override\n-    public void deleteExecution(final Long reportExecId) {\n+    public void deleteExecution(final long reportExecId) {\n         getService(ReportService.class).deleteExecution(reportExecId);\n     }\n \n-    /**\n-     * Get all executions.\n-     *\n-     * @return list of all executions\n-     */\n-    @Override\n-    public List<ReportExecTO> listExecutions() {\n-        return getService(ReportService.class).listExecutions();\n-    }\n-\n     public Response exportExecutionResult(final Long executionId, final ReportExecExportFormat fmt) {\n         return getService(ReportService.class).exportExecutionResult(executionId, fmt);\n     }"},{"sha":"327a44d4c57ca69dab65e245a8756f08aa4f0cc3","filename":"console/src/main/java/org/apache/syncope/console/rest/TaskRestClient.java","status":"modified","additions":5,"deletions":23,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -19,17 +19,14 @@\n package org.apache.syncope.console.rest;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-\n import org.apache.syncope.common.services.TaskService;\n import org.apache.syncope.common.to.JobClassTO;\n import org.apache.syncope.common.to.NotificationTaskTO;\n import org.apache.syncope.common.to.PropagationTaskTO;\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncActionClassTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n-import org.apache.syncope.common.to.TaskExecTO;\n import org.apache.syncope.common.to.TaskTO;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.util.CollectionWrapper;\n@@ -90,9 +87,7 @@ public Integer count(final String kind) {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <T extends TaskTO> List<T> listTasks(final Class<T> reference, final int page, final int size) {\n-        List<T> result = Collections.emptyList();\n-        result = (List<T>) getService(TaskService.class).list(getTaskType(reference), page, size);\n-        return result;\n+        return (List<T>) getService(TaskService.class).list(getTaskType(reference), page, size);\n     }\n \n     private TaskType getTaskType(final Class<?> reference) {\n@@ -118,20 +113,7 @@ public NotificationTaskTO readNotificationTask(final Long taskId) {\n     }\n \n     public <T extends SchedTaskTO> T readSchedTask(final Class<T> reference, final Long taskId) {\n-            return getService(TaskService.class).read(getTaskType(reference), taskId);\n-    }\n-\n-    /**\n-     * Get all executions.\n-     *\n-     * @return list of all executions\n-     */\n-    @Override\n-    public List<TaskExecTO> listExecutions() {\n-        throw new UnsupportedOperationException(\"You need to specify type of executed tasks to be listed\");\n-//        return getService(TaskService.class).listExecutions();\n-//                Arrays.asList(SyncopeSession.get().getRestTemplate()\n-//                .getForObject(baseURL + \"task/execution/list\", TaskExecTO[].class)); FIXME interface?\n+        return getService(TaskService.class).read(getTaskType(reference), taskId);\n     }\n \n     /**\n@@ -144,7 +126,7 @@ public void delete(final Long taskId, final Class<? extends TaskTO> taskToClass)\n     }\n \n     @Override\n-    public void startExecution(final Long taskId) {\n+    public void startExecution(final long taskId) {\n         startExecution(taskId, false);\n     }\n \n@@ -153,7 +135,7 @@ public void startExecution(final Long taskId) {\n      *\n      * @param taskId task id\n      */\n-    public void startExecution(final Long taskId, final boolean dryRun) {\n+    public void startExecution(final long taskId, final boolean dryRun) {\n         getService(TaskService.class).execute(taskId, dryRun);\n     }\n \n@@ -163,7 +145,7 @@ public void startExecution(final Long taskId, final boolean dryRun) {\n      * @param taskExecId task execution id\n      */\n     @Override\n-    public void deleteExecution(final Long taskExecId) {\n+    public void deleteExecution(final long taskExecId) {\n         getService(TaskService.class).deleteExecution(taskExecId);\n     }\n "},{"sha":"38d42bf06399e769d5e67860192109ac33528f43","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":0,"deletions":15,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -201,21 +201,6 @@ public List<ReportTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/execution/list\")\n-    public List<ReportExecTO> listExecutions() {\n-        List<ReportExec> executions = reportExecDAO.findAll();\n-        List<ReportExecTO> executionTOs = new ArrayList<ReportExecTO>(executions.size());\n-        for (ReportExec execution : executions) {\n-            executionTOs.add(binder.getReportExecTO(execution));\n-        }\n-\n-        auditManager.audit(Category.report, ReportSubCategory.listExecutions, Result.success,\n-                \"Successfully listed all report executions: \" + executionTOs.size());\n-\n-        return executionTOs;\n-    }\n-\n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/reportletConfClasses\")\n     public ModelAndView getReportletConfClasses() {"},{"sha":"09ba2c5b3a5bdab0bdf5484dc8b6710e2aa78685","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":0,"deletions":16,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -230,22 +230,6 @@ public List<TaskTO> list(@PathVariable(\"kind\") final String kind, @PathVariable(\n         return taskTOs;\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/execution/list\")\n-    public List<TaskExecTO> listExecutions(@PathVariable(\"kind\") final String kind) {\n-\n-        List<TaskExec> executions = taskExecDAO.findAll(getTaskUtil(kind).taskClass());\n-        List<TaskExecTO> executionTOs = new ArrayList<TaskExecTO>(executions.size());\n-        for (TaskExec execution : executions) {\n-            executionTOs.add(binder.getTaskExecTO(execution));\n-        }\n-\n-        auditManager.audit(Category.task, TaskSubCategory.listExecutions, Result.success,\n-                \"Successfully listed all task executions: \" + executionTOs.size() + \"/\" + kind);\n-\n-        return executionTOs;\n-    }\n-\n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/jobClasses\")\n     public ModelAndView getJobClasses() {"},{"sha":"3167ba2bfd160d81cbb0670a0b3751f69023925b","filename":"core/src/main/java/org/apache/syncope/core/services/ReportServiceImpl.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -22,11 +22,9 @@\n import java.io.OutputStream;\n import java.net.URI;\n import java.util.List;\n-\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n import javax.ws.rs.core.UriInfo;\n-\n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.services.ReportService;\n import org.apache.syncope.common.services.ReportletConfClasses;\n@@ -79,11 +77,6 @@ public List<ReportTO> list(final int page, final int size) {\n         return reportController.list(page, size);\n     }\n \n-    @Override\n-    public List<ReportExecTO> listExecutions() {\n-        return reportController.listExecutions();\n-    }\n-\n     @Override\n     public ReportletConfClasses getReportletConfClasses() {\n         return new ReportletConfClasses(reportController.getReportletConfClassesInternal());\n@@ -104,15 +97,17 @@ public Response exportExecutionResult(final Long executionId, final ReportExecEx\n         final ReportExecExportFormat format = (fmt == null) ? ReportExecExportFormat.XML : fmt;\n         final ReportExec reportExec = reportController.getAndCheckReportExecInternal(executionId);\n         StreamingOutput sout = new StreamingOutput() {\n+\n             @Override\n             public void write(final OutputStream os) throws IOException {\n                 reportController.exportExecutionResultInternal(os, reportExec, format);\n             }\n         };\n-        String disposition = \"attachment; filename=\" + reportExec.getReport().getName() + \".\" + format.name().toLowerCase();\n-\t\treturn Response.ok(sout)\n-\t\t\t\t.header(SyncopeConstants.CONTENT_DISPOSITION_HEADER, disposition)\n-\t\t\t\t.build();\n+        String disposition = \"attachment; filename=\" + reportExec.getReport().getName() + \".\" + format.name().\n+                toLowerCase();\n+        return Response.ok(sout)\n+                .header(SyncopeConstants.CONTENT_DISPOSITION_HEADER, disposition)\n+                .build();\n     }\n \n     @Override\n@@ -134,5 +129,4 @@ public void deleteExecution(final Long executionId) {\n     public void setUriInfo(final UriInfo uriInfo) {\n         this.uriInfo = uriInfo;\n     }\n-\n }"},{"sha":"aa7c739d4c223666d220e9ba971f7ee7a008e01f","filename":"core/src/main/java/org/apache/syncope/core/services/TaskServiceImpl.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -21,11 +21,9 @@\n import java.net.URI;\r\n import java.util.List;\r\n import java.util.Set;\r\n-\r\n import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.UriInfo;\r\n-\r\n import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.TaskService;\r\n import org.apache.syncope.common.to.JobClassTO;\r\n@@ -124,11 +122,6 @@ public List<? extends TaskTO> list(final TaskType taskType, final int page, fina\n         return taskController.list(taskType.toString(), page, size);\r\n     }\r\n \r\n-    @Override\r\n-    public List<TaskExecTO> listExecutions(final TaskType taskType) {\r\n-        return taskController.listExecutions(taskType.toString());\r\n-    }\r\n-\r\n     @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n     public <T extends TaskTO> T read(final TaskType taskType, final Long taskId) {\r\n@@ -161,5 +154,4 @@ public void update(final Long taskId, final TaskTO taskTO) {\n     public void setUriInfo(final UriInfo ui) {\r\n         this.uriInfo = ui;\r\n     }\r\n-\r\n }\r"},{"sha":"c5beafb1060db182a9c2cf2f7a435e2b94a05380","filename":"core/src/test/java/org/apache/syncope/core/rest/LoggerTestITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -25,7 +25,6 @@\n \n import java.text.ParseException;\n import java.util.List;\n-\n import org.apache.syncope.common.to.LoggerTO;\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditLoggerName;\n@@ -88,7 +87,7 @@ public void setLevel() {\n     @Test\n     public void enableDisableAudit() {\n         AuditLoggerName auditLoggerName = new AuditLoggerName(AuditElements.Category.report,\n-                AuditElements.ReportSubCategory.listExecutions, AuditElements.Result.failure);\n+                AuditElements.ReportSubCategory.deleteExecution, AuditElements.Result.failure);\n \n         List<AuditLoggerName> audits = CollectionWrapper.wrapLogger(loggerService.list(LoggerType.AUDIT));\n         assertNotNull(audits);"},{"sha":"54454e8944e20931c4f31d3f6f3fe22c133ffa16","filename":"core/src/test/java/org/apache/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -75,16 +75,6 @@ public void list() {\n         }\n     }\n \n-    @Test\n-    public void listExecutions() {\n-        List<ReportExecTO> executions = reportService.listExecutions();\n-        assertNotNull(executions);\n-        assertFalse(executions.isEmpty());\n-        for (ReportExecTO execution : executions) {\n-            assertNotNull(execution);\n-        }\n-    }\n-\n     @Test\n     public void read() {\n         ReportTO reportTO = reportService.read(1L);"},{"sha":"9987ae338ee0a59631137e7c814d591507390737","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee50849a4aaed45a843be341341895da3d09dd1c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee50849a4aaed45a843be341341895da3d09dd1c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=ee50849a4aaed45a843be341341895da3d09dd1c","patch":"@@ -179,16 +179,6 @@ public void paginatedList() {\n         assertTrue(tasks.isEmpty());\n     }\n \n-    @Test\n-    public void listExecutions() {\n-        List<TaskExecTO> executions = taskService.listExecutions(TaskType.PROPAGATION);\n-        assertNotNull(executions);\n-        assertFalse(executions.isEmpty());\n-        for (TaskExecTO execution : executions) {\n-            assertNotNull(execution);\n-        }\n-    }\n-\n     @Test\n     public void read() {\n         PropagationTaskTO taskTO = taskService.read(TaskType.PROPAGATION, 3L);"}]}