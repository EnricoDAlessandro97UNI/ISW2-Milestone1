{"sha":"6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZiNDJhOGY2MDk5MzBmMTBjMjcwNTg2MDRmZjlmYmRjMWU2YThiY2M=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2021-04-08T08:29:52Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2021-04-08T08:29:52Z"},"message":"[SYNCOPE-1545] WA > SAML 2.0 (#259)","tree":{"sha":"169501502caa6b9e4553671a83c61849ecc43a35","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/169501502caa6b9e4553671a83c61849ecc43a35"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbr8ACRBK7hj4Ov3rIwAAdHIIAGrvxglGiK3F1s2jp5bnNqX7\nQyxpbgu7yoSk9aoVjneQrtVyiY+lqWpxSVZ1hyFxnpjBDHcxcgtVZijxB2rQn/b5\n9NxuWYjsg3HRyDeRsrIwoABbSclYeh8d66J7hW06MpjwOOL1/ZE9Gnes5DFU+94g\neJ1lwpGtnH6TxGM3LLtYZDRPrIvVpsyr1ENhvhiYUGOoUzm3BPw7cr8UJyJoTf1B\nQ/map9XcXRi8xBLbo/kZF5tEGjolxsCvXz85Kv2TfNp7YLrE8cCXXbXIHHk1Giuy\ni5/RnbSMTfQbP0h3c2xGzNJk1uoaUsbr+/h+T/Z6sxEBRZBwAJkf+Y6QdcE+3jc=\n=W/Tr\n-----END PGP SIGNATURE-----\n","payload":"tree 169501502caa6b9e4553671a83c61849ecc43a35\nparent c9f913063c98a7d5cbe5a47e5ce8a160cc227b83\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1617870592 +0200\ncommitter GitHub <noreply@github.com> 1617870592 +0200\n\n[SYNCOPE-1545] WA > SAML 2.0 (#259)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83"}],"stats":{"total":6122,"additions":2975,"deletions":3147},"files":[{"sha":"dc673c8ca26479c9343cc8f697a72cab56f08d08","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/CASSPDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FCASSPDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FCASSPDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FCASSPDirectoryPanel.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.console.clientapps;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.to.CASSPTO;\n+import org.apache.syncope.common.lib.to.CASSPClientAppTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.wicket.PageReference;\n@@ -28,14 +28,14 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.model.StringResourceModel;\n \n-public class CASSPDirectoryPanel extends ClientAppDirectoryPanel<CASSPTO> {\n+public class CASSPDirectoryPanel extends ClientAppDirectoryPanel<CASSPClientAppTO> {\n \n     private static final long serialVersionUID = 1L;\n \n     public CASSPDirectoryPanel(final String id, final PageReference pageRef) {\n         super(id, ClientAppType.CASSP, pageRef);\n \n-        CASSPTO defaultItem = new CASSPTO();\n+        CASSPClientAppTO defaultItem = new CASSPClientAppTO();\n \n         this.addNewItemPanelBuilder(\n                 new ClientAppModalPanelBuilder<>(ClientAppType.CASSP, defaultItem, modal, pageRef), true);\n@@ -45,7 +45,7 @@ public CASSPDirectoryPanel(final String id, final PageReference pageRef) {\n     }\n \n     @Override\n-    protected void addCustomColumnFields(final List<IColumn<CASSPTO, String>> columns) {\n+    protected void addCustomColumnFields(final List<IColumn<CASSPClientAppTO, String>> columns) {\n         columns.add(new PropertyColumn<>(new StringResourceModel(\"serviceId\", this), \"serviceId\", \"serviceId\"));\n     }\n }"},{"sha":"3169d596005deb07f1a800ce1d4f32e524e54029","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/OIDCRPDirectoryPanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FOIDCRPDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FOIDCRPDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FOIDCRPDirectoryPanel.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.to.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.wicket.AttributeModifier;\n@@ -35,14 +35,14 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.StringResourceModel;\n \n-public class OIDCRPDirectoryPanel extends ClientAppDirectoryPanel<OIDCRPTO> {\n+public class OIDCRPDirectoryPanel extends ClientAppDirectoryPanel<OIDCRPClientAppTO> {\n \n     private static final long serialVersionUID = 1L;\n \n     public OIDCRPDirectoryPanel(final String id, final PageReference pageRef) {\n         super(id, ClientAppType.OIDCRP, pageRef);\n \n-        OIDCRPTO defaultItem = new OIDCRPTO();\n+        OIDCRPClientAppTO defaultItem = new OIDCRPClientAppTO();\n \n         this.addNewItemPanelBuilder(\n                 new ClientAppModalPanelBuilder<>(ClientAppType.OIDCRP, defaultItem, modal, pageRef), true);\n@@ -52,17 +52,17 @@ public OIDCRPDirectoryPanel(final String id, final PageReference pageRef) {\n     }\n \n     @Override\n-    protected void addCustomColumnFields(final List<IColumn<OIDCRPTO, String>> columns) {\n+    protected void addCustomColumnFields(final List<IColumn<OIDCRPClientAppTO, String>> columns) {\n         columns.add(new PropertyColumn<>(new StringResourceModel(\"clientId\", this), \"clientId\", \"clientId\"));\n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"redirectUris\", this), \"redirectUris\", \"redirectUris\"));\n-        columns.add(new AbstractColumn<OIDCRPTO, String>(new StringResourceModel(\"logout\")) {\n+        columns.add(new AbstractColumn<OIDCRPClientAppTO, String>(new StringResourceModel(\"logout\")) {\n \n             @Override\n             public void populateItem(\n-                    final Item<ICellPopulator<OIDCRPTO>> item,\n+                    final Item<ICellPopulator<OIDCRPClientAppTO>> item,\n                     final String componentId,\n-                    final IModel<OIDCRPTO> rowModel) {\n+                    final IModel<OIDCRPClientAppTO> rowModel) {\n \n                 item.add(new Label(componentId, StringUtils.EMPTY));\n                 if (StringUtils.isNotBlank(rowModel.getObject().getLogoutUri())) {"},{"sha":"b14106d920be15800354a3b29bca51c271d413c3","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/SAML2SPDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FSAML2SPDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FSAML2SPDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FSAML2SPDirectoryPanel.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n-import org.apache.syncope.common.lib.to.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.wicket.PageReference;\n@@ -29,14 +29,14 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.model.StringResourceModel;\n \n-public class SAML2SPDirectoryPanel extends ClientAppDirectoryPanel<SAML2SPTO> {\n+public class SAML2SPDirectoryPanel extends ClientAppDirectoryPanel<SAML2SPClientAppTO> {\n \n     private static final long serialVersionUID = 1L;\n \n     public SAML2SPDirectoryPanel(final String id, final PageReference pageRef) {\n         super(id, ClientAppType.SAML2SP, pageRef);\n \n-        SAML2SPTO defaultItem = new SAML2SPTO();\n+        SAML2SPClientAppTO defaultItem = new SAML2SPClientAppTO();\n \n         this.addNewItemPanelBuilder(\n                 new ClientAppModalPanelBuilder<>(ClientAppType.SAML2SP, defaultItem, modal, pageRef), true);\n@@ -46,7 +46,7 @@ public SAML2SPDirectoryPanel(final String id, final PageReference pageRef) {\n     }\n \n     @Override\n-    protected void addCustomColumnFields(final List<IColumn<SAML2SPTO, String>> columns) {\n+    protected void addCustomColumnFields(final List<IColumn<SAML2SPClientAppTO, String>> columns) {\n         columns.add(new PropertyColumn<>(new StringResourceModel(\"entityId\", this), \"entityId\", \"entityId\"));\n         columns.add(new BooleanPropertyColumn<>(\n                 new StringResourceModel(\"signAssertions\", this), \"signAssertions\", \"signAssertions\"));"},{"sha":"be7301e16b28ed6ad6b4ad2509c536fb0107e4e9","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/commons/AMConstants.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMConstants.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -33,6 +33,9 @@ public final class AMConstants {\n     public static final String PREF_ACCESS_POLICY_CONF_REQUIRED_ATTRS_PAGINATOR_ROWS =\n             \"accesspolicy.conf.requiredattrs.paginator.rows\";\n \n+    public static final String PREF_SAML2_IDP_ENTITY_PAGINATOR_ROWS = \"saml2idpentity.properties.paginator.rows\";\n+    public static final String PREF_SAML2_SP_ENTITY_PAGINATOR_ROWS = \"saml2spentity.properties.paginator.rows\";\n+\n     private AMConstants() {\n         // private constructor for static utility class\n     }"},{"sha":"b8fb6d9df274d338453bef5f92740e2f2455b7ea","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/pages/WA.java","status":"modified","additions":46,"deletions":3,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,14 +18,23 @@\n  */\n package org.apache.syncope.client.console.pages;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n+import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.List;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.annotations.AMPage;\n import org.apache.syncope.client.console.panels.AuthModuleDirectoryPanel;\n import org.apache.syncope.client.console.clientapps.ClientApps;\n+import org.apache.syncope.client.console.panels.SAML2;\n import org.apache.syncope.client.console.panels.WAConfigDirectoryPanel;\n import org.apache.syncope.client.console.rest.WAConfigRestClient;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -51,9 +60,13 @@ public class WA extends BasePage {\n \n     private static final long serialVersionUID = 9200112197134882164L;\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n     @SpringBean\n     private ServiceOps serviceOps;\n \n+    private String waPrefix = \"\";\n+\n     public WA(final PageParameters parameters) {\n         super(parameters);\n \n@@ -85,6 +98,36 @@ public void onClick(final AjaxRequestTarget target) {\n         content.add(tabbedPanel);\n \n         body.add(content);\n+\n+        if (!serviceOps.list(NetworkService.Type.WA).isEmpty()) {\n+            String actuatorEndpoint = serviceOps.list(NetworkService.Type.WA).get(0).getAddress() + \"/actuator/env\";\n+            try {\n+                Response response = WebClient.create(\n+                        actuatorEndpoint,\n+                        SyncopeWebApplication.get().getAnonymousUser(),\n+                        SyncopeWebApplication.get().getAnonymousKey(),\n+                        null).\n+                        accept(MediaType.APPLICATION_JSON_TYPE).get();\n+                if (response.getStatus() == Response.Status.OK.getStatusCode()) {\n+                    JsonNode env = MAPPER.readTree((InputStream) response.getEntity());\n+                    if (env.has(\"propertySources\")) {\n+                        for (JsonNode propertySource : env.get(\"propertySources\")) {\n+                            if (propertySource.has(\"properties\")) {\n+                                JsonNode properties = propertySource.get(\"properties\");\n+                                if (properties.has(\"cas.server.prefix\")) {\n+                                    JsonNode prefix = properties.get(\"cas.server.prefix\");\n+                                    if (prefix.has(\"value\")) {\n+                                        waPrefix = StringUtils.removeEnd(prefix.get(\"value\").asText(), \"/\");\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            } catch (Exception e) {\n+                LOG.error(\"While contacting {}\", actuatorEndpoint, e);\n+            }\n+        }\n     }\n \n     private List<ITab> buildTabList() {\n@@ -114,17 +157,17 @@ public Panel getPanel(final String panelId) {\n             });\n         }\n \n-        tabs.add(new AbstractTab(Model.of(\"SAML 2.0 IdP\")) {\n+        tabs.add(new AbstractTab(Model.of(\"SAML 2.0\")) {\n \n             private static final long serialVersionUID = 5211692813425391144L;\n \n             @Override\n             public Panel getPanel(final String panelId) {\n-                return new AjaxTextFieldPanel(panelId, panelId, Model.of(\"\"));\n+                return new SAML2(panelId, waPrefix, getPageReference());\n             }\n         });\n \n-        tabs.add(new AbstractTab(Model.of(\"OIDC 1.0 Provider\")) {\n+        tabs.add(new AbstractTab(Model.of(\"OIDC 1.0\")) {\n \n             private static final long serialVersionUID = 5211692813425391144L;\n "},{"sha":"074907786ec9abfa913686e0df71e95177a76c32","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/AuthModuleDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -27,14 +27,14 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.AMConstants;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.AuthModuleDirectoryPanel.AuthModuleProvider;\n import org.apache.syncope.client.console.rest.AuthModuleRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.console.wizards.AuthModuleWizardBuilder;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n@@ -143,7 +143,7 @@ public void onClick(final AjaxRequestTarget target, final AuthModuleTO ignore) {\n                     LOG.error(\"While deleting {}\", model.getObject().getKey(), e);\n                     SyncopeConsoleSession.get().onException(e);\n                 }\n-                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         }, ActionLink.ActionType.DELETE, AMEntitlement.AUTH_MODULE_DELETE, true);\n "},{"sha":"1082d5e96c1dd82ef7cdb17ae84cc50f487343f6","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/SAML2.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.Model;\n+\n+public class SAML2 extends Panel {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public SAML2(final String id, final String waPrefix, final PageReference pageRef) {\n+        super(id);\n+\n+        add(new AjaxBootstrapTabbedPanel<>(\"saml2\", buildTabList(waPrefix, pageRef)));\n+    }\n+\n+    private List<ITab> buildTabList(final String waPrefix, final PageReference pageRef) {\n+        List<ITab> tabs = new ArrayList<>();\n+\n+        if (SyncopeConsoleSession.get().owns(AMEntitlement.SAML2_IDP_ENTITY_LIST, SyncopeConstants.ROOT_REALM)) {\n+            tabs.add(new AbstractTab(Model.of(\"Identity Provider\")) {\n+\n+                private static final long serialVersionUID = 5211692813425391144L;\n+\n+                @Override\n+                public Panel getPanel(final String panelId) {\n+                    return new SAML2IdPEntityDirectoryPanel(panelId, waPrefix, pageRef);\n+                }\n+            });\n+        }\n+\n+        if (SyncopeConsoleSession.get().owns(AMEntitlement.SAML2_SP_ENTITY_LIST, SyncopeConstants.ROOT_REALM)) {\n+            tabs.add(new AbstractTab(Model.of(\"Service Provider\")) {\n+\n+                private static final long serialVersionUID = 5211692813425391144L;\n+\n+                @Override\n+                public Panel getPanel(final String panelId) {\n+                    return new SAML2SPEntityDirectoryPanel(panelId, waPrefix, pageRef);\n+                }\n+            });\n+        }\n+\n+        return tabs;\n+    }\n+}"},{"sha":"a870a68076ad8d4135d67b9208091cc06759441d","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/SAML2IdPEntityDirectoryPanel.java","status":"added","additions":180,"deletions":0,"changes":180,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.AMConstants;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.panels.SAML2IdPEntityDirectoryPanel.SAML2IdPEntityProvider;\n+import org.apache.syncope.client.console.rest.SAML2IdPEntityRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.console.wizards.SAML2IdPEntityWizardBuilder;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n+import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.markup.ComponentTag;\n+import org.apache.wicket.markup.html.link.ExternalLink;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+public class SAML2IdPEntityDirectoryPanel extends DirectoryPanel<\n+        SAML2IdPEntityTO, SAML2IdPEntityTO, SAML2IdPEntityProvider, SAML2IdPEntityRestClient> {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final String metadataURL;\n+\n+    public SAML2IdPEntityDirectoryPanel(final String id, final String waPrefix, final PageReference pageRef) {\n+        super(id, pageRef);\n+        this.metadataURL = waPrefix + \"/idp/metadata\";\n+\n+        disableCheckBoxes();\n+\n+        modal.size(Modal.Size.Large);\n+        modal.addSubmitButton();\n+\n+        modal.setWindowClosedCallback(target -> {\n+            updateResultTable(target);\n+            modal.show(false);\n+        });\n+\n+        addNewItemPanelBuilder(new SAML2IdPEntityWizardBuilder(new SAML2IdPEntityTO(), pageRef), false);\n+\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected List<IColumn<SAML2IdPEntityTO, String>> getColumns() {\n+        List<IColumn<SAML2IdPEntityTO, String>> columns = new ArrayList<>();\n+\n+        columns.add(new PropertyColumn<>(\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this),\n+                Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n+        columns.add(new AbstractColumn<SAML2IdPEntityTO, String>(Model.of(\"URL\")) {\n+\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<SAML2IdPEntityTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<SAML2IdPEntityTO> rowModel) {\n+\n+                cellItem.add(new ExternalLink(\n+                        componentId,\n+                        Model.of(metadataURL),\n+                        Model.of(metadataURL)) {\n+\n+                    @Override\n+                    protected void onComponentTag(final ComponentTag tag) {\n+                        super.onComponentTag(tag);\n+\n+                        tag.setName(\"a\");\n+                        if (metadataURL.startsWith(\"http\")) {\n+                            tag.put(\"href\", getDefaultModelObject().toString());\n+                            tag.put(\"target\", \"_blank\");\n+                        }\n+                    }\n+                });\n+            }\n+        });\n+\n+        return columns;\n+    }\n+\n+    @Override\n+    protected ActionsPanel<SAML2IdPEntityTO> getActions(final IModel<SAML2IdPEntityTO> model) {\n+        ActionsPanel<SAML2IdPEntityTO> panel = super.getActions(model);\n+\n+        panel.add(new ActionLink<SAML2IdPEntityTO>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final SAML2IdPEntityTO ignore) {\n+                send(SAML2IdPEntityDirectoryPanel.this, Broadcast.EXACT,\n+                        new AjaxWizard.EditItemActionEvent<>(\n+                                SAML2IdPEntityRestClient.get(model.getObject().getKey()), target));\n+            }\n+        }, ActionLink.ActionType.EDIT, AMEntitlement.SAML2_IDP_ENTITY_SET);\n+\n+        return panel;\n+    }\n+\n+    @Override\n+    protected Collection<ActionLink.ActionType> getBatches() {\n+        return List.of();\n+    }\n+\n+    @Override\n+    protected SAML2IdPEntityProvider dataProvider() {\n+        return new SAML2IdPEntityProvider(rows);\n+    }\n+\n+    @Override\n+    protected String paginatorRowsKey() {\n+        return AMConstants.PREF_SAML2_IDP_ENTITY_PAGINATOR_ROWS;\n+    }\n+\n+    protected static final class SAML2IdPEntityProvider extends DirectoryDataProvider<SAML2IdPEntityTO> {\n+\n+        private static final long serialVersionUID = 5282134321828253058L;\n+\n+        private final SortableDataProviderComparator<SAML2IdPEntityTO> comparator;\n+\n+        public SAML2IdPEntityProvider(final int paginatorRows) {\n+            super(paginatorRows);\n+            setSort(Constants.KEY_FIELD_NAME, SortOrder.ASCENDING);\n+            comparator = new SortableDataProviderComparator<>(this);\n+        }\n+\n+        @Override\n+        public Iterator<? extends SAML2IdPEntityTO> iterator(final long first, final long count) {\n+            List<SAML2IdPEntityTO> list = SAML2IdPEntityRestClient.list();\n+            list.sort(comparator);\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return SAML2IdPEntityRestClient.list().size();\n+        }\n+\n+        @Override\n+        public IModel<SAML2IdPEntityTO> model(final SAML2IdPEntityTO metadata) {\n+            return new CompoundPropertyModel<>(metadata);\n+        }\n+    }\n+}"},{"sha":"8a67cd2b352ee046be41eff1933a60a96b663fd5","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/SAML2SPEntityDirectoryPanel.java","status":"added","additions":208,"deletions":0,"changes":208,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import static org.apache.wicket.Component.RENDER;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.AMConstants;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.panels.SAML2SPEntityDirectoryPanel.SAML2SPEntityProvider;\n+import org.apache.syncope.client.console.rest.SAML2SPEntityRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.console.wizards.SAML2SPEntityWizardBuilder;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n+import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.markup.ComponentTag;\n+import org.apache.wicket.markup.html.link.ExternalLink;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+public class SAML2SPEntityDirectoryPanel extends DirectoryPanel<\n+        SAML2SPEntityTO, SAML2SPEntityTO, SAML2SPEntityProvider, SAML2SPEntityRestClient> {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final String waPrefix;\n+\n+    public SAML2SPEntityDirectoryPanel(final String id, final String waPrefix, final PageReference pageRef) {\n+        super(id, pageRef);\n+        this.waPrefix = waPrefix;\n+\n+        disableCheckBoxes();\n+\n+        modal.size(Modal.Size.Large);\n+        modal.addSubmitButton();\n+\n+        modal.setWindowClosedCallback(target -> {\n+            updateResultTable(target);\n+            modal.show(false);\n+        });\n+\n+        addNewItemPanelBuilder(new SAML2SPEntityWizardBuilder(new SAML2SPEntityTO(), pageRef), true);\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, AMEntitlement.SAML2_SP_ENTITY_SET);\n+\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected List<IColumn<SAML2SPEntityTO, String>> getColumns() {\n+        List<IColumn<SAML2SPEntityTO, String>> columns = new ArrayList<>();\n+\n+        columns.add(new PropertyColumn<>(\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this),\n+                Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n+\n+        columns.add(new AbstractColumn<SAML2SPEntityTO, String>(Model.of(\"URL\")) {\n+\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<SAML2SPEntityTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<SAML2SPEntityTO> rowModel) {\n+\n+                String metadataURL = waPrefix + \"/sp/\" + rowModel.getObject().getKey() + \"/metadata\";\n+                cellItem.add(new ExternalLink(\n+                        componentId,\n+                        Model.of(metadataURL),\n+                        Model.of(metadataURL)) {\n+\n+                    @Override\n+                    protected void onComponentTag(final ComponentTag tag) {\n+                        super.onComponentTag(tag);\n+\n+                        tag.setName(\"a\");\n+                        if (metadataURL.startsWith(\"http\")) {\n+                            tag.put(\"href\", getDefaultModelObject().toString());\n+                            tag.put(\"target\", \"_blank\");\n+                        }\n+                    }\n+                });\n+            }\n+        });\n+\n+        return columns;\n+    }\n+\n+    @Override\n+    protected ActionsPanel<SAML2SPEntityTO> getActions(final IModel<SAML2SPEntityTO> model) {\n+        ActionsPanel<SAML2SPEntityTO> panel = super.getActions(model);\n+\n+        panel.add(new ActionLink<SAML2SPEntityTO>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final SAML2SPEntityTO ignore) {\n+                send(SAML2SPEntityDirectoryPanel.this, Broadcast.EXACT,\n+                        new AjaxWizard.EditItemActionEvent<>(\n+                                SAML2SPEntityRestClient.get(model.getObject().getKey()), target));\n+            }\n+        }, ActionLink.ActionType.EDIT, AMEntitlement.SAML2_SP_ENTITY_SET);\n+\n+        panel.add(new ActionLink<SAML2SPEntityTO>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final SAML2SPEntityTO ignore) {\n+                try {\n+                    SAML2SPEntityRestClient.delete(model.getObject().getKey());\n+\n+                    SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+                    target.add(container);\n+                } catch (Exception e) {\n+                    LOG.error(\"While deleting {}\", model.getObject().getKey(), e);\n+                    SyncopeConsoleSession.get().onException(e);\n+                }\n+                ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+            }\n+        }, ActionLink.ActionType.DELETE, AMEntitlement.AUTH_MODULE_DELETE, true);\n+\n+        return panel;\n+    }\n+\n+    @Override\n+    protected Collection<ActionLink.ActionType> getBatches() {\n+        return List.of();\n+    }\n+\n+    @Override\n+    protected SAML2SPEntityProvider dataProvider() {\n+        return new SAML2SPEntityProvider(rows);\n+    }\n+\n+    @Override\n+    protected String paginatorRowsKey() {\n+        return AMConstants.PREF_SAML2_SP_ENTITY_PAGINATOR_ROWS;\n+    }\n+\n+    protected static final class SAML2SPEntityProvider extends DirectoryDataProvider<SAML2SPEntityTO> {\n+\n+        private static final long serialVersionUID = 5282134321828253058L;\n+\n+        private final SortableDataProviderComparator<SAML2SPEntityTO> comparator;\n+\n+        public SAML2SPEntityProvider(final int paginatorRows) {\n+            super(paginatorRows);\n+            setSort(Constants.KEY_FIELD_NAME, SortOrder.ASCENDING);\n+            comparator = new SortableDataProviderComparator<>(this);\n+        }\n+\n+        @Override\n+        public Iterator<? extends SAML2SPEntityTO> iterator(final long first, final long count) {\n+            List<SAML2SPEntityTO> list = SAML2SPEntityRestClient.list();\n+            list.sort(comparator);\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return SAML2SPEntityRestClient.list().size();\n+        }\n+\n+        @Override\n+        public IModel<SAML2SPEntityTO> model(final SAML2SPEntityTO metadata) {\n+            return new CompoundPropertyModel<>(metadata);\n+        }\n+    }\n+}"},{"sha":"8f6ce3b90e5c9450b5550f97a23687b71d0ee8a2","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/rest/SAML2IdPEntityRestClient.java","status":"renamed","additions":16,"deletions":24,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSAML2IdPEntityRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSAML2IdPEntityRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSAML2IdPEntityRestClient.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -16,34 +16,26 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.auth;\n+package org.apache.syncope.client.console.rest;\n \n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPEntityService;\n \n-public interface SAML2IdPMetadata extends Entity {\n+public class SAML2IdPEntityRestClient extends BaseRestClient {\n \n-    String getMetadata();\n+    private static final long serialVersionUID = -1392090291817187902L;\n \n-    void setMetadata(String metadata);\n+    public static List<SAML2IdPEntityTO> list() {\n+        return getService(SAML2IdPEntityService.class).list().stream().collect(Collectors.toList());\n+    }\n \n-    String getSigningCertificate();\n-\n-    void setSigningCertificate(String signingCertificate);\n-\n-    String getSigningKey();\n-\n-    void setSigningKey(String signingKey);\n-\n-    String getEncryptionCertificate();\n-\n-    void setEncryptionCertificate(String encryptionCertificate);\n-\n-    String getEncryptionKey();\n-\n-    void setEncryptionKey(String encryptionKey);\n-\n-    String getAppliesTo();\n-\n-    void setAppliesTo(String appliesTo);\n+    public static SAML2IdPEntityTO get(final String key) {\n+        return getService(SAML2IdPEntityService.class).get(key);\n+    }\n \n+    public static void set(final SAML2IdPEntityTO entityTO) {\n+        getService(SAML2IdPEntityService.class).set(entityTO);\n+    }\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2IdPMetadata.java"},{"sha":"98b38229c40e049f8a86d34782319688778d8ae7","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/rest/SAML2SPEntityRestClient.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSAML2SPEntityRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSAML2SPEntityRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSAML2SPEntityRestClient.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.rest;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n+import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n+\n+public class SAML2SPEntityRestClient extends BaseRestClient {\n+\n+    private static final long serialVersionUID = -1392090291817187902L;\n+\n+    public static List<SAML2SPEntityTO> list() {\n+        return getService(SAML2SPEntityService.class).list().stream().collect(Collectors.toList());\n+    }\n+\n+    public static SAML2SPEntityTO get(final String key) {\n+        return getService(SAML2SPEntityService.class).get(key);\n+    }\n+\n+    public static void set(final SAML2SPEntityTO entityTO) {\n+        getService(SAML2SPEntityService.class).set(entityTO);\n+    }\n+\n+    public static void delete(final String key) {\n+        getService(SAML2SPEntityService.class).delete(key);\n+    }\n+}"},{"sha":"0e7393a5ab37af907734eee205080dd120504938","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/wizards/SAML2EntityWizardBuilder.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2EntityWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2EntityWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2EntityWizardBuilder.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.wicket.markup.html.form.XMLEditorPanel;\n+import org.apache.syncope.common.lib.to.SAML2EntityTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.model.PropertyModel;\n+\n+abstract class SAML2EntityWizardBuilder<T extends SAML2EntityTO> extends BaseAjaxWizardBuilder<T> {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    protected SAML2EntityWizardBuilder(final T defaultItem, final PageReference pageRef) {\n+        super(defaultItem, pageRef);\n+    }\n+\n+    protected class Metadata extends WizardStep {\n+\n+        private static final long serialVersionUID = -3043839139187792810L;\n+\n+        Metadata(final T entity, final PageReference pageRef) {\n+            add(new XMLEditorPanel(null, new PropertyModel<>(entity, \"metadata\"), false, pageRef));\n+        }\n+\n+        @Override\n+        public String getTitle() {\n+            return \"Metadata\";\n+        }\n+    }\n+\n+    protected abstract class Pem extends WizardStep {\n+\n+        private static final long serialVersionUID = -3043839139187792810L;\n+\n+        protected final String property;\n+\n+        Pem(final String property) {\n+            this.property = property;\n+        }\n+\n+        @Override\n+        public String getTitle() {\n+            return StringUtils.capitalize(property);\n+        }\n+    }\n+}"},{"sha":"16ff6d832754919f7468ee9e7ba56806978bc80f","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPEntityWizardBuilder.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPEntityWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPEntityWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPEntityWizardBuilder.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards;\n+\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import org.apache.syncope.client.console.rest.SAML2IdPEntityRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.TextEditorPanel;\n+import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.wizard.WizardModel;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class SAML2IdPEntityWizardBuilder extends SAML2EntityWizardBuilder<SAML2IdPEntityTO> {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public SAML2IdPEntityWizardBuilder(final SAML2IdPEntityTO defaultItem, final PageReference pageRef) {\n+        super(defaultItem, pageRef);\n+    }\n+\n+    @Override\n+    protected Serializable onApplyInternal(final SAML2IdPEntityTO modelObject) {\n+        if (modelObject.getMetadata() != null) {\n+            modelObject.setMetadata(Base64.getEncoder().encodeToString(\n+                    modelObject.getMetadata().getBytes(StandardCharsets.UTF_8)));\n+        }\n+        if (modelObject.getSigningCertificate() != null) {\n+            modelObject.setSigningCertificate(Base64.getEncoder().encodeToString(\n+                    modelObject.getSigningCertificate().getBytes(StandardCharsets.UTF_8)));\n+        }\n+        if (modelObject.getSigningKey() != null) {\n+            modelObject.setSigningKey(Base64.getEncoder().encodeToString(\n+                    modelObject.getSigningKey().getBytes(StandardCharsets.UTF_8)));\n+        }\n+        if (modelObject.getEncryptionCertificate() != null) {\n+            modelObject.setEncryptionCertificate(Base64.getEncoder().encodeToString(\n+                    modelObject.getEncryptionCertificate().getBytes(StandardCharsets.UTF_8)));\n+        }\n+        if (modelObject.getEncryptionKey() != null) {\n+            modelObject.setEncryptionKey(Base64.getEncoder().encodeToString(\n+                    modelObject.getEncryptionKey().getBytes(StandardCharsets.UTF_8)));\n+        }\n+        SAML2IdPEntityRestClient.set(modelObject);\n+        return modelObject;\n+    }\n+\n+    @Override\n+    protected WizardModel buildModelSteps(final SAML2IdPEntityTO modelObject, final WizardModel wizardModel) {\n+        if (modelObject.getMetadata() != null) {\n+            modelObject.setMetadata(new String(Base64.getDecoder().decode(\n+                    modelObject.getMetadata()), StandardCharsets.UTF_8));\n+        }\n+        if (modelObject.getSigningCertificate() != null) {\n+            modelObject.setSigningCertificate(new String(Base64.getDecoder().decode(\n+                    modelObject.getSigningCertificate()), StandardCharsets.UTF_8));\n+        }\n+        if (modelObject.getSigningKey() != null) {\n+            modelObject.setSigningKey(new String(Base64.getDecoder().decode(\n+                    modelObject.getSigningKey()), StandardCharsets.UTF_8));\n+        }\n+        if (modelObject.getEncryptionCertificate() != null) {\n+            modelObject.setEncryptionCertificate(new String(Base64.getDecoder().decode(\n+                    modelObject.getEncryptionCertificate()), StandardCharsets.UTF_8));\n+        }\n+        if (modelObject.getEncryptionKey() != null) {\n+            modelObject.setEncryptionKey(new String(Base64.getDecoder().decode(\n+                    modelObject.getEncryptionKey()), StandardCharsets.UTF_8));\n+        }\n+\n+        wizardModel.add(new Metadata(modelObject, pageRef));\n+        wizardModel.add(new TextPem(modelObject, \"signingCertificate\", pageRef));\n+        wizardModel.add(new TextPem(modelObject, \"signingKey\", pageRef));\n+        wizardModel.add(new TextPem(modelObject, \"encryptionCertificate\", pageRef));\n+        wizardModel.add(new TextPem(modelObject, \"encryptionKey\", pageRef));\n+        return wizardModel;\n+    }\n+\n+    protected class TextPem extends Pem {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        public TextPem(final SAML2IdPEntityTO entity, final String property, final PageReference pageRef) {\n+            super(property);\n+\n+            add(new TextEditorPanel(null, new PropertyModel<>(entity, property), false, pageRef));\n+        }\n+    }\n+}"},{"sha":"4c2321dc6d3b607847c5743263d883ff5bacdfc2","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/wizards/SAML2SPEntityWizardBuilder.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2SPEntityWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2SPEntityWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2SPEntityWizardBuilder.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards;\n+\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.client.console.rest.SAML2SPEntityRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.BinaryFieldPanel;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.wizard.WizardModel;\n+import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class SAML2SPEntityWizardBuilder extends SAML2EntityWizardBuilder<SAML2SPEntityTO> {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public SAML2SPEntityWizardBuilder(final SAML2SPEntityTO defaultItem, final PageReference pageRef) {\n+        super(defaultItem, pageRef);\n+    }\n+\n+    @Override\n+    protected Serializable onApplyInternal(final SAML2SPEntityTO modelObject) {\n+        if (modelObject.getMetadata() != null) {\n+            modelObject.setMetadata(Base64.getEncoder().encodeToString(\n+                    modelObject.getMetadata().getBytes(StandardCharsets.UTF_8)));\n+        }\n+        SAML2SPEntityRestClient.set(modelObject);\n+        return modelObject;\n+    }\n+\n+    @Override\n+    protected WizardModel buildModelSteps(final SAML2SPEntityTO modelObject, final WizardModel wizardModel) {\n+        if (modelObject.getMetadata() != null) {\n+            modelObject.setMetadata(new String(Base64.getDecoder().decode(\n+                    modelObject.getMetadata()), StandardCharsets.UTF_8));\n+        }\n+\n+        wizardModel.add(new Profile(modelObject, mode == AjaxWizard.Mode.CREATE));\n+        wizardModel.add(new Metadata(modelObject, pageRef));\n+        wizardModel.add(new BinaryPem(modelObject, \"keystore\", pageRef));\n+        return wizardModel;\n+    }\n+\n+    protected static class Profile extends WizardStep {\n+\n+        private static final long serialVersionUID = -3043839139187792810L;\n+\n+        Profile(final SAML2SPEntityTO entity, final boolean isNew) {\n+            AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n+                    Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME,\n+                    new PropertyModel<>(entity, Constants.KEY_FIELD_NAME));\n+            key.addRequiredLabel();\n+            key.setEnabled(isNew);\n+            add(key);\n+        }\n+    }\n+\n+    protected class BinaryPem extends Pem {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        public BinaryPem(final SAML2SPEntityTO entity, final String property, final PageReference pageRef) {\n+            super(property);\n+\n+            add(new BinaryFieldPanel(\n+                    \"content\",\n+                    \"\",\n+                    new PropertyModel<>(entity, property),\n+                    MediaType.APPLICATION_OCTET_STREAM,\n+                    entity.getKey()) {\n+\n+                private static final long serialVersionUID = -3268213909514986831L;\n+\n+                @Override\n+                protected PageReference getPageReference() {\n+                    return pageRef;\n+                }\n+            });\n+        }\n+    }\n+}"},{"sha":"a82819c549e36831a1fdde3962b537bb6cda67ca","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SAML2.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2.html?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"saml2\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"cc10b5c80d0be2b794d5fcd29d316a24424d1ee1","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPEntityDirectoryPanel.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel.properties?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=Edit ${key}\n+any.new=New IdP Entity\n+any.finish=Submit ${key}\n+any.cancel=Cancel ${key}"},{"sha":"d3c8c14edb66fca8c13b404c3a771a0ad179e281","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPEntityDirectoryPanel_fr_CA.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_fr_CA.properties?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=Modifier ${key}\n+any.new=New IdP Entity\n+any.finish=Soumettre ${key}\n+any.cancel=Annuler ${key}"},{"sha":"93e6cda8a04a801461b042f9252188e087a071b7","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPEntityDirectoryPanel_it.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_it.properties?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=Modifica ${key}\n+any.new=Nuova Entit\\u00e0 IdP\n+any.finish=Invia ${key}\n+any.cancel=Annulla ${key}"},{"sha":"93d0367cad07aae0c7539dd7cd1c750b22f696ee","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPEntityDirectoryPanel_ja.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_ja.properties?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=${key} \\u3092\\u7de8\\u96c6\n+any.new=New IdP Entity\n+any.finish=${key} \\u3092\\u5b9f\\u884c\n+any.cancel=${key} \\u3092\\u30ad\\u30e3\\u30f3\\u30bb\\u30eb"},{"sha":"cc10b5c80d0be2b794d5fcd29d316a24424d1ee1","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPEntityDirectoryPanel_pt_BR.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_pt_BR.properties?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=Edit ${key}\n+any.new=New IdP Entity\n+any.finish=Submit ${key}\n+any.cancel=Cancel ${key}"},{"sha":"003acb10cbc28a57aead4a8a75b681e17cbee96c","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPEntityDirectoryPanel_ru.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPEntityDirectoryPanel_ru.properties?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=\\u0418\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${key}\n+any.new=New IdP Entity\n+any.finish=\\u0421\\u043e\\u0445\\u0440\\u0430\\u043d\\u0438\\u0442\\u044c ${key}\n+any.cancel=\\u041e\\u0442\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${key}"},{"sha":"5289997f8c4f37a2d687417132599c8166fd3f00","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SAML2SPEntityDirectoryPanel.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel.properties?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=Edit ${key}\n+any.new=New SP Entity\n+any.finish=Submit ${key}\n+any.cancel=Cancel ${key}"},{"sha":"c8a88c81ca8dcbb92d8bde98b976c2757d7ab42b","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SAML2SPEntityDirectoryPanel_fr_CA.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_fr_CA.properties?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=Modifier ${key}\n+any.new=New SP Entity\n+any.finish=Soumettre ${key}\n+any.cancel=Annuler ${key}"},{"sha":"9129629c7a9d16f6add0643872ac3fb1493399c4","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SAML2SPEntityDirectoryPanel_it.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_it.properties?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=Modifica ${key}\n+any.new=Nuova Entit\\u00e0 SP\n+any.finish=Invia ${key}\n+any.cancel=Annulla ${key}"},{"sha":"cf51cb13e16f020bc35cc6cb253a47fc02046e6d","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SAML2SPEntityDirectoryPanel_ja.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_ja.properties?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=${key} \\u3092\\u7de8\\u96c6\n+any.new=New SP Entity\n+any.finish=${key} \\u3092\\u5b9f\\u884c\n+any.cancel=${key} \\u3092\\u30ad\\u30e3\\u30f3\\u30bb\\u30eb"},{"sha":"5289997f8c4f37a2d687417132599c8166fd3f00","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SAML2SPEntityDirectoryPanel_pt_BR.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_pt_BR.properties?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=Edit ${key}\n+any.new=New SP Entity\n+any.finish=Submit ${key}\n+any.cancel=Cancel ${key}"},{"sha":"651eac5cc63a43f3acc8367eb2b42ceb74ec36f1","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SAML2SPEntityDirectoryPanel_ru.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPEntityDirectoryPanel_ru.properties?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+any.edit=\\u0418\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${key}\n+any.new=New SP Entity\n+any.finish=\\u0421\\u043e\\u0445\\u0440\\u0430\\u043d\\u0438\\u0442\\u044c ${key}\n+any.cancel=\\u041e\\u0442\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${key}"},{"sha":"aefa83b98b200e0e3105c7428eda28af7557d658","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/SAML2EntityWizardBuilder$Metadata.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2EntityWizardBuilder%24Metadata.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2EntityWizardBuilder%24Metadata.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2EntityWizardBuilder%24Metadata.html?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"content\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"aefa83b98b200e0e3105c7428eda28af7557d658","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/SAML2EntityWizardBuilder$Pem.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2EntityWizardBuilder%24Pem.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2EntityWizardBuilder%24Pem.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2EntityWizardBuilder%24Pem.html?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"content\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"993f7801bf7290dd6d9fcbf67217d1b0b6529eb8","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/SAML2SPEntityWizardBuilder$Profile.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2SPEntityWizardBuilder%24Profile.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2SPEntityWizardBuilder%24Profile.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2SPEntityWizardBuilder%24Profile.html?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div class=\"form-group\"><span wicket:id=\"key\">[key]</span></div>\n+  </wicket:panel>\n+</html>"},{"sha":"5619d2f4beb66af0c587b7a3ce84c09b9dfe9dc6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/MailTemplateDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -53,6 +53,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.XMLEditorPanel;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n import org.apache.wicket.model.PropertyModel;\n \n@@ -251,7 +252,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n                     SyncopeConsoleSession.get().onException(e);\n                 }\n             }\n-            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+            ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n         }\n     }\n }"},{"sha":"85a2f1097c934a88c15219d7fb11ddd0457864b9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DomainDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDomainDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDomainDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDomainDirectoryPanel.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -27,13 +27,13 @@\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.commons.IdRepoConstants;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.DomainDirectoryPanel.DomainProvider;\n import org.apache.syncope.client.console.rest.SyncopeRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n@@ -99,7 +99,7 @@ protected List<IColumn<Domain, String>> getColumns() {\n \n     @Override\n     protected ActionsPanel<Domain> getActions(final IModel<Domain> model) {\n-        final ActionsPanel<Domain> panel = super.getActions(model);\n+        ActionsPanel<Domain> panel = super.getActions(model);\n \n         panel.add(new ActionLink<Domain>() {\n \n@@ -142,7 +142,7 @@ public void onClick(final AjaxRequestTarget target, final Domain ignore) {\n                     LOG.error(\"While deleting {}\", domain.getKey(), e);\n                     SyncopeConsoleSession.get().onException(e);\n                 }\n-                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         }, ActionLink.ActionType.DELETE, IdRepoEntitlement.KEYMASTER, true);\n "},{"sha":"6e50db903de88e0aa108e5b07237c1a7b11d6212","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportTemplateDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -53,6 +53,7 @@\n import org.apache.syncope.client.console.rest.ReportRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.XMLEditorPanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n import org.apache.wicket.model.PropertyModel;\n@@ -262,7 +263,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n                     SyncopeConsoleSession.get().onException(e);\n                 }\n             }\n-            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+            ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n         }\n     }\n }"},{"sha":"9c5fec033ce4dd61c5cee9382a3841114fdfc084","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldDownload.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldDownload.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldDownload.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldDownload.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -60,7 +60,7 @@ public BinaryFieldDownload(\n     public void initiate(final AjaxRequestTarget target) {\n         String url = getCallbackUrl().toString();\n         if (addAntiCache) {\n-            url = url + (url.contains(\"?\") ? \"&\" : \"?\");\n+            url += (url.contains(\"?\") ? \"&\" : \"?\");\n             url = url + \"antiCache=\" + System.currentTimeMillis();\n         }\n         target.appendJavaScript(\"setTimeout(\\\"window.location.href='\" + url + \"'\\\", 100);\");"},{"sha":"decccf0a0c16d86b2b1399dada40e292fce37de5","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -37,11 +37,11 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.console.commons.PreviewUtils;\n-import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.ui.commons.HttpResourceStream;\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.preview.AbstractBinaryPreviewer;\n import org.apache.syncope.client.ui.commons.markup.html.form.BaseBinaryFieldPanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.client.ui.commons.rest.ResponseHolder;\n import org.apache.wicket.Component;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -123,7 +123,7 @@ public BinaryFieldPanel(\n             public void renderHead(final IHeaderResponse response) {\n                 if (previewer == null) {\n                     FileinputJsReference.INSTANCE.renderHead(response);\n-                    final JQuery fileinputJS = $(fileUpload).chain(new IFunction() {\n+                    JQuery fileinputJS = $(fileUpload).chain(new IFunction() {\n \n                         private static final long serialVersionUID = -2285418135375523652L;\n \n@@ -200,7 +200,7 @@ protected void onSubmit(final AjaxRequestTarget target) {\n                         SyncopeConsoleSession.get().error(getString(\"tooLargeFile\").\n                                 replace(\"${maxUploadSizeB}\", String.valueOf(maxUploadSize.bytes())).\n                                 replace(\"${maxUploadSizeMB}\", String.valueOf(maxUploadSize.bytes() / 1000000L)));\n-                        ((BasePage) getPageReference().getPage()).getNotificationPanel().refresh(target);\n+                        ((BaseWebPage) getPageReference().getPage()).getNotificationPanel().refresh(target);\n                     } else {\n                         byte[] uploadedBytes = uploaded.getBytes();\n                         String uploadedEncoded = Base64.getEncoder().encodeToString(uploadedBytes);\n@@ -257,7 +257,7 @@ private Response buildResponse() {\n     }\n \n     private void changePreviewer(final Component panelPreview) {\n-        final Fragment fragment = new Fragment(\"panelPreview\", \"previewFragment\", container);\n+        Fragment fragment = new Fragment(\"panelPreview\", \"previewFragment\", container);\n         fragment.add(panelPreview);\n         container.addOrReplace(fragment);\n         uploadForm.addOrReplace(container);"},{"sha":"5be7a9d9c468174d84d21ed2f2a88771a8cdb0c8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/TextEditorPanel.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FTextEditorPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FTextEditorPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FTextEditorPanel.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wicket.markup.html.form;\n+\n+import org.apache.syncope.client.console.panels.AbstractModalPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.markup.head.IHeaderResponse;\n+import org.apache.wicket.markup.head.OnLoadHeaderItem;\n+import org.apache.wicket.markup.html.form.TextArea;\n+import org.apache.wicket.model.IModel;\n+\n+public class TextEditorPanel extends AbstractModalPanel<String> {\n+\n+    private static final long serialVersionUID = -5110368813584745668L;\n+\n+    private final IModel<String> content;\n+\n+    private final boolean readOnly;\n+\n+    public TextEditorPanel(final IModel<String> content) {\n+        this(null, content, false, null);\n+    }\n+\n+    public TextEditorPanel(\n+            final BaseModal<String> modal,\n+            final IModel<String> content,\n+            final boolean readOnly,\n+            final PageReference pageRef) {\n+\n+        super(modal, pageRef);\n+        this.content = content;\n+        this.readOnly = readOnly;\n+        TextArea<String> textEditorInfoDefArea = new TextArea<>(\"textEditorInfo\", this.content);\n+        textEditorInfoDefArea.setMarkupId(\"textEditorInfo\").setOutputMarkupPlaceholderTag(true);\n+        add(textEditorInfoDefArea);\n+    }\n+\n+    @Override\n+    public void renderHead(final IHeaderResponse response) {\n+        super.renderHead(response);\n+        response.render(OnLoadHeaderItem.forScript(\n+                \"CodeMirror.fromTextArea(document.getElementById('textEditorInfo'), {\"\n+                + \"  readOnly: \" + readOnly + \", \"\n+                + \"  lineNumbers: true, \"\n+                + \"  lineWrapping: true, \"\n+                + \"  mode: 'text/plain', \"\n+                + \"  autoRefresh: true\"\n+                + \"}).on('change', updateTextArea);\"));\n+    }\n+}"},{"sha":"3a3af303cff03f6a66607a8b08cfbbbd38da674e","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/TextEditorPanel.html","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FTextEditorPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FTextEditorPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FTextEditorPanel.html?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,51 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:head>\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"webjars/codemirror/${codemirror.version}/lib/codemirror.css\"/>\n+\n+    <script type=\"text/javascript\" src=\"webjars/codemirror/${codemirror.version}/lib/codemirror.js\"></script>\n+    <script type=\"text/javascript\" src=\"webjars/codemirror/${codemirror.version}/addon/display/autorefresh.js\"></script>\n+    <script type=\"text/javascript\" src=\"webjars/codemirror/${codemirror.version}/addon/search/search.js\"></script>\n+    <script type=\"text/javascript\" src=\"webjars/codemirror/${codemirror.version}/addon/search/searchcursor.js\"></script>\n+    <script type=\"text/javascript\">\n+      function updateTextArea(editor) {\n+        document.getElementById(\"textEditorInfoDefForm\").children[\"textEditorInfo\"].value = editor.getValue();\n+      }\n+    </script>\n+    <style>\n+      .w_content_3 {\n+        padding: 0;\n+        color: #333333;\n+        font-family: Verdana,Tahoma,sans-serif;\n+        font-size: 100%;\n+        border: 1px solid #BBBBBB;\n+        padding: 1%;\n+      }\n+    </style>\n+  </wicket:head>\n+  <wicket:panel>\n+    <div style=\"padding: 1%;\">\n+      <div class=\"w_content_3\" id=\"textEditorInfoDefForm\">\n+        <textarea wicket:id=\"textEditorInfo\" id=\"textEditorInfo\" name=\"textEditorInfo\" style=\"width: 100%; height: 350px;\">\n+        </textarea>\n+      </div>\n+    </div>\n+  </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"e8b648023d9160042fe09b2c46e659a59e2726e0","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/CASSPClientAppTO.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCASSPClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCASSPClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCASSPClientAppTO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -25,7 +25,7 @@\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n @Schema(allOf = {ClientAppTO.class})\n-public class CASSPTO extends ClientAppTO {\n+public class CASSPClientAppTO extends ClientAppTO {\n \n     private static final long serialVersionUID = -5370888503924521351L;\n \n@@ -58,7 +58,7 @@ public boolean equals(final Object obj) {\n         if (obj.getClass() != getClass()) {\n             return false;\n         }\n-        CASSPTO rhs = (CASSPTO) obj;\n+        CASSPClientAppTO rhs = (CASSPClientAppTO) obj;\n         return new EqualsBuilder()\n             .appendSuper(super.equals(obj))\n             .append(this.serviceId, rhs.serviceId)","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/CASSPTO.java"},{"sha":"0fc84c82c7dd0f4a9197a11b070066433ff327af","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/ClientAppTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -33,7 +33,8 @@\n \n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"_class\")\n @JsonPropertyOrder(value = { \"_class\", \"key\", \"description\" })\n-@Schema(subTypes = { OIDCRPTO.class, SAML2SPTO.class, CASSPTO.class }, discriminatorProperty = \"_class\")\n+@Schema(subTypes = { OIDCRPClientAppTO.class, SAML2SPClientAppTO.class, CASSPClientAppTO.class }, \n+        discriminatorProperty = \"_class\")\n public abstract class ClientAppTO implements NamedEntityTO {\n \n     private static final long serialVersionUID = 6577639976115661357L;"},{"sha":"ea7e14c93458277e0629b7b84c9f4875546feadb","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/OIDCJWKSTO.java","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCJWKSTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCJWKSTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCJWKSTO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -26,6 +26,25 @@ public class OIDCJWKSTO implements EntityTO {\n \n     private static final long serialVersionUID = 1285073386484048953L;\n \n+    public static class Builder {\n+\n+        private final OIDCJWKSTO instance = new OIDCJWKSTO();\n+\n+        public OIDCJWKSTO.Builder json(final String json) {\n+            instance.setJson(json);\n+            return this;\n+        }\n+\n+        public OIDCJWKSTO.Builder key(final String key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n+\n+        public OIDCJWKSTO build() {\n+            return instance;\n+        }\n+    }\n+\n     private String key;\n \n     private String json;\n@@ -83,23 +102,4 @@ public String toString() {\n                 .append(\"json\", json)\n                 .toString();\n     }\n-\n-    public static class Builder {\n-\n-        private final OIDCJWKSTO instance = new OIDCJWKSTO();\n-\n-        public OIDCJWKSTO.Builder json(final String json) {\n-            instance.setJson(json);\n-            return this;\n-        }\n-\n-        public OIDCJWKSTO.Builder key(final String key) {\n-            instance.setKey(key);\n-            return this;\n-        }\n-\n-        public OIDCJWKSTO build() {\n-            return instance;\n-        }\n-    }\n }"},{"sha":"5c9034b3186fd650258118a6c6eafba22afb012b","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/OIDCRPClientAppTO.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPClientAppTO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n \n @Schema(allOf = { ClientAppTO.class })\n-public class OIDCRPTO extends ClientAppTO {\n+public class OIDCRPClientAppTO extends ClientAppTO {\n \n     private static final long serialVersionUID = -6370888503924521351L;\n \n@@ -128,7 +128,7 @@ public boolean equals(final Object obj) {\n         if (obj.getClass() != getClass()) {\n             return false;\n         }\n-        OIDCRPTO rhs = (OIDCRPTO) obj;\n+        OIDCRPClientAppTO rhs = (OIDCRPClientAppTO) obj;\n         return new EqualsBuilder()\n                 .appendSuper(super.equals(obj))\n                 .append(this.clientId, rhs.clientId)","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/OIDCRPTO.java"},{"sha":"17ce4927e92d804a5dd3e56f7ae3d231e0abeda6","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SAML2EntityTO.java","status":"renamed","additions":36,"deletions":57,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2EntityTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2EntityTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2EntityTO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,20 +18,40 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import javax.ws.rs.PathParam;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n-import javax.ws.rs.PathParam;\n \n-public class SAML2SPKeystoreTO implements EntityTO {\n+public abstract class SAML2EntityTO implements EntityTO {\n \n-    private static final long serialVersionUID = 3211073386484148953L;\n+    private static final long serialVersionUID = 1L;\n \n-    private String key;\n+    protected abstract static class Builder<P extends SAML2EntityTO, B extends Builder<P, B>> {\n \n-    private String keystore;\n+        protected P instance;\n+\n+        protected abstract P newInstance();\n+\n+        protected P getInstance() {\n+            if (instance == null) {\n+                instance = newInstance();\n+            }\n+            return instance;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B key(final String key) {\n+            getInstance().setKey(key);\n+            return (B) this;\n+        }\n+\n+        public P build() {\n+            return getInstance();\n+        }\n+    }\n \n-    private String owner;\n+    private String key;\n \n     @Override\n     public String getKey() {\n@@ -44,31 +64,6 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n-    public String getKeystore() {\n-        return keystore;\n-    }\n-\n-    public void setKeystore(final String keystore) {\n-        this.keystore = keystore;\n-    }\n-\n-    public String getOwner() {\n-        return owner;\n-    }\n-\n-    public void setOwner(final String owner) {\n-        this.owner = owner;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return new HashCodeBuilder().\n-                append(key).\n-                append(keystore).\n-                append(owner).\n-                build();\n-    }\n-\n     @Override\n     public boolean equals(final Object obj) {\n         if (this == obj) {\n@@ -80,39 +75,23 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        SAML2SPKeystoreTO other = (SAML2SPKeystoreTO) obj;\n+        SAML2EntityTO other = (SAML2EntityTO) obj;\n         return new EqualsBuilder().\n                 append(key, other.key).\n-                append(keystore, other.keystore).\n-                append(owner, other.owner).\n                 build();\n     }\n \n     @Override\n-    public String toString() {\n-        return new ToStringBuilder(this)\n-                .appendSuper(super.toString())\n-                .append(\"key\", key)\n-                .append(\"owner\", owner)\n-                .toString();\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                build();\n     }\n \n-    public static class Builder {\n-\n-        private final SAML2SPKeystoreTO instance = new SAML2SPKeystoreTO();\n-\n-        public Builder keystore(final String keystore) {\n-            instance.setKeystore(keystore);\n-            return this;\n-        }\n-\n-        public Builder owner(final String owner) {\n-            instance.setOwner(owner);\n-            return this;\n-        }\n-\n-        public SAML2SPKeystoreTO build() {\n-            return instance;\n-        }\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                append(\"key\", key).\n+                toString();\n     }\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SAML2SPKeystoreTO.java"},{"sha":"4aaac4e83d384be9cd9762b12fdff78c28fef205","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPEntityTO.java","status":"renamed","additions":30,"deletions":62,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPEntityTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPEntityTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPEntityTO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,77 +18,55 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n-import javax.ws.rs.PathParam;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n-public class SAML2IdPMetadataTO implements EntityTO {\n+public class SAML2IdPEntityTO extends SAML2EntityTO {\n \n     private static final long serialVersionUID = 7215073386484048953L;\n \n-    private String key;\n+    public static class Builder extends SAML2EntityTO.Builder<SAML2IdPEntityTO, Builder> {\n \n-    private String metadata;\n-\n-    private String signingCertificate;\n-\n-    private String signingKey;\n-\n-    private String encryptionCertificate;\n-\n-    private String encryptionKey;\n-\n-    private String appliesTo;\n-\n-    public static class Builder {\n-\n-        private final SAML2IdPMetadataTO instance = new SAML2IdPMetadataTO();\n+        @Override\n+        protected SAML2IdPEntityTO newInstance() {\n+            return new SAML2IdPEntityTO();\n+        }\n \n         public Builder metadata(final String metadata) {\n-            instance.setMetadata(metadata);\n+            getInstance().setMetadata(metadata);\n             return this;\n         }\n \n         public Builder signingCertificate(final String signingCertificate) {\n-            instance.setSigningCertificate(signingCertificate);\n+            getInstance().setSigningCertificate(signingCertificate);\n             return this;\n         }\n \n         public Builder signingKey(final String signingKey) {\n-            instance.setSigningKey(signingKey);\n+            getInstance().setSigningKey(signingKey);\n             return this;\n         }\n \n         public Builder encryptionCertificate(final String encryptionCertificate) {\n-            instance.setEncryptionCertificate(encryptionCertificate);\n+            getInstance().setEncryptionCertificate(encryptionCertificate);\n             return this;\n         }\n \n         public Builder encryptionKey(final String encryptionKey) {\n-            instance.setEncryptionKey(encryptionKey);\n+            getInstance().setEncryptionKey(encryptionKey);\n             return this;\n         }\n+    }\n \n-        public Builder appliesTo(final String appliesTo) {\n-            instance.setAppliesTo(appliesTo);\n-            return this;\n-        }\n+    private String metadata;\n \n-        public SAML2IdPMetadataTO build() {\n-            return instance;\n-        }\n-    }\n+    private String signingCertificate;\n \n-    @Override\n-    public String getKey() {\n-        return key;\n-    }\n+    private String signingKey;\n \n-    @PathParam(\"key\")\n-    @Override\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n+    private String encryptionCertificate;\n+\n+    private String encryptionKey;\n \n     public String getMetadata() {\n         return metadata;\n@@ -130,12 +108,16 @@ public void setEncryptionKey(final String encryptionKey) {\n         this.encryptionKey = encryptionKey;\n     }\n \n-    public String getAppliesTo() {\n-        return appliesTo;\n-    }\n-\n-    public void setAppliesTo(final String appliesTo) {\n-        this.appliesTo = appliesTo;\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(metadata).\n+                append(encryptionCertificate).\n+                append(encryptionKey).\n+                append(signingCertificate).\n+                append(signingKey).\n+                build();\n     }\n \n     @Override\n@@ -149,28 +131,14 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        SAML2IdPMetadataTO other = (SAML2IdPMetadataTO) obj;\n+        SAML2IdPEntityTO other = (SAML2IdPEntityTO) obj;\n         return new EqualsBuilder().\n-                append(key, other.key).\n+                appendSuper(super.equals(obj)).\n                 append(metadata, other.metadata).\n                 append(encryptionCertificate, other.encryptionCertificate).\n                 append(encryptionKey, other.encryptionKey).\n                 append(signingCertificate, other.signingCertificate).\n                 append(signingKey, other.signingKey).\n-                append(appliesTo, other.appliesTo).\n-                build();\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return new HashCodeBuilder().\n-                append(key).\n-                append(metadata).\n-                append(encryptionCertificate).\n-                append(encryptionKey).\n-                append(signingCertificate).\n-                append(signingKey).\n-                append(appliesTo).\n                 build();\n     }\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPMetadataTO.java"},{"sha":"13c6afe5d5be533cd4cca234845063c53c8aff3b","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SAML2SPClientAppTO.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPClientAppTO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -31,7 +31,7 @@\n import java.util.List;\n \n @Schema(allOf = { ClientAppTO.class })\n-public class SAML2SPTO extends ClientAppTO {\n+public class SAML2SPClientAppTO extends ClientAppTO {\n \n     private static final long serialVersionUID = -6370888503924521351L;\n \n@@ -230,7 +230,7 @@ public boolean equals(final Object obj) {\n         if (obj.getClass() != getClass()) {\n             return false;\n         }\n-        SAML2SPTO rhs = (SAML2SPTO) obj;\n+        SAML2SPClientAppTO rhs = (SAML2SPClientAppTO) obj;\n         return new EqualsBuilder()\n                 .appendSuper(super.equals(obj))\n                 .append(this.entityId, rhs.entityId)","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SAML2SPTO.java"},{"sha":"ee1f1d81901fb4e5991d3d66beb9ea721d020c59","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SAML2SPEntityTO.java","status":"renamed","additions":29,"deletions":54,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPEntityTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPEntityTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPEntityTO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -20,28 +20,39 @@\n \n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.commons.lang3.builder.ToStringBuilder;\n-import javax.ws.rs.PathParam;\n \n-public class SAML2SPMetadataTO implements EntityTO {\n+public class SAML2SPEntityTO extends SAML2EntityTO {\n \n     private static final long serialVersionUID = 6215073386484048953L;\n \n-    private String key;\n+    public static class Builder extends SAML2EntityTO.Builder<SAML2SPEntityTO, Builder> {\n \n-    private String metadata;\n+        @Override\n+        protected SAML2SPEntityTO newInstance() {\n+            return new SAML2SPEntityTO();\n+        }\n \n-    private String owner;\n+        public Builder keystore(final String keystore) {\n+            getInstance().setKeystore(keystore);\n+            return this;\n+        }\n \n-    @Override\n-    public String getKey() {\n-        return key;\n+        public Builder metadata(final String metadata) {\n+            getInstance().setMetadata(metadata);\n+            return this;\n+        }\n     }\n \n-    @PathParam(\"key\")\n-    @Override\n-    public void setKey(final String key) {\n-        this.key = key;\n+    private String keystore;\n+\n+    private String metadata;\n+\n+    public String getKeystore() {\n+        return keystore;\n+    }\n+\n+    public void setKeystore(final String keystore) {\n+        this.keystore = keystore;\n     }\n \n     public String getMetadata() {\n@@ -52,20 +63,12 @@ public void setMetadata(final String metadata) {\n         this.metadata = metadata;\n     }\n \n-    public String getOwner() {\n-        return owner;\n-    }\n-\n-    public void setOwner(final String owner) {\n-        this.owner = owner;\n-    }\n-\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().\n-                append(key).\n+                appendSuper(super.hashCode()).\n+                append(keystore).\n                 append(metadata).\n-                append(owner).\n                 build();\n     }\n \n@@ -80,39 +83,11 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        SAML2SPMetadataTO other = (SAML2SPMetadataTO) obj;\n+        SAML2SPEntityTO other = (SAML2SPEntityTO) obj;\n         return new EqualsBuilder().\n-                append(key, other.key).\n+                appendSuper(super.equals(obj)).\n+                append(keystore, other.keystore).\n                 append(metadata, other.metadata).\n-                append(owner, other.owner).\n                 build();\n     }\n-\n-    @Override\n-    public String toString() {\n-        return new ToStringBuilder(this)\n-                .appendSuper(super.toString())\n-                .append(\"key\", key)\n-                .append(\"owner\", owner)\n-                .toString();\n-    }\n-\n-    public static class Builder {\n-\n-        private final SAML2SPMetadataTO instance = new SAML2SPMetadataTO();\n-\n-        public Builder metadata(final String metadata) {\n-            instance.setMetadata(metadata);\n-            return this;\n-        }\n-\n-        public Builder owner(final String owner) {\n-            instance.setOwner(owner);\n-            return this;\n-        }\n-\n-        public SAML2SPMetadataTO build() {\n-            return instance;\n-        }\n-    }\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SAML2SPMetadataTO.java"},{"sha":"b7770345a433ffd4baf1c93a5a198bc5bd919847","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -56,17 +56,19 @@ public final class AMEntitlement {\n \n     public static final String AUTH_MODULE_DELETE = \"AUTH_MODULE_DELETE\";\n \n-    public static final String SAML2_IDP_METADATA_SET = \"SAML2_IDP_METADATA_SET\";\n+    public static final String SAML2_IDP_ENTITY_SET = \"SAML2_IDP_ENTITY_SET\";\n \n-    public static final String SAML2_IDP_METADATA_READ = \"SAML2_IDP_METADATA_READ\";\n+    public static final String SAML2_IDP_ENTITY_LIST = \"SAML2_IDP_ENTITY_LIST\";\n \n-    public static final String SAML2_SP_METADATA_SET = \"SAML2_SP_METADATA_SET\";\n+    public static final String SAML2_IDP_ENTITY_GET = \"SAML2_IDP_ENTITY_GET\";\n \n-    public static final String SAML2_SP_METADATA_READ = \"SAML2_SP_METADATA_READ\";\n+    public static final String SAML2_SP_ENTITY_SET = \"SAML2_SP_ENTITY_SET\";\n \n-    public static final String SAML2_SP_KEYSTORE_SET = \"SAML2_SP_KEYSTORE_SET\";\n+    public static final String SAML2_SP_ENTITY_DELETE = \"SAML2_SP_ENTITY_DELETE\";\n \n-    public static final String SAML2_SP_KEYSTORE_READ = \"SAML2_SP_KEYSTORE_READ\";\n+    public static final String SAML2_SP_ENTITY_LIST = \"SAML2_SP_ENTITY_LIST\";\n+\n+    public static final String SAML2_SP_ENTITY_GET = \"SAML2_SP_ENTITY_GET\";\n \n     public static final String GOOGLE_MFA_DELETE_TOKEN = \"GOOGLE_MFA_DELETE_TOKEN\";\n \n@@ -106,8 +108,6 @@ public final class AMEntitlement {\n \n     public static final String U2F_SEARCH_DEVICES = \"U2F_SEARCH_DEVICES\";\n \n-    public static final String U2F_UPDATE_DEVICE = \"U2F_UPDATE_DEVICE\";\n-\n     public static final String WA_CONFIG_LIST = \"WA_CONFIG_LIST\";\n \n     public static final String WA_CONFIG_SET = \"WA_CONFIG_SET\";\n@@ -130,8 +130,6 @@ public final class AMEntitlement {\n \n     public static final String IMPERSONATION_CREATE_ACCOUNT = \"IMPERSONATION_CREATE_ACCOUNT\";\n \n-    public static final String IMPERSONATION_UPDATE_ACCOUNT = \"IMPERSONATION_UPDATE_ACCOUNT\";\n-\n     public static final String IMPERSONATION_DELETE_ACCOUNT = \"IMPERSONATION_DELETE_ACCOUNT\";\n \n     public static final String IMPERSONATION_READ_ACCOUNT = \"IMPERSONATION_READ_ACCOUNT\";"},{"sha":"da788677109ff5f07999bac61fead359a2b40059","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/GoogleMfaAuthAccount.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthAccount.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -65,18 +65,11 @@ public GoogleMfaAuthAccount.Builder name(final String name) {\n             return this;\n         }\n \n-        public GoogleMfaAuthAccount.Builder key(final String key) {\n-            instance.setKey(key);\n-            return this;\n-        }\n-\n         public GoogleMfaAuthAccount build() {\n             return instance;\n         }\n     }\n \n-    private String key;\n-\n     private String secretKey;\n \n     private String name;\n@@ -89,14 +82,6 @@ public GoogleMfaAuthAccount build() {\n \n     private Date registrationDate;\n \n-    public String getKey() {\n-        return key;\n-    }\n-\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-\n     public String getName() {\n         return name;\n     }\n@@ -151,7 +136,6 @@ public void setRegistrationDate(final Date registrationDate) {\n     public int hashCode() {\n         return new HashCodeBuilder()\n                 .appendSuper(super.hashCode())\n-                .append(key)\n                 .append(secretKey)\n                 .append(name)\n                 .append(id)\n@@ -175,7 +159,6 @@ public boolean equals(final Object obj) {\n         GoogleMfaAuthAccount rhs = (GoogleMfaAuthAccount) obj;\n         return new EqualsBuilder()\n                 .appendSuper(super.equals(obj))\n-                .append(this.key, rhs.key)\n                 .append(this.secretKey, rhs.secretKey)\n                 .append(this.name, rhs.name)\n                 .append(this.id, rhs.id)\n@@ -188,7 +171,6 @@ public boolean equals(final Object obj) {\n     @Override\n     public String toString() {\n         return new ToStringBuilder(this)\n-                .append(\"key\", key)\n                 .append(\"name\", name)\n                 .append(\"secretKey\", secretKey)\n                 .append(\"id\", id)"},{"sha":"a1ce05ac6a15883543d4224c0f9b96250f28c191","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/GoogleMfaAuthToken.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthToken.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -43,30 +43,15 @@ public GoogleMfaAuthToken.Builder token(final int otp) {\n             return this;\n         }\n \n-        public GoogleMfaAuthToken.Builder key(final String key) {\n-            instance.setKey(key);\n-            return this;\n-        }\n-\n         public GoogleMfaAuthToken build() {\n             return instance;\n         }\n     }\n \n-    private String key;\n-\n     private int otp;\n \n     private Date issueDate;\n \n-    public String getKey() {\n-        return key;\n-    }\n-\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-\n     public int getOtp() {\n         return otp;\n     }\n@@ -89,7 +74,6 @@ public void setIssueDate(final Date issueDate) {\n     public int hashCode() {\n         return new HashCodeBuilder()\n                 .appendSuper(super.hashCode())\n-                .append(key)\n                 .append(otp)\n                 .append(issueDate)\n                 .toHashCode();\n@@ -109,7 +93,6 @@ public boolean equals(final Object obj) {\n         GoogleMfaAuthToken rhs = (GoogleMfaAuthToken) obj;\n         return new EqualsBuilder()\n                 .appendSuper(super.equals(obj))\n-                .append(this.key, rhs.key)\n                 .append(this.otp, rhs.otp)\n                 .append(this.issueDate, rhs.issueDate)\n                 .isEquals();\n@@ -118,7 +101,6 @@ public boolean equals(final Object obj) {\n     @Override\n     public String toString() {\n         return new ToStringBuilder(this)\n-                .append(\"key\", key)\n                 .append(\"token\", otp)\n                 .append(\"issueDate\", issueDate)\n                 .toString();"},{"sha":"6d80d3cba2a5aa74825cac7722ebb66d9f269513","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/ImpersonationAccount.java","status":"modified","additions":21,"deletions":41,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FImpersonationAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FImpersonationAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FImpersonationAccount.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -27,33 +27,35 @@ public class ImpersonationAccount implements BaseBean {\n \n     private static final long serialVersionUID = 2285073386484048953L;\n \n-    private String owner;\n+    public static class Builder {\n \n-    private String key;\n+        private final ImpersonationAccount instance = new ImpersonationAccount();\n \n-    public String getKey() {\n-        return key;\n-    }\n+        public ImpersonationAccount.Builder impersonated(final String impersonated) {\n+            instance.setImpersonated(impersonated);\n+            return this;\n+        }\n \n-    public void setKey(final String key) {\n-        this.key = key;\n+        public ImpersonationAccount build() {\n+            return instance;\n+        }\n     }\n \n-    public String getOwner() {\n-        return owner;\n+    private String impersonated;\n+\n+    public String getImpersonated() {\n+        return impersonated;\n     }\n \n-    public void setOwner(final String owner) {\n-        this.owner = owner;\n+    public void setImpersonated(final String impersonated) {\n+        this.impersonated = impersonated;\n     }\n \n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder()\n-            .appendSuper(super.hashCode())\n-            .append(key)\n-            .append(owner)\n-            .toHashCode();\n+                .append(impersonated)\n+                .toHashCode();\n     }\n \n     @Override\n@@ -69,36 +71,14 @@ public boolean equals(final Object obj) {\n         }\n         ImpersonationAccount rhs = (ImpersonationAccount) obj;\n         return new EqualsBuilder()\n-            .appendSuper(super.equals(obj))\n-            .append(this.key, rhs.key)\n-            .append(this.owner, rhs.owner)\n-            .isEquals();\n+                .append(this.impersonated, rhs.impersonated)\n+                .isEquals();\n     }\n \n     @Override\n     public String toString() {\n         return new ToStringBuilder(this)\n-            .append(\"key\", key)\n-            .append(\"owner\", owner)\n-            .toString();\n-    }\n-\n-    public static class Builder {\n-\n-        private final ImpersonationAccount instance = new ImpersonationAccount();\n-\n-        public ImpersonationAccount.Builder key(final String key) {\n-            instance.setKey(key);\n-            return this;\n-        }\n-\n-        public ImpersonationAccount.Builder owner(final String owner) {\n-            instance.setOwner(owner);\n-            return this;\n-        }\n-\n-        public ImpersonationAccount build() {\n-            return instance;\n-        }\n+                .append(\"key\", impersonated)\n+                .toString();\n     }\n }"},{"sha":"a0c465bc34e63646cf4b4205b58eaab318607c9d","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/U2FDevice.java","status":"modified","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FU2FDevice.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FU2FDevice.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FU2FDevice.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -20,7 +20,6 @@\n \n import java.util.Date;\n import java.util.Optional;\n-import javax.ws.rs.PathParam;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n@@ -44,11 +43,6 @@ public U2FDevice.Builder record(final String record) {\n             return this;\n         }\n \n-        public U2FDevice.Builder key(final String key) {\n-            instance.setKey(key);\n-            return this;\n-        }\n-\n         public U2FDevice.Builder id(final long id) {\n             instance.setId(id);\n             return this;\n@@ -61,21 +55,10 @@ public U2FDevice build() {\n \n     private long id;\n \n-    private String key;\n-\n     private String record;\n \n     private Date issueDate;\n \n-    public String getKey() {\n-        return key;\n-    }\n-\n-    @PathParam(\"key\")\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-\n     public String getRecord() {\n         return record;\n     }\n@@ -106,7 +89,6 @@ public void setIssueDate(final Date issueDate) {\n     public int hashCode() {\n         return new HashCodeBuilder()\n                 .appendSuper(super.hashCode())\n-                .append(key)\n                 .append(record)\n                 .append(id)\n                 .append(issueDate)\n@@ -127,7 +109,6 @@ public boolean equals(final Object obj) {\n         U2FDevice rhs = (U2FDevice) obj;\n         return new EqualsBuilder()\n                 .appendSuper(super.equals(obj))\n-                .append(this.key, rhs.key)\n                 .append(this.record, rhs.record)\n                 .append(this.id, rhs.id)\n                 .append(this.issueDate, rhs.issueDate)\n@@ -137,7 +118,6 @@ public boolean equals(final Object obj) {\n     @Override\n     public String toString() {\n         return new ToStringBuilder(this)\n-                .append(\"key\", key)\n                 .append(\"record\", record)\n                 .append(\"id\", id)\n                 .append(\"issueDate\", issueDate)"},{"sha":"e601fb4b6e6bf4098d810826670a23ab9003bea8","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/WebAuthnAccount.java","status":"modified","additions":1,"deletions":19,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWebAuthnAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWebAuthnAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWebAuthnAccount.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -36,11 +36,6 @@ public static class Builder {\n \n         private final WebAuthnAccount instance = new WebAuthnAccount();\n \n-        public WebAuthnAccount.Builder key(final String key) {\n-            instance.setKey(key);\n-            return this;\n-        }\n-\n         public WebAuthnAccount.Builder credential(final WebAuthnDeviceCredential credential) {\n             instance.getCredentials().add(credential);\n             return this;\n@@ -61,18 +56,8 @@ public WebAuthnAccount build() {\n         }\n     }\n \n-    private String key;\n-\n     private final List<WebAuthnDeviceCredential> credentials = new ArrayList<>();\n \n-    public String getKey() {\n-        return key;\n-    }\n-\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-\n     @JacksonXmlElementWrapper(localName = \"credentials\")\n     @JacksonXmlProperty(localName = \"credential\")\n     public List<WebAuthnDeviceCredential> getCredentials() {\n@@ -83,7 +68,6 @@ public List<WebAuthnDeviceCredential> getCredentials() {\n     public int hashCode() {\n         return new HashCodeBuilder()\n                 .appendSuper(super.hashCode())\n-                .append(key)\n                 .append(credentials)\n                 .toHashCode();\n     }\n@@ -102,16 +86,14 @@ public boolean equals(final Object obj) {\n         WebAuthnAccount rhs = (WebAuthnAccount) obj;\n         return new EqualsBuilder()\n                 .appendSuper(super.equals(obj))\n-                .append(this.key, rhs.key)\n                 .append(this.credentials, rhs.credentials)\n                 .isEquals();\n     }\n \n     @Override\n     public String toString() {\n         return new ToStringBuilder(this)\n-                .append(\"key\", key)\n-                .append(\"records\", credentials)\n+                .append(\"credentials\", credentials)\n                 .toString();\n     }\n }"},{"sha":"5e9f930c44d9da26a0b8ca9be8ee5e934bc11d0a","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/U2FDeviceQuery.java","status":"modified","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FU2FDeviceQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FU2FDeviceQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FU2FDeviceQuery.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -23,7 +23,6 @@\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.Date;\n import javax.ws.rs.QueryParam;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n public class U2FDeviceQuery extends AbstractQuery {\n \n@@ -36,11 +35,6 @@ protected U2FDeviceQuery newInstance() {\n             return new U2FDeviceQuery();\n         }\n \n-        public U2FDeviceQuery.Builder entityKey(final String entityKey) {\n-            getInstance().setEntityKey(entityKey);\n-            return this;\n-        }\n-\n         public U2FDeviceQuery.Builder owner(final String owner) {\n             getInstance().setOwner(owner);\n             return this;\n@@ -59,24 +53,10 @@ public U2FDeviceQuery.Builder expirationDate(final Date date) {\n \n     private Long id;\n \n-    private String entityKey;\n-\n     private Date expirationDate;\n \n     private String owner;\n \n-    @Parameter(name = JAXRSService.PARAM_ENTITY_KEY, in = ParameterIn.QUERY,\n-            schema =\n-            @Schema(implementation = String.class, example = \"50592942-73ec-44c4-a377-e859524245e4\"))\n-    public String getEntityKey() {\n-        return entityKey;\n-    }\n-\n-    @QueryParam(JAXRSService.PARAM_ENTITY_KEY)\n-    public void setEntityKey(final String entityKey) {\n-        this.entityKey = entityKey;\n-    }\n-\n     @Parameter(name = \"id\", in = ParameterIn.QUERY, schema =\n             @Schema(implementation = Long.class))\n     public Long getId() {"},{"sha":"4f6a89dd729d755d849dc1120b0718774d42f39b","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AuthProfileService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -31,7 +31,7 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n import org.apache.syncope.common.lib.to.AuthProfileTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;                                                           \n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for Auth profiles."},{"sha":"b2a8346c77dcb88af2834588d5cc7dfd5ef5ae31","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCJWKSService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCJWKSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCJWKSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCJWKSService.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -50,7 +50,7 @@ public interface OIDCJWKSService extends JAXRSService {\n \n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    OIDCJWKSTO get();\n+    OIDCJWKSTO read();\n \n     @ApiResponses({\n         @ApiResponse(responseCode = \"201\","},{"sha":"d2f58ad9ff40f67952f113be30cb2c4b37d7bfb8","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPEntityService.java","status":"renamed","additions":18,"deletions":34,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPEntityService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPEntityService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPEntityService.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,77 +18,61 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n- * REST operations for SAML 2.0 SP metadata.\n+ * REST operations for SAML 2.0 IdP metadata.\n  */\n @Tag(name = \"SAML 2.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"saml2sp/metadata\")\n-public interface SAML2SPMetadataService extends JAXRSService {\n+@Path(\"saml2/idp\")\n+public interface SAML2IdPEntityService extends JAXRSService {\n+\n+    String DEFAULT_OWNER = \"Syncope\";\n \n     /**\n-     * Returns a document outlining metadata for Syncope as SAML 2.0 SP.\n+     * Returns the SAML 2.0 IdP entities.\n      *\n-     * @param name indicates the SAML 2.0 SP metadata document owner.\n-     * @return SAML 2.0 SP metadata\n+     * @return SAML 2.0 IdP entities\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2SPMetadataTO readFor(@QueryParam(\"name\") String name);\n+    List<SAML2IdPEntityTO> list();\n \n     /**\n-     * Returns the SAML 2.0 SP metadata matching the given key.\n+     * Returns the SAML 2.0 IdP entity matching the given key.\n      *\n-     * @param key key of requested SAML 2.0 SP metadata\n-     * @return SAML 2.0 SP metadata with matching id\n+     * @param key key of requested SAML 2.0 IdP entity\n+     * @return SAML 2.0 IdP entity with matching key\n      */\n     @GET\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2SPMetadataTO read(@NotNull @PathParam(\"key\") String key);\n+    SAML2IdPEntityTO get(@NotNull @PathParam(\"key\") String key);\n \n     /**\n-     * Store the metadata to finalize the metadata generation process.\n+     * Store the entity to finalize the generation process.\n      *\n-     * @param metadataTO SAML2SPMetadataTO to be created\n-     * @return Response object featuring Location header of created SAML 2.0 SP metadata\n+     * @param entityTO entity to be created\n      */\n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"201\",\n-                description = \"SAML2SPMetadata successfully created\", headers = {\n-                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"UUID generated for the entity created\"),\n-                    @Header(name = HttpHeaders.LOCATION, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"URL of the entity created\") }),\n-        @ApiResponse(responseCode = \"409\",\n-                description = \"Metadata already existing\") })\n     @POST\n+    @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response set(@NotNull SAML2SPMetadataTO metadataTO);\n+    void set(@NotNull SAML2IdPEntityTO entityTO);\n }","previous_filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPMetadataService.java"},{"sha":"1bf105a2df4ba2fb9fbf89cd643d5394c85d945c","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPMetadataService.java","status":"removed","additions":0,"deletions":98,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java?ref=c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","patch":"@@ -1,98 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api.service;\n-\n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-import javax.validation.constraints.NotNull;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-\n-/**\n- * REST operations for SAML 2.0 IdP metadata.\n- */\n-@Tag(name = \"SAML 2.0\")\n-@SecurityRequirements({\n-    @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"saml2idp/metadata\")\n-public interface SAML2IdPMetadataService extends JAXRSService {\n-\n-    String DEFAULT_OWNER = \"Syncope\";\n-\n-    /**\n-     * Returns a document outlining keys and metadata of Syncope as SAML 2.0 IdP.\n-     *\n-     * @param appliesTo indicates the SAML 2.0 IdP metadata document owner and applicability, where a value of 'Syncope'\n-     * indicates the Syncope server as the global owner of the metadata and keys.\n-     * @return SAML 2.0 IdP metadata\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2IdPMetadataTO readFor(@QueryParam(\"appliesTo\") @DefaultValue(DEFAULT_OWNER) String appliesTo);\n-\n-    /**\n-     * Returns the SAML 2.0 IdP metadata matching the given key.\n-     *\n-     * @param key key of requested SAML 2.0 IdP metadata\n-     * @return SAML 2.0 IdP metadata with matching id\n-     */\n-    @GET\n-    @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2IdPMetadataTO read(@NotNull @PathParam(\"key\") String key);\n-\n-    /**\n-     * Store the metadata and keys to finalize the metadata generation process.\n-     *\n-     * @param saml2IdPMetadataTO SAML2IdPMetadata to be created\n-     * @return Response object featuring Location header of created SAML 2.0 IdP metadata\n-     */\n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"201\",\n-                description = \"SAML2IdPMetadata successfully created\", headers = {\n-                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"UUID generated for the entity created\"),\n-                    @Header(name = HttpHeaders.LOCATION, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"URL of the entity created\") }),\n-        @ApiResponse(responseCode = \"409\",\n-                description = \"Metadata already existing\") })\n-    @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response set(@NotNull SAML2IdPMetadataTO saml2IdPMetadataTO);\n-}"},{"sha":"5009cb7a59118dee10dc6a665ae0c0f9158172d0","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPEntityService.java","status":"renamed","additions":27,"deletions":34,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPEntityService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPEntityService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPEntityService.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,77 +18,70 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n- * REST operations for SAML 2.0 SP Keystore.\n+ * REST operations for SAML 2.0 SP entity.\n  */\n @Tag(name = \"SAML 2.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"saml2sp/keystore\")\n-public interface SAML2SPKeystoreService extends JAXRSService {\n+@Path(\"saml2/sp\")\n+public interface SAML2SPEntityService extends JAXRSService {\n \n     /**\n-     * Returns a document outlining keystore for Syncope as SAML 2.0 SP.\n+     * Returns the SAML 2.0 SP entities.\n      *\n-     * @param name indicates the SAML 2.0 SP keystore document owner.\n-     * @return SAML 2.0 SP keystore\n+     * @return SAML 2.0 SP entities\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2SPKeystoreTO readFor(@QueryParam(\"name\") String name);\n+    List<SAML2SPEntityTO> list();\n \n     /**\n-     * Returns the SAML 2.0 SP keystore matching the given key.\n+     * Returns the SAML 2.0 SP entity matching the given key.\n      *\n-     * @param key key of requested SAML 2.0 SP keystore\n-     * @return SAML 2.0 SP keystore with matching id\n+     * @param key key of requested SAML 2.0 SP entity\n+     * @return SAML 2.0 SP entity with matching key\n      */\n     @GET\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2SPKeystoreTO read(@NotNull @PathParam(\"key\") String key);\n+    SAML2SPEntityTO get(@NotNull @PathParam(\"key\") String key);\n \n     /**\n-     * Store the keystore to finalize the keystore generation process.\n+     * Store the entity to finalize the generation process.\n      *\n-     * @param keystoreTO SAML2SPMetadataKeystoreTO to be created\n-     * @return Response object featuring Location header of created SAML 2.0 SP keystore\n+     * @param entityTO entity to be created\n      */\n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"201\",\n-                description = \"SAML2SPKeystoreTO successfully created\", headers = {\n-                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"UUID generated for the entity created\"),\n-                    @Header(name = HttpHeaders.LOCATION, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"URL of the entity created\") }),\n-        @ApiResponse(responseCode = \"409\",\n-                description = \"Metadata already existing\") })\n     @POST\n+    @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response set(@NotNull SAML2SPKeystoreTO keystoreTO);\n+    void set(@NotNull SAML2SPEntityTO entityTO);\n+\n+    /**\n+     * Delets the SAML 2.0 SP entity matching the given key.\n+     *\n+     * @param key key of requested SAML 2.0 SP entity\n+     */\n+    @DELETE\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void delete(@NotNull @PathParam(\"key\") String key);\n }","previous_filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPKeystoreService.java"},{"sha":"087dbad5353d44d481efa1ddea237827c7b108ee","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/GoogleMfaAuthAccountService.java","status":"modified","additions":9,"deletions":32,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,10 +18,6 @@\n  */\n package org.apache.syncope.common.rest.api.service.wa;\n \n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -35,7 +31,6 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -51,50 +46,32 @@ public interface GoogleMfaAuthAccountService extends JAXRSService {\n     @DELETE\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"accts/owners/{owner}\")\n-    void deleteFor(@NotNull @PathParam(\"owner\") String owner);\n-\n-    @DELETE\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"accts/{key}\")\n-    void delete(@NotNull @PathParam(\"key\") String key);\n+    @Path(\"accts/{owner}\")\n+    void delete(@NotNull @PathParam(\"owner\") String owner);\n \n     @DELETE\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"accts\")\n-    void delete();\n+    void deleteAll();\n \n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"201\",\n-                description = \"GoogleMfaAuthAccount successfully created\", headers = {\n-                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"UUID generated for the entity created\") }) })\n     @POST\n-    @Path(\"accts/owners/{owner}\")\n+    @Path(\"accts/{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response create(@NotNull @PathParam(\"owner\") String owner, @NotNull GoogleMfaAuthAccount acct);\n+    void create(@NotNull @PathParam(\"owner\") String owner, @NotNull GoogleMfaAuthAccount acct);\n \n     @PUT\n-    @Path(\"accts/owners/{owner}\")\n+    @Path(\"accts/{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull @PathParam(\"owner\") String owner, @NotNull GoogleMfaAuthAccount acct);\n \n     @GET\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"accts/owners/{owner}\")\n-    PagedResult<GoogleMfaAuthAccount> readFor(@NotNull @PathParam(\"owner\") String owner);\n-\n-    @GET\n-    @Path(\"accts/{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    GoogleMfaAuthAccount read(@NotNull @PathParam(\"key\") String key);\n+    @Path(\"accts/{owner}\")\n+    PagedResult<GoogleMfaAuthAccount> read(@NotNull @PathParam(\"owner\") String owner);\n \n     @GET\n     @Path(\"accts/id/{id}\")\n@@ -103,8 +80,8 @@ public interface GoogleMfaAuthAccountService extends JAXRSService {\n     GoogleMfaAuthAccount read(@NotNull @PathParam(\"id\") long id);\n \n     @GET\n+    @Path(\"accts\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"accts\")\n     PagedResult<GoogleMfaAuthAccount> list();\n }"},{"sha":"f070460cad91fecfd0466c02ac98968b4283db8e","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/GoogleMfaAuthTokenService.java","status":"modified","additions":9,"deletions":15,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -51,46 +51,40 @@ public interface GoogleMfaAuthTokenService extends JAXRSService {\n     void delete(@QueryParam(\"expirationDate\") Date expirationDate);\n \n     @DELETE\n-    @Path(\"tokens/owners/{owner}/{otp}\")\n+    @Path(\"tokens/{owner}/{otp}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"owner\") String owner, @NotNull @PathParam(\"otp\") int otp);\n \n     @DELETE\n-    @Path(\"tokens/owners/{owner}\")\n+    @Path(\"tokens/{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void deleteFor(@NotNull @PathParam(\"owner\") String owner);\n+    void delete(@NotNull @PathParam(\"owner\") String owner);\n \n     @DELETE\n-    @Path(\"tokens/{otp}\")\n+    @Path(\"tokens/otp/{otp}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"otp\") int otp);\n \n     @PUT\n-    @Path(\"tokens/owners/{owner}\")\n+    @Path(\"tokens/{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void store(@NotNull @PathParam(\"owner\") String owner, @NotNull GoogleMfaAuthToken token);\n \n     @GET\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"tokens/owners/{owner}/{otp}\")\n-    GoogleMfaAuthToken readFor(@NotNull @PathParam(\"owner\") String owner, @NotNull @PathParam(\"otp\") int otp);\n+    @Path(\"tokens/{owner}/{otp}\")\n+    GoogleMfaAuthToken read(@NotNull @PathParam(\"owner\") String owner, @NotNull @PathParam(\"otp\") int otp);\n \n     @GET\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"tokens/owners/{owner}\")\n-    PagedResult<GoogleMfaAuthToken> readFor(@NotNull @PathParam(\"owner\") String owner);\n-\n-    @GET\n-    @Path(\"tokens/{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    GoogleMfaAuthToken read(@NotNull @PathParam(\"key\") String key);\n+    @Path(\"tokens/{owner}\")\n+    PagedResult<GoogleMfaAuthToken> read(@NotNull @PathParam(\"owner\") String owner);\n \n     @GET\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })"},{"sha":"63d96cb240b1cfaa267c00c75881f8e3b7e08930","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/ImpersonationService.java","status":"modified","additions":13,"deletions":34,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FImpersonationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FImpersonationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FImpersonationService.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -16,68 +16,47 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.common.rest.api.service.wa;\n \n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n+import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n-import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-\n-import java.util.List;\n+import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n @Tag(name = \"WA\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\")})\n+    @SecurityRequirement(name = \"Bearer\") })\n @Path(\"wa/impersonation\")\n public interface ImpersonationService extends JAXRSService {\n-    @GET\n-    @Path(\"accounts/{owner}\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    List<ImpersonationAccount> findByOwner(@NotNull @PathParam(\"owner\") String owner);\n \n     @GET\n-    @Path(\"authz/{owner}\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    ImpersonationAccount find(@NotNull @PathParam(\"owner\") String owner,\n-                              @NotNull @QueryParam(\"id\") String id);\n-\n-    @POST\n+    @Path(\"{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response create(@NotNull ImpersonationAccount account);\n+    List<ImpersonationAccount> read(@NotNull @PathParam(\"owner\") String owner);\n \n-    @DELETE\n-    @Path(\"accounts/{owner}\")\n+    @POST\n+    @Path(\"{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response delete(@NotNull @PathParam(\"owner\") String owner, @NotNull @QueryParam(\"id\") String id);\n+    void create(@NotNull @PathParam(\"owner\") String owner, @NotNull ImpersonationAccount account);\n \n-    @ApiResponses(\n-        @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n-    @PUT\n+    @DELETE\n+    @Path(\"{owner}/{impersonated}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void update(@NotNull ImpersonationAccount account);\n-\n+    void delete(@NotNull @PathParam(\"owner\") String owner, @NotNull @PathParam(\"impersonated\") String impersonated);\n }"},{"sha":"ee8bd8b03ba2556fa8097f48d8a9e0972a8fb964","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/U2FRegistrationService.java","status":"modified","additions":3,"deletions":33,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FU2FRegistrationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FU2FRegistrationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FU2FRegistrationService.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,12 +18,6 @@\n  */\n package org.apache.syncope.common.rest.api.service.wa;\n \n-import io.swagger.v3.oas.annotations.Parameter;\n-import io.swagger.v3.oas.annotations.enums.ParameterIn;\n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -33,12 +27,10 @@\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n-import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.wa.U2FDevice;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -55,38 +47,16 @@ public interface U2FRegistrationService extends JAXRSService {\n     @DELETE\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response delete(@BeanParam U2FDeviceQuery query);\n+    void delete(@BeanParam U2FDeviceQuery query);\n \n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"201\",\n-                description = \"U2FRegistration successfully created\", headers = {\n-                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"UUID generated for the entity created\") }) })\n     @POST\n-    @Path(\"owners/{owner}\")\n+    @Path(\"{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response create(@NotNull @PathParam(\"owner\") String owner, @NotNull U2FDevice device);\n-\n-    @Parameter(name = \"key\", description = \"U2F device key\", in = ParameterIn.PATH, schema =\n-            @Schema(type = \"string\"))\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n-    @PUT\n-    @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void update(@NotNull U2FDevice device);\n+    void create(@NotNull @PathParam(\"owner\") String owner, @NotNull U2FDevice device);\n \n     @GET\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PagedResult<U2FDevice> search(@BeanParam U2FDeviceQuery query);\n-\n-    @GET\n-    @Path(\"{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    U2FDevice read(@NotNull @PathParam(\"key\") String key);\n }"},{"sha":"f420395015e333978799e49798cbe6e88e5f3470","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WebAuthnRegistrationService.java","status":"modified","additions":9,"deletions":26,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWebAuthnRegistrationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWebAuthnRegistrationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWebAuthnRegistrationService.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,10 +18,6 @@\n  */\n package org.apache.syncope.common.rest.api.service.wa;\n \n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -36,7 +32,6 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n@@ -54,43 +49,31 @@ public interface WebAuthnRegistrationService extends JAXRSService {\n     List<WebAuthnAccount> list();\n \n     @GET\n-    @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    WebAuthnAccount read(@NotNull @PathParam(\"key\") String key);\n-\n-    @GET\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"owners/{owner}\")\n-    WebAuthnAccount readFor(@NotNull @PathParam(\"owner\") String owner);\n+    @Path(\"{owner}\")\n+    WebAuthnAccount read(@NotNull @PathParam(\"owner\") String owner);\n \n     @DELETE\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"owners/{owner}\")\n-    Response delete(@NotNull @PathParam(\"owner\") String owner);\n+    @Path(\"{owner}\")\n+    void delete(@NotNull @PathParam(\"owner\") String owner);\n \n     @DELETE\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"owners/{owner}/{credentialId}\")\n-    Response delete(@NotNull @PathParam(\"owner\") String owner, @NotNull @PathParam(\"credentialId\") String credentialId);\n+    @Path(\"{owner}/{credentialId}\")\n+    void delete(@NotNull @PathParam(\"owner\") String owner, @NotNull @PathParam(\"credentialId\") String credentialId);\n \n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"201\",\n-                description = \"WebAuthn successfully created\", headers = {\n-                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"UUID generated for the entity created\") }) })\n     @POST\n-    @Path(\"owners/{owner}\")\n+    @Path(\"{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response create(@NotNull @PathParam(\"owner\") String owner, @NotNull WebAuthnAccount account);\n+    void create(@NotNull @PathParam(\"owner\") String owner, @NotNull WebAuthnAccount account);\n \n     @PUT\n-    @Path(\"owners/{owner}\")\n+    @Path(\"{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull @PathParam(\"owner\") String owner, @NotNull WebAuthnAccount account);"},{"sha":"94c70fc51aa6567a9f3e39a438fd760a848c8395","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/ClientAppLogic.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -45,17 +45,17 @@\n import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtils;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n \n @Component\n public class ClientAppLogic extends AbstractTransactionalLogic<ClientAppTO> {\n@@ -116,7 +116,7 @@ private static void checkType(final ClientAppType type, final ClientAppUtils cli\n     public <T extends ClientAppTO> T read(final ClientAppType type, final String key) {\n         switch (type) {\n             case OIDCRP:\n-                OIDCRP oidcrp = oidcrpDAO.find(key);\n+                OIDCRPClientApp oidcrp = oidcrpDAO.find(key);\n                 if (oidcrp == null) {\n                     throw new NotFoundException(\"Client app \" + key + \" not found\");\n                 }\n@@ -125,7 +125,7 @@ public <T extends ClientAppTO> T read(final ClientAppType type, final String key\n \n                 return binder.getClientAppTO(oidcrp);\n             case CASSP:\n-                CASSP cassp = casspDAO.find(key);\n+                CASSPClientApp cassp = casspDAO.find(key);\n                 if (cassp == null) {\n                     throw new NotFoundException(\"Client app \" + key + \" not found\");\n                 }\n@@ -135,7 +135,7 @@ public <T extends ClientAppTO> T read(final ClientAppType type, final String key\n                 return binder.getClientAppTO(cassp);\n             case SAML2SP:\n             default:\n-                SAML2SP saml2sp = saml2spDAO.find(key);\n+                SAML2SPClientApp saml2sp = saml2spDAO.find(key);\n                 if (saml2sp == null) {\n                     throw new NotFoundException(\"Client app \" + key + \" not found\");\n                 }\n@@ -167,15 +167,15 @@ public void update(final ClientAppType type, final ClientAppTO clientAppTO) {\n \n         switch (type) {\n             case OIDCRP:\n-                OIDCRP oidcrp = oidcrpDAO.find(clientAppTO.getKey());\n+                OIDCRPClientApp oidcrp = oidcrpDAO.find(clientAppTO.getKey());\n                 if (oidcrp == null) {\n                     throw new NotFoundException(\"Client app \" + clientAppTO.getKey() + \" not found\");\n                 }\n                 binder.update(oidcrp, clientAppTO);\n                 oidcrpDAO.save(oidcrp);\n                 break;\n             case CASSP:\n-                CASSP cassp = casspDAO.find(clientAppTO.getKey());\n+                CASSPClientApp cassp = casspDAO.find(clientAppTO.getKey());\n                 if (cassp == null) {\n                     throw new NotFoundException(\"Client app \" + clientAppTO.getKey() + \" not found\");\n                 }\n@@ -184,7 +184,7 @@ public void update(final ClientAppType type, final ClientAppTO clientAppTO) {\n                 break;\n             case SAML2SP:\n             default:\n-                SAML2SP saml2sp = saml2spDAO.find(clientAppTO.getKey());\n+                SAML2SPClientApp saml2sp = saml2spDAO.find(clientAppTO.getKey());\n                 if (saml2sp == null) {\n                     throw new NotFoundException(\"Client app \" + clientAppTO.getKey() + \" not found\");\n                 }\n@@ -197,22 +197,22 @@ public void update(final ClientAppType type, final ClientAppTO clientAppTO) {\n     public void delete(final ClientAppType type, final String key) {\n         switch (type) {\n             case OIDCRP:\n-                OIDCRP oidcrp = oidcrpDAO.find(key);\n+                OIDCRPClientApp oidcrp = oidcrpDAO.find(key);\n                 if (oidcrp == null) {\n                     throw new NotFoundException(\"Client app \" + key + \" not found\");\n                 }\n                 oidcrpDAO.delete(oidcrp);\n                 break;\n             case CASSP:\n-                CASSP cassp = casspDAO.find(key);\n+                CASSPClientApp cassp = casspDAO.find(key);\n                 if (cassp == null) {\n                     throw new NotFoundException(\"Client app \" + key + \" not found\");\n                 }\n                 casspDAO.delete(cassp);\n                 break;\n             case SAML2SP:\n             default:\n-                SAML2SP saml2sp = saml2spDAO.find(key);\n+                SAML2SPClientApp saml2sp = saml2spDAO.find(key);\n                 if (saml2sp == null) {\n                     throw new NotFoundException(\"Client app \" + key + \" not found\");\n                 }"},{"sha":"3720a30acc1df3da213fe5999b00d70b60a1c0ac","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/OIDCJWKSLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -46,7 +46,7 @@ public class OIDCJWKSLogic extends AbstractTransactionalLogic<OIDCJWKSTO> {\n     @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_READ + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n-    public OIDCJWKSTO get() {\n+    public OIDCJWKSTO read() {\n         return Optional.ofNullable(dao.get()).\n                 map(binder::get).\n                 orElseThrow(() -> new NotFoundException(\"OIDC JWKS not found\"));"},{"sha":"bab3989912339a44ff8e562b25e8db79e091c50b","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPEntityLogic.java","status":"renamed","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPEntityLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPEntityLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPEntityLogic.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -19,81 +19,81 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n+import java.util.List;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPMetadataDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n-import org.apache.syncope.core.provisioning.api.data.SAML2SPMetadataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPEntityDAO;\n+import org.apache.syncope.core.provisioning.api.data.SAML2IdPEntityDataBinder;\n \n @Component\n-public class SAML2SPMetadataLogic extends AbstractTransactionalLogic<SAML2SPMetadataTO> {\n+public class SAML2IdPEntityLogic extends AbstractTransactionalLogic<SAML2IdPEntityTO> {\n \n     @Autowired\n-    private SAML2SPMetadataBinder binder;\n+    private SAML2IdPEntityDataBinder binder;\n \n     @Autowired\n-    private SAML2SPMetadataDAO saml2SPMetadataDAO;\n+    private SAML2IdPEntityDAO entityDAO;\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_METADATA_READ + \"') \"\n-            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_ENTITY_LIST + \"')\")\n     @Transactional(readOnly = true)\n-    public SAML2SPMetadataTO read(final String key) {\n-        return Optional.ofNullable(saml2SPMetadataDAO.find(key)).\n-                map(binder::getSAML2SPMetadataTO).\n-                orElseThrow(() -> new NotFoundException(key + \" not found\"));\n+    public List<SAML2IdPEntityTO> list() {\n+        return entityDAO.findAll().stream().\n+                map(binder::getSAML2IdPEntityTO).\n+                collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_METADATA_READ + \"') \"\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_ENTITY_GET + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n-    public SAML2SPMetadataTO readFor(final String name) {\n-        return Optional.ofNullable(saml2SPMetadataDAO.findByOwner(name)).\n-                map(binder::getSAML2SPMetadataTO).\n-                orElseThrow(() -> new NotFoundException(\"SAML2 SP Metadata owned by \" + name + \" not found\"));\n+    public SAML2IdPEntityTO get(final String key) {\n+        return Optional.ofNullable(entityDAO.find(key)).\n+                map(binder::getSAML2IdPEntityTO).\n+                orElseThrow(() -> new NotFoundException(key + \" not found\"));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_METADATA_SET + \"') \"\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_ENTITY_SET + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public SAML2SPMetadataTO set(final SAML2SPMetadataTO metadataTO) {\n-        SAML2SPMetadata metadata = saml2SPMetadataDAO.findByOwner(metadataTO.getOwner());\n-        if (metadata == null) {\n-            return binder.getSAML2SPMetadataTO(saml2SPMetadataDAO.save(binder.create(metadataTO)));\n-        }\n-        throw SyncopeClientException.build(ClientExceptionType.EntityExists);\n+    public SAML2IdPEntityTO set(final SAML2IdPEntityTO entityTO) {\n+        SAML2IdPEntity entity = Optional.ofNullable(entityDAO.find(entityTO.getKey())).\n+                map(metadata -> binder.update(metadata, entityTO)).\n+                orElseGet(() -> binder.create(entityTO));\n+        return binder.getSAML2IdPEntityTO(entityDAO.save(entity));\n     }\n \n     @Override\n-    protected SAML2SPMetadataTO resolveReference(final Method method, final Object... args)\n+    protected SAML2IdPEntityTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n-        String name = null;\n+\n+        String key = null;\n         if (ArrayUtils.isNotEmpty(args)) {\n-            for (int i = 0; name == null && i < args.length; i++) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n                 if (args[i] instanceof String) {\n-                    name = (String) args[i];\n-                } else if (args[i] instanceof SAML2SPMetadataTO) {\n-                    name = ((SAML2SPMetadataTO) args[i]).getOwner();\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof SAML2IdPEntityTO) {\n+                    key = ((SAML2IdPEntityTO) args[i]).getKey();\n                 }\n             }\n         }\n \n-        if (name != null) {\n+        if (key != null) {\n             try {\n-                return binder.getSAML2SPMetadataTO(saml2SPMetadataDAO.findByOwner(name));\n-            } catch (final Throwable ignore) {\n+                return binder.getSAML2IdPEntityTO(entityDAO.find(key));\n+            } catch (Throwable ignore) {\n                 LOG.debug(\"Unresolved reference\", ignore);\n                 throw new UnresolvedReferenceException(ignore);\n             }\n         }\n+\n         throw new UnresolvedReferenceException();\n     }\n }","previous_filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPMetadataLogic.java"},{"sha":"e6e5b400e6ffa11dd357c814926c05ce33f96697","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPMetadataLogic.java","status":"removed","additions":0,"deletions":101,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java?ref=c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","patch":"@@ -1,101 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import java.lang.reflect.Method;\n-import java.util.Optional;\n-import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n-import org.apache.syncope.common.lib.types.AMEntitlement;\n-import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPMetadataDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n-import org.apache.syncope.core.provisioning.api.data.SAML2IdPMetadataDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Component\n-public class SAML2IdPMetadataLogic extends AbstractTransactionalLogic<SAML2IdPMetadataTO> {\n-\n-    @Autowired\n-    private SAML2IdPMetadataDataBinder binder;\n-\n-    @Autowired\n-    private SAML2IdPMetadataDAO saml2IdPMetadataDAO;\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_METADATA_READ + \"') \"\n-            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public SAML2IdPMetadataTO read(final String key) {\n-        return Optional.ofNullable(saml2IdPMetadataDAO.find(key)).\n-                map(binder::getSAML2IdPMetadataTO).\n-                orElseThrow(() -> new NotFoundException(\"SAML2 IdP Metadata \" + key + \" not found\"));\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_METADATA_READ + \"') \"\n-            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public SAML2IdPMetadataTO readFor(final String appliesTo) {\n-        return Optional.ofNullable(saml2IdPMetadataDAO.findByOwner(appliesTo)).\n-                map(binder::getSAML2IdPMetadataTO).\n-                orElseThrow(() -> new NotFoundException(\"SAML2 IdP Metadata owned by \" + appliesTo + \" not found\"));\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_METADATA_SET + \"') \"\n-            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public SAML2IdPMetadataTO set(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n-        SAML2IdPMetadata saml2IdPMetadata = saml2IdPMetadataDAO.findByOwner(saml2IdPMetadataTO.getAppliesTo());\n-        if (saml2IdPMetadata == null) {\n-            return binder.getSAML2IdPMetadataTO(saml2IdPMetadataDAO.save(binder.create(saml2IdPMetadataTO)));\n-        }\n-        throw new DuplicateException(\"SAML 2.0 IdP metadata for \" + saml2IdPMetadataTO.getAppliesTo());\n-    }\n-\n-    @Override\n-    protected SAML2IdPMetadataTO resolveReference(final Method method, final Object... args)\n-            throws UnresolvedReferenceException {\n-\n-        String appliesTo = null;\n-\n-        if (ArrayUtils.isNotEmpty(args)) {\n-            for (int i = 0; appliesTo == null && i < args.length; i++) {\n-                if (args[i] instanceof String) {\n-                    appliesTo = (String) args[i];\n-                } else if (args[i] instanceof SAML2IdPMetadataTO) {\n-                    appliesTo = ((SAML2IdPMetadataTO) args[i]).getAppliesTo();\n-                }\n-            }\n-        }\n-\n-        if (appliesTo != null) {\n-            try {\n-                return binder.getSAML2IdPMetadataTO(saml2IdPMetadataDAO.findByOwner(appliesTo));\n-            } catch (Throwable ignore) {\n-                LOG.debug(\"Unresolved reference\", ignore);\n-                throw new UnresolvedReferenceException(ignore);\n-            }\n-        }\n-\n-        throw new UnresolvedReferenceException();\n-    }\n-}"},{"sha":"a3f5e8109aa7fee81776998c32921cfb242d96bc","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPEntityLogic.java","status":"renamed","additions":45,"deletions":38,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPEntityLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPEntityLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPEntityLogic.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,78 +18,85 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPKeystoreDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n-import org.apache.syncope.core.provisioning.api.data.SAML2SPKeystoreBinder;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPEntityDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n+import org.apache.syncope.core.provisioning.api.data.SAML2SPEntityDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.lang.reflect.Method;\n-import java.util.Optional;\n-\n @Component\n-public class SAML2SPKeystoreLogic extends AbstractTransactionalLogic<SAML2SPKeystoreTO> {\n+public class SAML2SPEntityLogic extends AbstractTransactionalLogic<SAML2SPEntityTO> {\n \n     @Autowired\n-    private SAML2SPKeystoreBinder binder;\n+    private SAML2SPEntityDataBinder binder;\n \n     @Autowired\n-    private SAML2SPKeystoreDAO saml2SPKeystoreDAO;\n+    private SAML2SPEntityDAO entityDAO;\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_KEYSTORE_READ + \"') \"\n-            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_ENTITY_LIST + \"')\")\n     @Transactional(readOnly = true)\n-    public SAML2SPKeystoreTO read(final String key) {\n-        return Optional.ofNullable(saml2SPKeystoreDAO.find(key)).\n-                map(binder::getSAML2SPKeystoreTO).\n-                orElseThrow(() -> new NotFoundException(key + \" not found\"));\n+    public List<SAML2SPEntityTO> list() {\n+        return entityDAO.findAll().stream().\n+                map(binder::getSAML2SPEntityTO).\n+                collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_KEYSTORE_READ + \"') \"\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_ENTITY_GET + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n-    public SAML2SPKeystoreTO get(final String name) {\n-        return Optional.ofNullable(saml2SPKeystoreDAO.findByOwner(name)).\n-                map(binder::getSAML2SPKeystoreTO).\n-                orElseThrow(() -> new NotFoundException(\"SAML2 SP keystore owned by \" + name + \" not found\"));\n+    public SAML2SPEntityTO read(final String key) {\n+        return Optional.ofNullable(entityDAO.find(key)).\n+                map(binder::getSAML2SPEntityTO).\n+                orElseThrow(() -> new NotFoundException(key + \" not found\"));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_KEYSTORE_SET + \"') \"\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_ENTITY_SET + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public SAML2SPKeystoreTO set(final SAML2SPKeystoreTO keystoreTO) {\n-        SAML2SPKeystore keystore = saml2SPKeystoreDAO.findByOwner(keystoreTO.getOwner());\n-        if (keystore == null) {\n-            return binder.getSAML2SPKeystoreTO(saml2SPKeystoreDAO.save(binder.create(keystoreTO)));\n-        }\n-        throw SyncopeClientException.build(ClientExceptionType.EntityExists);\n+    public SAML2SPEntityTO set(final SAML2SPEntityTO entityTO) {\n+        SAML2SPEntity entity = Optional.ofNullable(entityDAO.find(entityTO.getKey())).\n+                map(metadata -> binder.update(metadata, entityTO)).\n+                orElseGet(() -> binder.create(entityTO));\n+        return binder.getSAML2SPEntityTO(entityDAO.save(entity));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_ENTITY_DELETE + \"')\")\n+    public void delete(final String key) {\n+        Optional.ofNullable(entityDAO.find(key)).ifPresentOrElse(\n+                entityDAO::delete,\n+                () -> {\n+                    throw new NotFoundException(key + \" not found\");\n+                });\n     }\n \n     @Override\n-    protected SAML2SPKeystoreTO resolveReference(final Method method, final Object... args)\n+    protected SAML2SPEntityTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n-        String name = null;\n+\n+        String key = null;\n         if (ArrayUtils.isNotEmpty(args)) {\n-            for (int i = 0; name == null && i < args.length; i++) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n                 if (args[i] instanceof String) {\n-                    name = (String) args[i];\n-                } else if (args[i] instanceof SAML2SPKeystoreTO) {\n-                    name = ((SAML2SPKeystoreTO) args[i]).getOwner();\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof SAML2SPEntityTO) {\n+                    key = ((SAML2SPEntityTO) args[i]).getKey();\n                 }\n             }\n         }\n \n-        if (name != null) {\n+        if (key != null) {\n             try {\n-                return binder.getSAML2SPKeystoreTO(saml2SPKeystoreDAO.findByOwner(name));\n+                return binder.getSAML2SPEntityTO(entityDAO.find(key));\n             } catch (final Throwable ignore) {\n                 LOG.debug(\"Unresolved reference\", ignore);\n                 throw new UnresolvedReferenceException(ignore);","previous_filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPKeystoreLogic.java"},{"sha":"a2c35407d061a3a47daa5e7802105f8bc43613f4","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/GoogleMfaAuthAccountLogic.java","status":"modified","additions":16,"deletions":56,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -40,6 +39,18 @@ public class GoogleMfaAuthAccountLogic extends AbstractAuthProfileLogic {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_LIST_ACCOUNTS + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<GoogleMfaAuthAccount> list() {\n+        return authProfileDAO.findAll().\n+                stream().\n+                map(AuthProfile::getGoogleMfaAuthAccounts).\n+                filter(Objects::nonNull).\n+                flatMap(List::stream).\n+                collect(Collectors.toList());\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_ACCOUNT + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public void deleteFor(final String owner) {\n@@ -60,11 +71,7 @@ public void deleteAll() {\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_CREATE_ACCOUNT + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public String create(final String owner, final GoogleMfaAuthAccount account) {\n-        if (account.getKey() == null) {\n-            account.setKey(SecureRandomUtils.generateRandomUUID().toString());\n-        }\n-\n+    public void create(final String owner, final GoogleMfaAuthAccount account) {\n         AuthProfile profile = authProfileDAO.findByOwner(owner).orElseGet(() -> {\n             AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n             authProfile.setOwner(owner);\n@@ -75,16 +82,15 @@ public String create(final String owner, final GoogleMfaAuthAccount account) {\n         accounts.add(account);\n         profile.setGoogleMfaAuthAccounts(accounts);\n         authProfileDAO.save(profile);\n-        return account.getKey();\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_UPDATE_ACCOUNT + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public void update(final String owner, final GoogleMfaAuthAccount account) {\n         AuthProfile authProfile = authProfileDAO.findByOwner(owner).\n                 orElseThrow(() -> new NotFoundException(\"Could not find account for Owner \" + owner));\n-        final List<GoogleMfaAuthAccount> accounts = authProfile.getGoogleMfaAuthAccounts();\n-        if (accounts.removeIf(acct -> acct.getKey().equals(account.getKey()))) {\n+        List<GoogleMfaAuthAccount> accounts = authProfile.getGoogleMfaAuthAccounts();\n+        if (accounts.removeIf(acct -> acct.getId() == account.getId())) {\n             accounts.add(account);\n             authProfile.setGoogleMfaAuthAccounts(accounts);\n             authProfileDAO.save(authProfile);\n@@ -93,7 +99,7 @@ public void update(final String owner, final GoogleMfaAuthAccount account) {\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_ACCOUNT + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public List<GoogleMfaAuthAccount> readFor(final String owner) {\n+    public List<GoogleMfaAuthAccount> read(final String owner) {\n         return authProfileDAO.findByOwner(owner).\n                 stream().\n                 map(AuthProfile::getGoogleMfaAuthAccounts).\n@@ -103,23 +109,6 @@ public List<GoogleMfaAuthAccount> readFor(final String owner) {\n                 orElseThrow(() -> new NotFoundException(\"Could not find account for Owner \" + owner));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_ACCOUNT + \"') \"\n-            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public GoogleMfaAuthAccount read(final String key) {\n-        return authProfileDAO.findAll().\n-                stream().\n-                map(AuthProfile::getGoogleMfaAuthAccounts).\n-                filter(Objects::nonNull).\n-                map(accounts -> accounts.stream().\n-                filter(acct -> acct.getKey().equals(key)).\n-                findFirst().\n-                orElse(null)).\n-                filter(Objects::nonNull).\n-                findFirst().\n-                orElse(null);\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_ACCOUNT + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n@@ -136,33 +125,4 @@ public GoogleMfaAuthAccount read(final long id) {\n                 findFirst().\n                 orElse(null);\n     }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_ACCOUNT + \"') \"\n-            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void delete(final String key) {\n-        authProfileDAO.findAll().\n-                stream().\n-                filter(profile -> profile.getGoogleMfaAuthAccounts() != null\n-                && profile.getGoogleMfaAuthAccounts().stream().anyMatch(acct -> acct.getKey().equals(key))).\n-                findFirst().\n-                ifPresent(profile -> {\n-                    List<GoogleMfaAuthAccount> accounts = profile.getGoogleMfaAuthAccounts();\n-                    boolean removed = accounts.removeIf(acct -> acct.getKey().equals(key));\n-                    if (removed) {\n-                        authProfileDAO.save(profile);\n-                    }\n-                });\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_LIST_ACCOUNTS + \"') \"\n-            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public List<GoogleMfaAuthAccount> list() {\n-        return authProfileDAO.findAll().\n-                stream().\n-                map(AuthProfile::getGoogleMfaAuthAccounts).\n-                filter(Objects::nonNull).\n-                flatMap(List::stream).\n-                collect(Collectors.toList());\n-    }\n }"},{"sha":"2c0cf78f3b81eb3256ebc7433ba5672992417110","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/GoogleMfaAuthTokenLogic.java","status":"modified","additions":4,"deletions":23,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -57,7 +56,7 @@ public void delete(final String owner, final int otp) {\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_TOKEN + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void deleteFor(final String owner) {\n+    public void delete(final String owner) {\n         authProfileDAO.findByOwner(owner).ifPresent(profile -> {\n             profile.setGoogleMfaAuthTokens(List.of());\n             authProfileDAO.save(profile);\n@@ -82,11 +81,7 @@ public void deleteAll() {\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_STORE_TOKEN + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public String store(final String owner, final GoogleMfaAuthToken token) {\n-        if (token.getKey() == null) {\n-            token.setKey(SecureRandomUtils.generateRandomUUID().toString());\n-        }\n-\n+    public void store(final String owner, final GoogleMfaAuthToken token) {\n         AuthProfile profile = authProfileDAO.findByOwner(owner).orElseGet(() -> {\n             AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n             authProfile.setOwner(owner);\n@@ -97,13 +92,12 @@ public String store(final String owner, final GoogleMfaAuthToken token) {\n         tokens.add(token);\n         profile.setGoogleMfaAuthTokens(tokens);\n         authProfileDAO.save(profile);\n-        return token.getKey();\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_TOKEN + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n-    public GoogleMfaAuthToken readFor(final String owner, final int otp) {\n+    public GoogleMfaAuthToken read(final String owner, final int otp) {\n         return authProfileDAO.findByOwner(owner).\n                 stream().\n                 map(AuthProfile::getGoogleMfaAuthTokens).\n@@ -113,19 +107,6 @@ public GoogleMfaAuthToken readFor(final String owner, final int otp) {\n                 orElseThrow(() -> new NotFoundException(\"Could not find token for Owner \" + owner + \" and otp \" + otp));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_TOKEN + \"') \"\n-            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public GoogleMfaAuthToken read(final String key) {\n-        return authProfileDAO.findAll().\n-                stream().\n-                map(AuthProfile::getGoogleMfaAuthTokens).\n-                flatMap(List::stream).\n-                filter(token -> token.getKey().equals(key)).\n-                findFirst().\n-                orElseThrow(() -> new NotFoundException(\"Could not find token for \" + key));\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_LIST_TOKENS + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n@@ -139,7 +120,7 @@ public List<GoogleMfaAuthToken> list() {\n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_TOKEN + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n-    public List<GoogleMfaAuthToken> readFor(final String owner) {\n+    public List<GoogleMfaAuthToken> read(final String owner) {\n         return authProfileDAO.findByOwner(owner).\n                 map(AuthProfile::getGoogleMfaAuthTokens).\n                 orElse(List.of());"},{"sha":"6fd2d02c01c999ad6ebd43b0d06ff86d4c689f18","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/ImpersonationLogic.java","status":"modified","additions":19,"deletions":49,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FImpersonationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FImpersonationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FImpersonationLogic.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -16,12 +16,11 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.logic.wa;\n \n-import org.apache.syncope.common.lib.SyncopeClientException;\n+import java.util.ArrayList;\n+import java.util.List;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n@@ -30,9 +29,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class ImpersonationLogic extends AbstractAuthProfileLogic {\n@@ -41,65 +38,38 @@ public class ImpersonationLogic extends AbstractAuthProfileLogic {\n     private EntityFactory entityFactory;\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.IMPERSONATION_READ_ACCOUNT + \"')\"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public List<ImpersonationAccount> findByOwner(final String owner) {\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<ImpersonationAccount> read(final String owner) {\n         return authProfileDAO.findByOwner(owner).map(AuthProfile::getImpersonationAccounts).orElse(List.of());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.IMPERSONATION_READ_ACCOUNT + \"')\"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public ImpersonationAccount find(final String owner, final String id) {\n-        return authProfileDAO.findByOwner(owner)\n-            .map(AuthProfile::getImpersonationAccounts)\n-            .stream()\n-            .flatMap(List::stream)\n-            .filter(acct -> acct.getKey().equalsIgnoreCase(id))\n-            .findFirst()\n-            .orElseThrow(() -> {\n-                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.DelegatedAdministration);\n-                sce.getElements().add(owner + \" is not authorized to impersonate \" + id);\n-                throw sce;\n-            });\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + AMEntitlement.IMPERSONATION_CREATE_ACCOUNT + \"')\"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public String create(final ImpersonationAccount account) {\n-        AuthProfile profile = authProfileDAO.findByOwner(account.getOwner()).orElseGet(() -> {\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void create(final String owner, final ImpersonationAccount account) {\n+        AuthProfile profile = authProfileDAO.findByOwner(owner).orElseGet(() -> {\n             AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n-            authProfile.setOwner(account.getOwner());\n+            authProfile.setOwner(owner);\n             return authProfile;\n         });\n \n-        if (profile.getImpersonationAccounts()\n-            .stream()\n-            .noneMatch(acct -> acct.getKey().equalsIgnoreCase(account.getKey()))) {\n-            final List<ImpersonationAccount> accounts = new ArrayList<>(profile.getImpersonationAccounts());\n+        if (profile.getImpersonationAccounts().stream().\n+                noneMatch(acct -> acct.getImpersonated().equalsIgnoreCase(account.getImpersonated()))) {\n+\n+            List<ImpersonationAccount> accounts = new ArrayList<>(profile.getImpersonationAccounts());\n             accounts.add(account);\n             profile.setImpersonationAccounts(accounts);\n         }\n-        return authProfileDAO.save(profile).getKey();\n-    }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.IMPERSONATION_UPDATE_ACCOUNT + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void update(final ImpersonationAccount account) {\n-        authProfileDAO.findByOwner(account.getOwner()).ifPresent(profile -> {\n-            List<ImpersonationAccount> accounts = profile.getImpersonationAccounts();\n-            if (accounts.removeIf(acct -> acct.getKey().equals(account.getKey()))) {\n-                accounts.add(account);\n-                profile.setImpersonationAccounts(accounts);\n-                authProfileDAO.save(profile);\n-            }\n-        });\n+        authProfileDAO.save(profile);\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.IMPERSONATION_DELETE_ACCOUNT + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void delete(final ImpersonationAccount account) {\n-        authProfileDAO.findByOwner(account.getOwner()).ifPresent(profile -> {\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void delete(final String owner, final String impersonated) {\n+        authProfileDAO.findByOwner(owner).ifPresent(profile -> {\n             List<ImpersonationAccount> accounts = profile.getImpersonationAccounts();\n-            if (accounts.removeIf(acct -> acct.getKey().equalsIgnoreCase(account.getKey()))) {\n+            if (accounts.removeIf(acct -> acct.getImpersonated().equalsIgnoreCase(impersonated))) {\n                 profile.setImpersonationAccounts(accounts);\n                 authProfileDAO.save(profile);\n             }"},{"sha":"a2e63186a04072e5d218982d22dc80cd026bfafb","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/U2FRegistrationLogic.java","status":"modified","additions":6,"deletions":48,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -23,7 +23,6 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.builder.CompareToBuilder;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -34,11 +33,9 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class U2FRegistrationLogic extends AbstractAuthProfileLogic {\n@@ -48,11 +45,7 @@ public class U2FRegistrationLogic extends AbstractAuthProfileLogic {\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_CREATE_DEVICE + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public String create(final String owner, final U2FDevice device) {\n-        if (device.getKey() == null) {\n-            device.setKey(SecureRandomUtils.generateRandomUUID().toString());\n-        }\n-\n+    public void create(final String owner, final U2FDevice device) {\n         AuthProfile profile = authProfileDAO.findByOwner(owner).orElseGet(() -> {\n             AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n             authProfile.setOwner(owner);\n@@ -63,33 +56,16 @@ public String create(final String owner, final U2FDevice device) {\n         devices.add(device);\n         profile.setU2FRegisteredDevices(devices);\n         authProfileDAO.save(profile);\n-        return device.getKey();\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_READ_DEVICE + \"') \"\n-            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public U2FDevice read(final String key) {\n-        return authProfileDAO.findAll().\n-                stream().\n-                map(AuthProfile::getU2FRegisteredDevices).\n-                filter(Objects::nonNull).\n-                flatMap(List::stream).\n-                filter(record -> record.getKey().equals(key)).\n-                findFirst().\n-                orElse(null);\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_DELETE_DEVICE + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void delete(final String entityKey, final Long id, final Date expirationDate) {\n+    public void delete(final Long id, final Date expirationDate) {\n         List<AuthProfile> profiles = authProfileDAO.findAll();\n         profiles.forEach(profile -> {\n             List<U2FDevice> devices = profile.getU2FRegisteredDevices();\n             if (devices != null) {\n-                if (StringUtils.isNotBlank(entityKey)) {\n-                    devices.removeIf(device -> device.getKey().equals(entityKey));\n-                } else if (id != null) {\n+                if (id != null) {\n                     devices.removeIf(device -> device.getId() == id);\n                 } else if (expirationDate != null) {\n                     devices.removeIf(device -> device.getIssueDate().compareTo(expirationDate) < 0);\n@@ -104,10 +80,12 @@ public void delete(final String entityKey, final Long id, final Date expirationD\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_SEARCH_DEVICES + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public Pair<Integer, List<U2FDevice>> search(final String entityKey, final Integer page,\n+    public Pair<Integer, List<U2FDevice>> search(\n+            final Integer page,\n             final Integer itemsPerPage, final Long id,\n             final Date expirationDate,\n             final List<OrderByClause> orderByClauses) {\n+\n         List<Comparator<U2FDevice>> comparatorList = orderByClauses.\n                 stream().\n                 map(orderByClause -> {\n@@ -116,10 +94,6 @@ public Pair<Integer, List<U2FDevice>> search(final String entityKey, final Integ\n                         comparator = (o1, o2) -> new CompareToBuilder().\n                                 append(o1.getId(), o2.getId()).toComparison();\n                     }\n-                    if (orderByClause.getField().equals(\"key\")) {\n-                        comparator = (o1, o2) -> new CompareToBuilder().\n-                                append(o1.getKey(), o2.getKey()).toComparison();\n-                    }\n                     if (orderByClause.getField().equals(\"issueDate\")) {\n                         comparator = (o1, o2) -> new CompareToBuilder().\n                                 append(o1.getIssueDate(), o2.getIssueDate()).toComparison();\n@@ -146,9 +120,6 @@ public Pair<Integer, List<U2FDevice>> search(final String entityKey, final Integ\n                 flatMap(List::stream).\n                 filter(device -> {\n                     EqualsBuilder builder = new EqualsBuilder();\n-                    if (StringUtils.isNotBlank(entityKey)) {\n-                        builder.append(entityKey, device.getKey());\n-                    }\n                     if (id != null) {\n                         builder.append(id, (Long) device.getId());\n                     }\n@@ -176,17 +147,4 @@ public Pair<Integer, List<U2FDevice>> search(final String entityKey, final Integ\n                 .collect(Collectors.toList());\n         return Pair.of(devices.size(), result);\n     }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_UPDATE_DEVICE + \"') \"\n-            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void update(final U2FDevice device) {\n-        authProfileDAO.findAll().forEach(profile -> {\n-            List<U2FDevice> devices = profile.getU2FRegisteredDevices();\n-            if (devices.removeIf(d -> d.getKey().equals(device.getKey()))) {\n-                devices.add(device);\n-                profile.setU2FRegisteredDevices(devices);\n-                authProfileDAO.save(profile);\n-            }\n-        });\n-    }\n }"},{"sha":"64c8d76a5add7a84ba144a6ea2580640ebca17e3","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/WAClientAppLogic.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -29,14 +29,14 @@\n import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.provisioning.api.data.wa.WAClientAppDataBinder;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n \n @Component\n public class WAClientAppLogic {\n@@ -85,21 +85,21 @@ private WAClientApp doRead(final Long clientAppId, final ClientAppType type) {\n \n         switch (type) {\n             case OIDCRP:\n-                OIDCRP oidcrp = oidcrpDAO.findByClientAppId(clientAppId);\n+                OIDCRPClientApp oidcrp = oidcrpDAO.findByClientAppId(clientAppId);\n                 if (oidcrp != null) {\n                     clientApp = binder.getWAClientApp(oidcrp);\n                 }\n                 break;\n \n             case SAML2SP:\n-                SAML2SP saml2sp = saml2spDAO.findByClientAppId(clientAppId);\n+                SAML2SPClientApp saml2sp = saml2spDAO.findByClientAppId(clientAppId);\n                 if (saml2sp != null) {\n                     clientApp = binder.getWAClientApp(saml2sp);\n                 }\n                 break;\n \n             case CASSP:\n-                CASSP cassp = casspDAO.findByClientAppId(clientAppId);\n+                CASSPClientApp cassp = casspDAO.findByClientAppId(clientAppId);\n                 if (cassp != null) {\n                     clientApp = binder.getWAClientApp(cassp);\n                 }\n@@ -135,21 +135,21 @@ private WAClientApp doRead(final String name, final ClientAppType type) {\n \n         switch (type) {\n             case OIDCRP:\n-                OIDCRP oidcrp = oidcrpDAO.findByName(name);\n+                OIDCRPClientApp oidcrp = oidcrpDAO.findByName(name);\n                 if (oidcrp != null) {\n                     clientApp = binder.getWAClientApp(oidcrp);\n                 }\n                 break;\n \n             case SAML2SP:\n-                SAML2SP saml2sp = saml2spDAO.findByName(name);\n+                SAML2SPClientApp saml2sp = saml2spDAO.findByName(name);\n                 if (saml2sp != null) {\n                     clientApp = binder.getWAClientApp(saml2sp);\n                 }\n                 break;\n \n             case CASSP:\n-                CASSP cassp = casspDAO.findByName(name);\n+                CASSPClientApp cassp = casspDAO.findByName(name);\n                 if (cassp != null) {\n                     clientApp = binder.getWAClientApp(cassp);\n                 }"},{"sha":"5e6469f29e9a41b131f1d3cc6c8f5ada0f109005","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/WebAuthnRegistrationLogic.java","status":"modified","additions":2,"deletions":20,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWebAuthnRegistrationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWebAuthnRegistrationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWebAuthnRegistrationLogic.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -40,18 +39,6 @@ public class WebAuthnRegistrationLogic extends AbstractAuthProfileLogic {\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_READ_DEVICE + \"') \"\n-            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public WebAuthnAccount read(final String key) {\n-        return authProfileDAO.findAll().\n-                stream().\n-                map(AuthProfile::getWebAuthnAccount).\n-                filter(record -> record.getKey().equals(key)).\n-                findFirst().\n-                orElseThrow(() -> new NotFoundException(\"Could not find account with key \" + key));\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_LIST_DEVICE + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n@@ -64,7 +51,7 @@ public List<WebAuthnAccount> list() {\n     @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_READ_DEVICE + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n-    public WebAuthnAccount findAccountBy(final String owner) {\n+    public WebAuthnAccount read(final String owner) {\n         return authProfileDAO.findByOwner(owner).\n                 stream().\n                 map(AuthProfile::getWebAuthnAccount).\n@@ -99,19 +86,14 @@ public void delete(final String owner, final String credentialId) {\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_CREATE_DEVICE + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public WebAuthnAccount create(final String owner, final WebAuthnAccount account) {\n-        if (account.getKey() == null) {\n-            account.setKey(SecureRandomUtils.generateRandomUUID().toString());\n-        }\n-\n+    public void create(final String owner, final WebAuthnAccount account) {\n         AuthProfile profile = authProfileDAO.findByOwner(owner).orElseGet(() -> {\n             AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n             authProfile.setOwner(owner);\n             return authProfile;\n         });\n         profile.setWebAuthnAccount(account);\n         authProfileDAO.save(profile);\n-        return profile.getWebAuthnAccount();\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_UPDATE_DEVICE + \"') \""},{"sha":"81aee2cde9e1d4003a69945c5d7e2f13ee49c9ef","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/OIDCJWKSServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSServiceImpl.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -35,8 +35,8 @@ public class OIDCJWKSServiceImpl extends AbstractServiceImpl implements OIDCJWKS\n     private OIDCJWKSLogic logic;\n \n     @Override\n-    public OIDCJWKSTO get() {\n-        return logic.get();\n+    public OIDCJWKSTO read() {\n+        return logic.read();\n     }\n \n     @Override"},{"sha":"6fe5bb74cea40c043e26ebeb547e06074dfe4585","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPEntityServiceImpl.java","status":"renamed","additions":12,"deletions":18,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPEntityServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPEntityServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPEntityServiceImpl.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,37 +18,31 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n-import java.net.URI;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.core.logic.SAML2SPMetadataLogic;\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n+import org.apache.syncope.core.logic.SAML2IdPEntityLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPEntityService;\n \n @Service\n-public class SAML2SPMetadataServiceImpl extends AbstractServiceImpl implements SAML2SPMetadataService {\n+public class SAML2IdPEntityServiceImpl extends AbstractServiceImpl implements SAML2IdPEntityService {\n \n     @Autowired\n-    private SAML2SPMetadataLogic logic;\n+    private SAML2IdPEntityLogic logic;\n \n     @Override\n-    public SAML2SPMetadataTO readFor(final String name) {\n-        return logic.readFor(name);\n+    public List<SAML2IdPEntityTO> list() {\n+        return logic.list();\n     }\n \n     @Override\n-    public SAML2SPMetadataTO read(final String key) {\n-        return logic.read(key);\n+    public SAML2IdPEntityTO get(final String key) {\n+        return logic.get(key);\n     }\n \n     @Override\n-    public Response set(final SAML2SPMetadataTO metadataTO) {\n-        SAML2SPMetadataTO spMetadata = logic.set(metadataTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(spMetadata.getKey()).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_KEY, spMetadata.getKey()).\n-                build();\n+    public void set(final SAML2IdPEntityTO entityTO) {\n+        logic.set(entityTO);\n     }\n }","previous_filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPMetadataServiceImpl.java"},{"sha":"285b0add633ca8b4c980544b4165faa63192a863","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPMetadataServiceImpl.java","status":"removed","additions":0,"deletions":54,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataServiceImpl.java?ref=c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","patch":"@@ -1,54 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf.service;\n-\n-import java.net.URI;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.core.logic.SAML2IdPMetadataLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n-\n-@Service\n-public class SAML2IdPMetadataServiceImpl extends AbstractServiceImpl implements SAML2IdPMetadataService {\n-\n-    @Autowired\n-    private SAML2IdPMetadataLogic logic;\n-\n-    @Override\n-    public SAML2IdPMetadataTO readFor(final String appliesTo) {\n-        return logic.readFor(appliesTo);\n-    }\n-\n-    @Override\n-    public SAML2IdPMetadataTO read(final String key) {\n-        return logic.read(key);\n-    }\n-\n-    @Override\n-    public Response set(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n-        SAML2IdPMetadataTO saml2IdPMetadata = logic.set(saml2IdPMetadataTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(saml2IdPMetadata.getKey()).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_KEY, saml2IdPMetadata.getKey()).\n-                build();\n-    }\n-}"},{"sha":"94217d26ea5f65ff78c0f3aaf922d87418725b65","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPEntityServiceImpl.java","status":"renamed","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPEntityServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPEntityServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPEntityServiceImpl.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,37 +18,36 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n-import java.net.URI;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.core.logic.SAML2SPKeystoreLogic;\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n+import org.apache.syncope.core.logic.SAML2SPEntityLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreService;\n+import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n \n @Service\n-public class SAML2SPKeystoreServiceImpl extends AbstractServiceImpl implements SAML2SPKeystoreService {\n+public class SAML2SPEntityServiceImpl extends AbstractServiceImpl implements SAML2SPEntityService {\n \n     @Autowired\n-    private SAML2SPKeystoreLogic logic;\n+    private SAML2SPEntityLogic logic;\n \n     @Override\n-    public SAML2SPKeystoreTO readFor(final String name) {\n-        return logic.get(name);\n+    public List<SAML2SPEntityTO> list() {\n+        return logic.list();\n     }\n \n     @Override\n-    public SAML2SPKeystoreTO read(final String key) {\n+    public SAML2SPEntityTO get(final String key) {\n         return logic.read(key);\n     }\n \n     @Override\n-    public Response set(final SAML2SPKeystoreTO keystoreTO) {\n-        SAML2SPKeystoreTO keystore = logic.set(keystoreTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(keystore.getKey()).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_KEY, keystore.getKey()).\n-                build();\n+    public void set(final SAML2SPEntityTO entityTO) {\n+        logic.set(entityTO);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n     }\n }","previous_filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPKeystoreServiceImpl.java"},{"sha":"a3d32cea256bc7d1b4ac669c92971f92138966c2","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/GoogleMfaAuthAccountServiceImpl.java","status":"modified","additions":6,"deletions":23,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,12 +18,9 @@\n  */\n package org.apache.syncope.core.rest.cxf.service.wa;\n \n-import java.net.URI;\n import java.util.List;\n-import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthAccountService;\n import org.apache.syncope.core.logic.wa.GoogleMfaAuthAccountLogic;\n import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n@@ -37,27 +34,18 @@ public class GoogleMfaAuthAccountServiceImpl extends AbstractServiceImpl impleme\n     private GoogleMfaAuthAccountLogic logic;\n \n     @Override\n-    public void deleteFor(final String owner) {\n+    public void delete(final String owner) {\n         logic.deleteFor(owner);\n     }\n \n     @Override\n-    public void delete(final String key) {\n-        logic.delete(key);\n-    }\n-\n-    @Override\n-    public void delete() {\n+    public void deleteAll() {\n         logic.deleteAll();\n     }\n \n     @Override\n-    public Response create(final String owner, final GoogleMfaAuthAccount acct) {\n-        String key = logic.create(owner, acct);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(key).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_KEY, key).\n-                build();\n+    public void create(final String owner, final GoogleMfaAuthAccount acct) {\n+        logic.create(owner, acct);\n     }\n \n     @Override\n@@ -75,13 +63,8 @@ private PagedResult<GoogleMfaAuthAccount> build(final List<GoogleMfaAuthAccount>\n     }\n \n     @Override\n-    public PagedResult<GoogleMfaAuthAccount> readFor(final String owner) {\n-        return build(logic.readFor(owner));\n-    }\n-\n-    @Override\n-    public GoogleMfaAuthAccount read(final String key) {\n-        return logic.read(key);\n+    public PagedResult<GoogleMfaAuthAccount> read(final String owner) {\n+        return build(logic.read(owner));\n     }\n \n     @Override"},{"sha":"f4ce58d19ca826502340e31eda9671ce01c04737","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/GoogleMfaAuthTokenServiceImpl.java","status":"modified","additions":6,"deletions":11,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -49,8 +49,8 @@ public void delete(final String owner, final int otp) {\n     }\n \n     @Override\n-    public void deleteFor(final String owner) {\n-        logic.deleteFor(owner);\n+    public void delete(final String owner) {\n+        logic.delete(owner);\n     }\n \n     @Override\n@@ -64,8 +64,8 @@ public void store(final String owner, final GoogleMfaAuthToken token) {\n     }\n \n     @Override\n-    public GoogleMfaAuthToken readFor(final String owner, final int otp) {\n-        return logic.readFor(owner, otp);\n+    public GoogleMfaAuthToken read(final String owner, final int otp) {\n+        return logic.read(owner, otp);\n     }\n \n     private PagedResult<GoogleMfaAuthToken> build(final List<GoogleMfaAuthToken> read) {\n@@ -78,13 +78,8 @@ private PagedResult<GoogleMfaAuthToken> build(final List<GoogleMfaAuthToken> rea\n     }\n \n     @Override\n-    public PagedResult<GoogleMfaAuthToken> readFor(final String owner) {\n-        return build(logic.readFor(owner));\n-    }\n-\n-    @Override\n-    public GoogleMfaAuthToken read(final String key) {\n-        return logic.read(key);\n+    public PagedResult<GoogleMfaAuthToken> read(final String owner) {\n+        return build(logic.read(owner));\n     }\n \n     @Override"},{"sha":"2feb8b8c917d14c879bf937234065743bca721e5","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/ImpersonationServiceImpl.java","status":"modified","additions":7,"deletions":26,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FImpersonationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FImpersonationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FImpersonationServiceImpl.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -16,53 +16,34 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.rest.cxf.service.wa;\n \n+import java.util.List;\n import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.common.rest.api.service.wa.ImpersonationService;\n import org.apache.syncope.core.logic.wa.ImpersonationLogic;\n import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import javax.ws.rs.core.Response;\n-\n-import java.net.URI;\n-import java.util.List;\n-\n @Service\n public class ImpersonationServiceImpl extends AbstractServiceImpl implements ImpersonationService {\n \n     @Autowired\n     private ImpersonationLogic logic;\n \n     @Override\n-    public List<ImpersonationAccount> findByOwner(final String owner) {\n-        return logic.findByOwner(owner);\n-    }\n-\n-    @Override\n-    public ImpersonationAccount find(final String owner,\n-                         final String id) {\n-        return logic.find(owner, id);\n-    }\n-\n-    @Override\n-    public Response create(final ImpersonationAccount account) {\n-        logic.create(account);\n-        URI location = uriInfo.getAbsolutePathBuilder().build();\n-        return Response.created(location).build();\n+    public List<ImpersonationAccount> read(final String owner) {\n+        return logic.read(owner);\n     }\n \n     @Override\n-    public Response delete(final String owner, final String id) {\n-        logic.delete(logic.find(owner, id));\n-        return Response.noContent().build();\n+    public void create(final String owner, final ImpersonationAccount account) {\n+        logic.create(owner, account);\n     }\n \n     @Override\n-    public void update(final ImpersonationAccount account) {\n-        logic.update(account);\n+    public void delete(final String owner, final String impersonated) {\n+        logic.delete(owner, impersonated);\n     }\n }"},{"sha":"0a5d596f9a21310f3dc5e89cb3f3e59c73bdf70c","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/U2FRegistrationServiceImpl.java","status":"modified","additions":4,"deletions":23,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FU2FRegistrationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FU2FRegistrationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FU2FRegistrationServiceImpl.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,13 +18,10 @@\n  */\n package org.apache.syncope.core.rest.cxf.service.wa;\n \n-import java.net.URI;\n import java.util.List;\n-import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.wa.U2FDevice;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.U2FDeviceQuery;\n import org.apache.syncope.common.rest.api.service.wa.U2FRegistrationService;\n import org.apache.syncope.core.logic.wa.U2FRegistrationLogic;\n@@ -39,39 +36,23 @@ public class U2FRegistrationServiceImpl extends AbstractServiceImpl implements U\n     private U2FRegistrationLogic logic;\n \n     @Override\n-    public Response delete(final U2FDeviceQuery query) {\n-        logic.delete(query.getEntityKey(), query.getId(), query.getExpirationDate());\n-        return Response.noContent().build();\n+    public void delete(final U2FDeviceQuery query) {\n+        logic.delete(query.getId(), query.getExpirationDate());\n     }\n \n     @Override\n-    public void update(final U2FDevice device) {\n-        logic.update(device);\n-    }\n-\n-    @Override\n-    public Response create(final String owner, final U2FDevice device) {\n-        String key = logic.create(owner, device);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(key).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_KEY, key).\n-                build();\n+    public void create(final String owner, final U2FDevice device) {\n+        logic.create(owner, device);\n     }\n \n     @Override\n     public PagedResult<U2FDevice> search(final U2FDeviceQuery query) {\n         Pair<Integer, List<U2FDevice>> result = logic.search(\n-                query.getEntityKey(),\n                 query.getPage(),\n                 query.getSize(),\n                 query.getId(),\n                 query.getExpirationDate(),\n                 getOrderByClauses(query.getOrderBy()));\n         return buildPagedResult(result.getRight(), query.getPage(), query.getSize(), result.getLeft());\n     }\n-\n-    @Override\n-    public U2FDevice read(final String key) {\n-        return logic.read(key);\n-    }\n }"},{"sha":"91105f2599d0800656f969d5228720fbb935a705","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WebAuthnRegistrationServiceImpl.java","status":"modified","additions":6,"deletions":21,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWebAuthnRegistrationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWebAuthnRegistrationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWebAuthnRegistrationServiceImpl.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,11 +18,8 @@\n  */\n package org.apache.syncope.core.rest.cxf.service.wa;\n \n-import java.net.URI;\n import java.util.List;\n-import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.wa.WebAuthnRegistrationService;\n import org.apache.syncope.core.logic.wa.WebAuthnRegistrationLogic;\n import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n@@ -41,35 +38,23 @@ public List<WebAuthnAccount> list() {\n     }\n \n     @Override\n-    public WebAuthnAccount read(final String key) {\n-        return logic.read(key);\n+    public WebAuthnAccount read(final String owner) {\n+        return logic.read(owner);\n     }\n \n     @Override\n-    public WebAuthnAccount readFor(final String owner) {\n-        return logic.findAccountBy(owner);\n-    }\n-\n-    @Override\n-    public Response delete(final String owner) {\n+    public void delete(final String owner) {\n         logic.delete(owner);\n-        return Response.noContent().build();\n     }\n \n     @Override\n-    public Response delete(final String owner, final String credentialId) {\n+    public void delete(final String owner, final String credentialId) {\n         logic.delete(owner, credentialId);\n-        return Response.noContent().build();\n     }\n \n     @Override\n-    public Response create(final String owner, final WebAuthnAccount account) {\n-        WebAuthnAccount token = logic.create(owner, account);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(token.getKey()).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_KEY, token.getKey()).\n-                entity(token).\n-                build();\n+    public void create(final String owner, final WebAuthnAccount account) {\n+        logic.create(owner, account);\n     }\n \n     @Override"},{"sha":"5f44953ad0b41e28726db2d30b9b2108364170dd","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/CASSPDAO.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FCASSPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FCASSPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FCASSPDAO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -19,23 +19,23 @@\n package org.apache.syncope.core.persistence.api.dao.auth;\n \n import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n \n-public interface CASSPDAO extends DAO<CASSP> {\n+public interface CASSPDAO extends DAO<CASSPClientApp> {\n \n-    CASSP find(String key);\n+    CASSPClientApp find(String key);\n \n-    CASSP findByClientAppId(Long clientAppId);\n+    CASSPClientApp findByClientAppId(Long clientAppId);\n \n-    CASSP findByName(String name);\n+    CASSPClientApp findByName(String name);\n \n-    List<CASSP> findAll();\n+    List<CASSPClientApp> findAll();\n \n-    CASSP save(CASSP clientApp);\n+    CASSPClientApp save(CASSPClientApp clientApp);\n \n     void delete(String key);\n \n-    void delete(CASSP clientApp);\n+    void delete(CASSPClientApp clientApp);\n }"},{"sha":"412c6da772ee56b73f4848834faf4fc09ea52200","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/OIDCRPDAO.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FOIDCRPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FOIDCRPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FOIDCRPDAO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -21,25 +21,25 @@\n import org.apache.syncope.core.persistence.api.dao.DAO;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n \n-public interface OIDCRPDAO extends DAO<OIDCRP> {\n+public interface OIDCRPDAO extends DAO<OIDCRPClientApp> {\n \n-    OIDCRP find(String key);\n+    OIDCRPClientApp find(String key);\n \n-    OIDCRP findByClientAppId(Long clientAppId);\n+    OIDCRPClientApp findByClientAppId(Long clientAppId);\n \n-    OIDCRP findByName(String name);\n+    OIDCRPClientApp findByName(String name);\n \n-    OIDCRP findByClientId(String clientId);\n+    OIDCRPClientApp findByClientId(String clientId);\n \n-    List<OIDCRP> findAll();\n+    List<OIDCRPClientApp> findAll();\n \n-    OIDCRP save(OIDCRP clientApp);\n+    OIDCRPClientApp save(OIDCRPClientApp clientApp);\n \n     void delete(String key);\n \n     void deleteByClientId(String clientId);\n \n-    void delete(OIDCRP clientApp);\n+    void delete(OIDCRPClientApp clientApp);\n }"},{"sha":"5b29a8f30d8c274703a2c97c02f487eaf3f5f6e9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/SAML2IdPEntityDAO.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2IdPEntityDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2IdPEntityDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2IdPEntityDAO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.auth;\n \n+import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n \n-public interface SAML2SPKeystoreDAO extends DAO<SAML2SPKeystore> {\n+public interface SAML2IdPEntityDAO extends DAO<SAML2IdPEntity> {\n \n-    SAML2SPKeystore find(String key);\n+    List<SAML2IdPEntity> findAll();\n \n-    SAML2SPKeystore findByOwner(String name);\n-\n-    SAML2SPKeystore save(SAML2SPKeystore keystore);\n+    SAML2IdPEntity find(String key);\n \n+    SAML2IdPEntity save(SAML2IdPEntity saml2IdPEntity);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/SAML2SPKeystoreDAO.java"},{"sha":"b173ab969a8bcb4d4645a0fbe9450ba1311a2887","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/SAML2SPDAO.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPDAO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -21,25 +21,25 @@\n import org.apache.syncope.core.persistence.api.dao.DAO;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n \n-public interface SAML2SPDAO extends DAO<SAML2SP> {\n+public interface SAML2SPDAO extends DAO<SAML2SPClientApp> {\n \n-    SAML2SP find(String key);\n+    SAML2SPClientApp find(String key);\n \n-    SAML2SP findByClientAppId(Long clientAppId);\n+    SAML2SPClientApp findByClientAppId(Long clientAppId);\n \n-    SAML2SP findByName(String name);\n+    SAML2SPClientApp findByName(String name);\n \n-    SAML2SP findByEntityId(String clientId);\n+    SAML2SPClientApp findByEntityId(String clientId);\n \n-    List<SAML2SP> findAll();\n+    List<SAML2SPClientApp> findAll();\n \n-    SAML2SP save(SAML2SP clientApp);\n+    SAML2SPClientApp save(SAML2SPClientApp clientApp);\n \n     void delete(String key);\n \n     void deleteByEntityId(String entityId);\n \n-    void delete(SAML2SP clientApp);\n+    void delete(SAML2SPClientApp clientApp);\n }"},{"sha":"75f2652d4bb0e450a63f2b056683acf9f428e47c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/SAML2SPEntityDAO.java","status":"renamed","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPEntityDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPEntityDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPEntityDAO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,15 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.auth;\n \n+import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n \n-public interface SAML2IdPMetadataDAO extends DAO<SAML2IdPMetadata> {\n+public interface SAML2SPEntityDAO extends DAO<SAML2SPEntity> {\n \n-    SAML2IdPMetadata find(String key);\n+    List<SAML2SPEntity> findAll();\n \n-    SAML2IdPMetadata findByOwner(String appliesTo);\n+    SAML2SPEntity find(String key);\n \n-    SAML2IdPMetadata save(SAML2IdPMetadata saml2IdPMetadata);\n+    SAML2SPEntity save(SAML2SPEntity entity);\n \n+    void delete(SAML2SPEntity entity);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/SAML2IdPMetadataDAO.java"},{"sha":"ef1894f5611142808a680866865c589824d8ccee","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/SAML2SPMetadataDAO.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPMetadataDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPMetadataDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPMetadataDAO.java?ref=c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","patch":"@@ -1,32 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.dao.auth;\n-\n-import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n-\n-public interface SAML2SPMetadataDAO extends DAO<SAML2SPMetadata> {\n-\n-    SAML2SPMetadata find(String key);\n-\n-    SAML2SPMetadata findByOwner(String name);\n-\n-    SAML2SPMetadata save(SAML2SPMetadata metadata);\n-\n-}"},{"sha":"f4d0e80b632daf7e2ef52bdddd350b7ec4d5f8dc","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/CASSPClientApp.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FCASSPClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FCASSPClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FCASSPClientApp.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.auth;\n \n-public interface CASSP extends ClientApp {\n+public interface CASSPClientApp extends ClientApp {\n \n     void setServiceId(String serviceId);\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/CASSP.java"},{"sha":"f84b90796a89775572419382832250eb622396b9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/OIDCRPClientApp.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCRPClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCRPClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCRPClientApp.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n \n-public interface OIDCRP extends ClientApp {\n+public interface OIDCRPClientApp extends ClientApp {\n \n     void setClientId(String id);\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/OIDCRP.java"},{"sha":"27c2747b709c5242deeda4f9c01e7644b673835c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2IdPEntity.java","status":"renamed","additions":18,"deletions":6,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2IdPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2IdPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2IdPEntity.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,15 +18,27 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.auth;\n \n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n \n-public interface SAML2SPKeystore extends Entity {\n+public interface SAML2IdPEntity extends ProvidedKeyEntity {\n \n-    String getKeystore();\n+    byte[] getMetadata();\n \n-    void setKeystore(String keystore);\n+    void setMetadata(byte[] metadata);\n \n-    String getOwner();\n+    byte[] getSigningCertificate();\n \n-    void setOwner(String owner);\n+    void setSigningCertificate(byte[] signingCertificate);\n+\n+    byte[] getSigningKey();\n+\n+    void setSigningKey(byte[] signingKey);\n+\n+    byte[] getEncryptionCertificate();\n+\n+    void setEncryptionCertificate(byte[] encryptionCertificate);\n+\n+    byte[] getEncryptionKey();\n+\n+    void setEncryptionKey(byte[] encryptionKey);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2SPKeystore.java"},{"sha":"5c7ee2121c4eb100160955e278db9dcbda209c55","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2SPClientApp.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SPClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SPClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SPClientApp.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.common.lib.types.XmlSecAlgorithm;\n \n-public interface SAML2SP extends ClientApp {\n+public interface SAML2SPClientApp extends ClientApp {\n \n     String getEntityId();\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2SP.java"},{"sha":"4bc6bd45f89bb0eb102530dfe6b0d76a54485935","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2SPEntity.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SPEntity.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.auth;\n \n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n \n-public interface SAML2SPMetadata extends Entity {\n+public interface SAML2SPEntity extends ProvidedKeyEntity {\n \n-    String getMetadata();\n+    byte[] getKeystore();\n \n-    void setMetadata(String metadata);\n+    void setKeystore(byte[] keystore);\n \n-    String getOwner();\n+    byte[] getMetadata();\n \n-    void setOwner(String owner);\n+    void setMetadata(byte[] metadata);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2SPMetadata.java"},{"sha":"630509dfea8df8dced83dccc81de232d20aae6b6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPACASSPDAO.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPACASSPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPACASSPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPACASSPDAO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -19,32 +19,32 @@\n package org.apache.syncope.core.persistence.jpa.dao.auth;\n \n import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPACASSP;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPACASSPClientApp;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n \n @Repository\n-public class JPACASSPDAO extends AbstractDAO<CASSP> implements CASSPDAO {\n+public class JPACASSPDAO extends AbstractDAO<CASSPClientApp> implements CASSPDAO {\n \n     @Override\n-    public CASSP find(final String key) {\n-        return entityManager().find(JPACASSP.class, key);\n+    public CASSPClientApp find(final String key) {\n+        return entityManager().find(JPACASSPClientApp.class, key);\n     }\n \n-    private CASSP find(final String column, final Object value) {\n-        TypedQuery<CASSP> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPACASSP.class.getSimpleName() + \" e WHERE e.\" + column + \"=:value\",\n-            CASSP.class);\n+    private CASSPClientApp find(final String column, final Object value) {\n+        TypedQuery<CASSPClientApp> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPACASSPClientApp.class.getSimpleName() + \" e WHERE e.\" + column + \"=:value\",\n+                CASSPClientApp.class);\n         query.setParameter(\"value\", value);\n \n-        CASSP result = null;\n+        CASSPClientApp result = null;\n         try {\n             result = query.getSingleResult();\n         } catch (final NoResultException e) {\n@@ -55,32 +55,32 @@ private CASSP find(final String column, final Object value) {\n     }\n \n     @Override\n-    public CASSP findByClientAppId(final Long clientAppId) {\n+    public CASSPClientApp findByClientAppId(final Long clientAppId) {\n         return find(\"clientAppId\", clientAppId);\n     }\n \n     @Override\n-    public CASSP findByName(final String name) {\n+    public CASSPClientApp findByName(final String name) {\n         return find(\"name\", name);\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n-    public List<CASSP> findAll() {\n-        TypedQuery<CASSP> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPACASSP.class.getSimpleName() + \" e\", CASSP.class);\n+    public List<CASSPClientApp> findAll() {\n+        TypedQuery<CASSPClientApp> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPACASSPClientApp.class.getSimpleName() + \" e\", CASSPClientApp.class);\n \n         return query.getResultList();\n     }\n \n     @Override\n-    public CASSP save(final CASSP clientApp) {\n+    public CASSPClientApp save(final CASSPClientApp clientApp) {\n         return entityManager().merge(clientApp);\n     }\n \n     @Override\n     public void delete(final String key) {\n-        CASSP rpTO = find(key);\n+        CASSPClientApp rpTO = find(key);\n         if (rpTO == null) {\n             return;\n         }\n@@ -89,7 +89,7 @@ public void delete(final String key) {\n     }\n \n     @Override\n-    public void delete(final CASSP clientApp) {\n+    public void delete(final CASSPClientApp clientApp) {\n         entityManager().remove(clientApp);\n     }\n }"},{"sha":"bd528c766934004ec9d76b7ffad0e61d8729436b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAOIDCRPDAO.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCRPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCRPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCRPDAO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -22,27 +22,27 @@\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCRP;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCRPClientApp;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n \n @Repository\n-public class JPAOIDCRPDAO extends AbstractDAO<OIDCRP> implements OIDCRPDAO {\n+public class JPAOIDCRPDAO extends AbstractDAO<OIDCRPClientApp> implements OIDCRPDAO {\n \n     @Override\n-    public OIDCRP find(final String key) {\n-        return entityManager().find(JPAOIDCRP.class, key);\n+    public OIDCRPClientApp find(final String key) {\n+        return entityManager().find(JPAOIDCRPClientApp.class, key);\n     }\n \n-    private OIDCRP find(final String column, final Object value) {\n-        TypedQuery<OIDCRP> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAOIDCRP.class.getSimpleName() + \" e WHERE e.\" + column + \"=:value\",\n-                OIDCRP.class);\n+    private OIDCRPClientApp find(final String column, final Object value) {\n+        TypedQuery<OIDCRPClientApp> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAOIDCRPClientApp.class.getSimpleName() + \" e WHERE e.\" + column + \"=:value\",\n+                OIDCRPClientApp.class);\n         query.setParameter(\"value\", value);\n \n-        OIDCRP result = null;\n+        OIDCRPClientApp result = null;\n         try {\n             result = query.getSingleResult();\n         } catch (final NoResultException e) {\n@@ -53,37 +53,37 @@ private OIDCRP find(final String column, final Object value) {\n     }\n \n     @Override\n-    public OIDCRP findByClientAppId(final Long clientAppId) {\n+    public OIDCRPClientApp findByClientAppId(final Long clientAppId) {\n         return find(\"clientAppId\", clientAppId);\n     }\n \n     @Override\n-    public OIDCRP findByName(final String name) {\n+    public OIDCRPClientApp findByName(final String name) {\n         return find(\"name\", name);\n     }\n \n     @Override\n-    public OIDCRP findByClientId(final String clientId) {\n+    public OIDCRPClientApp findByClientId(final String clientId) {\n         return find(\"clientId\", clientId);\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n-    public List<OIDCRP> findAll() {\n-        TypedQuery<OIDCRP> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAOIDCRP.class.getSimpleName() + \" e\", OIDCRP.class);\n+    public List<OIDCRPClientApp> findAll() {\n+        TypedQuery<OIDCRPClientApp> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAOIDCRPClientApp.class.getSimpleName() + \" e\", OIDCRPClientApp.class);\n \n         return query.getResultList();\n     }\n \n     @Override\n-    public OIDCRP save(final OIDCRP clientApp) {\n+    public OIDCRPClientApp save(final OIDCRPClientApp clientApp) {\n         return entityManager().merge(clientApp);\n     }\n \n     @Override\n     public void delete(final String key) {\n-        OIDCRP rpTO = find(key);\n+        OIDCRPClientApp rpTO = find(key);\n         if (rpTO == null) {\n             return;\n         }\n@@ -93,15 +93,15 @@ public void delete(final String key) {\n \n     @Override\n     public void deleteByClientId(final String clientId) {\n-        OIDCRP rpTO = findByClientId(clientId);\n+        OIDCRPClientApp rpTO = findByClientId(clientId);\n         if (rpTO == null) {\n             return;\n         }\n         delete(rpTO);\n     }\n \n     @Override\n-    public void delete(final OIDCRP clientApp) {\n+    public void delete(final OIDCRPClientApp clientApp) {\n         entityManager().remove(clientApp);\n     }\n }"},{"sha":"f71329301346fb8b7b4fe3678fa1453eb80e67d4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2IdPEntityDAO.java","status":"renamed","additions":14,"deletions":24,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2IdPEntityDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2IdPEntityDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2IdPEntityDAO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,45 +18,35 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao.auth;\n \n-import javax.persistence.NoResultException;\n+import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPMetadataDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2IdPMetadata;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPEntityDAO;\n \n @Repository\n-public class JPASAML2IdPMetadataDAO extends AbstractDAO<SAML2IdPMetadata> implements SAML2IdPMetadataDAO {\n+public class JPASAML2IdPEntityDAO extends AbstractDAO<SAML2IdPEntity> implements SAML2IdPEntityDAO {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public SAML2IdPMetadata find(final String key) {\n-        return entityManager().find(JPASAML2IdPMetadata.class, key);\n+    public SAML2IdPEntity find(final String key) {\n+        return entityManager().find(JPASAML2IdPEntity.class, key);\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n-    public SAML2IdPMetadata findByOwner(final String appliesTo) {\n-        TypedQuery<SAML2IdPMetadata> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPASAML2IdPMetadata.class.getSimpleName() + \" e WHERE e.appliesTo=:appliesTo\",\n-                SAML2IdPMetadata.class);\n-        query.setParameter(\"appliesTo\", appliesTo);\n-\n-        SAML2IdPMetadata result = null;\n-        try {\n-            result = query.getSingleResult();\n-        } catch (final NoResultException e) {\n-            LOG.debug(\"No SAML2 IdP Metadata found with appliesTo = {}\", appliesTo);\n-        }\n-\n-        return result;\n+    public List<SAML2IdPEntity> findAll() {\n+        TypedQuery<SAML2IdPEntity> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPASAML2IdPEntity.class.getSimpleName() + \" e\",\n+                SAML2IdPEntity.class);\n+        return query.getResultList();\n     }\n \n     @Override\n-    public SAML2IdPMetadata save(final SAML2IdPMetadata saml2IdPMetadata) {\n-        return entityManager().merge(saml2IdPMetadata);\n+    public SAML2IdPEntity save(final SAML2IdPEntity saml2IdPEntity) {\n+        return entityManager().merge(saml2IdPEntity);\n     }\n-\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2IdPMetadataDAO.java"},{"sha":"3a2a7a3f5097499fe5f08bebe21f1cab7bc74da7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2SPDAO.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPDAO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -19,30 +19,30 @@\n package org.apache.syncope.core.persistence.jpa.dao.auth;\n \n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SP;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPClientApp;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n \n @Repository\n-public class JPASAML2SPDAO extends AbstractDAO<SAML2SP> implements SAML2SPDAO {\n+public class JPASAML2SPDAO extends AbstractDAO<SAML2SPClientApp> implements SAML2SPDAO {\n \n     @Override\n-    public SAML2SP find(final String key) {\n-        return entityManager().find(JPASAML2SP.class, key);\n+    public SAML2SPClientApp find(final String key) {\n+        return entityManager().find(JPASAML2SPClientApp.class, key);\n     }\n \n-    private SAML2SP find(final String column, final Object value) {\n-        TypedQuery<SAML2SP> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPASAML2SP.class.getSimpleName() + \" e WHERE e.\" + column + \"=:value\",\n-                SAML2SP.class);\n+    private SAML2SPClientApp find(final String column, final Object value) {\n+        TypedQuery<SAML2SPClientApp> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPASAML2SPClientApp.class.getSimpleName() + \" e WHERE e.\" + column + \"=:value\",\n+                SAML2SPClientApp.class);\n         query.setParameter(\"value\", value);\n \n-        SAML2SP result = null;\n+        SAML2SPClientApp result = null;\n         try {\n             result = query.getSingleResult();\n         } catch (final NoResultException e) {\n@@ -53,37 +53,37 @@ private SAML2SP find(final String column, final Object value) {\n     }\n \n     @Override\n-    public SAML2SP findByClientAppId(final Long clientAppId) {\n+    public SAML2SPClientApp findByClientAppId(final Long clientAppId) {\n         return find(\"clientAppId\", clientAppId);\n     }\n \n     @Override\n-    public SAML2SP findByName(final String name) {\n+    public SAML2SPClientApp findByName(final String name) {\n         return find(\"name\", name);\n     }\n \n     @Override\n-    public SAML2SP findByEntityId(final String entityId) {\n+    public SAML2SPClientApp findByEntityId(final String entityId) {\n         return find(\"entityId\", entityId);\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n-    public List<SAML2SP> findAll() {\n-        TypedQuery<SAML2SP> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPASAML2SP.class.getSimpleName() + \" e\", SAML2SP.class);\n+    public List<SAML2SPClientApp> findAll() {\n+        TypedQuery<SAML2SPClientApp> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPASAML2SPClientApp.class.getSimpleName() + \" e\", SAML2SPClientApp.class);\n \n         return query.getResultList();\n     }\n \n     @Override\n-    public SAML2SP save(final SAML2SP clientApp) {\n+    public SAML2SPClientApp save(final SAML2SPClientApp clientApp) {\n         return entityManager().merge(clientApp);\n     }\n \n     @Override\n     public void delete(final String key) {\n-        SAML2SP policy = find(key);\n+        SAML2SPClientApp policy = find(key);\n         if (policy == null) {\n             return;\n         }\n@@ -93,15 +93,15 @@ public void delete(final String key) {\n \n     @Override\n     public void deleteByEntityId(final String entityId) {\n-        SAML2SP app = findByEntityId(entityId);\n+        SAML2SPClientApp app = findByEntityId(entityId);\n         if (app == null) {\n             return;\n         }\n         delete(app);\n     }\n \n     @Override\n-    public void delete(final SAML2SP clientApp) {\n+    public void delete(final SAML2SPClientApp clientApp) {\n         entityManager().remove(clientApp);\n     }\n }"},{"sha":"bc660c10c140c6fbb77d9c4e7260c6de98d8fddc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2SPEntityDAO.java","status":"renamed","additions":18,"deletions":25,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPEntityDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPEntityDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPEntityDAO.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,45 +18,38 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao.auth;\n \n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPKeystoreDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPKeystore;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPEntity;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n-\n-import javax.persistence.NoResultException;\n-import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPEntityDAO;\n \n @Repository\n-public class JPASAML2SPKeystoreDAO extends AbstractDAO<SAML2SPKeystore> implements SAML2SPKeystoreDAO {\n+public class JPASAML2SPEntityDAO extends AbstractDAO<SAML2SPEntity> implements SAML2SPEntityDAO {\n \n-    @Transactional(readOnly = true)\n     @Override\n-    public SAML2SPKeystore find(final String key) {\n-        return entityManager().find(JPASAML2SPKeystore.class, key);\n+    public List<SAML2SPEntity> findAll() {\n+        TypedQuery<SAML2SPEntity> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPASAML2SPEntity.class.getSimpleName() + \" e\", SAML2SPEntity.class);\n+        return query.getResultList();\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n-    public SAML2SPKeystore findByOwner(final String owner) {\n-        TypedQuery<SAML2SPKeystore> query = entityManager().createQuery(\n-            \"SELECT e FROM \" + JPASAML2SPKeystore.class.getSimpleName() + \" e WHERE e.owner=:owner\",\n-            SAML2SPKeystore.class);\n-        query.setParameter(\"owner\", owner);\n-\n-        SAML2SPKeystore result = null;\n-        try {\n-            result = query.getSingleResult();\n-        } catch (final NoResultException e) {\n-            LOG.debug(\"No SAML2 SP Keystore found with appliesTo = {}\", owner);\n-        }\n-        return result;\n+    public SAML2SPEntity find(final String key) {\n+        return entityManager().find(JPASAML2SPEntity.class, key);\n     }\n \n     @Override\n-    public SAML2SPKeystore save(final SAML2SPKeystore saml2IdPMetadata) {\n-        return entityManager().merge(saml2IdPMetadata);\n+    public SAML2SPEntity save(final SAML2SPEntity entity) {\n+        return entityManager().merge(entity);\n     }\n \n+    @Override\n+    public void delete(final SAML2SPEntity entity) {\n+        entityManager().remove(entity);\n+    }\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2SPKeystoreDAO.java"},{"sha":"21ee9bf997de954f7f9c42fef71e957f887ebc34","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2SPMetadataDAO.java","status":"removed","additions":0,"deletions":62,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPMetadataDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPMetadataDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPMetadataDAO.java?ref=c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","patch":"@@ -1,62 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.dao.auth;\n-\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPMetadataDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n-import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPMetadata;\n-import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-import javax.persistence.NoResultException;\n-import javax.persistence.TypedQuery;\n-\n-@Repository\n-public class JPASAML2SPMetadataDAO extends AbstractDAO<SAML2SPMetadata> implements SAML2SPMetadataDAO {\n-\n-    @Transactional(readOnly = true)\n-    @Override\n-    public SAML2SPMetadata find(final String key) {\n-        return entityManager().find(JPASAML2SPMetadata.class, key);\n-    }\n-\n-    @Transactional(readOnly = true)\n-    @Override\n-    public SAML2SPMetadata findByOwner(final String owner) {\n-        TypedQuery<SAML2SPMetadata> query = entityManager().createQuery(\n-            \"SELECT e FROM \" + JPASAML2SPMetadata.class.getSimpleName() + \" e WHERE e.owner=:owner\",\n-            SAML2SPMetadata.class);\n-        query.setParameter(\"owner\", owner);\n-\n-        SAML2SPMetadata result = null;\n-        try {\n-            result = query.getSingleResult();\n-        } catch (final NoResultException e) {\n-            LOG.debug(\"No SAML2 SP Metadata found with appliesTo = {}\", owner);\n-        }\n-        return result;\n-    }\n-\n-    @Override\n-    public SAML2SPMetadata save(final SAML2SPMetadata saml2IdPMetadata) {\n-        return entityManager().merge(saml2IdPMetadata);\n-    }\n-\n-}"},{"sha":"88f04842c062d553ae67e68c32265e760c3de76a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":20,"deletions":24,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -58,13 +58,7 @@\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n@@ -116,12 +110,11 @@\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthProfile;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPACASSP;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPACASSPClientApp;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCJWKS;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCRP;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SP;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPKeystore;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPMetadata;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCRPClientApp;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPClientApp;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPEntity;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAWAConfigEntry;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n@@ -167,8 +160,13 @@\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModule;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModuleItem;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2IdPMetadata;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2IdPEntity;\n import org.apache.syncope.core.persistence.api.entity.SRARoute;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n \n public class JPAEntityFactory implements EntityFactory {\n \n@@ -331,18 +329,16 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAAccessPolicy();\n         } else if (reference.equals(AttrReleasePolicy.class)) {\n             result = (E) new JPAAttrReleasePolicy();\n-        } else if (reference.equals(OIDCRP.class)) {\n-            result = (E) new JPAOIDCRP();\n-        } else if (reference.equals(CASSP.class)) {\n-            result = (E) new JPACASSP();\n-        } else if (reference.equals(SAML2SP.class)) {\n-            result = (E) new JPASAML2SP();\n-        } else if (reference.equals(SAML2IdPMetadata.class)) {\n-            result = (E) new JPASAML2IdPMetadata();\n-        } else if (reference.equals(SAML2SPMetadata.class)) {\n-            result = (E) new JPASAML2SPMetadata();\n-        } else if (reference.equals(SAML2SPKeystore.class)) {\n-            result = (E) new JPASAML2SPKeystore();\n+        } else if (reference.equals(OIDCRPClientApp.class)) {\n+            result = (E) new JPAOIDCRPClientApp();\n+        } else if (reference.equals(CASSPClientApp.class)) {\n+            result = (E) new JPACASSPClientApp();\n+        } else if (reference.equals(SAML2SPClientApp.class)) {\n+            result = (E) new JPASAML2SPClientApp();\n+        } else if (reference.equals(SAML2IdPEntity.class)) {\n+            result = (E) new JPASAML2IdPEntity();\n+        } else if (reference.equals(SAML2SPEntity.class)) {\n+            result = (E) new JPASAML2SPEntity();\n         } else if (reference.equals(AuthProfile.class)) {\n             result = (E) new JPAAuthProfile();\n         } else if (reference.equals(OIDCJWKS.class)) {"},{"sha":"53fdd8dbe8868d80cd065953089b23f6107cc512","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPACASSPClientApp.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPACASSPClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPACASSPClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPACASSPClientApp.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -21,13 +21,13 @@\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n \n @Entity\n-@Table(name = JPACASSP.TABLE)\n-public class JPACASSP extends AbstractClientApp implements CASSP {\n+@Table(name = JPACASSPClientApp.TABLE)\n+public class JPACASSPClientApp extends AbstractClientApp implements CASSPClientApp {\n \n-    public static final String TABLE = \"CASSP\";\n+    public static final String TABLE = \"CASSPClientApp\";\n \n     private static final long serialVersionUID = 6422422526695279794L;\n ","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPACASSP.java"},{"sha":"ff8a77f237d7a3a0e8d2b674e6edb34086fde18f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAClientAppUtils.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtils.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -19,11 +19,11 @@\n package org.apache.syncope.core.persistence.jpa.entity.auth;\n \n import org.apache.syncope.common.lib.types.ClientAppType;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtils;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n \n public class JPAClientAppUtils implements ClientAppUtils {\n \n@@ -42,12 +42,12 @@ public ClientAppType getType() {\n     public Class<? extends ClientApp> clientAppClass() {\n         switch (type) {\n             case OIDCRP:\n-                return OIDCRP.class;\n+                return OIDCRPClientApp.class;\n             case CASSP:\n-                return CASSP.class;\n+                return CASSPClientApp.class;\n             case SAML2SP:\n             default:\n-                return SAML2SP.class;\n+                return SAML2SPClientApp.class;\n         }\n     }\n }"},{"sha":"c27c3083d556a90850f1993be7098c94c1753cb5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAClientAppUtilsFactory.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,18 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.auth;\n \n-import org.apache.syncope.common.lib.to.CASSPTO;\n+import org.apache.syncope.common.lib.to.CASSPClientAppTO;\n import org.apache.syncope.common.lib.to.ClientAppTO;\n-import org.apache.syncope.common.lib.to.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n+import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtils;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n \n @Component\n public class JPAClientAppUtilsFactory implements ClientAppUtilsFactory {\n@@ -42,11 +42,11 @@ public ClientAppUtils getInstance(final ClientAppType type) {\n     @Override\n     public ClientAppUtils getInstance(final ClientApp clientApp) {\n         ClientAppType type;\n-        if (clientApp instanceof SAML2SP) {\n+        if (clientApp instanceof SAML2SPClientApp) {\n             type = ClientAppType.SAML2SP;\n-        } else if (clientApp instanceof CASSP) {\n+        } else if (clientApp instanceof CASSPClientApp) {\n             type = ClientAppType.CASSP;\n-        } else if (clientApp instanceof OIDCRP) {\n+        } else if (clientApp instanceof OIDCRPClientApp) {\n             type = ClientAppType.OIDCRP;\n         } else {\n             throw new IllegalArgumentException(\"Invalid client app: \" + clientApp);\n@@ -58,11 +58,11 @@ public ClientAppUtils getInstance(final ClientApp clientApp) {\n     @Override\n     public ClientAppUtils getInstance(final Class<? extends ClientAppTO> clientAppClass) {\n         ClientAppType type;\n-        if (clientAppClass == SAML2SPTO.class) {\n+        if (clientAppClass == SAML2SPClientAppTO.class) {\n             type = ClientAppType.SAML2SP;\n-        } else if (clientAppClass == CASSPTO.class) {\n+        } else if (clientAppClass == CASSPClientAppTO.class) {\n             type = ClientAppType.CASSP;\n-        } else if (clientAppClass == OIDCRPTO.class) {\n+        } else if (clientAppClass == OIDCRPClientAppTO.class) {\n             type = ClientAppType.OIDCRP;\n         } else {\n             throw new IllegalArgumentException(\"Invalid ClientAppTO app: \" + clientAppClass.getName());"},{"sha":"891a097a4b6c1eacd5f0cec15b519e8fcf8be304","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAOIDCRPClientApp.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRPClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRPClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRPClientApp.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -32,15 +32,15 @@\n import org.apache.syncope.common.lib.types.OIDCGrantType;\n import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n \n @Entity\n-@Table(name = JPAOIDCRP.TABLE)\n-public class JPAOIDCRP extends AbstractClientApp implements OIDCRP {\n+@Table(name = JPAOIDCRPClientApp.TABLE)\n+public class JPAOIDCRPClientApp extends AbstractClientApp implements OIDCRPClientApp {\n \n     private static final long serialVersionUID = 7422422526695279794L;\n \n-    public static final String TABLE = \"OIDCRP\";\n+    public static final String TABLE = \"OIDCRPClientApp\";\n \n     @Column(unique = true, nullable = false)\n     private String clientId;\n@@ -54,23 +54,23 @@ public class JPAOIDCRP extends AbstractClientApp implements OIDCRP {\n \n     @ElementCollection(fetch = FetchType.EAGER)\n     @Column(name = \"redirectUri\")\n-    @CollectionTable(name = \"OIDCRP_RedirectUris\",\n+    @CollectionTable(name = \"OIDCRPClientApp_RedirectUris\",\n             joinColumns =\n             @JoinColumn(name = \"client_id\", referencedColumnName = \"id\"))\n     private Set<String> redirectUris = new HashSet<>();\n \n     @ElementCollection(fetch = FetchType.EAGER)\n     @Enumerated(EnumType.STRING)\n     @Column(name = \"supportedGrantType\")\n-    @CollectionTable(name = \"OIDCRP_SupportedGrantTypes\",\n+    @CollectionTable(name = \"OIDCRPClientApp_SupportedGrantTypes\",\n             joinColumns =\n             @JoinColumn(name = \"client_id\", referencedColumnName = \"id\"))\n     private Set<OIDCGrantType> supportedGrantTypes = new HashSet<>();\n \n     @ElementCollection(fetch = FetchType.EAGER)\n     @Enumerated(EnumType.STRING)\n     @Column(name = \"supportedResponseType\")\n-    @CollectionTable(name = \"OIDCRP_SupportedResponseTypes\",\n+    @CollectionTable(name = \"OIDCRPClientApp_SupportedResponseTypes\",\n             joinColumns =\n             @JoinColumn(name = \"client_id\", referencedColumnName = \"id\"))\n     private Set<OIDCResponseType> supportedResponseTypes = new HashSet<>();","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAOIDCRP.java"},{"sha":"887deb9918d27eddc2ae2c7156056ac5346e3da9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2IdPEntity.java","status":"renamed","additions":27,"deletions":39,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2IdPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2IdPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2IdPEntity.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -22,93 +22,81 @@\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n \n @Entity\n-@Table(name = JPASAML2IdPMetadata.TABLE)\n-public class JPASAML2IdPMetadata extends AbstractGeneratedKeyEntity implements SAML2IdPMetadata {\n+@Table(name = JPASAML2IdPEntity.TABLE)\n+public class JPASAML2IdPEntity extends AbstractProvidedKeyEntity implements SAML2IdPEntity {\n \n-    public static final String TABLE = \"SAML2IdPMetadata\";\n+    public static final String TABLE = \"SAML2IdPEntity\";\n \n     private static final long serialVersionUID = 57352617217394093L;\n \n-    @Column(unique = true)\n-    private String appliesTo;\n-\n+    @Column(nullable = true)\n     @Lob\n-    private String metadata;\n+    private byte[] metadata;\n \n     @Lob\n-    private String signingCertificate;\n+    private byte[] signingCertificate;\n \n     @Lob\n-    private String signingKey;\n+    private byte[] signingKey;\n \n     @Lob\n-    private String encryptionCertificate;\n+    private byte[] encryptionCertificate;\n \n     @Lob\n-    private String encryptionKey;\n+    private byte[] encryptionKey;\n \n     @Override\n-    public String getMetadata() {\n+    public byte[] getMetadata() {\n         return metadata;\n     }\n \n     @Override\n-    public void setMetadata(final String metadata) {\n-        this.metadata = metadata;\n+    public void setMetadata(final byte[] metadata) {\n+        this.metadata = ArrayUtils.clone(metadata);\n     }\n \n     @Override\n-    public String getSigningCertificate() {\n+    public byte[] getSigningCertificate() {\n         return signingCertificate;\n     }\n \n     @Override\n-    public void setSigningCertificate(final String signingCertificate) {\n-        this.signingCertificate = signingCertificate;\n+    public void setSigningCertificate(final byte[] signingCertificate) {\n+        this.signingCertificate = ArrayUtils.clone(signingCertificate);\n     }\n \n     @Override\n-    public String getSigningKey() {\n+    public byte[] getSigningKey() {\n         return signingKey;\n     }\n \n     @Override\n-    public void setSigningKey(final String signingKey) {\n-        this.signingKey = signingKey;\n+    public void setSigningKey(final byte[] signingKey) {\n+        this.signingKey = ArrayUtils.clone(signingKey);\n     }\n \n     @Override\n-    public String getEncryptionCertificate() {\n+    public byte[] getEncryptionCertificate() {\n         return encryptionCertificate;\n     }\n \n     @Override\n-    public void setEncryptionCertificate(final String encryptionCertificate) {\n-        this.encryptionCertificate = encryptionCertificate;\n+    public void setEncryptionCertificate(final byte[] encryptionCertificate) {\n+        this.encryptionCertificate = ArrayUtils.clone(encryptionCertificate);\n     }\n \n     @Override\n-    public String getEncryptionKey() {\n+    public byte[] getEncryptionKey() {\n         return encryptionKey;\n     }\n \n     @Override\n-    public void setEncryptionKey(final String encryptionKey) {\n-        this.encryptionKey = encryptionKey;\n-    }\n-\n-    @Override\n-    public String getAppliesTo() {\n-        return appliesTo;\n+    public void setEncryptionKey(final byte[] encryptionKey) {\n+        this.encryptionKey = ArrayUtils.clone(encryptionKey);\n     }\n-\n-    @Override\n-    public void setAppliesTo(final String appliesTo) {\n-        this.appliesTo = appliesTo;\n-    }\n-\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2IdPMetadata.java"},{"sha":"b066c5d581c3293c43c065b8263f8ef871546c9d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SPClientApp.java","status":"renamed","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPClientApp.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -30,14 +30,14 @@\n import javax.persistence.JoinColumn;\n import javax.persistence.Table;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n import org.apache.syncope.common.lib.types.XmlSecAlgorithm;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n \n @Entity\n-@Table(name = JPASAML2SP.TABLE)\n-public class JPASAML2SP extends AbstractClientApp implements SAML2SP {\n+@Table(name = JPASAML2SPClientApp.TABLE)\n+public class JPASAML2SPClientApp extends AbstractClientApp implements SAML2SPClientApp {\n \n-    public static final String TABLE = \"SAML2SP\";\n+    public static final String TABLE = \"SAML2SPClientApp\";\n \n     private static final long serialVersionUID = 6422422526695279794L;\n \n@@ -68,7 +68,7 @@ public class JPASAML2SP extends AbstractClientApp implements SAML2SP {\n \n     @ElementCollection(fetch = FetchType.EAGER)\n     @Column(name = \"assertionAudience\")\n-    @CollectionTable(name = \"SAML2SP_AssertionAudiences\",\n+    @CollectionTable(name = \"SAML2SPClientApp_AssertionAudiences\",\n             joinColumns =\n             @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n     private Set<String> assertionAudiences = new HashSet<>();\n@@ -78,42 +78,42 @@ public class JPASAML2SP extends AbstractClientApp implements SAML2SP {\n \n     @ElementCollection(fetch = FetchType.EAGER)\n     @Column(name = \"signingSignatureAlgorithm\")\n-    @CollectionTable(name = \"SAML2SP_SigningSignatureAlgs\",\n+    @CollectionTable(name = \"SAML2SPClientApp_SigningSignatureAlgs\",\n             joinColumns =\n             @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n     private List<XmlSecAlgorithm> signingSignatureAlgorithms = new ArrayList<>();\n \n     @ElementCollection(fetch = FetchType.EAGER)\n     @Column(name = \"signingSignatureReferenceDigestMethod\")\n-    @CollectionTable(name = \"SAML2SP_SigningSignatureRefDigestAlgs\",\n+    @CollectionTable(name = \"SAML2SPClientApp_SigningSignatureRefDigestAlgs\",\n             joinColumns =\n             @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n     private List<XmlSecAlgorithm> signingSignatureReferenceDigestMethods = new ArrayList<>();\n \n     @ElementCollection(fetch = FetchType.EAGER)\n     @Column(name = \"encryptionDataAlgorithm\")\n-    @CollectionTable(name = \"SAML2SP_EncryptionDataAlgs\",\n+    @CollectionTable(name = \"SAML2SPClientApp_EncryptionDataAlgs\",\n             joinColumns =\n             @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n     private List<XmlSecAlgorithm> encryptionDataAlgorithms = new ArrayList<>();\n \n     @ElementCollection(fetch = FetchType.EAGER)\n     @Column(name = \"encryptionKeyAlgorithm\")\n-    @CollectionTable(name = \"SAML2SP_EncryptionKeyAlgs\",\n+    @CollectionTable(name = \"SAML2SPClientApp_EncryptionKeyAlgs\",\n             joinColumns =\n             @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n     private List<XmlSecAlgorithm> encryptionKeyAlgorithms = new ArrayList<>();\n \n     @ElementCollection(fetch = FetchType.EAGER)\n     @Column(name = \"signingSignatureBlackListedAlgorithm\")\n-    @CollectionTable(name = \"SAML2SP_BlacklistedSigningAlgs\",\n+    @CollectionTable(name = \"SAML2SPClientApp_BlacklistedSigningAlgs\",\n             joinColumns =\n             @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n     private List<XmlSecAlgorithm> signingSignatureBlackListedAlgorithms = new ArrayList<>();\n \n     @ElementCollection(fetch = FetchType.EAGER)\n     @Column(name = \"encryptionBlackListedAlgorithm\")\n-    @CollectionTable(name = \"SAML2SP_BlacklistedEncryptionAlgs\",\n+    @CollectionTable(name = \"SAML2SPClientApp_BlacklistedEncryptionAlgs\",\n             joinColumns =\n             @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n     private List<XmlSecAlgorithm> encryptionBlackListedAlgorithms = new ArrayList<>();","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SP.java"},{"sha":"27c84ead6a3c02b3d25ef67a8a67bafe7507c690","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SPEntity.java","status":"renamed","additions":19,"deletions":16,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPEntity.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -22,40 +22,43 @@\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n \n @Entity\n-@Table(name = JPASAML2SPMetadata.TABLE)\n-public class JPASAML2SPMetadata extends AbstractGeneratedKeyEntity implements SAML2SPMetadata {\n+@Table(name = JPASAML2SPEntity.TABLE)\n+public class JPASAML2SPEntity extends AbstractProvidedKeyEntity implements SAML2SPEntity {\n \n-    public static final String TABLE = \"SAML2SPMetadata\";\n+    public static final String TABLE = \"SAML2SPEntity\";\n \n     private static final long serialVersionUID = 12342617217394093L;\n \n-    @Column(unique = true)\n-    private String owner;\n+    @Column(nullable = true)\n+    @Lob\n+    private byte[] keystore;\n \n+    @Column(nullable = true)\n     @Lob\n-    private String metadata;\n+    private byte[] metadata;\n \n     @Override\n-    public String getMetadata() {\n-        return metadata;\n+    public byte[] getKeystore() {\n+        return keystore;\n     }\n \n     @Override\n-    public void setMetadata(final String metadata) {\n-        this.metadata = metadata;\n+    public void setKeystore(final byte[] keystore) {\n+        this.keystore = ArrayUtils.clone(keystore);\n     }\n \n     @Override\n-    public String getOwner() {\n-        return owner;\n+    public byte[] getMetadata() {\n+        return metadata;\n     }\n \n     @Override\n-    public void setOwner(final String name) {\n-        this.owner = name;\n+    public void setMetadata(final byte[] metadata) {\n+        this.metadata = ArrayUtils.clone(metadata);\n     }\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SPMetadata.java"},{"sha":"5cefe7e591eee1d8dbdbef155751a081aef0e89f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SPKeystore.java","status":"removed","additions":0,"deletions":61,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPKeystore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPKeystore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPKeystore.java?ref=c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","patch":"@@ -1,61 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.auth;\n-\n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.Lob;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n-\n-@Entity\n-@Table(name = JPASAML2SPKeystore.TABLE)\n-public class JPASAML2SPKeystore extends AbstractGeneratedKeyEntity implements SAML2SPKeystore {\n-\n-    public static final String TABLE = \"SAML2SPKeystore\";\n-\n-    private static final long serialVersionUID = 22342617217394093L;\n-\n-    @Column(unique = true)\n-    private String owner;\n-\n-    @Lob\n-    private String keystore;\n-\n-    @Override\n-    public String getKeystore() {\n-        return keystore;\n-    }\n-\n-    @Override\n-    public void setKeystore(final String keystore) {\n-        this.keystore = keystore;\n-    }\n-\n-    @Override\n-    public String getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final String name) {\n-        this.owner = name;\n-    }\n-}"},{"sha":"22e9e77ad0bac7a1411fece50b91ca7ec5ee6532","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthProfileTest.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -27,7 +27,6 @@\n import java.util.Optional;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n-\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n@@ -174,11 +173,8 @@ public void impersonationAccounts() {\n         assertTrue(result.isPresent());\n \n         List<ImpersonationAccount> accounts = IntStream.range(1, 10).\n-            mapToObj(i -> new ImpersonationAccount.Builder()\n-                .owner(\"impersonator\")\n-                .key(\"impersonatee\" + i)\n-                .build()).\n-            collect(Collectors.toList());\n+                mapToObj(i -> new ImpersonationAccount.Builder().impersonated(\"impersonatee\" + i).build()).\n+                collect(Collectors.toList());\n \n         authProfile.setImpersonationAccounts(accounts);\n         authProfile = authProfileDAO.save(authProfile);"},{"sha":"1dbf14fe73278b99be3aaae57b741928a9c5e6b1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/CASSPTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FCASSPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FCASSPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FCASSPTest.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.inner;\n \n import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.junit.jupiter.api.Test;\n@@ -32,6 +31,8 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n+import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n+\n @Transactional(\"Master\")\n public class CASSPTest extends AbstractClientAppTest {\n \n@@ -42,7 +43,7 @@ public class CASSPTest extends AbstractClientAppTest {\n     public void find() {\n         int beforeCount = casspDAO.findAll().size();\n \n-        CASSP rp = entityFactory.newEntity(CASSP.class);\n+        CASSPClientApp rp = entityFactory.newEntity(CASSPClientApp.class);\n         rp.setName(\"CAS\");\n         rp.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n         rp.setDescription(\"This is a sample CAS RP\");"},{"sha":"6207ae3f96637c9a2c4f46ba6e84b59e36927991","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/OIDCRPTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -27,12 +27,12 @@\n import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n \n @Transactional(\"Master\")\n public class OIDCRPTest extends AbstractClientAppTest {\n@@ -44,7 +44,7 @@ public class OIDCRPTest extends AbstractClientAppTest {\n     public void find() {\n         int beforeCount = oidcrpDAO.findAll().size();\n \n-        OIDCRP rp = entityFactory.newEntity(OIDCRP.class);\n+        OIDCRPClientApp rp = entityFactory.newEntity(OIDCRPClientApp.class);\n         rp.setName(\"OIDC\");\n         rp.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n         rp.setDescription(\"This is a sample OIDC RP\");"},{"sha":"48bdeab795c4441665088ead9207a6ff5824028c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2IdPEntityTest.java","status":"renamed","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2IdPEntityTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2IdPEntityTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2IdPEntityTest.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -22,28 +22,29 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n+import java.nio.charset.StandardCharsets;\n import java.util.UUID;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPMetadataDAO;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPEntityDAO;\n \n @Transactional(\"Master\")\n-public class SAML2IdPMetadataTest extends AbstractTest {\n+public class SAML2IdPEntityTest extends AbstractTest {\n \n     @Autowired\n-    private SAML2IdPMetadataDAO saml2IdPMetadataDAO;\n+    private SAML2IdPEntityDAO saml2IdPEntityDAO;\n \n     @Test\n     public void find() {\n         create(\"Syncope\");\n-        SAML2IdPMetadata saml2IdPMetadata = saml2IdPMetadataDAO.findByOwner(\"Syncope\");\n-        assertNotNull(saml2IdPMetadata);\n+        SAML2IdPEntity entity = saml2IdPEntityDAO.find(\"Syncope\");\n+        assertNotNull(entity);\n \n-        saml2IdPMetadata = saml2IdPMetadataDAO.findByOwner(UUID.randomUUID().toString());\n-        assertNull(saml2IdPMetadata);\n+        entity = saml2IdPEntityDAO.find(UUID.randomUUID().toString());\n+        assertNull(entity);\n     }\n \n     @Test\n@@ -53,32 +54,31 @@ public void save() {\n \n     @Test\n     public void update() {\n-        SAML2IdPMetadata saml2IdPMetadata = create(\"SyncopeUpdate\");\n-        assertNotNull(saml2IdPMetadata);\n-        saml2IdPMetadata.setAppliesTo(\"OtherSyncope\");\n+        SAML2IdPEntity entity = create(\"SyncopeUpdate\");\n+        assertNotNull(entity);\n+        entity.setKey(\"OtherSyncope\");\n \n-        saml2IdPMetadata = saml2IdPMetadataDAO.save(saml2IdPMetadata);\n-        assertNotNull(saml2IdPMetadata);\n-        assertNotNull(saml2IdPMetadata.getKey());\n-        SAML2IdPMetadata found = saml2IdPMetadataDAO.findByOwner(saml2IdPMetadata.getAppliesTo());\n+        entity = saml2IdPEntityDAO.save(entity);\n+        assertNotNull(entity);\n+        assertNotNull(entity.getKey());\n+        SAML2IdPEntity found = saml2IdPEntityDAO.find(entity.getKey());\n         assertNotNull(found);\n-        assertEquals(\"OtherSyncope\", found.getAppliesTo());\n+        assertEquals(\"OtherSyncope\", found.getKey());\n     }\n \n-    private SAML2IdPMetadata create(final String appliesTo) {\n-        SAML2IdPMetadata saml2IdPMetadata = entityFactory.newEntity(SAML2IdPMetadata.class);\n-        saml2IdPMetadata.setAppliesTo(appliesTo);\n-        saml2IdPMetadata.setMetadata(\"metadata\");\n-        saml2IdPMetadata.setEncryptionCertificate(\"encryptionCert\");\n-        saml2IdPMetadata.setEncryptionKey(\"encryptionKey\");\n-        saml2IdPMetadata.setSigningCertificate(\"signatureCert\");\n-        saml2IdPMetadata.setSigningKey(\"signatureKey\");\n-        saml2IdPMetadataDAO.save(saml2IdPMetadata);\n-        assertNotNull(saml2IdPMetadata);\n-        assertNotNull(saml2IdPMetadata.getKey());\n-        assertNotNull(saml2IdPMetadataDAO.findByOwner(saml2IdPMetadata.getAppliesTo()));\n+    private SAML2IdPEntity create(final String owner) {\n+        SAML2IdPEntity entity = entityFactory.newEntity(SAML2IdPEntity.class);\n+        entity.setKey(owner);\n+        entity.setMetadata(\"metadata\".getBytes(StandardCharsets.UTF_8));\n+        entity.setEncryptionCertificate(\"encryptionCert\".getBytes(StandardCharsets.UTF_8));\n+        entity.setEncryptionKey(\"encryptionKey\".getBytes(StandardCharsets.UTF_8));\n+        entity.setSigningCertificate(\"signatureCert\".getBytes(StandardCharsets.UTF_8));\n+        entity.setSigningKey(\"signatureKey\".getBytes(StandardCharsets.UTF_8));\n+        saml2IdPEntityDAO.save(entity);\n+        assertNotNull(entity);\n+        assertNotNull(entity.getKey());\n+        assertNotNull(saml2IdPEntityDAO.find(entity.getKey()));\n \n-        return saml2IdPMetadata;\n+        return entity;\n     }\n-\n }","previous_filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2IdPMetadataTest.java"},{"sha":"9067f12f455396dc6c24c6a5323a763f8f7093be","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2SPEntityTest.java","status":"renamed","additions":67,"deletions":63,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPEntityTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPEntityTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPEntityTest.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,9 +18,30 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPKeystoreDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.math.BigInteger;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.util.Date;\n+import java.util.UUID;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.tika.io.IOUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPEntityDAO;\n import org.bouncycastle.asn1.ASN1EncodableVector;\n import org.bouncycastle.asn1.ASN1Encoding;\n import org.bouncycastle.asn1.ASN1Integer;\n@@ -34,103 +55,87 @@\n import org.bouncycastle.asn1.x509.TBSCertificate;\n import org.bouncycastle.asn1.x509.Time;\n import org.bouncycastle.asn1.x509.V3TBSCertificateGenerator;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.math.BigInteger;\n-import java.security.KeyPair;\n-import java.security.KeyPairGenerator;\n-import java.security.KeyStore;\n-import java.security.Signature;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n-import java.util.Base64;\n-import java.util.Date;\n-import java.util.UUID;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n \n @Transactional(\"Master\")\n-public class SAML2SPKeystoreTest extends AbstractTest {\n-\n-    @Autowired\n-    private SAML2SPKeystoreDAO saml2SPKeystoreDAO;\n+public class SAML2SPEntityTest extends AbstractTest {\n \n     private static Certificate createSelfSignedCert(final KeyPair keyPair) throws Exception {\n-        final X500Name dn = new X500Name(\"cn=Unknown\");\n-        final V3TBSCertificateGenerator certGen = new V3TBSCertificateGenerator();\n+        X500Name dn = new X500Name(\"cn=Unknown\");\n+        V3TBSCertificateGenerator certGen = new V3TBSCertificateGenerator();\n \n         certGen.setSerialNumber(new ASN1Integer(BigInteger.valueOf(1)));\n         certGen.setIssuer(dn);\n         certGen.setSubject(dn);\n         certGen.setStartDate(new Time(new Date(System.currentTimeMillis() - 1000L)));\n \n-        final Date expiration = new Date(System.currentTimeMillis() + 100000);\n+        Date expiration = new Date(System.currentTimeMillis() + 100000);\n         certGen.setEndDate(new Time(expiration));\n \n-        final AlgorithmIdentifier sigAlgID = new AlgorithmIdentifier(PKCSObjectIdentifiers.sha1WithRSAEncryption, DERNull.INSTANCE);\n+        AlgorithmIdentifier sigAlgID = new AlgorithmIdentifier(\n+                PKCSObjectIdentifiers.sha1WithRSAEncryption, DERNull.INSTANCE);\n         certGen.setSignature(sigAlgID);\n         certGen.setSubjectPublicKeyInfo(SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded()));\n \n-        final Signature sig = Signature.getInstance(\"SHA1WithRSA\");\n+        Signature sig = Signature.getInstance(\"SHA1WithRSA\");\n         sig.initSign(keyPair.getPrivate());\n         sig.update(certGen.generateTBSCertificate().getEncoded(ASN1Encoding.DER));\n \n-        final TBSCertificate tbsCert = certGen.generateTBSCertificate();\n-        final ASN1EncodableVector v = new ASN1EncodableVector();\n+        TBSCertificate tbsCert = certGen.generateTBSCertificate();\n+        ASN1EncodableVector v = new ASN1EncodableVector();\n \n         v.add(tbsCert);\n         v.add(sigAlgID);\n         v.add(new DERBitString(sig.sign()));\n \n-        final Certificate cert = CertificateFactory.getInstance(\"X.509\")\n-            .generateCertificate(new ByteArrayInputStream(new DERSequence(v).getEncoded(ASN1Encoding.DER)));\n+        Certificate cert = CertificateFactory.getInstance(\"X.509\").\n+                generateCertificate(new ByteArrayInputStream(new DERSequence(v).getEncoded(ASN1Encoding.DER)));\n         cert.verify(keyPair.getPublic());\n         return cert;\n     }\n \n+    @Autowired\n+    private SAML2SPEntityDAO saml2SPEntityDAO;\n+\n     @Test\n     public void find() throws Exception {\n         create(\"Syncope\");\n-        SAML2SPKeystore saml2SPKeystore = saml2SPKeystoreDAO.findByOwner(\"Syncope\");\n-        assertNotNull(saml2SPKeystore);\n+        SAML2SPEntity entity = saml2SPEntityDAO.find(\"Syncope\");\n+        assertNotNull(entity);\n \n-        saml2SPKeystore = saml2SPKeystoreDAO.findByOwner(UUID.randomUUID().toString());\n-        assertNull(saml2SPKeystore);\n+        entity = saml2SPEntityDAO.find(UUID.randomUUID().toString());\n+        assertNull(entity);\n     }\n \n     @Test\n     public void save() throws Exception {\n-        final SAML2SPKeystore keystore = create(\"SyncopeCreate\");\n-        final KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n+        SAML2SPEntity created = create(\"SyncopeCreate\");\n+\n+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n         char[] pwdArray = \"password\".toCharArray();\n-        ks.load(new ByteArrayInputStream(Base64.getDecoder().decode(keystore.getKeystore())), pwdArray);\n+        ks.load(new ByteArrayInputStream(created.getKeystore()), pwdArray);\n         assertTrue(ks.size() > 0);\n     }\n \n     @Test\n     public void update() throws Exception {\n-        SAML2SPKeystore saml2SPKeystore = create(\"SyncopeUpdate\");\n-        assertNotNull(saml2SPKeystore);\n-        saml2SPKeystore.setOwner(\"OtherSyncope\");\n-\n-        saml2SPKeystore = saml2SPKeystoreDAO.save(saml2SPKeystore);\n-        assertNotNull(saml2SPKeystore);\n-        assertNotNull(saml2SPKeystore.getKey());\n-        SAML2SPKeystore found = saml2SPKeystoreDAO.findByOwner(saml2SPKeystore.getOwner());\n+        SAML2SPEntity entity = create(\"SyncopeUpdate\");\n+        assertNotNull(entity);\n+        entity.setKey(\"OtherSyncope\");\n+\n+        entity = saml2SPEntityDAO.save(entity);\n+        assertNotNull(entity);\n+\n+        entityManager().flush();\n+\n+        SAML2SPEntity found = saml2SPEntityDAO.find(entity.getKey());\n         assertNotNull(found);\n-        assertEquals(\"OtherSyncope\", found.getOwner());\n+        assertEquals(\"OtherSyncope\", found.getKey());\n     }\n \n-    private SAML2SPKeystore create(final String owner) throws Exception {\n-        final SAML2SPKeystore saml2SPKeystore = entityFactory.newEntity(SAML2SPKeystore.class);\n-        saml2SPKeystore.setOwner(owner);\n+    private SAML2SPEntity create(final String owner) throws Exception {\n+        SAML2SPEntity entity = entityFactory.newEntity(SAML2SPEntity.class);\n+        entity.setKey(owner);\n+        entity.setMetadata(IOUtils.toByteArray(new ClassPathResource(\"sp-metadata.xml\").getInputStream()));\n \n         KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n         char[] pwdArray = \"password\".toCharArray();\n@@ -140,18 +145,17 @@ private SAML2SPKeystore create(final String owner) throws Exception {\n         keyPairGenerator.initialize(4096);\n         KeyPair keyPair = keyPairGenerator.generateKeyPair();\n         Certificate certificate = createSelfSignedCert(keyPair);\n-        ks.setKeyEntry(\"main\", keyPair.getPrivate(), \"password\".toCharArray(), new Certificate[]{certificate});\n+        ks.setKeyEntry(\"main\", keyPair.getPrivate(), \"password\".toCharArray(), new Certificate[] { certificate });\n \n         try (ByteArrayOutputStream fos = new ByteArrayOutputStream()) {\n             ks.store(fos, pwdArray);\n             fos.flush();\n-            String keystore = Base64.getEncoder().encodeToString(fos.toByteArray());\n-            saml2SPKeystore.setKeystore(keystore);\n+            entity.setKeystore(fos.toByteArray());\n         }\n-        saml2SPKeystoreDAO.save(saml2SPKeystore);\n-        assertNotNull(saml2SPKeystore);\n-        assertNotNull(saml2SPKeystore.getKey());\n-        assertNotNull(saml2SPKeystoreDAO.findByOwner(saml2SPKeystore.getOwner()));\n-        return saml2SPKeystore;\n+        assertNotNull(entity.getKeystore());\n+\n+        entity = saml2SPEntityDAO.save(entity);\n+        assertNotNull(saml2SPEntityDAO.find(entity.getKey()));\n+        return entity;\n     }\n }","previous_filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2SPKeystoreTest.java"},{"sha":"f6cbeae9acfd8a75fc2548be801d5d7eb42cb4d1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2SPMetadataTest.java","status":"removed","additions":0,"deletions":83,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPMetadataTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPMetadataTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPMetadataTest.java?ref=c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","patch":"@@ -1,83 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.inner;\n-\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPMetadataDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n-import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.apache.tika.io.IOUtils;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.core.io.ClassPathResource;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-import java.util.UUID;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-\n-@Transactional(\"Master\")\n-public class SAML2SPMetadataTest extends AbstractTest {\n-\n-    @Autowired\n-    private SAML2SPMetadataDAO saml2SPMetadataDAO;\n-\n-    @Test\n-    public void find() throws Exception {\n-        create(\"Syncope\");\n-        SAML2SPMetadata saml2SPMetadata = saml2SPMetadataDAO.findByOwner(\"Syncope\");\n-        assertNotNull(saml2SPMetadata);\n-\n-        saml2SPMetadata = saml2SPMetadataDAO.findByOwner(UUID.randomUUID().toString());\n-        assertNull(saml2SPMetadata);\n-    }\n-\n-    @Test\n-    public void save() throws Exception {\n-        create(\"SyncopeCreate\");\n-    }\n-\n-    @Test\n-    public void update() throws Exception {\n-        SAML2SPMetadata saml2SPMetadata = create(\"SyncopeUpdate\");\n-        assertNotNull(saml2SPMetadata);\n-        saml2SPMetadata.setOwner(\"OtherSyncope\");\n-\n-        saml2SPMetadata = saml2SPMetadataDAO.save(saml2SPMetadata);\n-        assertNotNull(saml2SPMetadata);\n-        assertNotNull(saml2SPMetadata.getKey());\n-        SAML2SPMetadata found = saml2SPMetadataDAO.findByOwner(saml2SPMetadata.getOwner());\n-        assertNotNull(found);\n-        assertEquals(\"OtherSyncope\", found.getOwner());\n-    }\n-\n-    private SAML2SPMetadata create(final String owner) throws Exception {\n-        SAML2SPMetadata saml2SPMetadata = entityFactory.newEntity(SAML2SPMetadata.class);\n-        saml2SPMetadata.setOwner(owner);\n-        String metadata = IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream());\n-        saml2SPMetadata.setMetadata(metadata);\n-        saml2SPMetadataDAO.save(saml2SPMetadata);\n-        assertNotNull(saml2SPMetadata);\n-        assertNotNull(saml2SPMetadata.getKey());\n-        assertNotNull(saml2SPMetadataDAO.findByOwner(saml2SPMetadata.getOwner()));\n-        return saml2SPMetadata;\n-    }\n-\n-}"},{"sha":"7f77bcb94ce0eabd3cfd94d4f1842bb891234b30","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2SPTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -27,12 +27,12 @@\n import org.apache.syncope.common.lib.types.XmlSecAlgorithm;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n \n @Transactional(\"Master\")\n public class SAML2SPTest extends AbstractClientAppTest {\n@@ -43,7 +43,7 @@ public class SAML2SPTest extends AbstractClientAppTest {\n     @Test\n     public void find() {\n         int beforeCount = saml2spDAO.findAll().size();\n-        SAML2SP sp = entityFactory.newEntity(SAML2SP.class);\n+        SAML2SPClientApp sp = entityFactory.newEntity(SAML2SPClientApp.class);\n         sp.setName(\"SAML2\");\n         sp.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n         sp.setDescription(\"This is a sample SAML2 SP\");"},{"sha":"98473d6307f05424f1d3932f2338c2ef0798a0da","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PolicyTest.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPolicyTest.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -31,13 +31,14 @@\n import javax.persistence.PersistenceException;\n import java.util.UUID;\n import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n \n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n+\n @Transactional(\"Master\")\n public class PolicyTest extends AbstractClientAppTest {\n \n@@ -54,7 +55,7 @@ public void policyCannotBeRemovedForApps() {\n         AuthPolicy authPolicy = buildAndSaveAuthPolicy();\n \n         // Create new client app and assign policy\n-        OIDCRP rp = entityFactory.newEntity(OIDCRP.class);\n+        OIDCRPClientApp rp = entityFactory.newEntity(OIDCRPClientApp.class);\n         rp.setName(\"OIDC\");\n         rp.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n         rp.setDescription(\"This is a sample OIDC RP\");\n@@ -82,7 +83,7 @@ public void authPolicyCanBeNull() {\n         assertNotNull(realm);\n \n         // Create new client app and assign policy\n-        OIDCRP rp = entityFactory.newEntity(OIDCRP.class);\n+        OIDCRPClientApp rp = entityFactory.newEntity(OIDCRPClientApp.class);\n         rp.setName(\"OIDC\");\n         rp.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n         rp.setDescription(\"This is a sample OIDC RP\");"},{"sha":"b3fc14ea8978f6d630daf90931327ddcfeba073d","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -72,7 +72,7 @@ under the License.\n   <AuthModule id=\"DefaultOIDCAuthModule\"\n               description=\"OIDC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"discoveryUri\":\"https://accounts.google.com/.well-known/openid-configuration\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n   <AuthModule id=\"DefaultSAML2IdPAuthModule\"\n-              description=\"SAML2 IdP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"keystorePassword\":\"p@$$word\",\"privateKeyPassword\":\"p@$$word\",\"identityProviderMetadataPath\":\"classpath:/idp-metadata.xml\", \"serviceProviderEntityId\":\"syncope:apache:org\"}'/>\n+              description=\"SAML2 IdP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"keystorePassword\":\"p@$$word\",\"privateKeyPassword\":\"p@$$word\",\"identityProviderMetadataPath\":\"http://localhost:9080/syncope-wa/idp/metadata\", \"serviceProviderEntityId\":\"syncope:apache:org\"}'/>\n   <AuthModule id=\"DefaultJaasAuthModule\"\n               description=\"Jaas auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JaasAuthModuleConf\",\"realm\":\"SYNCOPE\",\"kerberosRealmSystemProperty\":\"sample-value\", \"loginConfigType\": \"JavaLoginConfig\", \"loginConfigurationFile\": \"file:/etc/jaas/login.conf\"}'/>\n   <AuthModule id=\"DefaultStaticAuthModule\""},{"sha":"4a5bddfc2fdcaac06a2115ebe735961e31ac81e2","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2IdPEntityDataBinder.java","status":"renamed","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPEntityDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPEntityDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPEntityDataBinder.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,15 +18,14 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n+import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n \n-public interface SAML2SPKeystoreBinder {\n+public interface SAML2IdPEntityDataBinder {\n \n-    SAML2SPKeystore create(SAML2SPKeystoreTO keystoreTO);\n+    SAML2IdPEntity create(SAML2IdPEntityTO entityTO);\n \n-    SAML2SPKeystore update(SAML2SPKeystore keystore, SAML2SPKeystoreTO keystoreTO);\n-\n-    SAML2SPKeystoreTO getSAML2SPKeystoreTO(SAML2SPKeystore keystore);\n+    SAML2IdPEntity update(SAML2IdPEntity entity, SAML2IdPEntityTO entityTO);\n \n+    SAML2IdPEntityTO getSAML2IdPEntityTO(SAML2IdPEntity entity);\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2SPKeystoreBinder.java"},{"sha":"3cabfbbff627891169cf331fb2a3a232264b4256","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2IdPMetadataDataBinder.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPMetadataDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPMetadataDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPMetadataDataBinder.java?ref=c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","patch":"@@ -1,32 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.api.data;\n-\n-import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n-\n-public interface SAML2IdPMetadataDataBinder {\n-\n-    SAML2IdPMetadata create(SAML2IdPMetadataTO saml2IdPMetadataTO);\n-\n-    SAML2IdPMetadata update(SAML2IdPMetadata saml2IdPMetadata, SAML2IdPMetadataTO saml2IdPMetadataTO);\n-\n-    SAML2IdPMetadataTO getSAML2IdPMetadataTO(SAML2IdPMetadata saml2IdPMetadata);\n-\n-}"},{"sha":"450acb5ee2f55b58cf56415211fc9aa02fa16544","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2SPEntityDataBinder.java","status":"renamed","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SPEntityDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SPEntityDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SPEntityDataBinder.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,15 +18,14 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n \n-public interface SAML2SPMetadataBinder {\n+public interface SAML2SPEntityDataBinder {\n \n-    SAML2SPMetadata create(SAML2SPMetadataTO metadataTO);\n+    SAML2SPEntity create(SAML2SPEntityTO entityTO);\n \n-    SAML2SPMetadata update(SAML2SPMetadata metadata, SAML2SPMetadataTO metadataTO);\n-\n-    SAML2SPMetadataTO getSAML2SPMetadataTO(SAML2SPMetadata metadata);\n+    SAML2SPEntity update(SAML2SPEntity entity, SAML2SPEntityTO entityTO);\n \n+    SAML2SPEntityTO getSAML2SPEntityTO(SAML2SPEntity entity);\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2SPMetadataBinder.java"},{"sha":"9ccbf91723898370b9a30e6f3d7d77d8a792dfd6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ClientAppDataBinderImpl.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -19,24 +19,24 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.CASSPTO;\n+import org.apache.syncope.common.lib.to.CASSPClientAppTO;\n import org.apache.syncope.common.lib.to.ClientAppTO;\n-import org.apache.syncope.common.lib.to.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n+import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n \n @Component\n public class ClientAppDataBinderImpl implements ClientAppDataBinder {\n@@ -50,25 +50,25 @@ public class ClientAppDataBinderImpl implements ClientAppDataBinder {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T extends ClientApp> T create(final ClientAppTO clientAppTO) {\n-        if (clientAppTO instanceof SAML2SPTO) {\n-            return (T) doCreate((SAML2SPTO) clientAppTO);\n-        } else if (clientAppTO instanceof OIDCRPTO) {\n-            return (T) doCreate((OIDCRPTO) clientAppTO);\n-        } else if (clientAppTO instanceof CASSPTO) {\n-            return (T) doCreate((CASSPTO) clientAppTO);\n+        if (clientAppTO instanceof SAML2SPClientAppTO) {\n+            return (T) doCreate((SAML2SPClientAppTO) clientAppTO);\n+        } else if (clientAppTO instanceof OIDCRPClientAppTO) {\n+            return (T) doCreate((OIDCRPClientAppTO) clientAppTO);\n+        } else if (clientAppTO instanceof CASSPClientAppTO) {\n+            return (T) doCreate((CASSPClientAppTO) clientAppTO);\n         } else {\n             throw new IllegalArgumentException(\"Unsupported client app: \" + clientAppTO.getClass().getName());\n         }\n     }\n \n     @Override\n     public <T extends ClientApp> void update(final T clientApp, final ClientAppTO clientAppTO) {\n-        if (clientAppTO instanceof SAML2SPTO) {\n-            doUpdate((SAML2SP) clientApp, (SAML2SPTO) clientAppTO);\n-        } else if (clientAppTO instanceof OIDCRPTO) {\n-            doUpdate((OIDCRP) clientApp, (OIDCRPTO) clientAppTO);\n-        } else if (clientAppTO instanceof CASSPTO) {\n-            doUpdate((CASSP) clientApp, (CASSPTO) clientAppTO);\n+        if (clientAppTO instanceof SAML2SPClientAppTO) {\n+            doUpdate((SAML2SPClientApp) clientApp, (SAML2SPClientAppTO) clientAppTO);\n+        } else if (clientAppTO instanceof OIDCRPClientAppTO) {\n+            doUpdate((OIDCRPClientApp) clientApp, (OIDCRPClientAppTO) clientAppTO);\n+        } else if (clientAppTO instanceof CASSPClientAppTO) {\n+            doUpdate((CASSPClientApp) clientApp, (CASSPClientAppTO) clientAppTO);\n         } else {\n             throw new IllegalArgumentException(\"Unsupported client app: \" + clientAppTO.getClass().getName());\n         }\n@@ -77,31 +77,31 @@ public <T extends ClientApp> void update(final T clientApp, final ClientAppTO cl\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T extends ClientAppTO> T getClientAppTO(final ClientApp clientApp) {\n-        if (clientApp instanceof SAML2SP) {\n-            return (T) getSAMLClientAppTO((SAML2SP) clientApp);\n+        if (clientApp instanceof SAML2SPClientApp) {\n+            return (T) getSAMLClientAppTO((SAML2SPClientApp) clientApp);\n         }\n-        if (clientApp instanceof OIDCRP) {\n-            return (T) getOIDCClientAppTO((OIDCRP) clientApp);\n+        if (clientApp instanceof OIDCRPClientApp) {\n+            return (T) getOIDCClientAppTO((OIDCRPClientApp) clientApp);\n         }\n-        if (clientApp instanceof CASSP) {\n-            return (T) getCASClientAppTO((CASSP) clientApp);\n+        if (clientApp instanceof CASSPClientApp) {\n+            return (T) getCASClientAppTO((CASSPClientApp) clientApp);\n         }\n         throw new IllegalArgumentException(\"Unsupported client app: \" + clientApp.getClass().getName());\n     }\n \n-    private SAML2SP doCreate(final SAML2SPTO clientAppTO) {\n-        SAML2SP saml2sp = entityFactory.newEntity(SAML2SP.class);\n+    private SAML2SPClientApp doCreate(final SAML2SPClientAppTO clientAppTO) {\n+        SAML2SPClientApp saml2sp = entityFactory.newEntity(SAML2SPClientApp.class);\n         update(saml2sp, clientAppTO);\n         return saml2sp;\n     }\n \n-    private CASSP doCreate(final CASSPTO clientAppTO) {\n-        CASSP saml2sp = entityFactory.newEntity(CASSP.class);\n+    private CASSPClientApp doCreate(final CASSPClientAppTO clientAppTO) {\n+        CASSPClientApp saml2sp = entityFactory.newEntity(CASSPClientApp.class);\n         update(saml2sp, clientAppTO);\n         return saml2sp;\n     }\n \n-    private void doUpdate(final SAML2SP clientApp, final SAML2SPTO clientAppTO) {\n+    private void doUpdate(final SAML2SPClientApp clientApp, final SAML2SPClientAppTO clientAppTO) {\n         copyToEntity(clientApp, clientAppTO);\n \n         clientApp.setEntityId(clientAppTO.getEntityId());\n@@ -160,8 +160,8 @@ private static void copyToTO(final ClientApp clientApp, final ClientAppTO client\n         clientAppTO.getProperties().addAll(clientApp.getProperties());\n     }\n \n-    private static SAML2SPTO getSAMLClientAppTO(final SAML2SP clientApp) {\n-        SAML2SPTO clientAppTO = new SAML2SPTO();\n+    private static SAML2SPClientAppTO getSAMLClientAppTO(final SAML2SPClientApp clientApp) {\n+        SAML2SPClientAppTO clientAppTO = new SAML2SPClientAppTO();\n         copyToTO(clientApp, clientAppTO);\n \n         clientAppTO.setEntityId(clientApp.getEntityId());\n@@ -195,13 +195,13 @@ private static SAML2SPTO getSAMLClientAppTO(final SAML2SP clientApp) {\n         return clientAppTO;\n     }\n \n-    private OIDCRP doCreate(final OIDCRPTO clientAppTO) {\n-        OIDCRP oidcrp = entityFactory.newEntity(OIDCRP.class);\n+    private OIDCRPClientApp doCreate(final OIDCRPClientAppTO clientAppTO) {\n+        OIDCRPClientApp oidcrp = entityFactory.newEntity(OIDCRPClientApp.class);\n         update(oidcrp, clientAppTO);\n         return oidcrp;\n     }\n \n-    private void doUpdate(final OIDCRP clientApp, final OIDCRPTO clientAppTO) {\n+    private void doUpdate(final OIDCRPClientApp clientApp, final OIDCRPClientAppTO clientAppTO) {\n         copyToEntity(clientApp, clientAppTO);\n \n         clientApp.setClientSecret(clientAppTO.getClientSecret());\n@@ -218,8 +218,8 @@ private void doUpdate(final OIDCRP clientApp, final OIDCRPTO clientAppTO) {\n         clientApp.setLogoutUri(clientAppTO.getLogoutUri());\n     }\n \n-    private static OIDCRPTO getOIDCClientAppTO(final OIDCRP clientApp) {\n-        OIDCRPTO clientAppTO = new OIDCRPTO();\n+    private static OIDCRPClientAppTO getOIDCClientAppTO(final OIDCRPClientApp clientApp) {\n+        OIDCRPClientAppTO clientAppTO = new OIDCRPClientAppTO();\n         copyToTO(clientApp, clientAppTO);\n \n         clientAppTO.setClientId(clientApp.getClientId());\n@@ -234,14 +234,14 @@ private static OIDCRPTO getOIDCClientAppTO(final OIDCRP clientApp) {\n         return clientAppTO;\n     }\n \n-    private void doUpdate(final CASSP clientApp, final CASSPTO clientAppTO) {\n+    private void doUpdate(final CASSPClientApp clientApp, final CASSPClientAppTO clientAppTO) {\n         copyToEntity(clientApp, clientAppTO);\n \n         clientApp.setServiceId(clientAppTO.getServiceId());\n     }\n \n-    private static CASSPTO getCASClientAppTO(final CASSP clientApp) {\n-        CASSPTO clientAppTO = new CASSPTO();\n+    private static CASSPClientAppTO getCASClientAppTO(final CASSPClientApp clientApp) {\n+        CASSPClientAppTO clientAppTO = new CASSPClientAppTO();\n         copyToTO(clientApp, clientAppTO);\n         clientAppTO.setServiceId(clientApp.getServiceId());\n         return clientAppTO;"},{"sha":"abdbec2f7e08e1f1a4e8499b570090c8f2520a63","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPEntityDataBinderImpl.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPEntityDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPEntityDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPEntityDataBinderImpl.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import java.util.Base64;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n+import org.apache.syncope.core.provisioning.api.data.SAML2IdPEntityDataBinder;\n+\n+@Component\n+public class SAML2IdPEntityDataBinderImpl implements SAML2IdPEntityDataBinder {\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    public SAML2IdPEntity create(final SAML2IdPEntityTO entityTO) {\n+        SAML2IdPEntity entity = entityFactory.newEntity(SAML2IdPEntity.class);\n+        entity.setKey(entityTO.getKey());\n+        return update(entity, entityTO);\n+    }\n+\n+    @Override\n+    public SAML2IdPEntity update(final SAML2IdPEntity entity, final SAML2IdPEntityTO entityTO) {\n+        entity.setEncryptionCertificate(entityTO.getEncryptionCertificate() == null\n+                ? null\n+                : Base64.getDecoder().decode(entityTO.getEncryptionCertificate()));\n+        entity.setEncryptionKey(entityTO.getEncryptionKey() == null\n+                ? null\n+                : Base64.getDecoder().decode(entityTO.getEncryptionKey()));\n+        entity.setMetadata(entityTO.getMetadata() == null\n+                ? null\n+                : Base64.getDecoder().decode(entityTO.getMetadata()));\n+        entity.setSigningCertificate(entityTO.getSigningCertificate() == null\n+                ? null\n+                : Base64.getDecoder().decode(entityTO.getSigningCertificate()));\n+        entity.setSigningKey(entityTO.getSigningKey() == null\n+                ? null\n+                : Base64.getDecoder().decode(entityTO.getSigningKey()));\n+        return entity;\n+    }\n+\n+    @Override\n+    public SAML2IdPEntityTO getSAML2IdPEntityTO(final SAML2IdPEntity entity) {\n+        SAML2IdPEntityTO entityTO = new SAML2IdPEntityTO();\n+        entityTO.setKey(entity.getKey());\n+        entityTO.setMetadata(Base64.getEncoder().encodeToString(entity.getMetadata()));\n+        if (entity.getEncryptionCertificate() != null) {\n+            entityTO.setEncryptionCertificate(\n+                    Base64.getEncoder().encodeToString(entity.getEncryptionCertificate()));\n+        }\n+        if (entity.getEncryptionKey() != null) {\n+            entityTO.setEncryptionKey(\n+                    Base64.getEncoder().encodeToString(entity.getEncryptionKey()));\n+        }\n+        if (entity.getSigningCertificate() != null) {\n+            entityTO.setSigningCertificate(\n+                    Base64.getEncoder().encodeToString(entity.getSigningCertificate()));\n+        }\n+        if (entity.getSigningKey() != null) {\n+            entityTO.setSigningKey(Base64.getEncoder().encodeToString(entity.getSigningKey()));\n+        }\n+        return entityTO;\n+    }\n+}"},{"sha":"2d17168ba67c2074b880159075c5ac173aa4db3a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPMetadataDataBinderImpl.java","status":"removed","additions":0,"deletions":80,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPMetadataDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPMetadataDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPMetadataDataBinderImpl.java?ref=c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","patch":"@@ -1,80 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.data;\n-\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n-import org.apache.syncope.core.provisioning.api.data.SAML2IdPMetadataDataBinder;\n-\n-@Component\n-public class SAML2IdPMetadataDataBinderImpl implements SAML2IdPMetadataDataBinder {\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    private SAML2IdPMetadata getSAML2IdPMetadata(\n-            final SAML2IdPMetadata saml2IdPMetadata,\n-            final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n-\n-        SAML2IdPMetadata saml2IdPMetadataResult = saml2IdPMetadata;\n-        if (saml2IdPMetadataResult == null) {\n-            saml2IdPMetadataResult = entityFactory.newEntity(SAML2IdPMetadata.class);\n-        }\n-\n-        saml2IdPMetadataResult.setEncryptionCertificate(saml2IdPMetadataTO.getEncryptionCertificate());\n-        saml2IdPMetadataResult.setEncryptionKey(saml2IdPMetadataTO.getEncryptionKey());\n-        saml2IdPMetadataResult.setMetadata(saml2IdPMetadataTO.getMetadata());\n-        saml2IdPMetadataResult.setSigningCertificate(saml2IdPMetadataTO.getSigningCertificate());\n-        saml2IdPMetadataResult.setSigningKey(saml2IdPMetadataTO.getSigningKey());\n-        saml2IdPMetadataResult.setAppliesTo(saml2IdPMetadataTO.getAppliesTo());\n-\n-        return saml2IdPMetadataResult;\n-    }\n-\n-    @Override\n-    public SAML2IdPMetadata create(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n-        return update(entityFactory.newEntity(SAML2IdPMetadata.class), saml2IdPMetadataTO);\n-    }\n-\n-    @Override\n-    public SAML2IdPMetadata update(\n-            final SAML2IdPMetadata saml2IdPMetadata,\n-            final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n-\n-        return getSAML2IdPMetadata(saml2IdPMetadata, saml2IdPMetadataTO);\n-    }\n-\n-    @Override\n-    public SAML2IdPMetadataTO getSAML2IdPMetadataTO(final SAML2IdPMetadata saml2IdPMetadata) {\n-        SAML2IdPMetadataTO saml2IdPMetadataTO = new SAML2IdPMetadataTO();\n-\n-        saml2IdPMetadataTO.setKey(saml2IdPMetadata.getKey());\n-        saml2IdPMetadataTO.setMetadata(saml2IdPMetadata.getMetadata());\n-        saml2IdPMetadataTO.setEncryptionCertificate(saml2IdPMetadata.getEncryptionCertificate());\n-        saml2IdPMetadataTO.setEncryptionKey(saml2IdPMetadata.getEncryptionKey());\n-        saml2IdPMetadataTO.setSigningCertificate(saml2IdPMetadata.getSigningCertificate());\n-        saml2IdPMetadataTO.setSigningKey(saml2IdPMetadata.getSigningKey());\n-        saml2IdPMetadataTO.setAppliesTo(saml2IdPMetadata.getAppliesTo());\n-\n-        return saml2IdPMetadataTO;\n-    }\n-}"},{"sha":"4d92591034c1cd821a0f308bc21de86dfc9334df","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2SPEntityDataBinderImpl.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPEntityDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPEntityDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPEntityDataBinderImpl.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import java.util.Base64;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n+import org.apache.syncope.core.provisioning.api.data.SAML2SPEntityDataBinder;\n+\n+@Component\n+public class SAML2SPEntityDataBinderImpl implements SAML2SPEntityDataBinder {\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    public SAML2SPEntity create(final SAML2SPEntityTO entityTO) {\n+        SAML2SPEntity entity = entityFactory.newEntity(SAML2SPEntity.class);\n+        entity.setKey(entityTO.getKey());\n+        return update(entity, entityTO);\n+    }\n+\n+    @Override\n+    public SAML2SPEntity update(final SAML2SPEntity entity, final SAML2SPEntityTO entityTO) {\n+        entity.setKeystore(entityTO.getKeystore() == null\n+                ? null\n+                : Base64.getDecoder().decode(entityTO.getKeystore()));\n+        entity.setMetadata(entityTO.getMetadata() == null\n+                ? null\n+                : Base64.getDecoder().decode(entityTO.getMetadata()));\n+        return entity;\n+    }\n+\n+    @Override\n+    public SAML2SPEntityTO getSAML2SPEntityTO(final SAML2SPEntity entity) {\n+        SAML2SPEntityTO entityTO = new SAML2SPEntityTO();\n+        entityTO.setKey(entity.getKey());\n+        if (entity.getKeystore() != null) {\n+            entityTO.setKeystore(Base64.getEncoder().encodeToString(entity.getKeystore()));\n+        }\n+        if (entity.getMetadata() != null) {\n+            entityTO.setMetadata(Base64.getEncoder().encodeToString(entity.getMetadata()));\n+        }\n+        return entityTO;\n+    }\n+}"},{"sha":"02fd80510ef3e4f1d7fa7523748bccfc1b45c0f0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2SPKeystoreBinderImpl.java","status":"removed","additions":0,"deletions":71,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPKeystoreBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPKeystoreBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPKeystoreBinderImpl.java?ref=c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","patch":"@@ -1,71 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.data;\n-\n-import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n-import org.apache.syncope.core.provisioning.api.data.SAML2SPKeystoreBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class SAML2SPKeystoreBinderImpl implements SAML2SPKeystoreBinder {\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    private SAML2SPKeystore getSAML2SPKeystore(\n-        final SAML2SPKeystore keystore,\n-        final SAML2SPKeystoreTO keystoreTO) {\n-\n-        SAML2SPKeystore result = keystore;\n-        if (result == null) {\n-            result = entityFactory.newEntity(SAML2SPKeystore.class);\n-        }\n-        result.setKeystore(keystoreTO.getKeystore());\n-        result.setOwner(keystoreTO.getOwner());\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public SAML2SPKeystore create(final SAML2SPKeystoreTO keystoreTO) {\n-        return update(entityFactory.newEntity(SAML2SPKeystore.class), keystoreTO);\n-    }\n-\n-    @Override\n-    public SAML2SPKeystore update(\n-        final SAML2SPKeystore keystore,\n-        final SAML2SPKeystoreTO keystoreTO) {\n-\n-        return getSAML2SPKeystore(keystore, keystoreTO);\n-    }\n-\n-    @Override\n-    public SAML2SPKeystoreTO getSAML2SPKeystoreTO(final SAML2SPKeystore keystore) {\n-        SAML2SPKeystoreTO keystoreTO = new SAML2SPKeystoreTO();\n-\n-        keystoreTO.setKey(keystore.getKey());\n-        keystoreTO.setKeystore(keystore.getKeystore());\n-        keystoreTO.setOwner(keystore.getOwner());\n-\n-        return keystoreTO;\n-    }\n-}"},{"sha":"3e4e62b0bbb8c6c025c35256b851a3b7736afe75","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2SPMetadataBinderImpl.java","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPMetadataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPMetadataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPMetadataBinderImpl.java?ref=c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","patch":"@@ -1,72 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.data;\n-\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n-import org.apache.syncope.core.provisioning.api.data.SAML2SPMetadataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class SAML2SPMetadataBinderImpl implements SAML2SPMetadataBinder {\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    private SAML2SPMetadata getSAML2SPMetadata(\n-        final SAML2SPMetadata metadata,\n-        final SAML2SPMetadataTO metadataTO) {\n-\n-        SAML2SPMetadata result = metadata;\n-        if (result == null) {\n-            result = entityFactory.newEntity(SAML2SPMetadata.class);\n-        }\n-\n-        result.setMetadata(metadataTO.getMetadata());\n-        result.setOwner(metadataTO.getOwner());\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public SAML2SPMetadata create(final SAML2SPMetadataTO metadataTO) {\n-        return update(entityFactory.newEntity(SAML2SPMetadata.class), metadataTO);\n-    }\n-\n-    @Override\n-    public SAML2SPMetadata update(\n-        final SAML2SPMetadata metadata,\n-        final SAML2SPMetadataTO metadataTO) {\n-\n-        return getSAML2SPMetadata(metadata, metadataTO);\n-    }\n-\n-    @Override\n-    public SAML2SPMetadataTO getSAML2SPMetadataTO(final SAML2SPMetadata saml2IdPMetadata) {\n-        SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO();\n-\n-        metadataTO.setKey(saml2IdPMetadata.getKey());\n-        metadataTO.setMetadata(saml2IdPMetadata.getMetadata());\n-        metadataTO.setOwner(saml2IdPMetadata.getOwner());\n-\n-        return metadataTO;\n-    }\n-}"},{"sha":"51371163997f4fc413e39e95829f5f440a981d0c","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/panels/CamelRoutesDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -26,7 +26,6 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.CamelRoutesDirectoryPanel.CamelRoutesProvider;\n import org.apache.syncope.client.console.rest.CamelRoutesRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n@@ -35,6 +34,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.XMLEditorPanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CamelEntitlement;\n@@ -132,7 +132,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n                             LOG.error(\"While creating or updating CamelRouteTO\", e);\n                             error(getString(Constants.ERROR) + \": \" + e.getMessage());\n                         }\n-                        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                        ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n                     }\n \n                 });"},{"sha":"0357f13dd6eeeea676d6af8f050428473ddcf5c0","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/BpmnProcessDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBpmnProcessDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBpmnProcessDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBpmnProcessDirectoryPanel.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -46,6 +46,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ImageModalPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.XMLEditorPanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizardBuilder;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.BpmnProcess;\n@@ -206,7 +207,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n                             } catch (SyncopeClientException e) {\n                                 SyncopeConsoleSession.get().onException(e);\n                             }\n-                            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                            ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n                         }\n                     }\n                 });"},{"sha":"d8372ea6df3a63cc58c80196fc780d379a4e9cf6","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2SPPanel.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPPanel.html?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -20,7 +20,7 @@\n   <wicket:panel>\n     <div class=\"logviewer-btn\">\n       <a class=\"btn btn-success\" wicket:id=\"downloadMetadata\">\n-        <span class=\"fa fa-download\"></span> Metadata\n+        <span class=\"fas fa-download\"></span> Metadata\n       </a>\n     </div>\n   </wicket:panel>"},{"sha":"c6647dbb9d4aea759552c62c86fbfe85005dd5cb","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2SP4UIIdP.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdP.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -53,7 +53,7 @@ public class JPASAML2SP4UIIdP extends AbstractGeneratedKeyEntity implements SAML\n \n     private static final long serialVersionUID = -392372595500355552L;\n \n-    public static final String TABLE = \"SAML2IdP\";\n+    public static final String TABLE = \"SAML2SP4UIIdP\";\n \n     @Column(unique = true, nullable = false)\n     private String entityID;"},{"sha":"b76b95ebd3bf4f3f4596f9d49d496e4ec43ca693","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2SP4UIIdPItem.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdPItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdPItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdPItem.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -40,10 +40,10 @@\n @Cacheable\n public class JPASAML2SP4UIIdPItem extends AbstractItem implements SAML2SP4UIIdPItem {\n \n-    public static final String TABLE = \"SAML2IdPItem\";\n-\n     private static final long serialVersionUID = -597417734910639991L;\n \n+    public static final String TABLE = \"SAML2SP4UIIdPItem\";\n+\n     @ManyToOne\n     private JPASAML2SP4UIIdP idp;\n "},{"sha":"154bfdfa9e43d0d5aa57f4904074bfb27d34ecd6","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2SP4UIUserTemplate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIUserTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIUserTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIUserTemplate.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -33,7 +33,7 @@ public class JPASAML2SP4UIUserTemplate extends AbstractAnyTemplate implements SA\n \n     private static final long serialVersionUID = -4575039890434426856L;\n \n-    public static final String TABLE = \"SAML2UserTemplate\";\n+    public static final String TABLE = \"SAML2SP4UIUserTemplate\";\n \n     @ManyToOne\n     private JPASAML2SP4UIIdP idp;"},{"sha":"90d9ad42f515b27860296dfbc4a97d369a55d9c3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":15,"deletions":21,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -86,8 +86,8 @@\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.to.ClientAppTO;\n-import org.apache.syncope.common.lib.to.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n+import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.OIDCGrantType;\n@@ -136,12 +136,13 @@\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.common.rest.api.service.UserRequestService;\n import org.apache.syncope.common.rest.api.service.BpmnProcessService;\n+import org.apache.syncope.common.rest.api.service.OIDCC4UIProviderService;\n+import org.apache.syncope.common.rest.api.service.OIDCC4UIService;\n import org.apache.syncope.common.rest.api.service.OIDCJWKSService;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPEntityService;\n import org.apache.syncope.common.rest.api.service.SAML2SP4UIIdPService;\n import org.apache.syncope.common.rest.api.service.SAML2SP4UIService;\n-import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreService;\n-import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n+import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n import org.apache.syncope.common.rest.api.service.SRARouteService;\n import org.apache.syncope.common.rest.api.service.UserWorkflowTaskService;\n import org.apache.syncope.common.rest.api.service.wa.ImpersonationService;\n@@ -156,8 +157,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n-import org.apache.syncope.common.rest.api.service.OIDCC4UIService;\n-import org.apache.syncope.common.rest.api.service.OIDCC4UIProviderService;\n \n @SpringJUnitConfig({ CoreITContext.class, SelfKeymasterClientContext.class, ZookeeperKeymasterClientContext.class })\n public abstract class AbstractITCase {\n@@ -234,8 +233,6 @@ public abstract class AbstractITCase {\n \n     protected static final String PRINTER = \"PRINTER\";\n \n-    protected static final String OWNER = \"Syncope\";\n-\n     protected static final int MAX_WAIT_SECONDS = 50;\n \n     protected static String ANONYMOUS_UNAME;\n@@ -334,11 +331,9 @@ public abstract class AbstractITCase {\n \n     protected static AuthProfileService authProfileService;\n \n-    protected static SAML2SPMetadataService saml2SPMetadataService;\n-\n-    protected static SAML2SPKeystoreService saml2SPKeystoreService;\n+    protected static SAML2SPEntityService saml2SPEntityService;\n \n-    protected static SAML2IdPMetadataService saml2IdPMetadataService;\n+    protected static SAML2IdPEntityService saml2IdPEntityService;\n \n     protected static OIDCJWKSService oidcJWKSService;\n \n@@ -349,7 +344,7 @@ public abstract class AbstractITCase {\n     protected static WebAuthnRegistrationService webAuthnRegistrationService;\n \n     protected static ImpersonationService impersonationService;\n-    \n+\n     @BeforeAll\n     public static void securitySetup() {\n         try (InputStream propStream = AbstractITCase.class.getResourceAsStream(\"/security.properties\")) {\n@@ -421,9 +416,8 @@ public static void restSetup() {\n         scimConfService = adminClient.getService(SCIMConfService.class);\n         clientAppService = adminClient.getService(ClientAppService.class);\n         authModuleService = adminClient.getService(AuthModuleService.class);\n-        saml2SPMetadataService = adminClient.getService(SAML2SPMetadataService.class);\n-        saml2IdPMetadataService = adminClient.getService(SAML2IdPMetadataService.class);\n-        saml2SPKeystoreService = adminClient.getService(SAML2SPKeystoreService.class);\n+        saml2SPEntityService = adminClient.getService(SAML2SPEntityService.class);\n+        saml2IdPEntityService = adminClient.getService(SAML2IdPEntityService.class);\n         googleMfaAuthTokenService = adminClient.getService(GoogleMfaAuthTokenService.class);\n         googleMfaAuthAccountService = adminClient.getService(GoogleMfaAuthAccountService.class);\n         authProfileService = adminClient.getService(AuthProfileService.class);\n@@ -770,7 +764,7 @@ protected <T> T queryForObject(\n         return object.get();\n     }\n \n-    protected static OIDCRPTO buildOIDCRP() {\n+    protected static OIDCRPClientAppTO buildOIDCRP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n         authPolicyTO.setName(\"Authentication Policy\");\n@@ -783,7 +777,7 @@ protected static OIDCRPTO buildOIDCRP() {\n         accessPolicyTO = createPolicy(PolicyType.ACCESS, accessPolicyTO);\n         assertNotNull(accessPolicyTO);\n \n-        OIDCRPTO oidcrpTO = new OIDCRPTO();\n+        OIDCRPClientAppTO oidcrpTO = new OIDCRPClientAppTO();\n         oidcrpTO.setName(\"ExampleRP_\" + getUUIDString());\n         oidcrpTO.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n         oidcrpTO.setDescription(\"Example OIDC RP application\");\n@@ -799,7 +793,7 @@ protected static OIDCRPTO buildOIDCRP() {\n         return oidcrpTO;\n     }\n \n-    protected static SAML2SPTO buildSAML2SP() {\n+    protected static SAML2SPClientAppTO buildSAML2SP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n         authPolicyTO.setName(\"Authentication Policy\");\n@@ -812,7 +806,7 @@ protected static SAML2SPTO buildSAML2SP() {\n         accessPolicyTO = createPolicy(PolicyType.ACCESS, accessPolicyTO);\n         assertNotNull(accessPolicyTO);\n \n-        SAML2SPTO saml2spto = new SAML2SPTO();\n+        SAML2SPClientAppTO saml2spto = new SAML2SPClientAppTO();\n         saml2spto.setName(\"ExampleSAML2SP_\" + getUUIDString());\n         saml2spto.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n         saml2spto.setDescription(\"Example SAML 2.0 service provider\");"},{"sha":"36ab31d0860ca7ca82dee3c1c51d2ab69b860258","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ClientAppITCase.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -29,9 +29,9 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n-import org.apache.syncope.common.lib.to.CASSPTO;\n-import org.apache.syncope.common.lib.to.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.CASSPClientAppTO;\n+import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n+import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -46,10 +46,10 @@ public void createSAML2SP() {\n \n     @Test\n     public void readSAML2SP() {\n-        SAML2SPTO samlSpTO = buildSAML2SP();\n+        SAML2SPClientAppTO samlSpTO = buildSAML2SP();\n         samlSpTO = createClientApp(ClientAppType.SAML2SP, samlSpTO);\n \n-        SAML2SPTO found = clientAppService.read(ClientAppType.SAML2SP, samlSpTO.getKey());\n+        SAML2SPClientAppTO found = clientAppService.read(ClientAppType.SAML2SP, samlSpTO.getKey());\n         assertNotNull(found);\n         assertFalse(StringUtils.isBlank(found.getEntityId()));\n         assertFalse(StringUtils.isBlank(found.getMetadataLocation()));\n@@ -62,7 +62,7 @@ public void readSAML2SP() {\n \n     @Test\n     public void updateSAML2SP() {\n-        SAML2SPTO samlSpTO = buildSAML2SP();\n+        SAML2SPClientAppTO samlSpTO = buildSAML2SP();\n         samlSpTO = createClientApp(ClientAppType.SAML2SP, samlSpTO);\n \n         AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n@@ -75,7 +75,7 @@ public void updateSAML2SP() {\n         samlSpTO.setAccessPolicy(accessPolicyTO.getKey());\n \n         clientAppService.update(ClientAppType.SAML2SP, samlSpTO);\n-        SAML2SPTO updated = clientAppService.read(ClientAppType.SAML2SP, samlSpTO.getKey());\n+        SAML2SPClientAppTO updated = clientAppService.read(ClientAppType.SAML2SP, samlSpTO.getKey());\n \n         assertNotNull(updated);\n         assertEquals(\"newEntityId\", updated.getEntityId());\n@@ -84,7 +84,7 @@ public void updateSAML2SP() {\n \n     @Test\n     public void deleteSAML2SP() {\n-        SAML2SPTO samlSpTO = buildSAML2SP();\n+        SAML2SPClientAppTO samlSpTO = buildSAML2SP();\n         samlSpTO = createClientApp(ClientAppType.SAML2SP, samlSpTO);\n \n         clientAppService.delete(ClientAppType.SAML2SP, samlSpTO.getKey());\n@@ -109,10 +109,10 @@ public void createCASSP() {\n \n     @Test\n     public void readOIDCRP() {\n-        OIDCRPTO oidcrpTO = buildOIDCRP();\n+        OIDCRPClientAppTO oidcrpTO = buildOIDCRP();\n         oidcrpTO = createClientApp(ClientAppType.OIDCRP, oidcrpTO);\n \n-        OIDCRPTO found = clientAppService.read(ClientAppType.OIDCRP, oidcrpTO.getKey());\n+        OIDCRPClientAppTO found = clientAppService.read(ClientAppType.OIDCRP, oidcrpTO.getKey());\n         assertNotNull(found);\n         assertFalse(StringUtils.isBlank(found.getClientId()));\n         assertFalse(StringUtils.isBlank(found.getClientSecret()));\n@@ -125,9 +125,9 @@ public void readOIDCRP() {\n \n     @Test\n     public void readCASSP() {\n-        CASSPTO casspTO = buildCASSP();\n+        CASSPClientAppTO casspTO = buildCASSP();\n         casspTO = createClientApp(ClientAppType.CASSP, casspTO);\n-        CASSPTO found = clientAppService.read(ClientAppType.CASSP, casspTO.getKey());\n+        CASSPClientAppTO found = clientAppService.read(ClientAppType.CASSP, casspTO.getKey());\n         assertNotNull(found);\n         assertNotNull(found.getServiceId());\n         assertNotNull(found.getAccessPolicy());\n@@ -136,7 +136,7 @@ public void readCASSP() {\n \n     @Test\n     public void updateOIDCRP() {\n-        OIDCRPTO oidcrpTO = buildOIDCRP();\n+        OIDCRPClientAppTO oidcrpTO = buildOIDCRP();\n         oidcrpTO = createClientApp(ClientAppType.OIDCRP, oidcrpTO);\n \n         AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n@@ -149,7 +149,7 @@ public void updateOIDCRP() {\n         oidcrpTO.setAccessPolicy(accessPolicyTO.getKey());\n \n         clientAppService.update(ClientAppType.OIDCRP, oidcrpTO);\n-        OIDCRPTO updated = clientAppService.read(ClientAppType.OIDCRP, oidcrpTO.getKey());\n+        OIDCRPClientAppTO updated = clientAppService.read(ClientAppType.OIDCRP, oidcrpTO.getKey());\n \n         assertNotNull(updated);\n         assertEquals(\"newClientId\", updated.getClientId());\n@@ -158,7 +158,7 @@ public void updateOIDCRP() {\n \n     @Test\n     public void deleteOIDCRP() {\n-        OIDCRPTO oidcrpTO = buildOIDCRP();\n+        OIDCRPClientAppTO oidcrpTO = buildOIDCRP();\n         oidcrpTO = createClientApp(ClientAppType.OIDCRP, oidcrpTO);\n \n         clientAppService.delete(ClientAppType.OIDCRP, oidcrpTO.getKey());\n@@ -173,7 +173,7 @@ public void deleteOIDCRP() {\n \n     @Test\n     public void deleteCASSP() {\n-        CASSPTO casspTO = buildCASSP();\n+        CASSPClientAppTO casspTO = buildCASSP();\n         casspTO = createClientApp(ClientAppType.CASSP, casspTO);\n \n         clientAppService.delete(ClientAppType.CASSP, casspTO.getKey());\n@@ -186,7 +186,7 @@ public void deleteCASSP() {\n         }\n     }\n \n-    private static CASSPTO buildCASSP() {\n+    private static CASSPClientAppTO buildCASSP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n         authPolicyTO.setName(\"Authentication Policy\");\n@@ -199,7 +199,7 @@ private static CASSPTO buildCASSP() {\n         accessPolicyTO = createPolicy(PolicyType.ACCESS, accessPolicyTO);\n         assertNotNull(accessPolicyTO);\n \n-        CASSPTO casspTO = new CASSPTO();\n+        CASSPClientAppTO casspTO = new CASSPClientAppTO();\n         casspTO.setName(\"ExampleRP_\" + getUUIDString());\n         casspTO.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n         casspTO.setDescription(\"Example OIDC RP application\");"},{"sha":"0e7c96b55ed1fa040aa3fab91a55f1e5b1ce073e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/OIDCJWKSITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -53,7 +53,7 @@ public void deleteGetSet() {\n         try {\n             oidcJWKSService.delete();\n \n-            waOIDCJWKSService.get();\n+            waOIDCJWKSService.read();\n             fail(\"Should not locate an OIDC JWKS\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());"},{"sha":"0b019b5dd45a1904d3668262678e771d3e2f2d6a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2IdPEntityITCase.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPEntityITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPEntityITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPEntityITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPEntityService;\n+\n+public class SAML2IdPEntityITCase extends AbstractITCase {\n+\n+    private static SAML2IdPEntityService waSAML2IdPEntityService;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        assumeTrue(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.JSON);\n+\n+        SyncopeClient anonymous = clientFactory.create(\n+                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n+        waSAML2IdPEntityService = anonymous.getService(SAML2IdPEntityService.class);\n+    }\n+\n+    private static SAML2IdPEntityTO set() {\n+        SAML2IdPEntityTO entityTO = new SAML2IdPEntityTO.Builder().\n+                key(SAML2IdPEntityService.DEFAULT_OWNER).\n+                metadata(Base64.getEncoder().encodeToString(\n+                        \"testMetadata\".getBytes(StandardCharsets.UTF_8))).\n+                encryptionCertificate(Base64.getEncoder().encodeToString(\n+                        \"testEncryptionCert\".getBytes(StandardCharsets.UTF_8))).\n+                encryptionKey(Base64.getEncoder().encodeToString(\n+                        \"testEncryptionKey\".getBytes(StandardCharsets.UTF_8))).\n+                signingCertificate(Base64.getEncoder().encodeToString(\n+                        \"testSigningCert\".getBytes(StandardCharsets.UTF_8))).\n+                signingKey(Base64.getEncoder().encodeToString(\n+                        \"testSigningKey\".getBytes(StandardCharsets.UTF_8))).\n+                build();\n+        waSAML2IdPEntityService.set(entityTO);\n+\n+        return entityTO;\n+    }\n+\n+    @Test\n+    public void get() {\n+        SAML2IdPEntityTO entityTO;\n+        try {\n+            entityTO = waSAML2IdPEntityService.get(SAML2IdPEntityService.DEFAULT_OWNER);\n+        } catch (SyncopeClientException e) {\n+            entityTO = set();\n+        }\n+        assertNotNull(entityTO);\n+\n+        assertEquals(SAML2IdPEntityService.DEFAULT_OWNER, entityTO.getKey());\n+    }\n+\n+    @Test\n+    public void getAndSet() {\n+        SAML2IdPEntityTO entityTO;\n+        try {\n+            entityTO = waSAML2IdPEntityService.get(SAML2IdPEntityService.DEFAULT_OWNER);\n+        } catch (SyncopeClientException e) {\n+            entityTO = set();\n+        }\n+        assertNotNull(entityTO);\n+\n+        entityTO.setMetadata(Base64.getEncoder().encodeToString(\"new metadata\".getBytes(StandardCharsets.UTF_8)));\n+        waSAML2IdPEntityService.set(entityTO);\n+\n+        entityTO = waSAML2IdPEntityService.get(entityTO.getKey());\n+        assertEquals(\n+                \"new metadata\",\n+                new String(Base64.getDecoder().decode(entityTO.getMetadata()), StandardCharsets.UTF_8));\n+    }\n+}"},{"sha":"8ce1688a3803cb8f2e022f65d83512faf1d45777","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2IdPMetadataITCase.java","status":"removed","additions":0,"deletions":120,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java?ref=c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","patch":"@@ -1,120 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.fail;\n-import static org.junit.jupiter.api.Assumptions.assumeTrue;\n-\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.Test;\n-import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.platform.commons.util.StringUtils;\n-\n-public class SAML2IdPMetadataITCase extends AbstractITCase {\n-\n-    private static SAML2IdPMetadataService waSAML2IdPMetadataService;\n-\n-    @BeforeAll\n-    public static void setup() {\n-        assumeTrue(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.JSON);\n-\n-        SyncopeClient anonymous = clientFactory.create(\n-                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n-        waSAML2IdPMetadataService = anonymous.getService(SAML2IdPMetadataService.class);\n-    }\n-\n-    private static void testIsValid(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n-        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getAppliesTo()));\n-        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getMetadata()));\n-        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getEncryptionKey()));\n-        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getEncryptionCertificate()));\n-        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getSigningCertificate()));\n-        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getSigningKey()));\n-    }\n-\n-    private SAML2IdPMetadataTO createSAML2IdPMetadata(final SAML2IdPMetadataTO saml2IdPMetadata) {\n-        Response response = waSAML2IdPMetadataService.set(saml2IdPMetadata);\n-        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n-            if (ex != null) {\n-                throw (RuntimeException) ex;\n-            }\n-        }\n-        return getObject(response.getLocation(), SAML2IdPMetadataService.class, saml2IdPMetadata.getClass());\n-    }\n-\n-    private SAML2IdPMetadataTO createSAML2IdPMetadata() {\n-        SAML2IdPMetadataTO result = createSAML2IdPMetadata(new SAML2IdPMetadataTO.Builder().\n-                appliesTo(OWNER).\n-                metadata(\"testMetadata\").\n-                encryptionCertificate(\"testEncryptionCert\").\n-                encryptionKey(\"testEncryptionKey\").\n-                signingCertificate(\"testSigningCert\").\n-                signingKey(\"testSigningKey\").\n-                build());\n-        assertNotNull(result);\n-        testIsValid(result);\n-\n-        return result;\n-    }\n-\n-    @Test\n-    public void read() {\n-        SAML2IdPMetadataTO saml2IdPMetadataTO;\n-        try {\n-            saml2IdPMetadataTO = waSAML2IdPMetadataService.readFor(OWNER);\n-        } catch (SyncopeClientException e) {\n-            saml2IdPMetadataTO = createSAML2IdPMetadata();\n-        }\n-\n-        assertNotNull(saml2IdPMetadataTO);\n-        assertEquals(OWNER, saml2IdPMetadataTO.getAppliesTo());\n-        testIsValid(saml2IdPMetadataTO);\n-    }\n-\n-    @Test\n-    public void create() {\n-        try {\n-            waSAML2IdPMetadataService.readFor(OWNER);\n-        } catch (SyncopeClientException e) {\n-            createSAML2IdPMetadata();\n-        }\n-\n-        try {\n-            createSAML2IdPMetadata(new SAML2IdPMetadataTO.Builder().\n-                    appliesTo(OWNER).\n-                    metadata(\"testMetadata\").\n-                    build());\n-            fail(\"This should not happen\");\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.EntityExists, e.getType());\n-        }\n-    }\n-}"},{"sha":"e05d40301c3f7c1c22a2284a4d82614837b35af8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2SPEntityITCase.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPEntityITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPEntityITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPEntityITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n+\n+public class SAML2SPEntityITCase extends AbstractITCase {\n+\n+    private static final String OWNER = \"owner\";\n+\n+    private static SAML2SPEntityService waSAML2SPEntityService;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        assumeTrue(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.JSON);\n+\n+        SyncopeClient anonymous = clientFactory.create(\n+                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n+        waSAML2SPEntityService = anonymous.getService(SAML2SPEntityService.class);\n+    }\n+\n+    private static SAML2SPEntityTO set() {\n+        SAML2SPEntityTO entityTO = new SAML2SPEntityTO.Builder().\n+                key(OWNER).\n+                metadata(Base64.getEncoder().encodeToString(\"testMetadata\".getBytes(StandardCharsets.UTF_8))).\n+                build();\n+        waSAML2SPEntityService.set(entityTO);\n+\n+        return entityTO;\n+    }\n+\n+    @Test\n+    public void get() {\n+        SAML2SPEntityTO entityTO;\n+        try {\n+            entityTO = waSAML2SPEntityService.get(OWNER);\n+        } catch (SyncopeClientException e) {\n+            entityTO = set();\n+        }\n+        assertNotNull(entityTO);\n+\n+        assertEquals(OWNER, entityTO.getKey());\n+    }\n+\n+    @Test\n+    public void getAndSet() {\n+        SAML2SPEntityTO entityTO;\n+        try {\n+            entityTO = waSAML2SPEntityService.get(OWNER);\n+        } catch (SyncopeClientException e) {\n+            entityTO = set();\n+        }\n+        assertNotNull(entityTO);\n+\n+        entityTO.setMetadata(Base64.getEncoder().encodeToString(\"new metadata\".getBytes(StandardCharsets.UTF_8)));\n+        waSAML2SPEntityService.set(entityTO);\n+\n+        entityTO = waSAML2SPEntityService.get(entityTO.getKey());\n+        assertEquals(\n+                \"new metadata\",\n+                new String(Base64.getDecoder().decode(entityTO.getMetadata()), StandardCharsets.UTF_8));\n+    }\n+}"},{"sha":"2bc92fcdba466bcab8f386daff23033c48410fc1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2SPKeystoreITCase.java","status":"removed","additions":0,"deletions":114,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPKeystoreITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPKeystoreITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPKeystoreITCase.java?ref=c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","patch":"@@ -1,114 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.fail;\n-import static org.junit.jupiter.api.Assumptions.assumeTrue;\n-\n-import javax.ws.rs.core.Response;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreService;\n-import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-\n-public class SAML2SPKeystoreITCase extends AbstractITCase {\n-\n-    private static SAML2SPKeystoreService waSAML2SPKeystoreService;\n-\n-    private static SAML2SPMetadataService waSAML2SPMetadataService;\n-\n-    @BeforeAll\n-    public static void setup() {\n-        assumeTrue(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.JSON);\n-\n-        SyncopeClient anonymous = clientFactory.create(\n-                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n-        waSAML2SPKeystoreService = anonymous.getService(SAML2SPKeystoreService.class);\n-        waSAML2SPMetadataService = anonymous.getService(SAML2SPMetadataService.class);\n-    }\n-\n-    private static void testIsValid(final SAML2SPKeystoreTO keystoreTO) {\n-        assertFalse(StringUtils.isBlank(keystoreTO.getOwner()));\n-        assertFalse(StringUtils.isBlank(keystoreTO.getKeystore()));\n-    }\n-\n-    private SAML2SPKeystoreTO createSAML2SPKeystore(final SAML2SPKeystoreTO keystoreTO) {\n-        Response response = waSAML2SPKeystoreService.set(keystoreTO);\n-        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n-            if (ex != null) {\n-                throw (RuntimeException) ex;\n-            }\n-        }\n-        return getObject(response.getLocation(), SAML2SPKeystoreService.class, keystoreTO.getClass());\n-    }\n-\n-    private SAML2SPKeystoreTO createSAML2SPKeystore() {\n-        SAML2SPKeystoreTO result = createSAML2SPKeystore(new SAML2SPKeystoreTO.Builder().\n-                owner(OWNER).\n-                keystore(\"testkyStore\").\n-                build());\n-        assertNotNull(result);\n-        testIsValid(result);\n-        return result;\n-    }\n-\n-    @Test\n-    public void read() {\n-        SAML2SPKeystoreTO keystoreTO;\n-        try {\n-            keystoreTO = waSAML2SPKeystoreService.readFor(OWNER);\n-        } catch (SyncopeClientException e) {\n-            keystoreTO = createSAML2SPKeystore();\n-        }\n-        assertNotNull(keystoreTO);\n-        assertEquals(OWNER, keystoreTO.getOwner());\n-        testIsValid(keystoreTO);\n-    }\n-\n-    @Test\n-    public void create() {\n-        try {\n-            waSAML2SPMetadataService.readFor(OWNER);\n-        } catch (SyncopeClientException e) {\n-            createSAML2SPKeystore();\n-        }\n-\n-        try {\n-            createSAML2SPKeystore(new SAML2SPKeystoreTO.Builder().\n-                    owner(OWNER).\n-                    keystore(\"testMetadata\").\n-                    build());\n-            fail(\"This should not happen\");\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.EntityExists, e.getType());\n-        }\n-    }\n-}"},{"sha":"a7b5e4407ebac33c18d65fb8dd9c9f695524ccb1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2SPMetadataITCase.java","status":"removed","additions":0,"deletions":110,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPMetadataITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9f913063c98a7d5cbe5a47e5ce8a160cc227b83/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPMetadataITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPMetadataITCase.java?ref=c9f913063c98a7d5cbe5a47e5ce8a160cc227b83","patch":"@@ -1,110 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.fail;\n-import static org.junit.jupiter.api.Assumptions.assumeTrue;\n-\n-import javax.ws.rs.core.Response;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-\n-public class SAML2SPMetadataITCase extends AbstractITCase {\n-\n-    private static SAML2SPMetadataService waSAML2SPMetadataService;\n-\n-    @BeforeAll\n-    public static void setup() {\n-        assumeTrue(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.JSON);\n-\n-        SyncopeClient anonymous = clientFactory.create(\n-                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n-        waSAML2SPMetadataService = anonymous.getService(SAML2SPMetadataService.class);\n-    }\n-\n-    private SAML2SPMetadataTO createSAML2SPMetadata(final SAML2SPMetadataTO metadata) {\n-        Response response = waSAML2SPMetadataService.set(metadata);\n-        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n-            if (ex != null) {\n-                throw (RuntimeException) ex;\n-            }\n-        }\n-        return getObject(response.getLocation(), SAML2SPMetadataService.class, metadata.getClass());\n-    }\n-\n-    private static void testIsValid(final SAML2SPMetadataTO metadataTO) {\n-        assertFalse(StringUtils.isBlank(metadataTO.getOwner()));\n-        assertFalse(StringUtils.isBlank(metadataTO.getMetadata()));\n-    }\n-\n-    private SAML2SPMetadataTO createSAML2SPMetadata() {\n-        SAML2SPMetadataTO result = createSAML2SPMetadata(new SAML2SPMetadataTO.Builder().\n-                owner(OWNER).\n-                metadata(\"testMetadata\").\n-                build());\n-        assertNotNull(result);\n-        testIsValid(result);\n-        return result;\n-    }\n-\n-    @Test\n-    public void read() {\n-        SAML2SPMetadataTO metadataTO;\n-        try {\n-            metadataTO = waSAML2SPMetadataService.readFor(OWNER);\n-        } catch (SyncopeClientException e) {\n-            metadataTO = createSAML2SPMetadata();\n-        }\n-        assertNotNull(metadataTO);\n-        assertEquals(OWNER, metadataTO.getOwner());\n-        testIsValid(metadataTO);\n-    }\n-\n-    @Test\n-    public void create() {\n-        try {\n-            waSAML2SPMetadataService.readFor(OWNER);\n-        } catch (SyncopeClientException e) {\n-            createSAML2SPMetadata();\n-        }\n-\n-        try {\n-            createSAML2SPMetadata(new SAML2SPMetadataTO.Builder().\n-                    owner(OWNER).\n-                    metadata(\"testMetadata\").\n-                    build());\n-            fail(\"This should not happen\");\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.EntityExists, e.getType());\n-        }\n-    }\n-}"},{"sha":"ad04cabd50e9d5f3da3ac6250d0d6ebf9ef3272f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/GoogleMfaAuthAccountITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthAccountITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -48,7 +48,7 @@ private static GoogleMfaAuthAccount createGoogleMfaAuthAccount() {\n \n     @BeforeEach\n     public void setup() {\n-        googleMfaAuthAccountService.delete();\n+        googleMfaAuthAccountService.deleteAll();\n     }\n \n     @Test\n@@ -66,18 +66,18 @@ public void count() {\n         assertFalse(list.getResult().isEmpty());\n         assertEquals(1, list.getTotalCount());\n \n-        PagedResult<GoogleMfaAuthAccount> read = googleMfaAuthAccountService.readFor(owner);\n+        PagedResult<GoogleMfaAuthAccount> read = googleMfaAuthAccountService.read(owner);\n         assertEquals(1, read.getTotalCount());\n         assertFalse(read.getResult().isEmpty());\n     }\n \n     @Test\n-    public void deleteFor() {\n+    public void delete() {\n         String owner = UUID.randomUUID().toString();\n         GoogleMfaAuthAccount acct = createGoogleMfaAuthAccount();\n         googleMfaAuthAccountService.create(owner, acct);\n-        googleMfaAuthAccountService.deleteFor(owner);\n-        assertThrows(SyncopeClientException.class, () -> googleMfaAuthAccountService.readFor(owner));\n+        googleMfaAuthAccountService.delete(owner);\n+        assertThrows(SyncopeClientException.class, () -> googleMfaAuthAccountService.read(owner));\n     }\n \n     @Test\n@@ -90,8 +90,8 @@ public void update() {\n         acct.setScratchCodes(List.of(9, 8, 7, 6, 5));\n         googleMfaAuthAccountService.update(owner, acct);\n         assertEquals(1, googleMfaAuthAccountService.list().getTotalCount());\n-        acct = googleMfaAuthAccountService.readFor(owner).getResult().get(0);\n+        acct = googleMfaAuthAccountService.read(owner).getResult().get(0);\n         assertEquals(acct.getSecretKey(), acct.getSecretKey());\n-        googleMfaAuthAccountService.delete(acct.getKey());\n+        googleMfaAuthAccountService.delete(owner);\n     }\n }"},{"sha":"7dcca15c97e6a357a3bb3b991d80641eae2d7be5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/GoogleMfaAuthTokenITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthTokenITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthTokenITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthTokenITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -49,7 +49,7 @@ private static GoogleMfaAuthToken createGoogleMfaAuthToken() {\n \n     @BeforeEach\n     public void setup() {\n-        googleMfaAuthTokenService.delete(null);\n+        googleMfaAuthTokenService.delete((Date) null);\n     }\n \n     @Test\n@@ -64,7 +64,7 @@ public void count() {\n         GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n         googleMfaAuthTokenService.store(owner, token);\n         assertEquals(1, googleMfaAuthTokenService.list().getTotalCount());\n-        assertEquals(1, googleMfaAuthTokenService.readFor(owner).getTotalCount());\n+        assertEquals(1, googleMfaAuthTokenService.read(owner).getTotalCount());\n     }\n \n     @Test\n@@ -87,16 +87,16 @@ public void deleteByToken() {\n         GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n         googleMfaAuthTokenService.store(owner, token);\n         googleMfaAuthTokenService.delete(token.getOtp());\n-        assertTrue(googleMfaAuthTokenService.readFor(owner).getResult().isEmpty());\n+        assertTrue(googleMfaAuthTokenService.read(owner).getResult().isEmpty());\n     }\n \n     @Test\n-    public void deleteByOwner() {\n+    public void delete() {\n         String owner = UUID.randomUUID().toString();\n         GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n         googleMfaAuthTokenService.store(owner, token);\n-        googleMfaAuthTokenService.deleteFor(owner);\n-        assertTrue(googleMfaAuthTokenService.readFor(owner).getResult().isEmpty());\n+        googleMfaAuthTokenService.delete(owner);\n+        assertTrue(googleMfaAuthTokenService.read(owner).getResult().isEmpty());\n     }\n \n     @Test\n@@ -105,7 +105,7 @@ public void deleteByOwnerAndToken() {\n         GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n         googleMfaAuthTokenService.store(owner, token);\n         googleMfaAuthTokenService.delete(owner, token.getOtp());\n-        assertTrue(googleMfaAuthTokenService.readFor(owner).getResult().isEmpty());\n+        assertTrue(googleMfaAuthTokenService.read(owner).getResult().isEmpty());\n     }\n \n     @Test\n@@ -114,7 +114,7 @@ public void deleteByDate() {\n         Date dateTime = Date.from(LocalDateTime.now().minusDays(1).atZone(ZoneId.systemDefault()).toInstant());\n         createGoogleMfaAuthToken();\n         googleMfaAuthTokenService.delete(dateTime);\n-        assertTrue(googleMfaAuthTokenService.readFor(owner).getResult().isEmpty());\n-        assertEquals(0, googleMfaAuthTokenService.readFor(owner).getTotalCount());\n+        assertTrue(googleMfaAuthTokenService.read(owner).getResult().isEmpty());\n+        assertEquals(0, googleMfaAuthTokenService.read(owner).getTotalCount());\n     }\n }"},{"sha":"cb21e560ee4586712980de4723ad3cd90254c7da","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/ImpersonationITCase.java","status":"modified","additions":9,"deletions":31,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FImpersonationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FImpersonationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FImpersonationITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -16,49 +16,27 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.fit.core.wa;\n \n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n \n-import javax.ws.rs.core.Response;\n-\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.fail;\n-\n public class ImpersonationITCase extends AbstractITCase {\n+\n     @Test\n     public void createAndFind() {\n-        ImpersonationAccount account = new ImpersonationAccount.Builder()\n-            .owner(getUUIDString())\n-            .key(getUUIDString())\n-            .build();\n+        String owner = getUUIDString();\n+        ImpersonationAccount account = new ImpersonationAccount.Builder().impersonated(getUUIDString()).build();\n \n-        Response response = impersonationService.create(account);\n-        assertNotNull(response);\n+        impersonationService.create(owner, account);\n \n-        assertFalse(impersonationService.findByOwner(account.getOwner()).isEmpty());\n-        account = impersonationService.find(account.getOwner(), account.getKey());\n-        assertNotNull(account);\n+        assertTrue(impersonationService.read(owner).contains(account));\n \n-        impersonationService.update(account);\n-        account = impersonationService.find(account.getOwner(), account.getKey());\n-        assertNotNull(account);\n+        impersonationService.delete(owner, account.getImpersonated());\n \n-        response = impersonationService.delete(account.getOwner(), account.getKey());\n-        assertNotNull(response);\n-        \n-        try {\n-            impersonationService.find(account.getOwner(), account.getKey());\n-            fail(\"Should not happen\");\n-        } catch (final SyncopeClientException e) {\n-           assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n-        }\n+        assertTrue(impersonationService.read(owner).isEmpty());\n     }\n }"},{"sha":"99b132f25c82522817f8ccce2295f3b3561a3736","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/U2FRegistrationITCase.java","status":"modified","additions":6,"deletions":27,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FU2FRegistrationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FU2FRegistrationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FU2FRegistrationITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -20,18 +20,14 @@\n \n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.time.LocalDate;\n import java.time.ZoneId;\n import java.util.Date;\n import java.util.List;\n import java.util.UUID;\n-import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.wa.U2FDevice;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.U2FDeviceQuery;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.BeforeEach;\n@@ -66,9 +62,7 @@ public void create() {\n     public void count() {\n         String owner = UUID.randomUUID().toString();\n         U2FDevice device = createDeviceRegistration();\n-        Response response = u2FRegistrationService.create(owner, device);\n-        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n-        assertNotNull(u2FRegistrationService.read(key));\n+        u2FRegistrationService.create(owner, device);\n \n         List<U2FDevice> devices = u2FRegistrationService.search(\n                 new U2FDeviceQuery.Builder().owner(owner).expirationDate(\n@@ -85,12 +79,12 @@ public void count() {\n     @Test\n     public void delete() {\n         U2FDevice device = createDeviceRegistration();\n-        Response response = u2FRegistrationService.create(UUID.randomUUID().toString(), device);\n-        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n-        assertNotNull(u2FRegistrationService.read(key));\n+        String owner = UUID.randomUUID().toString();\n+        u2FRegistrationService.create(owner, device);\n \n-        u2FRegistrationService.delete(new U2FDeviceQuery.Builder().entityKey(key).build());\n-        assertNull(u2FRegistrationService.read(key));\n+        u2FRegistrationService.delete(new U2FDeviceQuery.Builder().owner(owner).build());\n+        assertTrue(u2FRegistrationService.search(\n+                new U2FDeviceQuery.Builder().owner(owner).build()).getResult().isEmpty());\n \n         Date date = Date.from(LocalDate.now().plusDays(1)\n                 .atStartOfDay(ZoneId.systemDefault()).toInstant());\n@@ -100,19 +94,4 @@ public void delete() {\n         assertTrue(u2FRegistrationService.search(\n                 new U2FDeviceQuery.Builder().expirationDate(date).build()).getResult().isEmpty());\n     }\n-\n-    @Test\n-    public void update() {\n-        U2FDevice device = createDeviceRegistration();\n-        Response response = u2FRegistrationService.create(UUID.randomUUID().toString(), device);\n-        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n-        device = u2FRegistrationService.read(key);\n-        assertNotNull(device);\n-\n-        device.setRecord(\"newRecord\");\n-        u2FRegistrationService.update(device);\n-\n-        device = u2FRegistrationService.read(key);\n-        assertEquals(\"newRecord\", device.getRecord());\n-    }\n }"},{"sha":"43677ad3cfbd51405f1b6540f2566f4c50b64e8b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/WAClientAppITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAClientAppITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -34,8 +34,8 @@\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n-import org.apache.syncope.common.lib.to.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n+import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -68,7 +68,7 @@ public void list() {\n \n     @Test\n     public void read() {\n-        OIDCRPTO oidcrpto = createClientApp(ClientAppType.OIDCRP, buildOIDCRP());\n+        OIDCRPClientAppTO oidcrpto = createClientApp(ClientAppType.OIDCRP, buildOIDCRP());\n         WAClientApp waClientApp = waClientAppService.read(oidcrpto.getClientAppId(), null);\n         assertNotNull(waClientApp);\n \n@@ -81,7 +81,7 @@ public void read() {\n         waClientApp = waClientAppService.read(oidcrpto.getName(), ClientAppType.OIDCRP);\n         assertNotNull(waClientApp);\n \n-        SAML2SPTO samlspto = createClientApp(ClientAppType.SAML2SP, buildSAML2SP());\n+        SAML2SPClientAppTO samlspto = createClientApp(ClientAppType.SAML2SP, buildSAML2SP());\n         WAClientApp registeredSamlClientApp = waClientAppService.read(samlspto.getClientAppId(), null);\n         assertNotNull(registeredSamlClientApp);\n \n@@ -97,7 +97,7 @@ public void read() {\n \n     @Test\n     public void readWithPolicies() {\n-        OIDCRPTO oidcrpto = buildOIDCRP();\n+        OIDCRPClientAppTO oidcrpto = buildOIDCRP();\n \n         AuthPolicyTO authPolicyTO = createPolicy(PolicyType.AUTH, buildAuthPolicyTO(AUTH_MODULE));\n "},{"sha":"a9a8c3dff305535d36688f37e30cf7469c617a6c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/WebAuthnAccountITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWebAuthnAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWebAuthnAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWebAuthnAccountITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -59,25 +59,25 @@ public void listAndFind() {\n         WebAuthnAccount acct = createWebAuthnRegisteredAccount();\n         webAuthnRegistrationService.create(owner, acct);\n         assertFalse(webAuthnRegistrationService.list().isEmpty());\n-        assertNotNull(webAuthnRegistrationService.readFor(owner));\n+        assertNotNull(webAuthnRegistrationService.read(owner));\n     }\n \n     @Test\n     public void deleteByOwner() {\n         String owner = UUID.randomUUID().toString();\n         WebAuthnAccount acct = createWebAuthnRegisteredAccount();\n         webAuthnRegistrationService.create(owner, acct);\n-        assertNotNull(webAuthnRegistrationService.delete(owner));\n-        assertThrows(SyncopeClientException.class, () -> webAuthnRegistrationService.readFor(owner));\n+        webAuthnRegistrationService.delete(owner);\n+        assertThrows(SyncopeClientException.class, () -> webAuthnRegistrationService.read(owner));\n     }\n \n     @Test\n     public void deleteByAcct() {\n         String owner = UUID.randomUUID().toString();\n         WebAuthnAccount acct = createWebAuthnRegisteredAccount();\n         webAuthnRegistrationService.create(owner, acct);\n-        assertNotNull(webAuthnRegistrationService.delete(owner, acct.getCredentials().get(0).getIdentifier()));\n-        acct = webAuthnRegistrationService.readFor(owner);\n+        webAuthnRegistrationService.delete(owner, acct.getCredentials().get(0).getIdentifier());\n+        acct = webAuthnRegistrationService.read(owner);\n         assertTrue(acct.getCredentials().isEmpty());\n     }\n "},{"sha":"ce42c1be16d470e279f8536c7390edded7461324","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -41,16 +41,16 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.rest.api.service.ClientAppService;\n+import org.apache.syncope.common.rest.api.service.OIDCC4UIProviderService;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPEntityService;\n+import org.apache.syncope.common.rest.api.service.SAML2SP4UIIdPService;\n import org.apache.syncope.common.rest.api.service.SRARouteService;\n+import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.fit.sra.AbstractSRAITCase;\n import org.junit.jupiter.api.BeforeAll;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.apache.syncope.common.rest.api.service.SAML2SP4UIIdPService;\n-import org.apache.syncope.common.rest.api.service.UserService;\n-import org.apache.syncope.common.rest.api.service.OIDCC4UIProviderService;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n \n public class AbstractITCase {\n \n@@ -101,12 +101,12 @@ public static void restSetup() {\n \n     @BeforeAll\n     public static void waitForWARefresh() {\n-        SAML2IdPMetadataService samlIdPMetadataService = adminClient.getService(SAML2IdPMetadataService.class);\n+        SAML2IdPEntityService samlIdPEntityService = adminClient.getService(SAML2IdPEntityService.class);\n \n         await().atMost(50, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             boolean refreshed = false;\n             try {\n-                samlIdPMetadataService.readFor(SAML2IdPMetadataService.DEFAULT_OWNER);\n+                samlIdPEntityService.get(SAML2IdPEntityService.DEFAULT_OWNER);\n                 refreshed = true;\n             } catch (Exception e) {\n                 // ignore"},{"sha":"7c6c8b411cf7677e26022c3b2769f3e365bd4803","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/CASSRAITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FCASSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FCASSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FCASSRAITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -45,7 +45,7 @@\n import org.apache.http.impl.client.HttpClients;\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.util.EntityUtils;\n-import org.apache.syncope.common.lib.to.CASSPTO;\n+import org.apache.syncope.common.lib.to.CASSPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.junit.jupiter.api.BeforeAll;\n@@ -63,12 +63,12 @@ public static void startSRA() throws IOException, InterruptedException, TimeoutE\n     @BeforeAll\n     public static void clientAppSetup() {\n         String appName = CASSRAITCase.class.getName();\n-        CASSPTO clientApp = clientAppService.list(ClientAppType.CASSP).stream().\n+        CASSPClientAppTO clientApp = clientAppService.list(ClientAppType.CASSP).stream().\n                 filter(app -> appName.equals(app.getName())).\n-                map(CASSPTO.class::cast).\n+                map(CASSPClientAppTO.class::cast).\n                 findFirst().\n                 orElseGet(() -> {\n-                    CASSPTO app = new CASSPTO();\n+                    CASSPClientAppTO app = new CASSPClientAppTO();\n                     app.setName(appName);\n                     app.setClientAppId(4L);\n                     app.setServiceId(\"http://localhost:8080/.*\");"},{"sha":"6369ad483612a23e840f0f34218e0f2d66b9b830","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/OIDCSRAITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -57,7 +57,7 @@\n import org.apache.http.impl.client.HttpClients;\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.util.EntityUtils;\n-import org.apache.syncope.common.lib.to.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -86,12 +86,12 @@ protected static void oidcClientAppSetup(\n             final String clientId,\n             final String clientSecret) {\n \n-        OIDCRPTO clientApp = clientAppService.list(ClientAppType.OIDCRP).stream().\n+        OIDCRPClientAppTO clientApp = clientAppService.list(ClientAppType.OIDCRP).stream().\n                 filter(app -> appName.equals(app.getName())).\n-                map(OIDCRPTO.class::cast).\n+                map(OIDCRPClientAppTO.class::cast).\n                 findFirst().\n                 orElseGet(() -> {\n-                    OIDCRPTO app = new OIDCRPTO();\n+                    OIDCRPClientAppTO app = new OIDCRPClientAppTO();\n                     app.setName(appName);\n                     app.setClientAppId(clientAppId);\n                     app.setClientId(clientId);"},{"sha":"0cd2e5c0344388796f687088e83a3ab62a39f756","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/SAML2SRAITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -46,7 +46,7 @@\n import org.apache.http.impl.client.HttpClients;\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.util.EntityUtils;\n-import org.apache.syncope.common.lib.to.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -65,12 +65,12 @@ public static void startSRA() throws IOException, InterruptedException, TimeoutE\n     @BeforeAll\n     public static void clientAppSetup() {\n         String appName = SAML2SRAITCase.class.getName();\n-        SAML2SPTO clientApp = clientAppService.list(ClientAppType.SAML2SP).stream().\n+        SAML2SPClientAppTO clientApp = clientAppService.list(ClientAppType.SAML2SP).stream().\n                 filter(app -> appName.equals(app.getName())).\n-                map(SAML2SPTO.class::cast).\n+                map(SAML2SPClientAppTO.class::cast).\n                 findFirst().\n                 orElseGet(() -> {\n-                    SAML2SPTO app = new SAML2SPTO();\n+                    SAML2SPClientAppTO app = new SAML2SPClientAppTO();\n                     app.setName(appName);\n                     app.setClientAppId(3L);\n                     app.setEntityId(SRA_ADDRESS);"},{"sha":"020677d345ee20623801e9568b914a385a87b56d","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/OIDC4UIITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -47,7 +47,7 @@\n import org.apache.syncope.client.ui.commons.panels.OIDCC4UIConstants;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.OIDCC4UIProviderTO;\n-import org.apache.syncope.common.lib.to.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -56,12 +56,12 @@\n public class OIDC4UIITCase extends AbstractUIITCase {\n \n     private static void clientAppSetup(final String appName, final String baseAddress, final long appId) {\n-        OIDCRPTO clientApp = clientAppService.list(ClientAppType.OIDCRP).stream().\n+        OIDCRPClientAppTO clientApp = clientAppService.list(ClientAppType.OIDCRP).stream().\n                 filter(app -> appName.equals(app.getName())).\n-                map(OIDCRPTO.class::cast).\n+                map(OIDCRPClientAppTO.class::cast).\n                 findFirst().\n                 orElseGet(() -> {\n-                    OIDCRPTO app = new OIDCRPTO();\n+                    OIDCRPClientAppTO app = new OIDCRPClientAppTO();\n                     app.setName(appName);\n                     app.setClientAppId(appId);\n                     app.setClientId(appName);"},{"sha":"9f76428a80d7f5e69dedaafa213fce0d84f8aa19","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/SAML2SP4UIITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -49,7 +49,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.SAML2SP4UIIdPTO;\n-import org.apache.syncope.common.lib.to.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -58,12 +58,12 @@\n public class SAML2SP4UIITCase extends AbstractUIITCase {\n \n     private static void clientAppSetup(final String appName, final String entityId, final long appId) {\n-        SAML2SPTO clientApp = clientAppService.list(ClientAppType.SAML2SP).stream().\n+        SAML2SPClientAppTO clientApp = clientAppService.list(ClientAppType.SAML2SP).stream().\n                 filter(app -> appName.equals(app.getName())).\n-                map(SAML2SPTO.class::cast).\n+                map(SAML2SPClientAppTO.class::cast).\n                 findFirst().\n                 orElseGet(() -> {\n-                    SAML2SPTO app = new SAML2SPTO();\n+                    SAML2SPClientAppTO app = new SAML2SPClientAppTO();\n                     app.setName(appName);\n                     app.setClientAppId(appId);\n                     app.setEntityId(entityId);"},{"sha":"81e6d7ec0782b512e0a659fca9bf09f94a43f09b","filename":"pom.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -406,7 +406,7 @@ under the License.\n \n     <cxf.version>3.4.3</cxf.version>\n     <bouncycastle.version>1.68</bouncycastle.version>\n-    <nimbus-jose-jwt.version>9.8</nimbus-jose-jwt.version>\n+    <nimbus-jose-jwt.version>9.8.1</nimbus-jose-jwt.version>\n \n     <jackson.version>2.12.2</jackson.version>\n \n@@ -475,8 +475,8 @@ under the License.\n \n     <wicket.version>9.3.0</wicket.version>\n     <wicketstuff.version>9.3.0</wicketstuff.version>\n-    <wicket-jqueryui.version>9.2.1</wicket-jqueryui.version>\n-    <wicket-bootstrap.version>5.0.3</wicket-bootstrap.version>\n+    <wicket-jqueryui.version>9.3.1</wicket-jqueryui.version>\n+    <wicket-bootstrap.version>5.0.4</wicket-bootstrap.version>\n     <wicket-spring-boot.version>3.0.4</wicket-spring-boot.version>\n \n     <ianal-maven-plugin-version>1.0-alpha-1</ianal-maven-plugin-version>\n@@ -511,7 +511,7 @@ under the License.\n     <cargo.log>${log.directory}/cargo.log</cargo.log>\n     <cargo.output>${log.directory}/cargo-output.log</cargo.output>\n \n-    <tomcat.version>9.0.44</tomcat.version>\n+    <tomcat.version>9.0.45</tomcat.version>\n     <wildfly.version>21.0.1.Final</wildfly.version>\n     <payara.version>5.2021.2</payara.version>\n     <javax.faces.version>2.3.14</javax.faces.version>"},{"sha":"a2cfdcb98f1c78b6a9029090322e79d70d08797f","filename":"src/site/site.xml","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/src%2Fsite%2Fsite.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/src%2Fsite%2Fsite.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fsite%2Fsite.xml?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -100,8 +100,11 @@ Apache, Syncope, Apache Syncope, the Apache feather logo and the Apache Syncope\n       <a href=\"https://travis-ci.com/github/apache/syncope\">\n         <img src=\"https://api.travis-ci.com/apache/syncope.png\" style=\"vertical-align: top\"/>\n       </a>\n-      <a href=\"https://ci.appveyor.com/project/ApacheSoftwareFoundation/syncope\">\n-        <img src=\"https://ci.appveyor.com/api/projects/status/k3moao48iilrq2pw?svg=true\" style=\"vertical-align: top\"/>\n+      <a href=\"https://github.com/apache/syncope/actions/workflows/crosschecks.yml\">\n+        <img src=\"https://github.com/apache/syncope/actions/workflows/crosschecks.yml/badge.svg\" style=\"max-width:100%;vertical-align: top\">\n+      </a>\n+      <a href=\"https://github.com/apache/syncope/actions/workflows/codeql-analysis.yml\">\n+        <img src=\"https://github.com/apache/syncope/actions/workflows/codeql-analysis.yml/badge.svg\" style=\"max-width:100%;vertical-align: top\">\n       </a>\n     </div>\n       ]]>"},{"sha":"f434f77888e9f5d84a6418ac1134e0e543230014","filename":"src/site/xdoc/integration.xml","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/src%2Fsite%2Fxdoc%2Fintegration.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/src%2Fsite%2Fxdoc%2Fintegration.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fsite%2Fxdoc%2Fintegration.xml?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -40,10 +40,13 @@ under the License.\n       </p>\n     </section>\n     \n-    <section name=\"AppVeyor\">\n+    <section name=\"GitHub Actions\">\n       <p>\n-        <a href=\"https://ci.appveyor.com/project/ApacheSoftwareFoundation/syncope\">\n-          <img src=\"https://ci.appveyor.com/api/projects/status/k3moao48iilrq2pw?svg=true\"/>\n+        <a href=\"https://github.com/apache/syncope/actions/workflows/crosschecks.yml\">\n+          <img src=\"https://github.com/apache/syncope/actions/workflows/crosschecks.yml/badge.svg\" style=\"max-width:100%;\">\n+        </a>\n+        <a href=\"https://github.com/apache/syncope/actions/workflows/codeql-analysis.yml\">\n+          <img src=\"https://github.com/apache/syncope/actions/workflows/codeql-analysis.yml/badge.svg\" style=\"max-width:100%;\">\n         </a>\n       </p>\n     </section>"},{"sha":"39066d9cadad19df6e26434b7b1ea4ef36e53f01","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":23,"deletions":17,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -40,14 +40,14 @@\n import org.apache.syncope.wa.starter.mapping.AttrReleaseMapper;\n import org.apache.syncope.wa.starter.mapping.AuthMapFor;\n import org.apache.syncope.wa.starter.mapping.AuthMapper;\n-import org.apache.syncope.wa.starter.mapping.CASSPTOMapper;\n+import org.apache.syncope.wa.starter.mapping.CASSPClientAppTOMapper;\n import org.apache.syncope.wa.starter.mapping.ClientAppMapFor;\n import org.apache.syncope.wa.starter.mapping.ClientAppMapper;\n import org.apache.syncope.wa.starter.mapping.DefaultAccessMapper;\n import org.apache.syncope.wa.starter.mapping.DefaultAuthMapper;\n-import org.apache.syncope.wa.starter.mapping.OIDCRPTOMapper;\n+import org.apache.syncope.wa.starter.mapping.OIDCRPClientAppTOMapper;\n import org.apache.syncope.wa.starter.mapping.RegisteredServiceMapper;\n-import org.apache.syncope.wa.starter.mapping.SAML2SPTOMapper;\n+import org.apache.syncope.wa.starter.mapping.SAML2SPClientAppTOMapper;\n import org.apache.syncope.wa.starter.oidc.SyncopeWAOIDCJWKSGeneratorService;\n import org.apache.syncope.wa.starter.pac4j.saml.SyncopeWASAML2ClientCustomizer;\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataGenerator;\n@@ -132,34 +132,40 @@ public OpenAPI casSwaggerOpenApi() {\n                         new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"bearer\").bearerFormat(\"JWT\"));\n     }\n \n+    @ConditionalOnMissingBean(name = \"accessMapper\")\n     @Bean\n-    public AttrReleaseMapper allowedAttrReleaseMapper() {\n-        return new DefaultAttrReleaseMapper();\n+    public AccessMapper accessMapper() {\n+        return new DefaultAccessMapper();\n     }\n \n+    @ConditionalOnMissingBean(name = \"attrReleaseMapper\")\n     @Bean\n-    public ClientAppMapper casSPTOMapper() {\n-        return new CASSPTOMapper();\n+    public AttrReleaseMapper attrReleaseMapper() {\n+        return new DefaultAttrReleaseMapper();\n     }\n \n+    @ConditionalOnMissingBean(name = \"authMapper\")\n     @Bean\n-    public AccessMapper defaultAccessMapper() {\n-        return new DefaultAccessMapper();\n+    public AuthMapper authMapper() {\n+        return new DefaultAuthMapper();\n     }\n \n+    @ConditionalOnMissingBean(name = \"casSPClientAppTOMapper\")\n     @Bean\n-    public AuthMapper defaultAuthMapper() {\n-        return new DefaultAuthMapper();\n+    public ClientAppMapper casSPClientAppTOMapper() {\n+        return new CASSPClientAppTOMapper();\n     }\n \n+    @ConditionalOnMissingBean(name = \"oidcRPClientAppTOMapper\")\n     @Bean\n-    public ClientAppMapper oidcRPTOMapper() {\n-        return new OIDCRPTOMapper();\n+    public ClientAppMapper oidcRPClientAppTOMapper() {\n+        return new OIDCRPClientAppTOMapper();\n     }\n \n+    @ConditionalOnMissingBean(name = \"saml2SPClientAppTOMapper\")\n     @Bean\n-    public ClientAppMapper saml2SPTOMapper() {\n-        return new SAML2SPTOMapper();\n+    public ClientAppMapper saml2SPClientAppTOMapper() {\n+        return new SAML2SPClientAppTOMapper();\n     }\n \n     @ConditionalOnMissingBean\n@@ -233,7 +239,7 @@ public SamlIdPMetadataGenerator samlIdPMetadataGenerator(final WARestClient rest\n     @Bean\n     public SamlIdPMetadataLocator samlIdPMetadataLocator(final WARestClient restClient) {\n         return new RestfulSamlIdPMetadataLocator(CipherExecutor.noOpOfStringToString(),\n-            Caffeine.newBuilder().build(), restClient);\n+                Caffeine.newBuilder().build(), restClient);\n     }\n \n     @Autowired\n@@ -310,7 +316,7 @@ public U2FDeviceRepository u2fDeviceRepository(final WARestClient restClient) {\n     public SurrogateAuthenticationService surrogateAuthenticationService(final WARestClient restClient) {\n         return new SyncopeWASurrogateAuthenticationService(restClient);\n     }\n-    \n+\n     @Bean\n     public KeymasterStart keymasterStart() {\n         return new KeymasterStart(NetworkService.Type.WA);"},{"sha":"3b8b1022c6a717bb3742b1c5c89d0765e98aba4b","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/SyncopeWAGoogleMfaAuthCredentialRepository.java","status":"modified","additions":17,"deletions":34,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthCredentialRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthCredentialRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthCredentialRepository.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -23,11 +23,9 @@\n import java.util.Date;\n import java.util.List;\n import java.util.stream.Collectors;\n-import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthAccountService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.authentication.OneTimeTokenAccount;\n@@ -73,9 +71,8 @@ private static GoogleAuthenticatorAccount mapGoogleMfaAuthAccount(final GoogleMf\n     @Override\n     public OneTimeTokenAccount get(final long id) {\n         try {\n-            GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-                    getService(GoogleMfaAuthAccountService.class);\n-            GoogleMfaAuthAccount account = googleService.read(id);\n+            GoogleMfaAuthAccount account =\n+                    waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).read(id);\n             if (account != null) {\n                 return mapGoogleMfaAuthAccount(account);\n             }\n@@ -92,9 +89,8 @@ public OneTimeTokenAccount get(final long id) {\n     @Override\n     public OneTimeTokenAccount get(final String username, final long id) {\n         try {\n-            GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-                    getService(GoogleMfaAuthAccountService.class);\n-            googleService.readFor(username).getResult().stream().\n+            waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).read(username).\n+                    getResult().stream().\n                     filter(account -> account.getId() == id).\n                     map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n                     collect(Collectors.toList());\n@@ -111,9 +107,8 @@ public OneTimeTokenAccount get(final String username, final long id) {\n     @Override\n     public Collection<? extends OneTimeTokenAccount> get(final String username) {\n         try {\n-            GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-                    getService(GoogleMfaAuthAccountService.class);\n-            googleService.readFor(username).getResult().stream().\n+            waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).read(username).\n+                    getResult().stream().\n                     map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n                     collect(Collectors.toList());\n         } catch (final SyncopeClientException e) {\n@@ -128,17 +123,14 @@ public Collection<? extends OneTimeTokenAccount> get(final String username) {\n \n     @Override\n     public Collection<? extends OneTimeTokenAccount> load() {\n-        GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthAccountService.class);\n-        return googleService.list().getResult().stream().\n+        return waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).list().\n+                getResult().stream().\n                 map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n                 collect(Collectors.toList());\n     }\n \n     @Override\n     public OneTimeTokenAccount save(final OneTimeTokenAccount tokenAccount) {\n-        GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthAccountService.class);\n         GoogleMfaAuthAccount account = new GoogleMfaAuthAccount.Builder()\n                 .registrationDate(new Date())\n                 .scratchCodes(tokenAccount.getScratchCodes())\n@@ -147,46 +139,37 @@ public OneTimeTokenAccount save(final OneTimeTokenAccount tokenAccount) {\n                 .name(tokenAccount.getName())\n                 .id(tokenAccount.getId())\n                 .build();\n-        Response response = googleService.create(tokenAccount.getUsername(), account);\n-        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n-        account.setKey(key);\n+        waRestClient.getSyncopeClient().\n+                getService(GoogleMfaAuthAccountService.class).create(tokenAccount.getUsername(), account);\n         return mapGoogleMfaAuthAccount(account);\n     }\n \n     @Override\n     public OneTimeTokenAccount update(final OneTimeTokenAccount tokenAccount) {\n-        GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthAccountService.class);\n         GoogleMfaAuthAccount acct = mapGoogleMfaAuthAccount(tokenAccount);\n-        googleService.update(tokenAccount.getUsername(), acct);\n+        waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).\n+                update(tokenAccount.getUsername(), acct);\n         return tokenAccount;\n     }\n \n     @Override\n     public void deleteAll() {\n-        GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthAccountService.class);\n-        googleService.delete();\n+        waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).deleteAll();\n     }\n \n     @Override\n     public void delete(final String username) {\n-        GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthAccountService.class);\n-        googleService.deleteFor(username);\n+        waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).delete(username);\n     }\n \n     @Override\n     public long count() {\n-        GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthAccountService.class);\n-        return googleService.list().getTotalCount();\n+        return waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).list().getTotalCount();\n     }\n \n     @Override\n     public long count(final String username) {\n-        GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthAccountService.class);\n-        return googleService.readFor(username).getTotalCount();\n+        return waRestClient.getSyncopeClient().getService(GoogleMfaAuthAccountService.class).\n+                read(username).getTotalCount();\n     }\n }"},{"sha":"35c612c4ae38e56b6183abc65c576953f058fc47","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/SyncopeWAGoogleMfaAuthTokenRepository.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthTokenRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthTokenRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthTokenRepository.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -73,7 +73,7 @@ public OneTimeToken get(final String username, final Integer otp) {\n         try {\n             GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n                     getService(GoogleMfaAuthTokenService.class);\n-            GoogleMfaAuthToken tokenTO = tokenService.readFor(username, otp);\n+            GoogleMfaAuthToken tokenTO = tokenService.read(username, otp);\n             GoogleAuthenticatorToken token = new GoogleAuthenticatorToken(tokenTO.getOtp(), username);\n             LocalDateTime dateTime = tokenTO.getIssueDate().toInstant().atZone(ZoneOffset.UTC).toLocalDateTime();\n             token.setIssuedDateTime(dateTime);\n@@ -95,7 +95,7 @@ public void remove(final String username, final Integer otp) {\n     public void remove(final String username) {\n         GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n                 getService(GoogleMfaAuthTokenService.class);\n-        tokenService.deleteFor(username);\n+        tokenService.delete(username);\n     }\n \n     @Override\n@@ -109,14 +109,14 @@ public void remove(final Integer otp) {\n     public void removeAll() {\n         GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n                 getService(GoogleMfaAuthTokenService.class);\n-        tokenService.delete(null);\n+        tokenService.delete((Date) null);\n     }\n \n     @Override\n     public long count(final String username) {\n         GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n                 getService(GoogleMfaAuthTokenService.class);\n-        return tokenService.readFor(username).getTotalCount();\n+        return tokenService.read(username).getTotalCount();\n     }\n \n     @Override"},{"sha":"5c7baf92c04198f46257994ed4f436514af20bc5","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/CASSPClientAppTOMapper.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPClientAppTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPClientAppTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPClientAppTOMapper.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,16 +18,16 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n-import org.apache.syncope.common.lib.to.CASSPTO;\n+import org.apache.syncope.common.lib.to.CASSPClientAppTO;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.services.RegexRegisteredService;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n \n-@ClientAppMapFor(clientAppClass = CASSPTO.class)\n-public class CASSPTOMapper extends AbstractClientAppMapper {\n+@ClientAppMapFor(clientAppClass = CASSPClientAppTO.class)\n+public class CASSPClientAppTOMapper extends AbstractClientAppMapper {\n \n     @Override\n     public RegisteredService map(\n@@ -36,7 +36,7 @@ public RegisteredService map(\n             final RegisteredServiceAccessStrategy accessStrategy,\n             final RegisteredServiceAttributeReleasePolicy attributeReleasePolicy) {\n \n-        CASSPTO cas = CASSPTO.class.cast(clientApp.getClientAppTO());\n+        CASSPClientAppTO cas = CASSPClientAppTO.class.cast(clientApp.getClientAppTO());\n \n         RegexRegisteredService service = new RegexRegisteredService();\n         service.setServiceId(cas.getServiceId());","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/CASSPTOMapper.java"},{"sha":"f714377cee04f3d8367699f9e08d9c3f5cbea299","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/OIDCRPClientAppTOMapper.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -24,7 +24,7 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n-import org.apache.syncope.common.lib.to.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n import org.apache.syncope.common.lib.types.OIDCGrantType;\n import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n@@ -46,10 +46,10 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationContext;\n \n-@ClientAppMapFor(clientAppClass = OIDCRPTO.class)\n-public class OIDCRPTOMapper extends AbstractClientAppMapper {\n+@ClientAppMapFor(clientAppClass = OIDCRPClientAppTO.class)\n+public class OIDCRPClientAppTOMapper extends AbstractClientAppMapper {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(OIDCRPTOMapper.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(OIDCRPClientAppTOMapper.class);\n \n     private static final String CUSTOM_SCOPE = \"syncope\";\n \n@@ -60,7 +60,7 @@ public RegisteredService map(\n             final RegisteredServiceAccessStrategy accessStrategy,\n             final RegisteredServiceAttributeReleasePolicy attributeReleasePolicy) {\n \n-        OIDCRPTO rp = OIDCRPTO.class.cast(clientApp.getClientAppTO());\n+        OIDCRPClientAppTO rp = OIDCRPClientAppTO.class.cast(clientApp.getClientAppTO());\n         OidcRegisteredService service = new OidcRegisteredService();\n         setCommon(service, rp);\n ","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/OIDCRPTOMapper.java"},{"sha":"daed8f610302ac125d41593f34e14be8cc312fb0","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/SAML2SPClientAppTOMapper.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPClientAppTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPClientAppTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPClientAppTOMapper.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -20,16 +20,16 @@\n \n import java.util.Optional;\n import java.util.stream.Collectors;\n-import org.apache.syncope.common.lib.to.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n import org.apereo.cas.support.saml.services.SamlRegisteredService;\n \n-@ClientAppMapFor(clientAppClass = SAML2SPTO.class)\n-public class SAML2SPTOMapper extends AbstractClientAppMapper {\n+@ClientAppMapFor(clientAppClass = SAML2SPClientAppTO.class)\n+public class SAML2SPClientAppTOMapper extends AbstractClientAppMapper {\n \n     @Override\n     public RegisteredService map(\n@@ -38,7 +38,7 @@ public RegisteredService map(\n             final RegisteredServiceAccessStrategy accessStrategy,\n             final RegisteredServiceAttributeReleasePolicy attributeReleasePolicy) {\n \n-        SAML2SPTO sp = SAML2SPTO.class.cast(clientApp.getClientAppTO());\n+        SAML2SPClientAppTO sp = SAML2SPClientAppTO.class.cast(clientApp.getClientAppTO());\n         SamlRegisteredService service = new SamlRegisteredService();\n         setCommon(service, sp);\n ","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/SAML2SPTOMapper.java"},{"sha":"11944babc6ac1e30af6f6d6b330086776b03113d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/oidc/SyncopeWAOIDCJWKSGeneratorService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FSyncopeWAOIDCJWKSGeneratorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FSyncopeWAOIDCJWKSGeneratorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FSyncopeWAOIDCJWKSGeneratorService.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -59,7 +59,7 @@ public Resource generate() {\n         OIDCJWKSService service = waRestClient.getSyncopeClient().getService(OIDCJWKSService.class);\n         OIDCJWKSTO jwksTO = null;\n         try {\n-            jwksTO = service.get();\n+            jwksTO = service.read();\n         } catch (SyncopeClientException e) {\n             if (e.getType() == ClientExceptionType.NotFound) {\n                 try {"},{"sha":"0ae4c16af2e4ebea668b3799d179a56a5d4e477c","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientCustomizer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizer.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -41,7 +41,7 @@ public SyncopeWASAML2ClientCustomizer(final WARestClient restClient) {\n     public void customize(final Client client) {\n         if (client instanceof SAML2Client) {\n             LOG.debug(\"Customizing SAML2 client {}\", client.getName());\n-            final SAML2Client saml2Client = (SAML2Client) client;\n+            SAML2Client saml2Client = (SAML2Client) client;\n             SAML2Configuration configuration = saml2Client.getConfiguration();\n             configuration.setKeystoreGenerator(new SyncopeWASAML2ClientKeystoreGenerator(restClient, saml2Client));\n             configuration.setMetadataGenerator(new SyncopeWASAML2ClientMetadataGenerator(restClient, saml2Client));"},{"sha":"113a826848e86723c7f572fa372d1b983ccc6b60","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientKeystoreGenerator.java","status":"modified","additions":25,"deletions":33,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGenerator.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -25,11 +25,8 @@\n import java.security.PrivateKey;\n import java.security.cert.X509Certificate;\n import java.util.Base64;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreService;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n+import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.metadata.keystore.BaseSAML2KeystoreGenerator;\n@@ -56,50 +53,45 @@ public boolean shouldGenerate() {\n     }\n \n     @Override\n-    protected void store(final KeyStore ks, final X509Certificate certificate,\n-            final PrivateKey privateKey) throws Exception {\n+    protected void store(final KeyStore ks, final X509Certificate certificate, final PrivateKey privateKey)\n+            throws Exception {\n+\n         try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n             char[] password = saml2Configuration.getKeystorePassword().toCharArray();\n             ks.store(out, password);\n             out.flush();\n             String encodedKeystore = Base64.getEncoder().encodeToString(out.toByteArray());\n             LOG.debug(\"Encoded keystore {}\", encodedKeystore);\n \n-            SAML2SPKeystoreService keystoreService = restClient.getSyncopeClient().\n-                    getService(SAML2SPKeystoreService.class);\n-\n-            SAML2SPKeystoreTO keystoreTO = new SAML2SPKeystoreTO.Builder().\n-                    keystore(encodedKeystore).\n-                    owner(saml2Client.getName()).\n-                    build();\n+            SAML2SPEntityTO entityTO;\n+            try {\n+                entityTO = restClient.getSyncopeClient().getService(SAML2SPEntityService.class).\n+                        get(saml2Client.getName());\n+                entityTO.setKeystore(encodedKeystore);\n+            } catch (Exception e) {\n+                LOG.debug(\"SP Entity {} not found, creating new\", saml2Client.getName(), e);\n \n-            LOG.debug(\"Storing keystore {}\", keystoreTO);\n-            Response response = keystoreService.set(keystoreTO);\n-            if (response.getStatus() == Response.Status.CREATED.getStatusCode()) {\n-                LOG.info(\"Stored keystore for SAML2 SP {}\", saml2Client.getName());\n-            } else if (response.getStatus() == Response.Status.CONFLICT.getStatusCode()) {\n-                LOG.info(\"Stored keystore for SAML2 SP {} already exists\", saml2Client.getName());\n-            } else {\n-                LOG.error(\"Unexpected response when storing SAML2 SP keystore: {}\\n{}\",\n-                        response.getStatus(), response.getHeaders());\n-                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-                sce.getElements().add(\"Unexpected response when storing SAML2 SP keystore\");\n-                throw sce;\n+                entityTO = new SAML2SPEntityTO.Builder().\n+                        key(saml2Client.getName()).\n+                        keystore(encodedKeystore).\n+                        build();\n             }\n+\n+            LOG.debug(\"Storing SP Entity {}\", entityTO);\n+            restClient.getSyncopeClient().getService(SAML2SPEntityService.class).set(entityTO);\n         }\n     }\n \n     @Override\n     public InputStream retrieve() throws Exception {\n         try {\n-            SAML2SPKeystoreService keystoreService = restClient.getSyncopeClient().\n-                    getService(SAML2SPKeystoreService.class);\n-            SAML2SPKeystoreTO keystoreTO = keystoreService.readFor(saml2Client.getName());\n-            LOG.debug(\"Retrieved keystore {}\", keystoreTO);\n-            byte[] decode = Base64.getDecoder().decode(keystoreTO.getKeystore());\n-            return new ByteArrayInputStream(decode);\n+            SAML2SPEntityTO spEntity =\n+                    restClient.getSyncopeClient().getService(SAML2SPEntityService.class).get(saml2Client.getName());\n+\n+            LOG.debug(\"Retrieved keystore {}\", spEntity.getKeystore());\n+            return new ByteArrayInputStream(Base64.getDecoder().decode(spEntity.getKeystore()));\n         } catch (final Exception e) {\n-            final String message = \"Unable to fetch SAML2 SP keystore for \" + saml2Client.getName();\n+            String message = \"Unable to fetch SAML2 SP keystore for \" + saml2Client.getName();\n             LOG.error(message, e);\n             throw new Exception(message);\n         }"},{"sha":"87d9f89725f6ca3f4e0dd3f7b25e0a77168798ef","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientMetadataGenerator.java","status":"modified","additions":31,"deletions":25,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGenerator.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,18 +18,18 @@\n  */\n package org.apache.syncope.wa.starter.pac4j.saml;\n \n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.opensaml.saml.metadata.resolver.impl.AbstractBatchMetadataResolver;\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.metadata.BaseSAML2MetadataGenerator;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.core.io.Resource;\n+import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n+import org.opensaml.saml.metadata.resolver.MetadataResolver;\n \n public class SyncopeWASAML2ClientMetadataGenerator extends BaseSAML2MetadataGenerator {\n \n@@ -50,26 +50,32 @@ protected AbstractBatchMetadataResolver createMetadataResolver(final Resource me\n     }\n \n     @Override\n-    public boolean storeMetadata(final String metadata, final Resource resource, final boolean force) throws Exception {\n-        SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder().\n-                metadata(metadata).\n-                owner(saml2Client.getName()).\n-                build();\n-        LOG.debug(\"Storing metadata {}\", metadataTO);\n-        Response response = restClient.getSyncopeClient().\n-                getService(SAML2SPMetadataService.class).set(metadataTO);\n-        if (response.getStatus() == Response.Status.CREATED.getStatusCode()) {\n-            LOG.info(\"Stored metadata for SAML2 SP {}\", saml2Client.getName());\n-            return true;\n-        }\n-        if (response.getStatus() == Response.Status.CONFLICT.getStatusCode()) {\n-            LOG.info(\"Stored metadata for SAML2 SP {} already exists\", saml2Client.getName());\n-            return true;\n+    public MetadataResolver buildMetadataResolver(final Resource metadataResource) throws Exception {\n+        String encodedMetadata = Base64.getEncoder().encodeToString(\n+                getMetadata(buildEntityDescriptor()).getBytes(StandardCharsets.UTF_8));\n+\n+        SAML2SPEntityTO entityTO;\n+        try {\n+            entityTO = restClient.getSyncopeClient().getService(SAML2SPEntityService.class).\n+                    get(saml2Client.getName());\n+            entityTO.setMetadata(encodedMetadata);\n+        } catch (Exception e) {\n+            LOG.debug(\"SP Entity {} not found, creating new\", saml2Client.getName(), e);\n+\n+            entityTO = new SAML2SPEntityTO.Builder().\n+                    key(saml2Client.getName()).\n+                    metadata(encodedMetadata).\n+                    build();\n         }\n-        LOG.error(\"Unexpected response when storing SAML2 SP metadata: {}\\n{}\",\n-                response.getStatus(), response.getHeaders());\n-        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-        sce.getElements().add(\"Unexpected response when storing SAML2 SP metadata\");\n-        throw sce;\n+\n+        LOG.debug(\"Storing SP Entity {}\", entityTO);\n+        restClient.getSyncopeClient().getService(SAML2SPEntityService.class).set(entityTO);\n+\n+        return super.buildMetadataResolver(metadataResource);\n+    }\n+\n+    @Override\n+    public boolean storeMetadata(final String metadata, final Resource resource, final boolean force) throws Exception {\n+        return true;\n     }\n }"},{"sha":"3eb884b4e21871ccb67d588d2461139ab6f6a13f","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2MetadataResolver.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolver.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolver.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolver.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.wa.starter.pac4j.saml;\n \n-import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n import net.shibboleth.utilities.java.support.resolver.ResolverException;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.opensaml.saml.metadata.resolver.impl.AbstractReloadingMetadataResolver;\n import org.pac4j.saml.client.SAML2Client;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n \n public class SyncopeWASAML2MetadataResolver extends AbstractReloadingMetadataResolver {\n \n@@ -49,9 +49,9 @@ protected String getMetadataIdentifier() {\n     @Override\n     protected byte[] fetchMetadata() throws ResolverException {\n         try {\n-            SAML2SPMetadataTO metadataTO = restClient.getSyncopeClient().\n-                    getService(SAML2SPMetadataService.class).readFor(saml2Client.getName());\n-            return metadataTO.getMetadata().getBytes(StandardCharsets.UTF_8);\n+            SAML2SPEntityTO metadataTO = restClient.getSyncopeClient().\n+                    getService(SAML2SPEntityService.class).get(saml2Client.getName());\n+            return Base64.getDecoder().decode(metadataTO.getMetadata());\n         } catch (final Exception e) {\n             final String message = \"Unable to fetch SP metadata for \" + saml2Client.getName();\n             LOG.error(message, e);"},{"sha":"22560a235c1b749519f8ef6326b0e1082d02991d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataGenerator.java","status":"modified","additions":28,"deletions":20,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -18,20 +18,20 @@\n  */\n package org.apache.syncope.wa.starter.saml.idp.metadata;\n \n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n+import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.support.saml.idp.metadata.generator.BaseSamlIdPMetadataGenerator;\n import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;\n import org.apereo.cas.support.saml.services.SamlRegisteredService;\n import org.apereo.cas.support.saml.services.idp.metadata.SamlIdPMetadataDocument;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpStatus;\n-import javax.ws.rs.core.Response;\n import java.util.Optional;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPEntityService;\n \n public class RestfulSamlIdPMetadataGenerator extends BaseSamlIdPMetadataGenerator {\n \n@@ -53,25 +53,33 @@ protected SamlIdPMetadataDocument finalizeMetadataDocument(\n             final Optional<SamlRegisteredService> registeredService) {\n \n         LOG.info(\"Generating new SAML2 IdP metadata document\");\n-        doc.setAppliesTo(SAML2IdPMetadataService.DEFAULT_OWNER);\n-        SAML2IdPMetadataTO metadataTO = new SAML2IdPMetadataTO.Builder().\n-                metadata(doc.getMetadata()).\n-                encryptionKey(doc.getEncryptionKey()).\n-                encryptionCertificate(doc.getEncryptionCertificate()).\n-                signingCertificate(doc.getSigningCertificate()).\n-                signingKey(doc.getSigningKey()).\n-                appliesTo(doc.getAppliesTo()).\n-                build();\n \n-        SyncopeClient client = getSyncopeClient();\n-        Response response = null;\n-        try {\n-            response = client.getService(SAML2IdPMetadataService.class).set(metadataTO);\n-        } catch (Exception e) {\n-            LOG.warn(\"While generating SAML2 IdP metadata document\", e);\n+        doc.setAppliesTo(SAML2IdPEntityService.DEFAULT_OWNER);\n+\n+        SAML2IdPEntityTO entityTO = new SAML2IdPEntityTO.Builder().\n+                key(doc.getAppliesTo()).\n+                metadata(Base64.getEncoder().encodeToString(doc.getMetadata().getBytes(StandardCharsets.UTF_8))).\n+                build();\n+        if (doc.getSigningKey() != null) {\n+            entityTO.setSigningKey(Base64.getEncoder().encodeToString(\n+                    doc.getSigningKey().getBytes(StandardCharsets.UTF_8)));\n+        }\n+        if (doc.getSigningCertificate() != null) {\n+            entityTO.setSigningCertificate(Base64.getEncoder().encodeToString(\n+                    doc.getSigningCertificate().getBytes(StandardCharsets.UTF_8)));\n         }\n+        if (doc.getEncryptionKey() != null) {\n+            entityTO.setEncryptionKey(Base64.getEncoder().encodeToString(\n+                    doc.getEncryptionKey().getBytes(StandardCharsets.UTF_8)));\n+        }\n+        if (doc.getEncryptionCertificate() != null) {\n+            entityTO.setEncryptionCertificate(Base64.getEncoder().encodeToString(\n+                    doc.getEncryptionCertificate().getBytes(StandardCharsets.UTF_8)));\n+        }\n+\n+        getSyncopeClient().getService(SAML2IdPEntityService.class).set(entityTO);\n \n-        return response != null && HttpStatus.valueOf(response.getStatus()).is2xxSuccessful() ? doc : null;\n+        return doc;\n     }\n \n     @Override"},{"sha":"96c6d35feb83f22d2bb3100e2f58fbccffd814ab","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataLocator.java","status":"modified","additions":32,"deletions":16,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -19,9 +19,11 @@\n package org.apache.syncope.wa.starter.saml.idp.metadata;\n \n import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.scribejava.core.java8.Base64;\n+import java.nio.charset.StandardCharsets;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n+import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.support.saml.idp.metadata.locator.AbstractSamlIdPMetadataLocator;\n@@ -31,7 +33,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import java.util.Optional;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPEntityService;\n \n public class RestfulSamlIdPMetadataLocator extends AbstractSamlIdPMetadataLocator {\n \n@@ -53,15 +55,29 @@ public SamlIdPMetadataDocument fetchInternal(final Optional<SamlRegisteredServic\n         try {\n             LOG.info(\"Locating SAML2 IdP metadata document\");\n \n-            SAML2IdPMetadataTO saml2IdPMetadataTO = fetchFromCore(registeredService);\n-            if (saml2IdPMetadataTO != null) {\n+            SAML2IdPEntityTO entityTO = fetchFromCore(registeredService);\n+            if (entityTO != null) {\n                 SamlIdPMetadataDocument document = new SamlIdPMetadataDocument();\n-                document.setMetadata(saml2IdPMetadataTO.getMetadata());\n-                document.setEncryptionCertificate(saml2IdPMetadataTO.getEncryptionCertificate());\n-                document.setEncryptionKey(saml2IdPMetadataTO.getEncryptionKey());\n-                document.setSigningKey(saml2IdPMetadataTO.getSigningKey());\n-                document.setSigningCertificate(saml2IdPMetadataTO.getSigningCertificate());\n-                document.setAppliesTo(saml2IdPMetadataTO.getAppliesTo());\n+                document.setAppliesTo(entityTO.getKey());\n+                document.setMetadata(new String(Base64.getDecoder().decode(\n+                        entityTO.getMetadata()), StandardCharsets.UTF_8));\n+                if (entityTO.getSigningCertificate() != null) {\n+                    document.setSigningCertificate(new String(Base64.getDecoder().decode(\n+                            entityTO.getSigningCertificate()), StandardCharsets.UTF_8));\n+                }\n+                if (entityTO.getSigningKey() != null) {\n+                    document.setSigningKey((new String(Base64.getDecoder().decode(\n+                            entityTO.getSigningKey()), StandardCharsets.UTF_8)));\n+                }\n+                if (entityTO.getEncryptionCertificate() != null) {\n+                    document.setEncryptionCertificate(new String(Base64.getDecoder().decode(\n+                            entityTO.getEncryptionCertificate()), StandardCharsets.UTF_8));\n+                }\n+                if (entityTO.getEncryptionKey() != null) {\n+                    document.setEncryptionKey((new String(Base64.getDecoder().decode(\n+                            entityTO.getEncryptionKey()), StandardCharsets.UTF_8)));\n+                }\n+\n                 if (document.isValid()) {\n                     LOG.debug(\"Found SAML2 IdP metadata document: {}\", document.getId());\n                     return document;\n@@ -81,17 +97,17 @@ public SamlIdPMetadataDocument fetchInternal(final Optional<SamlRegisteredServic\n         return null;\n     }\n \n-    private SAML2IdPMetadataTO fetchFromCore(final Optional<SamlRegisteredService> registeredService) {\n-        SAML2IdPMetadataTO result = null;\n+    private SAML2IdPEntityTO fetchFromCore(final Optional<SamlRegisteredService> registeredService) {\n+        SAML2IdPEntityTO result = null;\n \n         String appliesToFor = registeredService.map(SamlRegisteredService::getName).\n-                orElse(SAML2IdPMetadataService.DEFAULT_OWNER);\n-        SAML2IdPMetadataService service = getSyncopeClient().getService(SAML2IdPMetadataService.class);\n+                orElse(SAML2IdPEntityService.DEFAULT_OWNER);\n+        SAML2IdPEntityService service = getSyncopeClient().getService(SAML2IdPEntityService.class);\n         try {\n-            result = service.readFor(appliesToFor);\n+            result = service.get(appliesToFor);\n         } catch (SyncopeClientException e) {\n             if (e.getType() == ClientExceptionType.NotFound && registeredService.isPresent()) {\n-                result = service.readFor(SAML2IdPMetadataService.DEFAULT_OWNER);\n+                result = service.get(SAML2IdPEntityService.DEFAULT_OWNER);\n             } else {\n                 throw e;\n             }"},{"sha":"d9a00b6d307e3d7fa3e3addfff5bbe87f276f24f","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/surrogate/SyncopeWASurrogateAuthenticationService.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FSyncopeWASurrogateAuthenticationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FSyncopeWASurrogateAuthenticationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FSyncopeWASurrogateAuthenticationService.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -16,24 +16,22 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.surrogate;\n \n-import org.apereo.cas.authentication.principal.Principal;\n-import org.apereo.cas.authentication.principal.Service;\n-import org.apereo.cas.authentication.surrogate.SurrogateAuthenticationService;\n-\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.common.rest.api.service.wa.ImpersonationService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apereo.cas.authentication.principal.Principal;\n+import org.apereo.cas.authentication.principal.Service;\n+import org.apereo.cas.authentication.surrogate.SurrogateAuthenticationService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.util.Collection;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-\n public class SyncopeWASurrogateAuthenticationService implements SurrogateAuthenticationService {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASurrogateAuthenticationService.class);\n \n     private final WARestClient waRestClient;\n@@ -43,11 +41,13 @@ public SyncopeWASurrogateAuthenticationService(final WARestClient waRestClient)\n     }\n \n     @Override\n-    public boolean canAuthenticateAs(final String surrogate, final Principal principal,\n-                                     final Optional<Service> service) {\n+    public boolean canAuthenticateAs(\n+            final String surrogate, final Principal principal, final Optional<Service> service) {\n+\n         try {\n             LOG.debug(\"Checking impersonation attempt by {} for {}\", principal, surrogate);\n-            return getImpersonationService().find(principal.getId(), surrogate) != null;\n+            return getImpersonationService().read(principal.getId()).stream().\n+                    anyMatch(acct -> surrogate.equals(acct.getImpersonated()));\n         } catch (final Exception e) {\n             LOG.info(\"Could not authorize account {} for owner {}\", surrogate, principal.getId());\n         }\n@@ -56,10 +56,10 @@ public boolean canAuthenticateAs(final String surrogate, final Principal princip\n \n     @Override\n     public Collection<String> getEligibleAccountsForSurrogateToProxy(final String username) {\n-        return getImpersonationService().findByOwner(username).\n-            stream().\n-            map(ImpersonationAccount::getKey).\n-            collect(Collectors.toList());\n+        return getImpersonationService().read(username).\n+                stream().\n+                map(ImpersonationAccount::getImpersonated).\n+                collect(Collectors.toList());\n     }\n \n     private ImpersonationService getImpersonationService() {"},{"sha":"dc610947a15e66bcbed3b0c9c95804af08aac1ec","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/u2f/SyncopeWAU2FDeviceRepository.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FSyncopeWAU2FDeviceRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FSyncopeWAU2FDeviceRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FSyncopeWAU2FDeviceRepository.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -26,8 +26,6 @@\n import java.util.Date;\n import java.util.Objects;\n import java.util.stream.Collectors;\n-import javax.ws.rs.core.GenericType;\n-import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.wa.U2FDevice;\n@@ -106,9 +104,8 @@ public U2FDeviceRegistration registerDevice(final U2FDeviceRegistration registra\n                 record(registration.getRecord()).\n                 id(registration.getId()).\n                 build();\n-        Response response = getU2FService().create(registration.getUsername(), record);\n-        return parseRegistrationRecord(registration.getUsername(), response.readEntity(new GenericType<U2FDevice>() {\n-        }));\n+        getU2FService().create(registration.getUsername(), record);\n+        return parseRegistrationRecord(registration.getUsername(), record);\n     }\n \n     @Override"},{"sha":"4639edd1cd5b3dce8741088cd86d3e7ccd780712","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/webauthn/SyncopeWAWebAuthnCredentialRepository.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FSyncopeWAWebAuthnCredentialRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FSyncopeWAWebAuthnCredentialRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FSyncopeWAWebAuthnCredentialRepository.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -91,7 +91,7 @@ protected void update(final String username, final Collection<CredentialRegistra\n                     })).\n                     collect(Collectors.toList());\n \n-            WebAuthnAccount account = getService().readFor(username);\n+            WebAuthnAccount account = getService().read(username);\n             if (account != null) {\n                 account.getCredentials().addAll(credentials);\n                 getService().update(username, account);\n@@ -107,7 +107,7 @@ protected void update(final String username, final Collection<CredentialRegistra\n     @Override\n     public Collection<CredentialRegistration> getRegistrationsByUsername(final String username) {\n         try {\n-            return getService().readFor(username).getCredentials().stream().\n+            return getService().read(username).getCredentials().stream().\n                     map(Unchecked.function(record -> {\n                         String json = getCipherExecutor().decode(record.getJson());\n                         return WebAuthnUtils.getObjectMapper()"},{"sha":"4104f02d5ff942459a874b382a2dc2e4d9a98df7","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeCoreTestingServer.java","status":"modified","additions":39,"deletions":77,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -19,38 +19,30 @@\n package org.apache.syncope.wa.starter;\n \n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.NotFoundException;\n import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;\n import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.ClientAppType;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n import org.apache.syncope.common.rest.api.service.wa.ImpersonationService;\n import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.event.ContextRefreshedEvent;\n \n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.Response;\n-\n-import java.net.URI;\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.UUID;\n-import java.util.stream.Collectors;\n-\n public class SyncopeCoreTestingServer implements ApplicationListener<ContextRefreshedEvent> {\n \n     public static final List<WAClientApp> APPS = new ArrayList<>();\n@@ -67,16 +59,19 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n                 // 1. start (mocked) Core as embedded CXF\n                 JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean();\n                 sf.setAddress(ADDRESS);\n-                sf.setResourceClasses(WAClientAppService.class, GoogleMfaAuthTokenService.class, ImpersonationService.class);\n+                sf.setResourceClasses(\n+                        WAClientAppService.class,\n+                        GoogleMfaAuthTokenService.class,\n+                        ImpersonationService.class);\n                 sf.setResourceProvider(\n-                    WAClientAppService.class,\n-                    new SingletonResourceProvider(new StubWAClientAppService(), true));\n+                        WAClientAppService.class,\n+                        new SingletonResourceProvider(new StubWAClientAppService(), true));\n                 sf.setResourceProvider(\n-                    GoogleMfaAuthTokenService.class,\n-                    new SingletonResourceProvider(new StubGoogleMfaAuthTokenService(), true));\n+                        GoogleMfaAuthTokenService.class,\n+                        new SingletonResourceProvider(new StubGoogleMfaAuthTokenService(), true));\n                 sf.setResourceProvider(\n-                    ImpersonationService.class,\n-                    new SingletonResourceProvider(new StubImpersonationService(), true));\n+                        ImpersonationService.class,\n+                        new SingletonResourceProvider(new StubImpersonationService(), true));\n                 sf.setProviders(List.of(new JacksonJsonProvider()));\n                 sf.create();\n \n@@ -90,60 +85,35 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n     }\n \n     public static class StubImpersonationService implements ImpersonationService {\n+\n         private final Map<String, List<ImpersonationAccount>> accounts = new HashMap<>();\n \n         @Override\n-        public List<ImpersonationAccount> findByOwner(final String owner) {\n+        public List<ImpersonationAccount> read(final String owner) {\n             return accounts.containsKey(owner) ? accounts.get(owner) : List.of();\n         }\n \n         @Override\n-        public ImpersonationAccount find(final String owner, final String id) {\n-            SyncopeClientException exception = SyncopeClientException.build(ClientExceptionType.DelegatedAdministration);\n-            if (accounts.containsKey(owner)) {\n-                return accounts.get(owner).\n-                    stream().\n-                    filter(acct -> acct.getKey().equalsIgnoreCase(id)).\n-                    findFirst().\n-                    orElseThrow(() -> exception);\n-            }\n-            throw exception;\n-        }\n-\n-        @Override\n-        public Response create(final ImpersonationAccount account) {\n+        public void create(final String owner, final ImpersonationAccount account) {\n             try {\n-                if (accounts.containsKey(account.getOwner())\n-                    && accounts.get(account.getOwner()).\n-                    stream().\n-                    noneMatch(acct -> acct.getKey().equalsIgnoreCase(account.getOwner()))) {\n-                    accounts.get(account.getOwner()).add(account);\n+                if (accounts.containsKey(owner) && accounts.get(owner).stream().\n+                        noneMatch(acct -> acct.getImpersonated().equalsIgnoreCase(account.getImpersonated()))) {\n+\n+                    accounts.get(owner).add(account);\n                 } else {\n                     List<ImpersonationAccount> list = new ArrayList<>();\n                     list.add(account);\n-                    accounts.put(account.getOwner(), list);\n+                    accounts.put(owner, list);\n                 }\n-                return Response.created(new URI(\"wa/impersonation\")).\n-                    header(RESTHeaders.RESOURCE_KEY, account.getKey()).\n-                    build();\n             } catch (final Exception e) {\n                 throw new IllegalStateException(e);\n             }\n         }\n \n         @Override\n-        public Response delete(final String owner, final String id) {\n+        public void delete(final String owner, final String impersonated) {\n             if (accounts.containsKey(owner)) {\n-                accounts.get(owner).removeIf(acct -> acct.getKey().equalsIgnoreCase(id));\n-            }\n-            return Response.noContent().build();\n-        }\n-\n-        @Override\n-        public void update(final ImpersonationAccount account) {\n-            List<ImpersonationAccount> impersonatedAccounts = accounts.get(account.getOwner());\n-            if (impersonatedAccounts.removeIf(acct -> acct.getKey().equals(account.getKey()))) {\n-                impersonatedAccounts.add(account);\n+                accounts.get(owner).removeIf(acct -> acct.getImpersonated().equalsIgnoreCase(impersonated));\n             }\n         }\n     }\n@@ -164,11 +134,11 @@ public void delete(final Date expirationDate) {\n         @Override\n         public void delete(final String owner, final int otp) {\n             tokens.entrySet().\n-                removeIf(e -> e.getValue().getOtp() == otp && e.getKey().equalsIgnoreCase(owner));\n+                    removeIf(e -> e.getValue().getOtp() == otp && e.getKey().equalsIgnoreCase(owner));\n         }\n \n         @Override\n-        public void deleteFor(final String owner) {\n+        public void delete(final String owner) {\n             tokens.entrySet().removeIf(e -> e.getKey().equalsIgnoreCase(owner));\n         }\n \n@@ -179,36 +149,28 @@ public void delete(final int otp) {\n \n         @Override\n         public void store(final String owner, final GoogleMfaAuthToken tokenTO) {\n-            tokenTO.setKey(UUID.randomUUID().toString());\n             tokens.put(owner, tokenTO);\n         }\n \n         @Override\n-        public GoogleMfaAuthToken readFor(final String owner, final int otp) {\n+        public GoogleMfaAuthToken read(final String owner, final int otp) {\n             return tokens.entrySet().stream()\n-                .filter(to -> to.getValue().getOtp() == otp && to.getKey().equalsIgnoreCase(owner))\n-                .findFirst().get().getValue();\n+                    .filter(to -> to.getValue().getOtp() == otp && to.getKey().equalsIgnoreCase(owner))\n+                    .findFirst().get().getValue();\n         }\n \n         @Override\n-        public PagedResult<GoogleMfaAuthToken> readFor(final String user) {\n+        public PagedResult<GoogleMfaAuthToken> read(final String user) {\n             PagedResult<GoogleMfaAuthToken> result = new PagedResult<>();\n             result.getResult().addAll(tokens.entrySet().stream().\n-                filter(to -> to.getKey().equalsIgnoreCase(user)).\n-                map(Map.Entry::getValue).\n-                collect(Collectors.toList()));\n+                    filter(to -> to.getKey().equalsIgnoreCase(user)).\n+                    map(Map.Entry::getValue).\n+                    collect(Collectors.toList()));\n             result.setSize(result.getResult().size());\n             result.setTotalCount(result.getSize());\n             return result;\n         }\n \n-        @Override\n-        public GoogleMfaAuthToken read(final String key) {\n-            return tokens.entrySet().stream()\n-                .filter(to -> to.getKey().equalsIgnoreCase(key))\n-                .findFirst().get().getValue();\n-        }\n-\n         @Override\n         public PagedResult<GoogleMfaAuthToken> list() {\n             PagedResult<GoogleMfaAuthToken> result = new PagedResult<>();\n@@ -229,13 +191,13 @@ public List<WAClientApp> list() {\n         @Override\n         public WAClientApp read(final Long clientAppId, final ClientAppType type) {\n             return APPS.stream().filter(app -> Objects.equals(clientAppId, app.getClientAppTO().getClientAppId())).\n-                findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with clientId \" + clientAppId));\n+                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with clientId \" + clientAppId));\n         }\n \n         @Override\n         public WAClientApp read(final String name, final ClientAppType type) {\n             return APPS.stream().filter(app -> Objects.equals(name, app.getClientAppTO().getName())).\n-                findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with name \" + name));\n+                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with name \" + name));\n         }\n     }\n }"},{"sha":"1919008d9624554c725c63a38b8212fb089002ec","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeWAServiceRegistryTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -31,8 +31,8 @@\n import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n-import org.apache.syncope.common.lib.to.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n+import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.types.OIDCGrantType;\n import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n@@ -59,8 +59,8 @@ public class SyncopeWAServiceRegistryTest extends AbstractTest {\n     @Autowired\n     private ServicesManager servicesManager;\n \n-    private static OIDCRPTO buildOIDCRP() {\n-        OIDCRPTO oidcrpTO = new OIDCRPTO();\n+    private static OIDCRPClientAppTO buildOIDCRP() {\n+        OIDCRPClientAppTO oidcrpTO = new OIDCRPClientAppTO();\n         oidcrpTO.setName(\"ExampleRP_\" + getUUIDString());\n         oidcrpTO.setClientAppId(RandomUtils.nextLong());\n         oidcrpTO.setDescription(\"Example OIDC RP application\");\n@@ -74,8 +74,8 @@ private static OIDCRPTO buildOIDCRP() {\n         return oidcrpTO;\n     }\n \n-    protected SAML2SPTO buildSAML2SP() {\n-        SAML2SPTO saml2spto = new SAML2SPTO();\n+    protected SAML2SPClientAppTO buildSAML2SP() {\n+        SAML2SPClientAppTO saml2spto = new SAML2SPClientAppTO();\n         saml2spto.setName(\"ExampleSAML2SP_\" + getUUIDString());\n         saml2spto.setClientAppId(RandomUtils.nextLong());\n         saml2spto.setDescription(\"Example SAML 2.0 service provider\");\n@@ -149,7 +149,7 @@ public void addClientApp() {\n         assertNotNull(found);\n         assertTrue(found instanceof OidcRegisteredService);\n         OidcRegisteredService oidc = OidcRegisteredService.class.cast(found);\n-        OIDCRPTO oidcrpto = OIDCRPTO.class.cast(waClientApp.getClientAppTO());\n+        OIDCRPClientAppTO oidcrpto = OIDCRPClientAppTO.class.cast(waClientApp.getClientAppTO());\n         assertEquals(\"uri1|uri2\", oidc.getServiceId());\n         assertEquals(oidcrpto.getClientId(), oidc.getClientId());\n         assertEquals(oidcrpto.getClientSecret(), oidc.getClientSecret());\n@@ -174,7 +174,7 @@ public void addClientApp() {\n         found = servicesManager.findServiceBy(clientAppId);\n         assertTrue(found instanceof SamlRegisteredService);\n         SamlRegisteredService saml = SamlRegisteredService.class.cast(found);\n-        SAML2SPTO samlspto = SAML2SPTO.class.cast(waClientApp.getClientAppTO());\n+        SAML2SPClientAppTO samlspto = SAML2SPClientAppTO.class.cast(waClientApp.getClientAppTO());\n         assertEquals(samlspto.getMetadataLocation(), saml.getMetadataLocation());\n         assertEquals(samlspto.getEntityId(), saml.getServiceId());\n         assertTrue(saml.getAuthenticationPolicy().getRequiredAuthenticationHandlers().contains(\"TestAuthModule\"));"},{"sha":"3d88325a3ac0a2cf8a7d834a9b1ec1ca12ff4aec","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientCustomizerTest.java","status":"modified","additions":9,"deletions":24,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizerTest.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -21,53 +21,38 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doNothing;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-import java.net.URI;\n import java.nio.charset.StandardCharsets;\n-import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreService;\n-import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.junit.jupiter.api.Test;\n import org.pac4j.saml.client.SAML2Client;\n import org.springframework.core.io.ClassPathResource;\n+import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n \n public class SyncopeWASAML2ClientCustomizerTest extends BaseSyncopeWASAML2ClientTest {\n \n     @Test\n     public void customize() throws Exception {\n-\n-        SAML2SPKeystoreTO keystoreTO = new SAML2SPKeystoreTO.Builder()\n+        SAML2SPEntityTO entityTO = new SAML2SPEntityTO.Builder()\n+                .key(\"CAS\")\n                 .keystore(getKeystoreAsString())\n-                .owner(\"CAS\")\n-                .build();\n-        SAML2SPKeystoreService saml2SPKeystoreService = mock(SAML2SPKeystoreService.class);\n-        when(saml2SPKeystoreService.readFor(anyString())).thenReturn(keystoreTO);\n-        when(saml2SPKeystoreService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9081/syncop-wa\")).\n-                build());\n-\n-        SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder()\n-                .owner(\"Syncope\")\n                 .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(),\n                         StandardCharsets.UTF_8))\n                 .build();\n-\n-        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n-        when(saml2SPMetadataService.readFor(anyString())).thenReturn(metadataTO);\n-        when(saml2SPMetadataService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9081/syncop-wa\")).\n-                build());\n+        SAML2SPEntityService service = mock(SAML2SPEntityService.class);\n+        when(service.get(anyString())).thenReturn(entityTO);\n+        doNothing().when(service).set(any(SAML2SPEntityTO.class));\n \n         WARestClient restClient = mock(WARestClient.class);\n \n         SyncopeClient syncopeClient = mock(SyncopeClient.class);\n-        when(syncopeClient.getService(SAML2SPKeystoreService.class)).thenReturn(saml2SPKeystoreService);\n-        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(syncopeClient.getService(SAML2SPEntityService.class)).thenReturn(service);\n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n \n         SyncopeWASAML2ClientCustomizer customizer = new SyncopeWASAML2ClientCustomizer(restClient);"},{"sha":"1825ccb9f847235464af95c099e358edb58826ae","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientKeystoreGeneratorTest.java","status":"modified","additions":12,"deletions":39,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGeneratorTest.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -19,75 +19,48 @@\n package org.apache.syncope.wa.starter.pac4j.saml;\n \n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doNothing;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-import java.net.URI;\n import java.nio.charset.StandardCharsets;\n-import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreService;\n-import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.function.Executable;\n import org.pac4j.saml.client.SAML2Client;\n-import org.pac4j.saml.exceptions.SAMLException;\n import org.pac4j.saml.metadata.keystore.SAML2KeystoreGenerator;\n import org.springframework.core.io.ClassPathResource;\n+import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n \n public class SyncopeWASAML2ClientKeystoreGeneratorTest extends BaseSyncopeWASAML2ClientTest {\n \n-    private static WARestClient getWaRestClient(final Response response) throws Exception {\n+    private static WARestClient getWaRestClient() throws Exception {\n         WARestClient restClient = mock(WARestClient.class);\n \n-        SAML2SPKeystoreTO keystoreTO = new SAML2SPKeystoreTO.Builder()\n+        SAML2SPEntityTO keystoreTO = new SAML2SPEntityTO.Builder()\n+                .key(\"CAS\")\n                 .keystore(getKeystoreAsString())\n-                .owner(\"CAS\")\n-                .build();\n-        SAML2SPKeystoreService saml2SPKeystoreService = mock(SAML2SPKeystoreService.class);\n-        when(saml2SPKeystoreService.readFor(anyString())).thenReturn(keystoreTO);\n-        when(saml2SPKeystoreService.set(any())).thenReturn(response);\n-\n-        SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder()\n-                .owner(\"Syncope\")\n                 .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(),\n                         StandardCharsets.UTF_8))\n                 .build();\n-\n-        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n-        when(saml2SPMetadataService.readFor(anyString())).thenReturn(metadataTO);\n-        when(saml2SPMetadataService.set(any())).thenReturn(response);\n+        SAML2SPEntityService service = mock(SAML2SPEntityService.class);\n+        when(service.get(anyString())).thenReturn(keystoreTO);\n+        doNothing().when(service).set(any(SAML2SPEntityTO.class));\n \n         SyncopeClient syncopeClient = mock(SyncopeClient.class);\n-\n-        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n-        when(syncopeClient.getService(SAML2SPKeystoreService.class)).thenReturn(saml2SPKeystoreService);\n-\n+        when(syncopeClient.getService(SAML2SPEntityService.class)).thenReturn(service);\n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n         return restClient;\n     }\n \n     @Test\n     public void generate() throws Exception {\n         SAML2Client client = getSAML2Client();\n-        SAML2KeystoreGenerator generator1 = new SyncopeWASAML2ClientKeystoreGenerator(\n-                getWaRestClient(Response.created(new URI(\"http://localhost:9080/syncop-wa\")).build()), client);\n-        assertDoesNotThrow(new Executable() {\n-\n-            @Override\n-            public void execute() throws Throwable {\n-                generator1.generate();\n-            }\n-        });\n-        SAML2KeystoreGenerator generator2 = new SyncopeWASAML2ClientKeystoreGenerator(\n-                getWaRestClient(Response.serverError().build()), client);\n-        assertThrows(SAMLException.class, () -> generator2.generate());\n+        SAML2KeystoreGenerator generator = new SyncopeWASAML2ClientKeystoreGenerator(getWaRestClient(), client);\n+        assertDoesNotThrow(() -> generator.generate());\n     }\n }"},{"sha":"c97626d14b1adde21aa55cce0024b6c99f9f879f","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientMetadataGeneratorTest.java","status":"modified","additions":11,"deletions":27,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGeneratorTest.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -19,45 +19,42 @@\n package org.apache.syncope.wa.starter.pac4j.saml;\n \n import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doNothing;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n import java.io.File;\n import java.io.IOException;\n-import java.net.URI;\n import java.nio.charset.StandardCharsets;\n-import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.junit.jupiter.api.Test;\n import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.metadata.SAML2MetadataGenerator;\n import org.springframework.core.io.ClassPathResource;\n+import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n \n public class SyncopeWASAML2ClientMetadataGeneratorTest extends BaseSyncopeWASAML2ClientTest {\n \n-    private static WARestClient getWaRestClient(final Response response) throws IOException {\n+    private static WARestClient getWaRestClient() throws IOException {\n         WARestClient restClient = mock(WARestClient.class);\n-        SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder()\n-                .owner(\"Syncope\")\n+        SAML2SPEntityTO metadataTO = new SAML2SPEntityTO.Builder()\n+                .key(\"Syncope\")\n                 .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(),\n                         StandardCharsets.UTF_8))\n                 .build();\n \n-        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n-        when(saml2SPMetadataService.readFor(anyString())).thenReturn(metadataTO);\n-        when(saml2SPMetadataService.set(any())).thenReturn(response);\n+        SAML2SPEntityService saml2SPMetadataService = mock(SAML2SPEntityService.class);\n+        when(saml2SPMetadataService.get(anyString())).thenReturn(metadataTO);\n+        doNothing().when(saml2SPMetadataService).set(any(SAML2SPEntityTO.class));\n \n         SyncopeClient syncopeClient = mock(SyncopeClient.class);\n-        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(syncopeClient.getService(SAML2SPEntityService.class)).thenReturn(saml2SPMetadataService);\n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n         return restClient;\n     }\n@@ -68,22 +65,9 @@ public void storeMetadata() throws Exception {\n         String keystoreFile = File.createTempFile(\"keystore\", \"jks\").getCanonicalPath();\n         client.getConfiguration().setKeystoreResourceFilepath(keystoreFile);\n \n-        SAML2MetadataGenerator generator = new SyncopeWASAML2ClientMetadataGenerator(\n-                getWaRestClient(Response.created(new URI(\"http://localhost:9081/syncop-wa\")).build()), client);\n+        SAML2MetadataGenerator generator = new SyncopeWASAML2ClientMetadataGenerator(getWaRestClient(), client);\n         EntityDescriptor entityDescriptor = generator.buildEntityDescriptor();\n         String metadata = generator.getMetadata(entityDescriptor);\n         assertNotNull(generator.storeMetadata(metadata, null, false));\n     }\n-\n-    @Test\n-    public void storeMetadataFails() throws Exception {\n-        SAML2Client client = getSAML2Client();\n-        String keystoreFile = File.createTempFile(\"keystore\", \"jks\").getCanonicalPath();\n-        client.getConfiguration().setKeystoreResourceFilepath(keystoreFile);\n-        WARestClient restClient = getWaRestClient(Response.serverError().build());\n-        SAML2MetadataGenerator generator = new SyncopeWASAML2ClientMetadataGenerator(restClient, client);\n-        EntityDescriptor entityDescriptor = generator.buildEntityDescriptor();\n-        String metadata = generator.getMetadata(entityDescriptor);\n-        assertThrows(SyncopeClientException.class, () -> generator.storeMetadata(metadata, null, false));\n-    }\n }"},{"sha":"9b9abc6f503d1003fdbfff1efac4d2d4688a7028","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2MetadataResolverTest.java","status":"modified","additions":12,"deletions":14,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolverTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolverTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolverTest.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -21,21 +21,20 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doNothing;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n import java.io.File;\n-import java.net.URI;\n-import java.nio.charset.StandardCharsets;\n-import javax.ws.rs.core.Response;\n+import java.util.Base64;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n+import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.junit.jupiter.api.Test;\n import org.pac4j.saml.client.SAML2Client;\n import org.springframework.core.io.ClassPathResource;\n+import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n \n public class SyncopeWASAML2MetadataResolverTest extends BaseSyncopeWASAML2ClientTest {\n \n@@ -46,19 +45,18 @@ public void fetchMetadata() throws Exception {\n         client.getConfiguration().setKeystoreResourceFilepath(keystoreFile);\n         WARestClient restClient = mock(WARestClient.class);\n \n-        SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder()\n-                .owner(\"Syncope\")\n-                .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(),\n-                        StandardCharsets.UTF_8))\n+        SAML2SPEntityTO metadataTO = new SAML2SPEntityTO.Builder()\n+                .key(\"Syncope\")\n+                .metadata(Base64.getEncoder().encodeToString(\n+                        IOUtils.toByteArray(new ClassPathResource(\"sp-metadata.xml\").getInputStream())))\n                 .build();\n \n-        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n-        when(saml2SPMetadataService.readFor(anyString())).thenReturn(metadataTO);\n-        when(saml2SPMetadataService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9081/syncop-wa\")).\n-                build());\n+        SAML2SPEntityService saml2SPMetadataService = mock(SAML2SPEntityService.class);\n+        when(saml2SPMetadataService.get(anyString())).thenReturn(metadataTO);\n+        doNothing().when(saml2SPMetadataService).set(any(SAML2SPEntityTO.class));\n \n         SyncopeClient syncopeClient = mock(SyncopeClient.class);\n-        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(syncopeClient.getService(SAML2SPEntityService.class)).thenReturn(saml2SPMetadataService);\n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n \n         SyncopeWASAML2MetadataResolver resolver = new SyncopeWASAML2MetadataResolver(restClient, client);"},{"sha":"4ec97c436431543260f0a166136413ad089d67f4","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/surrogate/SyncopeWASurrogateAuthenticationServiceTest.java","status":"modified","additions":17,"deletions":26,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FSyncopeWASurrogateAuthenticationServiceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b42a8f609930f10c27058604ff9fbdc1e6a8bcc/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FSyncopeWASurrogateAuthenticationServiceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FSyncopeWASurrogateAuthenticationServiceTest.java?ref=6b42a8f609930f10c27058604ff9fbdc1e6a8bcc","patch":"@@ -16,54 +16,45 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.surrogate;\n \n-import org.apereo.cas.authentication.principal.Principal;\n-import org.apereo.cas.authentication.principal.PrincipalFactoryUtils;\n-import org.apereo.cas.authentication.surrogate.SurrogateAuthenticationService;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.util.Optional;\n import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.common.rest.api.service.wa.ImpersonationService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apache.syncope.wa.starter.AbstractTest;\n+import org.apereo.cas.authentication.principal.Principal;\n+import org.apereo.cas.authentication.principal.PrincipalFactoryUtils;\n+import org.apereo.cas.authentication.surrogate.SurrogateAuthenticationService;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-import javax.ws.rs.core.Response;\n-\n-import java.util.Optional;\n-\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n public class SyncopeWASurrogateAuthenticationServiceTest extends AbstractTest {\n+\n     @Autowired\n-    private WARestClient wARestClient;\n+    private WARestClient waRestClient;\n \n     @Autowired\n     private SurrogateAuthenticationService surrogateService;\n \n     @Test\n     public void verifyImpersonation() {\n-        ImpersonationAccount account = new ImpersonationAccount.Builder().\n-            owner(\"syncope-principal\").\n-            key(\"impersonatee\").\n-            build();\n+        String owner = \"syncope-principal\";\n+        ImpersonationAccount account = new ImpersonationAccount.Builder().impersonated(\"impersonatee\").\n+                build();\n \n-        ImpersonationService impersonationService = wARestClient.\n-            getSyncopeClient().\n-            getService(ImpersonationService.class);\n+        ImpersonationService impersonationService = waRestClient.getSyncopeClient().\n+                getService(ImpersonationService.class);\n \n-        Response response = impersonationService.create(account);\n-        assertNotNull(response);\n+        impersonationService.create(owner, account);\n \n-        assertFalse(surrogateService.getEligibleAccountsForSurrogateToProxy(account.getOwner()).isEmpty());\n+        assertFalse(surrogateService.getEligibleAccountsForSurrogateToProxy(owner).isEmpty());\n \n-        Principal principal = PrincipalFactoryUtils.newPrincipalFactory().createPrincipal(account.getOwner());\n+        Principal principal = PrincipalFactoryUtils.newPrincipalFactory().createPrincipal(owner);\n         assertFalse(surrogateService.canAuthenticateAs(\"unknown\", principal, Optional.empty()));\n-        assertTrue(surrogateService.canAuthenticateAs(account.getKey(), principal, Optional.empty()));\n-\n+        assertTrue(surrogateService.canAuthenticateAs(account.getImpersonated(), principal, Optional.empty()));\n     }\n }"}]}