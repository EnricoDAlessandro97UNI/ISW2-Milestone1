{"sha":"595a8d154a98758bd4d8852f49923200189ff99a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU5NWE4ZDE1NGE5ODc1OGJkNGQ4ODUyZjQ5OTIzMjAwMTg5ZmY5OWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-06-15T14:10:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-06-15T15:34:16Z"},"message":"[SYNCOPE-470] Implementation and documentation provided","tree":{"sha":"ed8f327f87be310262d2f6f8a14742a25ff5ed9d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ed8f327f87be310262d2f6f8a14742a25ff5ed9d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/595a8d154a98758bd4d8852f49923200189ff99a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/595a8d154a98758bd4d8852f49923200189ff99a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/595a8d154a98758bd4d8852f49923200189ff99a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/595a8d154a98758bd4d8852f49923200189ff99a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ebc1e056e38b231c938da9ebd133e4d7af11d882","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ebc1e056e38b231c938da9ebd133e4d7af11d882","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ebc1e056e38b231c938da9ebd133e4d7af11d882"}],"stats":{"total":2370,"additions":1800,"deletions":570},"files":[{"sha":"876d29909ec1e127a8d2079b43982c586be503d1","filename":"client/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -41,6 +41,7 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -102,6 +103,8 @@ private static void initFieldNames(final Class<?> entityClass, final Set<String>\n \n     private Map<String, Class<? extends PullCorrelationRuleConf>> pullCorrelationRuleConfs;\n \n+    private Map<String, Class<? extends PushCorrelationRuleConf>> pushCorrelationRuleConfs;\n+\n     /**\n      * This method can be overridden by subclasses to customize classpath scan.\n      *\n@@ -122,6 +125,7 @@ public void load() {\n         accountRuleConfs = new HashMap<>();\n         passwordRuleConfs = new HashMap<>();\n         pullCorrelationRuleConfs = new HashMap<>();\n+        pushCorrelationRuleConfs = new HashMap<>();\n \n         ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n         scanner.addIncludeFilter(new AssignableTypeFilter(BasePage.class));\n@@ -133,6 +137,7 @@ public void load() {\n         scanner.addIncludeFilter(new AssignableTypeFilter(AccountRuleConf.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PasswordRuleConf.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PullCorrelationRuleConf.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(PushCorrelationRuleConf.class));\n \n         scanner.findCandidateComponents(getBasePackage()).forEach(bd -> {\n             try {\n@@ -169,6 +174,8 @@ public void load() {\n                         passwordRuleConfs.put(clazz.getName(), (Class<? extends PasswordRuleConf>) clazz);\n                     } else if (PullCorrelationRuleConf.class.isAssignableFrom(clazz)) {\n                         pullCorrelationRuleConfs.put(clazz.getName(), (Class<? extends PullCorrelationRuleConf>) clazz);\n+                    } else if (PushCorrelationRuleConf.class.isAssignableFrom(clazz)) {\n+                        pushCorrelationRuleConfs.put(clazz.getName(), (Class<? extends PushCorrelationRuleConf>) clazz);\n                     }\n                 }\n             } catch (Throwable t) {\n@@ -196,6 +203,7 @@ public void load() {\n         accountRuleConfs = Collections.unmodifiableMap(accountRuleConfs);\n         passwordRuleConfs = Collections.unmodifiableMap(passwordRuleConfs);\n         pullCorrelationRuleConfs = Collections.unmodifiableMap(pullCorrelationRuleConfs);\n+        pushCorrelationRuleConfs = Collections.unmodifiableMap(pushCorrelationRuleConfs);\n \n         LOG.debug(\"Binary previewers found: {}\", previewers);\n         LOG.debug(\"Extension pages found: {}\", extPages);\n@@ -205,6 +213,7 @@ public void load() {\n         LOG.debug(\"Account Rule configurations found: {}\", accountRuleConfs);\n         LOG.debug(\"Password Rule configurations found: {}\", passwordRuleConfs);\n         LOG.debug(\"Pull Correlation Rule configurations found: {}\", pullCorrelationRuleConfs);\n+        LOG.debug(\"Push Correlation Rule configurations found: {}\", pushCorrelationRuleConfs);\n     }\n \n     public Class<? extends AbstractBinaryPreviewer> getPreviewerClass(final String mimeType) {\n@@ -253,4 +262,7 @@ public Map<String, Class<? extends PullCorrelationRuleConf>> getPullCorrelationR\n         return pullCorrelationRuleConfs;\n     }\n \n+    public Map<String, Class<? extends PushCorrelationRuleConf>> getPushCorrelationRuleConfs() {\n+        return pushCorrelationRuleConfs;\n+    }\n }"},{"sha":"294b238abf51039c6e83e0a8d4b4b68ae09a5ed6","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Policies.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.client.console.policies.AccountPolicyDirectoryPanel;\n import org.apache.syncope.client.console.policies.PasswordPolicyDirectoryPanel;\n import org.apache.syncope.client.console.policies.PullPolicyDirectoryPanel;\n+import org.apache.syncope.client.console.policies.PushPolicyDirectoryPanel;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -81,6 +82,16 @@ public Panel getPanel(final String panelId) {\n             }\n         });\n \n+        tabs.add(new AbstractTab(new ResourceModel(\"policy.push\")) {\n+\n+            private static final long serialVersionUID = -6815067322125799251L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new PushPolicyDirectoryPanel(panelId, getPageReference());\n+            }\n+        });\n+\n         return tabs;\n     }\n }"},{"sha":"5f3fdae6a78acfd892ad8c2aa424287315008674","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationModalPanel.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -86,6 +86,7 @@ public ImplementationModalPanel(\n                 || implementation.getType() == ImplementationType.ACCOUNT_RULE\n                 || implementation.getType() == ImplementationType.PASSWORD_RULE\n                 || implementation.getType() == ImplementationType.PULL_CORRELATION_RULE\n+                || implementation.getType() == ImplementationType.PUSH_CORRELATION_RULE\n                 ? ViewMode.JSON_BODY\n                 : ViewMode.JAVA_CLASS;\n         this.create = implementation.getKey() == null;\n@@ -127,6 +128,11 @@ public ImplementationModalPanel(\n                             collect(Collectors.toList());\n                     break;\n \n+                case PUSH_CORRELATION_RULE:\n+                    classes = implementationLookup.getPushCorrelationRuleConfs().keySet().stream().\n+                            collect(Collectors.toList());\n+                    break;\n+\n                 default:\n             }\n         }\n@@ -216,6 +222,10 @@ public ImplementationModalPanel(\n                     templateClassName = \"MyPullCorrelationRule\";\n                     break;\n \n+                case PUSH_CORRELATION_RULE:\n+                    templateClassName = \"MyPushCorrelationRule\";\n+                    break;\n+\n                 case VALIDATOR:\n                     templateClassName = \"MyValidator\";\n                     break;\n@@ -275,6 +285,10 @@ protected void onEvent(final AjaxRequestTarget target) {\n                         clazz = implementationLookup.getPullCorrelationRuleConfs().get(jsonClass.getModelObject());\n                         break;\n \n+                    case PUSH_CORRELATION_RULE:\n+                        clazz = implementationLookup.getPushCorrelationRuleConfs().get(jsonClass.getModelObject());\n+                        break;\n+\n                     default:\n                 }\n "},{"sha":"aae91147d3c801a08e0acaf95005ed40843a7060","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -123,8 +123,10 @@ protected List<IColumn<T, String>> getColumns() {\n                 new StringResourceModel(\"description\", this), \"description\", \"description\"));\n         columns.add(new CollectionPropertyColumn<>(\n                 new StringResourceModel(\"usedByResources\", this), \"usedByResources\"));\n-        columns.add(new CollectionPropertyColumn<>(\n-                new StringResourceModel(\"usedByRealms\", this), \"usedByRealms\"));\n+        if (type != PolicyType.PULL && type != PolicyType.PUSH) {\n+            columns.add(new CollectionPropertyColumn<>(\n+                    new StringResourceModel(\"usedByRealms\", this), \"usedByRealms\"));\n+        }\n \n         addCustomColumnFields(columns);\n "},{"sha":"6bad2d495b2d3b4f6682403231419744169c797a","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -43,7 +43,7 @@\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.policy.PullPolicyTO;\n+import org.apache.syncope.common.lib.policy.ProvisioningPolicyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -113,7 +113,7 @@ public Profile(final T policyTO, final BaseModal<T> modal, final PageReference p\n                         \"field\",\n                         \"maxAuthenticationAttempts\",\n                         Integer.class,\n-                        new PropertyModel<Integer>(policyTO, \"maxAuthenticationAttempts\")));\n+                        new PropertyModel<>(policyTO, \"maxAuthenticationAttempts\")));\n \n                 fields.add(new AjaxCheckBoxPanel(\n                         \"field\",\n@@ -123,21 +123,21 @@ public Profile(final T policyTO, final BaseModal<T> modal, final PageReference p\n \n                 fields.add(new AjaxPalettePanel.Builder<String>().setName(\"passthroughResources\").build(\n                         \"field\",\n-                        new PropertyModel<List<String>>(policyTO, \"passthroughResources\"),\n-                        new ListModel<String>(resources.getObject())));\n+                        new PropertyModel<>(policyTO, \"passthroughResources\"),\n+                        new ListModel<>(resources.getObject())));\n             } else if (policyTO instanceof PasswordPolicyTO) {\n                 fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n                         \"field\",\n                         \"historyLength\",\n                         Integer.class,\n-                        new PropertyModel<Integer>(policyTO, \"historyLength\")));\n+                        new PropertyModel<>(policyTO, \"historyLength\")));\n \n                 fields.add(new AjaxCheckBoxPanel(\n                         \"field\",\n                         \"allowNullPassword\",\n                         new PropertyModel<>(policyTO, \"allowNullPassword\"),\n                         false));\n-            } else if (policyTO instanceof PullPolicyTO) {\n+            } else if (policyTO instanceof ProvisioningPolicyTO) {\n                 fields.add(new AjaxDropDownChoicePanel<>(\n                         \"field\",\n                         \"conflictResolutionAction\","},{"sha":"96176b64d79b418a8cb6ebc80ceefbd2a638f41c","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.java","status":"renamed","additions":105,"deletions":33,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -37,10 +37,14 @@\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiPanel;\n+import org.apache.syncope.common.lib.policy.AbstractCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.ProvisioningPolicyTO;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n@@ -58,7 +62,7 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n \n-public class PullPolicyModalPanel extends AbstractModalPanel<PullPolicyTO> {\n+public class ProvisioningPolicyModalPanel extends AbstractModalPanel<ProvisioningPolicyTO> {\n \n     private static final long serialVersionUID = 2988891313881271124L;\n \n@@ -70,34 +74,42 @@ public class PullPolicyModalPanel extends AbstractModalPanel<PullPolicyTO> {\n \n     private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n \n-    private final LoadableDetachableModel<Map<String, ImplementationTO>> implementations =\n-            new LoadableDetachableModel<Map<String, ImplementationTO>>() {\n-\n-        private static final long serialVersionUID = 5275935387613157437L;\n-\n-        @Override\n-        protected Map<String, ImplementationTO> load() {\n-            return implRestClient.list(ImplementationType.PULL_CORRELATION_RULE).stream().\n-                    collect(Collectors.toMap(EntityTO::getKey, Function.identity()));\n-        }\n-    };\n+    private final LoadableDetachableModel<Map<String, ImplementationTO>> implementations;\n \n     private final IModel<List<CorrelationRule>> model;\n \n-    public PullPolicyModalPanel(\n-            final PullPolicyTO policyTO,\n-            final BaseModal<PullPolicyTO> modal,\n+    @SuppressWarnings(\"unchecked\")\n+    public ProvisioningPolicyModalPanel(\n+            final ProvisioningPolicyTO policyTO,\n+            final BaseModal<? extends ProvisioningPolicyTO> modal,\n             final PageReference pageRef) {\n \n-        super(modal, pageRef);\n-        modal.setFormModel(policyTO);\n+        super((BaseModal<ProvisioningPolicyTO>) modal, pageRef);\n+        ((BaseModal<ProvisioningPolicyTO>) modal).setFormModel(policyTO);\n+\n+        implementations = new LoadableDetachableModel<Map<String, ImplementationTO>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected Map<String, ImplementationTO> load() {\n+                return implRestClient.list(policyTO instanceof PullPolicyTO\n+                        ? ImplementationType.PULL_CORRELATION_RULE\n+                        : ImplementationType.PUSH_CORRELATION_RULE).stream().\n+                        collect(Collectors.toMap(EntityTO::getKey, Function.identity()));\n+            }\n+        };\n \n         model = new PropertyModel<List<CorrelationRule>>(policyTO, \"correlationRules\") {\n \n             private static final long serialVersionUID = -8168676563540297301L;\n \n             private final List<CorrelationRule> rules = policyTO.getCorrelationRules().keySet().stream().\n-                    map(anyType -> new CorrelationRule(anyType,\n+                    map(anyType -> new CorrelationRule(\n+                    policyTO instanceof PullPolicyTO\n+                            ? DefaultPullCorrelationRuleConf.class\n+                            : DefaultPushCorrelationRuleConf.class,\n+                    anyType,\n                     implementations.getObject().get(policyTO.getCorrelationRules().get(anyType)))).\n                     collect(Collectors.toList());\n \n@@ -121,7 +133,9 @@ public void setObject(final List<CorrelationRule> object) {\n \n             @Override\n             protected CorrelationRule newModelObject() {\n-                return new CorrelationRule();\n+                return new CorrelationRule(policyTO instanceof PullPolicyTO\n+                        ? DefaultPullCorrelationRuleConf.class\n+                        : DefaultPushCorrelationRuleConf.class);\n             }\n \n             @Override\n@@ -146,7 +160,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n                     }\n                 }\n             });\n-            restClient.updatePolicy(PolicyType.PULL, getItem());\n+            restClient.updatePolicy(getItem() instanceof PullPolicyTO ? PolicyType.PULL : PolicyType.PUSH, getItem());\n \n             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n             this.modal.close(target);\n@@ -182,29 +196,75 @@ protected class CorrelationRulePanel extends Panel {\n             rule.setOutputMarkupId(true);\n             add(rule);\n \n+            PropertyModel<Boolean> orSchemasModel =\n+                    new PropertyModel<Boolean>(correlationRule.getObject().getDefaultRuleConf(), \"orSchemas\") {\n+\n+                private static final long serialVersionUID = 807008909842554829L;\n+\n+                private boolean orSchemas() {\n+                    AbstractCorrelationRuleConf conf = correlationRule.getObject().getDefaultRuleConf();\n+                    return conf instanceof DefaultPullCorrelationRuleConf\n+                            ? DefaultPullCorrelationRuleConf.class.cast(conf).isOrSchemas()\n+                            : conf instanceof DefaultPushCorrelationRuleConf\n+                                    ? DefaultPushCorrelationRuleConf.class.cast(conf).isOrSchemas()\n+                                    : false;\n+                }\n+\n+                @Override\n+                public Boolean getObject() {\n+                    AbstractCorrelationRuleConf conf = correlationRule.getObject().getDefaultRuleConf();\n+                    return conf instanceof DefaultPullCorrelationRuleConf\n+                            ? DefaultPullCorrelationRuleConf.class.cast(conf).isOrSchemas()\n+                            : conf instanceof DefaultPushCorrelationRuleConf\n+                                    ? DefaultPushCorrelationRuleConf.class.cast(conf).isOrSchemas()\n+                                    : false;\n+                }\n+\n+                @Override\n+                public void setObject(final Boolean object) {\n+                    AbstractCorrelationRuleConf conf = correlationRule.getObject().getDefaultRuleConf();\n+                    if (conf instanceof DefaultPullCorrelationRuleConf) {\n+                        DefaultPullCorrelationRuleConf.class.cast(conf).setOrSchemas(object);\n+                    } else if (conf instanceof DefaultPushCorrelationRuleConf) {\n+                        DefaultPushCorrelationRuleConf.class.cast(conf).setOrSchemas(object);\n+                    }\n+                }\n+            };\n+            AjaxCheckBoxPanel orSchemas = new AjaxCheckBoxPanel(\"orSchemas\", \"orSchemas\", orSchemasModel, false);\n+            orSchemas.setOutputMarkupPlaceholderTag(true);\n+            add(orSchemas.setVisible(correlationRule.getObject().getDefaultRuleConf() != null));\n+\n             PropertyModel<List<String>> defaultRuleConfModel =\n                     new PropertyModel<List<String>>(correlationRule.getObject().getDefaultRuleConf(), \"schemas\") {\n \n                 private static final long serialVersionUID = 3799387950428254072L;\n \n+                private List<String> schemas() {\n+                    AbstractCorrelationRuleConf conf = correlationRule.getObject().getDefaultRuleConf();\n+                    return conf instanceof DefaultPullCorrelationRuleConf\n+                            ? DefaultPullCorrelationRuleConf.class.cast(conf).getSchemas()\n+                            : conf instanceof DefaultPushCorrelationRuleConf\n+                                    ? DefaultPushCorrelationRuleConf.class.cast(conf).getSchemas()\n+                                    : Collections.emptyList();\n+                }\n+\n                 @Override\n                 public List<String> getObject() {\n                     List<String> schemas = new ArrayList<>();\n                     if (correlationRule.getObject().getDefaultRuleConf() != null) {\n-                        schemas.addAll(correlationRule.getObject().getDefaultRuleConf().getSchemas());\n+                        schemas.addAll(schemas());\n                     }\n                     return schemas;\n                 }\n \n                 @Override\n                 public void setObject(final List<String> object) {\n                     if (correlationRule.getObject().getDefaultRuleConf() != null) {\n-                        correlationRule.getObject().getDefaultRuleConf().getSchemas().clear();\n-                        correlationRule.getObject().getDefaultRuleConf().getSchemas().addAll(object);\n+                        schemas().clear();\n+                        schemas().addAll(object);\n                     }\n                 }\n             };\n-\n             AjaxPalettePanel<String> defaultRuleConf = new AjaxPalettePanel.Builder<String>().\n                     setName(\"defaultRuleConf\").build(\"defaultRuleConf\",\n                     defaultRuleConfModel, new AjaxPalettePanel.Builder.Query<String>() {\n@@ -225,6 +285,9 @@ public List<String> execute(final String filter) {\n \n                 @Override\n                 protected void onUpdate(final AjaxRequestTarget target) {\n+                    if (orSchemas.isVisibleInHierarchy()) {\n+                        target.add(orSchemas);\n+                    }\n                     if (defaultRuleConf.isVisibleInHierarchy()) {\n                         correlationRule.getObject().setImpl(null);\n                         defaultRuleConf.reload(target);\n@@ -240,10 +303,13 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 @Override\n                 protected void onUpdate(final AjaxRequestTarget target) {\n                     if (correlationRule.getObject().getDefaultRuleConf() == null) {\n+                        orSchemas.setVisible(false);\n                         defaultRuleConf.setVisible(false);\n                     } else {\n+                        orSchemas.setVisible(true);\n                         defaultRuleConf.setVisible(true);\n                     }\n+                    target.add(orSchemas);\n                     target.add(defaultRuleConf);\n                 }\n             });\n@@ -270,17 +336,25 @@ private class CorrelationRule implements Serializable {\n \n         private static final long serialVersionUID = 4221521483948294336L;\n \n+        private final Class<? extends AbstractCorrelationRuleConf> ruleConfClass;\n+\n         private String anyType;\n \n         private ImplementationTO impl;\n \n-        private DefaultPullCorrelationRuleConf defaultRuleConf;\n+        private AbstractCorrelationRuleConf defaultRuleConf;\n \n-        CorrelationRule() {\n+        CorrelationRule(final Class<? extends AbstractCorrelationRuleConf> ruleConfClass) {\n+            this.ruleConfClass = ruleConfClass;\n             this.anyType = AnyTypeKind.USER.name();\n         }\n \n-        CorrelationRule(final String anyType, final ImplementationTO impl) {\n+        CorrelationRule(\n+                final Class<? extends AbstractCorrelationRuleConf> ruleConfClass,\n+                final String anyType,\n+                final ImplementationTO impl) {\n+\n+            this.ruleConfClass = ruleConfClass;\n             this.anyType = anyType;\n             setImpl(impl);\n         }\n@@ -306,11 +380,10 @@ public final void setImpl(final ImplementationTO impl) {\n             if (impl != null) {\n                 this.defaultRuleConf = null;\n                 try {\n-                    this.defaultRuleConf = OBJECT_MAPPER.readValue(\n-                            impl.getBody(), DefaultPullCorrelationRuleConf.class);\n+                    this.defaultRuleConf = OBJECT_MAPPER.readValue(impl.getBody(), ruleConfClass);\n                 } catch (Exception e) {\n                     LOG.debug(\"Could not deserialize {} as {}\",\n-                            impl.getBody(), DefaultPullCorrelationRuleConf.class.getName());\n+                            impl.getBody(), ruleConfClass.getName());\n                 }\n             }\n         }\n@@ -326,13 +399,12 @@ public ImplementationTO getImpl() {\n             return impl;\n         }\n \n-        public void setDefaultRuleConf(final DefaultPullCorrelationRuleConf defaultRuleConf) {\n+        public void setDefaultRuleConf(final DefaultPushCorrelationRuleConf defaultRuleConf) {\n             this.defaultRuleConf = defaultRuleConf;\n         }\n \n-        public DefaultPullCorrelationRuleConf getDefaultRuleConf() {\n+        public AbstractCorrelationRuleConf getDefaultRuleConf() {\n             return defaultRuleConf;\n         }\n-\n     }\n }","previous_filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyModalPanel.java"},{"sha":"78618911491d05eaadd910645000692fc3b889a7","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -67,7 +67,7 @@ protected void addCustomActions(final ActionsPanel<PullPolicyTO> panel, final IM\n             @Override\n             public void onClick(final AjaxRequestTarget target, final PullPolicyTO ignore) {\n                 target.add(policySpecModal.setContent(\n-                        new PullPolicyModalPanel(model.getObject(), policySpecModal, pageRef)));\n+                        new ProvisioningPolicyModalPanel(model.getObject(), policySpecModal, pageRef)));\n \n                 policySpecModal.header(new StringResourceModel(\n                         \"policy.rules\", PullPolicyDirectoryPanel.this, Model.of(model.getObject())));"},{"sha":"fa5001439338d3879b0e6fad64ca8b9131f420e0","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PushPolicyDirectoryPanel.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPushPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPushPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPushPolicyDirectoryPanel.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.common.lib.policy.PushPolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+/**\n+ * Push policies page.\n+ */\n+public class PushPolicyDirectoryPanel extends PolicyDirectoryPanel<PushPolicyTO> {\n+\n+    private static final long serialVersionUID = 4984337552918213290L;\n+\n+    public PushPolicyDirectoryPanel(final String id, final PageReference pageRef) {\n+        super(id, PolicyType.PUSH, pageRef);\n+\n+        final PushPolicyTO defaultItem = new PushPolicyTO();\n+\n+        this.addNewItemPanelBuilder(\n+                new PolicyModalPanelBuilder<>(PolicyType.PUSH, defaultItem, modal, pageRef), true);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.POLICY_CREATE);\n+\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected void addCustomColumnFields(final List<IColumn<PushPolicyTO, String>> columns) {\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\n+                \"conflictResolutionAction\", this), \"conflictResolutionAction\", \"conflictResolutionAction\"));\n+    }\n+\n+    @Override\n+    protected void addCustomActions(final ActionsPanel<PushPolicyTO> panel, final IModel<PushPolicyTO> model) {\n+        panel.add(new ActionLink<PushPolicyTO>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final PushPolicyTO ignore) {\n+                target.add(policySpecModal.setContent(\n+                        new ProvisioningPolicyModalPanel(model.getObject(), policySpecModal, pageRef)));\n+\n+                policySpecModal.header(new StringResourceModel(\n+                        \"policy.rules\", PushPolicyDirectoryPanel.this, Model.of(model.getObject())));\n+\n+                MetaDataRoleAuthorizationStrategy.authorize(\n+                        policySpecModal.getForm(), ENABLE, StandardEntitlement.POLICY_UPDATE);\n+\n+                policySpecModal.show(true);\n+            }\n+        }, ActionLink.ActionType.COMPOSE, StandardEntitlement.POLICY_UPDATE);\n+    }\n+}"},{"sha":"746ea7090e83f51d276926701322b13893a836bf","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ImplementationRestClient.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.rest;\n \n import java.util.List;\n-import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.rest.api.service.ImplementationService;\n@@ -36,10 +35,8 @@ public ImplementationTO read(final ImplementationType type, final String key) {\n         return getService(ImplementationService.class).read(type, key);\n     }\n \n-    public ImplementationTO create(final ImplementationTO implementation) {\n-        ImplementationService service = getService(ImplementationService.class);\n-        Response response = service.create(implementation);\n-        return getObject(service, response.getLocation(), ImplementationTO.class);\n+    public void create(final ImplementationTO implementation) {\n+        getService(ImplementationService.class).create(implementation);\n     }\n \n     public void update(final ImplementationTO implementation) {\n@@ -49,5 +46,4 @@ public void update(final ImplementationTO implementation) {\n     public void delete(final ImplementationType type, final String key) {\n         getService(ImplementationService.class).delete(type, key);\n     }\n-\n }"},{"sha":"a5023e5941be402bcd757a18eedb2027a5db787a","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/RemediationRestClient.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import static org.apache.syncope.client.console.rest.BaseRestClient.getService;\n-\n import java.util.List;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;"},{"sha":"ad3951db2a7ed0f7d4087a3baafd5fa8269c9628","filename":"client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPushCorrelationRule.groovy","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPushCorrelationRule.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPushCorrelationRule.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPushCorrelationRule.groovy?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import groovy.transform.CompileStatic\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n+\n+@CompileStatic\n+class MyPushCorrelationRule implements PushCorrelationRule {\n+\n+  @Override\n+  Filter getFilter(Any<?> any, Provision provision) {\n+    \n+  }\n+}"},{"sha":"b8dd37238b44c040b6461053bfe01ea527592820","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Policies.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.properties?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -17,3 +17,4 @@\n policy.account=Account\n policy.password=Password\n policy.pull=Pull\n+policy.push=Push"},{"sha":"b8dd37238b44c040b6461053bfe01ea527592820","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Policies_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_it.properties?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -17,3 +17,4 @@\n policy.account=Account\n policy.password=Password\n policy.pull=Pull\n+policy.push=Push"},{"sha":"5dc1831be3a6d9d7e58d3187df438afd7c4becfe","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Policies_ja.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ja.properties?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -17,3 +17,4 @@\n policy.account=\\u30a2\\u30ab\\u30a6\\u30f3\\u30c8\n policy.password=\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9\n policy.pull=\\u30d7\\u30eb\n+policy.push=Push"},{"sha":"b8dd37238b44c040b6461053bfe01ea527592820","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Policies_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_pt_BR.properties?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -17,3 +17,4 @@\n policy.account=Account\n policy.password=Password\n policy.pull=Pull\n+policy.push=Push"},{"sha":"5c1a92aec85db5cbfe19bfdd21b6fc5b50f96185","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Policies_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ru.properties?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -18,3 +18,4 @@\n policy.account=\\u041f\\u043e\\u043b\\u0438\\u0442\\u0438\\u043a\\u0430 \\u0443\\u0447\\u0435\\u0442\\u043d\\u044b\\u0445 \\u0437\\u0430\\u043f\\u0438\\u0441\\u0435\\u0439\n policy.password=\\u041f\\u043e\\u043b\\u0438\\u0442\\u0438\\u043a\\u0430 \\u043f\\u0430\\u0440\\u043e\\u043b\\u0435\\u0439\n policy.pull=\\u041f\\u043e\\u043b\\u0438\\u0442\\u0438\\u043a\\u0430 \\u043f\\u043e\\u043b\\u0443\\u0447\\u0435\\u043d\\u0438\\u044f \\u0434\\u0430\\u043d\\u043d\\u044b\\u0445\n+policy.push=Push"},{"sha":"987016dc8060012c853bd7939ae38e420926e9b7","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel$CorrelationRulePanel.html","status":"renamed","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel%24CorrelationRulePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel%24CorrelationRulePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel%24CorrelationRulePanel.html?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -24,6 +24,9 @@\n     <div class=\"form-group\">\n       <span wicket:id=\"rule\"/>\n     </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"orSchemas\"/>\n+    </div>\n     <div class=\"form-group\">\n       <span wicket:id=\"defaultRuleConf\"/>\n     </div>","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel$CorrelationRulePanel.html"},{"sha":"5ade68c39851211f33185cf482e674000446f8da","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.html?ref=595a8d154a98758bd4d8852f49923200189ff99a","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel.html"},{"sha":"dcd9917072dc530a93b3d0a6e1bbc31339efeaa3","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.properties","status":"renamed","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.properties?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -17,3 +17,4 @@\n rule=Rule\n anyType=Applies to\n correlationRules=Correlation Rules\n+orSchemas=Schema conditions in OR (AND is default)","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel.properties"},{"sha":"fe183bf1766038ef3a494aba04c8fdeaf1db3072","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel_it.properties","status":"renamed","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_it.properties?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -18,3 +18,4 @@\n rule=Regola\n anyType=Applicata a\n correlationRules=Regole di Correlazione\n+orSchemas=Condizioni schema in OR (AND \\u00e8 il default)","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_it.properties"},{"sha":"a52a0109c93efd05bcd59107ba0292095cff63f3","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel_ja.properties","status":"renamed","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_ja.properties?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -17,3 +17,4 @@\n rule=\\u30eb\\u30fc\\u30eb\n anyType=\\u9069\\u7528...\n correlationRules=\\u76f8\\u95a2\\u30eb\\u30fc\\u30eb\n+orSchemas=Schema conditions in OR (AND is default)","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_ja.properties"},{"sha":"f39a8680ea60ce97c7a60b8b916c6dcbdf1e019e","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel_pt_BR.properties","status":"renamed","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_pt_BR.properties?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -18,3 +18,4 @@\n rule=Rule\n anyType=Applies to\n correlationRules=Correlation Rules\n+orSchemas=Schema conditions in OR (AND is default)","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_pt_BR.properties"},{"sha":"966749ee052508df36ad63c341f11c0d625f1f73","filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel_ru.properties","status":"renamed","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_ru.properties?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -18,3 +18,4 @@\n rule=Rule\n anyType=\\u041e\\u0431\\u044a\\u0435\\u043a\\u0442 \\u043f\\u0440\\u0438\\u043c\\u0435\\u043d\\u0435\\u043d\\u0438\\u044f \\u043f\\u043e\\u043b\\u0438\\u0442\\u0438\\u043a\\u0438\n correlationRules=\\u041f\\u0440\\u0430\\u0432\\u0438\\u043b\\u0430 \\u043a\\u043e\\u0440\\u0440\\u0435\\u043b\\u044f\\u0446\\u0438\\u0438\n+orSchemas=Schema conditions in OR (AND is default)","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/policies/PullPolicyModalPanel_ru.properties"},{"sha":"213d1709b9135abb4d6ad578a09d8f1be357b897","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/LogOutputStream.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FLogOutputStream.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FLogOutputStream.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FLogOutputStream.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -25,7 +25,7 @@\n \n /**\n  * Delegates output stream writing onto an SLF4J logger.\n- * Inspired by {@code}org.apache.commons.exec.LogOutputStream{@code}\n+ * Inspired by {@code org.apache.commons.exec.LogOutputStream}\n  */\n public class LogOutputStream extends OutputStream {\n "},{"sha":"0f7d4d66ff3969514af29a3badc2d4c05af74912","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractCorrelationRuleConf.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractCorrelationRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractCorrelationRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractCorrelationRuleConf.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -24,19 +24,19 @@\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlType\n-@XmlSeeAlso({ DefaultPullCorrelationRuleConf.class })\n-public abstract class AbstractPullCorrelationRuleConf extends AbstractBaseBean implements PullCorrelationRuleConf {\n+@XmlSeeAlso({ DefaultPullCorrelationRuleConf.class, DefaultPushCorrelationRuleConf.class })\n+public abstract class AbstractCorrelationRuleConf extends AbstractBaseBean implements RuleConf {\n \n     private static final long serialVersionUID = -4080475005967851092L;\n \n     private String name;\n \n-    public AbstractPullCorrelationRuleConf() {\n+    public AbstractCorrelationRuleConf() {\n         this(StringUtils.EMPTY);\n         setName(getClass().getName());\n     }\n \n-    public AbstractPullCorrelationRuleConf(final String name) {\n+    public AbstractCorrelationRuleConf(final String name) {\n         super();\n         this.name = name;\n     }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractPullCorrelationRuleConf.java"},{"sha":"9bda1a673f5e38db0e90ae140746aa9fa665cc1c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPullCorrelationRuleConf.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPullCorrelationRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPullCorrelationRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPullCorrelationRuleConf.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -28,17 +28,26 @@\n \n @XmlRootElement(name = \"defaultPullCorrelationRuleConf\")\n @XmlType\n-public class DefaultPullCorrelationRuleConf extends AbstractPullCorrelationRuleConf implements PullCorrelationRuleConf {\n+public class DefaultPullCorrelationRuleConf extends AbstractCorrelationRuleConf implements PullCorrelationRuleConf {\n \n     private static final long serialVersionUID = 429126085793346273L;\n \n+    private boolean orSchemas;\n+\n     private final List<String> schemas = new ArrayList<>();\n \n+    public boolean isOrSchemas() {\n+        return orSchemas;\n+    }\n+\n+    public void setOrSchemas(final boolean orSchemas) {\n+        this.orSchemas = orSchemas;\n+    }\n+\n     @XmlElementWrapper(name = \"schemas\")\n     @XmlElement(name = \"schema\")\n     @JsonProperty(\"schemas\")\n     public List<String> getSchemas() {\n         return schemas;\n     }\n-\n }"},{"sha":"a909208313224af8fab585b2872ac5a5d9153196","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPushCorrelationRuleConf.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPushCorrelationRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPushCorrelationRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPushCorrelationRuleConf.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"defaultPushCorrelationRuleConf\")\n+@XmlType\n+public class DefaultPushCorrelationRuleConf extends AbstractCorrelationRuleConf implements PushCorrelationRuleConf {\n+\n+    private static final long serialVersionUID = 429126085793346273L;\n+\n+    private boolean orSchemas;\n+\n+    private final List<String> schemas = new ArrayList<>();\n+\n+    public boolean isOrSchemas() {\n+        return orSchemas;\n+    }\n+\n+    public void setOrSchemas(final boolean orSchemas) {\n+        this.orSchemas = orSchemas;\n+    }\n+\n+    @XmlElementWrapper(name = \"schemas\")\n+    @XmlElement(name = \"schema\")\n+    @JsonProperty(\"schemas\")\n+    public List<String> getSchemas() {\n+        return schemas;\n+    }\n+}"},{"sha":"98b79d691b9f56b6c15f9924f7ae916093e4f0ed","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PolicyTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -36,7 +36,7 @@\n \n @XmlRootElement(name = \"policy\")\n @XmlType\n-@XmlSeeAlso({ AccountPolicyTO.class, PasswordPolicyTO.class, PullPolicyTO.class })\n+@XmlSeeAlso({ AccountPolicyTO.class, PasswordPolicyTO.class, ProvisioningPolicyTO.class })\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"@class\")\n @JsonPropertyOrder(value = { \"@class\", \"key\", \"description\" })\n @Schema("},{"sha":"e686223f0f93c737bc786e95c2478f0d0c5da39e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/ProvisioningPolicyTO.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FProvisioningPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FProvisioningPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FProvisioningPolicyTO.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+\n+@XmlType\n+@XmlSeeAlso({ PullPolicyTO.class, PushPolicyTO.class })\n+@Schema(allOf = { PolicyTO.class })\n+public abstract class ProvisioningPolicyTO extends PolicyTO {\n+\n+    private static final long serialVersionUID = -3786048942148269602L;\n+\n+    private ConflictResolutionAction conflictResolutionAction;\n+\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    private final Map<String, String> correlationRules = new HashMap<>();\n+\n+    public ConflictResolutionAction getConflictResolutionAction() {\n+        return conflictResolutionAction == null\n+                ? ConflictResolutionAction.IGNORE\n+                : conflictResolutionAction;\n+    }\n+\n+    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\n+        this.conflictResolutionAction = conflictResolutionAction;\n+    }\n+\n+    @JsonProperty\n+    public Map<String, String> getCorrelationRules() {\n+        return correlationRules;\n+    }\n+}"},{"sha":"aee16cda917a22a00dee70e29f271078fe1fad25","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicyTO.java","status":"modified","additions":2,"deletions":27,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -20,47 +20,22 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n-import java.util.HashMap;\n-import java.util.Map;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n-import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n-import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n \n @XmlRootElement(name = \"pullPolicy\")\n @XmlType\n-@Schema(allOf = { PolicyTO.class })\n-public class PullPolicyTO extends PolicyTO {\n+@Schema(allOf = { ProvisioningPolicyTO.class, PolicyTO.class })\n+public class PullPolicyTO extends ProvisioningPolicyTO {\n \n     private static final long serialVersionUID = 993024634238024242L;\n \n-    private ConflictResolutionAction conflictResolutionAction;\n-\n     @XmlTransient\n     @JsonProperty(\"@class\")\n     @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.policy.PullPolicyTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();\n     }\n-\n-    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n-    private final Map<String, String> correlationRules = new HashMap<>();\n-\n-    public ConflictResolutionAction getConflictResolutionAction() {\n-        return conflictResolutionAction == null\n-                ? ConflictResolutionAction.IGNORE\n-                : conflictResolutionAction;\n-    }\n-\n-    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\n-        this.conflictResolutionAction = conflictResolutionAction;\n-    }\n-\n-    @JsonProperty\n-    public Map<String, String> getCorrelationRules() {\n-        return correlationRules;\n-    }\n }"},{"sha":"1791425eac529529d758e836d2682d16020e0e5a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PushCorrelationRuleConf.java","status":"renamed","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushCorrelationRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushCorrelationRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushCorrelationRuleConf.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -18,12 +18,6 @@\n  */\n package org.apache.syncope.common.lib.policy;\n \n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.AbstractBaseBean;\n-\n-@XmlType\n-public class PushPolicySpec extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 3641030189482617497L;\n+public interface PushCorrelationRuleConf extends RuleConf {\n \n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PushPolicySpec.java"},{"sha":"a2eca145534d1443ec3d0e851359c4e65e71cdfc","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PushPolicyTO.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicyTO.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"pushPolicy\")\n+@XmlType\n+@Schema(allOf = { ProvisioningPolicyTO.class, PolicyTO.class })\n+public class PushPolicyTO extends ProvisioningPolicyTO {\n+\n+    private static final long serialVersionUID = 993024634238024242L;\n+\n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.policy.PushPolicyTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+}"},{"sha":"d0061bbd450a830477d47c1629efebe32ea83b59","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -77,6 +77,8 @@ public class ResourceTO extends AbstractBaseBean implements EntityTO {\n \n     private String pullPolicy;\n \n+    private String pushPolicy;\n+\n     private final List<ConnConfProperty> confOverride = new ArrayList<>();\n \n     private boolean overrideCapabilities = false;\n@@ -184,6 +186,14 @@ public void setPullPolicy(final String pullPolicy) {\n         this.pullPolicy = pullPolicy;\n     }\n \n+    public String getPushPolicy() {\n+        return pushPolicy;\n+    }\n+\n+    public void setPushPolicy(final String pushPolicy) {\n+        this.pushPolicy = pushPolicy;\n+    }\n+\n     @JsonIgnore\n     public Optional<ProvisionTO> getProvision(final String anyType) {\n         return provisions.stream().filter("},{"sha":"98e10b7a56d26012cf20eeee035d0ec410e3ca12","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ImplementationType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationType.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -35,6 +35,7 @@ public enum ImplementationType {\n     PULL_ACTIONS,\n     PUSH_ACTIONS,\n     PULL_CORRELATION_RULE,\n+    PUSH_CORRELATION_RULE,\n     VALIDATOR,\n     RECIPIENTS_PROVIDER,\n     AUDIT_APPENDER;"},{"sha":"19efd1f41de8a49a3c82231ad99e9ca8db914d9e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -189,7 +189,11 @@ public void delete(final ImplementationType type, final String key) {\n                 break;\n \n             case PULL_CORRELATION_RULE:\n-                inUse = !policyDAO.findByCorrelationRule(implementation).isEmpty();\n+                inUse = !policyDAO.findByPullCorrelationRule(implementation).isEmpty();\n+                break;\n+\n+            case PUSH_CORRELATION_RULE:\n+                inUse = !policyDAO.findByPushCorrelationRule(implementation).isEmpty();\n                 break;\n \n             case VALIDATOR:"},{"sha":"6608f39cd54fdaf9a03ff33470d6188638ffba21","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":30,"deletions":5,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.logic.audit.AuditAppender;\n@@ -47,6 +48,8 @@\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRuleConfClass;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRuleConfClass;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n import org.apache.syncope.core.provisioning.java.data.JEXLItemTransformerImpl;\n@@ -79,7 +82,9 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {\n \n     private Map<Class<? extends PasswordRuleConf>, Class<? extends PasswordRule>> passwordRuleClasses;\n \n-    private Map<Class<? extends PullCorrelationRuleConf>, Class<? extends PullCorrelationRule>> correlationRuleClasses;\n+    private Map<Class<? extends PullCorrelationRuleConf>, Class<? extends PullCorrelationRule>> pullCRClasses;\n+\n+    private Map<Class<? extends PushCorrelationRuleConf>, Class<? extends PushCorrelationRule>> pushCRClasses;\n \n     private Set<Class<?>> auditAppenderClasses;\n \n@@ -109,7 +114,8 @@ public void load() {\n         reportletClasses = new HashMap<>();\n         accountRuleClasses = new HashMap<>();\n         passwordRuleClasses = new HashMap<>();\n-        correlationRuleClasses = new HashMap<>();\n+        pullCRClasses = new HashMap<>();\n+        pushCRClasses = new HashMap<>();\n         auditAppenderClasses = new HashSet<>();\n \n         ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n@@ -118,6 +124,7 @@ public void load() {\n         scanner.addIncludeFilter(new AssignableTypeFilter(AccountRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PasswordRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PullCorrelationRule.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(PushCorrelationRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(ItemTransformer.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SchedTaskJobDelegate.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(ReconFilterBuilder.class));\n@@ -176,7 +183,17 @@ public void load() {\n                         LOG.warn(\"Found pull correlation rule {} without declared configuration\", clazz.getName());\n                     } else {\n                         classNames.get(ImplementationType.ACCOUNT_RULE).add(clazz.getName());\n-                        correlationRuleClasses.put(annotation.value(), (Class<? extends PullCorrelationRule>) clazz);\n+                        pullCRClasses.put(annotation.value(), (Class<? extends PullCorrelationRule>) clazz);\n+                    }\n+                }\n+\n+                if (PushCorrelationRule.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n+                    PushCorrelationRuleConfClass annotation = clazz.getAnnotation(PushCorrelationRuleConfClass.class);\n+                    if (annotation == null) {\n+                        LOG.warn(\"Found push correlation rule {} without declared configuration\", clazz.getName());\n+                    } else {\n+                        classNames.get(ImplementationType.ACCOUNT_RULE).add(clazz.getName());\n+                        pushCRClasses.put(annotation.value(), (Class<? extends PushCorrelationRule>) clazz);\n                     }\n                 }\n \n@@ -238,7 +255,8 @@ public void load() {\n         reportletClasses = Collections.unmodifiableMap(reportletClasses);\n         accountRuleClasses = Collections.unmodifiableMap(accountRuleClasses);\n         passwordRuleClasses = Collections.unmodifiableMap(passwordRuleClasses);\n-        correlationRuleClasses = Collections.unmodifiableMap(correlationRuleClasses);\n+        pullCRClasses = Collections.unmodifiableMap(pullCRClasses);\n+        pushCRClasses = Collections.unmodifiableMap(pushCRClasses);\n         auditAppenderClasses = Collections.unmodifiableSet(auditAppenderClasses);\n     }\n \n@@ -277,7 +295,14 @@ public Class<? extends PasswordRule> getPasswordRuleClass(\n     public Class<? extends PullCorrelationRule> getPullCorrelationRuleClass(\n             final Class<? extends PullCorrelationRuleConf> correlationRuleConfClass) {\n \n-        return correlationRuleClasses.get(correlationRuleConfClass);\n+        return pullCRClasses.get(correlationRuleConfClass);\n+    }\n+\n+    @Override\n+    public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n+            final Class<? extends PushCorrelationRuleConf> correlationRuleConfClass) {\n+\n+        return pushCRClasses.get(correlationRuleConfClass);\n     }\n \n     @Override"},{"sha":"4488568631c65083bedc09894c2fa2ba23330cd8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -22,11 +22,13 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n \n public interface ImplementationLookup extends SyncopeLoader {\n@@ -47,5 +49,8 @@ Class<? extends PasswordRule> getPasswordRuleClass(\n     Class<? extends PullCorrelationRule> getPullCorrelationRuleClass(\n             Class<? extends PullCorrelationRuleConf> pullCorrelationRuleConfClass);\n \n+    Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n+            Class<? extends PushCorrelationRuleConf> pushCorrelationRuleConfClass);\n+\n     Set<Class<?>> getAuditAppenderClasses();\n }"},{"sha":"6765030a32ed6ddf3df264603bef15dd0e338822","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface PolicyDAO extends DAO<Policy> {\n@@ -36,7 +37,9 @@ public interface PolicyDAO extends DAO<Policy> {\n \n     List<PasswordPolicy> findByPasswordRule(Implementation passwordRule);\n \n-    List<PullPolicy> findByCorrelationRule(Implementation correlationRule);\n+    List<PullPolicy> findByPullCorrelationRule(Implementation correlationRule);\n+\n+    List<PushPolicy> findByPushCorrelationRule(Implementation correlationRule);\n \n     List<AccountPolicy> findByResource(ExternalResource resource);\n "},{"sha":"0b042a59980e29ff40bdb78c0e007fae9897c363","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PushCorrelationRule.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n+\n+/**\n+ * Interface for correlation rule to be evaluated during PushJob execution.\n+ */\n+public interface PushCorrelationRule {\n+\n+    default void setConf(PushCorrelationRuleConf conf) {\n+    }\n+\n+    /**\n+     * Return a search condition.\n+     *\n+     * @param any user, group or any object\n+     * @param provision resource provision\n+     * @return search condition.\n+     */\n+    Filter getFilter(Any<?> any, Provision provision);\n+}"},{"sha":"deb1765d171cc71024cbba7ddfff0480a7d56ce2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PushCorrelationRuleConfClass.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRuleConfClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRuleConfClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRuleConfClass.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface PushCorrelationRuleConfClass {\n+\n+    Class<? extends PushCorrelationRuleConf> value();\n+\n+}"},{"sha":"05bd85a47b55895d3e1d5c9da93c655c64c71356","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import java.util.Set;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n@@ -48,6 +49,8 @@ public interface AnyUtils {\n \n     <T extends AnyTO> T newAnyTO();\n \n+    <P extends AnyPatch> P newAnyPatch(String key);\n+\n     <A extends Any<?>> AnyDAO<A> dao();\n \n     Set<ExternalResource> getAllResources(Any<?> any);"},{"sha":"c98de79ee0e52d7d4b3a7aa38aa9628ec86bb61c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/CorrelationRuleEntity.java","status":"renamed","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FCorrelationRuleEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FCorrelationRuleEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FCorrelationRuleEntity.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -22,11 +22,7 @@\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n \n-public interface CorrelationRule extends Entity {\n-\n-    PullPolicy getPullPolicy();\n-\n-    void setPullPolicy(PullPolicy pullPolicy);\n+public interface CorrelationRuleEntity extends Entity {\n \n     AnyType getAnyType();\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/CorrelationRule.java"},{"sha":"b17072d423f3faae4c7324f7b51ad815ca7166b1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/ProvisioningPolicy.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FProvisioningPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FProvisioningPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FProvisioningPolicy.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+\n+public interface ProvisioningPolicy extends Policy {\n+\n+    ConflictResolutionAction getConflictResolutionAction();\n+\n+    void setConflictResolutionAction(ConflictResolutionAction conflictResolutionAction);\n+}"},{"sha":"fb3f1626cf9860aeea050be6823442db0f389ec8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PullCorrelationRuleEntity.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullCorrelationRuleEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullCorrelationRuleEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullCorrelationRuleEntity.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+public interface PullCorrelationRuleEntity extends CorrelationRuleEntity {\n+\n+    PullPolicy getPullPolicy();\n+\n+    void setPullPolicy(PullPolicy pullPolicy);\n+}"},{"sha":"4faf109ebb9781ae48eae2c4a3df58a0025687d8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PullPolicy.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPullPolicy.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -20,18 +20,13 @@\n \n import java.util.List;\n import java.util.Optional;\n-import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n \n-public interface PullPolicy extends Policy {\n+public interface PullPolicy extends ProvisioningPolicy {\n \n-    ConflictResolutionAction getConflictResolutionAction();\n+    boolean add(PullCorrelationRuleEntity rule);\n \n-    void setConflictResolutionAction(ConflictResolutionAction conflictResolutionAction);\n+    Optional<? extends PullCorrelationRuleEntity> getCorrelationRule(AnyType anyType);\n \n-    boolean add(CorrelationRule rule);\n-\n-    Optional<? extends CorrelationRule> getCorrelationRule(AnyType anyType);\n-\n-    List<? extends CorrelationRule> getCorrelationRules();\n+    List<? extends PullCorrelationRuleEntity> getCorrelationRules();\n }"},{"sha":"766b8222abac0e7979af284ed546cc9b3c340723","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PushCorrelationRuleEntity.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushCorrelationRuleEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushCorrelationRuleEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushCorrelationRuleEntity.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+public interface PushCorrelationRuleEntity extends CorrelationRuleEntity {\n+\n+    PushPolicy getPushPolicy();\n+\n+    void setPushPolicy(PushPolicy pullPolicy);\n+}"},{"sha":"9480ef5ef6465e36d204c912c5e4627d06bb6259","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PushPolicy.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -18,11 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.policy;\n \n-import org.apache.syncope.common.lib.policy.PushPolicySpec;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n \n-public interface PushPolicy extends Policy {\n+public interface PushPolicy extends ProvisioningPolicy {\n \n-    PushPolicySpec getSpecification();\n+    boolean add(PushCorrelationRuleEntity rule);\n \n-    void setSpecification(PushPolicySpec spec);\n+    Optional<? extends PushCorrelationRuleEntity> getCorrelationRule(AnyType anyType);\n+\n+    List<? extends PushCorrelationRuleEntity> getCorrelationRules();\n }"},{"sha":"0d91ed054cf23aa3921404a09e9aa39d2d6c8d42","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResource.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n \n public interface ExternalResource extends ProvidedKeyEntity {\n@@ -61,6 +62,10 @@ public interface ExternalResource extends ProvidedKeyEntity {\n \n     void setPullPolicy(PullPolicy pullPolicy);\n \n+    PushPolicy getPushPolicy();\n+\n+    void setPushPolicy(PushPolicy pushPolicy);\n+\n     TraceLevel getCreateTraceLevel();\n \n     void setCreateTraceLevel(TraceLevel createTraceLevel);"},{"sha":"502d1b0f7fb6ceaae37a33dff027ebc6d62ca746","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPullCorrelationRule.java","status":"modified","additions":19,"deletions":32,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Map;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n@@ -54,13 +56,13 @@ public SearchCond getSearchCond(final ConnectorObject connObj, final Provision p\n                 collect(Collectors.toMap(Item::getIntAttrName, Function.identity()));\n \n         // search for anys by attribute(s) specified in the policy\n-        SearchCond searchCond = null;\n+        List<SearchCond> searchConds = new ArrayList<>();\n \n-        for (String schema : conf.getSchemas()) {\n-            Item mappingItem = mappingItems.get(schema);\n-            Attribute attr = mappingItem == null\n+        conf.getSchemas().forEach(schema -> {\n+            Item item = mappingItems.get(schema);\n+            Attribute attr = item == null\n                     ? null\n-                    : connObj.getAttributeByName(mappingItem.getExtAttrName());\n+                    : connObj.getAttributeByName(item.getExtAttrName());\n             if (attr == null) {\n                 throw new IllegalArgumentException(\n                         \"Connector object does not contains the attributes to perform the search: \" + schema);\n@@ -80,34 +82,19 @@ public SearchCond getSearchCond(final ConnectorObject connObj, final Provision p\n                         : attr.getValue().get(0).toString();\n             }\n \n-            SearchCond nodeCond;\n-            // users: just key or username can be selected\n-            // groups: just key or name can be selected\n-            // any objects: just key or name can be selected\n-            if (\"key\".equalsIgnoreCase(schema)\n-                    || \"username\".equalsIgnoreCase(schema) || \"name\".equalsIgnoreCase(schema)) {\n+            AttributeCond cond = \"key\".equalsIgnoreCase(schema)\n+                    || \"username\".equalsIgnoreCase(schema) || \"name\".equalsIgnoreCase(schema)\n+                    ? new AnyCond()\n+                    : new AttributeCond();\n+            cond.setSchema(schema);\n+            cond.setType(type);\n+            cond.setExpression(expression);\n \n-                AnyCond cond = new AnyCond();\n-                cond.setSchema(schema);\n-                cond.setType(type);\n-                cond.setExpression(expression);\n+            searchConds.add(SearchCond.getLeafCond(cond));\n+        });\n \n-                nodeCond = SearchCond.getLeafCond(cond);\n-            } else {\n-                AttributeCond cond = new AttributeCond();\n-                cond.setSchema(schema);\n-                cond.setType(type);\n-                cond.setExpression(expression);\n-\n-                nodeCond = SearchCond.getLeafCond(cond);\n-            }\n-\n-            searchCond = searchCond == null\n-                    ? nodeCond\n-                    : SearchCond.getAndCond(searchCond, nodeCond);\n-        }\n-\n-        return searchCond;\n+        return conf.isOrSchemas()\n+                ? SearchCond.getOrCond(searchConds)\n+                : SearchCond.getAndCond(searchConds);\n     }\n-\n }"},{"sha":"1583899dd20c169c6938e2ce5076e8b5cca36f31","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPushCorrelationRule.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n+import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+@PushCorrelationRuleConfClass(DefaultPushCorrelationRuleConf.class)\n+public class DefaultPushCorrelationRule implements PushCorrelationRule {\n+\n+    @Autowired\n+    private MappingManager mappingManager;\n+\n+    private DefaultPushCorrelationRuleConf conf;\n+\n+    @Override\n+    public void setConf(final PushCorrelationRuleConf conf) {\n+        if (conf instanceof DefaultPushCorrelationRuleConf) {\n+            this.conf = DefaultPushCorrelationRuleConf.class.cast(conf);\n+        } else {\n+            throw new IllegalArgumentException(\n+                    DefaultPushCorrelationRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n+        }\n+    }\n+\n+    @Override\n+    public Filter getFilter(final Any<?> any, final Provision provision) {\n+        List<Filter> filters = new ArrayList<>();\n+\n+        provision.getMapping().getItems().stream().filter(\n+                item -> item.getPurpose() == MappingPurpose.PROPAGATION || item.getPurpose() == MappingPurpose.BOTH).\n+                forEach(item -> {\n+                    Pair<String, Attribute> attr = mappingManager.prepareAttr(provision, item, any, null);\n+                    if (attr != null && attr.getRight() != null && conf.getSchemas().contains(item.getIntAttrName())) {\n+                        filters.add(provision.isIgnoreCaseMatch()\n+                                ? FilterBuilder.equalsIgnoreCase(attr.getRight())\n+                                : FilterBuilder.equalTo(attr.getRight()));\n+                    }\n+                });\n+\n+        return conf.isOrSchemas()\n+                ? FilterBuilder.or(filters)\n+                : FilterBuilder.and(filters);\n+    }\n+}"},{"sha":"dd839a369ae594eaa1805157c87cc9d503c9b66b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/HaveIBeenPwnedPasswordRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FHaveIBeenPwnedPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FHaveIBeenPwnedPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FHaveIBeenPwnedPasswordRule.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -77,7 +77,7 @@ public void enforce(final User user) {\n \n         if (password != null && clearPassword != null) {\n             try {\n-                final String sha1 = ENCRYPTOR.encode(clearPassword, CipherAlgorithm.SHA1);\n+                String sha1 = ENCRYPTOR.encode(clearPassword, CipherAlgorithm.SHA1);\n \n                 HttpHeaders headers = new HttpHeaders();\n                 headers.set(HttpHeaders.USER_AGENT, \"Apache Syncope\");"},{"sha":"9c573fd17b4408be8943371ccbcdb80d1b745168","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n@@ -227,6 +228,8 @@ private StringBuilder getByPolicyQuery(final Class<? extends Policy> policyClass\n             query.append(\"passwordPolicy\");\n         } else if (PullPolicy.class.isAssignableFrom(policyClass)) {\n             query.append(\"pullPolicy\");\n+        } else if (PushPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"pushPolicy\");\n         }\n \n         return query;"},{"sha":"495585f45997b4645803dd410e7c3a8dded0e1de","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":32,"deletions":6,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -20,21 +20,22 @@\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.policy.JPACorrelationRule;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushPolicy;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -45,6 +46,9 @@ public class JPAPolicyDAO extends AbstractDAO<Policy> implements PolicyDAO {\n     @Autowired\n     private RealmDAO realmDAO;\n \n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n     private <T extends Policy> Class<? extends AbstractPolicy> getEntityReference(final Class<T> reference) {\n         return AccountPolicy.class.isAssignableFrom(reference)\n                 ? JPAAccountPolicy.class\n@@ -92,15 +96,25 @@ public List<PasswordPolicy> findByPasswordRule(final Implementation passwordRule\n     }\n \n     @Override\n-    public List<PullPolicy> findByCorrelationRule(final Implementation correlationRule) {\n+    public List<PullPolicy> findByPullCorrelationRule(final Implementation correlationRule) {\n         TypedQuery<PullPolicy> query = entityManager().createQuery(\n-                \"SELECT DISTINCT e.pullPolicy FROM \" + JPACorrelationRule.class.getSimpleName() + \" e \"\n+                \"SELECT DISTINCT e.pullPolicy FROM \" + JPAPullCorrelationRuleEntity.class.getSimpleName() + \" e \"\n                 + \"WHERE e.implementation=:correlationRule\", PullPolicy.class);\n         query.setParameter(\"correlationRule\", correlationRule);\n \n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<PushPolicy> findByPushCorrelationRule(final Implementation correlationRule) {\n+        TypedQuery<PushPolicy> query = entityManager().createQuery(\n+                \"SELECT DISTINCT e.pushPolicy FROM \" + JPAPushCorrelationRuleEntity.class.getSimpleName() + \" e \"\n+                + \"WHERE e.implementation=:correlationRule\", PushPolicy.class);\n+        query.setParameter(\"correlationRule\", correlationRule);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public List<AccountPolicy> findByResource(final ExternalResource resource) {\n         TypedQuery<AccountPolicy> query = entityManager().createQuery(\n@@ -125,13 +139,25 @@ public <T extends Policy> T save(final T policy) {\n \n     @Override\n     public <T extends Policy> void delete(final T policy) {\n-        for (Realm realm : realmDAO.findByPolicy(policy)) {\n+        realmDAO.findByPolicy(policy).forEach(realm -> {\n             if (policy instanceof AccountPolicy) {\n                 realm.setAccountPolicy(null);\n             } else if (policy instanceof PasswordPolicy) {\n                 realm.setPasswordPolicy(null);\n             }\n-        }\n+        });\n+\n+        resourceDAO.findByPolicy(policy).forEach(resource -> {\n+            if (policy instanceof AccountPolicy) {\n+                resource.setAccountPolicy(null);\n+            } else if (policy instanceof PasswordPolicy) {\n+                resource.setPasswordPolicy(null);\n+            } else if (policy instanceof PullPolicy) {\n+                resource.setPullPolicy(null);\n+            } else if (policy instanceof PushPolicy) {\n+                resource.setPushPolicy(null);\n+            }\n+        });\n \n         entityManager().remove(policy);\n     }"},{"sha":"b2ad416dd624eda9666e97c5858fb1fb0439d65c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n-import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.ProvisioningPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -134,7 +134,7 @@ public List<Realm> findByResource(final ExternalResource resource) {\n \n     @Override\n     public <T extends Policy> List<Realm> findByPolicy(final T policy) {\n-        if (PullPolicy.class.isAssignableFrom(policy.getClass())) {\n+        if (ProvisioningPolicy.class.isAssignableFrom(policy.getClass())) {\n             return Collections.<Realm>emptyList();\n         }\n \n@@ -234,5 +234,4 @@ public void delete(final String key) {\n \n         delete(realm);\n     }\n-\n }"},{"sha":"5e97993bea99b92a8851ee84a9cf1ce80ee8e7d7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -514,7 +514,6 @@ public Collection<ExternalResource> findAllResources(final User user) {\n     @Transactional(readOnly = true)\n     @Override\n     public Collection<String> findAllResourceKeys(final String key) {\n-        return findAllResources(authFind(key)).stream().map(resource -> resource.getKey()).collect(Collectors.toList());\n+        return findAllResources(authFind(key)).stream().map(Entity::getKey).collect(Collectors.toList());\n     }\n-\n }"},{"sha":"70f62c63352fe5a637a97d3dace85635542a58d7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -26,6 +26,10 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.ClassUtils;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -343,6 +347,33 @@ public <T extends AnyTO> T newAnyTO() {\n         return result;\n     }\n \n+    @Override\n+    public <P extends AnyPatch> P newAnyPatch(final String key) {\n+        P result = null;\n+\n+        switch (anyTypeKind) {\n+            case USER:\n+                result = (P) new UserPatch();\n+                break;\n+\n+            case GROUP:\n+                result = (P) new GroupPatch();\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = (P) new AnyObjectPatch();\n+                break;\n+\n+            default:\n+        }\n+\n+        if (result != null) {\n+            result.setKey(key);\n+        }\n+\n+        return result;\n+    }\n+\n     @Override\n     public <A extends Any<?>> AnyDAO<A> dao() {\n         AnyDAO<A> result = null;"},{"sha":"0ec153878d1b10fb8437282b9ffa358428c7488f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -131,12 +131,14 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Remediation;\n-import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n-import org.apache.syncope.core.persistence.jpa.entity.policy.JPACorrelationRule;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResourceHistoryConf;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnitItem;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;\n \n @Component\n public class JPAEntityFactory implements EntityFactory {\n@@ -164,8 +166,10 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAPushPolicy();\n         } else if (reference.equals(PullPolicy.class)) {\n             result = (E) new JPAPullPolicy();\n-        } else if (reference.equals(CorrelationRule.class)) {\n-            result = (E) new JPACorrelationRule();\n+        } else if (reference.equals(PullCorrelationRuleEntity.class)) {\n+            result = (E) new JPAPullCorrelationRuleEntity();\n+        } else if (reference.equals(PushCorrelationRuleEntity.class)) {\n+            result = (E) new JPAPushCorrelationRuleEntity();\n         } else if (reference.equals(AnyTypeClass.class)) {\n             result = (E) new JPAAnyTypeClass();\n         } else if (reference.equals(AnyType.class)) {"},{"sha":"93b457bb32363c46c68eebbb45b332da686f97e1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/AbstractCorrelationRuleEntity.java","status":"renamed","additions":8,"deletions":28,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractCorrelationRuleEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractCorrelationRuleEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractCorrelationRuleEntity.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -18,48 +18,27 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.policy;\n \n-import javax.persistence.Entity;\n import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n+import javax.persistence.MappedSuperclass;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n-import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRuleEntity;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n \n-@Entity\n-@Table(name = JPACorrelationRule.TABLE, uniqueConstraints =\n-        @UniqueConstraint(columnNames = { \"pullPolicy_id\", \"anyType_id\" }))\n-public class JPACorrelationRule extends AbstractGeneratedKeyEntity implements CorrelationRule {\n+@MappedSuperclass\n+abstract class AbstractCorrelationRuleEntity extends AbstractGeneratedKeyEntity implements CorrelationRuleEntity {\n \n-    private static final long serialVersionUID = 4276417265524083919L;\n-\n-    public static final String TABLE = \"CorrelationRule\";\n-\n-    @ManyToOne(optional = false)\n-    private JPAPullPolicy pullPolicy;\n+    private static final long serialVersionUID = 4017405130146577834L;\n \n     @ManyToOne(optional = false)\n     private JPAAnyType anyType;\n \n     @ManyToOne(optional = false)\n     private JPAImplementation implementation;\n \n-    @Override\n-    public PullPolicy getPullPolicy() {\n-        return pullPolicy;\n-    }\n-\n-    @Override\n-    public void setPullPolicy(final PullPolicy pullPolicy) {\n-        checkType(pullPolicy, JPAPullPolicy.class);\n-        this.pullPolicy = (JPAPullPolicy) pullPolicy;\n-    }\n-\n     @Override\n     public AnyType getAnyType() {\n         return anyType;\n@@ -76,11 +55,12 @@ public Implementation getImplementation() {\n         return implementation;\n     }\n \n+    protected abstract ImplementationType getImplementationType();\n+\n     @Override\n     public void setImplementation(final Implementation implementation) {\n         checkType(implementation, JPAImplementation.class);\n-        checkImplementationType(implementation, ImplementationType.PULL_CORRELATION_RULE);\n+        checkImplementationType(implementation, getImplementationType());\n         this.implementation = (JPAImplementation) implementation;\n     }\n-\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPACorrelationRule.java"},{"sha":"ffdb008e080cca5517f5fd4ba639f2b80abb35c4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/AbstractProvisioningPolicy.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractProvisioningPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractProvisioningPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractProvisioningPolicy.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.MappedSuperclass;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.syncope.core.persistence.api.entity.policy.ProvisioningPolicy;\n+\n+@MappedSuperclass\n+abstract class AbstractProvisioningPolicy extends AbstractPolicy implements ProvisioningPolicy {\n+\n+    private static final long serialVersionUID = 3804545832315575686L;\n+\n+    @Enumerated(EnumType.STRING)\n+    @NotNull\n+    private ConflictResolutionAction conflictResolutionAction;\n+\n+    @Override\n+    public ConflictResolutionAction getConflictResolutionAction() {\n+        return conflictResolutionAction;\n+    }\n+\n+    @Override\n+    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\n+        this.conflictResolutionAction = conflictResolutionAction;\n+    }\n+}"},{"sha":"2a616c2e13bd380d7794241f16769bcdf4088b6a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPolicyUtilsFactory.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n+import org.apache.syncope.common.lib.policy.PushPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n@@ -67,6 +68,8 @@ public PolicyUtils getInstance(final Class<? extends PolicyTO> policyClass) {\n             type = PolicyType.PASSWORD;\n         } else if (policyClass == PullPolicyTO.class) {\n             type = PolicyType.PULL;\n+        } else if (policyClass == PushPolicyTO.class) {\n+            type = PolicyType.PUSH;\n         } else {\n             throw new IllegalArgumentException(\"Invalid PolicyTO class: \" + policyClass.getName());\n         }\n@@ -78,5 +81,4 @@ public PolicyUtils getInstance(final Class<? extends PolicyTO> policyClass) {\n     public PolicyUtils getInstance(final PolicyTO policyTO) {\n         return getInstance(policyTO.getClass());\n     }\n-\n }"},{"sha":"394ad08a19f0e7f38d7db6cde2cf10cefbba6c21","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPullCorrelationRuleEntity.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullCorrelationRuleEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullCorrelationRuleEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullCorrelationRuleEntity.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n+\n+@Entity\n+@Table(name = JPAPullCorrelationRuleEntity.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"pullPolicy_id\", \"anyType_id\" }))\n+public class JPAPullCorrelationRuleEntity extends AbstractCorrelationRuleEntity implements PullCorrelationRuleEntity {\n+\n+    private static final long serialVersionUID = 4276417265524083919L;\n+\n+    public static final String TABLE = \"PullCorrelationRuleEntity\";\n+\n+    @ManyToOne(optional = false)\n+    private JPAPullPolicy pullPolicy;\n+\n+    @Override\n+    protected ImplementationType getImplementationType() {\n+        return ImplementationType.PULL_CORRELATION_RULE;\n+    }\n+\n+    @Override\n+    public PullPolicy getPullPolicy() {\n+        return pullPolicy;\n+    }\n+\n+    @Override\n+    public void setPullPolicy(final PullPolicy pullPolicy) {\n+        checkType(pullPolicy, JPAPullPolicy.class);\n+        this.pullPolicy = (JPAPullPolicy) pullPolicy;\n+    }\n+}"},{"sha":"076695aaba2a04a38a2c4ca7d8f126f021b3c5fd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPullPolicy.java","status":"modified","additions":8,"deletions":26,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullPolicy.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -23,56 +23,38 @@\n import java.util.Optional;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n import javax.persistence.FetchType;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n-import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n \n @Entity\n @Table(name = JPAPullPolicy.TABLE)\n-public class JPAPullPolicy extends AbstractPolicy implements PullPolicy {\n+public class JPAPullPolicy extends AbstractProvisioningPolicy implements PullPolicy {\n \n     private static final long serialVersionUID = -6090413855809521279L;\n \n     public static final String TABLE = \"PullPolicy\";\n \n-    @Enumerated(EnumType.STRING)\n-    @NotNull\n-    private ConflictResolutionAction conflictResolutionAction;\n-\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"pullPolicy\")\n-    private List<JPACorrelationRule> correlationRules = new ArrayList<>();\n-\n-    @Override\n-    public ConflictResolutionAction getConflictResolutionAction() {\n-        return conflictResolutionAction;\n-    }\n-\n-    @Override\n-    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\n-        this.conflictResolutionAction = conflictResolutionAction;\n-    }\n+    private List<JPAPullCorrelationRuleEntity> correlationRules = new ArrayList<>();\n \n     @Override\n-    public boolean add(final CorrelationRule filter) {\n-        checkType(filter, JPACorrelationRule.class);\n-        return this.correlationRules.add((JPACorrelationRule) filter);\n+    public boolean add(final PullCorrelationRuleEntity filter) {\n+        checkType(filter, JPAPullCorrelationRuleEntity.class);\n+        return this.correlationRules.add((JPAPullCorrelationRuleEntity) filter);\n     }\n \n     @Override\n-    public Optional<? extends CorrelationRule> getCorrelationRule(final AnyType anyType) {\n+    public Optional<? extends PullCorrelationRuleEntity> getCorrelationRule(final AnyType anyType) {\n         return correlationRules.stream().\n                 filter(rule -> anyType != null && anyType.equals(rule.getAnyType())).findFirst();\n     }\n \n     @Override\n-    public List<? extends CorrelationRule> getCorrelationRules() {\n+    public List<? extends PullCorrelationRuleEntity> getCorrelationRules() {\n         return correlationRules;\n     }\n }"},{"sha":"bdf05a7e553009f62575614b96ddf92c4bcdf14f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPushCorrelationRuleEntity.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushCorrelationRuleEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushCorrelationRuleEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushCorrelationRuleEntity.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n+\n+@Entity\n+@Table(name = JPAPushCorrelationRuleEntity.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"pushPolicy_id\", \"anyType_id\" }))\n+public class JPAPushCorrelationRuleEntity extends AbstractCorrelationRuleEntity implements PushCorrelationRuleEntity {\n+\n+    private static final long serialVersionUID = 4276417265524083919L;\n+\n+    public static final String TABLE = \"PushCorrelationRuleEntity\";\n+\n+    @ManyToOne(optional = false)\n+    private JPAPushPolicy pushPolicy;\n+\n+    @Override\n+    protected ImplementationType getImplementationType() {\n+        return ImplementationType.PUSH_CORRELATION_RULE;\n+    }\n+\n+    @Override\n+    public PushPolicy getPushPolicy() {\n+        return pushPolicy;\n+    }\n+\n+    @Override\n+    public void setPushPolicy(final PushPolicy pushPolicy) {\n+        checkType(pushPolicy, JPAPushPolicy.class);\n+        this.pushPolicy = (JPAPushPolicy) pushPolicy;\n+    }\n+}"},{"sha":"5103647ea5772a38a0ba0138035361f77454c49a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPushPolicy.java","status":"modified","additions":21,"deletions":10,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -18,32 +18,43 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.policy;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n-import javax.persistence.Lob;\n+import javax.persistence.FetchType;\n+import javax.persistence.OneToMany;\n import javax.persistence.Table;\n-import org.apache.syncope.common.lib.policy.PushPolicySpec;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n \n @Entity\n @Table(name = JPAPushPolicy.TABLE)\n-public class JPAPushPolicy extends AbstractPolicy implements PushPolicy {\n+public class JPAPushPolicy extends AbstractProvisioningPolicy implements PushPolicy {\n \n     private static final long serialVersionUID = -5875589156893921113L;\n \n     public static final String TABLE = \"PushPolicy\";\n \n-    @Lob\n-    private String specification;\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"pushPolicy\")\n+    private List<JPAPushCorrelationRuleEntity> correlationRules = new ArrayList<>();\n \n     @Override\n-    public PushPolicySpec getSpecification() {\n-        return POJOHelper.deserialize(specification, PushPolicySpec.class);\n+    public boolean add(final PushCorrelationRuleEntity filter) {\n+        checkType(filter, JPAPushCorrelationRuleEntity.class);\n+        return this.correlationRules.add((JPAPushCorrelationRuleEntity) filter);\n     }\n \n     @Override\n-    public void setSpecification(final PushPolicySpec policy) {\n-        this.specification = POJOHelper.serialize(policy);\n+    public Optional<? extends PushCorrelationRuleEntity> getCorrelationRule(final AnyType anyType) {\n+        return correlationRules.stream().\n+                filter(rule -> anyType != null && anyType.equals(rule.getAnyType())).findFirst();\n     }\n \n+    @Override\n+    public List<? extends PushCorrelationRuleEntity> getCorrelationRules() {\n+        return correlationRules;\n+    }\n }"},{"sha":"b8e218f6834e651fedd10b4a46ecc6321d972220","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -64,9 +64,11 @@\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushPolicy;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n \n /**\n@@ -141,6 +143,9 @@ public class JPAExternalResource extends AbstractProvidedKeyEntity implements Ex\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAPullPolicy pullPolicy;\n \n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAPushPolicy pushPolicy;\n+\n     /**\n      * Configuration properties that are overridden from the connector instance.\n      */\n@@ -337,6 +342,17 @@ public void setPullPolicy(final PullPolicy pullPolicy) {\n         this.pullPolicy = (JPAPullPolicy) pullPolicy;\n     }\n \n+    @Override\n+    public PushPolicy getPushPolicy() {\n+        return pushPolicy;\n+    }\n+\n+    @Override\n+    public void setPushPolicy(final PushPolicy pushPolicy) {\n+        checkType(pushPolicy, JPAPushPolicy.class);\n+        this.pushPolicy = (JPAPushPolicy) pushPolicy;\n+    }\n+\n     @Override\n     public Set<ConnConfProperty> getConfOverride() {\n         Set<ConnConfProperty> confOverride = new HashSet<>();"},{"sha":"376534c27ec6cee1992d8896de3a105626220c10","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyImplementationLookup.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -23,16 +23,19 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultAccountRule;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPasswordRule;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPullCorrelationRule;\n+import org.apache.syncope.core.persistence.jpa.dao.DefaultPushCorrelationRule;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -86,6 +89,13 @@ public Class<? extends PullCorrelationRule> getPullCorrelationRuleClass(\n         return DefaultPullCorrelationRule.class;\n     }\n \n+    @Override\n+    public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n+            final Class<? extends PushCorrelationRuleConf> pushCorrelationRuleConfClass) {\n+\n+        return DefaultPushCorrelationRule.class;\n+    }\n+\n     @Override\n     public Set<Class<?>> getAuditAppenderClasses() {\n         return Collections.emptySet();"},{"sha":"2f29e1760decc0f400f7832808cedfc70f7b8712","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ImplementationTest.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -43,7 +43,7 @@ public void findAll() {\n         List<Implementation> implementations = implementationDAO.findAll();\n         assertFalse(implementations.isEmpty());\n \n-        assertEquals(17, implementations.size());\n+        assertEquals(18, implementations.size());\n \n         implementations = implementationDAO.find(ImplementationType.PULL_ACTIONS);\n         assertEquals(1, implementations.size());\n@@ -68,6 +68,9 @@ public void findAll() {\n \n         implementations = implementationDAO.find(ImplementationType.PULL_CORRELATION_RULE);\n         assertEquals(1, implementations.size());\n+\n+        implementations = implementationDAO.find(ImplementationType.PUSH_CORRELATION_RULE);\n+        assertEquals(1, implementations.size());\n     }\n \n     @Test"},{"sha":"6a6b16c044f6abfb1f30c0a1bda4b1c2726e5b89","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":28,"deletions":14,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -28,6 +28,7 @@\n import java.util.UUID;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n@@ -37,14 +38,16 @@\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n \n @Transactional(\"Master\")\n public class PolicyTest extends AbstractTest {\n@@ -67,17 +70,28 @@ public void findAll() {\n \n     @Test\n     public void findByKey() {\n-        PullPolicy policy = policyDAO.find(\"880f8553-069b-4aed-9930-2cd53873f544\");\n-        assertNotNull(policy);\n-\n-        CorrelationRule rule = policy.getCorrelationRule(anyTypeDAO.findUser()).orElse(null);\n-        assertNotNull(rule);\n-        DefaultPullCorrelationRuleConf ruleConf =\n-                POJOHelper.deserialize(rule.getImplementation().getBody(), DefaultPullCorrelationRuleConf.class);\n-        assertNotNull(ruleConf);\n-        assertEquals(2, ruleConf.getSchemas().size());\n-        assertTrue(ruleConf.getSchemas().contains(\"username\"));\n-        assertTrue(ruleConf.getSchemas().contains(\"firstname\"));\n+        PullPolicy pullPolicy = policyDAO.find(\"880f8553-069b-4aed-9930-2cd53873f544\");\n+        assertNotNull(pullPolicy);\n+\n+        PullCorrelationRuleEntity pullCR = pullPolicy.getCorrelationRule(anyTypeDAO.findUser()).orElse(null);\n+        assertNotNull(pullCR);\n+        DefaultPullCorrelationRuleConf pullCRConf =\n+                POJOHelper.deserialize(pullCR.getImplementation().getBody(), DefaultPullCorrelationRuleConf.class);\n+        assertNotNull(pullCRConf);\n+        assertEquals(2, pullCRConf.getSchemas().size());\n+        assertTrue(pullCRConf.getSchemas().contains(\"username\"));\n+        assertTrue(pullCRConf.getSchemas().contains(\"firstname\"));\n+\n+        PushPolicy pushPolicy = policyDAO.find(\"fb6530e5-892d-4f47-a46b-180c5b6c5c83\");\n+        assertNotNull(pushPolicy);\n+\n+        PushCorrelationRuleEntity pushCR = pushPolicy.getCorrelationRule(anyTypeDAO.findUser()).orElse(null);\n+        assertNotNull(pushCR);\n+        DefaultPushCorrelationRuleConf pushCRConf =\n+                POJOHelper.deserialize(pushCR.getImplementation().getBody(), DefaultPushCorrelationRuleConf.class);\n+        assertNotNull(pushCRConf);\n+        assertEquals(1, pushCRConf.getSchemas().size());\n+        assertTrue(pushCRConf.getSchemas().contains(\"email\"));\n     }\n \n     @Test\n@@ -103,7 +117,7 @@ public void create() {\n         impl1.setBody(PullCorrelationRule.class.getName());\n         impl1 = implementationDAO.save(impl1);\n \n-        CorrelationRule rule1 = entityFactory.newEntity(CorrelationRule.class);\n+        PullCorrelationRuleEntity rule1 = entityFactory.newEntity(PullCorrelationRuleEntity.class);\n         rule1.setAnyType(anyTypeDAO.findUser());\n         rule1.setPullPolicy(policy);\n         rule1.setImplementation(impl1);\n@@ -116,7 +130,7 @@ public void create() {\n         impl2.setBody(PullCorrelationRule.class.getName());\n         impl2 = implementationDAO.save(impl2);\n \n-        CorrelationRule rule2 = entityFactory.newEntity(CorrelationRule.class);\n+        PullCorrelationRuleEntity rule2 = entityFactory.newEntity(PullCorrelationRuleEntity.class);\n         rule2.setAnyType(anyTypeDAO.findGroup());\n         rule2.setPullPolicy(policy);\n         rule2.setImplementation(impl2);"},{"sha":"3c3358612cd91e266fff7b252922db3a241b4383","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -640,11 +640,18 @@ under the License.\n   <PullPolicy id=\"880f8553-069b-4aed-9930-2cd53873f544\" description=\"another pull policy\" conflictResolutionAction=\"ALL\"/>\n   <Implementation id=\"TestPullCorrelationRule\" type=\"PULL_CORRELATION_RULE\" engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf\",\"name\":\"org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf\",\"schemas\":[\"username\",\"firstname\"]}'/>\n-  <CorrelationRule id=\"10e3d196-7486-4c88-aefd-59e40d93a0c1\" pullPolicy_id=\"880f8553-069b-4aed-9930-2cd53873f544\" \n-                   anyType_id=\"USER\" implementation_id=\"TestPullCorrelationRule\"/>\n+  <PullCorrelationRuleEntity id=\"10e3d196-7486-4c88-aefd-59e40d93a0c1\" pullPolicy_id=\"880f8553-069b-4aed-9930-2cd53873f544\" \n+                             anyType_id=\"USER\" implementation_id=\"TestPullCorrelationRule\"/>\n   <PullPolicy id=\"4ad10d94-e002-4b3f-b771-16089cc71da9\" description=\"pull policy 1\" conflictResolutionAction=\"IGNORE\"/>\n   <PullPolicy id=\"9454b0d7-2610-400a-be82-fc23cf553dd6\" description=\"pull policy for java rule\" conflictResolutionAction=\"IGNORE\"/>\n \n+  <!-- push policies -->\n+  <PushPolicy id=\"fb6530e5-892d-4f47-a46b-180c5b6c5c83\" description=\"a push policy\" conflictResolutionAction=\"IGNORE\"/>\n+  <Implementation id=\"TestPushCorrelationRule\" type=\"PUSH_CORRELATION_RULE\" engine=\"JAVA\"\n+                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf\",\"name\":\"org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf\",\"schemas\":[\"email\"]}'/>\n+  <PushCorrelationRuleEntity id=\"24463935-32a0-4272-bc78-04d6d0adc69e\" pushPolicy_id=\"fb6530e5-892d-4f47-a46b-180c5b6c5c83\" \n+                             anyType_id=\"USER\" implementation_id=\"TestPushCorrelationRule\"/>\n+  \n   <ConnInstance id=\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\" displayName=\"ConnInstance100\"\n                 adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                 location=\"${connid.location}\""},{"sha":"1cc30c6a6d977edf687d35ae43a43f7163db44ea","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/MappingManager.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -64,6 +64,17 @@ public interface MappingManager {\n      */\n     List<PlainAttrValue> getIntValues(Provision provision, Item mapItem, IntAttrName intAttrName, Any<?> any);\n \n+    /**\n+     * Prepare attribute for sending to a connector instance.\n+     *\n+     * @param provision provision information\n+     * @param item mapping item\n+     * @param any given any object\n+     * @param password clear-text password\n+     * @return connObjectLink (if it is the case) + prepared attribute\n+     */\n+    Pair<String, Attribute> prepareAttr(Provision provision, Item item, Any<?> any, String password);\n+\n     /**\n      * Prepare attributes for sending to a connector instance.\n      *"},{"sha":"9aa3050d6578c12bfb061fadb301a06a2ab5ca50","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ProvisioningProfile.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningProfile.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -34,7 +34,7 @@\n \n     private boolean dryRun;\n \n-    private ConflictResolutionAction resAct;\n+    private ConflictResolutionAction conflictResolutionAction;\n \n     private final List<A> actions = new ArrayList<>();\n \n@@ -63,12 +63,12 @@ public void setDryRun(final boolean dryRun) {\n         this.dryRun = dryRun;\n     }\n \n-    public ConflictResolutionAction getResAct() {\n-        return resAct;\n+    public ConflictResolutionAction getConflictResolutionAction() {\n+        return conflictResolutionAction;\n     }\n \n-    public void setResAct(final ConflictResolutionAction resAct) {\n-        this.resAct = resAct;\n+    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\n+        this.conflictResolutionAction = conflictResolutionAction;\n     }\n \n     public List<A> getActions() {"},{"sha":"fbaf7615d55737a332929888e4a298d891d8822e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":17,"deletions":22,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -304,23 +304,18 @@ public Pair<String, Set<Attribute>> prepareAttrs(final Realm realm, final OrgUni\n         return Pair.of(connObjectKey, attributes);\n     }\n \n-    /**\n-     * Prepare an attribute to be sent to a connector instance.\n-     *\n-     * @param provision external resource\n-     * @param mapItem mapping item for the given attribute\n-     * @param any given any object\n-     * @param password clear-text password\n-     * @return connObjectKey + prepared attribute\n-     */\n-    private Pair<String, Attribute> prepareAttr(\n-            final Provision provision, final Item mapItem, final Any<?> any, final String password) {\n+    @Override\n+    public Pair<String, Attribute> prepareAttr(\n+            final Provision provision,\n+            final Item item,\n+            final Any<?> any,\n+            final String password) {\n \n         IntAttrName intAttrName;\n         try {\n-            intAttrName = intAttrNameParser.parse(mapItem.getIntAttrName(), provision.getAnyType().getKind());\n+            intAttrName = intAttrNameParser.parse(item.getIntAttrName(), provision.getAnyType().getKind());\n         } catch (ParseException e) {\n-            LOG.error(\"Invalid intAttrName '{}' specified, ignoring\", mapItem.getIntAttrName(), e);\n+            LOG.error(\"Invalid intAttrName '{}' specified, ignoring\", item.getIntAttrName(), e);\n             return null;\n         }\n \n@@ -345,13 +340,13 @@ private Pair<String, Attribute> prepareAttr(\n             }\n         }\n \n-        List<PlainAttrValue> values = getIntValues(provision, mapItem, intAttrName, any);\n+        List<PlainAttrValue> values = getIntValues(provision, item, intAttrName, any);\n \n         LOG.debug(\"Define mapping for: \"\n-                + \"\\n* ExtAttrName \" + mapItem.getExtAttrName()\n-                + \"\\n* is connObjectKey \" + mapItem.isConnObjectKey()\n-                + \"\\n* is password \" + mapItem.isPassword()\n-                + \"\\n* mandatory condition \" + mapItem.getMandatoryCondition()\n+                + \"\\n* ExtAttrName \" + item.getExtAttrName()\n+                + \"\\n* is connObjectKey \" + item.isConnObjectKey()\n+                + \"\\n* is password \" + item.isPassword()\n+                + \"\\n* mandatory condition \" + item.getMandatoryCondition()\n                 + \"\\n* Schema \" + intAttrName.getSchemaName()\n                 + \"\\n* ClassType \" + schemaType.getType().getName()\n                 + \"\\n* Values \" + values);\n@@ -370,9 +365,9 @@ private Pair<String, Attribute> prepareAttr(\n                 }\n             }\n \n-            if (mapItem.isConnObjectKey()) {\n+            if (item.isConnObjectKey()) {\n                 result = Pair.of(objValues.isEmpty() ? null : objValues.iterator().next().toString(), null);\n-            } else if (mapItem.isPassword() && any instanceof User) {\n+            } else if (item.isPassword() && any instanceof User) {\n                 String passwordAttrValue = password;\n                 if (StringUtils.isBlank(passwordAttrValue)) {\n                     User user = (User) any;\n@@ -398,8 +393,8 @@ private Pair<String, Attribute> prepareAttr(\n                 }\n             } else {\n                 result = Pair.of(null, objValues.isEmpty()\n-                        ? AttributeBuilder.build(mapItem.getExtAttrName())\n-                        : AttributeBuilder.build(mapItem.getExtAttrName(), objValues));\n+                        ? AttributeBuilder.build(item.getExtAttrName())\n+                        : AttributeBuilder.build(item.getExtAttrName(), objValues));\n             }\n         }\n "},{"sha":"a06d54a426484cca25bd45cc5f1923232a0cb5aa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -59,6 +59,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.GroupablePlainAttr;\n import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n@@ -593,9 +594,7 @@ protected void fillTO(\n             anyTO.getVirAttrs().add(attrTOBuilder.build());\n         });\n \n-        resources.forEach(resource -> {\n-            anyTO.getResources().add(resource.getKey());\n-        });\n+        anyTO.getResources().addAll(resources.stream().map(Entity::getKey).collect(Collectors.toSet()));\n     }\n \n     protected RelationshipTO getRelationshipTO(final String relationshipType, final Any<?> otherEnd) {"},{"sha":"129d0e4c485255b9b6c2b8e2d9eff9c8924adac9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -423,10 +423,10 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         }\n \n         // check if some connObjectKey was changed by the update above\n-        Map<String, String> newcCnnObjectKeys = getConnObjectKeys(anyObject, anyUtils);\n+        Map<String, String> newConnObjectKeys = getConnObjectKeys(anyObject, anyUtils);\n         oldConnObjectKeys.entrySet().stream().\n-                filter(entry -> newcCnnObjectKeys.containsKey(entry.getKey())\n-                && !entry.getValue().equals(newcCnnObjectKeys.get(entry.getKey()))).\n+                filter(entry -> newConnObjectKeys.containsKey(entry.getKey())\n+                && !entry.getValue().equals(newConnObjectKeys.get(entry.getKey()))).\n                 forEach(entry -> {\n                     propByRes.addOldConnObjectKey(entry.getKey(), entry.getValue());\n                     propByRes.add(ResourceOperation.UPDATE, entry.getKey());"},{"sha":"91df46f4c75b4a86c7e3d5ddc1ea58cb47348a72","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -128,6 +129,10 @@ public void update(final Implementation implementation, final ImplementationTO i\n                     base = PullCorrelationRule.class;\n                     break;\n \n+                case PUSH_CORRELATION_RULE:\n+                    base = PushCorrelationRule.class;\n+                    break;\n+\n                 case VALIDATOR:\n                     base = Validator.class;\n                     break;\n@@ -152,12 +157,13 @@ public void update(final Implementation implementation, final ImplementationTO i\n                 }\n             } else if (implementation.getType() == ImplementationType.ACCOUNT_RULE\n                     || implementation.getType() == ImplementationType.PASSWORD_RULE\n-                    || implementation.getType() == ImplementationType.PULL_CORRELATION_RULE) {\n+                    || implementation.getType() == ImplementationType.PULL_CORRELATION_RULE\n+                    || implementation.getType() == ImplementationType.PUSH_CORRELATION_RULE) {\n \n                 RuleConf rule = POJOHelper.deserialize(implementation.getBody(), RuleConf.class);\n                 if (rule == null) {\n-                    sce.getElements().\n-                            add(\"Could not deserialize as neither Account, Password nor PullCorrelation RuleConf\");\n+                    sce.getElements().add(\"Could not deserialize as neither \"\n+                            + \"Account, Password, Pull nor Push Correlation RuleConf\");\n                     throw sce;\n                 }\n             } else {\n@@ -188,5 +194,4 @@ public ImplementationTO getImplementationTO(final Implementation implementation)\n         BeanUtils.copyProperties(implementation, implementationTO);\n         return implementationTO;\n     }\n-\n }"},{"sha":"53122b5d869a112b76d4404d308743826199c824","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":49,"deletions":4,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n+import org.apache.syncope.common.lib.policy.PushPolicyTO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n@@ -37,9 +38,11 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -138,24 +141,57 @@ private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO)\n                 if (anyType == null) {\n                     LOG.debug(\"Invalid AnyType {} specified, ignoring...\", type);\n                 } else {\n-                    CorrelationRule correlationRule = pullPolicy.getCorrelationRule(anyType).orElse(null);\n+                    PullCorrelationRuleEntity correlationRule = pullPolicy.getCorrelationRule(anyType).orElse(null);\n                     if (correlationRule == null) {\n-                        correlationRule = entityFactory.newEntity(CorrelationRule.class);\n+                        correlationRule = entityFactory.newEntity(PullCorrelationRuleEntity.class);\n                         correlationRule.setAnyType(anyType);\n                         correlationRule.setPullPolicy(pullPolicy);\n                         pullPolicy.add(correlationRule);\n                     }\n \n                     Implementation rule = implementationDAO.find(impl);\n                     if (rule == null) {\n-                        throw new NotFoundException(\"Implementation \" + type);\n+                        throw new NotFoundException(\"Implementation \" + type + \" \" + impl);\n                     }\n                     correlationRule.setImplementation(rule);\n                 }\n             });\n             // remove all rules not contained in the TO\n             pullPolicy.getCorrelationRules().removeIf(anyFilter\n                     -> !pullPolicyTO.getCorrelationRules().containsKey(anyFilter.getAnyType().getKey()));\n+        } else if (policyTO instanceof PushPolicyTO) {\n+            if (result == null) {\n+                result = (T) entityFactory.newEntity(PushPolicy.class);\n+            }\n+\n+            PushPolicy pushPolicy = PushPolicy.class.cast(result);\n+            PushPolicyTO pushPolicyTO = PushPolicyTO.class.cast(policyTO);\n+\n+            pushPolicy.setConflictResolutionAction(pushPolicyTO.getConflictResolutionAction());\n+\n+            pushPolicyTO.getCorrelationRules().forEach((type, impl) -> {\n+                AnyType anyType = anyTypeDAO.find(type);\n+                if (anyType == null) {\n+                    LOG.debug(\"Invalid AnyType {} specified, ignoring...\", type);\n+                } else {\n+                    PushCorrelationRuleEntity correlationRule = pushPolicy.getCorrelationRule(anyType).orElse(null);\n+                    if (correlationRule == null) {\n+                        correlationRule = entityFactory.newEntity(PushCorrelationRuleEntity.class);\n+                        correlationRule.setAnyType(anyType);\n+                        correlationRule.setPushPolicy(pushPolicy);\n+                        pushPolicy.add(correlationRule);\n+                    }\n+\n+                    Implementation rule = implementationDAO.find(impl);\n+                    if (rule == null) {\n+                        throw new NotFoundException(\"Implementation \" + type + \" \" + impl);\n+                    }\n+                    correlationRule.setImplementation(rule);\n+                }\n+            });\n+            // remove all rules not contained in the TO\n+            pushPolicy.getCorrelationRules().removeIf(anyFilter\n+                    -> !pushPolicyTO.getCorrelationRules().containsKey(anyFilter.getAnyType().getKey()));\n         }\n \n         if (result != null) {\n@@ -212,6 +248,15 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n             pullPolicy.getCorrelationRules().forEach(rule -> {\n                 pullPolicyTO.getCorrelationRules().put(rule.getAnyType().getKey(), rule.getImplementation().getKey());\n             });\n+        } else if (policy instanceof PushPolicy) {\n+            PushPolicy pushPolicy = PushPolicy.class.cast(policy);\n+            PushPolicyTO pushPolicyTO = new PushPolicyTO();\n+            policyTO = (T) pushPolicyTO;\n+\n+            pushPolicyTO.setConflictResolutionAction(((PushPolicy) policy).getConflictResolutionAction());\n+            pushPolicy.getCorrelationRules().forEach(rule -> {\n+                pushPolicyTO.getCorrelationRules().put(rule.getAnyType().getKey(), rule.getImplementation().getKey());\n+            });\n         }\n \n         if (policyTO != null) {"},{"sha":"de0c9acb61bb6a31551e6480d12f32b3405203d8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -65,6 +65,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n@@ -381,6 +382,9 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         resource.setPullPolicy(resourceTO.getPullPolicy() == null\n                 ? null : (PullPolicy) policyDAO.find(resourceTO.getPullPolicy()));\n \n+        resource.setPushPolicy(resourceTO.getPushPolicy() == null\n+                ? null : (PushPolicy) policyDAO.find(resourceTO.getPushPolicy()));\n+\n         resource.setConfOverride(new HashSet<>(resourceTO.getConfOverride()));\n \n         resource.setOverrideCapabilities(resourceTO.isOverrideCapabilities());\n@@ -675,6 +679,9 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n         resourceTO.setPullPolicy(resource.getPullPolicy() == null\n                 ? null : resource.getPullPolicy().getKey());\n \n+        resourceTO.setPushPolicy(resource.getPushPolicy() == null\n+                ? null : resource.getPushPolicy().getKey());\n+\n         resourceTO.getConfOverride().addAll(resource.getConfOverride());\n         Collections.sort(resourceTO.getConfOverride());\n "},{"sha":"aaec1953e6c4ac757d7a50c793d4994e19a60b8a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -525,10 +525,10 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         }\n \n         // check if some connObjectKey was changed by the update above\n-        Map<String, String> newcCnnObjectKeys = getConnObjectKeys(user, anyUtils);\n+        Map<String, String> newConnObjectKeys = getConnObjectKeys(user, anyUtils);\n         oldConnObjectKeys.entrySet().stream().\n-                filter(entry -> newcCnnObjectKeys.containsKey(entry.getKey())\n-                && !entry.getValue().equals(newcCnnObjectKeys.get(entry.getKey()))).\n+                filter(entry -> newConnObjectKeys.containsKey(entry.getKey())\n+                && !entry.getValue().equals(newConnObjectKeys.get(entry.getKey()))).\n                 forEach(entry -> {\n                     propByRes.addOldConnObjectKey(entry.getKey(), entry.getValue());\n                     propByRes.add(ResourceOperation.UPDATE, entry.getKey());"},{"sha":"bf770d132d886357a9f8e625c8137ea1c09a6fcf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/SyncopeJexlFunctions.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FSyncopeJexlFunctions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FSyncopeJexlFunctions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FSyncopeJexlFunctions.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -33,7 +33,7 @@ public class SyncopeJexlFunctions {\n     /**\n      * Converts realm's full path into the equivalent DN.\n      *\n-     * Example: {@code}/a/b/c{@code} becomes {@code}ou=c,ou=b,ou=a{@code}.\n+     * Example: {@code /a/b/c} becomes {@code ou=c,ou=b,ou=a}.\n      *\n      * @param fullPath realm's full path\n      * @param attr attribute name for DN\n@@ -46,8 +46,8 @@ public String fullPath2Dn(final String fullPath, final String attr) {\n     /**\n      * Converts realm's full path into the equivalent DN.\n      *\n-     * Example: {@code}/a/b/c{@code} becomes {@code},ou=c,ou=b,ou=a{@code}, when {@code}prefix{@code} is\n-     * {@code}&quot;,&quot;{@code}\n+     * Example: {@code /a/b/c} becomes {@code ,ou=c,ou=b,ou=a}, when {@code prefix} is\n+     * {@code &quot;,&quot;}\n      *\n      * @param fullPath realm's full path\n      * @param attr attribute name for DN"},{"sha":"6de2eece7a8d43ddbc3962846195df370245e07f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -501,7 +501,7 @@ protected List<ProvisioningReport> deprovision(\n \n                         AnyPatch anyPatch = null;\n                         if (unlink) {\n-                            anyPatch = newPatch(key);\n+                            anyPatch = getAnyUtils().newAnyPatch(key);\n                             anyPatch.getResources().add(new StringPatchItem.Builder().\n                                     operation(PatchOperation.DELETE).\n                                     value(profile.getTask().getResource().getKey()).build());\n@@ -604,7 +604,7 @@ protected List<ProvisioningReport> link(\n                             }\n                         }\n \n-                        AnyPatch anyPatch = newPatch(before.getKey());\n+                        AnyPatch anyPatch = getAnyUtils().newAnyPatch(before.getKey());\n                         anyPatch.getResources().add(new StringPatchItem.Builder().\n                                 operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n                                 value(profile.getTask().getResource().getKey()).build());\n@@ -804,9 +804,9 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n                     processed.getUid().getUidValue(), processed.getObject().getObjectClass(), anyKeys);\n \n             if (anyKeys.size() > 1) {\n-                switch (profile.getResAct()) {\n+                switch (profile.getConflictResolutionAction()) {\n                     case IGNORE:\n-                        throw new IllegalStateException(\"More than one match \" + anyKeys);\n+                        throw new IllegalStateException(\"More than one match: \" + anyKeys);\n \n                     case FIRSTMATCH:\n                         anyKeys = anyKeys.subList(0, 1);\n@@ -915,8 +915,10 @@ protected void finalize(\n             this.latestResult = result;\n         }\n \n+        AnyUtils anyUtils = getAnyUtils();\n+\n         notificationManager.createTasks(AuditElements.EventCategoryType.PULL,\n-                getAnyUtils().anyTypeKind().name().toLowerCase(),\n+                anyUtils.anyTypeKind().name().toLowerCase(),\n                 profile.getTask().getResource().getKey(),\n                 event,\n                 result,\n@@ -926,7 +928,7 @@ protected void finalize(\n                 furtherInput);\n \n         auditManager.audit(AuditElements.EventCategoryType.PULL,\n-                getAnyUtils().anyTypeKind().name().toLowerCase(),\n+                anyUtils.anyTypeKind().name().toLowerCase(),\n                 profile.getTask().getResource().getKey(),\n                 event,\n                 result,"},{"sha":"06f6da9a6db75128354086fce78ac45dab2172be","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":65,"deletions":94,"changes":159,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -19,12 +19,10 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.HashMap;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n@@ -42,24 +40,17 @@\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n-import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n import org.apache.syncope.core.provisioning.java.job.AfterHandlingJob;\n-import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n-import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n@@ -69,6 +60,9 @@\n public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHandler<PushTask, PushActions>\n         implements SyncopePushResultHandler {\n \n+    @Autowired\n+    protected PushUtils pushUtils;\n+\n     /**\n      * Notification Manager.\n      */\n@@ -96,25 +90,17 @@ protected void reportPropagation(final ProvisioningReport result, final Propagat\n         }\n     }\n \n-    protected void update(final Any<?> any, final ProvisioningReport result) {\n-        boolean changepwd;\n-        Collection<String> resourceKeys;\n-        if (any instanceof User) {\n-            changepwd = true;\n-            resourceKeys = userDAO.findAllResourceKeys(any.getKey());\n-        } else if (any instanceof AnyObject) {\n-            changepwd = false;\n-            resourceKeys = anyObjectDAO.findAllResourceKeys(any.getKey());\n-        } else {\n-            changepwd = false;\n-            resourceKeys = groupDAO.findAllResourceKeys(any.getKey());\n-        }\n+    protected void update(final Any<?> any, final ConnectorObject beforeObj, final ProvisioningReport result) {\n+        boolean changepwd = any instanceof User;\n+        List<String> ownedResources = getAnyUtils().getAllResources(any).stream().\n+                map(Entity::getKey).collect(Collectors.toList());\n \n-        List<String> noPropResources = new ArrayList<>(resourceKeys);\n+        List<String> noPropResources = new ArrayList<>(ownedResources);\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n         PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n+        propByRes.add(ResourceOperation.UPDATE, profile.getTask().getResource().getKey());\n+        propByRes.addOldConnObjectKey(profile.getTask().getResource().getKey(), beforeObj.getUid().getUidValue());\n \n         PropagationReporter reporter = taskExecutor.execute(propagationManager.getUpdateTasks(\n                 any.getType().getKind(),\n@@ -128,16 +114,20 @@ protected void update(final Any<?> any, final ProvisioningReport result) {\n         reportPropagation(result, reporter);\n     }\n \n-    protected void deprovision(final Any<?> any, final ProvisioningReport result) {\n+    protected void deprovision(final Any<?> any, final ConnectorObject beforeObj, final ProvisioningReport result) {\n         AnyTO before = getAnyTO(any.getKey());\n \n         List<String> noPropResources = new ArrayList<>(before.getResources());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n+        propByRes.addOldConnObjectKey(profile.getTask().getResource().getKey(), beforeObj.getUid().getUidValue());\n+\n         PropagationReporter reporter = taskExecutor.execute(propagationManager.getDeleteTasks(\n                 any.getType().getKind(),\n                 any.getKey(),\n-                null,\n+                propByRes,\n                 noPropResources),\n                 false);\n         reportPropagation(result, reporter);\n@@ -163,7 +153,7 @@ protected void provision(final Any<?> any, final Boolean enabled, final Provisio\n     }\n \n     protected void link(final Any<?> any, final boolean unlink, final ProvisioningReport result) {\n-        AnyPatch patch = newPatch(any.getKey());\n+        AnyPatch patch = getAnyUtils().newAnyPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n                 value(profile.getTask().getResource().getKey()).build());\n@@ -173,19 +163,19 @@ protected void link(final Any<?> any, final boolean unlink, final ProvisioningRe\n         result.setStatus(ProvisioningReport.Status.SUCCESS);\n     }\n \n-    protected void unassign(final Any<?> any, final ProvisioningReport result) {\n-        AnyPatch patch = newPatch(any.getKey());\n+    protected void unassign(final Any<?> any, final ConnectorObject beforeObj, final ProvisioningReport result) {\n+        AnyPatch patch = getAnyUtils().newAnyPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.DELETE).\n                 value(profile.getTask().getResource().getKey()).build());\n \n         update(patch);\n \n-        deprovision(any, result);\n+        deprovision(any, beforeObj, result);\n     }\n \n     protected void assign(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n-        AnyPatch patch = newPatch(any.getKey());\n+        AnyPatch patch = getAnyUtils().newAnyPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).\n                 value(profile.getTask().getResource().getKey()).build());\n@@ -195,37 +185,20 @@ protected void assign(final Any<?> any, final Boolean enabled, final Provisionin\n         provision(any, enabled, result);\n     }\n \n-    protected ConnectorObject getRemoteObject(\n-            final ObjectClass objectClass,\n-            final String connObjectKey,\n-            final String connObjectKeyValue,\n-            final boolean ignoreCaseMatch,\n-            final Iterator<? extends Item> iterator) {\n-\n-        ConnectorObject obj = null;\n-        try {\n-            obj = profile.getConnector().getObject(\n-                    objectClass,\n-                    AttributeBuilder.build(connObjectKey, connObjectKeyValue),\n-                    ignoreCaseMatch,\n-                    MappingUtils.buildOperationOptions(iterator));\n-        } catch (TimeoutException toe) {\n-            LOG.debug(\"Request timeout\", toe);\n-            throw toe;\n-        } catch (RuntimeException ignore) {\n-            LOG.debug(\"While resolving {}\", connObjectKeyValue, ignore);\n-        }\n-\n-        return obj;\n-    }\n-\n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     public boolean handle(final String anyKey) {\n         Any<?> any = null;\n         try {\n-            any = getAny(anyKey);\n-            doHandle(any);\n+            any = getAnyUtils().dao().authFind(anyKey);\n+\n+            Provision provision = profile.getTask().getResource().getProvision(any.getType()).orElse(null);\n+            if (provision == null) {\n+                throw new JobExecutionException(\"No provision found on \" + profile.getTask().getResource() + \" for \"\n+                        + any.getType().getKey());\n+            }\n+\n+            doHandle(any, provision);\n             return true;\n         } catch (IgnoreProvisionException e) {\n             ProvisioningReport result = profile.getResults().stream().\n@@ -251,42 +224,47 @@ public boolean handle(final String anyKey) {\n         }\n     }\n \n-    protected void doHandle(final Any<?> any) throws JobExecutionException {\n-        AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-\n+    protected void doHandle(final Any<?> any, final Provision provision) throws JobExecutionException {\n         ProvisioningReport result = new ProvisioningReport();\n         profile.getResults().add(result);\n \n         result.setKey(any.getKey());\n         result.setAnyType(any.getType().getKey());\n         result.setName(getName(any));\n \n-        Boolean enabled = any instanceof User && profile.getTask().isSyncStatus()\n-                ? ((User) any).isSuspended() ? Boolean.FALSE : Boolean.TRUE\n-                : null;\n-\n         LOG.debug(\"Propagating {} with key {} towards {}\",\n-                anyUtils.anyTypeKind(), any.getKey(), profile.getTask().getResource());\n+                any.getType().getKind(), any.getKey(), profile.getTask().getResource());\n+\n+        // Try to read remote object BEFORE any actual operation\n+        List<ConnectorObject> connObjs = pushUtils.match(profile.getConnector(), any, provision);\n+        LOG.debug(\"Match(es) found for {} as {}: {}\", any, provision.getObjectClass(), connObjs);\n+\n+        if (connObjs.size() > 1) {\n+            switch (profile.getConflictResolutionAction()) {\n+                case IGNORE:\n+                    throw new IllegalStateException(\"More than one match: \" + connObjs);\n+\n+                case FIRSTMATCH:\n+                    connObjs = connObjs.subList(0, 1);\n+                    break;\n+\n+                case LASTMATCH:\n+                    connObjs = connObjs.subList(connObjs.size() - 1, connObjs.size());\n+                    break;\n+\n+                default:\n+            }\n+        }\n+        ConnectorObject beforeObj = connObjs.isEmpty() ? null : connObjs.get(0);\n \n         Object output = null;\n         Result resultStatus = null;\n \n-        // Try to read remote object BEFORE any actual operation\n-        Optional<? extends Provision> provision = profile.getTask().getResource().getProvision(any.getType());\n-        Optional<MappingItem> connObjectKey = MappingUtils.getConnObjectKeyItem(provision.get());\n-        Optional<String> connObjecKeyValue = mappingManager.getConnObjectKeyValue(any, provision.get());\n-\n-        ConnectorObject beforeObj = null;\n-        if (connObjectKey.isPresent() && connObjecKeyValue.isPresent()) {\n-            beforeObj = getRemoteObject(\n-                    provision.get().getObjectClass(),\n-                    connObjectKey.get().getExtAttrName(),\n-                    connObjecKeyValue.get(),\n-                    provision.get().isIgnoreCaseMatch(),\n-                    provision.get().getMapping().getItems().iterator());\n-        } else {\n-            LOG.debug(\"ConnObjectKeyItem {} or its value {} are null\", connObjectKey, connObjecKeyValue);\n-        }\n+        Boolean enabled = any instanceof User && profile.getTask().isSyncStatus()\n+                ? ((User) any).isSuspended()\n+                ? Boolean.FALSE\n+                : Boolean.TRUE\n+                : null;\n \n         Boolean status = profile.getTask().isSyncStatus() ? enabled : null;\n \n@@ -376,7 +354,7 @@ protected void doHandle(final Any<?> any) throws JobExecutionException {\n                                 LOG.debug(\"PushTask not configured for update\");\n                                 result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                update(any, result);\n+                                update(any, beforeObj, result);\n                             }\n                             break;\n \n@@ -389,7 +367,7 @@ protected void doHandle(final Any<?> any) throws JobExecutionException {\n                                 LOG.debug(\"PushTask not configured for delete\");\n                                 result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                deprovision(any, result);\n+                                deprovision(any, beforeObj, result);\n                             }\n                             break;\n \n@@ -402,7 +380,7 @@ protected void doHandle(final Any<?> any) throws JobExecutionException {\n                                 LOG.debug(\"PushTask not configured for delete\");\n                                 result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                unassign(any, result);\n+                                unassign(any, beforeObj, result);\n                             }\n                             break;\n \n@@ -451,14 +429,7 @@ protected void doHandle(final Any<?> any) throws JobExecutionException {\n                     result.setStatus(ProvisioningReport.Status.SUCCESS);\n                 }\n                 resultStatus = AuditElements.Result.SUCCESS;\n-                if (connObjectKey.isPresent() && connObjecKeyValue.isPresent()) {\n-                    output = getRemoteObject(\n-                            provision.get().getObjectClass(),\n-                            connObjectKey.get().getExtAttrName(),\n-                            connObjecKeyValue.get(),\n-                            provision.get().isIgnoreCaseMatch(),\n-                            provision.get().getMapping().getItems().iterator());\n-                }\n+                output = pushUtils.findByConnObjectKey(profile.getConnector(), any, provision);\n             } catch (IgnoreProvisionException e) {\n                 throw e;\n             } catch (Exception e) {"},{"sha":"4e0b22904b4281493e6dd4b67e5896e1b37de079","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractSyncopeResultHandler.java","status":"modified","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractSyncopeResultHandler.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -20,17 +20,13 @@\n \n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopeResultHandler;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n@@ -48,15 +44,6 @@\n \n     protected static final Logger LOG = LoggerFactory.getLogger(SyncopeResultHandler.class);\n \n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n-\n-    @Autowired\n-    protected UserDAO userDAO;\n-\n-    @Autowired\n-    protected GroupDAO groupDAO;\n-\n     /**\n      * Propagation manager.\n      */\n@@ -105,10 +92,6 @@\n \n     protected abstract AnyTO getAnyTO(String key);\n \n-    protected abstract Any<?> getAny(String key);\n-\n-    protected abstract AnyPatch newPatch(String key);\n-\n     protected abstract WorkflowResult<? extends AnyPatch> update(AnyPatch patch);\n \n     @Override"},{"sha":"bb6e61eae66f4270d9fe110fcd28633c28c87bde","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultAnyObjectPullResultHandler.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.ProvisioningManager;\n@@ -58,28 +57,11 @@ protected String getName(final AnyTO anyTO) {\n         return anyObjectProvisioningManager;\n     }\n \n-    @Override\n-    protected Any<?> getAny(final String key) {\n-        try {\n-            return anyObjectDAO.authFind(key);\n-        } catch (Exception e) {\n-            LOG.warn(\"Error retrieving anyObject {}\", key, e);\n-            return null;\n-        }\n-    }\n-\n     @Override\n     protected AnyTO getAnyTO(final String key) {\n         return anyObjectDataBinder.getAnyObjectTO(key);\n     }\n \n-    @Override\n-    protected AnyPatch newPatch(final String key) {\n-        AnyObjectPatch patch = new AnyObjectPatch();\n-        patch.setKey(key);\n-        return patch;\n-    }\n-\n     @Override\n     protected WorkflowResult<? extends AnyPatch> update(final AnyPatch patch) {\n         return awfAdapter.update((AnyObjectPatch) patch);"},{"sha":"a2b7e3583453b0f62fdf5959617d7ec67b185cde","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultAnyObjectPushResultHandler.java","status":"modified","additions":2,"deletions":20,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPushResultHandler.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -18,13 +18,13 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.pushpull.AnyObjectPushResultHandler;\n \n@@ -37,34 +37,16 @@ protected AnyUtils getAnyUtils() {\n \n     @Override\n     protected String getName(final Any<?> any) {\n-        return StringUtils.EMPTY;\n-    }\n-\n-    @Override\n-    protected Any<?> getAny(final String key) {\n-        try {\n-            return anyObjectDAO.authFind(key);\n-        } catch (Exception e) {\n-            LOG.warn(\"Error retrieving anyObject {}\", key, e);\n-            return null;\n-        }\n+        return AnyObject.class.cast(any).getName();\n     }\n \n     @Override\n     protected AnyTO getAnyTO(final String key) {\n         return anyObjectDataBinder.getAnyObjectTO(key);\n     }\n \n-    @Override\n-    protected AnyPatch newPatch(final String key) {\n-        AnyObjectPatch patch = new AnyObjectPatch();\n-        patch.setKey(key);\n-        return patch;\n-    }\n-\n     @Override\n     protected WorkflowResult<? extends AnyObjectPatch> update(final AnyPatch patch) {\n         return awfAdapter.update((AnyObjectPatch) patch);\n     }\n-\n }"},{"sha":"e377123aa42112b3cff6692ca71cb2b24c477c0c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultGroupPullResultHandler.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.ProvisioningManager;\n@@ -68,28 +67,11 @@ protected String getName(final AnyTO anyTO) {\n         return groupProvisioningManager;\n     }\n \n-    @Override\n-    protected Any<?> getAny(final String key) {\n-        try {\n-            return groupDAO.authFind(key);\n-        } catch (Exception e) {\n-            LOG.warn(\"Error retrieving group {}\", key, e);\n-            return null;\n-        }\n-    }\n-\n     @Override\n     protected AnyTO getAnyTO(final String key) {\n         return groupDataBinder.getGroupTO(key);\n     }\n \n-    @Override\n-    protected AnyPatch newPatch(final String key) {\n-        GroupPatch patch = new GroupPatch();\n-        patch.setKey(key);\n-        return patch;\n-    }\n-\n     @Override\n     protected WorkflowResult<? extends AnyPatch> update(final AnyPatch patch) {\n         return gwfAdapter.update((GroupPatch) patch);"},{"sha":"3c5f59b6e580bac0546b4ec8d7b88999873f17fe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultGroupPushResultHandler.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPushResultHandler.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -40,31 +40,13 @@ protected String getName(final Any<?> any) {\n         return Group.class.cast(any).getName();\n     }\n \n-    @Override\n-    protected Any<?> getAny(final String key) {\n-        try {\n-            return groupDAO.authFind(key);\n-        } catch (Exception e) {\n-            LOG.warn(\"Error retrieving group {}\", key, e);\n-            return null;\n-        }\n-    }\n-\n     @Override\n     protected AnyTO getAnyTO(final String key) {\n         return groupDataBinder.getGroupTO(key);\n     }\n \n-    @Override\n-    protected AnyPatch newPatch(final String key) {\n-        GroupPatch patch = new GroupPatch();\n-        patch.setKey(key);\n-        return patch;\n-    }\n-\n     @Override\n     protected WorkflowResult<? extends AnyPatch> update(final AnyPatch patch) {\n         return gwfAdapter.update((GroupPatch) patch);\n     }\n-\n }"},{"sha":"be0caab94284e1ee274c19b883b2ff313d6631d6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -684,7 +684,7 @@ private void doHandle(final SyncDelta delta, final OrgUnit orgUnit) throws JobEx\n                 processed.getUid().getUidValue(), processed.getObject().getObjectClass(), keys);\n \n         if (keys.size() > 1) {\n-            switch (profile.getResAct()) {\n+            switch (profile.getConflictResolutionAction()) {\n                 case IGNORE:\n                     throw new IllegalStateException(\"More than one match \" + keys);\n "},{"sha":"e600c931ff139869614fcb9211b5125273dcc8e6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPullResultHandler.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.provisioning.api.ProvisioningManager;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n@@ -58,28 +57,11 @@ protected String getName(final AnyTO anyTO) {\n         return userProvisioningManager;\n     }\n \n-    @Override\n-    protected Any<?> getAny(final String key) {\n-        try {\n-            return userDAO.authFind(key);\n-        } catch (Exception e) {\n-            LOG.warn(\"Error retrieving user {}\", key, e);\n-            return null;\n-        }\n-    }\n-\n     @Override\n     protected AnyTO getAnyTO(final String key) {\n         return userDataBinder.getUserTO(key);\n     }\n \n-    @Override\n-    protected AnyPatch newPatch(final String key) {\n-        UserPatch patch = new UserPatch();\n-        patch.setKey(key);\n-        return patch;\n-    }\n-\n     @Override\n     protected WorkflowResult<? extends AnyPatch> update(final AnyPatch patch) {\n         WorkflowResult<Pair<UserPatch, Boolean>> update = uwfAdapter.update((UserPatch) patch);"},{"sha":"05dbb54a2c9523650c31b3791a6c357e9db94f3d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPushResultHandler.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -68,32 +68,14 @@ protected String getName(final Any<?> any) {\n         return User.class.cast(any).getUsername();\n     }\n \n-    @Override\n-    protected Any<?> getAny(final String key) {\n-        try {\n-            return userDAO.authFind(key);\n-        } catch (Exception e) {\n-            LOG.warn(\"Error retrieving user {}\", key, e);\n-            return null;\n-        }\n-    }\n-\n     @Override\n     protected AnyTO getAnyTO(final String key) {\n         return userDataBinder.getUserTO(key);\n     }\n \n-    @Override\n-    protected AnyPatch newPatch(final String key) {\n-        UserPatch patch = new UserPatch();\n-        patch.setKey(key);\n-        return patch;\n-    }\n-\n     @Override\n     protected WorkflowResult<? extends AnyPatch> update(final AnyPatch patch) {\n         WorkflowResult<Pair<UserPatch, Boolean>> update = uwfAdapter.update((UserPatch) patch);\n         return new WorkflowResult<>(update.getResult().getLeft(), update.getPropByRes(), update.getPerformedTasks());\n     }\n-\n }"},{"sha":"f69b4c9564653f7a5d2579046a57732144956390","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -212,7 +212,7 @@ protected String doExecuteProvisioning(\n         profile = new ProvisioningProfile<>(connector, pullTask);\n         profile.getActions().addAll(actions);\n         profile.setDryRun(dryRun);\n-        profile.setResAct(pullTask.getResource().getPullPolicy() == null\n+        profile.setConflictResolutionAction(pullTask.getResource().getPullPolicy() == null\n                 ? ConflictResolutionAction.IGNORE\n                 : pullTask.getResource().getPullPolicy().getConflictResolutionAction());\n "},{"sha":"84b3661e4c5bbac44186b538af4e77ae08ad5ede","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -30,8 +30,12 @@\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -42,7 +46,7 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n@@ -51,26 +55,22 @@\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.Connector;\n-import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n+import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.syncope.core.spring.ImplementationManager;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n+import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n-import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n-import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n-import org.apache.syncope.core.spring.ImplementationManager;\n-import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n \n @Transactional(readOnly = true)\n @Component\n@@ -319,7 +319,7 @@ public List<String> match(\n             final Provision provision,\n             final AnyUtils anyUtils) {\n \n-        Optional<? extends CorrelationRule> correlationRule = provision.getResource().getPullPolicy() == null\n+        Optional<? extends PullCorrelationRuleEntity> correlationRule = provision.getResource().getPullPolicy() == null\n                 ? Optional.empty()\n                 : provision.getResource().getPullPolicy().getCorrelationRule(provision.getAnyType());\n "},{"sha":"9765edb407f72f8307c335397b149e3170785edf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -27,6 +27,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.MutablePair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n@@ -165,7 +166,9 @@ protected String doExecuteProvisioning(\n         profile = new ProvisioningProfile<>(connector, pushTask);\n         profile.getActions().addAll(actions);\n         profile.setDryRun(dryRun);\n-        profile.setResAct(null);\n+        profile.setConflictResolutionAction(pushTask.getResource().getPushPolicy() == null\n+                ? ConflictResolutionAction.IGNORE\n+                : pushTask.getResource().getPushPolicy().getConflictResolutionAction());\n \n         if (!profile.isDryRun()) {\n             for (PushActions action : actions) {"},{"sha":"7262a0a4375fde182475f515679156c939f67c3c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushUtils.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushUtils.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.TimeoutException;\n+import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.syncope.core.spring.ImplementationManager;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(readOnly = true)\n+@Component\n+public class PushUtils {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PushUtils.class);\n+\n+    @Autowired\n+    private MappingManager mappingManager;\n+\n+    public List<ConnectorObject> match(\n+            final Connector connector,\n+            final Any<?> any,\n+            final Provision provision) {\n+\n+        Optional<? extends PushCorrelationRuleEntity> correlationRule = provision.getResource().getPushPolicy() == null\n+                ? Optional.empty()\n+                : provision.getResource().getPushPolicy().getCorrelationRule(provision.getAnyType());\n+\n+        Optional<PushCorrelationRule> rule = Optional.empty();\n+        if (correlationRule.isPresent()) {\n+            try {\n+                rule = ImplementationManager.buildPushCorrelationRule(correlationRule.get().getImplementation());\n+            } catch (Exception e) {\n+                LOG.error(\"While building {}\", correlationRule.get().getImplementation(), e);\n+            }\n+        }\n+\n+        try {\n+            return rule.isPresent()\n+                    ? findByCorrelationRule(connector, any, provision, rule.get())\n+                    : findByConnObjectKey(connector, any, provision);\n+        } catch (RuntimeException e) {\n+            LOG.error(\"Could not match {} with any existing {}\", any, provision.getObjectClass(), e);\n+            return Collections.<ConnectorObject>emptyList();\n+        }\n+    }\n+\n+    private List<ConnectorObject> findByCorrelationRule(\n+            final Connector connector,\n+            final Any<?> any,\n+            final Provision provision,\n+            final PushCorrelationRule rule) {\n+\n+        List<ConnectorObject> objs = new ArrayList<>();\n+\n+        try {\n+            connector.search(\n+                    provision.getObjectClass(),\n+                    rule.getFilter(any, provision),\n+                    obj -> {\n+                        objs.add(obj);\n+                        return true;\n+                    }, MappingUtils.buildOperationOptions(provision.getMapping().getItems().iterator()));\n+        } catch (TimeoutException toe) {\n+            LOG.debug(\"Request timeout\", toe);\n+            throw toe;\n+        } catch (RuntimeException ignore) {\n+            LOG.debug(\"Unexpected exception\", ignore);\n+        }\n+\n+        return objs;\n+    }\n+\n+    public List<ConnectorObject> findByConnObjectKey(\n+            final Connector connector,\n+            final Any<?> any,\n+            final Provision provision) {\n+\n+        Optional<MappingItem> connObjectKey = MappingUtils.getConnObjectKeyItem(provision);\n+        Optional<String> connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, provision);\n+\n+        ConnectorObject obj = null;\n+        if (connObjectKey.isPresent() && connObjectKeyValue.isPresent()) {\n+            try {\n+                obj = connector.getObject(\n+                        provision.getObjectClass(),\n+                        AttributeBuilder.build(connObjectKey.get().getExtAttrName(), connObjectKeyValue.get()),\n+                        provision.isIgnoreCaseMatch(),\n+                        MappingUtils.buildOperationOptions(provision.getMapping().getItems().iterator()));\n+            } catch (TimeoutException toe) {\n+                LOG.debug(\"Request timeout\", toe);\n+                throw toe;\n+            } catch (RuntimeException ignore) {\n+                LOG.debug(\"While resolving {}\", connObjectKeyValue.get(), ignore);\n+            }\n+        }\n+\n+        return obj == null ? Collections.emptyList() : Collections.singletonList(obj);\n+    }\n+}"},{"sha":"f67f7509f6d4dc68d62c24350fc668d25e275500","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePullJobDelegate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -135,7 +135,7 @@ public List<ProvisioningReport> pull(\n \n             profile = new ProvisioningProfile<>(connector, pullTask);\n             profile.setDryRun(false);\n-            profile.setResAct(ConflictResolutionAction.FIRSTMATCH);\n+            profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n             profile.getActions().addAll(actions);\n \n             for (PullActions action : actions) {"},{"sha":"08ff9c758cc8df982ca14f472fc55d99a17881f7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePushJobDelegate.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -22,6 +22,7 @@\n import java.util.Arrays;\n import java.util.List;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n@@ -84,7 +85,7 @@ public List<ProvisioningReport> push(\n \n             profile = new ProvisioningProfile<>(connector, pushTask);\n             profile.getActions().addAll(actions);\n-            profile.setResAct(null);\n+            profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n \n             for (PushActions action : actions) {\n                 action.beforeAll(profile);"},{"sha":"d02f458c58d3596513cfa7922b849b10beecfe7a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n@@ -125,7 +126,7 @@ public static ConnObjectTO getConnObjectTO(final Set<Attribute> attrs) {\n         final ConnObjectTO connObjectTO = new ConnObjectTO();\n \n         if (attrs != null) {\n-            attrs.stream().map(attr -> {\n+            connObjectTO.getAttrs().addAll(attrs.stream().map(attr -> {\n                 AttrTO attrTO = new AttrTO();\n                 attrTO.setSchema(attr.getName());\n                 if (attr.getValue() != null) {\n@@ -134,15 +135,13 @@ public static ConnObjectTO getConnObjectTO(final Set<Attribute> attrs) {\n                             attrTO.getValues().add(getPassword(value));\n                         } else if (value instanceof byte[]) {\n                             attrTO.getValues().add(Base64.encode((byte[]) value));\n-                        } else {\n+                        } else if (value != null) {\n                             attrTO.getValues().add(value.toString());\n                         }\n                     });\n                 }\n                 return attrTO;\n-            }).forEach(attrTO -> {\n-                connObjectTO.getAttrs().add(attrTO);\n-            });\n+            }).collect(Collectors.toList()));\n         }\n \n         return connObjectTO;"},{"sha":"2bdf51898e0f2243f9213c1e915de68b8c1629a0","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyImplementationLookup.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -23,16 +23,19 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultAccountRule;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPasswordRule;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPullCorrelationRule;\n+import org.apache.syncope.core.persistence.jpa.dao.DefaultPushCorrelationRule;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -86,9 +89,15 @@ public Class<? extends PullCorrelationRule> getPullCorrelationRuleClass(\n         return DefaultPullCorrelationRule.class;\n     }\n \n+    @Override\n+    public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n+            final Class<? extends PushCorrelationRuleConf> pushCorrelationRuleConfClass) {\n+\n+        return DefaultPushCorrelationRule.class;\n+    }\n+\n     @Override\n     public Set<Class<?>> getAuditAppenderClasses() {\n         return Collections.emptySet();\n     }\n-\n }"},{"sha":"b3e050a7270afbabbfa5ce318e95c17d402457e2","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java","status":"modified","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -26,13 +26,15 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -183,6 +185,41 @@ public static Optional<PullCorrelationRule> buildPullCorrelationRule(final Imple\n         }\n     }\n \n+    public static Optional<PushCorrelationRule> buildPushCorrelationRule(final Implementation impl)\n+            throws InstantiationException, IllegalAccessException {\n+\n+        switch (impl.getEngine()) {\n+            case GROOVY:\n+                return Optional.of(ImplementationManager.<PushCorrelationRule>buildGroovy(impl));\n+\n+            case JAVA:\n+            default:\n+                PushCorrelationRule rule = null;\n+\n+                PushCorrelationRuleConf ruleConf =\n+                        POJOHelper.deserialize(impl.getBody(), PushCorrelationRuleConf.class);\n+                Class<? extends PushCorrelationRule> ruleClass = ApplicationContextProvider.getApplicationContext().\n+                        getBean(ImplementationLookup.class).getPushCorrelationRuleClass(ruleConf.getClass());\n+                if (ruleClass == null) {\n+                    LOG.warn(\"Could not find matching push correlation rule for {}\", impl.getClass());\n+                } else {\n+                    // fetch (or create) rule\n+                    if (ApplicationContextProvider.getBeanFactory().containsSingleton(ruleClass.getName())) {\n+                        rule = (PushCorrelationRule) ApplicationContextProvider.getBeanFactory().\n+                                getSingleton(ruleClass.getName());\n+                    } else {\n+                        rule = (PushCorrelationRule) ApplicationContextProvider.getBeanFactory().\n+                                createBean(ruleClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                        ApplicationContextProvider.getBeanFactory().\n+                                registerSingleton(ruleClass.getName(), rule);\n+                    }\n+                    rule.setConf(ruleConf);\n+                }\n+\n+                return Optional.ofNullable(rule);\n+        }\n+    }\n+\n     public static <T> T build(final Implementation impl)\n             throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n "},{"sha":"9bcdf446aa34977c3286bb663b42005fc5c9a891","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTSSOProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTSSOProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTSSOProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTSSOProvider.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -39,7 +39,7 @@ public interface JWTSSOProvider extends JwsSignatureVerifier {\n \n     /**\n      * Attempts to resolve the given JWT claims into internal {@link User} and authorities.\n-     * <strong>IMPORTANT</strong>: this is not invoked for the {@code}admin{@code} super-user.\n+     * <strong>IMPORTANT</strong>: this is not invoked for the {@code admin} super-user.\n      *\n      * @param jwtClaims JWT claims\n      * @return internal User, with authorities, matching the provided JWT claims, if found; otherwise null"},{"sha":"300220dae53f7c1d8a637c41fc780b5bf2e22238","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/DummyImplementationLookup.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -23,12 +23,14 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n \n public class DummyImplementationLookup implements ImplementationLookup {\n@@ -81,9 +83,15 @@ public Class<? extends PullCorrelationRule> getPullCorrelationRuleClass(\n         return null;\n     }\n \n+    @Override\n+    public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n+            final Class<? extends PushCorrelationRuleConf> pushCorrelationRuleConfClass) {\n+\n+        return null;\n+    }\n+\n     @Override\n     public Set<Class<?>> getAuditAppenderClasses() {\n         return Collections.emptySet();\n     }\n-\n }"},{"sha":"9e9d6871ad67387b230a21520e24fb86746bcf34","filename":"ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/OIDCProviderValidator.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FOIDCProviderValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FOIDCProviderValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FOIDCProviderValidator.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n-import static org.apache.syncope.core.persistence.jpa.validation.entity.AbstractValidator.LOG;\n-\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;"},{"sha":"e55033a41aa2848583f4b902a82ed5d9a9d5c018","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DummyPullCorrelationRule.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPullCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPullCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPullCorrelationRule.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -31,5 +31,4 @@ public class DummyPullCorrelationRule implements PullCorrelationRule {\n     public SearchCond getSearchCond(final ConnectorObject connObj, final Provision provision) {\n         return new SearchCond();\n     }\n-\n }"},{"sha":"2c869f391d1fbe5d760aa2bbabdfff3823368cc0","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DummyPullCorrelationRuleConf.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPullCorrelationRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPullCorrelationRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPullCorrelationRuleConf.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import org.apache.syncope.common.lib.policy.AbstractPullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.AbstractCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n \n public class DummyPullCorrelationRuleConf\n-        extends AbstractPullCorrelationRuleConf implements PullCorrelationRuleConf {\n+        extends AbstractCorrelationRuleConf implements PullCorrelationRuleConf {\n \n     private static final long serialVersionUID = -2984203196323732531L;\n "},{"sha":"5fc3a7cc1eb3791d3897458f860cdd62f119095f","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DummyPushCorrelationRule.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPushCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPushCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPushCorrelationRule.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n+import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n+\n+@PushCorrelationRuleConfClass(DummyPushCorrelationRuleConf.class)\n+public class DummyPushCorrelationRule implements PushCorrelationRule {\n+\n+    @Override\n+    public Filter getFilter(final Any<?> any, final Provision provision) {\n+        return FilterBuilder.equalTo(new Uid(null));\n+    }\n+}"},{"sha":"f9453c76190e55158104e896e47679ba911ca3d2","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DummyPushCorrelationRuleConf.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPushCorrelationRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPushCorrelationRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDummyPushCorrelationRuleConf.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import org.apache.syncope.common.lib.policy.AbstractCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n+\n+public class DummyPushCorrelationRuleConf\n+        extends AbstractCorrelationRuleConf implements PushCorrelationRuleConf {\n+\n+    private static final long serialVersionUID = -2984203196323732531L;\n+\n+}"},{"sha":"ac20be880580b7ef017bfd0cf72000b33b250efd","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":29,"deletions":2,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -29,9 +29,11 @@\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.HaveIBeenPwnedPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.AuditReportletConf;\n import org.apache.syncope.common.lib.report.GroupReportletConf;\n import org.apache.syncope.common.lib.report.ReconciliationReportletConf;\n@@ -56,6 +58,7 @@\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -66,6 +69,7 @@\n import org.apache.syncope.core.persistence.jpa.dao.DefaultAccountRule;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPasswordRule;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPullCorrelationRule;\n+import org.apache.syncope.core.persistence.jpa.dao.DefaultPushCorrelationRule;\n import org.apache.syncope.core.persistence.jpa.dao.HaveIBeenPwnedPasswordRule;\n import org.apache.syncope.core.provisioning.java.propagation.AzurePropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.DBPasswordPropagationActions;\n@@ -128,7 +132,7 @@ public class ITImplementationLookup implements ImplementationLookup {\n     };\n \n     private static final Map<\n-            Class<? extends PullCorrelationRuleConf>, Class<? extends PullCorrelationRule>> CORRELATION_RULE_CLASSES =\n+            Class<? extends PullCorrelationRuleConf>, Class<? extends PullCorrelationRule>> PULL_CR_CLASSES =\n             new HashMap<Class<? extends PullCorrelationRuleConf>, Class<? extends PullCorrelationRule>>() {\n \n         private static final long serialVersionUID = 3109256773218160485L;\n@@ -139,6 +143,18 @@ public class ITImplementationLookup implements ImplementationLookup {\n         }\n     };\n \n+    private static final Map<\n+            Class<? extends PushCorrelationRuleConf>, Class<? extends PushCorrelationRule>> PUSH_CR_CLASSES =\n+            new HashMap<Class<? extends PushCorrelationRuleConf>, Class<? extends PushCorrelationRule>>() {\n+\n+        private static final long serialVersionUID = 3109256773218160485L;\n+\n+        {\n+            put(DummyPushCorrelationRuleConf.class, DummyPushCorrelationRule.class);\n+            put(DefaultPushCorrelationRuleConf.class, DefaultPushCorrelationRule.class);\n+        }\n+    };\n+\n     private static final Set<Class<?>> AUDITAPPENDER_CLASSES = new HashSet<>(\n             Arrays.asList(TestFileAuditAppender.class, TestFileRewriteAuditAppender.class));\n \n@@ -204,6 +220,10 @@ public class ITImplementationLookup implements ImplementationLookup {\n             classNames.add(DummyPullCorrelationRule.class.getName());\n             put(ImplementationType.PULL_CORRELATION_RULE, classNames);\n \n+            classNames = new HashSet<>();\n+            classNames.add(DummyPushCorrelationRule.class.getName());\n+            put(ImplementationType.PUSH_CORRELATION_RULE, classNames);\n+\n             classNames = new HashSet<>();\n             classNames.add(BasicValidator.class.getName());\n             classNames.add(EmailAddressValidator.class.getName());\n@@ -308,7 +328,14 @@ public Class<? extends PasswordRule> getPasswordRuleClass(\n     public Class<? extends PullCorrelationRule> getPullCorrelationRuleClass(\n             final Class<? extends PullCorrelationRuleConf> pullCorrelationRuleConfClass) {\n \n-        return CORRELATION_RULE_CLASSES.get(pullCorrelationRuleConfClass);\n+        return PULL_CR_CLASSES.get(pullCorrelationRuleConfClass);\n+    }\n+\n+    @Override\n+    public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n+            final Class<? extends PushCorrelationRuleConf> pushCorrelationRuleConfClass) {\n+\n+        return PUSH_CR_CLASSES.get(pushCorrelationRuleConfClass);\n     }\n \n     @Override"},{"sha":"c835759e6c7651f8117c2abfea9fd54f5e3f68df","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":16,"deletions":8,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -24,13 +24,15 @@\n \n import java.io.InputStream;\n import java.net.URI;\n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.List;\n import java.util.Locale;\n+import java.util.Map;\n import java.util.Properties;\n import java.util.UUID;\n import javax.naming.Context;\n import javax.naming.NamingException;\n-import javax.naming.directory.Attribute;\n import javax.naming.directory.BasicAttribute;\n import javax.naming.directory.DirContext;\n import javax.naming.directory.InitialDirContext;\n@@ -254,7 +256,7 @@ public abstract class AbstractITCase {\n     protected static SAML2SPService saml2SpService;\n \n     protected static SAML2IdPService saml2IdPService;\n-    \n+\n     protected static OIDCClientService oidcClientService;\n \n     protected static OIDCProviderService oidcProviderService;\n@@ -555,6 +557,7 @@ protected Object getLdapRemoteObject(final String bindDn, final String bindPwd,\n             ctx = getLdapResourceDirContext(bindDn, bindPwd);\n             return ctx.lookup(objectDn);\n         } catch (Exception e) {\n+            LOG.error(\"Could not fetch {}\", objectDn, e);\n             return null;\n         } finally {\n             if (ctx != null) {\n@@ -568,18 +571,23 @@ protected Object getLdapRemoteObject(final String bindDn, final String bindPwd,\n     }\n \n     protected void updateLdapRemoteObject(\n-            final String bindDn, final String bindPwd, final String objectDn, final Pair<String, String> attribute) {\n+            final String bindDn,\n+            final String bindPwd,\n+            final String objectDn,\n+            final Map<String, String> attributes) {\n \n         InitialDirContext ctx = null;\n         try {\n             ctx = getLdapResourceDirContext(bindDn, bindPwd);\n \n-            Attribute ldapAttribute = new BasicAttribute(attribute.getKey(), attribute.getValue());\n-            ModificationItem[] item = new ModificationItem[1];\n-            item[0] = new ModificationItem(DirContext.REPLACE_ATTRIBUTE, ldapAttribute);\n-            ctx.modifyAttributes(objectDn, item);\n+            List<ModificationItem> items = new ArrayList<>();\n+            attributes.forEach((key, value) -> {\n+                items.add(new ModificationItem(DirContext.REPLACE_ATTRIBUTE, new BasicAttribute(key, value)));\n+            });\n+\n+            ctx.modifyAttributes(objectDn, items.toArray(new ModificationItem[] {}));\n         } catch (Exception e) {\n-            // ignore\n+            LOG.error(\"While updating {} with {}\", objectDn, attributes, e);\n         } finally {\n             if (ctx != null) {\n                 try {"},{"sha":"e47fcf7f65be42d9792722e0673325ab0c1fab4d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":44,"deletions":3,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PushPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n@@ -48,6 +49,7 @@\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.core.reference.DummyPullCorrelationRule;\n+import org.apache.syncope.fit.core.reference.DummyPushCorrelationRule;\n import org.junit.jupiter.api.Test;\n \n public class PolicyITCase extends AbstractITCase {\n@@ -79,6 +81,33 @@ private PullPolicyTO buildPullPolicyTO() throws IOException {\n         return policy;\n     }\n \n+    private PushPolicyTO buildPushPolicyTO() throws IOException {\n+        ImplementationTO corrRule = null;\n+        try {\n+            corrRule = implementationService.read(ImplementationType.PUSH_CORRELATION_RULE, \"TestPushRule\");\n+        } catch (SyncopeClientException e) {\n+            if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n+                corrRule = new ImplementationTO();\n+                corrRule.setKey(\"TestPushRule\");\n+                corrRule.setEngine(ImplementationEngine.GROOVY);\n+                corrRule.setType(ImplementationType.PUSH_CORRELATION_RULE);\n+                corrRule.setBody(IOUtils.toString(\n+                        getClass().getResourceAsStream(\"/TestPushRule.groovy\"), StandardCharsets.UTF_8));\n+                Response response = implementationService.create(corrRule);\n+                corrRule = implementationService.read(\n+                        corrRule.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                assertNotNull(corrRule);\n+            }\n+        }\n+        assertNotNull(corrRule);\n+\n+        PushPolicyTO policy = new PushPolicyTO();\n+        policy.getCorrelationRules().put(AnyTypeKind.USER.name(), corrRule.getKey());\n+        policy.setDescription(\"Push policy\");\n+\n+        return policy;\n+    }\n+\n     @Test\n     public void listByType() {\n         List<PullPolicyTO> policyTOs = policyService.list(PolicyType.PULL);\n@@ -115,9 +144,13 @@ public void getPullPolicy() {\n \n     @Test\n     public void create() throws IOException {\n-        PullPolicyTO policyTO = createPolicy(PolicyType.PULL, buildPullPolicyTO());\n-        assertNotNull(policyTO);\n-        assertEquals(\"TestPullRule\", policyTO.getCorrelationRules().get(AnyTypeKind.USER.name()));\n+        PullPolicyTO pullPolicyTO = createPolicy(PolicyType.PULL, buildPullPolicyTO());\n+        assertNotNull(pullPolicyTO);\n+        assertEquals(\"TestPullRule\", pullPolicyTO.getCorrelationRules().get(AnyTypeKind.USER.name()));\n+\n+        PushPolicyTO pushPolicyTO = createPolicy(PolicyType.PUSH, buildPushPolicyTO());\n+        assertNotNull(pushPolicyTO);\n+        assertEquals(\"TestPushRule\", pushPolicyTO.getCorrelationRules().get(AnyTypeKind.USER.name()));\n     }\n \n     @Test\n@@ -174,6 +207,14 @@ public void getPullCorrelationRuleJavaClasses() {\n         assertEquals(DummyPullCorrelationRule.class.getName(), classes.iterator().next());\n     }\n \n+    @Test\n+    public void getPushCorrelationRuleJavaClasses() {\n+        Set<String> classes = syncopeService.platform().\n+                getJavaImplInfo(ImplementationType.PUSH_CORRELATION_RULE).get().getClasses();\n+        assertEquals(1, classes.size());\n+        assertEquals(DummyPushCorrelationRule.class.getName(), classes.iterator().next());\n+    }\n+\n     @Test\n     public void issueSYNCOPE553() {\n         AccountPolicyTO policy = new AccountPolicyTO();"},{"sha":"788ce047d0cba674ec8807866f662b331a984960","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -31,6 +31,7 @@\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Locale;\n@@ -1213,7 +1214,7 @@ public void issueSYNCOPE1062() {\n \n             // 4. update the user on the external resource\n             updateLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD,\n-                    userDn.getValues().get(0), Pair.of(\"mail\", \"pullFromLDAP2@syncope.apache.org\"));\n+                    userDn.getValues().get(0), Collections.singletonMap(\"mail\", \"pullFromLDAP2@syncope.apache.org\"));\n \n             connObject = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), user.getKey());\n             assertNotNull(connObject);"},{"sha":"eaf6d4da29f2d2f1fdf50d96859d2cc1fdd93bf4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -25,7 +25,9 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n import javax.sql.DataSource;\n import javax.ws.rs.core.Response;\n@@ -42,6 +44,7 @@\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.ReconStatus;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n@@ -268,6 +271,54 @@ public void pushMatchingUser() throws Exception {\n         // ------------------------------------------\n     }\n \n+    @Test\n+    public void pushPolicy() {\n+        // 1. set push policy on ldap\n+        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        assertNull(ldap.getPushPolicy());\n+\n+        ldap.setPushPolicy(\"fb6530e5-892d-4f47-a46b-180c5b6c5c83\");\n+        resourceService.update(ldap);\n+\n+        // 2. create push task with sole scope as the user 'vivaldi'\n+        PushTaskTO sendVivaldi = new PushTaskTO();\n+        sendVivaldi.setName(\"Send Vivaldi\");\n+        sendVivaldi.setResource(RESOURCE_NAME_LDAP);\n+        sendVivaldi.setUnmatchingRule(UnmatchingRule.PROVISION);\n+        sendVivaldi.setMatchingRule(MatchingRule.UPDATE);\n+        sendVivaldi.setSourceRealm(SyncopeConstants.ROOT_REALM);\n+        sendVivaldi.getFilters().put(AnyTypeKind.GROUP.name(), \"name==$null\");\n+        sendVivaldi.getFilters().put(AnyTypeKind.USER.name(), \"username==vivaldi\");\n+        sendVivaldi.setPerformCreate(true);\n+        sendVivaldi.setPerformUpdate(true);\n+\n+        Response response = taskService.create(TaskType.PUSH, sendVivaldi);\n+        sendVivaldi = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n+        assertNotNull(sendVivaldi);\n+\n+        // 3. execute push: vivaldi is found on ldap\n+        execProvisioningTask(taskService, TaskType.PUSH, sendVivaldi.getKey(), 50, false);\n+\n+        ReconStatus status = reconciliationService.status(AnyTypeKind.USER, \"vivaldi\", RESOURCE_NAME_LDAP);\n+        assertNotNull(status.getOnResource());\n+\n+        // 4. update vivaldi on ldap: reconciliation status does not find it anymore, as remote key was changed\n+        Map<String, String> attrs = new HashMap<>();\n+        attrs.put(\"cn\", \"vivaldiZZ\");\n+        attrs.put(\"mail\", \"vivaldi@syncope.org\");\n+        updateLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"uid=vivaldi,ou=People,o=isp\", attrs);\n+\n+        status = reconciliationService.status(AnyTypeKind.USER, \"vivaldi\", RESOURCE_NAME_LDAP);\n+        assertNull(status.getOnResource());\n+\n+        // 5. execute push again: the push policy will find anyway vivaldi because of the email attribute\n+        execProvisioningTask(taskService, TaskType.PUSH, sendVivaldi.getKey(), 50, false);\n+\n+        // 6. now the reconciliation status is fine again, as the push above did overwrite the entry on ldap\n+        status = reconciliationService.status(AnyTypeKind.USER, \"vivaldi\", RESOURCE_NAME_LDAP);\n+        assertNotNull(status.getOnResource());\n+    }\n+\n     @Test\n     public void orgUnit() {\n         assertNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=odd,o=isp\"));"},{"sha":"2c8308f4295c345c58b5b3aa7820202505fd6537","filename":"fit/core-reference/src/test/resources/TestPullRule.groovy","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -25,7 +25,7 @@ import org.apache.syncope.core.persistence.api.entity.resource.Provision\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n \n /**\n- * Test pull rule relying on <tt>email</tt> attribute value.\n+ * Test pull rule relying on {@code email} attribute value.\n  */\n @CompileStatic\n class TestPullRule implements PullCorrelationRule {"},{"sha":"320b5882802ff72c13cd1466615f583281fddb5e","filename":"fit/core-reference/src/test/resources/TestPushRule.groovy","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPushRule.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPushRule.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPushRule.groovy?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -0,0 +1,39 @@\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import groovy.transform.CompileStatic;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n+import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n+\n+/**\n+ * Test push rule relying on {@code email} attribute value.\n+ */\n+@CompileStatic\n+class TestPushRule implements PushCorrelationRule {\n+\n+  @Override\n+  Filter getFilter(final Any<?> any, final Provision provision) {\n+    return FilterBuilder.equalTo(\n+      AttributeBuilder.build(\"email\", any.getPlainAttr(\"email\").get().getValuesAsStrings().get(0)));\n+  }\n+}"},{"sha":"d5463cec124f6fc38ff58b2cbcbdb8692099302c","filename":"src/main/asciidoc/reference-guide/concepts/policies.adoc","status":"modified","additions":34,"deletions":5,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/595a8d154a98758bd4d8852f49923200189ff99a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/595a8d154a98758bd4d8852f49923200189ff99a/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc?ref=595a8d154a98758bd4d8852f49923200189ff99a","patch":"@@ -267,12 +267,13 @@ different rule is required\n Pull correlation rules define how to match objects received from <<connector-instance-details,connector instances>>\n with existing Users, Groups or Any Objects.\n \n-The \n+The\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PlainAttrsPullCorrelationRule.java[default^]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPullCorrelationRule.java[default^]\n+]\n endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PlainAttrsPullCorrelationRule.java[default^]\n+https://github.com/apache/syncope/blob/master/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPullCorrelationRule.java[default^]\n endif::[]\n implementation attempts to match entities on the basis of the values of the provided plain attributes,\n according to the available <<mapping,mapping>>.\n@@ -281,10 +282,10 @@ according to the available <<mapping,mapping>>.\n ====\n Custom pull correlation rules can be provided by <<implementations,implementing>> the\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullCorrelationRule.java[PullCorrelationRule^]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PullCorrelationRule.java[PullCorrelationRule^]\n endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullCorrelationRule.java[PullCorrelationRule^]\n+https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PullCorrelationRule.java[PullCorrelationRule^]\n endif::[]\n interface.\n ====\n@@ -298,3 +299,31 @@ Push policies are evaluated during the execution of <<tasks-push,push tasks>>.\n ====\n When set for resource R, a push policy is enforced on all Users, Groups and Any Objects pushed to R.\n ====\n+\n+===== Push Correlation Rules\n+\n+Push correlation rules define how to match existing Users, Groups or Any Objects with objects received from\n+<<connector-instance-details,connector instances>>.\n+\n+The\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPushCorrelationRule.java[default^]\n+]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/master/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPushCorrelationRule.java[default^]\n+endif::[]\n+implementation attempts to match entities on the basis of the values of the provided plain attributes,\n+according to the available <<mapping,mapping>>.\n+\n+[TIP]\n+====\n+Custom push correlation rules can be provided by <<implementations,implementing>> the\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PushCorrelationRule.java[PushCorrelationRule^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PushCorrelationRule.java[PushCorrelationRule^]\n+endif::[]\n+interface.\n+===="}]}