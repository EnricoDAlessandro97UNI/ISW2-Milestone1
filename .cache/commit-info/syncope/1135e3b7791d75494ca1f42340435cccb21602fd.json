{"sha":"1135e3b7791d75494ca1f42340435cccb21602fd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjExMzVlM2I3NzkxZDc1NDk0Y2ExZjQyMzQwNDM1Y2NjYjIxNjAyZmQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-29T15:05:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-29T15:05:06Z"},"message":"Cleanup","tree":{"sha":"955fd2d8e4f2d8d3ce60e45d765c92b063fb8fb8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/955fd2d8e4f2d8d3ce60e45d765c92b063fb8fb8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1135e3b7791d75494ca1f42340435cccb21602fd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1135e3b7791d75494ca1f42340435cccb21602fd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1135e3b7791d75494ca1f42340435cccb21602fd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1135e3b7791d75494ca1f42340435cccb21602fd/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ec63a29d1bbd029c75816a3872c0b61d63df3847","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ec63a29d1bbd029c75816a3872c0b61d63df3847","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ec63a29d1bbd029c75816a3872c0b61d63df3847"}],"stats":{"total":112,"additions":50,"deletions":62},"files":[{"sha":"d577968292cf3690988530bc4dcc89ebb5e6beee","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskSyncopeOperations.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -45,11 +45,11 @@ public void delete(final String taskKey) {\n     }\n \n     public List<TaskTO> list(final String type) {\n-        return taskService.list(new TaskQuery.Builder(TaskType.valueOf(type)).build()).getResult();\n+        return taskService.search(new TaskQuery.Builder(TaskType.valueOf(type)).build()).getResult();\n     }\n \n     public List<TaskTO> listPropagationTask() {\n-        return taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).build()).getResult();\n+        return taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).build()).getResult();\n     }\n \n     public void deleteExecution(final String executionKey) {"},{"sha":"516ef7c5d609c4b5284884927c960ffe0fb8ac54","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -60,23 +60,23 @@ public void actionJob(final String refKey, final JobAction jobAction) {\n     }\n \n     public int count(final TaskType kind) {\n-        return getService(TaskService.class).list(\n+        return getService(TaskService.class).search(\n                 new TaskQuery.Builder(kind).page(1).size(1).build()).getTotalCount();\n     }\n \n     public int count(final String resource, final TaskType kind) {\n-        return getService(TaskService.class).list(\n+        return getService(TaskService.class).search(\n                 new TaskQuery.Builder(kind).resource(resource).page(1).size(1).build()).getTotalCount();\n     }\n \n     public int count(final AnyTypeKind anyTypeKind, final String entityKey, final TaskType kind) {\n-        return getService(TaskService.class).list(\n+        return getService(TaskService.class).search(\n                 new TaskQuery.Builder(kind).anyTypeKind(anyTypeKind).entityKey(entityKey).page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n     public int count(final AnyTypeKind anyTypeKind, final String entityKey, final String notification) {\n-        return getService(TaskService.class).list(\n+        return getService(TaskService.class).search(\n                 new TaskQuery.Builder(TaskType.NOTIFICATION).notification(notification).\n                         anyTypeKind(anyTypeKind).entityKey(entityKey).page(1).size(1).build()).\n                 getTotalCount();\n@@ -92,7 +92,7 @@ public List<PropagationTaskTO> listPropagationTasks(\n             final String resource, final int page, final int size, final SortParam<String> sort) {\n \n         return getService(TaskService.class).\n-                <PropagationTaskTO>list(new TaskQuery.Builder(TaskType.PROPAGATION).\n+                <PropagationTaskTO>search(new TaskQuery.Builder(TaskType.PROPAGATION).\n                         resource(resource).\n                         page(page).size(size).\n                         orderBy(toOrderBy(sort)).build()).\n@@ -104,7 +104,7 @@ public List<PropagationTaskTO> listPropagationTasks(\n             final int page, final int size, final SortParam<String> sort) {\n \n         return getService(TaskService.class).\n-                <PropagationTaskTO>list(new TaskQuery.Builder(TaskType.PROPAGATION).\n+                <PropagationTaskTO>search(new TaskQuery.Builder(TaskType.PROPAGATION).\n                         anyTypeKind(anyTypeKind).entityKey(entityKey).\n                         page(page).size(size).\n                         orderBy(toOrderBy(sort)).build()).\n@@ -133,7 +133,7 @@ public List<NotificationTaskTO> listNotificationTasks(\n         }\n \n         PagedResult<NotificationTaskTO> list = getService(TaskService.class).\n-                list(builder.page(page).size(size).orderBy(toOrderBy(sort)).build());\n+                search(builder.page(page).size(size).orderBy(toOrderBy(sort)).build());\n         return list.getResult();\n     }\n \n@@ -142,9 +142,8 @@ public <T extends TaskTO> List<T> list(\n             final Class<T> reference, final int page, final int size, final SortParam<String> sort) {\n \n         return (List<T>) getService(TaskService.class).\n-                list(new TaskQuery.Builder(getTaskType(reference)).page(page).size(size).\n-                        orderBy(toOrderBy(sort)).build()).\n-                getResult();\n+                search(new TaskQuery.Builder(getTaskType(reference)).page(page).size(size).\n+                        orderBy(toOrderBy(sort)).build()).getResult();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -156,9 +155,8 @@ public <T extends TaskTO> List<T> list(\n             final SortParam<String> sort) {\n \n         return (List<T>) getService(TaskService.class).\n-                list(new TaskQuery.Builder(getTaskType(reference)).page(page).size(size).resource(resource).\n-                        orderBy(toOrderBy(sort)).build()).\n-                getResult();\n+                search(new TaskQuery.Builder(getTaskType(reference)).page(page).size(size).resource(resource).\n+                        orderBy(toOrderBy(sort)).build()).getResult();\n     }\n \n     @Override"},{"sha":"5e6bf342d6c68f6ce3336c9f1dafc849a7f42385","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -86,7 +86,7 @@ <T extends TaskTO> T read(\n     @GET\n     @Path(\"{type}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    <T extends TaskTO> PagedResult<T> list(@BeanParam TaskQuery query);\n+    <T extends TaskTO> PagedResult<T> search(@BeanParam TaskQuery query);\n \n     /**\n      * Creates a new task."},{"sha":"b87d3d6adc378e26f059862de00eea0da9f4e774","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -145,24 +145,11 @@ public void delete(final SchemaType schemaType, final String schemaKey) {\n         }\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n-    @Transactional(readOnly = true)\n-    public <T extends SchemaTO> List<T> list(final SchemaType schemaType, final List<String> anyTypeClasses) {\n-        return doSearch(schemaType, anyTypeClasses, null);\n-    }\n-\n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     public <T extends SchemaTO> List<T> search(\n             final SchemaType schemaType, final List<String> anyTypeClasses, final String keyword) {\n \n-        return doSearch(schemaType, anyTypeClasses, keyword == null ? null : keyword.replace('*', '%'));\n-    }\n-\n-    @SuppressWarnings({ \"unchecked\", \"Convert2Lambda\" })\n-    private <T extends SchemaTO> List<T> doSearch(\n-            final SchemaType schemaType, final List<String> anyTypeClasses, final String keyword) {\n-\n         List<AnyTypeClass> classes = new ArrayList<>(anyTypeClasses == null ? 0 : anyTypeClasses.size());\n         if (anyTypeClasses != null) {\n             anyTypeClasses.remove(AnyTypeKind.USER.name());"},{"sha":"bdd2fe2f08eb04af5ff9e3edacb0068c2eb3662f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -159,7 +159,7 @@ public <T extends SchedTaskTO> T updateSchedTask(final TaskType type, final Sche\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n     @Transactional(readOnly = true)\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends TaskTO> Pair<Integer, List<T>> list(\n+    public <T extends TaskTO> Pair<Integer, List<T>> search(\n             final TaskType type,\n             final String resource,\n             final String notification,"},{"sha":"dca79bfe22ba5e716cec10487b16ace2c3c8fc6e","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -53,7 +53,8 @@ public void delete(final SchemaType schemaType, final String key) {\n \n     @Override\n     public <T extends SchemaTO> List<T> search(final SchemaQuery query) {\n-        return logic.search(query.getType(), query.getAnyTypeClasses(), query.getKeyword());\n+        String keyword = query.getKeyword() == null ? null : query.getKeyword().replace('*', '%');\n+        return logic.search(query.getType(), query.getAnyTypeClasses(), keyword);\n     }\n \n     @Override"},{"sha":"cbeb886eb89c4977017c53c7475a38af1db109d8","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -70,8 +70,8 @@ public void delete(final TaskType type, final String key) {\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public <T extends TaskTO> PagedResult<T> list(final TaskQuery query) {\n-        Pair<Integer, List<T>> result = logic.list(\n+    public <T extends TaskTO> PagedResult<T> search(final TaskQuery query) {\n+        Pair<Integer, List<T>> result = logic.search(\n                 query.getType(),\n                 query.getResource(),\n                 query.getNotification(),"},{"sha":"fc85d9de271a499ea24d5c43ae9c2009bdef9ed2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -201,7 +201,7 @@ protected NotificationTaskTO findNotificationTask(final String notification, fin\n             }\n \n             PagedResult<NotificationTaskTO> tasks =\n-                    taskService.list(new TaskQuery.Builder(TaskType.NOTIFICATION).notification(notification).build());\n+                    taskService.search(new TaskQuery.Builder(TaskType.NOTIFICATION).notification(notification).build());\n             if (!tasks.getResult().isEmpty()) {\n                 notificationTask = tasks.getResult().get(0);\n             }"},{"sha":"9566e8fc4b70e2c4aa33470800d8bf7c415333ac","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ExceptionMapperITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -156,19 +156,19 @@ public void headersMultiValue() {\n     @Test\n     public void invalidRequests() {\n         try {\n-            taskService.list(new TaskQuery.Builder(TaskType.NOTIFICATION).resource(RESOURCE_NAME_LDAP).build());\n+            taskService.search(new TaskQuery.Builder(TaskType.NOTIFICATION).resource(RESOURCE_NAME_LDAP).build());\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidRequest, e.getType());\n         }\n         try {\n-            taskService.list(new TaskQuery.Builder(TaskType.PULL).anyTypeKind(AnyTypeKind.ANY_OBJECT).build());\n+            taskService.search(new TaskQuery.Builder(TaskType.PULL).anyTypeKind(AnyTypeKind.ANY_OBJECT).build());\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidRequest, e.getType());\n         }\n         try {\n-            taskService.list(new TaskQuery.Builder(TaskType.PULL).\n+            taskService.search(new TaskQuery.Builder(TaskType.PULL).\n                     notification(\"e00945b5-1184-4d43-8e45-4318a8dcdfd4\").build());\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {"},{"sha":"62dc977edf82ecb62420b112170fdcbf60a25e8b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -169,7 +169,9 @@ public void issueSYNCOPE86() {\n             assertEquals(1, taskTO.getExecutions().size());\n         } finally {\n             // Remove execution to make test re-runnable\n-            taskService.deleteExecution(taskTO.getExecutions().get(0).getKey());\n+            if (!taskTO.getExecutions().isEmpty()) {\n+                taskService.deleteExecution(taskTO.getExecutions().get(0).getKey());\n+            }\n         }\n     }\n \n@@ -276,7 +278,7 @@ public void issueSYNCOPE446() throws Exception {\n         assertTrue(taskTO.getRecipients().containsAll(\n                 new TestNotificationRecipientsProvider().provideRecipients(null)));\n \n-        NotificationTaskTO foundViaList = taskService.<NotificationTaskTO>list(\n+        NotificationTaskTO foundViaList = taskService.<NotificationTaskTO>search(\n                 new TaskQuery.Builder(TaskType.NOTIFICATION).notification(notification.getKey()).build()).\n                 getResult().get(0);\n         assertEquals(taskTO, foundViaList);\n@@ -295,7 +297,7 @@ public void issueSYNCOPE492() throws Exception {\n \n         // verify that no task was created for disabled notification\n         PagedResult<NotificationTaskTO> tasks =\n-                taskService.list(new TaskQuery.Builder(TaskType.NOTIFICATION).notification(created.getLeft()).build());\n+                taskService.search(new TaskQuery.Builder(TaskType.NOTIFICATION).notification(created.getLeft()).build());\n         assertEquals(0, tasks.getSize());\n     }\n "},{"sha":"551dac4819f254b2563381586fd4a4603888519a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -52,7 +52,7 @@ public class PropagationTaskITCase extends AbstractTaskITCase {\n \n     @Test\n     public void paginatedList() {\n-        PagedResult<PropagationTaskTO> tasks = taskService.list(\n+        PagedResult<PropagationTaskTO> tasks = taskService.search(\n                 new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(2).build());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getResult().size());\n@@ -61,7 +61,7 @@ public void paginatedList() {\n             assertNotNull(task);\n         }\n \n-        tasks = taskService.list(\n+        tasks = taskService.search(\n                 new TaskQuery.Builder(TaskType.PROPAGATION).page(2).size(2).build());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getPage());\n@@ -71,7 +71,7 @@ public void paginatedList() {\n             assertNotNull(task);\n         }\n \n-        tasks = taskService.list(\n+        tasks = taskService.search(\n                 new TaskQuery.Builder(TaskType.PROPAGATION).page(1000).size(2).build());\n         assertNotNull(tasks);\n         assertTrue(tasks.getResult().isEmpty());\n@@ -93,7 +93,7 @@ public void bulkAction() {\n         userTO = createUser(userTO).getEntity();\n \n         List<PropagationTaskTO> tasks = new ArrayList<>(\n-                taskService.<PropagationTaskTO>list(new TaskQuery.Builder(TaskType.PROPAGATION).\n+                taskService.<PropagationTaskTO>search(new TaskQuery.Builder(TaskType.PROPAGATION).\n                         anyTypeKind(AnyTypeKind.USER).entityKey(userTO.getKey()).build()).\n                         getResult());\n         assertFalse(tasks.isEmpty());\n@@ -104,7 +104,7 @@ public void bulkAction() {\n \n         taskService.bulk(bulkAction);\n \n-        assertFalse(taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(100).build()).\n+        assertFalse(taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(100).build()).\n                 getResult().containsAll(tasks));\n     }\n \n@@ -196,13 +196,13 @@ public void issueSYNCOPE741() {\n         }\n \n         // check list\n-        PagedResult<TaskTO> tasks = taskService.list(\n+        PagedResult<TaskTO> tasks = taskService.search(\n                 new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(2).details(false).build());\n         for (TaskTO item : tasks.getResult()) {\n             assertTrue(item.getExecutions().isEmpty());\n         }\n \n-        tasks = taskService.list(\n+        tasks = taskService.search(\n                 new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(2).details(true).build());\n         for (TaskTO item : tasks.getResult()) {\n             assertFalse(item.getExecutions().isEmpty());"},{"sha":"68f9d8990dfcf6f4ec77d5a670e8df45f784d7fb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -140,7 +140,7 @@ public void getPullActionsClasses() {\n \n     @Test\n     public void list() {\n-        PagedResult<PullTaskTO> tasks = taskService.list(new TaskQuery.Builder(TaskType.PULL).build());\n+        PagedResult<PullTaskTO> tasks = taskService.search(new TaskQuery.Builder(TaskType.PULL).build());\n         assertFalse(tasks.getResult().isEmpty());\n         tasks.getResult().stream().\n                 filter(task -> (!(task instanceof PullTaskTO))).\n@@ -677,7 +677,7 @@ public void remediation() {\n         ldap = createResource(ldap);\n \n         // 2. create PullTask with remediation enabled, for the new resource\n-        PullTaskTO pullTask = (PullTaskTO) taskService.list(new TaskQuery.Builder(TaskType.PULL).\n+        PullTaskTO pullTask = (PullTaskTO) taskService.search(new TaskQuery.Builder(TaskType.PULL).\n                 resource(RESOURCE_NAME_LDAP).build()).getResult().get(0);\n         assertNotNull(pullTask);\n         pullTask.setResource(ldap.getKey());\n@@ -1206,7 +1206,7 @@ public void issueSYNCOPE1062() {\n                     getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, userDn.getValues().get(0)));\n \n             // ...and propagated\n-            PagedResult<TaskTO> propagationTasks = taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).\n+            PagedResult<TaskTO> propagationTasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n                     resource(RESOURCE_NAME_DBPULL).\n                     anyTypeKind(AnyTypeKind.USER).entityKey(user.getKey()).build());\n             assertEquals(1, propagationTasks.getSize());\n@@ -1229,7 +1229,7 @@ public void issueSYNCOPE1062() {\n             assertEquals(\"pullFromLDAP2@syncope.apache.org\", user.getPlainAttr(\"email\").get().getValues().get(0));\n \n             // ...and propagated\n-            propagationTasks = taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).\n+            propagationTasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n                     resource(RESOURCE_NAME_DBPULL).\n                     anyTypeKind(AnyTypeKind.USER).entityKey(user.getKey()).build());\n             assertEquals(2, propagationTasks.getSize());"},{"sha":"798008e50d3d532c5b13f99d75c2fcc97f2eae19","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -86,7 +86,7 @@ public void read() {\n \n     @Test\n     public void list() {\n-        PagedResult<PushTaskTO> tasks = taskService.list(new TaskQuery.Builder(TaskType.PUSH).build());\n+        PagedResult<PushTaskTO> tasks = taskService.search(new TaskQuery.Builder(TaskType.PUSH).build());\n         assertFalse(tasks.getResult().isEmpty());\n         tasks.getResult().stream().\n                 filter((task) -> (!(task instanceof PushTaskTO)))."},{"sha":"24eacadfe40b260917d4eb86c9252035143b441e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -61,7 +61,7 @@ public void getJobClasses() {\n     @Test\n     public void list() {\n         PagedResult<SchedTaskTO> tasks =\n-                taskService.list(new TaskQuery.Builder(TaskType.SCHEDULED).build());\n+                taskService.search(new TaskQuery.Builder(TaskType.SCHEDULED).build());\n         assertFalse(tasks.getResult().isEmpty());\n         tasks.getResult().stream().filter(\n                 task -> !(task instanceof SchedTaskTO) || task instanceof PullTaskTO || task instanceof PushTaskTO)."},{"sha":"130302721a1f67e07a1e8ed7a8e4ced13c35dd27","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1135e3b7791d75494ca1f42340435cccb21602fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=1135e3b7791d75494ca1f42340435cccb21602fd","patch":"@@ -138,7 +138,7 @@ public void createUserWithNoPropagation() {\n         userTO = createUser(userTO).getEntity();\n \n         // get the propagation task just created\n-        PagedResult<PropagationTaskTO> tasks = taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).\n+        PagedResult<PropagationTaskTO> tasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n                 anyTypeKind(AnyTypeKind.USER).entityKey(userTO.getKey()).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n@@ -278,7 +278,7 @@ public void createWithException() {\n     @Test\n     public void create() {\n         // get task list\n-        PagedResult<PropagationTaskTO> tasks = taskService.list(\n+        PagedResult<PropagationTaskTO> tasks = taskService.search(\n                 new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n@@ -320,7 +320,7 @@ public void create() {\n         assertNotNull(newUserTO.getCreationDate());\n \n         // get the new task list\n-        tasks = taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -608,7 +608,7 @@ public void update() {\n \n     @Test\n     public void updatePasswordOnly() {\n-        int beforeTasks = taskService.list(\n+        int beforeTasks = taskService.search(\n                 new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n@@ -626,7 +626,7 @@ public void updatePasswordOnly() {\n         // check for changePwdDate\n         assertNotNull(userTO.getChangePwdDate());\n \n-        int afterTasks = taskService.list(\n+        int afterTasks = taskService.search(\n                 new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build()).getTotalCount();\n         assertFalse(afterTasks <= 0);\n \n@@ -637,7 +637,7 @@ public void updatePasswordOnly() {\n     @Test\n     public void verifyTaskRegistration() {\n         // get task list\n-        PagedResult<PropagationTaskTO> tasks = taskService.list(\n+        PagedResult<PropagationTaskTO> tasks = taskService.search(\n                 new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n@@ -658,7 +658,7 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -682,7 +682,7 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n \n         // default configuration for ws-target-resource2 during update:\n         // all update executions have to be registered\n@@ -699,7 +699,7 @@ public void verifyTaskRegistration() {\n         userService.delete(userTO.getKey());\n \n         // get the new task list\n-        tasks = taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();"}]}