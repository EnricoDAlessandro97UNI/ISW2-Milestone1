{"sha":"6c5201ab6e9bf68a626052b47e72867b60c92963","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZjNTIwMWFiNmU5YmY2OGE2MjYwNTJiNDdlNzI4NjdiNjBjOTI5NjM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-02-16T08:30:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-02-16T08:30:38Z"},"message":"[SYNCOPE-1612] Refactoring TopologyWebSocketBehavior","tree":{"sha":"ee443d833b8cabb6b7ad39a862611f1ef2c0da72","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ee443d833b8cabb6b7ad39a862611f1ef2c0da72"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6c5201ab6e9bf68a626052b47e72867b60c92963","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6c5201ab6e9bf68a626052b47e72867b60c92963","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6c5201ab6e9bf68a626052b47e72867b60c92963","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6c5201ab6e9bf68a626052b47e72867b60c92963/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"585b8371027307fa77366b51268a8caaf6e04e22","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/585b8371027307fa77366b51268a8caaf6e04e22","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/585b8371027307fa77366b51268a8caaf6e04e22"}],"stats":{"total":323,"additions":154,"deletions":169},"files":[{"sha":"4a4466a5cbe9c5e6c78723a22f8576459c71c0c0","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java?ref=6c5201ab6e9bf68a626052b47e72867b60c92963","patch":"@@ -18,20 +18,27 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.springframework.beans.BeanUtils;\n \n@@ -165,6 +172,23 @@ private static List<ConnConfProperty> filterProperties(final Collection<ConnConf\n         return newProperties;\n     }\n \n+    public static boolean check(final String coreAddress, final String domain, final String jwt, final String key)\n+            throws IOException {\n+\n+        WebClient client = WebClient.create(coreAddress).path(\"connectors\").\n+                accept(MediaType.APPLICATION_JSON_TYPE).\n+                type(MediaType.APPLICATION_JSON_TYPE).\n+                header(RESTHeaders.DOMAIN, domain).\n+                authorization(\"Bearer \" + jwt);\n+        Response response = client.path(key).get();\n+        if (response.getStatus() == Response.Status.OK.getStatusCode()) {\n+            response = client.back(false).path(\"check\").\n+                    post(IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8));\n+            return response.getStatus() == Response.Status.NO_CONTENT.getStatusCode();\n+        }\n+        return false;\n+    }\n+\n     public static Pair<Boolean, String> check(final ConnInstanceTO connectorTO) {\n         ConnInstanceTO toBeChecked = new ConnInstanceTO();\n         BeanUtils.copyProperties(connectorTO, toBeChecked, new String[] { \"configuration\", \"configurationMap\" });"},{"sha":"62a53ea84f11809b7da1ab7100417c016d44f51b","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=6c5201ab6e9bf68a626052b47e72867b60c92963","patch":"@@ -18,11 +18,17 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Comparator;\n import java.util.List;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -38,6 +44,23 @@ public class ResourceRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -6898907679835668987L;\n \n+    public static boolean check(final String coreAddress, final String domain, final String jwt, final String key)\n+            throws IOException {\n+\n+        WebClient client = WebClient.create(coreAddress).path(\"resources\").\n+                accept(MediaType.APPLICATION_JSON_TYPE).\n+                type(MediaType.APPLICATION_JSON_TYPE).\n+                header(RESTHeaders.DOMAIN, domain).\n+                authorization(\"Bearer \" + jwt);\n+        Response response = client.path(key).get();\n+        if (response.getStatus() == Response.Status.OK.getStatusCode()) {\n+            response = client.back(false).path(\"check\").\n+                    post(IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8));\n+            return response.getStatus() == Response.Status.NO_CONTENT.getStatusCode();\n+        }\n+        return false;\n+    }\n+\n     public static Pair<Boolean, String> check(final ResourceTO resourceTO) {\n         boolean check = false;\n         String errorMessage = null;\n@@ -66,7 +89,7 @@ public static String getConnObjectKeyValue(final String resource, final String a\n             LOG.debug(\"Error fetching connector object key\", e);\n         }\n         LOG.error(\"Unable to determine connector object key value for resource {}, {} and {}\",\n-            resource, anyTypeKey, anyKey);\n+                resource, anyTypeKey, anyKey);\n         return null;\n     }\n "},{"sha":"dd88cba60464730247862c06d68c26f30651747e","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java","status":"modified","additions":87,"deletions":166,"changes":253,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java?ref=6c5201ab6e9bf68a626052b47e72867b60c92963","patch":"@@ -34,11 +34,8 @@\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n-import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.wicket.Application;\n-import org.apache.wicket.Session;\n-import org.apache.wicket.ThreadContext;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.wicket.protocol.ws.api.WebSocketBehavior;\n import org.apache.wicket.protocol.ws.api.WebSocketRequestHandler;\n import org.apache.wicket.protocol.ws.api.message.TextMessage;\n@@ -50,36 +47,77 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {\n \n     private static final long serialVersionUID = -1653665542635275551L;\n \n+    private static final String CONNECTOR_TEST_TIMEOUT_PARAMETER = \"connector.test.timeout\";\n+\n+    private static final String RESOURCE_TEST_TIMEOUT_PARAMETER = \"resource.test.timeout\";\n+\n     private static final Logger LOG = LoggerFactory.getLogger(TopologyWebSocketBehavior.class);\n \n     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n \n+    private static void timeoutHandlingConnectionChecker(\n+            final Checker checker,\n+            final Integer timeout,\n+            final Map<String, String> responses,\n+            final Set<String> running) {\n+\n+        String response;\n+        try {\n+            if (timeout == null || timeout <= 0) {\n+                LOG.debug(\"No timeouts for resource connection checking ... \");\n+                response = checker.call();\n+            } else {\n+                LOG.debug(\"Timeouts provided for resource connection checking ... \");\n+                response = SyncopeConsoleSession.get().execute(checker).get(timeout, TimeUnit.SECONDS);\n+            }\n+        } catch (InterruptedException | TimeoutException e) {\n+            LOG.warn(\"Connection with {} timed out\", checker.key);\n+            response = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n+                    TopologyNode.Status.UNREACHABLE, checker.key);\n+        } catch (Exception e) {\n+            LOG.error(\"Unexpected exception conneting to {}\", checker.key, e);\n+            response = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n+                    TopologyNode.Status.FAILURE, checker.key);\n+        }\n+\n+        responses.put(checker.key, response);\n+\n+        running.remove(checker.key);\n+    }\n+\n+    @SpringBean\n+    private ServiceOps serviceOps;\n+\n     @SpringBean\n     private ConfParamOps confParamOps;\n \n-    private final Map<String, String> resources = Collections.<String, String>synchronizedMap(new HashMap<>());\n+    private final Map<String, String> connectors = Collections.synchronizedMap(new HashMap<>());\n \n-    private static final String CONNECTOR_TEST_TIMEOUT_PARAMETER = \"connector.test.timeout\";\n+    private final Set<String> runningConnCheck = Collections.synchronizedSet(new HashSet<>());\n \n-    private Integer connectorTestTimeout = null;\n+    private final Map<String, String> resources = Collections.synchronizedMap(new HashMap<>());\n \n-    private static final String RESOURCE_TEST_TIMEOUT_PARAMETER = \"resource.test.timeout\";\n+    private final Set<String> runningResCheck = Collections.synchronizedSet(new HashSet<>());\n \n-    private Integer resourceTestTimeout = null;\n+    private String coreAddress;\n \n-    private final Set<String> runningResCheck = Collections.synchronizedSet(new HashSet<>());\n+    private String domain;\n \n-    private final Map<String, String> connectors = Collections.<String, String>synchronizedMap(new HashMap<>());\n+    private String jwt;\n \n-    private final Set<String> runningConnCheck = Collections.synchronizedSet(new HashSet<>());\n+    private Integer connectorTestTimeout = null;\n+\n+    private Integer resourceTestTimeout = null;\n \n     public TopologyWebSocketBehavior() {\n+        coreAddress = serviceOps.get(NetworkService.Type.CORE).getAddress();\n+        domain = SyncopeConsoleSession.get().getDomain();\n+        jwt = SyncopeConsoleSession.get().getJWT();\n+\n         // Handling with timeout as per SYNCOPE-1379\n         try {\n-            connectorTestTimeout = confParamOps.get(SyncopeConsoleSession.get().getDomain(),\n-                    CONNECTOR_TEST_TIMEOUT_PARAMETER, null, Integer.class);\n-            resourceTestTimeout = confParamOps.get(SyncopeConsoleSession.get().getDomain(),\n-                    RESOURCE_TEST_TIMEOUT_PARAMETER, null, Integer.class);\n+            connectorTestTimeout = confParamOps.get(domain, CONNECTOR_TEST_TIMEOUT_PARAMETER, null, Integer.class);\n+            resourceTestTimeout = confParamOps.get(domain, RESOURCE_TEST_TIMEOUT_PARAMETER, null, Integer.class);\n         } catch (Exception e) {\n             LOG.debug(\"No {} or {} conf parameters found\",\n                     CONNECTOR_TEST_TIMEOUT_PARAMETER, RESOURCE_TEST_TIMEOUT_PARAMETER, e);\n@@ -90,10 +128,9 @@ public TopologyWebSocketBehavior() {\n     protected void onMessage(final WebSocketRequestHandler handler, final TextMessage message) {\n         try {\n             JsonNode obj = OBJECT_MAPPER.readTree(message.getText());\n-\n             switch (Topology.SupportedOperation.valueOf(obj.get(\"kind\").asText())) {\n                 case CHECK_CONNECTOR:\n-                    final String ckey = obj.get(\"target\").asText();\n+                    String ckey = obj.get(\"target\").asText();\n \n                     if (connectors.containsKey(ckey)) {\n                         handler.push(connectors.get(ckey));\n@@ -105,18 +142,19 @@ protected void onMessage(final WebSocketRequestHandler handler, final TextMessag\n                     if (runningConnCheck.contains(ckey)) {\n                         LOG.debug(\"Running connection check for connector {}\", ckey);\n                     } else {\n-                        runningConnCheck.add(ckey);\n-                    }\n-\n-                    try {\n-                        SyncopeConsoleSession.get().execute(new ConnCheck(ckey));\n-                    } catch (Exception e) {\n-                        LOG.error(\"Unexpected error\", e);\n+                        try {\n+                            SyncopeConsoleSession.get().execute(() -> timeoutHandlingConnectionChecker(\n+                                    new ConnectorChecker(ckey), connectorTestTimeout, connectors, runningConnCheck));\n+\n+                            runningConnCheck.add(ckey);\n+                        } catch (Exception e) {\n+                            LOG.error(\"Unexpected error\", e);\n+                        }\n                     }\n-\n                     break;\n+\n                 case CHECK_RESOURCE:\n-                    final String rkey = obj.get(\"target\").asText();\n+                    String rkey = obj.get(\"target\").asText();\n \n                     if (resources.containsKey(rkey)) {\n                         handler.push(resources.get(rkey));\n@@ -128,22 +166,24 @@ protected void onMessage(final WebSocketRequestHandler handler, final TextMessag\n                     if (runningResCheck.contains(rkey)) {\n                         LOG.debug(\"Running connection check for resource {}\", rkey);\n                     } else {\n-                        runningResCheck.add(rkey);\n-                    }\n-\n-                    try {\n-                        SyncopeConsoleSession.get().execute(new ResCheck(rkey));\n-                    } catch (Exception e) {\n-                        LOG.error(\"Unexpected error\", e);\n+                        try {\n+                            SyncopeConsoleSession.get().execute(() -> timeoutHandlingConnectionChecker(\n+                                    new ResourceChecker(rkey), resourceTestTimeout, resources, runningResCheck));\n+\n+                            runningResCheck.add(rkey);\n+                        } catch (Exception e) {\n+                            LOG.error(\"Unexpected error\", e);\n+                        }\n                     }\n-\n                     break;\n+\n                 case ADD_ENDPOINT:\n                     handler.appendJavaScript(String.format(\"addEndpoint('%s', '%s', '%s');\",\n                             obj.get(\"source\").asText(),\n                             obj.get(\"target\").asText(),\n                             obj.get(\"scope\").asText()));\n                     break;\n+\n                 default:\n             }\n         } catch (IOException e) {\n@@ -159,170 +199,51 @@ public boolean resCheckDone(final Collection<String> resources) {\n         return this.resources.keySet().containsAll(resources);\n     }\n \n-    private void timeoutHandlingConnectionChecker(\n-            final Checker checker,\n-            final Integer timeout,\n-            final Map<String, String> responses,\n-            final Set<String> running) {\n-        String res = null;\n-        try {\n-            if (timeout == null) {\n-                LOG.debug(\"No timeouts for resource connection checking ... \");\n-                res = SyncopeConsoleSession.get().execute(checker).get();\n-            } else if (timeout > 0) {\n-                LOG.debug(\"Timeouts provided for resource connection checking ... \");\n-                res = SyncopeConsoleSession.get().execute(checker).get(timeout, TimeUnit.SECONDS);\n-            }\n-        } catch (InterruptedException | TimeoutException e) {\n-            LOG.warn(\"Connection with {} timed out\", checker.getKey());\n-            res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                    TopologyNode.Status.UNREACHABLE, checker.getKey());\n-        } catch (Exception e) {\n-            LOG.error(\"Unexpected exception conneting to {}\", checker.getKey(), e);\n-            res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                    TopologyNode.Status.FAILURE, checker.getKey());\n-        }\n-\n-        if (res != null) {\n-            responses.put(checker.getKey(), res);\n-        }\n-\n-        running.remove(checker.getKey());\n-    }\n-\n-    class ConnCheck implements Runnable {\n-\n-        private final String key;\n-\n-        private final Application application;\n-\n-        private final Session session;\n-\n-        ConnCheck(final String key) {\n-            this.key = key;\n-            this.application = Application.get();\n-            this.session = Session.exists() ? Session.get() : null;\n-        }\n-\n-        @Override\n-        public void run() {\n-            ThreadContext.setApplication(application);\n-            ThreadContext.setSession(session);\n-\n-            try {\n-                timeoutHandlingConnectionChecker(\n-                        new ConnectorChecker(key, this.application),\n-                        connectorTestTimeout,\n-                        connectors,\n-                        runningConnCheck);\n-            } finally {\n-                ThreadContext.detach();\n-            }\n-        }\n-    }\n-\n-    class ResCheck implements Runnable {\n-\n-        private final String key;\n-\n-        private final Application application;\n-\n-        private final Session session;\n-\n-        ResCheck(final String key) {\n-            this.key = key;\n-            this.application = Application.get();\n-            this.session = Session.exists() ? Session.get() : null;\n-        }\n-\n-        @Override\n-        public void run() {\n-            ThreadContext.setApplication(application);\n-            ThreadContext.setSession(session);\n-\n-            try {\n-                timeoutHandlingConnectionChecker(\n-                        new ResourceChecker(key, this.application),\n-                        resourceTestTimeout,\n-                        resources,\n-                        runningResCheck);\n-            } finally {\n-                ThreadContext.detach();\n-            }\n-        }\n-    }\n-\n-    abstract static class Checker implements Callable<String> {\n+    private abstract class Checker implements Callable<String> {\n \n         protected final String key;\n \n-        protected final Application application;\n-\n-        protected final Session session;\n-\n-        Checker(final String key, final Application application) {\n+        Checker(final String key) {\n             this.key = key;\n-            this.application = application;\n-            this.session = Session.exists() ? Session.get() : null;\n-        }\n-\n-        public String getKey() {\n-            return key;\n         }\n-\n-        @Override\n-        public abstract String call() throws Exception;\n     }\n \n-    static class ConnectorChecker extends Checker {\n+    private class ConnectorChecker extends Checker {\n \n-        ConnectorChecker(final String key, final Application application) {\n-            super(key, application);\n+        ConnectorChecker(final String key) {\n+            super(key);\n         }\n \n         @Override\n         public String call() throws Exception {\n-            ThreadContext.setApplication(application);\n-            ThreadContext.setSession(session);\n-\n             try {\n-                final ConnInstanceTO connector = ConnectorRestClient.read(key);\n                 return String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                        ConnectorRestClient.check(connector).getLeft()\n+                        ConnectorRestClient.check(coreAddress, domain, jwt, key)\n                         ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n             } catch (Exception e) {\n                 LOG.warn(\"Error checking connection for {}\", key, e);\n                 return String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n                         TopologyNode.Status.FAILURE, key);\n-            } finally {\n-                ThreadContext.detach();\n             }\n         }\n     }\n \n-    static class ResourceChecker extends Checker {\n+    private class ResourceChecker extends Checker {\n \n-        ResourceChecker(final String key, final Application application) {\n-            super(key, application);\n+        ResourceChecker(final String key) {\n+            super(key);\n         }\n \n         @Override\n         public String call() throws Exception {\n-            ThreadContext.setApplication(application);\n-            ThreadContext.setSession(session);\n-\n             try {\n-                final ResourceTO resource = ResourceRestClient.read(key);\n                 return String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                        ResourceRestClient.check(resource).getLeft()\n+                        ResourceRestClient.check(coreAddress, domain, jwt, key)\n                         ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n             } catch (Exception e) {\n                 LOG.warn(\"Error checking connection for {}\", key, e);\n                 return String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                        TopologyNode.Status.FAILURE,\n-                        key);\n-            } finally {\n-                ThreadContext.detach();\n+                        TopologyNode.Status.FAILURE, key);\n             }\n         }\n     }"},{"sha":"f98a4d52bb740b3ef7783b189aa4cb08654d40a0","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/BaseSession.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseSession.java?ref=6c5201ab6e9bf68a626052b47e72867b60c92963","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.client.ui.commons;\n \n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Future;\n import org.apache.commons.lang3.time.FastDateFormat;\n \n public interface BaseSession {\n@@ -49,6 +51,8 @@ public String fallback() {\n \n     String getDomain();\n \n+    String getJWT();\n+\n     <T> T getAnonymousService(Class<T> serviceClass);\n \n     <T> T getService(Class<T> serviceClass);\n@@ -68,4 +72,6 @@ public String fallback() {\n      * @param e raised exception\n      */\n     void onException(Exception e);\n+\n+    <T> Future<T> execute(Callable<T> command);\n }"},{"sha":"aad097141c706a6f2701f4f3d1078cf38a56360c","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/wizards/AjaxWizard.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2FAjaxWizard.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2FAjaxWizard.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2FAjaxWizard.java?ref=6c5201ab6e9bf68a626052b47e72867b60c92963","patch":"@@ -262,8 +262,7 @@ private Serializable onApply(final AjaxRequestTarget target) throws TimeoutExcep\n         try {\n             Future<Pair<Serializable, Serializable>> executor = execute(new ApplyFuture(target));\n \n-            Pair<Serializable, Serializable> res =\n-                    executor.get(getMaxWaitTimeInSeconds(), TimeUnit.SECONDS);\n+            Pair<Serializable, Serializable> res = executor.get(getMaxWaitTimeInSeconds(), TimeUnit.SECONDS);\n \n             if (res.getLeft() != null) {\n                 send(pageRef.getPage(), Broadcast.BUBBLE, res.getLeft());"},{"sha":"a66019fb35337fa0d5961e5bb5d327e5728e19aa","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=6c5201ab6e9bf68a626052b47e72867b60c92963","patch":"@@ -192,6 +192,7 @@ public void execute(final Runnable command) {\n         }\n     }\n \n+    @Override\n     public <T> Future<T> execute(final Callable<T> command) {\n         try {\n             return executor.submit(command);\n@@ -220,6 +221,7 @@ public String getDomain() {\n         return StringUtils.isBlank(domain) ? SyncopeConstants.MASTER_DOMAIN : domain;\n     }\n \n+    @Override\n     public String getJWT() {\n         return Optional.ofNullable(client).map(SyncopeClient::getJWT).orElse(null);\n     }"},{"sha":"9fa5bed8498ac32ff23db80bd7ae59b71a2bfbc8","filename":"client/idrepo/console/src/main/resources/application.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=6c5201ab6e9bf68a626052b47e72867b60c92963","patch":"@@ -25,3 +25,5 @@ server.servlet.encoding.force=true\n server.servlet.contextPath=/syncope-console\n \n service.discovery.address=http://localhost:8080/syncope-console/\n+\n+wicket.core.csrf.enabled=false"},{"sha":"1404289bd70f7ced13abd05586e740ce93393d84","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=6c5201ab6e9bf68a626052b47e72867b60c92963","patch":"@@ -133,6 +133,7 @@ public void cleanup() {\n         services.clear();\n     }\n \n+    @Override\n     public String getJWT() {\n         return Optional.ofNullable(client).map(SyncopeClient::getJWT).orElse(null);\n     }\n@@ -240,6 +241,7 @@ public UserTO getSelfTO() {\n         return selfTO;\n     }\n \n+    @Override\n     public <T> Future<T> execute(final Callable<T> command) {\n         try {\n             return executor.submit(command);"},{"sha":"2cbc34e65d917687045ab050676c5996911395bb","filename":"client/idrepo/enduser/src/main/resources/application.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6c5201ab6e9bf68a626052b47e72867b60c92963/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=6c5201ab6e9bf68a626052b47e72867b60c92963","patch":"@@ -25,3 +25,5 @@ server.servlet.encoding.force=true\n server.servlet.contextPath=/syncope-enduser\n \n service.discovery.address=http://localhost:8080/syncope-enduser/\n+\n+wicket.core.csrf.enabled=false"},{"sha":"b354e62fdcf87c98ae38185a850daddf2fc309da","filename":"docker/console/src/main/resources/application.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6c5201ab6e9bf68a626052b47e72867b60c92963/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6c5201ab6e9bf68a626052b47e72867b60c92963/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=6c5201ab6e9bf68a626052b47e72867b60c92963","patch":"@@ -25,3 +25,5 @@ server.servlet.encoding.force=true\n server.servlet.contextPath=/syncope-console\n \n service.discovery.address=${SERVICE_DISCOVERY_ADDRESS}\n+\n+wicket.core.csrf.enabled=false"},{"sha":"b5fb284a2f7e90b8e853c2895916c8ab33d2001c","filename":"docker/enduser/src/main/resources/application.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6c5201ab6e9bf68a626052b47e72867b60c92963/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6c5201ab6e9bf68a626052b47e72867b60c92963/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=6c5201ab6e9bf68a626052b47e72867b60c92963","patch":"@@ -25,3 +25,5 @@ server.servlet.encoding.force=true\n server.servlet.contextPath=/syncope-enduser\n \n service.discovery.address=${SERVICE_DISCOVERY_ADDRESS}\n+\n+wicket.core.csrf.enabled=false"}]}