{"sha":"9f6dc6c28eb79839d62948055074789c925cc03a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlmNmRjNmMyOGViNzk4MzlkNjI5NDgwNTUwNzQ3ODljOTI1Y2MwM2E=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-02-24T13:06:46Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-02-24T13:06:46Z"},"message":"[SYNCOPE-647] Merge from 1_2_X","tree":{"sha":"9a85b10daa7650dccec35b11090592b2fccbe308","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9a85b10daa7650dccec35b11090592b2fccbe308"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9f6dc6c28eb79839d62948055074789c925cc03a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9f6dc6c28eb79839d62948055074789c925cc03a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9f6dc6c28eb79839d62948055074789c925cc03a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9f6dc6c28eb79839d62948055074789c925cc03a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6d5713dc85724280d9951f49b044c709c1359433","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6d5713dc85724280d9951f49b044c709c1359433","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6d5713dc85724280d9951f49b044c709c1359433"},{"sha":"c1e6b586445237da5e2e1eb75f2f12c0c591e852","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c1e6b586445237da5e2e1eb75f2f12c0c591e852","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c1e6b586445237da5e2e1eb75f2f12c0c591e852"}],"stats":{"total":177,"additions":108,"deletions":69},"files":[{"sha":"eb46fd0d851e514f9f1f5eb67c24be7d595fcc6b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AttributableUtil.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f6dc6c28eb79839d62948055074789c925cc03a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f6dc6c28eb79839d62948055074789c925cc03a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtil.java?ref=9f6dc6c28eb79839d62948055074789c925cc03a","patch":"@@ -77,7 +77,7 @@ public interface AttributableUtil {\n \n     <T extends MappingItem> List<T> getUidToMappingItems(ExternalResource resource, MappingPurpose purpose);\n \n-    IntMappingType intMappingType();\n+    IntMappingType plainIntMappingType();\n \n     IntMappingType derIntMappingType();\n "},{"sha":"2a354a5d68f251ff8be8e9265f7c740f9b8a191b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f6dc6c28eb79839d62948055074789c925cc03a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f6dc6c28eb79839d62948055074789c925cc03a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=9f6dc6c28eb79839d62948055074789c925cc03a","patch":"@@ -133,8 +133,8 @@ public void delete(final String key, final AttributableUtil attributableUtil) {\n             }\n         }\n \n-        resourceDAO.deleteMapping(key, attributableUtil.intMappingType(), UMappingItem.class);\n-        resourceDAO.deleteMapping(key, attributableUtil.intMappingType(), RMappingItem.class);\n+        resourceDAO.deleteMapping(key, attributableUtil.plainIntMappingType(), UMappingItem.class);\n+        resourceDAO.deleteMapping(key, attributableUtil.plainIntMappingType(), RMappingItem.class);\n \n         entityManager.remove(schema);\n     }"},{"sha":"3b744c64006dfcad874293751669734e8b33afa3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAttributableUtil.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f6dc6c28eb79839d62948055074789c925cc03a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f6dc6c28eb79839d62948055074789c925cc03a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtil.java?ref=9f6dc6c28eb79839d62948055074789c925cc03a","patch":"@@ -739,7 +739,7 @@ public <T extends MappingItem> List<T> getUidToMappingItems(\n     }\n \n     @Override\n-    public IntMappingType intMappingType() {\n+    public IntMappingType plainIntMappingType() {\n         IntMappingType result = null;\n \n         switch (type) {"},{"sha":"449f94944cb1037e17fc47526da4fb94798c6a07","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandler.java","status":"modified","additions":33,"deletions":28,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f6dc6c28eb79839d62948055074789c925cc03a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f6dc6c28eb79839d62948055074789c925cc03a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java?ref=9f6dc6c28eb79839d62948055074789c925cc03a","patch":"@@ -20,14 +20,14 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -116,6 +116,19 @@ public void setVirAttrSchema(final Attributable<?, ?, ?> attributable,\n         }\n     }\n \n+    public void updateOnResourcesIfMappingMatches(final AttributableUtil attrUtil, final String schemaKey,\n+            final Set<ExternalResource> resources, final IntMappingType mappingType,\n+            final PropagationByResource propByRes) {\n+\n+        for (ExternalResource resource : resources) {\n+            for (MappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n+                if (schemaKey.equals(mapItem.getIntAttrName()) && mapItem.getIntMappingType() == mappingType) {\n+                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n+                }\n+            }\n+        }\n+    }\n+\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public PropagationByResource fillVirtual(final Attributable attributable,\n             final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated,\n@@ -126,11 +139,9 @@ public PropagationByResource fillVirtual(final Attributable attributable,\n         final Set<ExternalResource> externalResources = new HashSet<>();\n         if (attributable instanceof Subject) {\n             externalResources.addAll(((Subject<?, ?, ?>) attributable).getResources());\n-        }\n-\n-        if (attributable instanceof Membership) {\n-            externalResources.clear();\n+        } else if (attributable instanceof Membership) {\n             externalResources.addAll(((Membership) attributable).getUser().getResources());\n+            externalResources.addAll(((Membership) attributable).getRole().getResources());\n         }\n \n         // 1. virtual attributes to be removed\n@@ -145,11 +156,10 @@ public PropagationByResource fillVirtual(final Attributable attributable,\n                     virAttrDAO.delete(virAttr);\n                 }\n \n-                for (ExternalResource resource : resourceDAO.findAll()) {\n+                for (ExternalResource resource : externalResources) {\n                     for (MappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n                         if (virSchema.getKey().equals(mapItem.getIntAttrName())\n-                                && mapItem.getIntMappingType() == attrUtil.virIntMappingType()\n-                                && externalResources.contains(resource)) {\n+                                && mapItem.getIntMappingType() == attrUtil.virIntMappingType()) {\n \n                             propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n \n@@ -183,15 +193,12 @@ public PropagationByResource fillVirtual(final Attributable attributable,\n             }\n \n             if (virSchema != null && virAttr != null && virAttr.getSchema() != null) {\n-                for (ExternalResource resource : resourceDAO.findAll()) {\n-                    for (MappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n-                        if (virSchema.getKey().equals(mapItem.getIntAttrName())\n-                                && mapItem.getIntMappingType() == attrUtil.virIntMappingType()\n-                                && externalResources.contains(resource)) {\n-\n-                            propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-                        }\n-                    }\n+                if (attributable instanceof Subject) {\n+                    updateOnResourcesIfMappingMatches(attrUtil, virSchema.getKey(),\n+                            externalResources, attrUtil.derIntMappingType(), propByRes);\n+                } else if (attributable instanceof Membership) {\n+                    updateOnResourcesIfMappingMatches(attrUtil, virSchema.getKey(),\n+                            externalResources, IntMappingType.MembershipVirtualSchema, propByRes);\n                 }\n \n                 final List<String> values = new ArrayList<>(virAttr.getValues());\n@@ -263,6 +270,14 @@ public PropagationByResource fillVirtual(\n                 attrUtilFactory.getInstance(AttributableType.USER));\n     }\n \n+    private Set<String> getAttrNames(final List<? extends VirAttr> virAttrs) {\n+        final Set<String> virAttrNames = new HashSet<>();\n+        for (VirAttr attr : virAttrs) {\n+            virAttrNames.add(attr.getSchema().getKey());\n+        }\n+        return virAttrNames;\n+    }\n+\n     /**\n      * SYNCOPE-501: build membership virtual attribute changes in case no other changes were made.\n      *\n@@ -285,9 +300,7 @@ public PropagationByResource fillMembershipVirtual(\n         return membership == null ? new PropagationByResource() : isRemoval\n                 ? fillVirtual(\n                         membership,\n-                        membership.getVirAttrs() == null\n-                                ? Collections.<String>emptySet()\n-                                : getAttrNames(membership.getVirAttrs()),\n+                        getAttrNames(membership.getVirAttrs()),\n                         vAttrsToBeUpdated,\n                         attrUtilFactory.getInstance(AttributableType.MEMBERSHIP))\n                 : fillVirtual(\n@@ -297,12 +310,4 @@ public PropagationByResource fillMembershipVirtual(\n                         attrUtilFactory.getInstance(AttributableType.MEMBERSHIP));\n     }\n \n-    private Set<String> getAttrNames(final List<? extends VirAttr> virAttrs) {\n-        final Set<String> virAttrNames = new HashSet<>();\n-        for (VirAttr attr : virAttrs) {\n-            virAttrNames.add(attr.getSchema().getKey());\n-        }\n-        return virAttrNames;\n-    }\n-\n }"},{"sha":"ea12fad3892d4689be0df81771076b52e4ebd71b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAttributableDataBinder.java","status":"modified","additions":25,"deletions":32,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f6dc6c28eb79839d62948055074789c925cc03a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f6dc6c28eb79839d62948055074789c925cc03a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java?ref=9f6dc6c28eb79839d62948055074789c925cc03a","patch":"@@ -276,7 +276,7 @@ private SyncopeClientException checkMandatory(final AttributableUtil attrUtil,\n                     && !schema.isReadonly()\n                     && (JexlUtil.evaluateMandatoryCondition(schema.getMandatoryCondition(), attributable)\n                     || evaluateMandatoryCondition(attrUtil, attributable, schema.getKey(),\n-                            attrUtil.intMappingType()))) {\n+                            attrUtil.plainIntMappingType()))) {\n \n                 LOG.error(\"Mandatory schema \" + schema.getKey() + \" not provided with values\");\n \n@@ -411,6 +411,14 @@ protected PropagationByResource fill(final Attributable attributable,\n             LOG.debug(\"Resources to be added:\\n{}\", propByRes);\n         }\n \n+        final Set<ExternalResource> externalResources = new HashSet<>();\n+        if (attributable instanceof Subject) {\n+            externalResources.addAll(((Subject<?, ?, ?>) attributable).getResources());\n+        } else if (attributable instanceof Membership) {\n+            externalResources.addAll(((Membership) attributable).getUser().getResources());\n+            externalResources.addAll(((Membership) attributable).getRole().getResources());\n+        }\n+\n         // 3. attributes to be removed\n         for (String attributeToBeRemoved : attributableMod.getPlainAttrsToRemove()) {\n             PlainSchema schema = getPlainSchema(attributeToBeRemoved, attrUtil.plainSchemaClass());\n@@ -435,19 +443,15 @@ protected PropagationByResource fill(final Attributable attributable,\n                 }\n \n                 if (attributable instanceof Subject) {\n-                    for (ExternalResource resource : resourceDAO.findAll()) {\n+                    for (ExternalResource resource : externalResources) {\n                         for (MappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n                             if (schema.getKey().equals(mapItem.getIntAttrName())\n-                                    && mapItem.getIntMappingType() == attrUtil.intMappingType()\n-                                    && ((Subject<?, ?, ?>) attributable).getResources().contains(resource)) {\n+                                    && mapItem.getIntMappingType() == attrUtil.plainIntMappingType()) {\n \n                                 propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n \n-                                if (mapItem.isAccountid() && attr != null\n-                                        && !attr.getValuesAsStrings().isEmpty()) {\n-\n-                                    propByRes.addOldAccountId(resource.getKey(),\n-                                            attr.getValuesAsStrings().iterator().next());\n+                                if (mapItem.isAccountid() && attr != null && !attr.getValuesAsStrings().isEmpty()) {\n+                                    propByRes.addOldAccountId(resource.getKey(), attr.getValuesAsStrings().get(0));\n                                 }\n                             }\n                         }\n@@ -478,16 +482,11 @@ protected PropagationByResource fill(final Attributable attributable,\n \n             if (schema != null && attr != null && attr.getSchema() != null) {\n                 if (attributable instanceof Subject) {\n-                    for (ExternalResource resource : resourceDAO.findAll()) {\n-                        for (MappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n-                            if (schema.getKey().equals(mapItem.getIntAttrName())\n-                                    && mapItem.getIntMappingType() == attrUtil.intMappingType()\n-                                    && ((Subject<?, ?, ?>) attributable).getResources().contains(resource)) {\n-\n-                                propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-                            }\n-                        }\n-                    }\n+                    virtAttrHander.updateOnResourcesIfMappingMatches(attrUtil, schema.getKey(),\n+                            externalResources, attrUtil.plainIntMappingType(), propByRes);\n+                } else if (attributable instanceof Membership) {\n+                    virtAttrHander.updateOnResourcesIfMappingMatches(attrUtil, schema.getKey(),\n+                            externalResources, IntMappingType.MembershipPlainSchema, propByRes);\n                 }\n \n                 // 1.1 remove values\n@@ -545,11 +544,10 @@ protected PropagationByResource fill(final Attributable attributable,\n                 }\n \n                 if (attributable instanceof Subject) {\n-                    for (ExternalResource resource : resourceDAO.findAll()) {\n+                    for (ExternalResource resource : externalResources) {\n                         for (MappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n                             if (derSchema.getKey().equals(mapItem.getIntAttrName())\n-                                    && mapItem.getIntMappingType() == attrUtil.derIntMappingType()\n-                                    && ((Subject<?, ?, ?>) attributable).getResources().contains(resource)) {\n+                                    && mapItem.getIntMappingType() == attrUtil.derIntMappingType()) {\n \n                                 propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n \n@@ -573,16 +571,11 @@ protected PropagationByResource fill(final Attributable attributable,\n             DerSchema derSchema = getDerSchema(derAttrToBeAdded, attrUtil.derSchemaClass());\n             if (derSchema != null) {\n                 if (attributable instanceof Subject) {\n-                    for (ExternalResource resource : resourceDAO.findAll()) {\n-                        for (MappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n-                            if (derSchema.getKey().equals(mapItem.getIntAttrName())\n-                                    && mapItem.getIntMappingType() == attrUtil.derIntMappingType()\n-                                    && ((Subject<?, ?, ?>) attributable).getResources().contains(resource)) {\n-\n-                                propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-                            }\n-                        }\n-                    }\n+                    virtAttrHander.updateOnResourcesIfMappingMatches(attrUtil, derSchema.getKey(),\n+                            externalResources, attrUtil.derIntMappingType(), propByRes);\n+                } else if (attributable instanceof Membership) {\n+                    virtAttrHander.updateOnResourcesIfMappingMatches(attrUtil, derSchema.getKey(),\n+                            externalResources, IntMappingType.MembershipDerivedSchema, propByRes);\n                 }\n \n                 DerAttr derAttr = attrUtil.newDerAttr();"},{"sha":"9b02e74d2cf6195d48f4f91766b5e8793492d54e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":46,"deletions":5,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f6dc6c28eb79839d62948055074789c925cc03a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f6dc6c28eb79839d62948055074789c925cc03a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=9f6dc6c28eb79839d62948055074789c925cc03a","patch":"@@ -1539,11 +1539,11 @@ public void isseSYNCOPE136AES() {\n         UserMod userMod = new UserMod();\n         userMod.setKey(userTO.getKey());\n         userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n-        \n+\n         final StatusMod st = new StatusMod();\n         st.setOnSyncope(false);\n         st.getResourceNames().add(RESOURCE_NAME_WS1);\n-        userMod.setPwdPropRequest(st); \n+        userMod.setPwdPropRequest(st);\n \n         userTO = updateUser(userMod);\n         assertNotNull(userTO);\n@@ -1574,7 +1574,7 @@ public void isseSYNCOPE136Random() {\n         UserMod userMod = new UserMod();\n         userMod.setKey(userTO.getKey());\n         userMod.getResourcesToAdd().add(RESOURCE_NAME_LDAP);\n-        \n+\n         final StatusMod st = new StatusMod();\n         st.setOnSyncope(false);\n         st.getResourceNames().add(RESOURCE_NAME_LDAP);\n@@ -2294,7 +2294,7 @@ public void issueSYNCOPE505DB() throws Exception {\n         UserMod userMod = new UserMod();\n         userMod.setKey(user.getKey());\n         userMod.getResourcesToAdd().add(RESOURCE_NAME_TESTDB);\n-        \n+\n         final StatusMod st = new StatusMod();\n         st.setOnSyncope(false);\n         st.getResourceNames().add(RESOURCE_NAME_TESTDB);\n@@ -2337,7 +2337,7 @@ public void issueSYNCOPE505LDAP() throws Exception {\n         UserMod userMod = new UserMod();\n         userMod.setKey(user.getKey());\n         userMod.getResourcesToAdd().add(RESOURCE_NAME_LDAP);\n-        \n+\n         final StatusMod st = new StatusMod();\n         st.setOnSyncope(false);\n         st.getResourceNames().add(RESOURCE_NAME_LDAP);\n@@ -2467,4 +2467,45 @@ public void issueSYNCOPE391() {\n             resourceService.update(RESOURCE_NAME_CSV, csv);\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE647() {\n+        UserTO userTO = getUniqueSampleTO(\"syncope647@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(12L);\n+        membershipTO.getPlainAttrs().add(attrTO(\"postalAddress\", \"postalAddress\"));\n+        userTO.getMemberships().add(membershipTO);\n+\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        UserTO actual = createUser(userTO);\n+        assertNotNull(actual);\n+        assertNotNull(actual.getDerAttrMap().get(\"csvuserid\"));\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, actual.getKey());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"postalAddress\", connObjectTO.getPlainAttrMap().get(\"postalAddress\").getValues().get(0));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(actual.getKey());\n+\n+        MembershipMod membershipMod = new MembershipMod();\n+        membershipMod.setRole(12L);\n+        membershipMod.getPlainAttrsToUpdate().add(attrMod(\"postalAddress\", \"newPostalAddress\"));\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.getMembershipsToRemove().add(actual.getMemberships().iterator().next().getKey());\n+\n+        actual = updateUser(userMod);\n+\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, actual.getKey());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"newPostalAddress\", connObjectTO.getPlainAttrMap().get(\"postalAddress\").getValues().get(0));\n+    }\n }"}]}