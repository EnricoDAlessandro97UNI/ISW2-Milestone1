{"sha":"68151a717080f95aa3301002eac839061ec30008","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY4MTUxYTcxNzA4MGY5NWFhMzMwMTAwMmVhYzgzOTA2MWVjMzAwMDg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2020-08-18T10:41:23Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-08-18T10:41:23Z"},"message":"[SYNCOPE-1585] Streamline SAML2SP4UI ext (#211)","tree":{"sha":"0fe147fd8a393186b6c16f4faf8839ae549f4f9b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0fe147fd8a393186b6c16f4faf8839ae549f4f9b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/68151a717080f95aa3301002eac839061ec30008","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfO7BTCRBK7hj4Ov3rIwAAdHIIABWqQ1sOQDrkn8m432oc9BGZ\nr8PdQJPaijASM3fy/hiOFjVhA3/pZV9OsyGK8qqJHTav12mI0dD6Nlfp5af+8kuA\n7v+t6yhwCqVgxJAJfp0vuW7D0Kf3SE5J87tc27e6TGQMunUzLTeHFykChapEBZ93\ny/m0FUsBi7m0dop6dMEaCrw8Z2mVwCtPxtb9O8WmX2QbX1LEPQCYMYrS9ErReMW6\n59GKEZ9xP4KqsS4+r6d2+EpfcKricacYSL6wZnvGBlABo8SFywfcEqwpYmYDg2qO\nKMlshlGH7Tsm4Ft2AKvYaHy90VYh2BHJ7WOJre1/4cG6FwPaI5ivCUDvMGVq0hw=\n=MRh9\n-----END PGP SIGNATURE-----\n","payload":"tree 0fe147fd8a393186b6c16f4faf8839ae549f4f9b\nparent bccf47121c6e74e2700abb39fb5dd512dc4d1711\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1597747283 +0200\ncommitter GitHub <noreply@github.com> 1597747283 +0200\n\n[SYNCOPE-1585] Streamline SAML2SP4UI ext (#211)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/68151a717080f95aa3301002eac839061ec30008","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/68151a717080f95aa3301002eac839061ec30008","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/68151a717080f95aa3301002eac839061ec30008/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"bccf47121c6e74e2700abb39fb5dd512dc4d1711","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bccf47121c6e74e2700abb39fb5dd512dc4d1711","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bccf47121c6e74e2700abb39fb5dd512dc4d1711"}],"stats":{"total":10025,"additions":3508,"deletions":6517},"files":[{"sha":"f51e7b1cc6d061c6ce05b54252c3da68fe93d2c0","filename":"archetype/pom.xml","status":"modified","additions":0,"deletions":16,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/archetype%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/archetype%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -243,13 +243,6 @@ under the License.\n           <include>console.properties</include>\n         </includes>\n       </resource>\n-      <resource>\n-        <directory>../ext/saml2sp/agent/src/main/resources</directory>\n-        <targetPath>${project.build.outputDirectory}/archetype-resources/console/src/main/resources/all</targetPath>\n-        <includes>\n-          <include>saml2sp-agent.properties</include>\n-        </includes>\n-      </resource>\n       <resource>\n         <directory>../ext/oidcclient/agent/src/main/resources</directory>\n         <targetPath>${project.build.outputDirectory}/archetype-resources/console/src/main/resources/all</targetPath>\n@@ -278,7 +271,6 @@ under the License.\n         <includes>\n           <include>console.properties</include>\n           <include>keymaster.properties</include>\n-          <include>saml2sp-agent.properties</include>\n           <include>oidcclient-agent.properties</include>\n         </includes>\n       </resource>\n@@ -304,13 +296,6 @@ under the License.\n           <include>keymaster.properties</include>\n         </includes>\n       </resource>\n-      <resource>\n-        <directory>../ext/saml2sp/agent/src/main/resources</directory>\n-        <targetPath>${project.build.outputDirectory}/archetype-resources/enduser/src/main/resources/all</targetPath>\n-        <includes>\n-          <include>saml2sp-agent.properties</include>\n-        </includes>\n-      </resource>\n       <resource>\n         <directory>../ext/oidcclient/agent/src/main/resources</directory>\n         <targetPath>${project.build.outputDirectory}/archetype-resources/enduser/src/main/resources/all</targetPath>\n@@ -334,7 +319,6 @@ under the License.\n           <include>customFormAttributes.json</include>\n           <include>customTemplate.json</include>\n           <include>keymaster.properties</include>\n-          <include>saml2sp-agent.properties</include>\n           <include>oidcclient-agent.properties</include>\n         </includes>\n       </resource>"},{"sha":"21eb7811d26a7905a2fc8d59019c3bbc7e40e0c3","filename":"archetype/src/main/resources/archetype-resources/console/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -90,8 +90,8 @@ under the License.\n         </dependency> \n \n         <dependency>\n-          <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-          <artifactId>syncope-ext-saml2sp-client-console</artifactId>\n+          <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+          <artifactId>syncope-ext-saml2sp4ui-client-console</artifactId>\n           <version>${syncope.version}</version>\n         </dependency>\n         "},{"sha":"4101fa28042c118bb9c813860bdb3d06c43121f4","filename":"archetype/src/main/resources/archetype-resources/core/pom.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -139,13 +139,13 @@ under the License.\n         </dependency>\n         \n         <dependency>\n-          <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-          <artifactId>syncope-ext-saml2sp-rest-cxf</artifactId>\n+          <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+          <artifactId>syncope-ext-saml2sp4ui-rest-cxf</artifactId>\n           <version>${syncope.version}</version>\n         </dependency>\n         <dependency>\n-          <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-          <artifactId>syncope-ext-saml2sp-persistence-jpa</artifactId>\n+          <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+          <artifactId>syncope-ext-saml2sp4ui-persistence-jpa</artifactId>\n           <version>${syncope.version}</version>\n         </dependency>\n "},{"sha":"fc342072998b029f61bf8837a4ffb4cabff496cb","filename":"archetype/src/main/resources/archetype-resources/enduser/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -98,8 +98,8 @@ under the License.\n \n       <dependencies>\n         <dependency>\n-          <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-          <artifactId>syncope-ext-saml2sp-client-enduser</artifactId>\n+          <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+          <artifactId>syncope-ext-saml2sp4ui-client-enduser</artifactId>\n           <version>${syncope.version}</version>\n         </dependency>\n "},{"sha":"3a39acbd5abbe1e5ddd21113cc33601c0fe7a13b","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjectListViewPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -27,7 +27,6 @@\n import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.client.console.panels.ListViewPanel.ListViewReload;\n import org.apache.syncope.client.console.panels.search.AbstractSearchPanel;\n import org.apache.syncope.client.console.panels.search.ConnObjectSearchPanel;\n@@ -40,6 +39,7 @@\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.CollectionPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.ui.commons.ConnIdSpecialName;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.status.StatusUtils;\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;"},{"sha":"c303f080b1419d3a7109460aeae8648135c53b96","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/any/LinkedAccountDetailsPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountDetailsPanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -24,9 +24,9 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.ui.commons.ConnIdSpecialName;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;"},{"sha":"5b33177be1184e2ceac425d5983472308b810a5a","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -22,14 +22,16 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n-import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.console.panels.ProvisionAuxClassesPanel;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n+import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n+import org.apache.syncope.client.console.wizards.mapping.ItemTransformersTogglePanel;\n+import org.apache.syncope.client.console.wizards.mapping.JEXLTransformersTogglePanel;\n+import org.apache.syncope.client.ui.commons.ConnIdSpecialName;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;"},{"sha":"66557690bca761a10afdb68cf415068e2e769a1e","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -27,6 +27,9 @@\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n+import org.apache.syncope.client.console.wizards.mapping.AbstractMappingPanel;\n+import org.apache.syncope.client.console.wizards.mapping.ItemTransformersTogglePanel;\n+import org.apache.syncope.client.console.wizards.mapping.JEXLTransformersTogglePanel;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;"},{"sha":"4e1d1465c496b5f619e8387146fb9d16d5357350","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/annotations/ExtPage.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fannotations%2FExtPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fannotations%2FExtPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fannotations%2FExtPage.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.annotations;\n+package org.apache.syncope.client.ui.commons.annotations;\n \n import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/annotations/ExtPage.java"},{"sha":"6db1d6b67587c211a04312c24b9b3f0a0f14653c","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/annotations/Resource.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fannotations%2FResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fannotations%2FResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fannotations%2FResource.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.annotations;\n+package org.apache.syncope.client.ui.commons.annotations;\n \n import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/annotations/Resource.java"},{"sha":"d1faf21007b3d6350433edcad78c1ac9fcbe917f","filename":"client/idrepo/console/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -316,8 +316,8 @@ under the License.\n         </dependency>\n \n         <dependency>\n-          <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-          <artifactId>syncope-ext-saml2sp-client-console</artifactId>\n+          <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+          <artifactId>syncope-ext-saml2sp4ui-client-console</artifactId>\n           <version>${project.version}</version>\n         </dependency>\n "},{"sha":"a055f899a45f0422c8331cad59da42ecd2ad1e30","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeWebApplication.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -34,7 +34,7 @@\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.console.annotations.Resource;\n+import org.apache.syncope.client.ui.commons.annotations.Resource;\n import org.apache.syncope.client.console.commons.AnyDirectoryPanelAdditionalActionLinksProvider;\n import org.apache.syncope.client.console.commons.AnyDirectoryPanelAdditionalActionsProvider;\n import org.apache.syncope.client.console.commons.AnyWizardBuilderAdditionalSteps;"},{"sha":"2eebb4c6da4d45377f8fce984a320ab7bbdcce71","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -32,12 +32,12 @@\n import java.util.Set;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.client.console.annotations.AMPage;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.syncope.client.console.pages.BaseExtPage;\n import org.apache.syncope.client.ui.commons.annotations.BinaryPreview;\n import org.apache.syncope.client.ui.commons.annotations.ExtWidget;\n import org.apache.syncope.client.console.annotations.IdMPage;\n-import org.apache.syncope.client.console.annotations.Resource;\n+import org.apache.syncope.client.ui.commons.annotations.Resource;\n import org.apache.syncope.client.console.commons.AnyWizardBuilderAdditionalSteps;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.ui.commons.panels.BaseSSOLoginFormPanel;\n@@ -184,8 +184,7 @@ public void load() {\n             try {\n                 Class<?> clazz = ClassUtils.resolveClassName(\n                         Objects.requireNonNull(bd.getBeanClassName()), ClassUtils.getDefaultClassLoader());\n-                boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n-                if (!isAbstractClazz) {\n+                if (!Modifier.isAbstract(clazz.getModifiers())) {\n                     if (BaseExtPage.class.isAssignableFrom(clazz)) {\n                         if (clazz.isAnnotationPresent(ExtPage.class)) {\n                             extPages.add((Class<? extends BaseExtPage>) clazz);"},{"sha":"97cfcf68ed836e7e8d7d90aa335dfeeb146b0f11","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.annotations.AMPage;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.syncope.client.console.annotations.IdMPage;\n import org.apache.syncope.client.ui.commons.HttpResourceStream;\n import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n@@ -332,7 +332,7 @@ public void onClick(final AjaxRequestTarget target) {\n         body.add(new Label(\"domain\", SyncopeConsoleSession.get().getDomain()));\n \n         @SuppressWarnings(\"unchecked\")\n-        final Class<? extends WebPage> beforeLogout = (Class<? extends WebPage>) SyncopeConsoleSession.get().\n+        Class<? extends WebPage> beforeLogout = (Class<? extends WebPage>) SyncopeConsoleSession.get().\n                 getAttribute(Constants.BEFORE_LOGOUT_PAGE);\n         if (beforeLogout == null) {\n             body.add(new BookmarkablePageLink<>(\"logout\", Logout.class));"},{"sha":"0752aadb66fabde2cc90c211be1a88b8a0d1450d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Logout.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogout.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -33,5 +33,4 @@ public Logout(final PageParameters parameters) {\n \n         setResponsePage(getApplication().getHomePage());\n     }\n-\n }"},{"sha":"7bc9c5891397f4eb67ba07cfd7451cb8fd39bb6c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -27,7 +27,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n-import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n+import org.apache.syncope.client.ui.commons.ConnIdSpecialName;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.console.commons.ITabComponent;\n import org.apache.syncope.client.ui.commons.status.StatusUtils;"},{"sha":"018b70cf8a6f7bc34ffa6ab1168a55d6b76713d1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/ItemTransformerWidget.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -21,7 +21,7 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.image.Icon;\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.icon.FontAwesome5IconType;\n import java.util.List;\n-import org.apache.syncope.client.console.wizards.resources.ItemTransformersTogglePanel;\n+import org.apache.syncope.client.console.wizards.mapping.ItemTransformersTogglePanel;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;","previous_filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/widgets/ItemTransformerWidget.java"},{"sha":"97f1c57ed8e33536d24ef9be5ab119bce57f1e24","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/JEXLTransformerWidget.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJEXLTransformerWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJEXLTransformerWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJEXLTransformerWidget.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,7 +23,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n+import org.apache.syncope.client.console.wizards.mapping.JEXLTransformersTogglePanel;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;","previous_filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/widgets/JEXLTransformerWidget.java"},{"sha":"417e8c52fbdb58c4af7e1b94f43288814b026ea8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/ConnObjectPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -27,11 +27,11 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n+import org.apache.syncope.client.ui.commons.ConnIdSpecialName;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.wicket.Component;\n import org.apache.wicket.behavior.Behavior;"},{"sha":"127b7ca4e5b5f3aebe9e7a3ce1619156261f0c25","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/mapping/AbstractMappingPanel.java","status":"renamed","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAbstractMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAbstractMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAbstractMappingPanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,26 +16,26 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.wizards.resources;\n+package org.apache.syncope.client.console.wizards.mapping;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.components.PopoverBehavior;\n import de.agilecoders.wicket.core.markup.html.bootstrap.components.PopoverConfig;\n import de.agilecoders.wicket.core.markup.html.bootstrap.components.TooltipConfig;\n import java.io.Serializable;\n import java.util.List;\n-import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n-import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n-import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.widgets.JEXLTransformerWidget;\n import org.apache.syncope.client.console.widgets.ItemTransformerWidget;\n+import org.apache.syncope.client.ui.commons.ConnIdSpecialName;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n@@ -273,7 +273,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                         item.getParent().removeAll();\n                         target.add(AbstractMappingPanel.this);\n                     }\n-                }, ActionLink.ActionType.DELETE, IdMEntitlement.RESOURCE_UPDATE, true).hideLabel();\n+                }, ActionLink.ActionType.DELETE, StringUtils.EMPTY, true).hideLabel();\n                 item.add(actions);\n                 // -------------------------------\n ","previous_filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/AbstractMappingPanel.java"},{"sha":"4ce939bc0444f3b5b33347a6dfb29c46cbb3aae1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/mapping/ItemTransformersTogglePanel.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.wizards.resources;\n+package org.apache.syncope.client.console.wizards.mapping;\n \n import java.io.Serializable;\n import java.util.List;","previous_filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ItemTransformersTogglePanel.java"},{"sha":"78410292638d425076ab9e622e16125cc1d0a045","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/mapping/JEXLTransformersTogglePanel.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FJEXLTransformersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FJEXLTransformersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FJEXLTransformersTogglePanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.wizards.resources;\n+package org.apache.syncope.client.console.wizards.mapping;\n \n import java.io.Serializable;\n import org.apache.commons.lang3.StringUtils;","previous_filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/JEXLTransformersTogglePanel.java"},{"sha":"38a0841be596f1b2ad815d304fb325c69f312e03","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/mapping/MappingPurposePanel.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FMappingPurposePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FMappingPurposePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FMappingPurposePanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.wizards.resources;\n+package org.apache.syncope.client.console.wizards.mapping;\n \n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.wicket.AttributeModifier;","previous_filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/MappingPurposePanel.java"},{"sha":"54b38581cbc6bf6822e4ffc855b36423d0288805","filename":"client/idrepo/console/src/main/resources/application.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -24,4 +24,4 @@ server.servlet.encoding.force=true\n \n server.servlet.contextPath=/syncope-console\n \n-service.discovery.address=http://localhost:8080/syncope/rest/\n+service.discovery.address=http://localhost:8080/syncope-console/"},{"sha":"5c2d15d2f7251c96e03fe2eb1e1a538fe784e6da","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/widgets/ItemTransformerWidget.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.properties?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/widgets/ItemTransformerWidget.properties"},{"sha":"09aa967c66ea75b9476069f8e13a59fddd392de1","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/widgets/JEXLTransformerWidget.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJEXLTransformerWidget.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJEXLTransformerWidget.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJEXLTransformerWidget.properties?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/widgets/JEXLTransformerWidget.properties"},{"sha":"88697948603ac24136849143e18bd9af985833bf","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/mapping/AbstractMappingPanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAbstractMappingPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAbstractMappingPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAbstractMappingPanel.html?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/AbstractMappingPanel.html"},{"sha":"0f1691dc0724bf86dae9579d3608bfbf2bf760fe","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/mapping/AbstractMappingPanel.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAbstractMappingPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAbstractMappingPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FAbstractMappingPanel.properties?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/AbstractMappingPanel.properties"},{"sha":"01ef6530476ece499289c4ec1462b0799373d704","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/mapping/ItemTransformersTogglePanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.html?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ItemTransformersTogglePanel.html"},{"sha":"06d3702737b31e684e10ad75482925825905a3b5","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/mapping/ItemTransformersTogglePanel.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.properties?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ItemTransformersTogglePanel.properties"},{"sha":"142f91a528ccde144e931dba71d2f74ce2a6c957","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/mapping/JEXLTransformersTogglePanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FJEXLTransformersTogglePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FJEXLTransformersTogglePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FJEXLTransformersTogglePanel.html?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/JEXLTransformersTogglePanel.html"},{"sha":"739aa69612ca519e3fc5e626899c5c1a1547052b","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/mapping/MappingPurposePanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FMappingPurposePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FMappingPurposePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FMappingPurposePanel.html?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/MappingPurposePanel.html"},{"sha":"4e4ced229806e8c650082c748b75a39f06403b93","filename":"client/idrepo/enduser/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -279,8 +279,8 @@ under the License.\n         </dependency>\n \n         <dependency>\n-          <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-          <artifactId>syncope-ext-saml2sp-client-enduser</artifactId>\n+          <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+          <artifactId>syncope-ext-saml2sp4ui-client-enduser</artifactId>\n           <version>${project.version}</version>\n         </dependency>\n "},{"sha":"391639f199f1b84f0ccf9cfc844e071a8477ae22","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeWebApplication.java","status":"modified","additions":1,"deletions":22,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -33,17 +33,14 @@\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.Properties;\n-import java.util.Set;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.monitor.FileAlterationListener;\n import org.apache.commons.io.monitor.FileAlterationListenerAdaptor;\n import org.apache.commons.io.monitor.FileAlterationMonitor;\n import org.apache.commons.io.monitor.FileAlterationObserver;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.client.enduser.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.enduser.assets.SyncopeEnduserCss;\n import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n@@ -53,11 +50,10 @@\n import org.apache.syncope.client.enduser.pages.SelfConfirmPasswordReset;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.client.ui.commons.SyncopeUIRequestCycleListener;\n+import org.apache.syncope.client.ui.commons.annotations.Resource;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n-import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.PropertyUtils;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.wicket.Page;\n import org.apache.wicket.Session;\n import org.apache.wicket.WicketRuntimeException;\n@@ -427,21 +423,4 @@ public void setCustomFormAttributes(final Map<String, CustomAttributesInfo> cust\n         this.customFormAttributes.clear();\n         this.customFormAttributes.putAll(customFormAttributes);\n     }\n-\n-    public static void extractAttrsFromExt(final String extAttrs, final UserTO userTO) {\n-        try {\n-            Set<Attr> attrs = MAPPER.readValue(extAttrs, new TypeReference<Set<Attr>>() {\n-            });\n-            Optional<Attr> username = attrs.stream().\n-                    filter(attr -> attr.getSchema().equals(\"username\")).\n-                    findFirst();\n-            if (username.isPresent()) {\n-                userTO.setUsername(username.get().getValues().get(0));\n-                attrs.remove(username.get());\n-            }\n-            userTO.getPlainAttrs().addAll(attrs);\n-        } catch (IOException e) {\n-            LOG.error(\"While extracting ext attributes\", e);\n-        }\n-    }\n }"},{"sha":"74b7c77b94e605ab8c3d7fe6041bacf78754c56c","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/annotations/ExtPage.java","status":"removed","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fannotations%2FExtPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fannotations%2FExtPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fannotations%2FExtPage.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,37 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.enduser.annotations;\n-\n-import java.lang.annotation.Documented;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-@Target({ ElementType.TYPE })\n-@Retention(RetentionPolicy.RUNTIME)\n-@Documented\n-public @interface ExtPage {\n-\n-    /**\n-     * @return the i18n key for the label shown under the \"Extensions\" menu item, on the left pane\n-     */\n-    String label();\n-\n-}"},{"sha":"b54e142062c4e23ab8c13377d6c19a2a2d174ace","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/annotations/Resource.java","status":"removed","additions":0,"deletions":42,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fannotations%2FResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fannotations%2FResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fannotations%2FResource.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,42 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.enduser.annotations;\n-\n-import java.lang.annotation.Documented;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-@Target({ ElementType.TYPE })\n-@Retention(RetentionPolicy.RUNTIME)\n-@Documented\n-public @interface Resource {\n-\n-    /**\n-     * @return string for {@link org.apache.wicket.request.resource.ResourceReference#ResourceReference}\n-     */\n-    String key();\n-\n-    /**\n-     * @return path for{@link org.apache.wicket.protocol.http.WebApplication#mountResource}\n-     */\n-    String path();\n-\n-}"},{"sha":"9122d8fa3d0f14261a2f504dd5c838f6459f74c8","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/init/ClassPathScanImplementationLookup.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,19 +23,17 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n-\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.client.enduser.annotations.ExtPage;\n-import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.client.enduser.pages.BaseEnduserWebPage;\n import org.apache.syncope.client.enduser.pages.BaseExtPage;\n import org.apache.syncope.client.ui.commons.annotations.BinaryPreview;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n+import org.apache.syncope.client.ui.commons.annotations.Resource;\n import org.apache.syncope.client.ui.commons.markup.html.form.preview.AbstractBinaryPreviewer;\n import org.apache.syncope.client.ui.commons.panels.BaseSSOLoginFormPanel;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n import org.springframework.core.type.filter.AssignableTypeFilter;\n import org.springframework.util.ClassUtils;\n@@ -80,10 +78,10 @@ public void load() {\n         scanner.addIncludeFilter(new AssignableTypeFilter(AbstractBinaryPreviewer.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(BaseEnduserWebPage.class));\n \n-        for (BeanDefinition bd : scanner.findCandidateComponents(getBasePackage())) {\n+        scanner.findCandidateComponents(getBasePackage()).forEach(bd -> {\n             try {\n                 Class<?> clazz = ClassUtils.resolveClassName(Objects.requireNonNull(bd.getBeanClassName()),\n-                    ClassUtils.getDefaultClassLoader());\n+                        ClassUtils.getDefaultClassLoader());\n                 boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n                 if (!isAbstractClazz) {\n                     if (BaseExtPage.class.isAssignableFrom(clazz)) {\n@@ -111,7 +109,7 @@ public void load() {\n             } catch (Throwable t) {\n                 LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);\n             }\n-        }\n+        });\n         resources = Collections.unmodifiableList(resources);\n \n         ssoLoginFormPanels = Collections.unmodifiableList(ssoLoginFormPanels);\n@@ -149,9 +147,8 @@ public List<Class<? extends BaseSSOLoginFormPanel>> getSSOLoginFormPanels() {\n     public List<Class<? extends BaseExtPage>> getExtPageClasses() {\n         return extPages;\n     }\n-    \n+\n     public List<Class<? extends BaseEnduserWebPage>> getPageClasses() {\n         return pages;\n     }\n-\n }"},{"sha":"fa874447b6c3703329f0bd684ac66858b7ec061a","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/navigation/Navbar.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -21,11 +21,11 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n-import org.apache.syncope.client.enduser.annotations.ExtPage;\n import org.apache.syncope.client.enduser.pages.BaseExtPage;\n import org.apache.syncope.client.enduser.pages.Logout;\n import org.apache.syncope.client.enduser.pages.Self;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxEventBehavior;"},{"sha":"aab419794d442d71a44cf27ece4171f4f7e83574","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/pages/Self.java","status":"modified","additions":16,"deletions":9,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelf.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -18,9 +18,10 @@\n  */\n package org.apache.syncope.client.enduser.pages;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n-import org.apache.syncope.client.enduser.SyncopeWebApplication;\n import org.apache.syncope.client.enduser.layout.AnyLayoutUtils;\n import org.apache.syncope.client.enduser.layout.UserFormLayoutInfo;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -42,6 +43,10 @@ public class Self extends BaseEnduserWebPage implements IEventSource {\n \n     private static final long serialVersionUID = 164651008547631054L;\n \n+    public static final String NEW_USER_PARAM = \"newUser\";\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n     @SpringBean\n     private ConfParamOps confParamOps;\n \n@@ -113,18 +118,20 @@ protected final AjaxWizard<AnyWrapper<UserTO>> buildWizard(final UserTO userTO,\n     }\n \n     private static UserTO buildNewUserTO(final PageParameters parameters) {\n-        final UserTO userTO = new UserTO();\n-\n+        UserTO userTO = null;\n         if (parameters != null) {\n-            if (!parameters.get(\"saml2SPUserAttrs\").isNull()) {\n-                SyncopeWebApplication.extractAttrsFromExt(parameters.get(\"saml2SPUserAttrs\").toString(), userTO);\n-            } else if (!parameters.get(\"oidcClientUserAttrs\").isNull()) {\n-                SyncopeWebApplication.extractAttrsFromExt(parameters.get(\"oidcClientUserAttrs\").toString(), userTO);\n+            if (!parameters.get(NEW_USER_PARAM).isNull()) {\n+                try {\n+                    userTO = MAPPER.readValue(parameters.get(NEW_USER_PARAM).toString(), UserTO.class);\n+                } catch (JsonProcessingException e) {\n+                    LOG.error(\"While reading user data from social registration\", e);\n+                }\n             }\n         }\n-\n+        if (userTO == null) {\n+            userTO = new UserTO();\n+        }\n         userTO.setRealm(SyncopeConstants.ROOT_REALM);\n         return userTO;\n     }\n-\n }"},{"sha":"28eb8798730f5583503b565abc4c669b2d830c8e","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/SAML2IdPAuthModuleConf.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n public class SAML2IdPAuthModuleConf extends AbstractAuthModuleConf {\n \n@@ -36,7 +37,7 @@ public class SAML2IdPAuthModuleConf extends AbstractAuthModuleConf {\n      * The destination binding to use\n      * when creating authentication requests.\n      */\n-    private String destinationBinding = \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\";\n+    private SAML2BindingType destinationBinding = SAML2BindingType.REDIRECT;\n \n     /**\n      * The password to use when generating the SP keystore.\n@@ -191,11 +192,11 @@ public void setUserIdAttribute(final String userIdAttribute) {\n         this.userIdAttribute = userIdAttribute;\n     }\n \n-    public String getDestinationBinding() {\n+    public SAML2BindingType getDestinationBinding() {\n         return destinationBinding;\n     }\n \n-    public void setDestinationBinding(final String destinationBinding) {\n+    public void setDestinationBinding(final SAML2BindingType destinationBinding) {\n         this.destinationBinding = destinationBinding;\n     }\n "},{"sha":"30ff27197fd87527ee862e15264c48a40d0c86d8","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/SAML2BindingType.java","status":"renamed","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2BindingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2BindingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2BindingType.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,13 +16,11 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.sra.security.saml2;\n-\n-import org.opensaml.saml.common.xml.SAMLConstants;\n+package org.apache.syncope.common.lib.types;\n \n public enum SAML2BindingType {\n-    POST(SAMLConstants.SAML2_POST_BINDING_URI),\n-    REDIRECT(SAMLConstants.SAML2_REDIRECT_BINDING_URI);\n+    POST(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"),\n+    REDIRECT(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\");\n \n     private final String uri;\n ","previous_filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2BindingType.java"},{"sha":"3bc5e906655e034c971cd437d715bfe8c01c1229","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -62,7 +62,7 @@ under the License.\n   \n   <!-- Authentication modules -->\n   <AuthModule id=\"DefaultLDAPAuthModule\"\n-              description=\"LDAP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"userIdAttribute\":\"cn\",\"bindDn\": \"cn=Directory Manager,dc=example,dc=org\", \"bindCredential\":\"Password\",\"ldapUrl\":\"ldap://localhost:1389\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"ou=people,dc=example,dc=org\",\"subtreeSearch\":true}'/>\n+              description=\"LDAP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"userIdAttribute\":\"cn\",\"bindDn\": \"uid=admin,ou=system\", \"bindCredential\":\"secret\",\"ldapUrl\":\"ldap://localhost:1389\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"ou=People,o=isp\",\"subtreeSearch\":true,\"principalAttributeList\":[\"sn\",\"givenName\",\"mail\",\"cn\"]}'/>\n   <AuthModule id=\"DefaultJDBCAuthModule\"\n               description=\"JDBC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"sql\":\"SELECT * FROM users_table WHERE name=?\", \"fieldPassword\": \"password\"}'/>\n   <AuthModule id=\"DefaultGoogleMfaAuthModule\"\n@@ -93,6 +93,15 @@ under the License.\n   <AuthModuleItem id=\"8360509b-7d8e-4796-aa79-3c5ccc8671e6\" extAttrName=\"groups\" intAttrName=\"syncopeUserMemberships\"\n                   password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultSyncopeAuthModule\"/>\n \n+  <AuthModuleItem id=\"8437a40d-d74e-400c-9628-72eba9e30a13\" extAttrName=\"mail\" intAttrName=\"mail\"\n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultLDAPAuthModule\"/>\n+  <AuthModuleItem id=\"1b7a8347-810b-44f2-85ae-58f9e4bedc37\" extAttrName=\"givenName\" intAttrName=\"givenName\"\n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultLDAPAuthModule\"/>\n+  <AuthModuleItem id=\"b06cd5fe-c86b-48d4-8acc-4a46c12bea41\" extAttrName=\"sn\" intAttrName=\"sn\" \n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultLDAPAuthModule\"/>\n+  <AuthModuleItem id=\"a1933059-e64f-409f-a86c-5b54da21787e\" extAttrName=\"cn\" intAttrName=\"cn\"\n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultLDAPAuthModule\"/>\n+\n   <RelationshipType id=\"inclusion\" description=\"Models the act that an object is included in another\"/>\n   <RelationshipType id=\"neighborhood\" description=\"Models the act that an object is near another\"/>\n   "},{"sha":"4ff3e0d265d4655f9a2f054e55effc316b238073","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAOIDCRP.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRP.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -42,7 +42,6 @@ public class JPAOIDCRP extends AbstractClientApp implements OIDCRP {\n \n     public static final String TABLE = \"OIDCRP\";\n \n-    @Column(unique = true, nullable = false)\n     private String clientId;\n \n     private String clientSecret;"},{"sha":"5f3c45fe28edfe7eceadeda2e2ed481e14247893","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -62,7 +62,7 @@ under the License.\n \n   <!-- Authentication modules -->\n   <AuthModule id=\"DefaultLDAPAuthModule\"\n-              description=\"LDAP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"userIdAttribute\":\"cn\",\"bindDn\": \"cn=Directory Manager,dc=example,dc=org\", \"bindCredential\":\"Password\",\"ldapUrl\":\"ldap://localhost:1389\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"ou=people,dc=example,dc=org\",\"subtreeSearch\":true}'/>\n+              description=\"LDAP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"userIdAttribute\":\"cn\",\"bindDn\": \"uid=admin,ou=system\", \"bindCredential\":\"secret\",\"ldapUrl\":\"ldap://localhost:1389\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"ou=People,o=isp\",\"subtreeSearch\":true,\"principalAttributeList\":[\"sn\",\"givenName\",\"mail\",\"cn\"]}'/>\n   <AuthModule id=\"DefaultJDBCAuthModule\"\n               description=\"JDBC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"sql\":\"SELECT * FROM users_table WHERE name=?\", \"fieldPassword\": \"password\"}'/>\n   <AuthModule id=\"DefaultGoogleMfaAuthModule\"\n@@ -93,6 +93,15 @@ under the License.\n   <AuthModuleItem id=\"8360509b-7d8e-4796-aa79-3c5ccc8671e6\" extAttrName=\"groups\" intAttrName=\"syncopeUserMemberships\"\n                   password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultSyncopeAuthModule\"/>\n \n+  <AuthModuleItem id=\"8437a40d-d74e-400c-9628-72eba9e30a13\" extAttrName=\"mail\" intAttrName=\"mail\"\n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultLDAPAuthModule\"/>\n+  <AuthModuleItem id=\"1b7a8347-810b-44f2-85ae-58f9e4bedc37\" extAttrName=\"givenName\" intAttrName=\"givenName\"\n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultLDAPAuthModule\"/>\n+  <AuthModuleItem id=\"b06cd5fe-c86b-48d4-8acc-4a46c12bea41\" extAttrName=\"sn\" intAttrName=\"sn\" \n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultLDAPAuthModule\"/>\n+  <AuthModuleItem id=\"a1933059-e64f-409f-a86c-5b54da21787e\" extAttrName=\"cn\" intAttrName=\"cn\"\n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultLDAPAuthModule\"/>\n+\n   <RelationshipType id=\"inclusion\" description=\"Models the act that an object is included in another\"/>\n   <RelationshipType id=\"neighborhood\" description=\"Models the act that an object is near another\"/>\n   "},{"sha":"1fc8679fda6310048457c86fabc678831b04c776","filename":"docker/console/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/docker%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/docker%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fconsole%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -78,8 +78,8 @@ under the License.\n     </dependency>\n \n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-client-console</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-client-console</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n "},{"sha":"3cddab054b07ce819091c400a30a5457526cd745","filename":"docker/core/pom.xml","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/docker%2Fcore%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/docker%2Fcore%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -104,13 +104,13 @@ under the License.\n     </dependency>\n     \n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-rest-cxf</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-rest-cxf</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-persistence-jpa</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-persistence-jpa</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     \n@@ -317,9 +317,9 @@ under the License.\n         <filtering>true</filtering>\n       </resource>\n       <resource>\n-        <directory>${project.basedir}/../../ext/saml2sp/logic/src/main/resources</directory>\n+        <directory>${project.basedir}/../../ext/saml2sp4ui/logic/src/main/resources</directory>\n         <includes>\n-          <include>saml2sp-logic.properties</include>\n+          <include>saml2sp4ui-logic.properties</include>\n         </includes>\n         <filtering>true</filtering>\n       </resource>"},{"sha":"6b31697ec2025608349e168a62c49002ac4ae793","filename":"docker/enduser/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/docker%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/docker%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fenduser%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -67,8 +67,8 @@ under the License.\n     </dependency>\n \n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-client-enduser</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-client-enduser</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n "},{"sha":"3362a8b156fe7bfeda65b75f0368bcd70af59d26","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/pages/CamelRoutes.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRoutes.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -22,13 +22,13 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n import org.apache.syncope.client.console.rest.CamelRoutesRestClient;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CamelEntitlement;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.syncope.client.console.panels.CamelRoutesDirectoryPanel;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.panel.Panel;"},{"sha":"8d3d90f127527ba0f9352f462498ab42e2a2e4a0","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FFlowable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FFlowable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FFlowable.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.client.console.pages;\n \n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n import org.apache.syncope.client.console.panels.BpmnProcessDirectoryPanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.syncope.common.lib.types.FlowableEntitlement;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;"},{"sha":"6272a554c3f30b10fa217a6f4b4597e58a71c333","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/BpmnProcessGETResource.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FBpmnProcessGETResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FBpmnProcessGETResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FBpmnProcessGETResource.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -21,10 +21,9 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.client.console.annotations.Resource;\n import org.apache.syncope.client.console.rest.BpmnProcessRestClient;\n+import org.apache.syncope.client.ui.commons.annotations.Resource;\n import org.apache.syncope.common.lib.to.BpmnProcess;\n-import org.apache.wicket.util.io.IOUtils;\n \n /**\n  * Mirror REST resource for obtaining BPMN process in JSON (used by Flowable Modeler).\n@@ -46,8 +45,9 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n \n             @Override\n             public void writeData(final Attributes attributes) throws IOException {\n-                IOUtils.copy(BpmnProcessRestClient.getDefinition(MediaType.APPLICATION_JSON_TYPE, toGet.getKey()),\n-                        attributes.getResponse().getOutputStream());\n+                writeStream(\n+                        attributes,\n+                        BpmnProcessRestClient.getDefinition(MediaType.APPLICATION_JSON_TYPE, toGet.getKey()));\n             }\n         });\n "},{"sha":"ebdaf8c8f98bbe39fb5019c0ad6fd1bf8fbd82c2","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/BpmnProcessPUTResource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FBpmnProcessPUTResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FBpmnProcessPUTResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FBpmnProcessPUTResource.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,8 +23,8 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.cxf.common.util.UrlUtils;\n-import org.apache.syncope.client.console.annotations.Resource;\n import org.apache.syncope.client.console.rest.BpmnProcessRestClient;\n+import org.apache.syncope.client.ui.commons.annotations.Resource;\n import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.wicket.util.io.IOUtils;\n "},{"sha":"3e801dc90d09b0fd172f909e9ba0c35124709161","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/pages/Flowable.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,12 +23,12 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n-import org.apache.syncope.client.enduser.annotations.ExtPage;\n import org.apache.syncope.client.enduser.markup.html.form.BpmnProcessesAjaxPanel;\n import org.apache.syncope.client.enduser.rest.BpmnProcessRestClient;\n import org.apache.syncope.client.enduser.rest.UserRequestRestClient;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.BpmnProcess;\n@@ -55,7 +55,7 @@\n import org.apache.wicket.model.StringResourceModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n-@ExtPage(label = \"User Requests\")\n+@ExtPage(label = \"User Requests\", icon = \"\", listEntitlement = \"\")\n public class Flowable extends BaseExtPage {\n \n     private static final long serialVersionUID = -8781434495150074529L;"},{"sha":"7ad61681c5edb9b341ebf9c996b12e9185fdf1f0","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/CodeConsumer.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FCodeConsumer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FCodeConsumer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FCodeConsumer.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -28,9 +28,9 @@\n import javax.servlet.http.HttpServletResponse;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.OIDCConstants;\n import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.service.OIDCClientService;\n import org.springframework.context.ApplicationContext;\n \n@@ -78,10 +78,11 @@ protected void doGet(final HttpServletRequest request, final HttpServletResponse\n                         authorizationCode,\n                         request.getSession().getAttribute(OIDCConstants.OP).toString());\n                 if (responseTO.isSelfReg()) {\n-                    responseTO.getAttrs().add(new Attr.Builder(\"username\").values(responseTO.getUsername()).build());\n+                    UserTO newUser = new UserTO();\n+                    newUser.setUsername(responseTO.getUsername());\n+                    newUser.getPlainAttrs().addAll(responseTO.getAttrs());\n                     request.getSession(true).\n-                            setAttribute(Constants.OIDCCLIENT_USER_ATTRS, MAPPER.writeValueAsString(responseTO.\n-                                    getAttrs()));\n+                            setAttribute(Constants.OIDCC4UI_NEW_USER, MAPPER.writeValueAsString(newUser));\n \n                     String selfRegRedirectURL =\n                             getServletContext().getInitParameter(Constants.CONTEXT_PARAM_REDIRECT_SELFREG_URL);"},{"sha":"e6c12f44cfb731e23d46ac0b015892a8eed7c059","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/Constants.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FConstants.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -20,6 +20,8 @@\n \n public final class Constants {\n \n+    public static final String URL_CONTEXT = \"oidcc4ui\";\n+\n     public static final String PARAM_OP = \"op\";\n \n     public static final String CONTEXT_PARAM_LOGIN_SUCCESS_URL = \"oidcclient.login.success.url\";\n@@ -36,7 +38,7 @@ public final class Constants {\n \n     public static final String OIDCCLIENTJWT_EXPIRE = \"oidcclient.jwt.expire\";\n \n-    public static final String OIDCCLIENT_USER_ATTRS = \"oidcclient.userattrs\";\n+    public static final String OIDCC4UI_NEW_USER = \"oidcc4ui.newUser\";\n \n     private Constants() {\n         // private constructor for static utility class"},{"sha":"237929239b018494b5b8f8d3f460e011f80479a3","filename":"ext/oidcclient/agent/src/main/resources/META-INF/web-fragment.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -19,8 +19,8 @@ under the License.\n -->\n <web-fragment xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n               xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-              xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee \n-                                  http://xmlns.jcp.org/xml/ns/javaee/web-fragment_3_1.xsd\"\n-              id=\"${pom.artifactId}\" version=\"3.1\">\n+              xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n+                                  http://xmlns.jcp.org/xml/ns/javaee/web-fragment_4_0.xsd\"\n+              id=\"${pom.artifactId}\" version=\"4.0\">\n \n-</web-fragment>\n+</web-fragment>\n\\ No newline at end of file"},{"sha":"18b65bd6a5a7884348284627a3431427e9e0f757","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/pages/OIDCClient.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -22,8 +22,8 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n import org.apache.syncope.client.console.panels.OIDCProvidersDirectoryPanel;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.syncope.common.lib.types.OIDCClientEntitlement;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n@@ -65,5 +65,4 @@ public Panel getPanel(final String panelId) {\n \n         return tabs;\n     }\n-\n }"},{"sha":"dbccdd5d6ee0e137a7b3a90d5ba68cbf158f98bb","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -31,9 +31,9 @@\n import org.apache.syncope.client.console.panels.OIDCProvidersDirectoryPanel;\n import org.apache.syncope.client.console.rest.ImplementationRestClient;\n import org.apache.syncope.client.console.rest.OIDCProviderRestClient;\n-import org.apache.syncope.client.console.wizards.resources.ItemTransformersTogglePanel;\n-import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n-import org.apache.syncope.client.console.wizards.resources.OIDCProviderMappingPanel;\n+import org.apache.syncope.client.console.wizards.mapping.ItemTransformersTogglePanel;\n+import org.apache.syncope.client.console.wizards.mapping.JEXLTransformersTogglePanel;\n+import org.apache.syncope.client.console.wizards.mapping.OIDCProviderMappingPanel;\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;"},{"sha":"db9632da3a1205acf8c024f2c1918d737e0ce3ff","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/wizards/mapping/OIDCProviderMappingPanel.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FOIDCProviderMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FOIDCProviderMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FOIDCProviderMappingPanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.wizards.resources;\n+package org.apache.syncope.client.console.wizards.mapping;\n \n import java.util.ArrayList;\n import java.util.Collections;","previous_filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/wizards/resources/OIDCProviderMappingPanel.java"},{"sha":"babf60d46d7a49385870262566cf0fd26877ccb2","filename":"ext/oidcclient/client-enduser/src/main/java/org/apache/syncope/client/enduser/pages/OIDCClientSelfReg.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Foidcclient%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FOIDCClientSelfReg.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Foidcclient%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FOIDCClientSelfReg.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FOIDCClientSelfReg.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -31,19 +31,19 @@ public class OIDCClientSelfReg extends WebPage {\n \n     private static final long serialVersionUID = -2533879075075645461L;\n \n-    private static final String OIDC_ACCESS_ERROR = \"OpenID Connect error - while getting user attributes\";\n-\n     public OIDCClientSelfReg(final PageParameters parameters) {\n         super(parameters);\n \n         PageParameters params = new PageParameters();\n         try {\n-            params.add(\"oidcClientUserAttrs\", ((ServletWebRequest) getRequest()).getContainerRequest().\n-                    getSession().getAttribute(Constants.OIDCCLIENT_USER_ATTRS));\n+            params.add(\n+                    Self.NEW_USER_PARAM,\n+                    ((ServletWebRequest) getRequest()).getContainerRequest().\n+                            getSession().getAttribute(Constants.OIDCC4UI_NEW_USER));\n         } catch (Exception e) {\n-            LOG.error(\"While extracting user attributes\", e);\n+            LOG.error(\"While getting user data from social registration\", e);\n \n-            params.add(\"errorMessage\", OIDC_ACCESS_ERROR);\n+            params.add(\"errorMessage\", \"OpenID Connect error - while getting user data from social registration\");\n         }\n         setResponsePage(Self.class, params);\n     }"},{"sha":"be9e73f7904772d354344f3a5b963150d09da91b","filename":"ext/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -79,7 +79,7 @@ under the License.\n   <modules>\n     <module>flowable</module>\n     <module>camel</module>\n-    <module>saml2sp</module>\n+    <module>saml2sp4ui</module>\n     <module>elasticsearch</module>\n     <module>scimv2</module>\n     <module>oidcclient</module>"},{"sha":"7a3bf6d7430dd8bb2de9973f2196ea9ee1b3bf7c","filename":"ext/saml2sp/agent/pom.xml","status":"removed","additions":0,"deletions":136,"changes":136,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fpom.xml?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,136 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-saml2sp</artifactId>\n-    <version>3.0.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <name>Apache Syncope Ext: SAML2 SP Agent</name>\n-  <description>Apache Syncope Ext: SAML2 SP Agent</description>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-agent</artifactId>\n-  <packaging>jar</packaging>\n-  \n-  <properties>\n-    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n-  </properties>\n-\n-  <dependencies>\n-    <dependency> \n-      <groupId>javax.servlet</groupId> \n-      <artifactId>javax.servlet-api</artifactId> \n-    </dependency>\n-    <dependency>\n-      <groupId>javax.servlet.jsp</groupId>\n-      <artifactId>javax.servlet.jsp-api</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.taglibs</groupId>\n-      <artifactId>taglibs-standard-impl</artifactId>\n-      <scope>provided</scope>\n-    </dependency>\n-\n-    <dependency>\n-      <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot</artifactId>\n-    </dependency>\n-\n-    <dependency>\n-      <groupId>commons-io</groupId>\n-      <artifactId>commons-io</artifactId>\n-    </dependency>\n-\n-    <dependency>\n-      <groupId>org.apache.syncope.common.keymaster</groupId>\n-      <artifactId>syncope-common-keymaster-client-api</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.client.idrepo</groupId>\n-      <artifactId>syncope-client-idrepo-lib</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-rest-api</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-  </dependencies>\n-  \n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-      </plugin>\n-    </plugins>\n-    \n-    <resources>\n-      <resource>\n-        <directory>src/main/resources</directory>\n-        <filtering>true</filtering>\n-      </resource>\n-      \n-      <resource>\n-        <directory>${basedir}</directory>\n-        <targetPath>META-INF</targetPath>\n-        <includes>\n-          <include>LICENSE</include>\n-          <include>NOTICE</include>\n-        </includes>\n-      </resource>\n-    </resources>\n-  </build>\n-  \n-  <profiles>\n-    <profile>\n-      <id>apache-release</id>\n-\n-      <build>\n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-source-plugin</artifactId>\n-            <inherited>false</inherited>\n-            <executions>\n-              <execution>\n-                <id>attach-sources</id>\n-                <goals>\n-                  <goal>jar-no-fork</goal>\n-                </goals>\n-                <configuration>\n-                  <includes>\n-                    <include>${basedir}/LICENSE</include>\n-                    <include>${basedir}/NOTICE</include>\n-                  </includes>\n-                </configuration>\n-              </execution>\n-            </executions>\n-          </plugin>\n-        </plugins>\n-      </build>\n-    </profile>\n-  </profiles>\n-</project>"},{"sha":"46e79e2b06f745dbc08b4d0df544bf9c22867464","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/AbstractSAML2SPServlet.java","status":"removed","additions":0,"deletions":157,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,157 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.saml2lsp.agent;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.net.URLDecoder;\n-import java.nio.charset.StandardCharsets;\n-import javax.servlet.ServletContext;\n-import javax.servlet.http.HttpServlet;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.MultivaluedMap;\n-import javax.ws.rs.core.UriBuilder;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.cxf.helpers.IOUtils;\n-import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n-import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n-import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n-import org.apache.syncope.common.lib.SSOConstants;\n-import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n-import org.apache.syncope.common.lib.to.SAML2RequestTO;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.ApplicationContext;\n-\n-public abstract class AbstractSAML2SPServlet extends HttpServlet {\n-\n-    private static final long serialVersionUID = 7969539245875799817L;\n-\n-    protected static final Logger LOG = LoggerFactory.getLogger(AbstractSAML2SPServlet.class);\n-\n-    private static final String SYNCOPE_CLIENT_FACTORY = \"SyncopeClientFactory\";\n-\n-    private static final String SYNCOPE_ANONYMOUS_CLIENT = \"SyncopeAnonymousClient\";\n-\n-    private final ApplicationContext ctx;\n-\n-    public AbstractSAML2SPServlet(final ApplicationContext ctx) {\n-        super();\n-        this.ctx = ctx;\n-    }\n-\n-    protected SyncopeClientFactoryBean getClientFactory(\n-            final ServletContext servletContext,\n-            final boolean useGZIPCompression) {\n-\n-        SyncopeClientFactoryBean clientFactory =\n-                (SyncopeClientFactoryBean) servletContext.getAttribute(SYNCOPE_CLIENT_FACTORY);\n-        if (clientFactory == null) {\n-            ServiceOps serviceOps = ctx.getBean(ServiceOps.class);\n-            clientFactory = new SyncopeClientFactoryBean().\n-                    setAddress(serviceOps.get(NetworkService.Type.CORE).getAddress()).\n-                    setUseCompression(useGZIPCompression);\n-\n-            servletContext.setAttribute(SYNCOPE_CLIENT_FACTORY, clientFactory);\n-        }\n-\n-        return clientFactory;\n-    }\n-\n-    protected SyncopeClient getAnonymousClient(\n-            final ServletContext servletContext,\n-            final String anonymousUser,\n-            final String anonymousKey,\n-            final boolean useGZIPCompression) {\n-\n-        SyncopeClient anonymousClient = (SyncopeClient) servletContext.getAttribute(SYNCOPE_ANONYMOUS_CLIENT);\n-        if (anonymousClient == null) {\n-            SyncopeClientFactoryBean clientFactory = getClientFactory(servletContext, useGZIPCompression);\n-            anonymousClient = clientFactory.create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey));\n-\n-            servletContext.setAttribute(SYNCOPE_ANONYMOUS_CLIENT, anonymousClient);\n-        }\n-\n-        return anonymousClient;\n-    }\n-\n-    protected void prepare(final HttpServletResponse response, final SAML2RequestTO requestTO) throws IOException {\n-        response.setHeader(HttpHeaders.CACHE_CONTROL, \"no-cache, no-store\");\n-        response.setHeader(\"Pragma\", \"no-cache\");\n-        switch (requestTO.getBindingType()) {\n-            case REDIRECT:\n-                UriBuilder ub = UriBuilder.fromUri(requestTO.getIdpServiceAddress());\n-                ub.queryParam(SSOConstants.SAML_REQUEST, requestTO.getContent());\n-                ub.queryParam(SSOConstants.RELAY_STATE, requestTO.getRelayState());\n-                ub.queryParam(SSOConstants.SIG_ALG, requestTO.getSignAlg());\n-                ub.queryParam(SSOConstants.SIGNATURE, requestTO.getSignature());\n-\n-                response.setStatus(HttpServletResponse.SC_SEE_OTHER);\n-                response.setHeader(HttpHeaders.LOCATION, ub.build().toASCIIString());\n-                break;\n-\n-            case POST:\n-            default:\n-                response.setContentType(MediaType.TEXT_HTML);\n-                response.getWriter().write(\"\"\n-                        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\"\n-                        + \" <body onLoad=\\\"document.forms[0].submit();\\\">\"\n-                        + \"  <form action=\\\"\" + requestTO.getIdpServiceAddress() + \"\\\" method=\\\"POST\\\">\"\n-                        + \"   <input type=\\\"hidden\\\" name=\\\"\" + SSOConstants.SAML_REQUEST + '\"'\n-                        + \"          value=\\\"\" + requestTO.getContent() + \"\\\"/>\"\n-                        + \"   <input type=\\\"hidden\\\" name=\\\"\" + SSOConstants.RELAY_STATE + '\"'\n-                        + \"          value=\\\"\" + requestTO.getRelayState() + \"\\\"/>\"\n-                        + \"   <input type=\\\"submit\\\" style=\\\"visibility: hidden;\\\"/>\"\n-                        + \"  </form>\"\n-                        + \" </body>\"\n-                        + \"</html>\");\n-        }\n-    }\n-\n-    protected SAML2ReceivedResponseTO extract(\n-            final String spEntityID,\n-            final String urlContext,\n-            final String clientAddress,\n-            final InputStream response) throws IOException {\n-\n-        String strForm = IOUtils.toString(response);\n-        MultivaluedMap<String, String> params = JAXRSUtils.getStructuredParams(strForm, \"&\", false, false);\n-\n-        String samlResponse = params.getFirst(SSOConstants.SAML_RESPONSE);\n-        if (StringUtils.isNotBlank(samlResponse)) {\n-            samlResponse = URLDecoder.decode(samlResponse, StandardCharsets.UTF_8);\n-            LOG.debug(\"Received SAML Response: {}\", samlResponse);\n-        }\n-\n-        String relayState = params.getFirst(SSOConstants.RELAY_STATE);\n-        LOG.debug(\"Received Relay State: {}\", relayState);\n-\n-        SAML2ReceivedResponseTO receivedResponseTO = new SAML2ReceivedResponseTO();\n-        receivedResponseTO.setSpEntityID(spEntityID);\n-        receivedResponseTO.setUrlContext(urlContext);\n-        receivedResponseTO.setSamlResponse(samlResponse);\n-        receivedResponseTO.setRelayState(relayState);\n-        return receivedResponseTO;\n-    }\n-}"},{"sha":"a32aa59efaac451863b8695884c0b7241e7d9598","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/AssertionConsumer.java","status":"removed","additions":0,"deletions":117,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,117 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.saml2lsp.agent;\n-\n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import java.io.IOException;\n-import java.net.URLEncoder;\n-import java.nio.charset.StandardCharsets;\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.Attr;\n-import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n-import org.apache.syncope.common.rest.api.service.SAML2SPService;\n-import org.springframework.context.ApplicationContext;\n-\n-public class AssertionConsumer extends AbstractSAML2SPServlet {\n-\n-    private static final long serialVersionUID = 968480296813639041L;\n-\n-    private static final ObjectMapper MAPPER =\n-            new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n-\n-    private final String anonymousUser;\n-\n-    private final String anonymousKey;\n-\n-    private final boolean useGZIPCompression;\n-\n-    public AssertionConsumer(\n-            final ApplicationContext ctx,\n-            final String anonymousUser,\n-            final String anonymousKey,\n-            final boolean useGZIPCompression) {\n-\n-        super(ctx);\n-        this.anonymousUser = anonymousUser;\n-        this.anonymousKey = anonymousKey;\n-        this.useGZIPCompression = useGZIPCompression;\n-    }\n-\n-    @Override\n-    protected void doPost(final HttpServletRequest request, final HttpServletResponse response)\n-            throws ServletException, IOException {\n-\n-        SyncopeClient anonymous =\n-                getAnonymousClient(request.getServletContext(), anonymousUser, anonymousKey, useGZIPCompression);\n-        try {\n-            SAML2LoginResponseTO responseTO = anonymous.getService(SAML2SPService.class).\n-                    validateLoginResponse(extract(\n-                            StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"),\n-                            \"saml2sp\",\n-                            request.getRemoteAddr(),\n-                            request.getInputStream()));\n-\n-            if (responseTO.isSelfReg()) {\n-                responseTO.getAttrs().add(new Attr.Builder(\"username\").values(responseTO.getUsername()).build());\n-                request.getSession(true).\n-                        setAttribute(Constants.SAML2SP_USER_ATTRS, MAPPER.writeValueAsString(responseTO.getAttrs()));\n-\n-                String selfRegRedirectURL =\n-                        getServletContext().getInitParameter(Constants.CONTEXT_PARAM_REDIRECT_SELFREG_URL);\n-                if (selfRegRedirectURL == null) {\n-                    request.setAttribute(\"responseTO\", responseTO);\n-                    request.getRequestDispatcher(\"loginSuccess.jsp\").forward(request, response);\n-                } else {\n-                    response.sendRedirect(selfRegRedirectURL);\n-                }\n-            } else {\n-                request.getSession(true).\n-                        setAttribute(Constants.SAML2SPJWT, responseTO.getAccessToken());\n-                request.getSession(true).\n-                        setAttribute(Constants.SAML2SPJWT_EXPIRE, responseTO.getAccessTokenExpiryTime());\n-\n-                String successURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGIN_SUCCESS_URL);\n-                if (successURL == null) {\n-                    request.setAttribute(\"responseTO\", responseTO);\n-                    request.getRequestDispatcher(\"loginSuccess.jsp\").forward(request, response);\n-                } else {\n-                    response.sendRedirect(successURL + \"?sloSupported=\" + responseTO.isSloSupported());\n-                }\n-            }\n-        } catch (Exception e) {\n-            LOG.error(\"While processing authentication response from IdP\", e);\n-\n-            String errorURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGIN_ERROR_URL);\n-            if (errorURL == null) {\n-                request.setAttribute(\"exception\", e);\n-                request.getRequestDispatcher(\"loginError.jsp\").forward(request, response);\n-\n-                e.printStackTrace(response.getWriter());\n-            } else {\n-                response.sendRedirect(errorURL + \"?errorMessage=\"\n-                        + URLEncoder.encode(e.getMessage(), StandardCharsets.UTF_8));\n-            }\n-        }\n-    }\n-}"},{"sha":"0efbf095b7c7e2f4c9dafbaf43ea477ec1a3cc34","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Constants.java","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FConstants.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,44 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.saml2lsp.agent;\n-\n-public final class Constants {\n-\n-    public static final String PARAM_IDP = \"idp\";\n-\n-    public static final String CONTEXT_PARAM_LOGIN_SUCCESS_URL = \"saml2sp.login.success.url\";\n-\n-    public static final String CONTEXT_PARAM_LOGIN_ERROR_URL = \"saml2sp.login.error.url\";\n-\n-    public static final String CONTEXT_PARAM_LOGOUT_SUCCESS_URL = \"saml2sp.logout.success.url\";\n-\n-    public static final String CONTEXT_PARAM_LOGOUT_ERROR_URL = \"saml2sp.logout.error.url\";\n-\n-    public static final String CONTEXT_PARAM_REDIRECT_SELFREG_URL = \"saml2sp.redirect.selfreg\";\n-\n-    public static final String SAML2SPJWT = \"saml2sp.jwt\";\n-\n-    public static final String SAML2SPJWT_EXPIRE = \"saml2sp.jwt.expire\";\n-\n-    public static final String SAML2SP_USER_ATTRS = \"saml2sp.userattrs\";\n-\n-    private Constants() {\n-        // private constructor for static utility class\n-    }\n-}"},{"sha":"537c48e6ede189f29a77f3833d44e341d3b6ee2e","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Login.java","status":"removed","additions":0,"deletions":83,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,83 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.saml2lsp.agent;\n-\n-import java.io.IOException;\n-import java.net.URLEncoder;\n-import java.nio.charset.StandardCharsets;\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.to.SAML2RequestTO;\n-import org.apache.syncope.common.rest.api.service.SAML2SPService;\n-import org.springframework.context.ApplicationContext;\n-\n-public class Login extends AbstractSAML2SPServlet {\n-\n-    private static final long serialVersionUID = 968480296813639041L;\n-\n-    private final String anonymousUser;\n-\n-    private final String anonymousKey;\n-\n-    private final boolean useGZIPCompression;\n-\n-    public Login(\n-            final ApplicationContext ctx,\n-            final String anonymousUser,\n-            final String anonymousKey,\n-            final boolean useGZIPCompression) {\n-\n-        super(ctx);\n-        this.anonymousUser = anonymousUser;\n-        this.anonymousKey = anonymousKey;\n-        this.useGZIPCompression = useGZIPCompression;\n-    }\n-\n-    @Override\n-    protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n-            throws ServletException, IOException {\n-\n-        String idp = request.getParameter(Constants.PARAM_IDP);\n-\n-        SyncopeClient anonymous =\n-                getAnonymousClient(request.getServletContext(), anonymousUser, anonymousKey, useGZIPCompression);\n-        try {\n-            SAML2RequestTO requestTO = anonymous.getService(SAML2SPService.class).createLoginRequest(\n-                    StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"), idp);\n-\n-            prepare(response, requestTO);\n-        } catch (Exception e) {\n-            LOG.error(\"While preparing authentication request to IdP\", e);\n-\n-            String errorURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGIN_ERROR_URL);\n-            if (errorURL == null) {\n-                request.setAttribute(\"exception\", e);\n-                request.getRequestDispatcher(\"loginError.jsp\").forward(request, response);\n-\n-                e.printStackTrace(response.getWriter());\n-            } else {\n-                response.sendRedirect(errorURL + \"?errorMessage=\"\n-                        + URLEncoder.encode(e.getMessage(), StandardCharsets.UTF_8));\n-            }\n-        }\n-    }\n-}"},{"sha":"e381c358e786bcab4cd3b118663194d9cee28d63","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Logout.java","status":"removed","additions":0,"deletions":143,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,143 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.saml2lsp.agent;\n-\n-import java.io.IOException;\n-import java.net.URLEncoder;\n-import java.nio.charset.StandardCharsets;\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.SSOConstants;\n-import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n-import org.apache.syncope.common.lib.to.SAML2RequestTO;\n-import org.apache.syncope.common.rest.api.service.SAML2SPService;\n-import org.springframework.context.ApplicationContext;\n-\n-public class Logout extends AbstractSAML2SPServlet {\n-\n-    private static final long serialVersionUID = 3010286040376932117L;\n-\n-    private final boolean useGZIPCompression;\n-\n-    public Logout(\n-            final ApplicationContext ctx,\n-            final boolean useGZIPCompression) {\n-\n-        super(ctx);\n-        this.useGZIPCompression = useGZIPCompression;\n-    }\n-\n-    private void doLogout(\n-            final SAML2ReceivedResponseTO receivedResponse,\n-            final HttpServletRequest request,\n-            final HttpServletResponse response) throws ServletException, IOException {\n-\n-        SyncopeClientFactoryBean clientFactory = getClientFactory(request.getServletContext(), useGZIPCompression);\n-        try {\n-            String accessToken = (String) request.getSession().getAttribute(Constants.SAML2SPJWT);\n-            if (StringUtils.isBlank(accessToken)) {\n-                throw new IllegalArgumentException(\"No access token found \");\n-            }\n-\n-            SyncopeClient client = clientFactory.create(accessToken);\n-            client.getService(SAML2SPService.class).validateLogoutResponse(receivedResponse);\n-\n-            String successURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGOUT_SUCCESS_URL);\n-            if (successURL == null) {\n-                request.getRequestDispatcher(\"logoutSuccess.jsp\").forward(request, response);\n-            } else {\n-                response.sendRedirect(successURL);\n-            }\n-            request.getSession().removeAttribute(Constants.SAML2SPJWT);\n-        } catch (Exception e) {\n-            LOG.error(\"While processing authentication response from IdP\", e);\n-\n-            String errorURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGOUT_ERROR_URL);\n-            if (errorURL == null) {\n-                request.setAttribute(\"exception\", e);\n-                request.getRequestDispatcher(\"logoutError.jsp\").forward(request, response);\n-\n-                e.printStackTrace(response.getWriter());\n-            } else {\n-                response.sendRedirect(errorURL + \"?errorMessage=\"\n-                        + URLEncoder.encode(e.getMessage(), StandardCharsets.UTF_8));\n-            }\n-        }\n-    }\n-\n-    @Override\n-    protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n-            throws ServletException, IOException {\n-\n-        String samlResponse = request.getParameter(SSOConstants.SAML_RESPONSE);\n-        String relayState = request.getParameter(SSOConstants.RELAY_STATE);\n-        if (samlResponse == null) { // prepare logout response\n-            SyncopeClientFactoryBean clientFactory = getClientFactory(request.getServletContext(), useGZIPCompression);\n-            try {\n-                String accessToken = (String) request.getSession().getAttribute(Constants.SAML2SPJWT);\n-                if (StringUtils.isBlank(accessToken)) {\n-                    throw new IllegalArgumentException(\"No access token found \");\n-                }\n-\n-                SyncopeClient client = clientFactory.create(accessToken);\n-                SAML2RequestTO requestTO = client.getService(SAML2SPService.class).createLogoutRequest(\n-                        StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"));\n-\n-                prepare(response, requestTO);\n-            } catch (Exception e) {\n-                LOG.error(\"While preparing logout request to IdP\", e);\n-\n-                String errorURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGOUT_ERROR_URL);\n-                if (errorURL == null) {\n-                    request.setAttribute(\"exception\", e);\n-                    request.getRequestDispatcher(\"logoutError.jsp\").forward(request, response);\n-\n-                    e.printStackTrace(response.getWriter());\n-                } else {\n-                    response.sendRedirect(errorURL + \"?errorMessage=\"\n-                            + URLEncoder.encode(e.getMessage(), StandardCharsets.UTF_8));\n-                }\n-            }\n-        } else { // process REDIRECT binding logout response\n-            SAML2ReceivedResponseTO receivedResponse = new SAML2ReceivedResponseTO();\n-            receivedResponse.setSamlResponse(samlResponse);\n-            receivedResponse.setRelayState(relayState);\n-\n-            doLogout(receivedResponse, request, response);\n-        }\n-    }\n-\n-    @Override\n-    protected void doPost(final HttpServletRequest request, final HttpServletResponse response)\n-            throws ServletException, IOException {\n-\n-        // process POST binding logout response\n-        SAML2ReceivedResponseTO receivedResponse = extract(\n-                StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"),\n-                \"saml2sp\",\n-                request.getRemoteAddr(),\n-                request.getInputStream());\n-        doLogout(receivedResponse, request, response);\n-    }\n-\n-}"},{"sha":"5648ba2b6f90179ae4245c48ea214c2800c008b7","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Metadata.java","status":"removed","additions":0,"deletions":76,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FMetadata.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,76 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.saml2lsp.agent;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.commons.io.IOUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.cxf.jaxrs.client.WebClient;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.rest.api.service.SAML2SPService;\n-import org.springframework.context.ApplicationContext;\n-\n-public class Metadata extends AbstractSAML2SPServlet {\n-\n-    private static final long serialVersionUID = 694030186105137875L;\n-\n-    private final String anonymousUser;\n-\n-    private final String anonymousKey;\n-\n-    private final boolean useGZIPCompression;\n-\n-    public Metadata(\n-            final ApplicationContext ctx,\n-            final String anonymousUser,\n-            final String anonymousKey,\n-            final boolean useGZIPCompression) {\n-\n-        super(ctx);\n-        this.anonymousUser = anonymousUser;\n-        this.anonymousKey = anonymousKey;\n-        this.useGZIPCompression = useGZIPCompression;\n-    }\n-\n-    @Override\n-    protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n-            throws ServletException, IOException {\n-\n-        SyncopeClient anonymous =\n-                getAnonymousClient(request.getServletContext(), anonymousUser, anonymousKey, useGZIPCompression);\n-        SAML2SPService service = anonymous.getService(SAML2SPService.class);\n-        WebClient.client(service).accept(MediaType.APPLICATION_XML_TYPE).type(MediaType.APPLICATION_XML_TYPE);\n-        try {\n-            Response metadataResponse = service.getMetadata(\n-                    StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"), \"saml2sp\");\n-\n-            response.setContentType(metadataResponse.getMediaType().toString());\n-            IOUtils.copy((InputStream) metadataResponse.getEntity(), response.getOutputStream());\n-            ((InputStream) metadataResponse.getEntity()).close();\n-        } catch (Exception e) {\n-            throw new ServletException(e.getMessage());\n-        }\n-    }\n-}"},{"sha":"f39f76d1ee58aaa6af42af0a7d3ae41b9a60221e","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/SAML2SPAgentContext.java","status":"removed","additions":0,"deletions":76,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentContext.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,76 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.saml2lsp.agent;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.boot.web.servlet.ServletRegistrationBean;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.PropertySource;\n-\n-@PropertySource(\"classpath:saml2sp-agent.properties\")\n-@PropertySource(value = \"file:${conf.directory}/saml2sp-agent.properties\", ignoreResourceNotFound = true)\n-@Configuration\n-public class SAML2SPAgentContext {\n-\n-    @Value(\"${anonymousUser}\")\n-    private String anonymousUser;\n-\n-    @Value(\"${anonymousKey}\")\n-    private String anonymousKey;\n-\n-    @Value(\"${useGZIPCompression}\")\n-    private boolean useGZIPCompression;\n-\n-    @Autowired\n-    private ApplicationContext ctx;\n-\n-    @Bean\n-    public ServletRegistrationBean<Metadata> saml2SPMetadata() {\n-        return new ServletRegistrationBean<>(\n-                new Metadata(ctx, anonymousUser, anonymousKey, useGZIPCompression), \"/saml2sp/metadata\");\n-    }\n-\n-    @Bean\n-    public ServletRegistrationBean<Login> saml2SPLogin() {\n-        ServletRegistrationBean<Login> bean = new ServletRegistrationBean<>(\n-                new Login(ctx, anonymousUser, anonymousKey, useGZIPCompression), \"/saml2sp/login\");\n-        bean.setName(\"saml2SPLogin\");\n-        return bean;\n-    }\n-\n-    @Bean\n-    public ServletRegistrationBean<AssertionConsumer> saml2SPAssertionConsumer() {\n-        ServletRegistrationBean<AssertionConsumer> bean = new ServletRegistrationBean<>(\n-                new AssertionConsumer(ctx, anonymousUser, anonymousKey, useGZIPCompression),\n-                \"/saml2sp/assertion-consumer\");\n-        bean.setName(\"saml2SPAssertionConsumer\");\n-        return bean;\n-    }\n-\n-    @Bean\n-    public ServletRegistrationBean<Logout> saml2SPLogout() {\n-        ServletRegistrationBean<Logout> bean =\n-                new ServletRegistrationBean<>(new Logout(ctx, useGZIPCompression), \"/saml2sp/logout\");\n-        bean.setName(\"saml2SPLogout\");\n-        return bean;\n-    }\n-}"},{"sha":"a99747938c673720387d3fc80be283b85ebcc8fb","filename":"ext/saml2sp/agent/src/main/resources/META-INF/resources/saml2sp/loginError.jsp","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FloginError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FloginError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FloginError.jsp?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,35 +0,0 @@\n-<%--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n---%>\n-<%@page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n-<%\n-    Exception exception = (Exception) request.getAttribute(\"exception\");\n-%>\n-<html>\n-  <head>\n-    <title>Apache Syncope ${syncope.version} - SAML 2.0 SP - Login Error</title>\n-  </head>\n-  <body>\n-    <h1>An error was found</h1>\n-\n-    <h2><%=exception.getMessage()%></h2>\n-    <pre>\n-      <%exception.printStackTrace(new java.io.PrintWriter(out));%>\n-    </pre>\n-  </body>\n-</html>\n\\ No newline at end of file"},{"sha":"3043b9d91f23722eefb37ddf7b317655e31fbe8f","filename":"ext/saml2sp/agent/src/main/resources/META-INF/resources/saml2sp/loginSuccess.jsp","status":"removed","additions":0,"deletions":48,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FloginSuccess.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FloginSuccess.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FloginSuccess.jsp?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,48 +0,0 @@\n-<%--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n---%>\n-<%@page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n-<%@page import=\"org.apache.syncope.common.lib.to.SAML2LoginResponseTO\"%>\n-<%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n-<c:set var=\"responseTO\" value=\"${requestScope['responseTO']}\"/>\n-<html>\n-  <head>\n-    <title>Apache Syncope ${syncope.version} - SAML 2.0 SP - Successful Login</title>\n-  </head>\n-  <body>\n-    <h1>Welcome ${responseTO.username}</h1>\n-\n-    <p>You have been successfully authenticated by the requested SAML 2.0 IdP with\n-      <code>NameID ${responseTO.nameID}</code> and <code>SessionIndex ${responseTO.sessionIndex}</code>.</p>\n-    \n-    <p>Your current session is valid:</p>\n-    <ul>\n-      <li>not before ${responseTO.authInstant}</li>\n-      <li>not on or after ${responseTO.notOnOrAfter}</li>\n-    </ul>\n-\n-    <p>The following attributes are available:</p>\n-    <ul>\n-      <c:forEach items=\"${responseTO.attrs}\" var=\"attr\">\n-        <li>\n-          <b>${attr.schema}</b><br/>${attr.values}\n-        </li>\n-      </c:forEach>\n-    </ul>\n-  </body>\n-</html>"},{"sha":"d40e5d4cd4165a0aa0aaaa7a70ef7a007b1fa467","filename":"ext/saml2sp/agent/src/main/resources/META-INF/resources/saml2sp/logoutError.jsp","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FlogoutError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FlogoutError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FlogoutError.jsp?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,35 +0,0 @@\n-<%--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n---%>\n-<%@page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n-<%\n-    Exception exception = (Exception) request.getAttribute(\"exception\");\n-%>\n-<html>\n-  <head>\n-    <title>Apache Syncope ${syncope.version} - SAML 2.0 SP - Logout Error</title>\n-  </head>\n-  <body>\n-    <h1>An error was found</h1>\n-\n-    <h2><%=exception.getMessage()%></h2>\n-    <pre>\n-      <%exception.printStackTrace(new java.io.PrintWriter(out));%>\n-    </pre>\n-  </body>\n-</html>\n\\ No newline at end of file"},{"sha":"2e81d48605813de4c213d26c611ea66820be53c1","filename":"ext/saml2sp/agent/src/main/resources/META-INF/resources/saml2sp/logoutSuccess.jsp","status":"removed","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FlogoutSuccess.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FlogoutSuccess.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FlogoutSuccess.jsp?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,27 +0,0 @@\n-<%--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n---%>\n-<%@page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n-<html>\n-  <head>\n-    <title>Apache Syncope ${syncope.version} - SAML 2.0 SP - Successful Logout</title>\n-  </head>\n-  <body>\n-    <h1>You have been successfully logged out.</h1>\n-  </body>\n-</html>\n\\ No newline at end of file"},{"sha":"6ffdaadb5f63b457846e29178bba3e4abb5bc727","filename":"ext/saml2sp/agent/src/main/resources/META-INF/spring.factories","status":"removed","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,19 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-\n-org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n-  org.apache.syncope.ext.saml2lsp.agent.SAML2SPAgentContext"},{"sha":"fab858afd86ee0eee96398395e3b2675040ca67c","filename":"ext/saml2sp/agent/src/main/resources/META-INF/web-fragment.xml","status":"removed","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,26 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<web-fragment xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n-              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-              xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee \n-                                  http://xmlns.jcp.org/xml/ns/javaee/web-fragment_3_1.xsd\"\n-              id=\"${pom.artifactId}\" version=\"3.1\">\n-\n-</web-fragment>"},{"sha":"0eeabd16edc0fafd773fdfacd2c8528b3dc13c8e","filename":"ext/saml2sp/client-enduser/src/main/java/org/apache/syncope/client/enduser/pages/SAML2SPSelfReg.java","status":"removed","additions":0,"deletions":50,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSAML2SPSelfReg.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSAML2SPSelfReg.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSAML2SPSelfReg.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,50 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.enduser.pages;\n-\n-import org.apache.syncope.ext.saml2lsp.agent.Constants;\n-import org.apache.wicket.markup.html.WebPage;\n-import org.apache.wicket.protocol.http.servlet.ServletWebRequest;\n-import org.apache.wicket.request.mapper.parameter.PageParameters;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class SAML2SPSelfReg extends WebPage {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(SAML2SPSelfReg.class);\n-\n-    private static final long serialVersionUID = -4330637558823990359L;\n-\n-    private static final String SAML_ACCESS_ERROR = \"SAML 2.0 error - while getting user attributes\";\n-\n-    public SAML2SPSelfReg(final PageParameters parameters) {\n-        super(parameters);\n-\n-        PageParameters params = new PageParameters();\n-        try {\n-            params.add(\"saml2SPUserAttrs\", ((ServletWebRequest) getRequest()).getContainerRequest().\n-                    getSession().getAttribute(Constants.SAML2SP_USER_ATTRS));\n-        } catch (Exception e) {\n-            LOG.error(\"While extracting user attributes\", e);\n-\n-            params.add(\"errorMessage\", SAML_ACCESS_ERROR);\n-        }\n-        setResponsePage(Self.class, params);\n-    }\n-}"},{"sha":"48cbe56f6fbdf7aa54fbb758d7b19bbb18d30441","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/types/SAML2BindingType.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2BindingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2BindingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2BindingType.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,46 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-public enum SAML2BindingType {\n-    POST(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"),\n-    REDIRECT(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\");\n-\n-    private final String uri;\n-\n-    SAML2BindingType(final String uri) {\n-        this.uri = uri;\n-    }\n-\n-    public String getUri() {\n-        return uri;\n-    }\n-\n-    public static SAML2BindingType fromUri(final String uri) {\n-        SAML2BindingType bindingType = null;\n-\n-        for (SAML2BindingType value : values()) {\n-            if (value.getUri().equals(uri)) {\n-                bindingType = value;\n-            }\n-        }\n-\n-        return bindingType;\n-    }\n-}"},{"sha":"1c3633049f0072a74306f3d04def79c69c7a941f","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/types/SignatureAlgorithm.java","status":"removed","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSignatureAlgorithm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSignatureAlgorithm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSignatureAlgorithm.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,58 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-public enum SignatureAlgorithm {\n-\n-    RSA_SHA1(\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"),\n-    RSA_SHA224(\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha224\"),\n-    RSA_SHA256(\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"),\n-    RSA_SHA384(\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha384\"),\n-    RSA_SHA512(\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512\"),\n-\n-    RSA_SHA1_MGF1(\"http://www.w3.org/2007/05/xmldsig-more#sha1-rsa-MGF1\"),\n-    RSA_SHA224_MGF1(\"http://www.w3.org/2007/05/xmldsig-more#sha224-rsa-MGF1\"),\n-    RSA_SHA256_MGF1(\"http://www.w3.org/2007/05/xmldsig-more#sha256-rsa-MGF1\"),\n-    RSA_SHA384_MGF1(\"http://www.w3.org/2007/05/xmldsig-more#sha384-rsa-MGF1\"),\n-    RSA_SHA512_MGF1(\"http://www.w3.org/2007/05/xmldsig-more#sha512-rsa-MGF1\"),\n-\n-    EC_SHA1(\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1\"),\n-    EC_SHA224(\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha224\"),\n-    EC_SHA256(\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256\"),\n-    EC_SHA384(\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384\"),\n-    EC_SHA512(\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512\"),\n-\n-    HMAC_SHA1(\"http://www.w3.org/2000/09/xmldsig#hmac-sha1\"),\n-    HMAC_SHA224(\"http://www.w3.org/2001/04/xmldsig-more#hmac-sha224\"),\n-    HMAC_SHA256(\"http://www.w3.org/2001/04/xmldsig-more#hmac-sha256\"),\n-    HMAC_SHA384(\"http://www.w3.org/2001/04/xmldsig-more#hmac-sha384\"),\n-    HMAC_SHA512(\"http://www.w3.org/2001/04/xmldsig-more#hmac-sha512\"),\n-\n-    DSA_SHA1(\"http://www.w3.org/2000/09/xmldsig#dsa-sha1\");\n-\n-    private final String algorithm;\n-\n-    SignatureAlgorithm(final String algorithm) {\n-        this.algorithm = algorithm;\n-    }\n-\n-    public String getAlgorithm() {\n-        return algorithm;\n-    }\n-}"},{"sha":"221cc44aa9ca62fb7c07f3e7267433e3e90a4dca","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/AbstractSAML2Logic.java","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractSAML2Logic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractSAML2Logic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractSAML2Logic.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,35 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.core.logic.init.SAML2SPLoader;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-public abstract class AbstractSAML2Logic<T extends EntityTO> extends AbstractTransactionalLogic<T> {\n-\n-    @Autowired\n-    protected SAML2SPLoader loader;\n-\n-    protected void check() {\n-        if (!loader.isInited()) {\n-            throw new IllegalStateException(\"Keystore setup did not work properly, SAML 2.0 SP features disabled\");\n-        }\n-    }\n-}"},{"sha":"f988610a571d30263e7b7e633eec1bf46e05648a","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPLogic.java","status":"removed","additions":0,"deletions":267,"changes":267,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,267 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.OutputStreamWriter;\n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n-import java.util.Base64;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.SAML2IdPTO;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.SAML2BindingType;\n-import org.apache.syncope.common.lib.types.SAML2SPEntitlement;\n-import org.apache.syncope.core.logic.saml2.SAML2IdPCache;\n-import org.apache.syncope.core.logic.saml2.SAML2IdPEntity;\n-import org.apache.syncope.core.logic.saml2.SAML2ReaderWriter;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n-import org.apache.syncope.core.provisioning.api.data.SAML2IdPDataBinder;\n-import org.apache.wss4j.common.saml.OpenSAMLUtil;\n-import org.opensaml.saml.common.xml.SAMLConstants;\n-import org.opensaml.saml.saml2.core.NameID;\n-import org.opensaml.saml.saml2.metadata.EntitiesDescriptor;\n-import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n-import org.opensaml.saml.saml2.metadata.IDPSSODescriptor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n-import org.w3c.dom.NodeList;\n-\n-@Component\n-public class SAML2IdPLogic extends AbstractSAML2Logic<SAML2IdPTO> {\n-\n-    @Autowired\n-    private SAML2IdPCache cache;\n-\n-    @Autowired\n-    private SAML2IdPDataBinder binder;\n-\n-    @Autowired\n-    private SAML2IdPDAO idpDAO;\n-\n-    @Autowired\n-    private SAML2ReaderWriter saml2rw;\n-\n-    private SAML2IdPTO complete(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n-        SAML2IdPEntity idpEntity = cache.get(idpTO.getEntityID());\n-        if (idpEntity == null) {\n-            try {\n-                idpEntity = cache.put(idp);\n-            } catch (Exception e) {\n-                LOG.error(\"Could not build SAML 2.0 IdP with key {}\", idp.getEntityID(), e);\n-            }\n-        }\n-\n-        idpTO.setLogoutSupported(Optional.ofNullable(idpEntity)\n-            .filter(entity -> entity.getSLOLocation(SAML2BindingType.POST) != null\n-            || entity.getSLOLocation(SAML2BindingType.REDIRECT) != null).isPresent());\n-        return idpTO;\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n-    @Transactional(readOnly = true)\n-    public List<SAML2IdPTO> list() {\n-        return idpDAO.findAll().stream().map(idp -> complete(idp, binder.getIdPTO(idp))).collect(Collectors.toList());\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + SAML2SPEntitlement.IDP_READ + \"')\")\n-    @Transactional(readOnly = true)\n-    public SAML2IdPTO read(final String key) {\n-        check();\n-\n-        SAML2IdP idp = idpDAO.find(key);\n-        if (idp == null) {\n-            throw new NotFoundException(\"SAML 2.0 IdP '\" + key + '\\'');\n-        }\n-\n-        return complete(idp, binder.getIdPTO(idp));\n-    }\n-\n-    private List<SAML2IdPTO> importIdPs(final InputStream input) throws Exception {\n-        List<EntityDescriptor> idpEntityDescriptors = new ArrayList<>();\n-\n-        Element root = OpenSAMLUtil.getParserPool().parse(new InputStreamReader(input)).getDocumentElement();\n-        if (SAMLConstants.SAML20MD_NS.equals(root.getNamespaceURI())\n-                && EntityDescriptor.DEFAULT_ELEMENT_LOCAL_NAME.equals(root.getLocalName())) {\n-\n-            idpEntityDescriptors.add((EntityDescriptor) OpenSAMLUtil.fromDom(root));\n-        } else if (SAMLConstants.SAML20MD_NS.equals(root.getNamespaceURI())\n-                && EntitiesDescriptor.DEFAULT_ELEMENT_LOCAL_NAME.equals(root.getLocalName())) {\n-\n-            NodeList children = root.getChildNodes();\n-            for (int i = 0; i < children.getLength(); i++) {\n-                Node child = children.item(i);\n-                if (SAMLConstants.SAML20MD_NS.equals(child.getNamespaceURI())\n-                        && EntityDescriptor.DEFAULT_ELEMENT_LOCAL_NAME.equals(child.getLocalName())) {\n-\n-                    NodeList descendants = child.getChildNodes();\n-                    for (int j = 0; j < descendants.getLength(); j++) {\n-                        Node descendant = descendants.item(j);\n-                        if (SAMLConstants.SAML20MD_NS.equals(descendant.getNamespaceURI())\n-                                && IDPSSODescriptor.DEFAULT_ELEMENT_LOCAL_NAME.equals(descendant.getLocalName())) {\n-\n-                            idpEntityDescriptors.add((EntityDescriptor) OpenSAMLUtil.fromDom((Element) child));\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        List<SAML2IdPTO> result = new ArrayList<>(idpEntityDescriptors.size());\n-        for (EntityDescriptor idpEntityDescriptor : idpEntityDescriptors) {\n-            SAML2IdPTO idpTO = new SAML2IdPTO();\n-            idpTO.setEntityID(idpEntityDescriptor.getEntityID());\n-            idpTO.setName(idpEntityDescriptor.getEntityID());\n-            idpTO.setUseDeflateEncoding(false);\n-\n-            try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n-                SAML2ReaderWriter.write(new OutputStreamWriter(baos), idpEntityDescriptor, false);\n-                idpTO.setMetadata(Base64.getEncoder().encodeToString(baos.toByteArray()));\n-            }\n-\n-            ItemTO connObjectKeyItem = new ItemTO();\n-            connObjectKeyItem.setIntAttrName(\"username\");\n-            connObjectKeyItem.setExtAttrName(NameID.DEFAULT_ELEMENT_LOCAL_NAME);\n-            idpTO.setConnObjectKeyItem(connObjectKeyItem);\n-\n-            SAML2IdPEntity idp = cache.put(idpEntityDescriptor, idpTO);\n-            if (idp.getSSOLocation(SAML2BindingType.POST) != null) {\n-                idpTO.setBindingType(SAML2BindingType.POST);\n-            } else if (idp.getSSOLocation(SAML2BindingType.REDIRECT) != null) {\n-                idpTO.setBindingType(SAML2BindingType.REDIRECT);\n-            } else {\n-                throw new IllegalArgumentException(\"Neither POST nor REDIRECT artifacts supported by \" + idp.getId());\n-            }\n-\n-            result.add(idpTO);\n-        }\n-\n-        return result;\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + SAML2SPEntitlement.IDP_IMPORT + \"')\")\n-    public List<String> importFromMetadata(final InputStream input) {\n-        check();\n-\n-        List<String> imported = new ArrayList<>();\n-\n-        try {\n-            for (SAML2IdPTO idpTO : importIdPs(input)) {\n-                SAML2IdP idp = idpDAO.save(binder.create(idpTO));\n-                imported.add(idp.getKey());\n-            }\n-        } catch (SyncopeClientException e) {\n-            throw e;\n-        } catch (Exception e) {\n-            LOG.error(\"Unexpected error while importing IdP metadata\", e);\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidEntity);\n-            sce.getElements().add(e.getMessage());\n-            throw sce;\n-        }\n-\n-        return imported;\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + SAML2SPEntitlement.IDP_UPDATE + \"')\")\n-    public void update(final SAML2IdPTO saml2IdpTO) {\n-        check();\n-\n-        SAML2IdP saml2Idp = idpDAO.find(saml2IdpTO.getKey());\n-        if (saml2Idp == null) {\n-            throw new NotFoundException(\"SAML 2.0 IdP '\" + saml2IdpTO.getKey() + '\\'');\n-        }\n-\n-        SAML2IdPEntity idpEntity = cache.get(saml2Idp.getEntityID());\n-        if (idpEntity == null) {\n-            try {\n-                idpEntity = cache.put(saml2Idp);\n-            } catch (Exception e) {\n-                LOG.error(\"Unexpected error while updating {}\", saml2Idp.getEntityID(), e);\n-                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidEntity);\n-                sce.getElements().add(e.getMessage());\n-                throw sce;\n-            }\n-        }\n-        if (idpEntity.getSSOLocation(saml2IdpTO.getBindingType()) == null) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidEntity);\n-            sce.getElements().add(saml2IdpTO.getBindingType() + \" not supported by \" + saml2Idp.getEntityID());\n-            throw sce;\n-        }\n-\n-        saml2Idp = idpDAO.save(binder.update(saml2Idp, saml2IdpTO));\n-\n-        idpEntity.setIdpTO(binder.getIdPTO(saml2Idp));\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + SAML2SPEntitlement.IDP_DELETE + \"')\")\n-    public void delete(final String key) {\n-        check();\n-\n-        SAML2IdP idp = idpDAO.find(key);\n-        if (idp == null) {\n-            throw new NotFoundException(\"SAML 2.0 IdP '\" + key + '\\'');\n-        }\n-\n-        idpDAO.delete(key);\n-        cache.remove(idp.getEntityID());\n-    }\n-\n-    @Override\n-    protected SAML2IdPTO resolveReference(final Method method, final Object... args)\n-            throws UnresolvedReferenceException {\n-\n-        String key = null;\n-\n-        if (ArrayUtils.isNotEmpty(args)) {\n-            for (int i = 0; key == null && i < args.length; i++) {\n-                if (args[i] instanceof String) {\n-                    key = (String) args[i];\n-                } else if (args[i] instanceof SAML2IdPTO) {\n-                    key = ((SAML2IdPTO) args[i]).getKey();\n-                }\n-            }\n-        }\n-\n-        if (key != null) {\n-            try {\n-                SAML2IdP idp = idpDAO.find(key);\n-                return complete(idp, binder.getIdPTO(idp));\n-            } catch (Throwable ignore) {\n-                LOG.debug(\"Unresolved reference\", ignore);\n-                throw new UnresolvedReferenceException(ignore);\n-            }\n-        }\n-\n-        throw new UnresolvedReferenceException();\n-    }\n-\n-}"},{"sha":"cb73614f0609c66266048402a18babc4463ca012","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"removed","additions":0,"deletions":706,"changes":706,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,706 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import java.io.OutputStream;\n-import java.io.OutputStreamWriter;\n-import java.lang.reflect.Method;\n-import java.net.URLEncoder;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-import javax.annotation.Resource;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n-import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n-import org.apache.cxf.rs.security.saml.sso.SSOValidatorResponse;\n-import org.apache.syncope.common.lib.Attr;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.to.SAML2RequestTO;\n-import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n-import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.SAML2BindingType;\n-import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.syncope.core.logic.saml2.SAML2ReaderWriter;\n-import org.apache.syncope.core.logic.saml2.SAML2IdPCache;\n-import org.apache.syncope.core.logic.saml2.SAML2IdPEntity;\n-import org.apache.syncope.core.logic.saml2.SAML2UserManager;\n-import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n-import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n-import org.apache.syncope.core.provisioning.api.RequestedAuthnContextProvider;\n-import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n-import org.joda.time.DateTime;\n-import org.opensaml.core.xml.XMLObject;\n-import org.opensaml.core.xml.schema.XSString;\n-import org.opensaml.saml.common.SAMLVersion;\n-import org.opensaml.saml.common.xml.SAMLConstants;\n-import org.opensaml.saml.saml2.core.Assertion;\n-import org.opensaml.saml.saml2.core.Attribute;\n-import org.opensaml.saml.saml2.core.AttributeStatement;\n-import org.opensaml.saml.saml2.core.AuthnRequest;\n-import org.opensaml.saml.saml2.core.Issuer;\n-import org.opensaml.saml.saml2.core.LogoutRequest;\n-import org.opensaml.saml.saml2.core.LogoutResponse;\n-import org.opensaml.saml.saml2.core.NameID;\n-import org.opensaml.saml.saml2.core.NameIDPolicy;\n-import org.opensaml.saml.saml2.core.NameIDType;\n-import org.opensaml.saml.saml2.core.Response;\n-import org.opensaml.saml.saml2.core.SessionIndex;\n-import org.opensaml.saml.saml2.core.StatusCode;\n-import org.opensaml.saml.saml2.core.impl.AuthnRequestBuilder;\n-import org.opensaml.saml.saml2.core.impl.IssuerBuilder;\n-import org.opensaml.saml.saml2.core.impl.LogoutRequestBuilder;\n-import org.opensaml.saml.saml2.core.impl.NameIDBuilder;\n-import org.opensaml.saml.saml2.core.impl.NameIDPolicyBuilder;\n-import org.opensaml.saml.saml2.core.impl.SessionIndexBuilder;\n-import org.opensaml.saml.saml2.metadata.AssertionConsumerService;\n-import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n-import org.opensaml.saml.saml2.metadata.KeyDescriptor;\n-import org.opensaml.saml.saml2.metadata.NameIDFormat;\n-import org.opensaml.saml.saml2.metadata.SPSSODescriptor;\n-import org.opensaml.saml.saml2.metadata.SingleLogoutService;\n-import org.opensaml.saml.saml2.metadata.impl.AssertionConsumerServiceBuilder;\n-import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorBuilder;\n-import org.opensaml.saml.saml2.metadata.impl.KeyDescriptorBuilder;\n-import org.opensaml.saml.saml2.metadata.impl.NameIDFormatBuilder;\n-import org.opensaml.saml.saml2.metadata.impl.SPSSODescriptorBuilder;\n-import org.opensaml.saml.saml2.metadata.impl.SingleLogoutServiceBuilder;\n-import org.opensaml.xmlsec.keyinfo.KeyInfoGenerator;\n-import org.opensaml.xmlsec.keyinfo.impl.X509KeyInfoGeneratorFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.apache.syncope.core.provisioning.java.DefaultRequestedAuthnContextProvider;\n-import org.apache.syncope.core.spring.ImplementationManager;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.spring.security.AuthDataAccessor;\n-import org.apache.syncope.core.spring.security.Encryptor;\n-import org.apache.syncope.core.spring.security.SecureRandomUtils;\n-import org.opensaml.core.xml.schema.XSAny;\n-import org.springframework.util.ResourceUtils;\n-\n-@Component\n-public class SAML2SPLogic extends AbstractSAML2Logic<EntityTO> {\n-\n-    private static final String IDP_INITIATED_RELAY_STATE = \"idpInitiated\";\n-\n-    private static final long JWT_RELAY_STATE_DURATION = 60L;\n-\n-    private static final String JWT_CLAIM_IDP_DEFLATE = \"IDP_DEFLATE\";\n-\n-    private static final String JWT_CLAIM_IDP_ENTITYID = \"IDP_ENTITYID\";\n-\n-    private static final String JWT_CLAIM_NAMEID_FORMAT = \"NAMEID_FORMAT\";\n-\n-    private static final String JWT_CLAIM_NAMEID_VALUE = \"NAMEID_VALUE\";\n-\n-    private static final String JWT_CLAIM_SESSIONINDEX = \"SESSIONINDEX\";\n-\n-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n-\n-    @Autowired\n-    private AccessTokenDataBinder accessTokenDataBinder;\n-\n-    @Autowired\n-    private SAML2IdPCache cache;\n-\n-    @Autowired\n-    private SAML2UserManager userManager;\n-\n-    @Autowired\n-    private SAML2IdPDAO saml2IdPDAO;\n-\n-    @Autowired\n-    private AccessTokenDAO accessTokenDAO;\n-\n-    @Autowired\n-    private ImplementationDAO implementationDAO;\n-\n-    @Autowired\n-    private AuthDataAccessor authDataAccessor;\n-\n-    @Autowired\n-    private SAML2ReaderWriter saml2rw;\n-\n-    @Resource(name = \"accessTokenJwsSignatureVerifier\")\n-    private JwsSignatureVerifier jwsSignatureVerifier;\n-\n-    private static void validateUrl(final String url) {\n-        boolean isValid = true;\n-        if (url.contains(\"..\")) {\n-            isValid = false;\n-        }\n-        if (isValid) {\n-            isValid = ResourceUtils.isUrl(url);\n-        }\n-\n-        if (!isValid) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-            sce.getElements().add(\"Invalid URL: \" + url);\n-            throw sce;\n-        }\n-    }\n-\n-    private static String getAssertionConsumerURL(final String spEntityID, final String urlContext) {\n-        String assertionConsumerUrl = spEntityID + urlContext + \"/assertion-consumer\";\n-        validateUrl(assertionConsumerUrl);\n-        return assertionConsumerUrl;\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n-    public void getMetadata(final String spEntityID, final String urlContext, final OutputStream os) {\n-        check();\n-\n-        try {\n-            EntityDescriptor spEntityDescriptor = new EntityDescriptorBuilder().buildObject();\n-            spEntityDescriptor.setEntityID(spEntityID);\n-\n-            SPSSODescriptor spSSODescriptor = new SPSSODescriptorBuilder().buildObject();\n-            spSSODescriptor.setWantAssertionsSigned(true);\n-            spSSODescriptor.setAuthnRequestsSigned(true);\n-            spSSODescriptor.addSupportedProtocol(SAMLConstants.SAML20P_NS);\n-\n-            X509KeyInfoGeneratorFactory keyInfoGeneratorFactory = new X509KeyInfoGeneratorFactory();\n-            keyInfoGeneratorFactory.setEmitEntityCertificate(true);\n-            KeyInfoGenerator keyInfoGenerator = keyInfoGeneratorFactory.newInstance();\n-            keyInfoGenerator.generate(loader.getCredential());\n-\n-            KeyDescriptor keyDescriptor = new KeyDescriptorBuilder().buildObject();\n-            keyDescriptor.setKeyInfo(keyInfoGenerator.generate(loader.getCredential()));\n-            spSSODescriptor.getKeyDescriptors().add(keyDescriptor);\n-\n-            NameIDFormat nameIDFormat = new NameIDFormatBuilder().buildObject();\n-            nameIDFormat.setFormat(NameIDType.PERSISTENT);\n-            spSSODescriptor.getNameIDFormats().add(nameIDFormat);\n-            nameIDFormat = new NameIDFormatBuilder().buildObject();\n-            nameIDFormat.setFormat(NameIDType.TRANSIENT);\n-            spSSODescriptor.getNameIDFormats().add(nameIDFormat);\n-\n-            for (SAML2BindingType bindingType : SAML2BindingType.values()) {\n-                AssertionConsumerService assertionConsumerService = new AssertionConsumerServiceBuilder().buildObject();\n-                assertionConsumerService.setIndex(bindingType.ordinal());\n-                assertionConsumerService.setBinding(bindingType.getUri());\n-                assertionConsumerService.setLocation(getAssertionConsumerURL(spEntityID, urlContext));\n-                spSSODescriptor.getAssertionConsumerServices().add(assertionConsumerService);\n-                spEntityDescriptor.getRoleDescriptors().add(spSSODescriptor);\n-\n-                String sloUrl = spEntityID + urlContext + \"/logout\";\n-                validateUrl(sloUrl);\n-\n-                SingleLogoutService singleLogoutService = new SingleLogoutServiceBuilder().buildObject();\n-                singleLogoutService.setBinding(bindingType.getUri());\n-                singleLogoutService.setLocation(sloUrl);\n-                singleLogoutService.setResponseLocation(sloUrl);\n-                spSSODescriptor.getSingleLogoutServices().add(singleLogoutService);\n-            }\n-\n-            spEntityDescriptor.getRoleDescriptors().add(spSSODescriptor);\n-            saml2rw.sign(spEntityDescriptor);\n-\n-            SAML2ReaderWriter.write(new OutputStreamWriter(os), spEntityDescriptor, true);\n-        } catch (Exception e) {\n-            LOG.error(\"While getting SP metadata\", e);\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-            sce.getElements().add(e.getMessage());\n-            throw sce;\n-        }\n-    }\n-\n-    private SAML2IdPEntity getIdP(final String entityID) {\n-        SAML2IdPEntity idp = null;\n-\n-        SAML2IdP saml2IdP = saml2IdPDAO.findByEntityID(entityID);\n-        if (saml2IdP != null) {\n-            try {\n-                idp = cache.put(saml2IdP);\n-            } catch (Exception e) {\n-                LOG.error(\"Could not build SAML 2.0 IdP with key {}\", entityID, e);\n-                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-                sce.getElements().add(e.getMessage());\n-                throw sce;\n-            }\n-        }\n-\n-        if (idp == null) {\n-            throw new NotFoundException(\"SAML 2.0 IdP '\" + entityID + '\\'');\n-        }\n-        return idp;\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public SAML2RequestTO createLoginRequest(final String spEntityID, final String idpEntityID) {\n-        check();\n-\n-        // 1. look for IdP\n-        SAML2IdPEntity idp = StringUtils.isBlank(idpEntityID) ? cache.getFirst() : cache.get(idpEntityID);\n-        if (idp == null) {\n-            if (StringUtils.isBlank(idpEntityID)) {\n-                List<SAML2IdP> all = saml2IdPDAO.findAll();\n-                if (!all.isEmpty()) {\n-                    idp = getIdP(all.get(0).getKey());\n-                }\n-            } else {\n-                idp = getIdP(idpEntityID);\n-            }\n-        }\n-        if (idp == null) {\n-            throw new NotFoundException(StringUtils.isBlank(idpEntityID)\n-                    ? \"Any SAML 2.0 IdP\"\n-                    : \"SAML 2.0 IdP '\" + idpEntityID + '\\'');\n-        }\n-\n-        if (idp.getSSOLocation(idp.getBindingType()) == null) {\n-            throw new IllegalArgumentException(\"No SingleSignOnService available for \" + idp.getId());\n-        }\n-\n-        // 2. create AuthnRequest\n-        Issuer issuer = new IssuerBuilder().buildObject();\n-        issuer.setValue(spEntityID);\n-\n-        NameIDPolicy nameIDPolicy = new NameIDPolicyBuilder().buildObject();\n-        if (idp.supportsNameIDFormat(NameIDType.TRANSIENT)) {\n-            nameIDPolicy.setFormat(NameIDType.TRANSIENT);\n-        } else if (idp.supportsNameIDFormat(NameIDType.PERSISTENT)) {\n-            nameIDPolicy.setFormat(NameIDType.PERSISTENT);\n-        } else {\n-            throw new IllegalArgumentException(\"Could not find supported NameIDFormat for IdP \" + idpEntityID);\n-        }\n-        nameIDPolicy.setAllowCreate(true);\n-        nameIDPolicy.setSPNameQualifier(spEntityID);\n-\n-        RequestedAuthnContextProvider requestedAuthnContextProvider = new DefaultRequestedAuthnContextProvider();\n-        if (idp.getRequestedAuthnContextProvider() != null) {\n-            try {\n-                ImplementationManager.build(implementationDAO.find(idp.getRequestedAuthnContextProvider()));\n-            } catch (Exception e) {\n-                LOG.warn(\"Cannot instantiate '{}', reverting to {}\",\n-                        idp.getRequestedAuthnContextProvider(),\n-                        DefaultRequestedAuthnContextProvider.class.getName(), e);\n-            }\n-        }\n-\n-        AuthnRequest authnRequest = new AuthnRequestBuilder().buildObject();\n-        authnRequest.setID('_' + SecureRandomUtils.generateRandomUUID().toString());\n-        authnRequest.setForceAuthn(false);\n-        authnRequest.setIsPassive(false);\n-        authnRequest.setVersion(SAMLVersion.VERSION_20);\n-        authnRequest.setProtocolBinding(idp.getBindingType().getUri());\n-        authnRequest.setIssueInstant(new DateTime());\n-        authnRequest.setIssuer(issuer);\n-        authnRequest.setNameIDPolicy(nameIDPolicy);\n-        authnRequest.setRequestedAuthnContext(requestedAuthnContextProvider.provide());\n-        authnRequest.setDestination(idp.getSSOLocation(idp.getBindingType()).getLocation());\n-\n-        SAML2RequestTO requestTO = new SAML2RequestTO();\n-        requestTO.setIdpServiceAddress(authnRequest.getDestination());\n-        requestTO.setBindingType(idp.getBindingType());\n-        try {\n-            // 3. generate relay state as JWT\n-            Map<String, Object> claims = new HashMap<>();\n-            claims.put(JWT_CLAIM_IDP_DEFLATE, idp.isUseDeflateEncoding());\n-            Pair<String, Date> relayState = accessTokenDataBinder.generateJWT(\n-                    SecureRandomUtils.generateRandomUUID().toString(),\n-                    authnRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n-\n-            // 4. sign and encode AuthnRequest\n-            switch (idp.getBindingType()) {\n-                case REDIRECT:\n-                    requestTO.setRelayState(URLEncoder.encode(relayState.getLeft(), StandardCharsets.UTF_8));\n-                    requestTO.setContent(URLEncoder.encode(\n-                            SAML2ReaderWriter.encode(authnRequest, true), StandardCharsets.UTF_8));\n-                    requestTO.setSignAlg(URLEncoder.encode(saml2rw.getSigAlgo(), StandardCharsets.UTF_8));\n-                    requestTO.setSignature(URLEncoder.encode(\n-                            saml2rw.sign(requestTO.getContent(), requestTO.getRelayState()),\n-                            StandardCharsets.UTF_8));\n-                    break;\n-\n-                case POST:\n-                default:\n-                    requestTO.setRelayState(relayState.getLeft());\n-                    saml2rw.sign(authnRequest);\n-                    requestTO.setContent(SAML2ReaderWriter.encode(authnRequest, idp.isUseDeflateEncoding()));\n-            }\n-        } catch (Exception e) {\n-            LOG.error(\"While generating AuthnRequest\", e);\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-            sce.getElements().add(e.getMessage());\n-            throw sce;\n-        }\n-\n-        return requestTO;\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO response) {\n-        check();\n-\n-        // 1. first checks for the provided relay state\n-        if (response.getRelayState() == null) {\n-            throw new IllegalArgumentException(\"No Relay State was provided\");\n-        }\n-\n-        Boolean useDeflateEncoding = false;\n-        String requestId = null;\n-        if (!IDP_INITIATED_RELAY_STATE.equals(response.getRelayState())) {\n-            JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n-            if (!relayState.verifySignatureWith(jwsSignatureVerifier)) {\n-                throw new IllegalArgumentException(\"Invalid signature found in Relay State\");\n-            }\n-            useDeflateEncoding = Boolean.valueOf(\n-                    relayState.getJwtClaims().getClaim(JWT_CLAIM_IDP_DEFLATE).toString());\n-            requestId = relayState.getJwtClaims().getSubject();\n-\n-            Long expiryTime = relayState.getJwtClaims().getExpiryTime();\n-            if (expiryTime == null || (expiryTime * 1000L) < new Date().getTime()) {\n-                throw new IllegalArgumentException(\"Relay State is expired\");\n-            }\n-        }\n-\n-        // 2. parse the provided SAML response\n-        if (response.getSamlResponse() == null) {\n-            throw new IllegalArgumentException(\"No SAML Response was provided\");\n-        }\n-        Response samlResponse;\n-        try {\n-            XMLObject responseObject = SAML2ReaderWriter.read(useDeflateEncoding, response.getSamlResponse());\n-            if (!(responseObject instanceof Response)) {\n-                throw new IllegalArgumentException(\"Expected \" + Response.class.getName()\n-                        + \", got \" + responseObject.getClass().getName());\n-            }\n-            samlResponse = (Response) responseObject;\n-        } catch (Exception e) {\n-            LOG.error(\"While parsing AuthnResponse\", e);\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-            sce.getElements().add(e.getMessage());\n-            throw sce;\n-        }\n-\n-        // 3. validate the SAML response and, if needed, decrypt the provided assertion(s)\n-        if (samlResponse.getIssuer() == null || samlResponse.getIssuer().getValue() == null) {\n-            throw new IllegalArgumentException(\"The SAML Response must contain an Issuer\");\n-        }\n-        final SAML2IdPEntity idp = getIdP(samlResponse.getIssuer().getValue());\n-        if (idp.getConnObjectKeyItem() == null) {\n-            throw new IllegalArgumentException(\"No mapping provided for SAML 2.0 IdP '\" + idp.getId() + '\\'');\n-        }\n-\n-        if (IDP_INITIATED_RELAY_STATE.equals(response.getRelayState()) && !idp.isSupportUnsolicited()) {\n-            throw new IllegalArgumentException(\"An unsolicited request is not allowed for idp: \" + idp.getId());\n-        }\n-\n-        SSOValidatorResponse validatorResponse = null;\n-        try {\n-            validatorResponse = saml2rw.validate(\n-                    samlResponse,\n-                    idp,\n-                    getAssertionConsumerURL(response.getSpEntityID(), response.getUrlContext()),\n-                    requestId,\n-                    response.getSpEntityID());\n-        } catch (Exception e) {\n-            LOG.error(\"While validating AuthnResponse\", e);\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-            sce.getElements().add(e.getMessage());\n-            throw sce;\n-        }\n-\n-        // 4. prepare the result: find matching user (if any) and return the received attributes\n-        final SAML2LoginResponseTO responseTO = new SAML2LoginResponseTO();\n-        responseTO.setIdp(idp.getId());\n-        responseTO.setSloSupported(idp.getSLOLocation(idp.getBindingType()) != null);\n-\n-        Assertion assertion = validatorResponse.getOpensamlAssertion();\n-        NameID nameID = assertion.getSubject().getNameID();\n-        if (nameID == null) {\n-            throw new IllegalArgumentException(NameID.DEFAULT_ELEMENT_LOCAL_NAME + \" not found\");\n-        }\n-\n-        String keyValue = null;\n-        if (StringUtils.isNotBlank(nameID.getValue())\n-                && idp.getConnObjectKeyItem().getExtAttrName().equals(NameID.DEFAULT_ELEMENT_LOCAL_NAME)) {\n-\n-            keyValue = nameID.getValue();\n-        }\n-\n-        if (assertion.getConditions().getNotOnOrAfter() != null) {\n-            responseTO.setNotOnOrAfter(assertion.getConditions().getNotOnOrAfter().toDate());\n-        }\n-        assertion.getAuthnStatements().forEach(authnStmt -> {\n-            responseTO.setSessionIndex(authnStmt.getSessionIndex());\n-\n-            responseTO.setAuthInstant(authnStmt.getAuthnInstant().toDate());\n-            if (authnStmt.getSessionNotOnOrAfter() != null) {\n-                responseTO.setNotOnOrAfter(authnStmt.getSessionNotOnOrAfter().toDate());\n-            }\n-        });\n-\n-        for (AttributeStatement attrStmt : assertion.getAttributeStatements()) {\n-            for (Attribute attr : attrStmt.getAttributes()) {\n-                if (!attr.getAttributeValues().isEmpty()) {\n-                    String attrName = attr.getFriendlyName() == null ? attr.getName() : attr.getFriendlyName();\n-                    if (attrName.equals(idp.getConnObjectKeyItem().getExtAttrName())) {\n-                        if (attr.getAttributeValues().get(0) instanceof XSString) {\n-                            keyValue = ((XSString) attr.getAttributeValues().get(0)).getValue();\n-                        } else if (attr.getAttributeValues().get(0) instanceof XSAny) {\n-                            keyValue = ((XSAny) attr.getAttributeValues().get(0)).getTextContent();\n-                        }\n-                    }\n-\n-                    Attr attrTO = new Attr.Builder(attrName).\n-                            values(attr.getAttributeValues().stream().\n-                                    filter(value -> value.getDOM() != null).\n-                                    map(value -> value.getDOM().getTextContent()).\n-                                    collect(Collectors.toList())).build();\n-                    responseTO.getAttrs().add(attrTO);\n-                }\n-            }\n-        }\n-\n-        final List<String> matchingUsers = keyValue == null\n-                ? List.of()\n-                : userManager.findMatchingUser(keyValue, idp.getKey());\n-        LOG.debug(\"Found {} matching users for {}\", matchingUsers.size(), keyValue);\n-\n-        String username;\n-        if (matchingUsers.isEmpty()) {\n-            if (idp.isCreateUnmatching()) {\n-                LOG.debug(\"No user matching {}, about to create\", keyValue);\n-\n-                username = AuthContextUtils.callAsAdmin(AuthContextUtils.getDomain(),\n-                        () -> userManager.create(idp, responseTO, nameID.getValue()));\n-            } else if (idp.isSelfRegUnmatching()) {\n-                responseTO.setNameID(nameID.getValue());\n-                UserTO userTO = new UserTO();\n-\n-                userManager.fill(idp.getKey(), responseTO, userTO);\n-\n-                responseTO.getAttrs().clear();\n-                responseTO.getAttrs().addAll(userTO.getPlainAttrs());\n-                responseTO.getAttrs().addAll(userTO.getVirAttrs());\n-                if (StringUtils.isNotBlank(userTO.getUsername())) {\n-                    responseTO.setUsername(userTO.getUsername());\n-                }\n-\n-                responseTO.setSelfReg(true);\n-\n-                return responseTO;\n-            } else {\n-                throw new NotFoundException(\"User matching the provided value \" + keyValue);\n-            }\n-        } else if (matchingUsers.size() > 1) {\n-            throw new IllegalArgumentException(\"Several users match the provided value \" + keyValue);\n-        } else {\n-            if (idp.isUpdateMatching()) {\n-                LOG.debug(\"About to update {} for {}\", matchingUsers.get(0), keyValue);\n-\n-                username = AuthContextUtils.callAsAdmin(AuthContextUtils.getDomain(),\n-                        () -> userManager.update(matchingUsers.get(0), idp, responseTO));\n-            } else {\n-                username = matchingUsers.get(0);\n-            }\n-        }\n-\n-        responseTO.setUsername(username);\n-        responseTO.setNameID(nameID.getValue());\n-\n-        // 5. generate JWT for further access\n-        Map<String, Object> claims = new HashMap<>();\n-        claims.put(JWT_CLAIM_IDP_ENTITYID, idp.getId());\n-        claims.put(JWT_CLAIM_NAMEID_FORMAT, nameID.getFormat());\n-        claims.put(JWT_CLAIM_NAMEID_VALUE, nameID.getValue());\n-        claims.put(JWT_CLAIM_SESSIONINDEX, responseTO.getSessionIndex());\n-\n-        byte[] authorities = null;\n-        try {\n-            authorities = ENCRYPTOR.encode(POJOHelper.serialize(\n-                    authDataAccessor.getAuthorities(responseTO.getUsername())), CipherAlgorithm.AES).getBytes();\n-        } catch (Exception e) {\n-            LOG.error(\"Could not fetch authorities\", e);\n-        }\n-\n-        Pair<String, Date> accessTokenInfo =\n-                accessTokenDataBinder.create(responseTO.getUsername(), claims, authorities, true);\n-        responseTO.setAccessToken(accessTokenInfo.getLeft());\n-        responseTO.setAccessTokenExpiryTime(accessTokenInfo.getRight());\n-\n-        return responseTO;\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"'))\")\n-    public SAML2RequestTO createLogoutRequest(final String accessToken, final String spEntityID) {\n-        check();\n-\n-        // 1. fetch the current JWT used for Syncope authentication\n-        JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(accessToken);\n-        if (!consumer.verifySignatureWith(jwsSignatureVerifier)) {\n-            throw new IllegalArgumentException(\"Invalid signature found in Access Token\");\n-        }\n-\n-        // 2. look for IdP\n-        String idpEntityID = (String) consumer.getJwtClaims().getClaim(JWT_CLAIM_IDP_ENTITYID);\n-        if (idpEntityID == null) {\n-            throw new NotFoundException(\"No SAML 2.0 IdP information found in the access token\");\n-        }\n-        SAML2IdPEntity idp = cache.get(idpEntityID);\n-        if (idp == null) {\n-            throw new NotFoundException(\"SAML 2.0 IdP '\" + idpEntityID + '\\'');\n-        }\n-        if (idp.getSLOLocation(idp.getBindingType()) == null) {\n-            throw new IllegalArgumentException(\"No SingleLogoutService available for \" + idp.getId());\n-        }\n-\n-        // 3. create LogoutRequest\n-        LogoutRequest logoutRequest = new LogoutRequestBuilder().buildObject();\n-        logoutRequest.setID('_' + SecureRandomUtils.generateRandomUUID().toString());\n-        logoutRequest.setDestination(idp.getSLOLocation(idp.getBindingType()).getLocation());\n-\n-        DateTime now = new DateTime();\n-        logoutRequest.setIssueInstant(now);\n-        logoutRequest.setNotOnOrAfter(now.plusMinutes(5));\n-\n-        Issuer issuer = new IssuerBuilder().buildObject();\n-        issuer.setValue(spEntityID);\n-        logoutRequest.setIssuer(issuer);\n-\n-        NameID nameID = new NameIDBuilder().buildObject();\n-        nameID.setFormat((String) consumer.getJwtClaims().getClaim(JWT_CLAIM_NAMEID_FORMAT));\n-        nameID.setValue((String) consumer.getJwtClaims().getClaim(JWT_CLAIM_NAMEID_VALUE));\n-        logoutRequest.setNameID(nameID);\n-\n-        SessionIndex sessionIndex = new SessionIndexBuilder().buildObject();\n-        sessionIndex.setSessionIndex((String) consumer.getJwtClaims().getClaim(JWT_CLAIM_SESSIONINDEX));\n-        logoutRequest.getSessionIndexes().add(sessionIndex);\n-\n-        SAML2RequestTO requestTO = new SAML2RequestTO();\n-        requestTO.setIdpServiceAddress(logoutRequest.getDestination());\n-        requestTO.setBindingType(idp.getBindingType());\n-        try {\n-            // 3. generate relay state as JWT\n-            Map<String, Object> claims = new HashMap<>();\n-            claims.put(JWT_CLAIM_IDP_DEFLATE,\n-                    idp.getBindingType() == SAML2BindingType.REDIRECT ? true : idp.isUseDeflateEncoding());\n-            Pair<String, Date> relayState = accessTokenDataBinder.generateJWT(\n-                    SecureRandomUtils.generateRandomUUID().toString(),\n-                    logoutRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n-            requestTO.setRelayState(relayState.getLeft());\n-\n-            // 4. sign and encode AuthnRequest\n-            switch (idp.getBindingType()) {\n-                case REDIRECT:\n-                    requestTO.setContent(SAML2ReaderWriter.encode(logoutRequest, true));\n-                    requestTO.setSignAlg(saml2rw.getSigAlgo());\n-                    requestTO.setSignature(saml2rw.sign(requestTO.getContent(), requestTO.getRelayState()));\n-                    break;\n-\n-                case POST:\n-                default:\n-                    saml2rw.sign(logoutRequest);\n-                    requestTO.setContent(SAML2ReaderWriter.encode(logoutRequest, idp.isUseDeflateEncoding()));\n-            }\n-        } catch (Exception e) {\n-            LOG.error(\"While generating LogoutRequest\", e);\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-            sce.getElements().add(e.getMessage());\n-            throw sce;\n-        }\n-\n-        return requestTO;\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"'))\")\n-    public void validateLogoutResponse(final String accessToken, final SAML2ReceivedResponseTO response) {\n-        check();\n-\n-        // 1. fetch the current JWT used for Syncope authentication\n-        JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(accessToken);\n-        if (!consumer.verifySignatureWith(jwsSignatureVerifier)) {\n-            throw new IllegalArgumentException(\"Invalid signature found in Access Token\");\n-        }\n-\n-        // 2. extract raw SAML response and relay state\n-        JwsJwtCompactConsumer relayState = null;\n-        Boolean useDeflateEncoding = false;\n-        if (StringUtils.isNotBlank(response.getRelayState())) {\n-            // first checks for the provided relay state, if available\n-            relayState = new JwsJwtCompactConsumer(response.getRelayState());\n-            if (!relayState.verifySignatureWith(jwsSignatureVerifier)) {\n-                throw new IllegalArgumentException(\"Invalid signature found in Relay State\");\n-            }\n-            Long expiryTime = relayState.getJwtClaims().getExpiryTime();\n-            if (expiryTime == null || (expiryTime * 1000L) < new Date().getTime()) {\n-                throw new IllegalArgumentException(\"Relay State is expired\");\n-            }\n-\n-            useDeflateEncoding = Boolean.valueOf(\n-                    relayState.getJwtClaims().getClaim(JWT_CLAIM_IDP_DEFLATE).toString());\n-        }\n-\n-        // 3. parse the provided SAML response\n-        LogoutResponse logoutResponse;\n-        try {\n-            XMLObject responseObject = SAML2ReaderWriter.read(useDeflateEncoding, response.getSamlResponse());\n-            if (!(responseObject instanceof LogoutResponse)) {\n-                throw new IllegalArgumentException(\"Expected \" + LogoutResponse.class.getName()\n-                        + \", got \" + responseObject.getClass().getName());\n-            }\n-            logoutResponse = (LogoutResponse) responseObject;\n-        } catch (Exception e) {\n-            LOG.error(\"While parsing LogoutResponse\", e);\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-            sce.getElements().add(e.getMessage());\n-            throw sce;\n-        }\n-\n-        // 4. if relay state was available, check the SAML Reponse's InResponseTo\n-        if (relayState != null && !relayState.getJwtClaims().getSubject().equals(logoutResponse.getInResponseTo())) {\n-            throw new IllegalArgumentException(\"Unmatching request ID: \" + logoutResponse.getInResponseTo());\n-        }\n-\n-        // 5. finally check for the logout status\n-        if (StatusCode.SUCCESS.equals(logoutResponse.getStatus().getStatusCode().getValue())) {\n-            accessTokenDAO.delete(consumer.getJwtClaims().getTokenId());\n-        } else {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-            if (logoutResponse.getStatus().getStatusMessage() == null) {\n-                sce.getElements().add(logoutResponse.getStatus().getStatusCode().getValue());\n-            } else {\n-                sce.getElements().add(logoutResponse.getStatus().getStatusMessage().getMessage());\n-            }\n-            throw sce;\n-        }\n-    }\n-\n-    @Override\n-    protected EntityTO resolveReference(\n-            final Method method, final Object... args) throws UnresolvedReferenceException {\n-\n-        throw new UnresolvedReferenceException();\n-    }\n-}"},{"sha":"a8d4997f7072d1657099861ee5ab686fa6f0e849","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPLoader.java","status":"removed","additions":0,"deletions":176,"changes":176,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,176 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic.init;\n-\n-import java.io.InputStream;\n-import java.security.KeyStore;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n-import javax.sql.DataSource;\n-import net.shibboleth.utilities.java.support.resolver.CriteriaSet;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.PropertyUtils;\n-import org.apache.syncope.common.lib.types.EntitlementsHolder;\n-import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n-import org.apache.syncope.common.lib.types.SAML2SPEntitlement;\n-import org.apache.syncope.common.lib.types.SAML2SPImplementationType;\n-import org.apache.syncope.core.logic.saml2.SAML2IdPCache;\n-import org.apache.syncope.core.logic.saml2.SAML2ReaderWriter;\n-import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.spring.ResourceWithFallbackLoader;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.wss4j.common.saml.OpenSAMLUtil;\n-import org.opensaml.core.criterion.EntityIdCriterion;\n-import org.opensaml.security.credential.Credential;\n-import org.opensaml.security.credential.impl.KeyStoreCredentialResolver;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class SAML2SPLoader implements SyncopeCoreLoader {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(SAML2SPLoader.class);\n-\n-    private static final String SAML2SP_LOGIC_PROPERTIES = \"saml2sp-logic.properties\";\n-\n-    private static <T> T assertNotNull(final T argument, final String name) {\n-        if (argument == null) {\n-            throw new IllegalArgumentException(\"Argument '\" + name + \"' may not be null.\");\n-        }\n-        return argument;\n-    }\n-\n-    static {\n-        OpenSAMLUtil.initSamlEngine(false);\n-    }\n-\n-    @Autowired\n-    private SAML2ReaderWriter saml2rw;\n-\n-    @Autowired\n-    private SAML2IdPCache cache;\n-\n-    @Autowired\n-    private SAML2IdPDAO idpDAO;\n-\n-    private boolean inited;\n-\n-    private KeyStore keystore;\n-\n-    private String keyPass;\n-\n-    private Credential credential;\n-\n-    private String signatureAlgorithm;\n-\n-    @Override\n-    public int getOrder() {\n-        return 1000;\n-    }\n-\n-    @Override\n-    public void load() {\n-        EntitlementsHolder.getInstance().addAll(SAML2SPEntitlement.values());\n-        ImplementationTypesHolder.getInstance().putAll(SAML2SPImplementationType.values());\n-\n-        Properties props = PropertyUtils.read(getClass(), SAML2SP_LOGIC_PROPERTIES, \"conf.directory\");\n-        String confDirectory = props.getProperty(\"conf.directory\");\n-\n-        assertNotNull(confDirectory, \"<conf.directory>\");\n-\n-        String name = props.getProperty(\"keystore.name\");\n-        assertNotNull(name, \"<keystore.name>\");\n-        String type = props.getProperty(\"keystore.type\");\n-        assertNotNull(type, \"<keystore.type>\");\n-        String storePass = props.getProperty(\"keystore.storepass\");\n-        assertNotNull(storePass, \"<keystore.storepass>\");\n-        keyPass = props.getProperty(\"keystore.keypass\");\n-        assertNotNull(keyPass, \"<keystore.keypass>\");\n-        String certAlias = props.getProperty(\"sp.cert.alias\");\n-        assertNotNull(certAlias, \"<sp.cert.alias>\");\n-        signatureAlgorithm = props.getProperty(\"signature.algorithm\");\n-\n-        LOG.debug(\"Attempting to load the provided keystore...\");\n-        try {\n-            ResourceWithFallbackLoader loader = new ResourceWithFallbackLoader();\n-            loader.setResourceLoader(ApplicationContextProvider.getApplicationContext());\n-            loader.setPrimary(StringUtils.appendIfMissing(\"file:\" + confDirectory, \"/\") + name);\n-            loader.setFallback(\"classpath:\" + name);\n-\n-            keystore = KeyStore.getInstance(type);\n-            try (InputStream inputStream = loader.getResource().getInputStream()) {\n-                keystore.load(inputStream, storePass.toCharArray());\n-                LOG.debug(\"Keystore loaded\");\n-            }\n-\n-            Map<String, String> passwordMap = new HashMap<>();\n-            passwordMap.put(certAlias, keyPass);\n-            KeyStoreCredentialResolver resolver = new KeyStoreCredentialResolver(keystore, passwordMap);\n-\n-            this.credential = resolver.resolveSingle(new CriteriaSet(new EntityIdCriterion(certAlias)));\n-            LOG.debug(\"SAML 2.0 Service Provider certificate loaded\");\n-\n-            saml2rw.init();\n-\n-            inited = true;\n-        } catch (Exception e) {\n-            LOG.error(\"Could not initialize the SAML 2.0 Service Provider certificate\", e);\n-            inited = false;\n-        }\n-    }\n-\n-    @Override\n-    public void load(final String domain, final DataSource datasource) {\n-        AuthContextUtils.callAsAdmin(domain, () -> {\n-            idpDAO.findAll().forEach(idp -> {\n-                try {\n-                    cache.put(idp);\n-                } catch (Exception e) {\n-                    LOG.error(\"Could not cache the SAML 2.0 IdP with key {}\", idp.getEntityID(), e);\n-                }\n-            });\n-            return null;\n-        });\n-    }\n-\n-    public boolean isInited() {\n-        return inited;\n-    }\n-\n-    public KeyStore getKeyStore() {\n-        return keystore;\n-    }\n-\n-    public String getKeyPass() {\n-        return keyPass;\n-    }\n-\n-    public Credential getCredential() {\n-        return credential;\n-    }\n-\n-    public String getSignatureAlgorithm() {\n-        return signatureAlgorithm;\n-    }\n-}"},{"sha":"933392375336e6f6d84db9518957fe7dc7505109","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPCache.java","status":"removed","additions":0,"deletions":89,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,89 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic.saml2;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.security.KeyStoreException;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.cert.CertificateException;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-import net.shibboleth.utilities.java.support.xml.XMLParserException;\n-import org.apache.syncope.common.lib.to.SAML2IdPTO;\n-import org.apache.syncope.core.logic.init.SAML2SPLoader;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n-import org.apache.syncope.core.provisioning.api.data.SAML2IdPDataBinder;\n-import org.apache.wss4j.common.ext.WSSecurityException;\n-import org.apache.wss4j.common.saml.OpenSAMLUtil;\n-import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.w3c.dom.Element;\n-\n-/**\n- * Basic in-memory cache for available {@link SAML2IdPEntity} identity providers.\n- */\n-@Component\n-public class SAML2IdPCache {\n-\n-    private final Map<String, SAML2IdPEntity> cache = Collections.synchronizedMap(new HashMap<>());\n-\n-    @Autowired\n-    private SAML2SPLoader loader;\n-\n-    @Autowired\n-    private SAML2IdPDataBinder binder;\n-\n-    public SAML2IdPEntity get(final String entityID) {\n-        return cache.get(entityID);\n-    }\n-\n-    public SAML2IdPEntity getFirst() {\n-        return cache.isEmpty() ? null : cache.entrySet().iterator().next().getValue();\n-    }\n-\n-    public SAML2IdPEntity put(\n-            final EntityDescriptor entityDescriptor,\n-            final SAML2IdPTO idpTO)\n-            throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException {\n-\n-        SAML2IdPEntity idp = new SAML2IdPEntity(entityDescriptor, idpTO, loader.getKeyPass());\n-        cache.put(entityDescriptor.getEntityID(), idp);\n-        return idp;\n-    }\n-\n-    @Transactional(readOnly = true)\n-    public SAML2IdPEntity put(final SAML2IdP idp)\n-            throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, WSSecurityException,\n-            XMLParserException {\n-\n-        Element element = OpenSAMLUtil.getParserPool().parse(\n-                new InputStreamReader(new ByteArrayInputStream(idp.getMetadata()))).getDocumentElement();\n-        EntityDescriptor entityDescriptor = (EntityDescriptor) OpenSAMLUtil.fromDom(element);\n-        return put(entityDescriptor, binder.getIdPTO(idp));\n-    }\n-\n-    public SAML2IdPEntity remove(final String entityID) {\n-        return cache.remove(entityID);\n-    }\n-}"},{"sha":"8e139b03885f2c5375e88649cdc30a389febbb6e","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPEntity.java","status":"removed","additions":0,"deletions":186,"changes":186,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,186 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic.saml2;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.security.KeyStore;\n-import java.security.KeyStoreException;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.cert.CertificateException;\n-import java.security.cert.CertificateFactory;\n-import java.security.cert.X509Certificate;\n-import java.util.ArrayList;\n-import java.util.Base64;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.SAML2IdPTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.SAML2BindingType;\n-import org.opensaml.saml.common.xml.SAMLConstants;\n-import org.opensaml.saml.saml2.metadata.Endpoint;\n-import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n-import org.opensaml.saml.saml2.metadata.IDPSSODescriptor;\n-import org.opensaml.saml.saml2.metadata.KeyDescriptor;\n-import org.opensaml.saml.saml2.metadata.SingleLogoutService;\n-import org.opensaml.xmlsec.signature.X509Data;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class SAML2IdPEntity {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(SAML2IdPEntity.class);\n-\n-    private final String id;\n-\n-    private SAML2IdPTO idpTO;\n-\n-    private final Map<String, Endpoint> ssoBindings = new HashMap<>();\n-\n-    private final Map<String, SingleLogoutService> sloBindings = new HashMap<>();\n-\n-    private final List<String> nameIDFormats = new ArrayList<>();\n-\n-    private final KeyStore trustStore;\n-\n-    public SAML2IdPEntity(\n-            final EntityDescriptor entityDescriptor,\n-            final SAML2IdPTO idpTO,\n-            final String keyPass)\n-            throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException {\n-\n-        this.id = entityDescriptor.getEntityID();\n-        this.idpTO = idpTO;\n-\n-        IDPSSODescriptor idpdescriptor = entityDescriptor.getIDPSSODescriptor(SAMLConstants.SAML20P_NS);\n-\n-        idpdescriptor.getSingleSignOnServices().forEach(sso -> {\n-            LOG.debug(\"[{}] Add SSO binding {}({})\", id, sso.getBinding(), sso.getLocation());\n-            this.ssoBindings.put(sso.getBinding(), sso);\n-        });\n-\n-        idpdescriptor.getSingleLogoutServices().forEach(slo -> {\n-            LOG.debug(\"[{}] Add SLO binding '{}'\\n\\tLocation: '{}'\\n\\tResponse Location: '{}'\",\n-                    id, slo.getBinding(), slo.getLocation(), slo.getResponseLocation());\n-            this.sloBindings.put(slo.getBinding(), slo);\n-        });\n-\n-        idpdescriptor.getNameIDFormats().forEach(nameIDFormat -> {\n-            LOG.debug(\"[{}] Add NameIDFormat '{}'\", id, nameIDFormat.getFormat());\n-            nameIDFormats.add(nameIDFormat.getFormat());\n-        });\n-\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        List<X509Certificate> chain = new ArrayList<>();\n-        for (KeyDescriptor key : idpdescriptor.getKeyDescriptors()) {\n-            for (X509Data x509Data : key.getKeyInfo().getX509Datas()) {\n-                for (org.opensaml.xmlsec.signature.X509Certificate cert : x509Data.getX509Certificates()) {\n-                    try (ByteArrayInputStream bais = new ByteArrayInputStream(\n-                            Base64.getMimeDecoder().decode(Objects.requireNonNull(cert.getValue())))) {\n-                        chain.add(X509Certificate.class.cast(cf.generateCertificate(bais)));\n-                    }\n-                }\n-            }\n-        }\n-\n-        this.trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n-        this.trustStore.load(null, keyPass.toCharArray());\n-        if (!chain.isEmpty()) {\n-            for (X509Certificate cert : chain) {\n-                LOG.debug(\"[{}] Add X.509 certificate {}\", id, cert.getSubjectX500Principal().getName());\n-                this.trustStore.setCertificateEntry(cert.getSubjectX500Principal().getName(), cert);\n-            }\n-            LOG.debug(\"[{}] Set default X.509 certificate {}\", id, chain.get(0).getSubjectX500Principal().getName());\n-            this.trustStore.setCertificateEntry(id, chain.get(0));\n-        }\n-    }\n-\n-    public void setIdpTO(final SAML2IdPTO idpTO) {\n-        this.idpTO = idpTO;\n-    }\n-\n-    public String getId() {\n-        return id;\n-    }\n-\n-    public String getKey() {\n-        return idpTO.getKey();\n-    }\n-\n-    public boolean isCreateUnmatching() {\n-        return idpTO.isCreateUnmatching();\n-    }\n-\n-    public boolean isSelfRegUnmatching() {\n-        return idpTO.isSelfRegUnmatching();\n-    }\n-\n-    public boolean isUpdateMatching() {\n-        return idpTO.isUpdateMatching();\n-    }\n-\n-    public boolean isUseDeflateEncoding() {\n-        return idpTO.isUseDeflateEncoding();\n-    }\n-\n-    public boolean isSupportUnsolicited() {\n-        return idpTO.isSupportUnsolicited();\n-    }\n-\n-    public SAML2BindingType getBindingType() {\n-        return idpTO.getBindingType();\n-    }\n-\n-    public ItemTO getConnObjectKeyItem() {\n-        return idpTO.getConnObjectKeyItem();\n-    }\n-\n-    public UserTO getUserTemplate() {\n-        return idpTO.getUserTemplate();\n-    }\n-\n-    public List<String> getActions() {\n-        return idpTO.getActions();\n-    }\n-\n-    public String getRequestedAuthnContextProvider() {\n-        return idpTO.getRequestedAuthnContextProvider();\n-    }\n-\n-    public Endpoint getSSOLocation(final SAML2BindingType bindingType) {\n-        return ssoBindings.get(bindingType.getUri());\n-    }\n-\n-    public Endpoint getSLOLocation(final SAML2BindingType bindingType) {\n-        return sloBindings.get(bindingType.getUri());\n-    }\n-\n-    public boolean supportsNameIDFormat(final String nameIDFormat) {\n-        return nameIDFormats.contains(nameIDFormat);\n-    }\n-\n-    public KeyStore getTrustStore() {\n-        return trustStore;\n-    }\n-}"},{"sha":"2ec7b034891da60a9e6427f901cd0da8dfad9818","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ReaderWriter.java","status":"removed","additions":0,"deletions":269,"changes":269,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,269 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic.saml2;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.StringWriter;\n-import java.io.UnsupportedEncodingException;\n-import java.io.Writer;\n-import java.net.URLEncoder;\n-import java.nio.charset.StandardCharsets;\n-import java.security.InvalidKeyException;\n-import java.util.Base64;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.PrivateKey;\n-import java.security.SignatureException;\n-import java.util.zip.DataFormatException;\n-import javax.xml.XMLConstants;\n-import javax.xml.stream.XMLStreamException;\n-import javax.xml.transform.Transformer;\n-import javax.xml.transform.TransformerConfigurationException;\n-import javax.xml.transform.TransformerException;\n-import javax.xml.transform.TransformerFactory;\n-import javax.xml.transform.dom.DOMSource;\n-import javax.xml.transform.stream.StreamResult;\n-import org.apache.cxf.rs.security.saml.DeflateEncoderDecoder;\n-import org.apache.cxf.rs.security.saml.sso.SAMLProtocolResponseValidator;\n-import org.apache.cxf.rs.security.saml.sso.SAMLSSOResponseValidator;\n-import org.apache.cxf.rs.security.saml.sso.SSOValidatorResponse;\n-import org.apache.cxf.staxutils.StaxUtils;\n-import org.apache.syncope.common.lib.SSOConstants;\n-import org.apache.syncope.common.lib.types.SAML2BindingType;\n-import org.apache.syncope.common.lib.types.SignatureAlgorithm;\n-import org.apache.syncope.core.logic.init.SAML2SPLoader;\n-import org.apache.wss4j.common.crypto.Merlin;\n-import org.apache.wss4j.common.ext.WSSecurityException;\n-import org.apache.wss4j.common.saml.OpenSAMLUtil;\n-import org.apache.xml.security.algorithms.JCEMapper;\n-import org.opensaml.core.xml.XMLObject;\n-import org.opensaml.saml.common.SignableSAMLObject;\n-import org.opensaml.saml.saml2.core.RequestAbstractType;\n-import org.opensaml.saml.saml2.core.Response;\n-import org.opensaml.security.SecurityException;\n-import org.opensaml.xmlsec.keyinfo.KeyInfoGenerator;\n-import org.opensaml.xmlsec.keyinfo.impl.X509KeyInfoGeneratorFactory;\n-import org.opensaml.xmlsec.signature.support.SignatureConstants;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-import org.w3c.dom.Document;\n-\n-@Component\n-public class SAML2ReaderWriter {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(SAML2ReaderWriter.class);\n-\n-    private static final TransformerFactory TRANSFORMER_FACTORY;\n-\n-    static {\n-        TRANSFORMER_FACTORY = TransformerFactory.newInstance();\n-        TRANSFORMER_FACTORY.setURIResolver((href, base) -> null);\n-        try {\n-            TRANSFORMER_FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n-        } catch (TransformerConfigurationException e) {\n-            LOG.error(\"Could not enable secure XML processing\", e);\n-        }\n-\n-        try {\n-            TRANSFORMER_FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n-            TRANSFORMER_FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n-        } catch (IllegalArgumentException ex) {\n-             LOG.debug(\"The JAXP parser does not support the following attribute: \", ex);\n-        }\n-    }\n-\n-    @Autowired\n-    private SAML2SPLoader loader;\n-\n-    private KeyInfoGenerator keyInfoGenerator;\n-\n-    private String sigAlgo;\n-\n-    private String jceSigAlgo;\n-\n-    private SAMLSPCallbackHandler callbackHandler;\n-\n-    public void init() {\n-        X509KeyInfoGeneratorFactory keyInfoGeneratorFactory = new X509KeyInfoGeneratorFactory();\n-        keyInfoGeneratorFactory.setEmitEntityCertificate(true);\n-        keyInfoGenerator = keyInfoGeneratorFactory.newInstance();\n-\n-        // Try to load a signature algorithm\n-        if (loader.getSignatureAlgorithm() != null) {\n-            SignatureAlgorithm loadedSignatureAlgorithm =\n-                    SignatureAlgorithm.valueOf(loader.getSignatureAlgorithm());\n-            sigAlgo = loadedSignatureAlgorithm.getAlgorithm();\n-            jceSigAlgo = JCEMapper.translateURItoJCEID(sigAlgo);\n-            if (jceSigAlgo == null) {\n-                LOG.warn(\"Signature algorithm {} is not valid. Using default algorithm instead.\",\n-                        loader.getSignatureAlgorithm());\n-                sigAlgo = null;\n-            }\n-        }\n-\n-        if (sigAlgo == null) {\n-            sigAlgo = SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA1;\n-            String pubKeyAlgo = loader.getCredential().getPublicKey().getAlgorithm();\n-            if (pubKeyAlgo.equalsIgnoreCase(\"DSA\")) {\n-                sigAlgo = SignatureConstants.ALGO_ID_SIGNATURE_DSA_SHA1;\n-            } else if (pubKeyAlgo.equalsIgnoreCase(\"EC\")) {\n-                sigAlgo = SignatureConstants.ALGO_ID_SIGNATURE_ECDSA_SHA1;\n-            }\n-            jceSigAlgo = JCEMapper.translateURItoJCEID(sigAlgo);\n-        }\n-\n-        callbackHandler = new SAMLSPCallbackHandler(loader.getKeyPass());\n-    }\n-\n-    public String getSigAlgo() {\n-        return sigAlgo;\n-    }\n-\n-    public static void write(final Writer writer, final XMLObject object, final boolean signObject)\n-            throws TransformerConfigurationException, WSSecurityException, TransformerException {\n-\n-        Transformer transformer = TRANSFORMER_FACTORY.newTransformer();\n-        StreamResult streamResult = new StreamResult(writer);\n-        DOMSource source = new DOMSource(OpenSAMLUtil.toDom(object, null, signObject));\n-        transformer.transform(source, streamResult);\n-    }\n-\n-    public static XMLObject read(final boolean useDeflateEncoding, final String response)\n-            throws DataFormatException, UnsupportedEncodingException, XMLStreamException, WSSecurityException {\n-\n-        InputStream tokenStream;\n-        byte[] deflatedToken = Base64.getDecoder().decode(response);\n-        tokenStream = useDeflateEncoding\n-                ? new DeflateEncoderDecoder().inflateToken(deflatedToken)\n-                : new ByteArrayInputStream(deflatedToken);\n-\n-        // parse the provided SAML response\n-        Document responseDoc = StaxUtils.read(new InputStreamReader(tokenStream, StandardCharsets.UTF_8));\n-        XMLObject responseObject = OpenSAMLUtil.fromDom(responseDoc.getDocumentElement());\n-\n-        if (LOG.isDebugEnabled()) {\n-            try {\n-                StringWriter writer = new StringWriter();\n-                write(writer, responseObject, false);\n-                writer.close();\n-\n-                LOG.debug(\"Parsed SAML response: {}\", writer.toString());\n-            } catch (Exception e) {\n-                LOG.error(\"Could not log the received SAML response\", e);\n-            }\n-        }\n-\n-        return responseObject;\n-    }\n-\n-    public void sign(final SignableSAMLObject signableObject) throws SecurityException {\n-        org.opensaml.xmlsec.signature.Signature signature = OpenSAMLUtil.buildSignature();\n-        signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);\n-        signature.setSignatureAlgorithm(sigAlgo);\n-        signature.setSigningCredential(loader.getCredential());\n-        signature.setKeyInfo(keyInfoGenerator.generate(loader.getCredential()));\n-\n-        signableObject.setSignature(signature);\n-        signableObject.releaseDOM();\n-        signableObject.releaseChildrenDOM(true);\n-    }\n-\n-    public String sign(final String request, final String relayState)\n-            throws NoSuchAlgorithmException, WSSecurityException, InvalidKeyException, UnsupportedEncodingException,\n-            SignatureException {\n-\n-        Merlin crypto = new Merlin();\n-        crypto.setKeyStore(loader.getKeyStore());\n-        PrivateKey privateKey = crypto.getPrivateKey(loader.getCredential().getPublicKey(), callbackHandler);\n-\n-        java.security.Signature signature = java.security.Signature.getInstance(jceSigAlgo);\n-        signature.initSign(privateKey);\n-\n-        String requestToSign =\n-                SSOConstants.SAML_REQUEST + '=' + request + '&'\n-                + SSOConstants.RELAY_STATE + '=' + relayState + '&'\n-                + SSOConstants.SIG_ALG + '=' + URLEncoder.encode(sigAlgo, StandardCharsets.UTF_8);\n-        signature.update(requestToSign.getBytes(StandardCharsets.UTF_8));\n-        return Base64.getEncoder().encodeToString(signature.sign());\n-    }\n-\n-    public static String encode(final RequestAbstractType request, final boolean useDeflateEncoding)\n-            throws WSSecurityException, TransformerException, IOException {\n-\n-        StringWriter writer = new StringWriter();\n-        write(writer, request, true);\n-        writer.close();\n-\n-        String requestMessage = writer.toString();\n-        byte[] deflatedBytes;\n-        // not correct according to the spec but required by some IdPs.\n-        if (useDeflateEncoding) {\n-            deflatedBytes = new DeflateEncoderDecoder().\n-                    deflateToken(requestMessage.getBytes(StandardCharsets.UTF_8));\n-        } else {\n-            deflatedBytes = requestMessage.getBytes(StandardCharsets.UTF_8);\n-        }\n-\n-        return Base64.getEncoder().encodeToString(deflatedBytes);\n-    }\n-\n-    public SSOValidatorResponse validate(\n-            final Response samlResponse,\n-            final SAML2IdPEntity idp,\n-            final String assertionConsumerURL,\n-            final String requestId,\n-            final String spEntityID)\n-            throws WSSecurityException {\n-\n-        // validate the SAML response and, if needed, decrypt the provided assertion(s)\n-        Merlin crypto = new Merlin();\n-        crypto.setKeyStore(loader.getKeyStore());\n-        crypto.setTrustStore(idp.getTrustStore());\n-\n-        SAMLProtocolResponseValidator protocolValidator = new SAMLProtocolResponseValidator();\n-        protocolValidator.setKeyInfoMustBeAvailable(true);\n-        protocolValidator.validateSamlResponse(samlResponse, crypto, callbackHandler);\n-\n-        SAMLSSOResponseValidator ssoResponseValidator = new SAMLSSOResponseValidator();\n-        ssoResponseValidator.setAssertionConsumerURL(assertionConsumerURL);\n-        ssoResponseValidator.setIssuerIDP(idp.getId());\n-        ssoResponseValidator.setRequestId(requestId);\n-        ssoResponseValidator.setSpIdentifier(spEntityID);\n-        SSOValidatorResponse validatorResponse =\n-                ssoResponseValidator.validateSamlResponse(samlResponse, idp.getBindingType() == SAML2BindingType.POST);\n-\n-        if (LOG.isDebugEnabled()) {\n-            try {\n-                StringWriter writer = new StringWriter();\n-                write(writer, samlResponse, false);\n-                writer.close();\n-\n-                LOG.debug(\"SAML response with decrypted assertions: {}\", writer.toString());\n-            } catch (Exception e) {\n-                LOG.error(\"Could not log the SAML response with decrypted assertions\", e);\n-            }\n-        }\n-\n-        return validatorResponse;\n-    }\n-}"},{"sha":"33badc41d3d3f68eda5410b00624d370b7b56ac6","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAMLSPCallbackHandler.java","status":"removed","additions":0,"deletions":45,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAMLSPCallbackHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAMLSPCallbackHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAMLSPCallbackHandler.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,45 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic.saml2;\n-\n-import java.io.IOException;\n-import javax.security.auth.callback.Callback;\n-import javax.security.auth.callback.CallbackHandler;\n-import javax.security.auth.callback.UnsupportedCallbackException;\n-import org.apache.wss4j.common.ext.WSPasswordCallback;\n-\n-public class SAMLSPCallbackHandler implements CallbackHandler {\n-\n-    private final String keyPass;\n-\n-    public SAMLSPCallbackHandler(final String keyPass) {\n-        this.keyPass = keyPass;\n-    }\n-\n-    @Override\n-    public void handle(final Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n-        for (Callback callback : callbacks) {\n-            if (callback instanceof WSPasswordCallback) {\n-                WSPasswordCallback wspc = (WSPasswordCallback) callback;\n-                wspc.setPassword(keyPass);\n-            }\n-        }\n-    }\n-\n-}"},{"sha":"68cacbd951298a875ca92be7e329192945222835","filename":"ext/saml2sp/pom.xml","status":"removed","additions":0,"deletions":121,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpom.xml?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,121 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.apache.syncope</groupId>\n-    <artifactId>syncope-ext</artifactId>\n-    <version>3.0.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <name>Apache Syncope Ext: SAML2 SP</name>\n-  <description>Apache Syncope Ext: SAML2 SP</description>\n-  <groupId>org.apache.syncope.ext</groupId>\n-  <artifactId>syncope-ext-saml2sp</artifactId>\n-  <packaging>pom</packaging>\n-  \n-  <properties>\n-    <opensaml.version>3.3.1</opensaml.version>\n-    <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n-  </properties>\n-\n-  <dependencyManagement>\n-    <dependencies>\n-      <!-- OpenSAML -->\n-      <dependency>\n-        <groupId>org.opensaml</groupId>\n-        <artifactId>opensaml-saml-api</artifactId>\n-        <version>${opensaml.version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>org.opensaml</groupId>\n-            <artifactId>opensaml-storage-api</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.opensaml</groupId>\n-            <artifactId>opensaml-messaging-api</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.apache.velocity</groupId>\n-            <artifactId>velocity</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.apache.httpcomponents</groupId>\n-            <artifactId>httpclient</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>com.google.code.findbugs</groupId>\n-            <artifactId>jsr305</artifactId>\n-          </exclusion>\n-        </exclusions>\n-      </dependency>\n-      <dependency>\n-        <groupId>org.opensaml</groupId>\n-        <artifactId>opensaml-saml-impl</artifactId>\n-        <version>${opensaml.version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>org.opensaml</groupId>\n-            <artifactId>opensaml-soap-impl</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.opensaml</groupId>\n-            <artifactId>opensaml-storage-api</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.opensaml</groupId>\n-            <artifactId>opensaml-messaging-api</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.apache.velocity</groupId>\n-            <artifactId>velocity</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.apache.httpcomponents</groupId>\n-            <artifactId>httpclient</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>com.google.code.findbugs</groupId>\n-            <artifactId>jsr305</artifactId>\n-          </exclusion>\n-        </exclusions>\n-      </dependency>\n-      <!-- /OpenSAML -->\n-    </dependencies>\n-  </dependencyManagement>\n-\n-  <modules>\n-    <module>common-lib</module>\n-    <module>persistence-api</module>\n-    <module>persistence-jpa</module>\n-    <module>provisioning-api</module>\n-    <module>provisioning-java</module>\n-    <module>rest-api</module>\n-    <module>logic</module>\n-    <module>rest-cxf</module>\n-    <module>agent</module>\n-    <module>client-console</module>\n-    <module>client-enduser</module>\n-    <module>client-common-ui</module>\n-  </modules>\n-\n-</project>"},{"sha":"ec54a9b33277618b0c2ff7f8e3b87550c860a6f5","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultRequestedAuthnContextProvider.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultRequestedAuthnContextProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultRequestedAuthnContextProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultRequestedAuthnContextProvider.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,41 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java;\n-\n-import org.apache.syncope.core.provisioning.api.RequestedAuthnContextProvider;\n-import org.opensaml.saml.saml2.core.AuthnContext;\n-import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n-import org.opensaml.saml.saml2.core.AuthnContextComparisonTypeEnumeration;\n-import org.opensaml.saml.saml2.core.RequestedAuthnContext;\n-import org.opensaml.saml.saml2.core.impl.AuthnContextClassRefBuilder;\n-import org.opensaml.saml.saml2.core.impl.RequestedAuthnContextBuilder;\n-\n-public class DefaultRequestedAuthnContextProvider implements RequestedAuthnContextProvider {\n-\n-    @Override\n-    public RequestedAuthnContext provide() {\n-        AuthnContextClassRef authnContextClassRef = new AuthnContextClassRefBuilder().buildObject();\n-        authnContextClassRef.setAuthnContextClassRef(AuthnContext.PPT_AUTHN_CTX);\n-        RequestedAuthnContext requestedAuthnContext = new RequestedAuthnContextBuilder().buildObject();\n-        requestedAuthnContext.setComparison(AuthnContextComparisonTypeEnumeration.EXACT);\n-        requestedAuthnContext.getAuthnContextClassRefs().add(authnContextClassRef);\n-\n-        return requestedAuthnContext;\n-    }\n-}"},{"sha":"4c246b282072ec85c8a496180c37f91a1ddddcbe","filename":"ext/saml2sp4ui/client-common-ui/pom.xml","status":"renamed","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,24 +23,29 @@ under the License.\n \n   <parent>\n     <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <artifactId>syncope-ext-saml2sp4ui</artifactId>\n     <version>3.0.0-SNAPSHOT</version>\n   </parent>\n \n-  <name>Apache Syncope Ext: SAML2 SP Common UI Lib</name>\n-  <description>Apache Syncope Ext: SAML2 SP Common UI Lib</description>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-client-common-ui</artifactId>\n+  <name>Apache Syncope Ext: SAML2 SP4UI Common UI</name>\n+  <description>Apache Syncope Ext: SAML2 SP4UI Common UI</description>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-client-common-ui</artifactId>\n   <packaging>jar</packaging>\n    \n   <properties>\n     <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n   </properties>\n \n   <dependencies>\n+    <dependency> \n+      <groupId>javax.servlet</groupId> \n+      <artifactId>javax.servlet-api</artifactId> \n+    </dependency>\n+\n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-rest-api</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-rest-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n ","previous_filename":"ext/saml2sp/client-common-ui/pom.xml"},{"sha":"7b00bdbd9a8c1c8b7b3c6ec031eb4e4b5f44f7fb","filename":"ext/saml2sp4ui/client-common-ui/src/main/java/org/apache/syncope/client/ui/commons/SAML2SP4UIConstants.java","status":"renamed","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FSAML2SP4UIConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FSAML2SP4UIConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FSAML2SP4UIConstants.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,23 +16,23 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.commons;\n+package org.apache.syncope.client.ui.commons;\n \n-public final class ConnIdSpecialName {\n+public final class SAML2SP4UIConstants {\n \n-    public static final String ENABLE = \"__ENABLE__\";\n+    public static final String URL_CONTEXT = \"saml2sp4ui\";\n \n-    public static final String NAME = \"__NAME__\";\n+    public static final String PARAM_IDP = \"idp\";\n \n-    public static final String UID = \"__UID__\";\n+    public static final String SAML2SP4UI_JWT = \"saml2sp4ui.jwt\";\n \n-    public static final String PASSWORD = \"__PASSWORD__\";\n+    public static final String SAML2SP4UI_SLO_SUPPORTED = \"saml2sp4ui.sloSupported\";\n \n-    public static final String ACCOUNT = \"__ACCOUNT__\";\n+    public static final String SAML2SP4UI_IDP_ENTITY_ID = \"saml2sp4ui.idpEntityID\";\n \n-    public static final String GROUP = \"__GROUP__\";\n+    public static final String SAML2SP4UI_NEW_USER = \"saml2sp4ui.newUser\";\n \n-    private ConnIdSpecialName() {\n+    private SAML2SP4UIConstants() {\n         // private constructor for static utility class\n     }\n }","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/ConnIdSpecialName.java"},{"sha":"79381106d3e90fba2cae857374797a6e4a2f8879","filename":"ext/saml2sp4ui/client-common-ui/src/main/java/org/apache/syncope/client/ui/commons/panels/AbstractSAMLSSOLoginFormPanel.java","status":"renamed","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fpanels%2FAbstractSAMLSSOLoginFormPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fpanels%2FAbstractSAMLSSOLoginFormPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fpanels%2FAbstractSAMLSSOLoginFormPanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,17 +16,15 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.common.ui.panels;\n+package org.apache.syncope.client.ui.commons.panels;\n \n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n import java.util.List;\n import org.apache.syncope.client.ui.commons.BaseSession;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.client.ui.commons.panels.BaseSSOLoginFormPanel;\n-import org.apache.syncope.common.lib.to.SAML2IdPTO;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPService;\n+import org.apache.syncope.common.lib.to.SAML24UIIdPTO;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n@@ -37,6 +35,7 @@\n import org.apache.wicket.request.http.handler.RedirectRequestHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.syncope.common.rest.api.service.SAML2SP4UIIdPService;\n \n public abstract class AbstractSAMLSSOLoginFormPanel extends BaseSSOLoginFormPanel {\n \n@@ -47,28 +46,30 @@ public abstract class AbstractSAMLSSOLoginFormPanel extends BaseSSOLoginFormPane\n     public AbstractSAMLSSOLoginFormPanel(final String id, final BaseSession session) {\n         super(id);\n \n-        List<SAML2IdPTO> available = session.getAnonymousService(SAML2IdPService.class).list();\n+        List<SAML24UIIdPTO> available = session.getAnonymousService(SAML2SP4UIIdPService.class).list();\n \n-        final Model<SAML2IdPTO> model = new Model<>();\n-        AjaxDropDownChoicePanel<SAML2IdPTO> idps =\n+        final Model<SAML24UIIdPTO> model = new Model<>();\n+        AjaxDropDownChoicePanel<SAML24UIIdPTO> idps =\n                 new AjaxDropDownChoicePanel<>(\"idps\", \"SAML 2.0\", model, false);\n         idps.setChoices(available);\n-        idps.setChoiceRenderer(new IChoiceRenderer<SAML2IdPTO>() {\n+        idps.setChoiceRenderer(new IChoiceRenderer<SAML24UIIdPTO>() {\n \n             private static final long serialVersionUID = 1814750973898916102L;\n \n             @Override\n-            public Object getDisplayValue(final SAML2IdPTO object) {\n+            public Object getDisplayValue(final SAML24UIIdPTO object) {\n                 return object.getName();\n             }\n \n             @Override\n-            public String getIdValue(final SAML2IdPTO object, final int index) {\n+            public String getIdValue(final SAML24UIIdPTO object, final int index) {\n                 return object.getEntityID();\n             }\n \n             @Override\n-            public SAML2IdPTO getObject(final String id, final IModel<? extends List<? extends SAML2IdPTO>> choices) {\n+            public SAML24UIIdPTO getObject(\n+                    final String id, final IModel<? extends List<? extends SAML24UIIdPTO>> choices) {\n+\n                 return choices.getObject().stream().\n                         filter(idp -> idp.getEntityID().equals(id)).findFirst().orElse(null);\n             }\n@@ -82,7 +83,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 if (model.getObject() != null) {\n                     try {\n                         RequestCycle.get().scheduleRequestHandlerAfterCurrent(new RedirectRequestHandler(\n-                                UrlUtils.rewriteToContextRelative(\"saml2sp/login?idp=\"\n+                                UrlUtils.rewriteToContextRelative(\"saml2sp4ui/login?idp=\"\n                                         + URLEncoder.encode(\n                                                 model.getObject().getEntityID(), StandardCharsets.UTF_8),\n                                         RequestCycle.get())));\n@@ -96,5 +97,4 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         idps.setVisible(!available.isEmpty());\n         add(idps);\n     }\n-\n }","previous_filename":"ext/saml2sp/client-common-ui/src/main/java/org/apache/syncope/client/common/ui/panels/AbstractSAMLSSOLoginFormPanel.java"},{"sha":"39cdc5c41fc750a46154d028219bb1d0c07f9ed9","filename":"ext/saml2sp4ui/client-common-ui/src/main/java/org/apache/syncope/client/ui/commons/resources/saml2sp4ui/AbstractSAML2SP4UIResource.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FAbstractSAML2SP4UIResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FAbstractSAML2SP4UIResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FAbstractSAML2SP4UIResource.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.ui.commons.resources.saml2sp4ui;\n+\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.stream.Stream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n+import org.apache.syncope.common.lib.saml2.SAML2Constants;\n+import org.apache.syncope.common.lib.saml2.SAML2Request;\n+import org.apache.syncope.common.lib.saml2.SAML2Response;\n+import org.apache.wicket.Session;\n+import org.apache.wicket.request.resource.AbstractResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractSAML2SP4UIResource extends AbstractResource {\n+\n+    private static final long serialVersionUID = 865306127846395310L;\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractSAML2SP4UIResource.class);\n+\n+    protected String spEntityID(final Attributes attributes) {\n+        HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n+        return StringUtils.substringBefore(request.getRequestURL().toString(), SAML2SP4UIConstants.URL_CONTEXT);\n+    }\n+\n+    protected ResourceResponse send(final Attributes attributes, final SAML2Request request) {\n+        Session.get().setAttribute(SAML2SP4UIConstants.SAML2SP4UI_IDP_ENTITY_ID, request.getIdpEntityID());\n+\n+        ResourceResponse response = new ResourceResponse();\n+        response.getHeaders().addHeader(HttpHeaders.CACHE_CONTROL, \"no-cache, no-store\");\n+        response.getHeaders().addHeader(\"Pragma\", \"no-cache\");\n+        switch (request.getBindingType()) {\n+            case REDIRECT:\n+                response.setStatusCode(Response.Status.FOUND.getStatusCode());\n+                response.getHeaders().addHeader(HttpHeaders.LOCATION, request.getContent());\n+                break;\n+\n+            case POST:\n+            default:\n+                response.setContentType(MediaType.TEXT_HTML);\n+                response.setWriteCallback(new WriteCallback() {\n+\n+                    @Override\n+                    public void writeData(final Attributes attributes) throws IOException {\n+                        attributes.getResponse().\n+                                write(new String(Base64.getMimeDecoder().decode(request.getContent())));\n+                    }\n+                });\n+        }\n+        return response;\n+    }\n+\n+    protected SAML2Response buildResponse(\n+            final Attributes attributes,\n+            final String samlResponse,\n+            final String relayState) {\n+\n+        SAML2Response response = new SAML2Response();\n+\n+        response.setIdpEntityID((String) Session.get().getAttribute(SAML2SP4UIConstants.SAML2SP4UI_IDP_ENTITY_ID));\n+        if (StringUtils.isBlank(response.getIdpEntityID())) {\n+            response.setIdpEntityID(attributes.getRequest().getQueryParameters().\n+                    getParameterValue(SAML2SP4UIConstants.SAML2SP4UI_IDP_ENTITY_ID).toOptionalString());\n+            if (StringUtils.isBlank(response.getIdpEntityID())) {\n+                Stream.of(((HttpServletRequest) attributes.getRequest().getContainerRequest()).getCookies()).\n+                        filter(cookie -> SAML2SP4UIConstants.SAML2SP4UI_IDP_ENTITY_ID.equals(cookie.getName())).\n+                        findFirst().ifPresent(cookie -> response.setIdpEntityID(cookie.getValue()));\n+            }\n+        }\n+\n+        response.setSpEntityID(spEntityID(attributes));\n+        response.setUrlContext(SAML2SP4UIConstants.URL_CONTEXT);\n+        response.setSamlResponse(samlResponse);\n+        response.setRelayState(relayState);\n+\n+        return response;\n+    }\n+\n+    protected SAML2Response extract(final Attributes attributes) {\n+        String samlResponse = attributes.getRequest().getRequestParameters().\n+                getParameterValue(SAML2Constants.SAML_RESPONSE).toOptionalString();\n+        LOG.debug(\"Received SAML Response: {}\", samlResponse);\n+\n+        String relayState = attributes.getRequest().getRequestParameters().\n+                getParameterValue(SAML2Constants.RELAY_STATE).toOptionalString();\n+        LOG.debug(\"Received Relay State: {}\", relayState);\n+\n+        return buildResponse(attributes, samlResponse, relayState);\n+    }\n+}"},{"sha":"2186c882dd2094878f86118f098aad0b48a7e235","filename":"ext/saml2sp4ui/client-common-ui/src/main/java/org/apache/syncope/client/ui/commons/resources/saml2sp4ui/AssertionConsumerResource.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FAssertionConsumerResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FAssertionConsumerResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FAssertionConsumerResource.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.ui.commons.resources.saml2sp4ui;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.syncope.client.ui.commons.BaseSession;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n+import org.apache.syncope.common.lib.saml2.SAML2LoginResponse;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.rest.api.service.SAML2SP4UIService;\n+import org.apache.wicket.RestartResponseException;\n+import org.apache.wicket.Session;\n+import org.apache.wicket.WicketRuntimeException;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+\n+public abstract class AssertionConsumerResource extends AbstractSAML2SP4UIResource {\n+\n+    private static final long serialVersionUID = 3858609271031003370L;\n+\n+    private static final ObjectMapper MAPPER =\n+            new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n+\n+    protected abstract Class<? extends WebPage> getLoginPageClass();\n+\n+    protected abstract Class<? extends WebPage> getSelfRegPageClass();\n+\n+    @Override\n+    protected ResourceResponse newResourceResponse(final Attributes attributes) {\n+        SAML2SP4UIService service = BaseSession.class.cast(Session.get()).getAnonymousService(SAML2SP4UIService.class);\n+        SAML2LoginResponse saml2Response = service.validateLoginResponse(extract(attributes));\n+\n+        if (saml2Response.isSelfReg()) {\n+            UserTO newUser = new UserTO();\n+            newUser.setUsername(saml2Response.getUsername());\n+            newUser.getPlainAttrs().addAll(saml2Response.getAttrs());\n+\n+            try {\n+                throw new RestartResponseException(\n+                        getSelfRegPageClass(),\n+                        new PageParameters().\n+                                set(SAML2SP4UIConstants.SAML2SP4UI_NEW_USER, MAPPER.writeValueAsString(newUser)));\n+            } catch (JsonProcessingException e) {\n+                LOG.error(\"Could not serialize new user {}\", newUser, e);\n+                throw new WicketRuntimeException(e);\n+            }\n+        } else {\n+            throw new RestartResponseException(\n+                    getLoginPageClass(),\n+                    new PageParameters().\n+                            set(SAML2SP4UIConstants.SAML2SP4UI_JWT, saml2Response.getAccessToken()).\n+                            set(SAML2SP4UIConstants.SAML2SP4UI_SLO_SUPPORTED, saml2Response.isSloSupported()));\n+        }\n+    }\n+}"},{"sha":"4c7d8b72c72e9835175c2cbf17cb458fded4c0bf","filename":"ext/saml2sp4ui/client-common-ui/src/main/java/org/apache/syncope/client/ui/commons/resources/saml2sp4ui/LoginResource.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FLoginResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FLoginResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FLoginResource.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.ui.commons.resources.saml2sp4ui;\n+\n+import org.apache.syncope.client.ui.commons.BaseSession;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n+import org.apache.syncope.client.ui.commons.annotations.Resource;\n+import org.apache.syncope.common.lib.saml2.SAML2Request;\n+import org.apache.syncope.common.rest.api.service.SAML2SP4UIService;\n+import org.apache.wicket.Session;\n+\n+@Resource(\n+        key = SAML2SP4UIConstants.URL_CONTEXT + \".login\",\n+        path = \"/\" + SAML2SP4UIConstants.URL_CONTEXT + \"/login\")\n+public class LoginResource extends AbstractSAML2SP4UIResource {\n+\n+    private static final long serialVersionUID = 2722386521163557650L;\n+\n+    @Override\n+    protected ResourceResponse newResourceResponse(final Attributes attributes) {\n+        String idp = attributes.getRequest().getQueryParameters().\n+                getParameterValue(SAML2SP4UIConstants.PARAM_IDP).toString();\n+\n+        SAML2SP4UIService service = BaseSession.class.cast(Session.get()).getAnonymousService(SAML2SP4UIService.class);\n+        SAML2Request loginRequest =\n+                service.createLoginRequest(spEntityID(attributes), SAML2SP4UIConstants.URL_CONTEXT, idp);\n+        return send(attributes, loginRequest);\n+    }\n+}"},{"sha":"91b7136c40de5f2df5c1ea72a1cba4b553dad857","filename":"ext/saml2sp4ui/client-common-ui/src/main/java/org/apache/syncope/client/ui/commons/resources/saml2sp4ui/LogoutResource.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FLogoutResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FLogoutResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FLogoutResource.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.ui.commons.resources.saml2sp4ui;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.HttpMethod;\n+import org.apache.syncope.client.ui.commons.BaseSession;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n+import org.apache.syncope.common.lib.saml2.SAML2Constants;\n+import org.apache.syncope.common.lib.saml2.SAML2Request;\n+import org.apache.syncope.common.lib.saml2.SAML2Response;\n+import org.apache.syncope.common.rest.api.service.SAML2SP4UIService;\n+import org.apache.wicket.RestartResponseException;\n+import org.apache.wicket.Session;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+\n+public abstract class LogoutResource extends AbstractSAML2SP4UIResource {\n+\n+    private static final long serialVersionUID = 4865223550672539533L;\n+\n+    protected abstract Class<? extends WebPage> getLogoutPageClass();\n+\n+    private ResourceResponse doLogout(final SAML2Response saml2Response) {\n+        SAML2SP4UIService service = BaseSession.class.cast(Session.get()).getAnonymousService(SAML2SP4UIService.class);\n+        service.validateLogoutResponse(saml2Response);\n+\n+        throw new RestartResponseException(getLogoutPageClass(), new PageParameters());\n+    }\n+\n+    @Override\n+    protected ResourceResponse newResourceResponse(final Attributes attributes) {\n+        HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n+        HttpServletResponse response = (HttpServletResponse) attributes.getResponse().getContainerResponse();\n+\n+        switch (request.getMethod()) {\n+            case HttpMethod.GET:\n+                String samlResponse = request.getParameter(SAML2Constants.SAML_RESPONSE);\n+                String relayState = request.getParameter(SAML2Constants.RELAY_STATE);\n+                if (samlResponse == null) {\n+                    // create logout request\n+                    Cookie idpEntityID = new Cookie(\n+                            SAML2SP4UIConstants.SAML2SP4UI_IDP_ENTITY_ID,\n+                            request.getParameter(SAML2SP4UIConstants.SAML2SP4UI_IDP_ENTITY_ID));\n+                    idpEntityID.setMaxAge(-1);\n+                    response.addCookie(idpEntityID);\n+\n+                    SAML2SP4UIService service =\n+                            BaseSession.class.cast(Session.get()).getService(SAML2SP4UIService.class);\n+                    SAML2Request logoutRequest = service.createLogoutRequest(\n+                            spEntityID(attributes), SAML2SP4UIConstants.URL_CONTEXT);\n+\n+                    Session.get().invalidate();\n+\n+                    return send(attributes, logoutRequest);\n+                } else {\n+                    // process REDIRECT binding logout response\n+                    return doLogout(buildResponse(attributes, samlResponse, relayState));\n+                }\n+\n+            case HttpMethod.POST:\n+                return doLogout(extract(attributes));\n+\n+            default:\n+                throw new UnsupportedOperationException(\"Only GET and POST are supported\");\n+        }\n+    }\n+}"},{"sha":"6f41b1b911e68397f852c663148bc2950c78a5ec","filename":"ext/saml2sp4ui/client-common-ui/src/main/java/org/apache/syncope/client/ui/commons/resources/saml2sp4ui/MetadataResource.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FMetadataResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FMetadataResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FMetadataResource.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.ui.commons.resources.saml2sp4ui;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.ui.commons.BaseSession;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n+import org.apache.syncope.client.ui.commons.annotations.Resource;\n+import org.apache.syncope.common.rest.api.service.SAML2SP4UIService;\n+import org.apache.wicket.Session;\n+\n+@Resource(\n+        key = SAML2SP4UIConstants.URL_CONTEXT + \".metadata\",\n+        path = \"/\" + SAML2SP4UIConstants.URL_CONTEXT + \"/metadata\")\n+public class MetadataResource extends AbstractSAML2SP4UIResource {\n+\n+    private static final long serialVersionUID = -1694048805459648725L;\n+\n+    @Override\n+    protected ResourceResponse newResourceResponse(final Attributes attributes) {\n+        SAML2SP4UIService service = BaseSession.class.cast(Session.get()).getAnonymousService(SAML2SP4UIService.class);\n+        WebClient.client(service).accept(MediaType.APPLICATION_XML_TYPE).type(MediaType.APPLICATION_XML_TYPE);\n+        Response metadataResponse = service.getMetadata(spEntityID(attributes), SAML2SP4UIConstants.URL_CONTEXT);\n+        WebClient.client(service).reset();\n+\n+        ResourceResponse response = new ResourceResponse();\n+        response.disableCaching();\n+        response.setContentType(MediaType.APPLICATION_XML);\n+        response.setTextEncoding(StandardCharsets.UTF_8.name());\n+        response.setWriteCallback(new WriteCallback() {\n+\n+            @Override\n+            public void writeData(final Attributes attributes) throws IOException {\n+                writeStream(attributes, (InputStream) metadataResponse.getEntity());\n+            }\n+        });\n+\n+        return response;\n+    }\n+}"},{"sha":"b79cd89da0e9553f641e50690e87028680e8d87d","filename":"ext/saml2sp4ui/client-common-ui/src/main/resources/org/apache/syncope/client/ui/commons/panels/AbstractSAMLSSOLoginFormPanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fpanels%2FAbstractSAMLSSOLoginFormPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fpanels%2FAbstractSAMLSSOLoginFormPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fpanels%2FAbstractSAMLSSOLoginFormPanel.html?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"ext/saml2sp/client-common-ui/src/main/resources/org/apache/syncope/client/common/ui/panels/AbstractSAMLSSOLoginFormPanel.html"},{"sha":"6408f32b3341f51cfd9debdac3cea0d5c58fe63b","filename":"ext/saml2sp4ui/client-console/pom.xml","status":"renamed","additions":9,"deletions":14,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,14 +23,14 @@ under the License.\n \n   <parent>\n     <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <artifactId>syncope-ext-saml2sp4ui</artifactId>\n     <version>3.0.0-SNAPSHOT</version>\n   </parent>\n \n-  <name>Apache Syncope Ext: SAML2 SP Client Console</name>\n-  <description>Apache Syncope Ext: SAML2 SP Client Console</description>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-client-console</artifactId>\n+  <name>Apache Syncope Ext: SAML2 SP4UI Client Console</name>\n+  <description>Apache Syncope Ext: SAML2 SP4UI Client Console</description>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-client-console</artifactId>\n   <packaging>jar</packaging>\n   \n   <properties>\n@@ -44,19 +44,14 @@ under the License.\n     </dependency>\n \n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-agent</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.client.idm</groupId>\n-      <artifactId>syncope-client-idm-console</artifactId>\n+      <groupId>org.apache.syncope.client.idrepo</groupId>\n+      <artifactId>syncope-client-idrepo-console</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     \n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-client-common-ui</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-client-common-ui</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n   </dependencies>","previous_filename":"ext/saml2sp/client-console/pom.xml"},{"sha":"68b38e361e1b930629ac663a52813f8a14e8a453","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SP4UI.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -22,24 +22,24 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.syncope.client.console.panels.SAML2IdPsDirectoryPanel;\n import org.apache.syncope.client.console.panels.SAML2SPPanel;\n-import org.apache.syncope.common.lib.types.SAML2SPEntitlement;\n+import org.apache.syncope.common.lib.types.SAML2SP4UIEntitlement;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n-@ExtPage(label = \"SAML 2.0 SP\", icon = \"fas fa-sign-in-alt\",\n-        listEntitlement = SAML2SPEntitlement.IDP_READ, priority = 400)\n-public class SAML2SP extends BaseExtPage {\n+@ExtPage(label = \"SAML 2.0 SP4UI\", icon = \"fas fa-sign-in-alt\",\n+        listEntitlement = SAML2SP4UIEntitlement.IDP_READ, priority = 400)\n+public class SAML2SP4UI extends BaseExtPage {\n \n     private static final long serialVersionUID = -4837201407211278956L;\n \n-    public SAML2SP(final PageParameters parameters) {\n+    public SAML2SP4UI(final PageParameters parameters) {\n         super(parameters);\n \n         body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));","previous_filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SP.java"},{"sha":"2a7f5c09734a80a80dcbdf8f137fa96a88c11f58","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SPBeforeLogout.java","status":"renamed","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SPBeforeLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SPBeforeLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SPBeforeLogout.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -18,20 +18,29 @@\n  */\n package org.apache.syncope.client.console.pages;\n \n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n+import org.apache.wicket.Session;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.request.UrlUtils;\n import org.apache.wicket.request.cycle.RequestCycle;\n import org.apache.wicket.request.http.handler.RedirectRequestHandler;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n public class SAML2SPBeforeLogout extends WebPage {\n \n     private static final long serialVersionUID = 4666948447239743855L;\n \n-    public SAML2SPBeforeLogout() {\n-        super();\n+    public SAML2SPBeforeLogout(final PageParameters parameters) {\n+        super(parameters);\n \n+        String idpEntityId = URLEncoder.encode(\n+                Session.get().getAttribute(SAML2SP4UIConstants.SAML2SP4UI_IDP_ENTITY_ID).toString(),\n+                StandardCharsets.UTF_8);\n         RequestCycle.get().scheduleRequestHandlerAfterCurrent(new RedirectRequestHandler(\n-                UrlUtils.rewriteToContextRelative(\"saml2sp/logout\", RequestCycle.get())));\n+                UrlUtils.rewriteToContextRelative(SAML2SP4UIConstants.URL_CONTEXT + \"/logout\"\n+                        + \"?\" + SAML2SP4UIConstants.SAML2SP4UI_IDP_ENTITY_ID + \"=\" + idpEntityId,\n+                        RequestCycle.get())));\n     }\n-\n }","previous_filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SPBeforeLogout.java"},{"sha":"2d3ca44a0fc006b4e6ead70000c4801773774354","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SPLogin.java","status":"renamed","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SPLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SPLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SPLogin.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -21,8 +21,8 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n import org.apache.wicket.authentication.IAuthenticationStrategy;\n-import org.apache.wicket.protocol.http.servlet.ServletWebRequest;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -39,8 +39,7 @@ public class SAML2SPLogin extends WebPage {\n     public SAML2SPLogin(final PageParameters parameters) {\n         super(parameters);\n \n-        String token = (String) ((ServletWebRequest) getRequest()).getContainerRequest().\n-                getSession().getAttribute(org.apache.syncope.ext.saml2lsp.agent.Constants.SAML2SPJWT);\n+        String token = parameters.get(SAML2SP4UIConstants.SAML2SP4UI_JWT).toOptionalString();\n         if (StringUtils.isBlank(token)) {\n             LOG.error(\"No JWT found, redirecting to default greeter\");\n \n@@ -52,7 +51,7 @@ public SAML2SPLogin(final PageParameters parameters) {\n         IAuthenticationStrategy strategy = getApplication().getSecuritySettings().getAuthenticationStrategy();\n \n         if (SyncopeConsoleSession.get().authenticate(token)) {\n-            if (parameters.get(\"sloSupported\").toBoolean(false)) {\n+            if (parameters.get(SAML2SP4UIConstants.SAML2SP4UI_SLO_SUPPORTED).toBoolean(false)) {\n                 SyncopeConsoleSession.get().setAttribute(Constants.BEFORE_LOGOUT_PAGE, SAML2SPBeforeLogout.class);\n             }\n ","previous_filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SPLogin.java"},{"sha":"93c5de7c3e0b8425a084dd1aeac767f16640637a","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SPLogout.java","status":"renamed","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SPLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SPLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SPLogout.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.pages;\n \n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.wicket.markup.html.WebPage;\n \n public class SAML2SPLogout extends WebPage {\n@@ -28,12 +27,6 @@ public class SAML2SPLogout extends WebPage {\n     public SAML2SPLogout() {\n         super();\n \n-        // this is needed because the actual logout was already performed by the SAML agent\n-        SyncopeConsoleSession.get().cleanup();\n-\n-        SyncopeConsoleSession.get().invalidate();\n-\n         setResponsePage(getApplication().getHomePage());\n     }\n-\n }","previous_filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SPLogout.java"},{"sha":"c7633e821204142ade152b593d048631c49f74fd","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SPSelfReg.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SPSelfReg.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SPSelfReg.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SPSelfReg.java?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SPSelfReg.java"},{"sha":"449795fc4654256e066fbb8336b91e5de8cf4f9f","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/panels/ImportMetadata.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImportMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImportMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImportMetadata.java?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/panels/ImportMetadata.java"},{"sha":"cb3649f4f46af8ba57ba2cc25e45ad1f15b2483e","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.java","status":"renamed","additions":34,"deletions":38,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -50,10 +50,10 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.lib.to.SAML24UIIdPTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.SAML2SPEntitlement;\n+import org.apache.syncope.common.lib.types.SAML2SP4UIEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -70,7 +70,7 @@\n import org.apache.wicket.model.StringResourceModel;\n \n public class SAML2IdPsDirectoryPanel extends DirectoryPanel<\n-        SAML2IdPTO, SAML2IdPTO, SAML2IdPsProvider, SAML2IdPsRestClient> {\n+        SAML24UIIdPTO, SAML24UIIdPTO, SAML2IdPsProvider, SAML2IdPsRestClient> {\n \n     private static final long serialVersionUID = 4792356089584116041L;\n \n@@ -81,16 +81,16 @@ public class SAML2IdPsDirectoryPanel extends DirectoryPanel<\n     private final BaseModal<Serializable> templateModal;\n \n     public SAML2IdPsDirectoryPanel(final String id, final PageReference pageRef) {\n-        super(id, new Builder<SAML2IdPTO, SAML2IdPTO, SAML2IdPsRestClient>(new SAML2IdPsRestClient(), pageRef) {\n+        super(id, new Builder<SAML24UIIdPTO, SAML24UIIdPTO, SAML2IdPsRestClient>(new SAML2IdPsRestClient(), pageRef) {\n \n             private static final long serialVersionUID = 8517982765290075155L;\n \n             @Override\n-            protected WizardMgtPanel<SAML2IdPTO> newInstance(final String id, final boolean wizardInModal) {\n+            protected WizardMgtPanel<SAML24UIIdPTO> newInstance(final String id, final boolean wizardInModal) {\n                 throw new UnsupportedOperationException();\n             }\n         }.disableCheckBoxes());\n-        this.addNewItemPanelBuilder(new SAML2IdPWizardBuilder(this, new SAML2IdPTO(), pageRef), false);\n+        this.addNewItemPanelBuilder(new SAML2IdPWizardBuilder(this, new SAML24UIIdPTO(), pageRef), false);\n \n         modal.addSubmitButton();\n         modal.size(Modal.Size.Large);\n@@ -153,16 +153,16 @@ protected SAML2IdPsProvider dataProvider() {\n     }\n \n     @Override\n-    protected ActionLinksTogglePanel<SAML2IdPTO> actionTogglePanel() {\n-        return new ActionLinksTogglePanel<SAML2IdPTO>(Constants.OUTER, pageRef) {\n+    protected ActionLinksTogglePanel<SAML24UIIdPTO> actionTogglePanel() {\n+        return new ActionLinksTogglePanel<SAML24UIIdPTO>(Constants.OUTER, pageRef) {\n \n             private static final long serialVersionUID = -7688359318035249200L;\n \n             @Override\n             public void updateHeader(final AjaxRequestTarget target, final Serializable modelObject) {\n-                if (modelObject instanceof SAML2IdPTO) {\n+                if (modelObject instanceof SAML24UIIdPTO) {\n                     setHeader(target,\n-                            StringUtils.abbreviate(((SAML2IdPTO) modelObject).getName(), HEADER_FIRST_ABBREVIATION));\n+                            StringUtils.abbreviate(((SAML24UIIdPTO) modelObject).getName(), HEADER_FIRST_ABBREVIATION));\n                 } else {\n                     super.updateHeader(target, modelObject);\n                 }\n@@ -181,16 +181,12 @@ protected Collection<ActionLink.ActionType> getBatches() {\n     }\n \n     @Override\n-    protected List<IColumn<SAML2IdPTO, String>> getColumns() {\n-        List<IColumn<SAML2IdPTO, String>> columns = new ArrayList<>();\n+    protected List<IColumn<SAML24UIIdPTO, String>> getColumns() {\n+        List<IColumn<SAML24UIIdPTO, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(new ResourceModel(\"key\"), \"key\", \"key\"));\n         columns.add(new PropertyColumn<>(new ResourceModel(\"name\"), \"name\", \"name\"));\n         columns.add(new PropertyColumn<>(new ResourceModel(\"entityID\"), \"entityID\", \"entityID\"));\n-        columns.add(new BooleanPropertyColumn<>(\n-                new ResourceModel(\"useDeflateEncoding\"), \"useDeflateEncoding\", \"useDeflateEncoding\"));\n-        columns.add(new BooleanPropertyColumn<>(\n-                new ResourceModel(\"supportUnsolicited\"), \"supportUnsolicited\", \"supportUnsolicited\"));\n         columns.add(new PropertyColumn<>(\n                 new ResourceModel(\"bindingType\"), \"bindingType\", \"bindingType\"));\n         columns.add(new BooleanPropertyColumn<>(\n@@ -200,16 +196,16 @@ protected List<IColumn<SAML2IdPTO, String>> getColumns() {\n     }\n \n     @Override\n-    public ActionsPanel<SAML2IdPTO> getActions(final IModel<SAML2IdPTO> model) {\n-        final ActionsPanel<SAML2IdPTO> panel = super.getActions(model);\n+    public ActionsPanel<SAML24UIIdPTO> getActions(final IModel<SAML24UIIdPTO> model) {\n+        final ActionsPanel<SAML24UIIdPTO> panel = super.getActions(model);\n \n-        panel.add(new ActionLink<SAML2IdPTO>() {\n+        panel.add(new ActionLink<SAML24UIIdPTO>() {\n \n             private static final long serialVersionUID = -7978723352517770645L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n-                SAML2IdPTO object = SAML2IdPsRestClient.read(model.getObject().getKey());\n+            public void onClick(final AjaxRequestTarget target, final SAML24UIIdPTO ignore) {\n+                SAML24UIIdPTO object = SAML2IdPsRestClient.read(model.getObject().getKey());\n                 metadataModal.header(Model.of(object.getName() + \" - Metadata\"));\n                 metadataModal.setContent(new XMLEditorPanel(\n                         metadataModal,\n@@ -219,25 +215,25 @@ public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n                 metadataModal.show(true);\n                 target.add(metadataModal);\n             }\n-        }, ActionLink.ActionType.HTML, SAML2SPEntitlement.IDP_READ);\n-        panel.add(new ActionLink<SAML2IdPTO>() {\n+        }, ActionLink.ActionType.HTML, SAML2SP4UIEntitlement.IDP_READ);\n+        panel.add(new ActionLink<SAML24UIIdPTO>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n-                SAML2IdPTO object = SAML2IdPsRestClient.read(model.getObject().getKey());\n+            public void onClick(final AjaxRequestTarget target, final SAML24UIIdPTO ignore) {\n+                SAML24UIIdPTO object = SAML2IdPsRestClient.read(model.getObject().getKey());\n                 send(SAML2IdPsDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(object, target));\n             }\n-        }, ActionLink.ActionType.EDIT, SAML2SPEntitlement.IDP_UPDATE);\n-        panel.add(new ActionLink<SAML2IdPTO>() {\n+        }, ActionLink.ActionType.EDIT, SAML2SP4UIEntitlement.IDP_UPDATE);\n+        panel.add(new ActionLink<SAML24UIIdPTO>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n-                final SAML2IdPTO object = SAML2IdPsRestClient.read(model.getObject().getKey());\n+            public void onClick(final AjaxRequestTarget target, final SAML24UIIdPTO ignore) {\n+                final SAML24UIIdPTO object = SAML2IdPsRestClient.read(model.getObject().getKey());\n \n                 UserTemplateWizardBuilder builder = new UserTemplateWizardBuilder(\n                         object.getUserTemplate(),\n@@ -262,13 +258,13 @@ protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n                 target.add(templateModal);\n \n             }\n-        }, ActionLink.ActionType.TEMPLATE, SAML2SPEntitlement.IDP_UPDATE);\n-        panel.add(new ActionLink<SAML2IdPTO>() {\n+        }, ActionLink.ActionType.TEMPLATE, SAML2SP4UIEntitlement.IDP_UPDATE);\n+        panel.add(new ActionLink<SAML24UIIdPTO>() {\n \n             private static final long serialVersionUID = -5467832321897812767L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n+            public void onClick(final AjaxRequestTarget target, final SAML24UIIdPTO ignore) {\n                 try {\n                     SAML2IdPsRestClient.delete(model.getObject().getKey());\n                     SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n@@ -279,7 +275,7 @@ public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, SAML2SPEntitlement.IDP_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, SAML2SP4UIEntitlement.IDP_DELETE, true);\n \n         return panel;\n     }\n@@ -306,11 +302,11 @@ public void onEvent(final IEvent<?> event) {\n         }\n     }\n \n-    protected static final class SAML2IdPsProvider extends DirectoryDataProvider<SAML2IdPTO> {\n+    protected static final class SAML2IdPsProvider extends DirectoryDataProvider<SAML24UIIdPTO> {\n \n         private static final long serialVersionUID = -185944053385660794L;\n \n-        private final SortableDataProviderComparator<SAML2IdPTO> comparator;\n+        private final SortableDataProviderComparator<SAML24UIIdPTO> comparator;\n \n         private SAML2IdPsProvider(final int paginatorRows) {\n             super(paginatorRows);\n@@ -320,8 +316,8 @@ private SAML2IdPsProvider(final int paginatorRows) {\n         }\n \n         @Override\n-        public Iterator<SAML2IdPTO> iterator(final long first, final long count) {\n-            List<SAML2IdPTO> list = SAML2IdPsRestClient.list();\n+        public Iterator<SAML24UIIdPTO> iterator(final long first, final long count) {\n+            List<SAML24UIIdPTO> list = SAML2IdPsRestClient.list();\n             list.sort(comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n@@ -332,7 +328,7 @@ public long size() {\n         }\n \n         @Override\n-        public IModel<SAML2IdPTO> model(final SAML2IdPTO object) {\n+        public IModel<SAML24UIIdPTO> model(final SAML24UIIdPTO object) {\n             return new CompoundPropertyModel<>(object);\n         }\n     }","previous_filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.java"},{"sha":"9385a2948ea8519ca11254c75a54424370a32d79","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/panels/SAML2SPPanel.java","status":"renamed","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPPanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -21,6 +21,7 @@\n import javax.ws.rs.client.ClientBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.ui.commons.HttpResourceStream;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n import org.apache.syncope.client.ui.commons.rest.ResponseHolder;\n import org.apache.wicket.markup.html.link.Link;\n import org.apache.wicket.markup.html.panel.Panel;\n@@ -50,7 +51,8 @@ public void onClick() {\n                 try {\n                     HttpResourceStream stream = new HttpResourceStream(new ResponseHolder(ClientBuilder.newClient().\n                             target(RequestCycle.get().getUrlRenderer().renderFullUrl(Url.parse(\n-                                    UrlUtils.rewriteToContextRelative(\"saml2sp/metadata\", RequestCycle.get())))).\n+                                    UrlUtils.rewriteToContextRelative(SAML2SP4UIConstants.URL_CONTEXT + \"/metadata\",\n+                                            RequestCycle.get())))).\n                             request().get()));\n \n                     ResourceStreamRequestHandler rsrh = new ResourceStreamRequestHandler(stream);","previous_filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/panels/SAML2SPPanel.java"},{"sha":"b748dfb03252413d354fffb7a4147edeb0ea7be2","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/panels/SAMLSSOLoginFormPanel.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAMLSSOLoginFormPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAMLSSOLoginFormPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAMLSSOLoginFormPanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import org.apache.syncope.client.common.ui.panels.AbstractSAMLSSOLoginFormPanel;\n+import org.apache.syncope.client.ui.commons.panels.AbstractSAMLSSOLoginFormPanel;\n import org.apache.syncope.client.ui.commons.BaseSession;\n \n public class SAMLSSOLoginFormPanel extends AbstractSAMLSSOLoginFormPanel {","previous_filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/panels/SAMLSSOLoginFormPanel.java"},{"sha":"a2cee48b8ae308c42b3bab18871e643b238d6797","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/resources/ConsoleAssertionConsumerResource.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FConsoleAssertionConsumerResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FConsoleAssertionConsumerResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FConsoleAssertionConsumerResource.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.resources;\n+\n+import org.apache.syncope.client.console.pages.SAML2SPLogin;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n+import org.apache.syncope.client.ui.commons.annotations.Resource;\n+import org.apache.syncope.client.ui.commons.resources.saml2sp4ui.AssertionConsumerResource;\n+import org.apache.wicket.markup.html.WebPage;\n+\n+@Resource(\n+        key = SAML2SP4UIConstants.URL_CONTEXT + \".assertionConsumer\",\n+        path = \"/\" + SAML2SP4UIConstants.URL_CONTEXT + \"/assertion-consumer\")\n+public class ConsoleAssertionConsumerResource extends AssertionConsumerResource {\n+\n+    private static final long serialVersionUID = 5794388372086573865L;\n+\n+    @Override\n+    protected Class<? extends WebPage> getLoginPageClass() {\n+        return SAML2SPLogin.class;\n+    }\n+\n+    @Override\n+    protected Class<? extends WebPage> getSelfRegPageClass() {\n+        throw new UnsupportedOperationException(\"Self-registration not supported by Admin Console\");\n+    }\n+}"},{"sha":"0a175fafc3269f3e2263a274031e4384262b2127","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/resources/ConsoleLogoutResource.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FConsoleLogoutResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FConsoleLogoutResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FConsoleLogoutResource.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.resources;\n+\n+import org.apache.syncope.client.console.pages.SAML2SPBeforeLogout;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n+import org.apache.syncope.client.ui.commons.annotations.Resource;\n+import org.apache.syncope.client.ui.commons.resources.saml2sp4ui.LogoutResource;\n+import org.apache.wicket.markup.html.WebPage;\n+\n+@Resource(\n+        key = SAML2SP4UIConstants.URL_CONTEXT + \".logout\",\n+        path = \"/\" + SAML2SP4UIConstants.URL_CONTEXT + \"/logout\")\n+public class ConsoleLogoutResource extends LogoutResource {\n+\n+    private static final long serialVersionUID = -6515754535808725264L;\n+\n+    @Override\n+    protected Class<? extends WebPage> getLogoutPageClass() {\n+        return SAML2SPBeforeLogout.class;\n+    }\n+}"},{"sha":"dab8c091a1a125df27a2f303cca315e3703ba701","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/rest/SAML2IdPsRestClient.java","status":"renamed","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSAML2IdPsRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSAML2IdPsRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSAML2IdPsRestClient.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -24,36 +24,36 @@\n import org.apache.cxf.jaxrs.client.Client;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.common.lib.to.SAML2IdPTO;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPService;\n+import org.apache.syncope.common.lib.to.SAML24UIIdPTO;\n+import org.apache.syncope.common.rest.api.service.SAML2SP4UIIdPService;\n \n public class SAML2IdPsRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -5084300184764037527L;\n \n-    public static List<SAML2IdPTO> list() {\n-        return getService(SAML2IdPService.class).list();\n+    public static List<SAML24UIIdPTO> list() {\n+        return getService(SAML2SP4UIIdPService.class).list();\n     }\n \n     public static void importIdPs(final InputStream input) {\n-        SAML2IdPService service = getService(SAML2IdPService.class);\n+        SAML2SP4UIIdPService service = getService(SAML2SP4UIIdPService.class);\n         Client client = WebClient.client(service);\n         client.type(MediaType.APPLICATION_XML);\n \n         service.importFromMetadata(input);\n \n-        SyncopeConsoleSession.get().resetClient(SAML2IdPService.class);\n+        SyncopeConsoleSession.get().resetClient(SAML2SP4UIIdPService.class);\n     }\n \n-    public static SAML2IdPTO read(final String key) {\n-        return getService(SAML2IdPService.class).read(key);\n+    public static SAML24UIIdPTO read(final String key) {\n+        return getService(SAML2SP4UIIdPService.class).read(key);\n     }\n \n-    public static void update(final SAML2IdPTO idp) {\n-        getService(SAML2IdPService.class).update(idp);\n+    public static void update(final SAML24UIIdPTO idp) {\n+        getService(SAML2SP4UIIdPService.class).update(idp);\n     }\n \n     public static void delete(final String key) {\n-        getService(SAML2IdPService.class).delete(key);\n+        getService(SAML2SP4UIIdPService.class).delete(key);\n     }\n }","previous_filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/rest/SAML2IdPsRestClient.java"},{"sha":"27c2be21e56b4c497d9d5ca87e5d064ce1c13ac4","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java","status":"renamed","additions":14,"deletions":22,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -31,9 +31,9 @@\n import org.apache.syncope.client.console.panels.SAML2IdPsDirectoryPanel;\n import org.apache.syncope.client.console.rest.ImplementationRestClient;\n import org.apache.syncope.client.console.rest.SAML2IdPsRestClient;\n-import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n-import org.apache.syncope.client.console.wizards.resources.ItemTransformersTogglePanel;\n-import org.apache.syncope.client.console.wizards.resources.SAML2IdPMappingPanel;\n+import org.apache.syncope.client.console.wizards.mapping.JEXLTransformersTogglePanel;\n+import org.apache.syncope.client.console.wizards.mapping.ItemTransformersTogglePanel;\n+import org.apache.syncope.client.console.wizards.mapping.SAML2IdPMappingPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n@@ -42,9 +42,9 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizardBuilder;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.lib.to.SAML24UIIdPTO;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n-import org.apache.syncope.common.lib.types.SAML2SPImplementationType;\n+import org.apache.syncope.common.lib.types.SAML2SP4UIImplementationType;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardModel;\n@@ -58,7 +58,7 @@\n import org.apache.wicket.model.StringResourceModel;\n import org.apache.wicket.model.util.ListModel;\n \n-public class SAML2IdPWizardBuilder extends AjaxWizardBuilder<SAML2IdPTO> {\n+public class SAML2IdPWizardBuilder extends AjaxWizardBuilder<SAML24UIIdPTO> {\n \n     private static final long serialVersionUID = 5952696913893950460L;\n \n@@ -70,7 +70,7 @@ public class SAML2IdPWizardBuilder extends AjaxWizardBuilder<SAML2IdPTO> {\n \n         @Override\n         protected List<String> load() {\n-            return ImplementationRestClient.list(SAML2SPImplementationType.IDP_ACTIONS).stream().\n+            return ImplementationRestClient.list(SAML2SP4UIImplementationType.IDP_ACTIONS).stream().\n                     map(EntityTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n@@ -81,20 +81,20 @@ protected List<String> load() {\n \n         @Override\n         protected List<String> load() {\n-            return ImplementationRestClient.list(SAML2SPImplementationType.REQUESTED_AUTHN_CONTEXT_PROVIDER).stream().\n-                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+            return ImplementationRestClient.list(SAML2SP4UIImplementationType.REQUESTED_AUTHN_CONTEXT_PROVIDER).\n+                    stream().map(EntityTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n \n     public SAML2IdPWizardBuilder(\n-            final SAML2IdPsDirectoryPanel directoryPanel, final SAML2IdPTO idpTO, final PageReference pageRef) {\n+            final SAML2IdPsDirectoryPanel directoryPanel, final SAML24UIIdPTO idpTO, final PageReference pageRef) {\n \n         super(idpTO, pageRef);\n         this.directoryPanel = directoryPanel;\n     }\n \n     @Override\n-    protected WizardModel buildModelSteps(final SAML2IdPTO modelObject, final WizardModel wizardModel) {\n+    protected WizardModel buildModelSteps(final SAML24UIIdPTO modelObject, final WizardModel wizardModel) {\n         wizardModel.add(new IdP(modelObject));\n \n         Mapping mapping = new Mapping(modelObject);\n@@ -137,7 +137,7 @@ private final class IdP extends WizardStep {\n \n         private static final long serialVersionUID = 854012593185195024L;\n \n-        IdP(final SAML2IdPTO idpTO) {\n+        IdP(final SAML24UIIdPTO idpTO) {\n             super(StringUtils.EMPTY, StringUtils.EMPTY);\n \n             List<Component> fields = new ArrayList<>();\n@@ -159,14 +159,6 @@ private final class IdP extends WizardStep {\n                     \"field\", \"updateMatching\", new PropertyModel<>(idpTO, \"updateMatching\"), false);\n             fields.add(updateMatching);\n \n-            AjaxCheckBoxPanel useDeflateEncoding = new AjaxCheckBoxPanel(\n-                    \"field\", \"useDeflateEncoding\", new PropertyModel<>(idpTO, \"useDeflateEncoding\"), false);\n-            fields.add(useDeflateEncoding);\n-\n-            AjaxCheckBoxPanel supportUnsolicited = new AjaxCheckBoxPanel(\n-                    \"field\", \"supportUnsolicited\", new PropertyModel<>(idpTO, \"supportUnsolicited\"), false);\n-            fields.add(supportUnsolicited);\n-\n             AjaxDropDownChoicePanel<SAML2BindingType> bindingType =\n                     new AjaxDropDownChoicePanel<>(\"field\", \"bindingType\",\n                             new PropertyModel<>(idpTO, \"bindingType\"), false);\n@@ -208,14 +200,14 @@ private static final class Mapping extends WizardStep {\n \n         private static final long serialVersionUID = 3454904947720856253L;\n \n-        Mapping(final SAML2IdPTO item) {\n+        Mapping(final SAML24UIIdPTO item) {\n             setTitleModel(Model.of(\"Mapping\"));\n             setSummaryModel(Model.of(StringUtils.EMPTY));\n         }\n     }\n \n     @Override\n-    protected Serializable onApplyInternal(final SAML2IdPTO modelObject) {\n+    protected Serializable onApplyInternal(final SAML24UIIdPTO modelObject) {\n         long connObjectKeyCount = modelObject.getItems().stream().filter(ItemTO::isConnObjectKey).count();\n         if (connObjectKeyCount != 1) {\n             throw new IllegalArgumentException(","previous_filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java"},{"sha":"b4bdf9ea267d33510d3619e32260c93919985613","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/wizards/mapping/SAML2IdPMappingPanel.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FSAML2IdPMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FSAML2IdPMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FSAML2IdPMappingPanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.wizards.resources;\n+package org.apache.syncope.client.console.wizards.mapping;\n \n import java.util.ArrayList;\n import java.util.Collections;\n@@ -26,7 +26,7 @@\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.lib.to.SAML24UIIdPTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.wicket.model.IModel;\n@@ -39,7 +39,7 @@ public class SAML2IdPMappingPanel extends AbstractMappingPanel {\n \n     public SAML2IdPMappingPanel(\n             final String id,\n-            final SAML2IdPTO idpTO,\n+            final SAML24UIIdPTO idpTO,\n             final ItemTransformersTogglePanel mapItemTransformers,\n             final JEXLTransformersTogglePanel jexlTransformers) {\n ","previous_filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/resources/SAML2IdPMappingPanel.java"},{"sha":"0ba4ef84ec552bcbd20f8a09e1b1b22b01b53fcb","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/pages/SAML2SP4UI.html","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI.html?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -31,7 +31,7 @@ <h1>&nbsp;</h1>\n                 <a wicket:id=\"dashboardBr\"><i class=\"fa fa-tachometer-alt\"></i> <wicket:message key=\"dashboard\"></wicket:message></a>\n               </li>\n               <li class=\"breadcrumb-item\"><wicket:message key=\"extensions\"/></li>\n-              <li class=\"breadcrumb-item active\">SAML 2.0 SP</li>\n+              <li class=\"breadcrumb-item active\">SAML 2.0 SP4UI</li>\n             </ol>\n           </div>\n         </div>","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/pages/SAML2SP.html"},{"sha":"ead24e7b81cd0d52c7ed5d08b2c00580e20b602f","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/pages/SAML2SP4UI.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI.properties?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/pages/SAML2SP.properties"},{"sha":"ead24e7b81cd0d52c7ed5d08b2c00580e20b602f","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/pages/SAML2SP4UI_it.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI_it.properties?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/pages/SAML2SP_it.properties"},{"sha":"ead24e7b81cd0d52c7ed5d08b2c00580e20b602f","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/pages/SAML2SP4UI_pt_BR.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI_pt_BR.properties?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/pages/SAML2SP_pt_BR.properties"},{"sha":"ead24e7b81cd0d52c7ed5d08b2c00580e20b602f","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/pages/SAML2SP4UI_ru.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSAML2SP4UI_ru.properties?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/pages/SAML2SP_ru.properties"},{"sha":"d07093d44ae0c114d8038aaa4699f675e80afa54","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/panels/ImportMetadata.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImportMetadata.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImportMetadata.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImportMetadata.html?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/ImportMetadata.html"},{"sha":"f912857d8cd9f18d567f3565d3c76f682f7d8bb3","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.html?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.html"},{"sha":"18d7fb694dc6e39e3f9f00a771c052fc4d9e7a54","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.properties","status":"renamed","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.properties?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -15,8 +15,6 @@\n # specific language governing permissions and limitations\n # under the License.\n entityID=Entity ID\n-useDeflateEncoding=Deflate Encoding\n-supportUnsolicited=Support Unsolicited Logins\n logoutSupported=Logout supported\n any.edit=Edit ${entityID}\n connObjectKeyValidation=There must be exactly one Remote Key","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.properties"},{"sha":"520137282102f5dc8d434056c35229e46964a308","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_it.properties","status":"renamed","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_it.properties?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -15,8 +15,6 @@\n # specific language governing permissions and limitations\n # under the License.\n entityID=Entity ID\n-useDeflateEncoding=Deflate Encoding\n-supportUnsolicited=Support Unsolicited Logins\n logoutSupported=Logout supportato\n any.edit=Modifica ${entityID}\n connObjectKeyValidation=Deve essere definito esattamente una Chiave remota","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_it.properties"},{"sha":"b2288367c8ebd6c8feaf241ec7218575bfa5dcad","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_pt_BR.properties","status":"renamed","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_pt_BR.properties?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -15,8 +15,6 @@\n # specific language governing permissions and limitations\n # under the License.\n entityID=Entity ID\n-useDeflateEncoding=Deflate Encoding\n-supportUnsolicited=Support Unsolicited Logins\n logoutSupported=Logout supported\n any.edit=Alterar ${entityID}\n connObjectKeyValidation=Precisa ser exatamente um Remote Key","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_pt_BR.properties"},{"sha":"57191bd18b16edbc658603870581624a2763e8c3","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_ru.properties","status":"renamed","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_ru.properties?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -15,8 +15,6 @@\n # specific language governing permissions and limitations\n # under the License.\n entityID=Entity ID\n-useDeflateEncoding=Deflate Encoding\n-supportUnsolicited=Support Unsolicited Logins\n logoutSupported=Logout supported\n any.edit=\\u0418\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${entityID}\n connObjectKeyValidation=\\u0422\\u0430\\u043c \\u0434\\u043e\\u043b\\u0436\\u043d\\u043e \\u0431\\u044b\\u0442\\u044c \\u0440\\u043e\\u0432\\u043d\\u043e \\u043e\\u0434\\u0438\\u043d \\u0434\\u0438\\u0441\\u0442\\u0430\\u043d\\u0446\\u0438\\u043e\\u043d\\u043d\\u043e\\u0433\\u043e \\u043a\\u043b\\u044e\\u0447\\u0430","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_ru.properties"},{"sha":"7bd3fbd4beeb4cce942a4179f8f25bf9771c6e6f","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2SPPanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2SPPanel.html?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2SPPanel.html"},{"sha":"ce0dbe8f344fd162dab43c231a0033ab30d2e42c","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAMLSSOLoginFormPanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAMLSSOLoginFormPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAMLSSOLoginFormPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAMLSSOLoginFormPanel.html?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAMLSSOLoginFormPanel.html"},{"sha":"78bd42627ac579b01e95f0eb9059197fea88854b","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder$IdP.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder%24IdP.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder%24IdP.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder%24IdP.html?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder$IdP.html"},{"sha":"11b1a5259058e6902e02b9f380d437cc5cdb4442","filename":"ext/saml2sp4ui/client-console/src/main/resources/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder$Mapping.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder%24Mapping.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder%24Mapping.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder%24Mapping.html?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder$Mapping.html"},{"sha":"2a03b1a28d7d922a04258786a27a1e113311fc35","filename":"ext/saml2sp4ui/client-enduser/pom.xml","status":"renamed","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,14 +23,14 @@ under the License.\n \n   <parent>\n     <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <artifactId>syncope-ext-saml2sp4ui</artifactId>\n     <version>3.0.0-SNAPSHOT</version>\n   </parent>\n \n-  <name>Apache Syncope Ext: SAML2 SP Client Enduser</name>\n-  <description>Apache Syncope Ext: SAML2 SP Client Enduser</description>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-client-enduser</artifactId>\n+  <name>Apache Syncope Ext: SAML2 SP4UI Client Enduser</name>\n+  <description>Apache Syncope Ext: SAML2 SP4UI Client Enduser</description>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-client-enduser</artifactId>\n   <packaging>jar</packaging>\n   \n   <properties>\n@@ -43,20 +43,15 @@ under the License.\n       <artifactId>javax.servlet-api</artifactId>\n     </dependency>\n \n-    <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-agent</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n     <dependency>\n       <groupId>org.apache.syncope.client.idrepo</groupId>\n       <artifactId>syncope-client-idrepo-enduser</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     \n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-client-common-ui</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-client-common-ui</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n   </dependencies>","previous_filename":"ext/saml2sp/client-enduser/pom.xml"},{"sha":"e25f0549d1ed488f2bb9c30a6ed7b0ead44291b5","filename":"ext/saml2sp4ui/client-enduser/src/main/java/org/apache/syncope/client/enduser/pages/SAML2SPBeforeLogout.java","status":"renamed","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSAML2SPBeforeLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSAML2SPBeforeLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSAML2SPBeforeLogout.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -18,20 +18,29 @@\n  */\n package org.apache.syncope.client.enduser.pages;\n \n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n+import org.apache.wicket.Session;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.request.UrlUtils;\n import org.apache.wicket.request.cycle.RequestCycle;\n import org.apache.wicket.request.http.handler.RedirectRequestHandler;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n public class SAML2SPBeforeLogout extends WebPage {\n \n     private static final long serialVersionUID = 3727183730959367707L;\n \n-    public SAML2SPBeforeLogout() {\n-        super();\n+    public SAML2SPBeforeLogout(final PageParameters parameters) {\n+        super(parameters);\n \n+        String idpEntityId = URLEncoder.encode(\n+                Session.get().getAttribute(SAML2SP4UIConstants.SAML2SP4UI_IDP_ENTITY_ID).toString(),\n+                StandardCharsets.UTF_8);\n         RequestCycle.get().scheduleRequestHandlerAfterCurrent(new RedirectRequestHandler(\n-                UrlUtils.rewriteToContextRelative(\"saml2sp/logout\", RequestCycle.get())));\n+                UrlUtils.rewriteToContextRelative(SAML2SP4UIConstants.URL_CONTEXT + \"/logout\"\n+                        + \"?\" + SAML2SP4UIConstants.SAML2SP4UI_IDP_ENTITY_ID + \"=\" + idpEntityId,\n+                        RequestCycle.get())));\n     }\n-\n }","previous_filename":"ext/saml2sp/client-enduser/src/main/java/org/apache/syncope/client/enduser/pages/SAML2SPBeforeLogout.java"},{"sha":"9b10c2c0569f26a4665218bf2e238a7ae001c9c6","filename":"ext/saml2sp4ui/client-enduser/src/main/java/org/apache/syncope/client/enduser/pages/SAML2SPLogin.java","status":"renamed","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSAML2SPLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSAML2SPLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSAML2SPLogin.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -21,9 +21,9 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n import org.apache.wicket.authentication.IAuthenticationStrategy;\n import org.apache.wicket.markup.html.WebPage;\n-import org.apache.wicket.protocol.http.servlet.ServletWebRequest;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -39,8 +39,7 @@ public class SAML2SPLogin extends WebPage {\n     public SAML2SPLogin(final PageParameters parameters) {\n         super(parameters);\n \n-        String token = (String) ((ServletWebRequest) getRequest()).getContainerRequest().\n-                getSession().getAttribute(org.apache.syncope.ext.saml2lsp.agent.Constants.SAML2SPJWT);\n+        String token = parameters.get(SAML2SP4UIConstants.SAML2SP4UI_JWT).toOptionalString();\n         if (StringUtils.isBlank(token)) {\n             LOG.error(\"No JWT found, redirecting to default greeter\");\n \n@@ -52,7 +51,7 @@ public SAML2SPLogin(final PageParameters parameters) {\n         IAuthenticationStrategy strategy = getApplication().getSecuritySettings().getAuthenticationStrategy();\n \n         if (SyncopeEnduserSession.get().authenticate(token)) {\n-            if (parameters.get(\"sloSupported\").toBoolean(false)) {\n+            if (parameters.get(SAML2SP4UIConstants.SAML2SP4UI_SLO_SUPPORTED).toBoolean(false)) {\n                 SyncopeEnduserSession.get().setAttribute(Constants.BEFORE_LOGOUT_PAGE, SAML2SPBeforeLogout.class);\n             }\n ","previous_filename":"ext/saml2sp/client-enduser/src/main/java/org/apache/syncope/client/enduser/pages/SAML2SPLogin.java"},{"sha":"8da2d7df1a7af4c4d3f1d9129568ef422fdbebd0","filename":"ext/saml2sp4ui/client-enduser/src/main/java/org/apache/syncope/client/enduser/pages/SAML2SPLogout.java","status":"renamed","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSAML2SPLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSAML2SPLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSAML2SPLogout.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.enduser.pages;\n \n-import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n@@ -29,11 +28,6 @@ public class SAML2SPLogout extends WebPage {\n     public SAML2SPLogout(final PageParameters parameters) {\n         super(parameters);\n \n-        // this is needed because the actual logout was already performed by the SAML agent\n-        SyncopeEnduserSession.get().cleanup();\n-\n-        SyncopeEnduserSession.get().invalidate();\n-\n         setResponsePage(getApplication().getHomePage());\n     }\n }","previous_filename":"ext/saml2sp/client-enduser/src/main/java/org/apache/syncope/client/enduser/pages/SAML2SPLogout.java"},{"sha":"922dba795b8833d4b9bd4713f3df6764f32e9a56","filename":"ext/saml2sp4ui/client-enduser/src/main/java/org/apache/syncope/client/enduser/panels/SAMLSSOLoginFormPanel.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FSAMLSSOLoginFormPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FSAMLSSOLoginFormPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FSAMLSSOLoginFormPanel.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.client.enduser.panels;\n \n-import org.apache.syncope.client.common.ui.panels.AbstractSAMLSSOLoginFormPanel;\n+import org.apache.syncope.client.ui.commons.panels.AbstractSAMLSSOLoginFormPanel;\n import org.apache.syncope.client.ui.commons.BaseSession;\n \n public class SAMLSSOLoginFormPanel extends AbstractSAMLSSOLoginFormPanel {","previous_filename":"ext/saml2sp/client-enduser/src/main/java/org/apache/syncope/client/enduser/panels/SAMLSSOLoginFormPanel.java"},{"sha":"132222a62c6f2e6b255ace08ce5be306a022dacf","filename":"ext/saml2sp4ui/client-enduser/src/main/java/org/apache/syncope/client/enduser/resources/EnduserAssertionConsumerResource.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FEnduserAssertionConsumerResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FEnduserAssertionConsumerResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FEnduserAssertionConsumerResource.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.resources;\n+\n+import org.apache.syncope.client.enduser.pages.SAML2SPLogin;\n+import org.apache.syncope.client.enduser.pages.Self;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n+import org.apache.syncope.client.ui.commons.annotations.Resource;\n+import org.apache.syncope.client.ui.commons.resources.saml2sp4ui.AssertionConsumerResource;\n+import org.apache.wicket.markup.html.WebPage;\n+\n+@Resource(\n+        key = SAML2SP4UIConstants.URL_CONTEXT + \".assertionConsumer\",\n+        path = \"/\" + SAML2SP4UIConstants.URL_CONTEXT + \"/assertion-consumer\")\n+public class EnduserAssertionConsumerResource extends AssertionConsumerResource {\n+\n+    private static final long serialVersionUID = 5794388372086573865L;\n+\n+    @Override\n+    protected Class<? extends WebPage> getLoginPageClass() {\n+        return SAML2SPLogin.class;\n+    }\n+\n+    @Override\n+    protected Class<? extends WebPage> getSelfRegPageClass() {\n+        return Self.class;\n+    }\n+}"},{"sha":"e0b1ff43b64b40924d88900845bb659a09f5f600","filename":"ext/saml2sp4ui/client-enduser/src/main/java/org/apache/syncope/client/enduser/resources/EnduserLogoutResource.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FEnduserLogoutResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FEnduserLogoutResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FEnduserLogoutResource.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.resources;\n+\n+import org.apache.syncope.client.enduser.pages.SAML2SPBeforeLogout;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n+import org.apache.syncope.client.ui.commons.annotations.Resource;\n+import org.apache.syncope.client.ui.commons.resources.saml2sp4ui.LogoutResource;\n+import org.apache.wicket.markup.html.WebPage;\n+\n+@Resource(\n+        key = SAML2SP4UIConstants.URL_CONTEXT + \".logout\",\n+        path = \"/\" + SAML2SP4UIConstants.URL_CONTEXT + \"/logout\")\n+public class EnduserLogoutResource extends LogoutResource {\n+\n+    private static final long serialVersionUID = -6515754535808725264L;\n+\n+    @Override\n+    protected Class<? extends WebPage> getLogoutPageClass() {\n+        return SAML2SPBeforeLogout.class;\n+    }\n+}"},{"sha":"ce0dbe8f344fd162dab43c231a0033ab30d2e42c","filename":"ext/saml2sp4ui/client-enduser/src/main/resources/org/apache/syncope/client/enduser/panels/SAMLSSOLoginFormPanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FSAMLSSOLoginFormPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FSAMLSSOLoginFormPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-enduser%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2FSAMLSSOLoginFormPanel.html?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"ext/saml2sp/client-enduser/src/main/resources/org/apache/syncope/client/enduser/panels/SAMLSSOLoginFormPanel.html"},{"sha":"3863df816bc72ed184933067e7c625da75e79137","filename":"ext/saml2sp4ui/common-lib/pom.xml","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,14 +23,14 @@ under the License.\n \n   <parent>\n     <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <artifactId>syncope-ext-saml2sp4ui</artifactId>\n     <version>3.0.0-SNAPSHOT</version>\n   </parent>\n \n-  <name>Apache Syncope Ext: SAML2 SP Common Lib</name>\n-  <description>Apache Syncope Ext: SAML2 SP Common Lib</description>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-common-lib</artifactId>\n+  <name>Apache Syncope Ext: SAML2 SP4UI Common Lib</name>\n+  <description>Apache Syncope Ext: SAML2 SP4UI Common Lib</description>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-common-lib</artifactId>\n   <packaging>jar</packaging>\n   \n   <properties>\n@@ -39,8 +39,8 @@ under the License.\n \n   <dependencies>\n     <dependency>\n-      <groupId>org.apache.syncope.common.idm</groupId>\n-      <artifactId>syncope-common-idm-lib</artifactId>\n+      <groupId>org.apache.syncope.common.am</groupId>\n+      <artifactId>syncope-common-am-lib</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n   </dependencies>","previous_filename":"ext/saml2sp/common-lib/pom.xml"},{"sha":"05c0f92ad2668d30443e9678ed8da15be3a7b970","filename":"ext/saml2sp4ui/common-lib/src/main/java/org/apache/syncope/common/lib/saml2/SAML2Constants.java","status":"renamed","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2Constants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2Constants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2Constants.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,21 +16,17 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib;\n+package org.apache.syncope.common.lib.saml2;\n \n-public final class SSOConstants {\n+public final class SAML2Constants {\n \n     public static final String SAML_REQUEST = \"SAMLRequest\";\n \n     public static final String SAML_RESPONSE = \"SAMLResponse\";\n \n     public static final String RELAY_STATE = \"RelayState\";\n \n-    public static final String SIG_ALG = \"SigAlg\";\n-\n-    public static final String SIGNATURE = \"Signature\";\n-\n-    private SSOConstants() {\n+    private SAML2Constants() {\n         // private constructor for static utility class\n     }\n }","previous_filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/SSOConstants.java"},{"sha":"b22c4c99765bf05f55362b84d93f114b2636605e","filename":"ext/saml2sp4ui/common-lib/src/main/java/org/apache/syncope/common/lib/saml2/SAML2LoginResponse.java","status":"renamed","additions":8,"deletions":31,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2LoginResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2LoginResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2LoginResponse.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.saml2;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n@@ -28,16 +28,14 @@\n import java.util.Set;\n import org.apache.syncope.common.lib.Attr;\n \n-public class SAML2LoginResponseTO implements Serializable {\n+public class SAML2LoginResponse implements Serializable {\n \n     private static final long serialVersionUID = 794772343787258010L;\n \n     private String nameID;\n \n     private String sessionIndex;\n \n-    private Date authInstant;\n-\n     private Date notOnOrAfter;\n \n     private String accessToken;\n@@ -70,34 +68,13 @@ public void setSessionIndex(final String sessionIndex) {\n         this.sessionIndex = sessionIndex;\n     }\n \n-    public Date getAuthInstant() {\n-        if (authInstant != null) {\n-            return new Date(authInstant.getTime());\n-        }\n-        return null;\n-    }\n-\n-    public void setAuthInstant(final Date authInstant) {\n-        if (authInstant != null) {\n-            this.authInstant = new Date(authInstant.getTime());\n-        } else {\n-            this.authInstant = null;\n-        }\n-    }\n-\n     public Date getNotOnOrAfter() {\n-        if (notOnOrAfter != null) {\n-            return new Date(notOnOrAfter.getTime());\n-        }\n-        return null;\n+        return Optional.ofNullable(notOnOrAfter).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     public void setNotOnOrAfter(final Date notOnOrAfter) {\n-        if (notOnOrAfter != null) {\n-            this.notOnOrAfter = new Date(notOnOrAfter.getTime());\n-        } else {\n-            this.notOnOrAfter = null;\n-        }\n+        this.notOnOrAfter = Optional.ofNullable(notOnOrAfter).\n+                map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     public String getAccessToken() {\n@@ -109,11 +86,12 @@ public void setAccessToken(final String accessToken) {\n     }\n \n     public Date getAccessTokenExpiryTime() {\n-        return accessTokenExpiryTime;\n+        return Optional.ofNullable(accessTokenExpiryTime).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     public void setAccessTokenExpiryTime(final Date accessTokenExpiryTime) {\n-        this.accessTokenExpiryTime = accessTokenExpiryTime;\n+        this.accessTokenExpiryTime = Optional.ofNullable(accessTokenExpiryTime).\n+                map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     public String getUsername() {\n@@ -158,5 +136,4 @@ public boolean isSelfReg() {\n     public void setSelfReg(final boolean selfReg) {\n         this.selfReg = selfReg;\n     }\n-\n }","previous_filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2LoginResponseTO.java"},{"sha":"08127daacf7f4025aad77b2204601cfe557a7339","filename":"ext/saml2sp4ui/common-lib/src/main/java/org/apache/syncope/common/lib/saml2/SAML2Message.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2Message.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2Message.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2Message.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.saml2;\n+\n+import java.io.Serializable;\n+\n+public abstract class SAML2Message implements Serializable {\n+\n+    private static final long serialVersionUID = 5175325058398739227L;\n+\n+    private String idpEntityID;\n+\n+    public String getIdpEntityID() {\n+        return idpEntityID;\n+    }\n+\n+    public void setIdpEntityID(final String idpEntityID) {\n+        this.idpEntityID = idpEntityID;\n+    }\n+}"},{"sha":"53840e51b382feb15c34ee9147c6ad3506f303a8","filename":"ext/saml2sp4ui/common-lib/src/main/java/org/apache/syncope/common/lib/saml2/SAML2Request.java","status":"renamed","additions":2,"deletions":43,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2Request.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2Request.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2Request.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,35 +16,18 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.saml2;\n \n-import java.io.Serializable;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n-public class SAML2RequestTO implements Serializable {\n+public class SAML2Request extends SAML2Message {\n \n     private static final long serialVersionUID = -2454209295007372086L;\n \n-    private String idpServiceAddress;\n-\n     private SAML2BindingType bindingType;\n \n     private String content;\n \n-    private String relayState;\n-\n-    private String signAlg;\n-\n-    private String signature;\n-\n-    public String getIdpServiceAddress() {\n-        return idpServiceAddress;\n-    }\n-\n-    public void setIdpServiceAddress(final String idpServiceAddress) {\n-        this.idpServiceAddress = idpServiceAddress;\n-    }\n-\n     public SAML2BindingType getBindingType() {\n         return bindingType;\n     }\n@@ -60,28 +43,4 @@ public String getContent() {\n     public void setContent(final String content) {\n         this.content = content;\n     }\n-\n-    public String getRelayState() {\n-        return relayState;\n-    }\n-\n-    public void setRelayState(final String relayState) {\n-        this.relayState = relayState;\n-    }\n-\n-    public String getSignAlg() {\n-        return signAlg;\n-    }\n-\n-    public void setSignAlg(final String signAlg) {\n-        this.signAlg = signAlg;\n-    }\n-\n-    public String getSignature() {\n-        return signature;\n-    }\n-\n-    public void setSignature(final String signature) {\n-        this.signature = signature;\n-    }\n }","previous_filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2RequestTO.java"},{"sha":"cd516ebafc0a2bdffc3715a6ea5760d8efd7e0b0","filename":"ext/saml2sp4ui/common-lib/src/main/java/org/apache/syncope/common/lib/saml2/SAML2Response.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2Response.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2Response.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsaml2%2FSAML2Response.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,12 +16,11 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.saml2;\n \n-import java.io.Serializable;\n import org.apache.commons.lang3.StringUtils;\n \n-public class SAML2ReceivedResponseTO implements Serializable {\n+public class SAML2Response extends SAML2Message {\n \n     private static final long serialVersionUID = 6102419133516694822L;\n ","previous_filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2ReceivedResponseTO.java"},{"sha":"6216b178cd2670b0c2e88c543cf47b9d95db75f5","filename":"ext/saml2sp4ui/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML24UIIdPTO.java","status":"renamed","additions":2,"deletions":26,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML24UIIdPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML24UIIdPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML24UIIdPTO.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -26,7 +26,7 @@\n import javax.ws.rs.PathParam;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n-public class SAML2IdPTO implements EntityTO, ItemContainerTO {\n+public class SAML24UIIdPTO implements EntityTO, ItemContainerTO {\n \n     private static final long serialVersionUID = 4426527052873779881L;\n \n@@ -44,10 +44,6 @@ public class SAML2IdPTO implements EntityTO, ItemContainerTO {\n \n     private boolean selfRegUnmatching;\n \n-    private boolean useDeflateEncoding;\n-\n-    private boolean supportUnsolicited;\n-\n     private SAML2BindingType bindingType;\n \n     private boolean logoutSupported;\n@@ -119,22 +115,6 @@ public void setUpdateMatching(final boolean updateMatching) {\n         this.updateMatching = updateMatching;\n     }\n \n-    public boolean isUseDeflateEncoding() {\n-        return useDeflateEncoding;\n-    }\n-\n-    public void setUseDeflateEncoding(final boolean useDeflateEncoding) {\n-        this.useDeflateEncoding = useDeflateEncoding;\n-    }\n-\n-    public boolean isSupportUnsolicited() {\n-        return supportUnsolicited;\n-    }\n-\n-    public void setSupportUnsolicited(final boolean supportUnsolicited) {\n-        this.supportUnsolicited = supportUnsolicited;\n-    }\n-\n     public SAML2BindingType getBindingType() {\n         return bindingType;\n     }\n@@ -174,7 +154,7 @@ protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {\n     @Override\n     public boolean setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n         return Optional.ofNullable(connObjectKeyItem).\n-                map(this::addConnObjectKeyItem).orElseGet(() -> remove(getConnObjectKeyItem()));\n+                map(this::addConnObjectKeyItem).orElseGet(() -> items.remove(getConnObjectKeyItem()));\n     }\n \n     @JacksonXmlElementWrapper(localName = \"items\")\n@@ -189,10 +169,6 @@ public boolean add(final ItemTO item) {\n         return Optional.ofNullable(item).filter(itemTO -> items.contains(itemTO) || items.add(itemTO)).isPresent();\n     }\n \n-    public boolean remove(final ItemTO item) {\n-        return this.items.remove(item);\n-    }\n-\n     @JacksonXmlElementWrapper(localName = \"actions\")\n     @JacksonXmlProperty(localName = \"action\")\n     public List<String> getActions() {","previous_filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java"},{"sha":"ee256a382a24b5fd18a9bb170c990066cf64acc0","filename":"ext/saml2sp4ui/common-lib/src/main/java/org/apache/syncope/common/lib/types/SAML2SP4UIEntitlement.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2SP4UIEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2SP4UIEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2SP4UIEntitlement.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -24,7 +24,7 @@\n import java.util.Set;\n import java.util.TreeSet;\n \n-public final class SAML2SPEntitlement {\n+public final class SAML2SP4UIEntitlement {\n \n     public static final String IDP_READ = \"IDP_READ\";\n \n@@ -38,7 +38,7 @@ public final class SAML2SPEntitlement {\n \n     static {\n         Set<String> values = new TreeSet<>();\n-        for (Field field : SAML2SPEntitlement.class.getDeclaredFields()) {\n+        for (Field field : SAML2SP4UIEntitlement.class.getDeclaredFields()) {\n             if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {\n                 values.add(field.getName());\n             }\n@@ -50,7 +50,7 @@ public static Set<String> values() {\n         return VALUES;\n     }\n \n-    private SAML2SPEntitlement() {\n+    private SAML2SP4UIEntitlement() {\n         // private constructor for static utility class\n     }\n }","previous_filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/types/SAML2SPEntitlement.java"},{"sha":"f54f230acbf6d29d436d6338dd0f48df685af7eb","filename":"ext/saml2sp4ui/common-lib/src/main/java/org/apache/syncope/common/lib/types/SAML2SP4UIImplementationType.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2SP4UIImplementationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2SP4UIImplementationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2SP4UIImplementationType.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -21,7 +21,7 @@\n import java.util.Map;\n import org.apache.commons.lang3.tuple.Pair;\n \n-public final class SAML2SPImplementationType {\n+public final class SAML2SP4UIImplementationType {\n \n     public static final String IDP_ACTIONS = \"IDP_ACTIONS\";\n \n@@ -37,7 +37,7 @@ public static Map<String, String> values() {\n         return VALUES;\n     }\n \n-    private SAML2SPImplementationType() {\n+    private SAML2SP4UIImplementationType() {\n         // private constructor for static utility class\n     }\n }","previous_filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/types/SAML2SPImplementationType.java"},{"sha":"a86a89cf4b2f55209cb5eb589741eee4949c1582","filename":"ext/saml2sp4ui/logic/pom.xml","status":"renamed","additions":15,"deletions":14,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,14 +23,14 @@ under the License.\n \n   <parent>\n     <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <artifactId>syncope-ext-saml2sp4ui</artifactId>\n     <version>3.0.0-SNAPSHOT</version>\n   </parent>\n \n-  <name>Apache Syncope Ext: SAML2 SP Logic</name>\n-  <description>Apache Syncope Ext: SAML2 SP Logic</description>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-logic</artifactId>\n+  <name>Apache Syncope Ext: SAML2 SP4UI Logic</name>\n+  <description>Apache Syncope Ext: SAML2 SP4UI Logic</description>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-logic</artifactId>\n   <packaging>jar</packaging>\n   \n   <properties>\n@@ -39,20 +39,21 @@ under the License.\n \n   <dependencies>\n     <dependency>\n-      <groupId>org.apache.syncope.core.idm</groupId>\n-      <artifactId>syncope-core-idm-logic</artifactId>\n-      <version>${project.version}</version>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>javax.servlet-api</artifactId>\n+      <scope>provided</scope>\n     </dependency>\n-      \n+\n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-provisioning-java</artifactId>\n+      <groupId>org.apache.syncope.core.idrepo</groupId>\n+      <artifactId>syncope-core-idrepo-logic</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-    \n+      \n     <dependency>\n-      <groupId>org.apache.cxf</groupId>\n-      <artifactId>cxf-rt-rs-security-sso-saml</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-provisioning-java</artifactId>\n+      <version>${project.version}</version>\n     </dependency>\n   </dependencies>\n ","previous_filename":"ext/saml2sp/logic/pom.xml"},{"sha":"a52a57cde07e61c72fe674aebd560fc8dffaf45a","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/SAML2SP4UIIdPLogic.java","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UIIdPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UIIdPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UIIdPLogic.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.io.InputStream;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.SAML24UIIdPTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n+import org.apache.syncope.common.lib.types.SAML2SP4UIEntitlement;\n+import org.apache.syncope.core.logic.init.SAML2SP4UILoader;\n+import org.apache.syncope.core.logic.saml2.SAML2ClientCache;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.pac4j.saml.config.SAML2Configuration;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SP4UIIdPDAO;\n+import org.apache.syncope.core.provisioning.api.data.SAML2SP4UIIdPDataBinder;\n+\n+@Component\n+public class SAML2SP4UIIdPLogic extends AbstractTransactionalLogic<SAML24UIIdPTO> {\n+\n+    @Autowired\n+    private SAML2SP4UILoader loader;\n+\n+    @Autowired\n+    private SAML2ClientCache saml2ClientCache;\n+\n+    @Autowired\n+    private SAML2SP4UIIdPDataBinder binder;\n+\n+    @Autowired\n+    private SAML2SP4UIIdPDAO idpDAO;\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    @Transactional(readOnly = true)\n+    public List<SAML24UIIdPTO> list() {\n+        return idpDAO.findAll().stream().map(binder::getIdPTO).collect(Collectors.toList());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + SAML2SP4UIEntitlement.IDP_READ + \"')\")\n+    @Transactional(readOnly = true)\n+    public SAML24UIIdPTO read(final String key) {\n+        SAML2SP4UIIdP idp = idpDAO.find(key);\n+        if (idp == null) {\n+            throw new NotFoundException(\"SAML 2.0 IdP '\" + key + '\\'');\n+        }\n+\n+        return binder.getIdPTO(idp);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + SAML2SP4UIEntitlement.IDP_IMPORT + \"')\")\n+    public String importFromMetadata(final InputStream input) {\n+        try {\n+            SAML24UIIdPTO idpTO = saml2ClientCache.importMetadata(input, loader.newSAML2Configuration());\n+            SAML2SP4UIIdP idp = idpDAO.save(binder.create(idpTO));\n+\n+            return idp.getKey();\n+        } catch (SyncopeClientException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            LOG.error(\"Unexpected error while importing IdP metadata\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidEntity);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+    }\n+\n+    private static void setBindingType(final SAML2Configuration cfg, final SAML2BindingType type) {\n+        cfg.setAuthnRequestBindingType(type.getUri());\n+        cfg.setResponseBindingType(SAML2BindingType.POST.getUri());\n+        cfg.setSpLogoutRequestBindingType(type.getUri());\n+        cfg.setSpLogoutResponseBindingType(type.getUri());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + SAML2SP4UIEntitlement.IDP_UPDATE + \"')\")\n+    public void update(final SAML24UIIdPTO saml2IdpTO) {\n+        SAML2SP4UIIdP idp = idpDAO.find(saml2IdpTO.getKey());\n+        if (idp == null) {\n+            throw new NotFoundException(\"SAML 2.0 IdP '\" + saml2IdpTO.getKey() + '\\'');\n+        }\n+\n+        idp = idpDAO.save(binder.update(idp, saml2IdpTO));\n+        saml2ClientCache.removeAll(idp.getEntityID());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + SAML2SP4UIEntitlement.IDP_DELETE + \"')\")\n+    public void delete(final String key) {\n+        SAML2SP4UIIdP idp = idpDAO.find(key);\n+        if (idp == null) {\n+            throw new NotFoundException(\"SAML 2.0 IdP '\" + key + '\\'');\n+        }\n+\n+        idpDAO.delete(key);\n+        saml2ClientCache.removeAll(idp.getEntityID());\n+    }\n+\n+    @Override\n+    protected SAML24UIIdPTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof SAML24UIIdPTO) {\n+                    key = ((SAML24UIIdPTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                SAML2SP4UIIdP idp = idpDAO.find(key);\n+                return binder.getIdPTO(idp);\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"135146a933a2cd524b7aa3e871d3d6ec5c02c2ae","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/SAML2SP4UILogic.java","status":"added","additions":512,"deletions":0,"changes":512,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,512 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.lang.reflect.Method;\n+import java.util.Base64;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.annotation.Resource;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.saml2.SAML2Request;\n+import org.apache.syncope.common.lib.saml2.SAML2LoginResponse;\n+import org.apache.syncope.common.lib.saml2.SAML2Response;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.logic.init.SAML2SP4UILoader;\n+import org.apache.syncope.core.logic.saml2.SAML2ClientCache;\n+import org.apache.syncope.core.logic.saml2.SAML2SP4UIContext;\n+import org.apache.syncope.core.logic.saml2.SAML2SP4UIUserManager;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.provisioning.api.RequestedAuthnContextProvider;\n+import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.ImplementationManager;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.AuthDataAccessor;\n+import org.apache.syncope.core.spring.security.Encryptor;\n+import org.opensaml.saml.common.xml.SAMLConstants;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.RequestedAuthnContext;\n+import org.opensaml.saml.saml2.metadata.AssertionConsumerService;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.impl.AssertionConsumerServiceBuilder;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.exception.http.RedirectionAction;\n+import org.pac4j.core.exception.http.WithContentAction;\n+import org.pac4j.core.exception.http.WithLocationAction;\n+import org.pac4j.core.logout.NoLogoutActionBuilder;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.pac4j.saml.config.SAML2Configuration;\n+import org.pac4j.saml.context.SAML2MessageContext;\n+import org.pac4j.saml.credentials.SAML2Credentials;\n+import org.pac4j.saml.credentials.authenticator.SAML2Authenticator;\n+import org.pac4j.saml.metadata.SAML2ServiceProviderMetadataResolver;\n+import org.pac4j.saml.profile.SAML2Profile;\n+import org.pac4j.saml.redirect.SAML2RedirectionActionBuilder;\n+import org.pac4j.saml.sso.impl.SAML2AuthnRequestBuilder;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.util.ResourceUtils;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdPItem;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SP4UIIdPDAO;\n+\n+@Component\n+public class SAML2SP4UILogic extends AbstractTransactionalLogic<EntityTO> {\n+\n+    private static final String JWT_CLAIM_IDP_ENTITYID = \"IDP_ENTITYID\";\n+\n+    private static final String JWT_CLAIM_NAMEID_FORMAT = \"NAMEID_FORMAT\";\n+\n+    private static final String JWT_CLAIM_NAMEID_VALUE = \"NAMEID_VALUE\";\n+\n+    private static final String JWT_CLAIM_SESSIONINDEX = \"SESSIONINDEX\";\n+\n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n+    @Autowired\n+    private SAML2SP4UILoader loader;\n+\n+    @Autowired\n+    private AccessTokenDataBinder accessTokenDataBinder;\n+\n+    @Autowired\n+    private SAML2ClientCache saml2ClientCache;\n+\n+    @Autowired\n+    private SAML2SP4UIUserManager userManager;\n+\n+    @Autowired\n+    private SAML2SP4UIIdPDAO idpDAO;\n+\n+    @Autowired\n+    private AuthDataAccessor authDataAccessor;\n+\n+    @Resource(name = \"accessTokenJwsSignatureVerifier\")\n+    private JwsSignatureVerifier jwsSignatureVerifier;\n+\n+    private final Map<String, String> metadataCache = new ConcurrentHashMap<>();\n+\n+    private static String validateUrl(final String url) {\n+        boolean isValid = true;\n+        if (url.contains(\"..\")) {\n+            isValid = false;\n+        }\n+        if (isValid) {\n+            isValid = ResourceUtils.isUrl(url);\n+        }\n+\n+        if (!isValid) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(\"Invalid URL: \" + url);\n+            throw sce;\n+        }\n+\n+        return url;\n+    }\n+\n+    private static String getCallbackUrl(final String spEntityID, final String urlContext) {\n+        return validateUrl(spEntityID + urlContext + \"/assertion-consumer\");\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public void getMetadata(final String spEntityID, final String urlContext, final OutputStream os) {\n+        String metadata = metadataCache.get(spEntityID + urlContext);\n+        if (metadata == null) {\n+            SAML2Configuration cfg = loader.newSAML2Configuration();\n+            cfg.setServiceProviderEntityId(spEntityID);\n+            cfg.setCallbackUrl(getCallbackUrl(spEntityID, urlContext));\n+\n+            EntityDescriptor entityDescriptor =\n+                    (EntityDescriptor) new SAML2ServiceProviderMetadataResolver(cfg).getEntityDescriptorElement();\n+\n+            AssertionConsumerService postACS = entityDescriptor.getSPSSODescriptor(SAMLConstants.SAML20P_NS).\n+                    getAssertionConsumerServices().get(0);\n+\n+            AssertionConsumerService redirectACS = new AssertionConsumerServiceBuilder().buildObject();\n+            BeanUtils.copyProperties(postACS, redirectACS);\n+            postACS.setBinding(SAML2BindingType.REDIRECT.getUri());\n+            postACS.setIndex(1);\n+            entityDescriptor.getSPSSODescriptor(SAMLConstants.SAML20P_NS).\n+                    getAssertionConsumerServices().add(redirectACS);\n+\n+            entityDescriptor.getSPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleLogoutServices().\n+                    removeIf(slo -> !SAML2BindingType.POST.getUri().equals(slo.getBinding())\n+                    && !SAML2BindingType.REDIRECT.getUri().equals(slo.getBinding()));\n+            entityDescriptor.getSPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleLogoutServices().\n+                    forEach(slo -> slo.setLocation(\n+                    getCallbackUrl(spEntityID, urlContext).replace(\"/assertion-consumer\", \"/logout\")));\n+\n+            try {\n+                metadata = cfg.toMetadataGenerator().getMetadata(entityDescriptor);\n+                metadataCache.put(spEntityID + urlContext, metadata);\n+            } catch (Exception e) {\n+                LOG.error(\"While generating SP metadata\", e);\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+                sce.getElements().add(e.getMessage());\n+                throw sce;\n+            }\n+        }\n+\n+        try (OutputStreamWriter osw = new OutputStreamWriter(os)) {\n+            osw.write(metadata);\n+        } catch (Exception e) {\n+            LOG.error(\"While getting SP metadata\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+    }\n+\n+    private SAML2Client getSAML2Client(final SAML2SP4UIIdP idp, final String spEntityID, final String urlContext) {\n+        return saml2ClientCache.get(idp.getEntityID(), spEntityID).\n+                orElseGet(() -> saml2ClientCache.add(\n+                idp, loader.newSAML2Configuration(), spEntityID, getCallbackUrl(spEntityID, urlContext)));\n+    }\n+\n+    private SAML2Client getSAML2Client(final String idpEntityID, final String spEntityID, final String urlContext) {\n+        SAML2SP4UIIdP idp = idpDAO.findByEntityID(idpEntityID);\n+        if (idp == null) {\n+            throw new NotFoundException(\"SAML 2.0 IdP '\" + idpEntityID + '\\'');\n+        }\n+\n+        return getSAML2Client(idp, spEntityID, urlContext);\n+    }\n+\n+    private static SAML2Request buildRequest(final String idpEntityID, final RedirectionAction action) {\n+        SAML2Request requestTO = new SAML2Request();\n+        requestTO.setIdpEntityID(idpEntityID);\n+        if (action instanceof WithLocationAction) {\n+            WithLocationAction withLocationAction = (WithLocationAction) action;\n+\n+            requestTO.setBindingType(SAML2BindingType.REDIRECT);\n+            requestTO.setContent(withLocationAction.getLocation());\n+        } else if (action instanceof WithContentAction) {\n+            WithContentAction withContentAction = (WithContentAction) action;\n+\n+            requestTO.setBindingType(SAML2BindingType.POST);\n+            requestTO.setContent(Base64.getMimeEncoder().encodeToString(withContentAction.getContent().getBytes()));\n+        }\n+        return requestTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public SAML2Request createLoginRequest(\n+            final String spEntityID,\n+            final String urlContext,\n+            final String idpEntityID) {\n+\n+        // 0. look for IdP\n+        SAML2SP4UIIdP idp = idpDAO.findByEntityID(idpEntityID);\n+        if (idp == null) {\n+            throw new NotFoundException(\"SAML 2.0 IdP '\" + idpEntityID + '\\'');\n+        }\n+\n+        // 1. look for configured client\n+        SAML2Client saml2Client = getSAML2Client(idp, spEntityID, urlContext);\n+\n+        if (idp.getRequestedAuthnContextProvider() != null) {\n+            RequestedAuthnContextProvider requestedAuthnContextProvider = null;\n+            try {\n+                requestedAuthnContextProvider = ImplementationManager.build(idp.getRequestedAuthnContextProvider());\n+            } catch (Exception e) {\n+                LOG.warn(\"Cannot instantiate '{}', reverting to default behavior\",\n+                        idp.getRequestedAuthnContextProvider(), e);\n+            }\n+\n+            if (requestedAuthnContextProvider != null) {\n+                RequestedAuthnContext requestedAuthnContext = requestedAuthnContextProvider.get();\n+                SAML2Configuration cfg = saml2Client.getConfiguration();\n+                saml2Client.setRedirectionActionBuilder(new SAML2RedirectionActionBuilder(saml2Client) {\n+\n+                    @Override\n+                    public Optional<RedirectionAction> getRedirectionAction(final WebContext wc) {\n+                        this.saml2ObjectBuilder = new SAML2AuthnRequestBuilder(cfg) {\n+\n+                            @Override\n+                            public AuthnRequest build(final SAML2MessageContext context) {\n+                                AuthnRequest authnRequest = super.build(context);\n+                                authnRequest.setRequestedAuthnContext(requestedAuthnContext);\n+                                return authnRequest;\n+                            }\n+                        };\n+                        return super.getRedirectionAction(wc);\n+                    }\n+                });\n+            }\n+        }\n+\n+        // 2. create AuthnRequest\n+        SAML2SP4UIContext ctx = new SAML2SP4UIContext(\n+                saml2Client.getConfiguration().getAuthnRequestBindingType(),\n+                null);\n+        RedirectionAction action = saml2Client.getRedirectionAction(ctx).\n+                orElseThrow(() -> {\n+                    SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+                    sce.getElements().add(\"No RedirectionAction generated for AuthnRequest\");\n+                    return sce;\n+                });\n+        return buildRequest(idpEntityID, action);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public SAML2LoginResponse validateLoginResponse(final SAML2Response saml2Response) {\n+        // 0. look for IdP\n+        SAML2SP4UIIdP idp = idpDAO.findByEntityID(saml2Response.getIdpEntityID());\n+        if (idp == null) {\n+            throw new NotFoundException(\"SAML 2.0 IdP '\" + saml2Response.getIdpEntityID() + '\\'');\n+        }\n+\n+        // 1. look for configured client\n+        SAML2Client saml2Client = getSAML2Client(idp, saml2Response.getSpEntityID(), saml2Response.getUrlContext());\n+\n+        // 2. validate the provided SAML response\n+        SAML2Credentials credentials;\n+        try {\n+            SAML2SP4UIContext ctx = new SAML2SP4UIContext(\n+                    saml2Client.getConfiguration().getAuthnRequestBindingType(),\n+                    saml2Response);\n+\n+            credentials = saml2Client.getCredentialsExtractor().extract(ctx).\n+                    orElseThrow(() -> new IllegalStateException(\"No AuthnResponse found\"));\n+\n+            saml2Client.getAuthenticator().validate(credentials, ctx);\n+        } catch (Exception e) {\n+            LOG.error(\"While validating AuthnResponse\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+\n+        // 3. prepare the result: find matching user (if any) and return the received attributes\n+        SAML2LoginResponse loginResp = new SAML2LoginResponse();\n+        loginResp.setIdp(saml2Client.getIdentityProviderResolvedEntityId());\n+        loginResp.setSloSupported(!(saml2Client.getLogoutActionBuilder() instanceof NoLogoutActionBuilder));\n+\n+        SAML2Credentials.SAMLNameID nameID = credentials.getNameId();\n+\n+        SAML2SP4UIIdPItem connObjectKeyItem = idp.getConnObjectKeyItem().orElse(null);\n+\n+        String keyValue = null;\n+        if (StringUtils.isNotBlank(nameID.getValue())\n+                && connObjectKeyItem != null\n+                && connObjectKeyItem.getExtAttrName().equals(NameID.DEFAULT_ELEMENT_LOCAL_NAME)) {\n+\n+            keyValue = nameID.getValue();\n+        }\n+\n+        loginResp.setNotOnOrAfter(new Date(credentials.getConditions().getNotOnOrAfter().toInstant().toEpochMilli()));\n+\n+        loginResp.setSessionIndex(credentials.getSessionIndex());\n+\n+        for (SAML2Credentials.SAMLAttribute attr : credentials.getAttributes()) {\n+            if (!attr.getAttributeValues().isEmpty()) {\n+                String attrName = attr.getFriendlyName() == null ? attr.getName() : attr.getFriendlyName();\n+                if (connObjectKeyItem != null && attrName.equals(connObjectKeyItem.getExtAttrName())) {\n+                    keyValue = attr.getAttributeValues().get(0);\n+                }\n+\n+                loginResp.getAttrs().add(new Attr.Builder(attrName).values(attr.getAttributeValues()).build());\n+            }\n+        }\n+\n+        List<String> matchingUsers = keyValue == null\n+                ? List.of()\n+                : userManager.findMatchingUser(keyValue, idp.getKey());\n+        LOG.debug(\"Found {} matching users for {}\", matchingUsers.size(), keyValue);\n+\n+        String username;\n+        if (matchingUsers.isEmpty()) {\n+            if (idp.isCreateUnmatching()) {\n+                LOG.debug(\"No user matching {}, about to create\", keyValue);\n+\n+                username = AuthContextUtils.callAsAdmin(AuthContextUtils.getDomain(),\n+                        () -> userManager.create(idp, loginResp, nameID.getValue()));\n+            } else if (idp.isSelfRegUnmatching()) {\n+                loginResp.setNameID(nameID.getValue());\n+                UserTO userTO = new UserTO();\n+\n+                userManager.fill(idp.getKey(), loginResp, userTO);\n+\n+                loginResp.getAttrs().clear();\n+                loginResp.getAttrs().addAll(userTO.getPlainAttrs());\n+                loginResp.getAttrs().addAll(userTO.getVirAttrs());\n+                if (StringUtils.isNotBlank(userTO.getUsername())) {\n+                    loginResp.setUsername(userTO.getUsername());\n+                } else {\n+                    loginResp.setUsername(loginResp.getNameID());\n+                }\n+\n+                loginResp.setSelfReg(true);\n+\n+                return loginResp;\n+            } else {\n+                throw new NotFoundException(\"User matching the provided value \" + keyValue);\n+            }\n+        } else if (matchingUsers.size() > 1) {\n+            throw new IllegalArgumentException(\"Several users match the provided value \" + keyValue);\n+        } else {\n+            if (idp.isUpdateMatching()) {\n+                LOG.debug(\"About to update {} for {}\", matchingUsers.get(0), keyValue);\n+\n+                username = AuthContextUtils.callAsAdmin(AuthContextUtils.getDomain(),\n+                        () -> userManager.update(matchingUsers.get(0), idp, loginResp));\n+            } else {\n+                username = matchingUsers.get(0);\n+            }\n+        }\n+\n+        loginResp.setUsername(username);\n+        loginResp.setNameID(nameID.getValue());\n+\n+        // 4. generate JWT for further access\n+        Map<String, Object> claims = new HashMap<>();\n+        claims.put(JWT_CLAIM_IDP_ENTITYID, idp.getEntityID());\n+        claims.put(JWT_CLAIM_NAMEID_FORMAT, nameID.getFormat());\n+        claims.put(JWT_CLAIM_NAMEID_VALUE, nameID.getValue());\n+        claims.put(JWT_CLAIM_SESSIONINDEX, loginResp.getSessionIndex());\n+\n+        byte[] authorities = null;\n+        try {\n+            authorities = ENCRYPTOR.encode(POJOHelper.serialize(\n+                    authDataAccessor.getAuthorities(loginResp.getUsername())), CipherAlgorithm.AES).getBytes();\n+        } catch (Exception e) {\n+            LOG.error(\"Could not fetch authorities\", e);\n+        }\n+\n+        Pair<String, Date> accessTokenInfo =\n+                accessTokenDataBinder.create(loginResp.getUsername(), claims, authorities, true);\n+        loginResp.setAccessToken(accessTokenInfo.getLeft());\n+        loginResp.setAccessTokenExpiryTime(accessTokenInfo.getRight());\n+\n+        return loginResp;\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"'))\")\n+    public SAML2Request createLogoutRequest(\n+            final String accessToken,\n+            final String spEntityID,\n+            final String urlContext) {\n+\n+        // 1. fetch the current JWT used for Syncope authentication and destroy it\n+        JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(accessToken);\n+        if (!consumer.verifySignatureWith(jwsSignatureVerifier)) {\n+            throw new IllegalArgumentException(\"Invalid signature found in Access Token\");\n+        }\n+\n+        // 2. look for SAML2Client\n+        String idpEntityID = (String) consumer.getJwtClaims().getClaim(JWT_CLAIM_IDP_ENTITYID);\n+        if (idpEntityID == null) {\n+            throw new NotFoundException(\"No SAML 2.0 IdP information found in the access token\");\n+        }\n+        SAML2Client saml2Client = getSAML2Client(idpEntityID, spEntityID, urlContext);\n+        if (saml2Client.getLogoutActionBuilder() instanceof NoLogoutActionBuilder) {\n+            throw new IllegalArgumentException(\"No SingleLogoutService available for \"\n+                    + saml2Client.getIdentityProviderResolvedEntityId());\n+        }\n+\n+        // 3. create LogoutRequest\n+        SAML2Profile saml2Profile = new SAML2Profile();\n+        saml2Profile.setId((String) consumer.getJwtClaims().getClaim(JWT_CLAIM_NAMEID_VALUE));\n+        saml2Profile.addAuthenticationAttribute(\n+                SAML2Authenticator.SAML_NAME_ID_FORMAT,\n+                consumer.getJwtClaims().getClaim(JWT_CLAIM_NAMEID_FORMAT));\n+        saml2Profile.addAuthenticationAttribute(\n+                SAML2Authenticator.SESSION_INDEX,\n+                consumer.getJwtClaims().getClaim(JWT_CLAIM_SESSIONINDEX));\n+\n+        SAML2SP4UIContext ctx = new SAML2SP4UIContext(\n+                saml2Client.getConfiguration().getSpLogoutRequestBindingType(), null);\n+        RedirectionAction action = saml2Client.getLogoutAction(\n+                ctx,\n+                saml2Profile, null).\n+                orElseThrow(() -> {\n+                    SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+                    sce.getElements().add(\"No RedirectionAction generated for LogoutRequest\");\n+                    return sce;\n+                });\n+        return buildRequest(idpEntityID, action);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void validateLogoutResponse(final SAML2Response saml2Response) {\n+        // 1. look for SAML2Client\n+        if (saml2Response.getIdpEntityID() == null) {\n+            LOG.error(\"No SAML 2.0 IdP entityID provided, ignoring\");\n+            return;\n+        }\n+        SAML2Client saml2Client = getSAML2Client(\n+                saml2Response.getIdpEntityID(), saml2Response.getSpEntityID(), saml2Response.getUrlContext());\n+\n+        SAML2SP4UIIdP idp = idpDAO.findByEntityID(saml2Client.getIdentityProviderResolvedEntityId());\n+        if (idp == null) {\n+            throw new NotFoundException(\"SAML 2.0 IdP '\" + saml2Client.getIdentityProviderResolvedEntityId() + '\\'');\n+        }\n+\n+        // 2. validate the provided SAML response\n+        SAML2SP4UIContext ctx = new SAML2SP4UIContext(\n+                saml2Client.getConfiguration().getSpLogoutRequestBindingType(),\n+                saml2Response);\n+\n+        LogoutResponse logoutResponse;\n+        try {\n+            SAML2MessageContext saml2Ctx = saml2Client.getContextProvider().buildContext(ctx);\n+            saml2Client.getLogoutProfileHandler().receive(saml2Ctx);\n+\n+            logoutResponse = (LogoutResponse) saml2Ctx.getMessageContext().getMessage();\n+        } catch (Exception e) {\n+            LOG.error(\"Could not validate LogoutResponse\", e);\n+            return;\n+        }\n+\n+        // 3. finally check for logout status\n+        if (!StatusCode.SUCCESS.equals(logoutResponse.getStatus().getStatusCode().getValue())) {\n+            LOG.warn(\"Logout from SAML 2.0 IdP '{}' was not successful\",\n+                    saml2Client.getIdentityProviderResolvedEntityId());\n+        }\n+    }\n+\n+    @Override\n+    protected EntityTO resolveReference(\n+            final Method method, final Object... args) throws UnresolvedReferenceException {\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"f394056f79ded5515a956a96676752949928f2ab","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SP4UILoader.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SP4UILoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SP4UILoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SP4UILoader.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.Properties;\n+import org.apache.syncope.common.lib.PropertyUtils;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n+import org.apache.syncope.common.lib.types.SAML2SP4UIEntitlement;\n+import org.apache.syncope.common.lib.types.SAML2SP4UIImplementationType;\n+import org.apache.syncope.core.logic.saml2.NoOpLogoutHandler;\n+import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.pac4j.saml.config.SAML2Configuration;\n+import org.pac4j.saml.metadata.keystore.BaseSAML2KeystoreGenerator;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.FileUrlResource;\n+import org.springframework.core.io.support.ResourcePatternResolver;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SAML2SP4UILoader implements SyncopeCoreLoader {\n+\n+    private static final String SAML2SP4UI_LOGIC_PROPERTIES = \"saml2sp4ui-logic.properties\";\n+\n+    @Autowired\n+    private ResourcePatternResolver resourceResolver;\n+\n+    private Properties props;\n+\n+    @Override\n+    public int getOrder() {\n+        return 1000;\n+    }\n+\n+    @Override\n+    public void load() {\n+        EntitlementsHolder.getInstance().addAll(SAML2SP4UIEntitlement.values());\n+        ImplementationTypesHolder.getInstance().putAll(SAML2SP4UIImplementationType.values());\n+\n+        props = PropertyUtils.read(getClass(), SAML2SP4UI_LOGIC_PROPERTIES, \"conf.directory\");\n+    }\n+\n+    public SAML2Configuration newSAML2Configuration() {\n+        SAML2Configuration cfg = new SAML2Configuration(\n+                resourceResolver.getResource(props.getProperty(\"saml2.sp4ui.keystore\")),\n+                props.getProperty(\"saml2.sp4ui.keystore.storepass\"),\n+                props.getProperty(\"saml2.sp4ui.keystore.keypass\"),\n+                null);\n+\n+        cfg.setKeystoreType(props.getProperty(\"saml2.sp4ui.keystore.type\"));\n+        if (cfg.getKeystoreResource() instanceof FileUrlResource) {\n+            cfg.setKeystoreGenerator(new BaseSAML2KeystoreGenerator(cfg) {\n+\n+                @Override\n+                protected void store(\n+                        final KeyStore ks,\n+                        final X509Certificate certificate,\n+                        final PrivateKey privateKey) throws Exception {\n+\n+                    // nothing to do\n+                }\n+\n+                @Override\n+                public InputStream retrieve() throws Exception {\n+                    return cfg.getKeystoreResource().getInputStream();\n+                }\n+            });\n+        }\n+\n+        cfg.setWantsAssertionsSigned(true);\n+        cfg.setAuthnRequestSigned(true);\n+        cfg.setSpLogoutRequestSigned(true);\n+\n+        cfg.setAcceptedSkew(Integer.valueOf(props.getProperty(\"saml2.sp4ui.skew\")));\n+\n+        cfg.setLogoutHandler(new NoOpLogoutHandler());\n+\n+        return cfg;\n+    }\n+}"},{"sha":"223eaf17530f3aa00a6c3ed1605f72244206ab2e","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/NoOpLogoutHandler.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FNoOpLogoutHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FNoOpLogoutHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FNoOpLogoutHandler.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.saml2;\n+\n+import org.pac4j.core.logout.handler.LogoutHandler;\n+\n+public class NoOpLogoutHandler implements LogoutHandler<SAML2SP4UIContext> {\n+}"},{"sha":"8e21f8145e5ed3638399ad945b2b815a96293575","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/NoOpSessionStore.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FNoOpSessionStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FNoOpSessionStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FNoOpSessionStore.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.saml2;\n+\n+import java.util.Optional;\n+import org.pac4j.core.context.session.SessionStore;\n+\n+public final class NoOpSessionStore implements SessionStore<SAML2SP4UIContext> {\n+\n+    public static final NoOpSessionStore INSTANCE = new NoOpSessionStore();\n+\n+    private NoOpSessionStore() {\n+        // private constructor for singleton\n+    }\n+\n+    @Override\n+    public String getOrCreateSessionId(final SAML2SP4UIContext context) {\n+        return \"<NO_KEY>\";\n+    }\n+\n+    @Override\n+    public Optional<Object> get(final SAML2SP4UIContext context, final String key) {\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public void set(final SAML2SP4UIContext context, final String key, final Object value) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public boolean destroySession(final SAML2SP4UIContext context) {\n+        return true;\n+    }\n+\n+    @Override\n+    public Optional<?> getTrackableSession(final SAML2SP4UIContext context) {\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<SessionStore<SAML2SP4UIContext>> buildFromTrackableSession(\n+            final SAML2SP4UIContext context,\n+            final Object trackableSession) {\n+\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public boolean renewSession(final SAML2SP4UIContext context) {\n+        return false;\n+    }\n+}"},{"sha":"4d816949498b37e5c0db79a876fc9c7abd4a6919","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ClientCache.java","status":"added","additions":130,"deletions":0,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.saml2;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.SAML24UIIdPTO;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n+import org.opensaml.saml.common.xml.SAMLConstants;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.pac4j.core.http.callback.NoParameterCallbackUrlResolver;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.pac4j.saml.config.SAML2Configuration;\n+import org.springframework.core.io.ByteArrayResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n+\n+/**\n+ * Basic in-memory cache for available {@link SAML2Client} instances.\n+ */\n+@Component\n+public class SAML2ClientCache {\n+\n+    private final List<SAML2Client> cache = Collections.synchronizedList(new ArrayList<>());\n+\n+    public Optional<SAML2Client> get(final String idpEntityID, final String spEntityID) {\n+        return cache.stream().filter(c -> idpEntityID.equals(c.getIdentityProviderResolvedEntityId())\n+                && spEntityID.equals(c.getConfiguration().getServiceProviderEntityId())).findFirst();\n+    }\n+\n+    private SAML2Client newSAML2Client(final Resource metadata, final SAML2Configuration cfg) {\n+        cfg.setIdentityProviderMetadataResource(metadata);\n+\n+        SAML2Client saml2Client = new SAML2Client(cfg);\n+        saml2Client.setCallbackUrlResolver(new NoParameterCallbackUrlResolver());\n+\n+        return saml2Client;\n+    }\n+\n+    public SAML24UIIdPTO importMetadata(final InputStream metadata, final SAML2Configuration cfg) throws IOException {\n+        SAML2Client saml2Client = newSAML2Client(new ByteArrayResource(IOUtils.readBytesFromStream(metadata)), cfg);\n+        String entityId = saml2Client.getConfiguration().getIdentityProviderMetadataResolver().getEntityId();\n+\n+        SAML24UIIdPTO idpTO = new SAML24UIIdPTO();\n+        idpTO.setEntityID(entityId);\n+        idpTO.setName(entityId);\n+\n+        EntityDescriptor entityDescriptor = (EntityDescriptor) saml2Client.getConfiguration().\n+                getIdentityProviderMetadataResolver().getEntityDescriptorElement();\n+        entityDescriptor.getIDPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleSignOnServices().\n+                forEach(sso -> {\n+                    if (idpTO.getBindingType() == null) {\n+                        if (SAML2BindingType.POST.getUri().equals(sso.getBinding())) {\n+                            idpTO.setBindingType(SAML2BindingType.POST);\n+                        } else if (SAML2BindingType.REDIRECT.getUri().equals(sso.getBinding())) {\n+                            idpTO.setBindingType(SAML2BindingType.REDIRECT);\n+                        }\n+                    }\n+                });\n+        if (idpTO.getBindingType() == null) {\n+            throw new IllegalArgumentException(\"Neither POST nor REDIRECT artifacts supported by \" + entityId);\n+        }\n+\n+        cfg.setAuthnRequestBindingType(idpTO.getBindingType().getUri());\n+        cfg.setResponseBindingType(SAML2BindingType.POST.getUri());\n+        cfg.setSpLogoutRequestBindingType(idpTO.getBindingType().getUri());\n+        cfg.setSpLogoutResponseBindingType(idpTO.getBindingType().getUri());\n+\n+        entityDescriptor.getIDPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleLogoutServices().stream().\n+                filter(slo -> SAML2BindingType.POST.getUri().equals(slo.getBinding())\n+                || SAML2BindingType.REDIRECT.getUri().equals(slo.getBinding())).\n+                findFirst().\n+                ifPresent(slo -> idpTO.setLogoutSupported(true));\n+\n+        idpTO.setMetadata(Base64.getEncoder().encodeToString(\n+                saml2Client.getConfiguration().getIdentityProviderMetadataResolver().getMetadata().getBytes()));\n+\n+        ItemTO connObjectKeyItem = new ItemTO();\n+        connObjectKeyItem.setIntAttrName(\"username\");\n+        connObjectKeyItem.setExtAttrName(NameID.DEFAULT_ELEMENT_LOCAL_NAME);\n+        idpTO.setConnObjectKeyItem(connObjectKeyItem);\n+\n+        return idpTO;\n+    }\n+\n+    public SAML2Client add(\n+            final SAML2SP4UIIdP idp, final SAML2Configuration cfg, final String spEntityID, final String callbackUrl) {\n+\n+        SAML2Client saml2Client = newSAML2Client(new ByteArrayResource(idp.getMetadata()), cfg);\n+        saml2Client.getConfiguration().setServiceProviderEntityId(spEntityID);\n+        saml2Client.setCallbackUrl(callbackUrl);\n+        saml2Client.init();\n+\n+        cache.add(saml2Client);\n+        return saml2Client;\n+    }\n+\n+    public boolean remove(final SAML2Client saml2Client) {\n+        return cache.remove(saml2Client);\n+    }\n+\n+    public boolean removeAll(final String idpEntityID) {\n+        return cache.removeIf(c -> idpEntityID.equals(c.getIdentityProviderResolvedEntityId()));\n+    }\n+}"},{"sha":"5c83b20858fd2e4fc59afc13edb94bcbf6e5751a","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2SP4UIContext.java","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIContext.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.saml2;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import javax.ws.rs.HttpMethod;\n+import org.apache.syncope.common.lib.saml2.SAML2Constants;\n+import org.apache.syncope.common.lib.saml2.SAML2Response;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n+import org.pac4j.core.context.Cookie;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.context.session.SessionStore;\n+\n+public class SAML2SP4UIContext implements WebContext {\n+\n+    private final String bindingType;\n+\n+    private final SAML2Response saml2Response;\n+\n+    public SAML2SP4UIContext(final String bindingType, final SAML2Response saml2Response) {\n+        this.bindingType = bindingType;\n+        this.saml2Response = saml2Response;\n+    }\n+\n+    @Override\n+    public String getRequestMethod() {\n+        return SAML2BindingType.POST.getUri().equals(bindingType)\n+                ? HttpMethod.POST\n+                : HttpMethod.GET;\n+    }\n+\n+    @Override\n+    public SessionStore<SAML2SP4UIContext> getSessionStore() {\n+        return NoOpSessionStore.INSTANCE;\n+    }\n+\n+    @Override\n+    public Optional<String> getRequestParameter(final String name) {\n+        switch (name) {\n+            case SAML2Constants.SAML_RESPONSE:\n+                return Optional.ofNullable(saml2Response.getSamlResponse());\n+\n+            case SAML2Constants.RELAY_STATE:\n+                return Optional.ofNullable(saml2Response.getRelayState());\n+\n+            default:\n+                return Optional.empty();\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String[]> getRequestParameters() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Optional<String> getRequestAttribute(final String name) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void setRequestAttribute(final String name, final Object value) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public Optional<String> getRequestHeader(final String name) {\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public String getRemoteAddr() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void setResponseHeader(final String name, final String value) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public String getServerName() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public int getServerPort() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public String getScheme() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean isSecure() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public String getFullRequestURL() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Collection<Cookie> getRequestCookies() {\n+        return Set.of();\n+    }\n+\n+    @Override\n+    public void addResponseCookie(final Cookie cookie) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public String getPath() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void setResponseContentType(final String content) {\n+        // nothing to do\n+    }\n+}"},{"sha":"7e55167dbd8a63defe1ffc4fc438dcb19ac71d61","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2SP4UIUserManager.java","status":"renamed","additions":29,"deletions":33,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIUserManager.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -33,17 +33,13 @@\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n+import org.apache.syncope.common.lib.saml2.SAML2LoginResponse;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n-import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n-import org.apache.syncope.core.provisioning.api.SAML2IdPActions;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n@@ -57,26 +53,26 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SP4UIIdPDAO;\n+import org.apache.syncope.core.provisioning.api.SAML2SP4UIIdPActions;\n \n @Component\n-public class SAML2UserManager {\n+public class SAML2SP4UIUserManager {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SAML2UserManager.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(SAML2SP4UIUserManager.class);\n \n     private static final String SAML2SP_CONTEXT = \"SAML 2.0 SP\";\n \n     @Autowired\n-    private SAML2IdPDAO idpDAO;\n+    private SAML2SP4UIIdPDAO idpDAO;\n \n     @Autowired\n     private InboundMatcher inboundMatcher;\n \n     @Autowired\n     private UserDAO userDAO;\n \n-    @Autowired\n-    private ImplementationDAO implementationDAO;\n-\n     @Autowired\n     private IntAttrNameParser intAttrNameParser;\n \n@@ -91,7 +87,7 @@ public class SAML2UserManager {\n \n     @Transactional(readOnly = true)\n     public List<String> findMatchingUser(final String connObjectKeyValue, final String idpKey) {\n-        SAML2IdP idp = idpDAO.find(idpKey);\n+        SAML2SP4UIIdP idp = idpDAO.find(idpKey);\n         if (idp == null) {\n             LOG.warn(\"Invalid IdP: {}\", idpKey);\n             return List.of();\n@@ -107,11 +103,11 @@ public List<String> findMatchingUser(final String connObjectKeyValue, final Stri\n                 collect(Collectors.toList());\n     }\n \n-    private List<SAML2IdPActions> getActions(final SAML2IdPEntity idp) {\n-        List<SAML2IdPActions> actions = new ArrayList<>();\n+    private List<SAML2SP4UIIdPActions> getActions(final SAML2SP4UIIdP idp) {\n+        List<SAML2SP4UIIdPActions> actions = new ArrayList<>();\n         idp.getActions().forEach(impl -> {\n             try {\n-                actions.add(ImplementationManager.build(implementationDAO.find(impl)));\n+                actions.add(ImplementationManager.build(impl));\n             } catch (Exception e) {\n                 LOG.warn(\"While building {}\", impl, e);\n             }\n@@ -120,16 +116,16 @@ private List<SAML2IdPActions> getActions(final SAML2IdPEntity idp) {\n         return actions;\n     }\n \n-    public void fill(final String idpKey, final SAML2LoginResponseTO responseTO, final UserTO userTO) {\n-        SAML2IdP idp = idpDAO.find(idpKey);\n+    public void fill(final String idpKey, final SAML2LoginResponse loginResponse, final UserTO userTO) {\n+        SAML2SP4UIIdP idp = idpDAO.find(idpKey);\n         if (idp == null) {\n             LOG.warn(\"Invalid IdP: {}\", idpKey);\n             return;\n         }\n \n         idp.getItems().forEach(item -> {\n             List<String> values = List.of();\n-            Optional<Attr> samlAttr = responseTO.getAttr(item.getExtAttrName());\n+            Optional<Attr> samlAttr = loginResponse.getAttr(item.getExtAttrName());\n             if (samlAttr.isPresent() && !samlAttr.get().getValues().isEmpty()) {\n                 values = samlAttr.get().getValues();\n \n@@ -182,21 +178,21 @@ public void fill(final String idpKey, final SAML2LoginResponseTO responseTO, fin\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    public String create(final SAML2IdPEntity idp, final SAML2LoginResponseTO responseTO, final String nameID) {\n+    public String create(final SAML2SP4UIIdP idp, final SAML2LoginResponse loginResponse, final String nameID) {\n         UserCR userCR = new UserCR();\n         userCR.setStorePassword(false);\n \n         if (idp.getUserTemplate() != null) {\n-            templateUtils.apply(userCR, idp.getUserTemplate());\n+            templateUtils.apply(userCR, idp.getUserTemplate().get());\n         }\n \n-        List<SAML2IdPActions> actions = getActions(idp);\n-        for (SAML2IdPActions action : actions) {\n-            userCR = action.beforeCreate(userCR, responseTO);\n+        List<SAML2SP4UIIdPActions> actions = getActions(idp);\n+        for (SAML2SP4UIIdPActions action : actions) {\n+            userCR = action.beforeCreate(userCR, loginResponse);\n         }\n \n         UserTO userTO = new UserTO();\n-        fill(idp.getKey(), responseTO, userTO);\n+        fill(idp.getKey(), loginResponse, userTO);\n         EntityTOUtils.toAnyCR(userTO, userCR);\n \n         if (userCR.getRealm() == null) {\n@@ -210,33 +206,33 @@ public String create(final SAML2IdPEntity idp, final SAML2LoginResponseTO respon\n                 provisioningManager.create(userCR, false, userCR.getUsername(), SAML2SP_CONTEXT);\n         userTO = binder.getUserTO(created.getKey());\n \n-        for (SAML2IdPActions action : actions) {\n-            userTO = action.afterCreate(userTO, responseTO);\n+        for (SAML2SP4UIIdPActions action : actions) {\n+            userTO = action.afterCreate(userTO, loginResponse);\n         }\n \n         return userTO.getUsername();\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    public String update(final String username, final SAML2IdPEntity idp, final SAML2LoginResponseTO responseTO) {\n+    public String update(final String username, final SAML2SP4UIIdP idp, final SAML2LoginResponse loginResponse) {\n         UserTO userTO = binder.getUserTO(userDAO.findKey(username));\n         UserTO original = SerializationUtils.clone(userTO);\n \n-        fill(idp.getKey(), responseTO, userTO);\n+        fill(idp.getKey(), loginResponse, userTO);\n \n         UserUR userUR = AnyOperations.diff(userTO, original, true);\n \n-        List<SAML2IdPActions> actions = getActions(idp);\n-        for (SAML2IdPActions action : actions) {\n-            userUR = action.beforeUpdate(userUR, responseTO);\n+        List<SAML2SP4UIIdPActions> actions = getActions(idp);\n+        for (SAML2SP4UIIdPActions action : actions) {\n+            userUR = action.beforeUpdate(userUR, loginResponse);\n         }\n \n         Pair<UserUR, List<PropagationStatus>> updated =\n                 provisioningManager.update(userUR, false, userTO.getUsername(), SAML2SP_CONTEXT);\n         userTO = binder.getUserTO(updated.getLeft().getKey());\n \n-        for (SAML2IdPActions action : actions) {\n-            userTO = action.afterUpdate(userTO, responseTO);\n+        for (SAML2SP4UIIdPActions action : actions) {\n+            userTO = action.afterUpdate(userTO, loginResponse);\n         }\n \n         return userTO.getUsername();","previous_filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2UserManager.java"},{"sha":"e94b580a4eecefd6cd5863802288d8cc4dc6c399","filename":"ext/saml2sp4ui/logic/src/main/resources/saml2sp4ui-logic.properties","status":"renamed","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fresources%2Fsaml2sp4ui-logic.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fresources%2Fsaml2sp4ui-logic.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fresources%2Fsaml2sp4ui-logic.properties?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,9 +16,8 @@\n # under the License.\n conf.directory=${conf.directory}\n \n-keystore.name=keystore\n-keystore.type=jks\n-keystore.storepass=changeit\n-keystore.keypass=changeit\n-sp.cert.alias=sp\n-signature.algorithm=RSA_SHA1\n+saml2.sp4ui.skew=300\n+saml2.sp4ui.keystore=file://${conf.directory}/saml.keystore.jks\n+saml2.sp4ui.keystore.type=jks\n+saml2.sp4ui.keystore.storepass=changeit\n+saml2.sp4ui.keystore.keypass=changeit","previous_filename":"ext/saml2sp/logic/src/main/resources/saml2sp-logic.properties"},{"sha":"0d6f86b5fe1ae4f7eabf4e62d3f8977da128fcad","filename":"ext/saml2sp4ui/persistence-api/pom.xml","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,14 +23,14 @@ under the License.\n \n   <parent>\n     <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <artifactId>syncope-ext-saml2sp4ui</artifactId>\n     <version>3.0.0-SNAPSHOT</version>\n   </parent>\n \n-  <name>Apache Syncope Ext: SAML2 SP Persistence API</name>\n-  <description>Apache Syncope Ext: SAML2 SP Persistence API</description>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-persistence-api</artifactId>\n+  <name>Apache Syncope Ext: SAML2 SP4UI Persistence API</name>\n+  <description>Apache Syncope Ext: SAML2 SP4UI Persistence API</description>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-persistence-api</artifactId>\n   <packaging>jar</packaging>\n   \n   <properties>\n@@ -44,8 +44,8 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-common-lib</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-common-lib</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n   </dependencies>","previous_filename":"ext/saml2sp/persistence-api/pom.xml"},{"sha":"a5a1d77b30660371c59fc50c35a7d4503d56ef96","filename":"ext/saml2sp4ui/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SAML2SP4UIIdPDAO.java","status":"renamed","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2SP4UIIdPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2SP4UIIdPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2SP4UIIdPDAO.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -19,18 +19,17 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n \n-public interface SAML2IdPDAO extends DAO<SAML2IdP> {\n+public interface SAML2SP4UIIdPDAO extends DAO<SAML2SP4UIIdP> {\n \n-    SAML2IdP find(String key);\n+    SAML2SP4UIIdP find(String key);\n \n-    SAML2IdP findByEntityID(String entityID);\n+    SAML2SP4UIIdP findByEntityID(String entityID);\n \n-    List<SAML2IdP> findAll();\n+    List<SAML2SP4UIIdP> findAll();\n \n-    SAML2IdP save(SAML2IdP idp);\n+    SAML2SP4UIIdP save(SAML2SP4UIIdP idp);\n \n     void delete(String key);\n-\n }","previous_filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SAML2IdPDAO.java"},{"sha":"0ec9a4b1f59004ecac8b98420cdb3c7f704cc8d6","filename":"ext/saml2sp4ui/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2SP4UIEntityFactory.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIEntityFactory.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-public interface SAML2EntityFactory {\n+public interface SAML2SP4UIEntityFactory {\n \n     <E extends Entity> E newEntity(Class<E> reference);\n ","previous_filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2EntityFactory.java"},{"sha":"4b0c73071dd2dfa45a34e120d71e730c89c4e5f5","filename":"ext/saml2sp4ui/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2SP4UIIdP.java","status":"renamed","additions":11,"deletions":15,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdP.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -22,7 +22,7 @@\n import java.util.Optional;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n-public interface SAML2IdP extends Entity {\n+public interface SAML2SP4UIIdP extends Entity {\n \n     String getEntityID();\n \n@@ -36,6 +36,10 @@ public interface SAML2IdP extends Entity {\n \n     void setMetadata(byte[] metadata);\n \n+    boolean isLogoutSupported();\n+\n+    void setLogoutSupported(boolean logoutSupported);\n+\n     boolean isCreateUnmatching();\n \n     void setCreateUnmatching(boolean createUnmatching);\n@@ -48,29 +52,21 @@ public interface SAML2IdP extends Entity {\n \n     void setUpdateMatching(boolean updateMatching);\n \n-    boolean isUseDeflateEncoding();\n-\n-    void setUseDeflateEncoding(boolean useDeflateEncoding);\n-\n-    boolean isSupportUnsolicited();\n-\n-    void setSupportUnsolicited(boolean supportUnsolicited);\n-\n     SAML2BindingType getBindingType();\n \n     void setBindingType(SAML2BindingType bindingType);\n \n-    SAML2UserTemplate getUserTemplate();\n+    SAML2SP4UIUserTemplate getUserTemplate();\n \n-    void setUserTemplate(SAML2UserTemplate userTemplate);\n+    void setUserTemplate(SAML2SP4UIUserTemplate userTemplate);\n \n-    Optional<? extends SAML2IdPItem> getConnObjectKeyItem();\n+    Optional<? extends SAML2SP4UIIdPItem> getConnObjectKeyItem();\n \n-    void setConnObjectKeyItem(SAML2IdPItem item);\n+    void setConnObjectKeyItem(SAML2SP4UIIdPItem item);\n \n-    boolean add(SAML2IdPItem item);\n+    boolean add(SAML2SP4UIIdPItem item);\n \n-    List<? extends SAML2IdPItem> getItems();\n+    List<? extends SAML2SP4UIIdPItem> getItems();\n \n     boolean add(Implementation action);\n ","previous_filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdP.java"},{"sha":"7370a5727d3baeab0c62236bd304de6d2049ad96","filename":"ext/saml2sp4ui/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2SP4UIIdPItem.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdPItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdPItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdPItem.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -20,9 +20,9 @@\n \n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n \n-public interface SAML2IdPItem extends Item {\n+public interface SAML2SP4UIIdPItem extends Item {\n \n-    SAML2IdP getIdP();\n+    SAML2SP4UIIdP getIdP();\n \n-    void setIdP(SAML2IdP idp);\n+    void setIdP(SAML2SP4UIIdP idp);\n }","previous_filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdPItem.java"},{"sha":"b3e0b2cade413d8f54f3ff0da582e12736002737","filename":"ext/saml2sp4ui/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2SP4UIUserTemplate.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIUserTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIUserTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIUserTemplate.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-public interface SAML2UserTemplate extends AnyTemplate {\n+public interface SAML2SP4UIUserTemplate extends AnyTemplate {\n \n-    SAML2IdP getIdP();\n+    SAML2SP4UIIdP getIdP();\n \n-    void setIdP(SAML2IdP idp);\n+    void setIdP(SAML2SP4UIIdP idp);\n }","previous_filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2UserTemplate.java"},{"sha":"7d523ef16fbbb2d232f9c44071414844aef4b4e6","filename":"ext/saml2sp4ui/persistence-jpa/pom.xml","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,14 +23,14 @@ under the License.\n \n   <parent>\n     <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <artifactId>syncope-ext-saml2sp4ui</artifactId>\n     <version>3.0.0-SNAPSHOT</version>\n   </parent>\n \n-  <name>Apache Syncope Ext: SAML2 SP Persistence JPA</name>\n-  <description>Apache Syncope Ext: SAML2 SP Persistence JPA</description>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-persistence-jpa</artifactId>\n+  <name>Apache Syncope Ext: SAML2 SP4UI Persistence JPA</name>\n+  <description>Apache Syncope Ext: SAML2 SP4UI Persistence JPA</description>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-persistence-jpa</artifactId>\n   <packaging>jar</packaging>\n   \n   <properties>\n@@ -44,8 +44,8 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-persistence-api</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-persistence-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n   </dependencies>","previous_filename":"ext/saml2sp/persistence-jpa/pom.xml"},{"sha":"7b1f5e9eefd4e280d8adb022452d38b8b97e8387","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASAML2SP4UIIdPDAO.java","status":"renamed","additions":16,"deletions":15,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SP4UIIdPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SP4UIIdPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2SP4UIIdPDAO.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -21,29 +21,30 @@\n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n-import org.apache.syncope.core.persistence.jpa.entity.JPASAML2IdP;\n+import org.apache.syncope.core.persistence.jpa.entity.JPASAML2SP4UIIdP;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SP4UIIdPDAO;\n \n @Repository\n-public class JPASAML2IdPDAO extends AbstractDAO<SAML2IdP> implements SAML2IdPDAO {\n+public class JPASAML2SP4UIIdPDAO extends AbstractDAO<SAML2SP4UIIdP> implements SAML2SP4UIIdPDAO {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public SAML2IdP find(final String key) {\n-        return entityManager().find(JPASAML2IdP.class, key);\n+    public SAML2SP4UIIdP find(final String key) {\n+        return entityManager().find(JPASAML2SP4UIIdP.class, key);\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n-    public SAML2IdP findByEntityID(final String entityID) {\n-        TypedQuery<SAML2IdP> query = entityManager().createQuery(\"SELECT e FROM \" + JPASAML2IdP.class.getSimpleName()\n-                + \" e WHERE e.entityID = :entityID\", SAML2IdP.class);\n+    public SAML2SP4UIIdP findByEntityID(final String entityID) {\n+        TypedQuery<SAML2SP4UIIdP> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPASAML2SP4UIIdP.class.getSimpleName()\n+                + \" e WHERE e.entityID = :entityID\", SAML2SP4UIIdP.class);\n         query.setParameter(\"entityID\", entityID);\n \n-        SAML2IdP result = null;\n+        SAML2SP4UIIdP result = null;\n         try {\n             result = query.getSingleResult();\n         } catch (NoResultException e) {\n@@ -55,20 +56,20 @@ public SAML2IdP findByEntityID(final String entityID) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public List<SAML2IdP> findAll() {\n-        TypedQuery<SAML2IdP> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPASAML2IdP.class.getSimpleName() + \" e\", SAML2IdP.class);\n+    public List<SAML2SP4UIIdP> findAll() {\n+        TypedQuery<SAML2SP4UIIdP> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPASAML2SP4UIIdP.class.getSimpleName() + \" e\", SAML2SP4UIIdP.class);\n         return query.getResultList();\n     }\n \n     @Override\n-    public SAML2IdP save(final SAML2IdP idp) {\n+    public SAML2SP4UIIdP save(final SAML2SP4UIIdP idp) {\n         return entityManager().merge(idp);\n     }\n \n     @Override\n     public void delete(final String key) {\n-        SAML2IdP idp = find(key);\n+        SAML2SP4UIIdP idp = find(key);\n         if (idp != null) {\n             entityManager().remove(idp);\n         }","previous_filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASAML2IdPDAO.java"},{"sha":"1935a8f4758834d7a58a75a85a64138a634a81a7","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2SP4UIEntityFactory.java","status":"renamed","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIEntityFactory.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -19,27 +19,27 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import org.apache.syncope.core.persistence.api.entity.Entity;\n-import org.apache.syncope.core.persistence.api.entity.SAML2EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n-import org.apache.syncope.core.persistence.api.entity.SAML2UserTemplate;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIUserTemplate;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdPItem;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIEntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n \n @Component\n-public class JPASAML2EntityFactory implements SAML2EntityFactory {\n+public class JPASAML2SP4UIEntityFactory implements SAML2SP4UIEntityFactory {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <E extends Entity> E newEntity(final Class<E> reference) {\n         E result;\n \n-        if (reference.equals(SAML2IdP.class)) {\n-            result = (E) new JPASAML2IdP();\n-        } else if (reference.equals(SAML2IdPItem.class)) {\n-            result = (E) new JPASAML2IdPItem();\n-        } else if (reference.equals(SAML2UserTemplate.class)) {\n-            result = (E) new JPASAML2UserTemplate();\n+        if (reference.equals(SAML2SP4UIIdP.class)) {\n+            result = (E) new JPASAML2SP4UIIdP();\n+        } else if (reference.equals(SAML2SP4UIIdPItem.class)) {\n+            result = (E) new JPASAML2SP4UIIdPItem();\n+        } else if (reference.equals(SAML2SP4UIUserTemplate.class)) {\n+            result = (E) new JPASAML2SP4UIUserTemplate();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }","previous_filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2EntityFactory.java"},{"sha":"fbcd4af607ce175465963035bc6d8c254df58d3e","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2SP4UIIdP.java","status":"renamed","additions":38,"deletions":51,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdP.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -37,19 +37,19 @@\n import javax.validation.constraints.NotNull;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n-import org.apache.syncope.common.lib.types.SAML2SPImplementationType;\n+import org.apache.syncope.common.lib.types.SAML2SP4UIImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n-import org.apache.syncope.core.persistence.api.entity.SAML2UserTemplate;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.persistence.jpa.validation.entity.SAML2IdPCheck;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIUserTemplate;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdPItem;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.SAML2SP4UIIdPCheck;\n \n @Entity\n-@Table(name = JPASAML2IdP.TABLE)\n+@Table(name = JPASAML2SP4UIIdP.TABLE)\n @Cacheable\n-@SAML2IdPCheck\n-public class JPASAML2IdP extends AbstractGeneratedKeyEntity implements SAML2IdP {\n+@SAML2SP4UIIdPCheck\n+public class JPASAML2SP4UIIdP extends AbstractGeneratedKeyEntity implements SAML2SP4UIIdP {\n \n     private static final long serialVersionUID = -392372595500355552L;\n \n@@ -65,8 +65,11 @@ public class JPASAML2IdP extends AbstractGeneratedKeyEntity implements SAML2IdP\n     @Basic(fetch = FetchType.EAGER)\n     private Byte[] metadata;\n \n+    @NotNull\n+    private Boolean logoutSupported = false;\n+\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"idp\")\n-    private List<JPASAML2IdPItem> items = new ArrayList<>();\n+    private List<JPASAML2SP4UIIdPItem> items = new ArrayList<>();\n \n     @NotNull\n     private Boolean createUnmatching = false;\n@@ -77,22 +80,16 @@ public class JPASAML2IdP extends AbstractGeneratedKeyEntity implements SAML2IdP\n     @NotNull\n     private Boolean updateMatching = false;\n \n-    @NotNull\n-    private Boolean useDeflateEncoding = false;\n-\n-    @NotNull\n-    private Boolean supportUnsolicited = false;\n-\n     @Column(nullable = false)\n     private SAML2BindingType bindingType;\n \n     @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"idp\")\n-    private JPASAML2UserTemplate userTemplate;\n+    private JPASAML2SP4UIUserTemplate userTemplate;\n \n     @ManyToMany(fetch = FetchType.EAGER)\n-    @JoinTable(name = \"SAML2IdPAction\",\n+    @JoinTable(name = \"SAML2IdP4UIAction\",\n             joinColumns =\n-            @JoinColumn(name = \"saml2idp_id\"),\n+            @JoinColumn(name = \"saml2idp4ui_id\"),\n             inverseJoinColumns =\n             @JoinColumn(name = \"implementation_id\"))\n     private List<JPAImplementation> actions = new ArrayList<>();\n@@ -130,6 +127,16 @@ public void setMetadata(final byte[] metadata) {\n         this.metadata = Optional.ofNullable(metadata).map(ArrayUtils::toObject).orElse(null);\n     }\n \n+    @Override\n+    public boolean isLogoutSupported() {\n+        return logoutSupported;\n+    }\n+\n+    @Override\n+    public void setLogoutSupported(final boolean logoutSupported) {\n+        this.logoutSupported = logoutSupported;\n+    }\n+\n     @Override\n     public boolean isCreateUnmatching() {\n         return createUnmatching;\n@@ -160,26 +167,6 @@ public void setUpdateMatching(final boolean updateMatching) {\n         this.updateMatching = updateMatching;\n     }\n \n-    @Override\n-    public boolean isUseDeflateEncoding() {\n-        return useDeflateEncoding;\n-    }\n-\n-    @Override\n-    public void setUseDeflateEncoding(final boolean useDeflateEncoding) {\n-        this.useDeflateEncoding = useDeflateEncoding;\n-    }\n-\n-    @Override\n-    public boolean isSupportUnsolicited() {\n-        return supportUnsolicited;\n-    }\n-\n-    @Override\n-    public void setSupportUnsolicited(final boolean supportUnsolicited) {\n-        this.supportUnsolicited = supportUnsolicited;\n-    }\n-\n     @Override\n     public SAML2BindingType getBindingType() {\n         return bindingType;\n@@ -191,42 +178,42 @@ public void setBindingType(final SAML2BindingType bindingType) {\n     }\n \n     @Override\n-    public SAML2UserTemplate getUserTemplate() {\n+    public SAML2SP4UIUserTemplate getUserTemplate() {\n         return userTemplate;\n     }\n \n     @Override\n-    public void setUserTemplate(final SAML2UserTemplate userTemplate) {\n-        checkType(userTemplate, JPASAML2UserTemplate.class);\n-        this.userTemplate = (JPASAML2UserTemplate) userTemplate;\n+    public void setUserTemplate(final SAML2SP4UIUserTemplate userTemplate) {\n+        checkType(userTemplate, JPASAML2SP4UIUserTemplate.class);\n+        this.userTemplate = (JPASAML2SP4UIUserTemplate) userTemplate;\n     }\n \n     @Override\n-    public boolean add(final SAML2IdPItem item) {\n-        checkType(item, JPASAML2IdPItem.class);\n-        return items.contains((JPASAML2IdPItem) item) || items.add((JPASAML2IdPItem) item);\n+    public boolean add(final SAML2SP4UIIdPItem item) {\n+        checkType(item, JPASAML2SP4UIIdPItem.class);\n+        return items.contains((JPASAML2SP4UIIdPItem) item) || items.add((JPASAML2SP4UIIdPItem) item);\n     }\n \n     @Override\n-    public List<? extends SAML2IdPItem> getItems() {\n+    public List<? extends SAML2SP4UIIdPItem> getItems() {\n         return items;\n     }\n \n     @Override\n-    public Optional<? extends SAML2IdPItem> getConnObjectKeyItem() {\n+    public Optional<? extends SAML2SP4UIIdPItem> getConnObjectKeyItem() {\n         return getItems().stream().filter(Item::isConnObjectKey).findFirst();\n     }\n \n     @Override\n-    public void setConnObjectKeyItem(final SAML2IdPItem item) {\n+    public void setConnObjectKeyItem(final SAML2SP4UIIdPItem item) {\n         item.setConnObjectKey(true);\n         this.add(item);\n     }\n \n     @Override\n     public boolean add(final Implementation action) {\n         checkType(action, JPAImplementation.class);\n-        checkImplementationType(action, SAML2SPImplementationType.IDP_ACTIONS);\n+        checkImplementationType(action, SAML2SP4UIImplementationType.IDP_ACTIONS);\n         return actions.contains((JPAImplementation) action) || actions.add((JPAImplementation) action);\n     }\n \n@@ -243,8 +230,8 @@ public JPAImplementation getRequestedAuthnContextProvider() {\n     @Override\n     public void setRequestedAuthnContextProvider(final Implementation requestedAuthnContextProvider) {\n         checkType(requestedAuthnContextProvider, JPAImplementation.class);\n-        checkImplementationType(\n-                requestedAuthnContextProvider, SAML2SPImplementationType.REQUESTED_AUTHN_CONTEXT_PROVIDER);\n+        checkImplementationType(requestedAuthnContextProvider,\n+                SAML2SP4UIImplementationType.REQUESTED_AUTHN_CONTEXT_PROVIDER);\n         this.requestedAuthnContextProvider = (JPAImplementation) requestedAuthnContextProvider;\n     }\n }","previous_filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java"},{"sha":"62db8517bf8e71094237bde902414c7ebb68e81e","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2SP4UIIdPItem.java","status":"renamed","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdPItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdPItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdPItem.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -31,21 +31,21 @@\n import javax.persistence.UniqueConstraint;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractItem;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdPItem;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n \n @Entity\n-@Table(name = JPASAML2IdPItem.TABLE)\n+@Table(name = JPASAML2SP4UIIdPItem.TABLE)\n @Cacheable\n-public class JPASAML2IdPItem extends AbstractItem implements SAML2IdPItem {\n+public class JPASAML2SP4UIIdPItem extends AbstractItem implements SAML2SP4UIIdPItem {\n \n     public static final String TABLE = \"SAML2IdPItem\";\n \n     private static final long serialVersionUID = -597417734910639991L;\n \n     @ManyToOne\n-    private JPASAML2IdP idp;\n+    private JPASAML2SP4UIIdP idp;\n \n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(name = TABLE + \"Transformer\",\n@@ -58,14 +58,14 @@ public class JPASAML2IdPItem extends AbstractItem implements SAML2IdPItem {\n     private List<JPAImplementation> transformers = new ArrayList<>();\n \n     @Override\n-    public SAML2IdP getIdP() {\n+    public SAML2SP4UIIdP getIdP() {\n         return idp;\n     }\n \n     @Override\n-    public void setIdP(final SAML2IdP idp) {\n-        checkType(idp, JPASAML2IdP.class);\n-        this.idp = (JPASAML2IdP) idp;\n+    public void setIdP(final SAML2SP4UIIdP idp) {\n+        checkType(idp, JPASAML2SP4UIIdP.class);\n+        this.idp = (JPASAML2SP4UIIdP) idp;\n     }\n \n     @Override","previous_filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdPItem.java"},{"sha":"e5f79ed819cbfcbac936de4126d7b917acafd03f","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2SP4UIUserTemplate.java","status":"renamed","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIUserTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIUserTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIUserTemplate.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -22,31 +22,30 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n-import org.apache.syncope.core.persistence.api.entity.SAML2UserTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractAnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIUserTemplate;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n \n @Entity\n-@Table(name = JPASAML2UserTemplate.TABLE, uniqueConstraints =\n+@Table(name = JPASAML2SP4UIUserTemplate.TABLE, uniqueConstraints =\n         @UniqueConstraint(columnNames = { \"idp_id\" }))\n-public class JPASAML2UserTemplate extends AbstractAnyTemplate implements SAML2UserTemplate {\n+public class JPASAML2SP4UIUserTemplate extends AbstractAnyTemplate implements SAML2SP4UIUserTemplate {\n \n     private static final long serialVersionUID = -4575039890434426856L;\n \n     public static final String TABLE = \"SAML2UserTemplate\";\n \n     @ManyToOne\n-    private JPASAML2IdP idp;\n+    private JPASAML2SP4UIIdP idp;\n \n     @Override\n-    public SAML2IdP getIdP() {\n+    public SAML2SP4UIIdP getIdP() {\n         return idp;\n     }\n \n     @Override\n-    public void setIdP(final SAML2IdP idp) {\n-        checkType(idp, JPASAML2IdP.class);\n-        this.idp = (JPASAML2IdP) idp;\n+    public void setIdP(final SAML2SP4UIIdP idp) {\n+        checkType(idp, JPASAML2SP4UIIdP.class);\n+        this.idp = (JPASAML2SP4UIIdP) idp;\n     }\n-\n }","previous_filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2UserTemplate.java"},{"sha":"938783e24866664f5df65b098da8fdb8d78f6fb5","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2SP4UIIdPCheck.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2SP4UIIdPCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2SP4UIIdPCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2SP4UIIdPCheck.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -29,11 +29,11 @@\n \n @Target({ ElementType.TYPE })\n @Retention(RetentionPolicy.RUNTIME)\n-@Constraint(validatedBy = SAML2IdPValidator.class)\n+@Constraint(validatedBy = SAML2SP4UIIdPValidator.class)\n @Documented\n-public @interface SAML2IdPCheck {\n+public @interface SAML2SP4UIIdPCheck {\n \n-    String message() default \"{org.apache.syncope.core.persistence.validation.saml2idp}\";\n+    String message() default \"{org.apache.syncope.core.persistence.validation.saml2sp4uiIdp}\";\n \n     Class<?>[] groups() default {};\n ","previous_filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPCheck.java"},{"sha":"98ce3921bfcfed2b969ea6e8b6ed735127bda307","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2SP4UIIdPValidator.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2SP4UIIdPValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2SP4UIIdPValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2SP4UIIdPValidator.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -21,14 +21,14 @@\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n \n-public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP> {\n+public class SAML2SP4UIIdPValidator extends AbstractValidator<SAML2SP4UIIdPCheck, SAML2SP4UIIdP> {\n \n     @Override\n-    public boolean isValid(final SAML2IdP saml2IdP, final ConstraintValidatorContext context) {\n+    public boolean isValid(final SAML2SP4UIIdP saml2IdP, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n         if (isHtml(saml2IdP.getKey())) {","previous_filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPValidator.java"},{"sha":"9738a820deb633a10734744dd242b3fcce31245e","filename":"ext/saml2sp4ui/pom.xml","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,54 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope-ext</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: SAML2 SP4UI</name>\n+  <description>Apache Syncope Ext: SAML2 SP4UI</description>\n+  <groupId>org.apache.syncope.ext</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui</artifactId>\n+  <packaging>pom</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n+  </properties>\n+\n+  <modules>\n+    <module>common-lib</module>\n+    <module>persistence-api</module>\n+    <module>persistence-jpa</module>\n+    <module>provisioning-api</module>\n+    <module>provisioning-java</module>\n+    <module>rest-api</module>\n+    <module>logic</module>\n+    <module>rest-cxf</module>\n+    <module>client-common-ui</module>\n+    <module>client-console</module>\n+    <module>client-enduser</module>\n+  </modules>\n+\n+</project>"},{"sha":"a9255d78f0f5b5c1a0cfb9cff13ef07857f7ad94","filename":"ext/saml2sp4ui/provisioning-api/pom.xml","status":"renamed","additions":16,"deletions":12,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fprovisioning-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fprovisioning-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fprovisioning-api%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,14 +23,14 @@ under the License.\n \n   <parent>\n     <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <artifactId>syncope-ext-saml2sp4ui</artifactId>\n     <version>3.0.0-SNAPSHOT</version>\n   </parent>\n \n-  <name>Apache Syncope Ext: SAML2 SP Provisioning API</name>\n-  <description>Apache Syncope Ext: SAML2 SP Provisioning API</description>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-provisioning-api</artifactId>\n+  <name>Apache Syncope Ext: SAML2 SP4UI Provisioning API</name>\n+  <description>Apache Syncope Ext: SAML2 SP4UI Provisioning API</description>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-provisioning-api</artifactId>\n   <packaging>jar</packaging>\n   \n   <properties>\n@@ -45,19 +45,23 @@ under the License.\n     </dependency>\n \n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-persistence-api</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-persistence-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-common-lib</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-common-lib</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-    \n+\n+    <dependency>\n+      <groupId>org.pac4j</groupId>\n+      <artifactId>pac4j-saml</artifactId>\n+    </dependency>\n     <dependency>\n-      <groupId>org.opensaml</groupId>\n-      <artifactId>opensaml-saml-api</artifactId>\n+      <groupId>org.apache.velocity</groupId>\n+      <artifactId>velocity-engine-core</artifactId>\n     </dependency>\n   </dependencies>\n ","previous_filename":"ext/saml2sp/provisioning-api/pom.xml"},{"sha":"f1040d3b761b46d6c3d9740fa647b52b67703496","filename":"ext/saml2sp4ui/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/RequestedAuthnContextProvider.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FRequestedAuthnContextProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FRequestedAuthnContextProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FRequestedAuthnContextProvider.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -18,10 +18,9 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n+import java.util.function.Supplier;\n import org.opensaml.saml.saml2.core.RequestedAuthnContext;\n \n @FunctionalInterface\n-public interface RequestedAuthnContextProvider {\n-\n-    RequestedAuthnContext provide();\n+public interface RequestedAuthnContextProvider extends Supplier<RequestedAuthnContext> {\n }","previous_filename":"ext/saml2sp/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/RequestedAuthnContextProvider.java"},{"sha":"d4cb3ca4a5e967fd24d2ad747fe098475ecf69df","filename":"ext/saml2sp4ui/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/SAML2SP4UIIdPActions.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FSAML2SP4UIIdPActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FSAML2SP4UIIdPActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FSAML2SP4UIIdPActions.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -20,24 +20,24 @@\n \n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n+import org.apache.syncope.common.lib.saml2.SAML2LoginResponse;\n import org.apache.syncope.common.lib.to.UserTO;\n \n-public interface SAML2IdPActions {\n+public interface SAML2SP4UIIdPActions {\n \n-    default UserCR beforeCreate(UserCR input, SAML2LoginResponseTO loginResponse) {\n+    default UserCR beforeCreate(UserCR input, SAML2LoginResponse loginResponse) {\n         return input;\n     }\n \n-    default UserTO afterCreate(UserTO input, SAML2LoginResponseTO loginResponse) {\n+    default UserTO afterCreate(UserTO input, SAML2LoginResponse loginResponse) {\n         return input;\n     }\n \n-    default UserUR beforeUpdate(UserUR input, SAML2LoginResponseTO loginResponse) {\n+    default UserUR beforeUpdate(UserUR input, SAML2LoginResponse loginResponse) {\n         return input;\n     }\n \n-    default UserTO afterUpdate(UserTO input, SAML2LoginResponseTO loginResponse) {\n+    default UserTO afterUpdate(UserTO input, SAML2LoginResponse loginResponse) {\n         return input;\n     }\n }","previous_filename":"ext/saml2sp/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/SAML2IdPActions.java"},{"sha":"2571bb5c7dea7d3f3a72f5d6c95bb2754a58a13c","filename":"ext/saml2sp4ui/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2SP4UIIdPDataBinder.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SP4UIIdPDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SP4UIIdPDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2SP4UIIdPDataBinder.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.to.SAML2IdPTO;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.apache.syncope.common.lib.to.SAML24UIIdPTO;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n \n-public interface SAML2IdPDataBinder {\n+public interface SAML2SP4UIIdPDataBinder {\n \n-    SAML2IdPTO getIdPTO(SAML2IdP idp);\n+    SAML24UIIdPTO getIdPTO(SAML2SP4UIIdP idp);\n \n-    SAML2IdP create(SAML2IdPTO idpTO);\n+    SAML2SP4UIIdP create(SAML24UIIdPTO idpTO);\n \n-    SAML2IdP update(SAML2IdP idp, SAML2IdPTO idpTO);\n+    SAML2SP4UIIdP update(SAML2SP4UIIdP idp, SAML24UIIdPTO idpTO);\n \n }","previous_filename":"ext/saml2sp/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2IdPDataBinder.java"},{"sha":"998d211e4b55276135f2ddb3386b7dd9735ab1bb","filename":"ext/saml2sp4ui/provisioning-java/pom.xml","status":"renamed","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,14 +23,14 @@ under the License.\n \n   <parent>\n     <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <artifactId>syncope-ext-saml2sp4ui</artifactId>\n     <version>3.0.0-SNAPSHOT</version>\n   </parent>\n \n-  <name>Apache Syncope Ext: SAML2 SP Provisioning Java</name>\n-  <description>Apache Syncope Ext: SAML2 SP Provisioning Java</description>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-provisioning-java</artifactId>\n+  <name>Apache Syncope Ext: SAML2 SP4UI Provisioning Java</name>\n+  <description>Apache Syncope Ext: SAML2 SP4UI Provisioning Java</description>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-provisioning-java</artifactId>\n   <packaging>jar</packaging>\n   \n   <properties>\n@@ -44,15 +44,10 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-provisioning-api</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-provisioning-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-   \n-    <dependency>\n-      <groupId>org.opensaml</groupId>\n-      <artifactId>opensaml-saml-impl</artifactId>\n-    </dependency>\n   </dependencies>\n \n   <build>","previous_filename":"ext/saml2sp/provisioning-java/pom.xml"},{"sha":"3a7574e5b24ed19659409184ea4f35537d256b39","filename":"ext/saml2sp4ui/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/NullRequestedAuthnContextProvider.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FNullRequestedAuthnContextProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FNullRequestedAuthnContextProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FNullRequestedAuthnContextProvider.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -24,7 +24,7 @@\n public class NullRequestedAuthnContextProvider implements RequestedAuthnContextProvider {\n \n     @Override\n-    public RequestedAuthnContext provide() {\n+    public RequestedAuthnContext get() {\n         return null;\n     }\n }","previous_filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/NullRequestedAuthnContextProvider.java"},{"sha":"579d06efde901a945844fefbc71b8c0029bd8a12","filename":"ext/saml2sp4ui/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2SP4UIIdPDataBinderImpl.java","status":"renamed","additions":25,"deletions":27,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SP4UIIdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SP4UIIdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SP4UIIdPDataBinderImpl.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -24,56 +24,56 @@\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.lib.to.SAML24UIIdPTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n-import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.SAML2EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n-import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n-import org.apache.syncope.core.persistence.api.entity.SAML2UserTemplate;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n-import org.apache.syncope.core.provisioning.api.data.SAML2IdPDataBinder;\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIUserTemplate;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdPItem;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIEntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SP4UIIdPDAO;\n+import org.apache.syncope.core.provisioning.api.data.SAML2SP4UIIdPDataBinder;\n \n @Component\n-public class SAML2IdPDataBinderImpl implements SAML2IdPDataBinder {\n+public class SAML2SP4UIIdPDataBinderImpl implements SAML2SP4UIIdPDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SAML2IdPDataBinder.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(SAML2SP4UIIdPDataBinder.class);\n \n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n     @Autowired\n-    private SAML2IdPDAO saml2IdPDAO;\n+    private SAML2SP4UIIdPDAO idapDAO;\n \n     @Autowired\n     private ImplementationDAO implementationDAO;\n \n     @Autowired\n-    private SAML2EntityFactory entityFactory;\n+    private SAML2SP4UIEntityFactory entityFactory;\n \n     @Autowired\n     private IntAttrNameParser intAttrNameParser;\n \n     @Override\n-    public SAML2IdP create(final SAML2IdPTO idpTO) {\n-        return update(entityFactory.newEntity(SAML2IdP.class), idpTO);\n+    public SAML2SP4UIIdP create(final SAML24UIIdPTO idpTO) {\n+        return update(entityFactory.newEntity(SAML2SP4UIIdP.class), idpTO);\n     }\n \n-    private void populateItems(final SAML2IdPTO idpTO, final SAML2IdP idp) {\n+    private void populateItems(final SAML24UIIdPTO idpTO, final SAML2SP4UIIdP idp) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n         SyncopeClientException invalidMapping =\n                 SyncopeClientException.build(ClientExceptionType.InvalidMapping);\n@@ -109,7 +109,7 @@ private void populateItems(final SAML2IdPTO idpTO, final SAML2IdP idp) {\n                         scce.addException(invalidMandatoryCondition);\n                     }\n \n-                    SAML2IdPItem item = entityFactory.newEntity(SAML2IdPItem.class);\n+                    SAML2SP4UIIdPItem item = entityFactory.newEntity(SAML2SP4UIIdPItem.class);\n                     item.setIntAttrName(itemTO.getIntAttrName());\n                     item.setExtAttrName(itemTO.getExtAttrName());\n                     item.setMandatoryCondition(itemTO.getMandatoryCondition());\n@@ -146,23 +146,22 @@ private void populateItems(final SAML2IdPTO idpTO, final SAML2IdP idp) {\n     }\n \n     @Override\n-    public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n+    public SAML2SP4UIIdP update(final SAML2SP4UIIdP idp, final SAML24UIIdPTO idpTO) {\n         idp.setEntityID(idpTO.getEntityID());\n         idp.setName(idpTO.getName());\n         idp.setMetadata(Base64.getMimeDecoder().decode(idpTO.getMetadata()));\n+        idp.setLogoutSupported(idpTO.isLogoutSupported());\n         idp.setCreateUnmatching(idpTO.isCreateUnmatching());\n         idp.setSelfRegUnmatching(idpTO.isSelfRegUnmatching());\n         idp.setUpdateMatching(idpTO.isUpdateMatching());\n-        idp.setUseDeflateEncoding(idpTO.isUseDeflateEncoding());\n-        idp.setSupportUnsolicited(idpTO.isSupportUnsolicited());\n         idp.setBindingType(idpTO.getBindingType());\n \n         if (idpTO.getUserTemplate() == null) {\n             idp.setUserTemplate(null);\n         } else {\n-            SAML2UserTemplate userTemplate = idp.getUserTemplate();\n+            SAML2SP4UIUserTemplate userTemplate = idp.getUserTemplate();\n             if (userTemplate == null) {\n-                userTemplate = entityFactory.newEntity(SAML2UserTemplate.class);\n+                userTemplate = entityFactory.newEntity(SAML2SP4UIUserTemplate.class);\n                 userTemplate.setAnyType(anyTypeDAO.findUser());\n                 userTemplate.setIdP(idp);\n                 idp.setUserTemplate(userTemplate);\n@@ -196,10 +195,10 @@ public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n             }\n         }\n \n-        return saml2IdPDAO.save(idp);\n+        return idapDAO.save(idp);\n     }\n \n-    private static void populateItems(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n+    private static void populateItems(final SAML2SP4UIIdP idp, final SAML24UIIdPTO idpTO) {\n         idp.getItems().forEach(item -> {\n             ItemTO itemTO = new ItemTO();\n             itemTO.setKey(item.getKey());\n@@ -221,19 +220,18 @@ private static void populateItems(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n     }\n \n     @Override\n-    public SAML2IdPTO getIdPTO(final SAML2IdP idp) {\n-        SAML2IdPTO idpTO = new SAML2IdPTO();\n+    public SAML24UIIdPTO getIdPTO(final SAML2SP4UIIdP idp) {\n+        SAML24UIIdPTO idpTO = new SAML24UIIdPTO();\n \n         idpTO.setKey(idp.getKey());\n         idpTO.setEntityID(idp.getEntityID());\n         idpTO.setName(idp.getName());\n-        idpTO.setUseDeflateEncoding(idp.isUseDeflateEncoding());\n-        idpTO.setSupportUnsolicited(idp.isSupportUnsolicited());\n+        idpTO.setMetadata(Base64.getMimeEncoder().encodeToString(idp.getMetadata()));\n+        idpTO.setLogoutSupported(idp.isLogoutSupported());\n         idpTO.setBindingType(idp.getBindingType());\n         idpTO.setCreateUnmatching(idp.isCreateUnmatching());\n         idpTO.setSelfRegUnmatching(idp.isSelfRegUnmatching());\n         idpTO.setUpdateMatching(idp.isUpdateMatching());\n-        idpTO.setMetadata(Base64.getMimeEncoder().encodeToString(idp.getMetadata()));\n \n         if (idp.getUserTemplate() != null) {\n             idpTO.setUserTemplate((UserTO) idp.getUserTemplate().get());","previous_filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java"},{"sha":"d40f6f23b4d4a728190a38966ae00683b5d85d75","filename":"ext/saml2sp4ui/rest-api/pom.xml","status":"renamed","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Frest-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Frest-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Frest-api%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,14 +23,14 @@ under the License.\n \n   <parent>\n     <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <artifactId>syncope-ext-saml2sp4ui</artifactId>\n     <version>3.0.0-SNAPSHOT</version>\n   </parent>\n \n-  <name>Apache Syncope Ext: SAML2 SP REST API</name>\n-  <description>Apache Syncope Ext: SAML2 SP REST API</description>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-rest-api</artifactId>\n+  <name>Apache Syncope Ext: SAML2 SP4UI REST API</name>\n+  <description>Apache Syncope Ext: SAML2 SP4UI REST API</description>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-rest-api</artifactId>\n   <packaging>jar</packaging>\n   \n   <properties>\n@@ -39,14 +39,14 @@ under the License.\n \n   <dependencies>\n     <dependency>\n-      <groupId>org.apache.syncope.common.idm</groupId>\n-      <artifactId>syncope-common-idm-rest-api</artifactId>\n+      <groupId>org.apache.syncope.common.idrepo</groupId>\n+      <artifactId>syncope-common-idrepo-rest-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     \n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-common-lib</artifactId>      \n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-common-lib</artifactId>      \n       <version>${project.version}</version>\n     </dependency>    \n   </dependencies>","previous_filename":"ext/saml2sp/rest-api/pom.xml"},{"sha":"adecce90f1644b80edbc4d38d9e65ead8b55391d","filename":"ext/saml2sp4ui/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SP4UIIdPService.java","status":"renamed","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SP4UIIdPService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SP4UIIdPService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SP4UIIdPService.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -39,18 +39,18 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.lib.to.SAML24UIIdPTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n- * REST operations for SAML 2.0 Identity Providers.\n+ * REST operations for SAML 2.0 SP4UI Identity Providers.\n  */\n-@Tag(name = \"SAML 2.0\")\n+@Tag(name = \"SAML 2.0 SP4UI\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"saml2sp/identityProviders\")\n-public interface SAML2IdPService extends JAXRSService {\n+@Path(\"saml2sp4ui/identityProviders\")\n+public interface SAML2SP4UIIdPService extends JAXRSService {\n \n     /**\n      * Returns a list of all defined SAML 2.0 Identity Providers.\n@@ -59,7 +59,7 @@ public interface SAML2IdPService extends JAXRSService {\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<SAML2IdPTO> list();\n+    List<SAML24UIIdPTO> list();\n \n     /**\n      * Returns the SAML 2.0 Identity Provider with matching entityID, if available.\n@@ -70,7 +70,7 @@ public interface SAML2IdPService extends JAXRSService {\n     @GET\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2IdPTO read(@PathParam(\"key\") String key);\n+    SAML24UIIdPTO read(@PathParam(\"key\") String key);\n \n     /**\n      * Imports the SAML 2.0 Identity Provider definitions available in the provided XML metadata.\n@@ -96,7 +96,7 @@ public interface SAML2IdPService extends JAXRSService {\n     @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void update(@NotNull SAML2IdPTO saml2IdpTO);\n+    void update(@NotNull SAML24UIIdPTO saml2IdpTO);\n \n     /**\n      * Deletes the SAML 2.0 Identity Provider with matching entityID.","previous_filename":"ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java"},{"sha":"b709931e085b6e5fca9fb6f21fe947b0933585c9","filename":"ext/saml2sp4ui/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SP4UIService.java","status":"renamed","additions":15,"deletions":11,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SP4UIService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SP4UIService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SP4UIService.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -31,20 +31,20 @@\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2RequestTO;\n-import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n-import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n+import org.apache.syncope.common.lib.saml2.SAML2Request;\n+import org.apache.syncope.common.lib.saml2.SAML2LoginResponse;\n+import org.apache.syncope.common.lib.saml2.SAML2Response;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n- * REST operations for the provided SAML 2.0 Service Provider.\n+ * REST operations for the provided SAML 2.0 SP4UI Service Provider.\n  */\n-@Tag(name = \"SAML 2.0\")\n+@Tag(name = \"SAML 2.0 SP4UI\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"saml2sp/serviceProvider\")\n-public interface SAML2SPService extends JAXRSService {\n+@Path(\"saml2sp4ui/serviceProvider\")\n+public interface SAML2SP4UIService extends JAXRSService {\n \n     /**\n      * Returns the XML metadata for the provided SAML 2.0 Service Provider.\n@@ -61,14 +61,16 @@ public interface SAML2SPService extends JAXRSService {\n      * Generates SAML 2.0 authentication request for the IdP matching the provided entity ID.\n      *\n      * @param spEntityID SAML 2.0 SP entity ID.\n+     * @param urlContext SAML 2.0 SP agent URL context\n      * @param idpEntityID SAML 2.0 IdP entity ID.\n      * @return SAML 2.0 authentication request\n      */\n     @POST\n     @Path(\"loginRequest\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2RequestTO createLoginRequest(\n+    SAML2Request createLoginRequest(\n             @QueryParam(\"spEntityID\") String spEntityID,\n+            @QueryParam(\"urlContext\") String urlContext,\n             @QueryParam(\"idpEntityID\") String idpEntityID);\n \n     /**\n@@ -81,18 +83,20 @@ SAML2RequestTO createLoginRequest(\n     @Path(\"loginResponse\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2LoginResponseTO validateLoginResponse(SAML2ReceivedResponseTO response);\n+    SAML2LoginResponse validateLoginResponse(SAML2Response response);\n \n     /**\n      * Generates SAML 2.0 logout request for the IdP matching the requesting access token.\n      *\n      * @param spEntityID SAML 2.0 SP entity ID.\n+     * @param urlContext SAML 2.0 SP agent URL context\n      * @return SAML 2.0 logout request\n      */\n     @POST\n     @Path(\"logoutRequest\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2RequestTO createLogoutRequest(@QueryParam(\"spEntityID\") String spEntityID);\n+    SAML2Request createLogoutRequest(\n+            @QueryParam(\"spEntityID\") String spEntityID, @QueryParam(\"urlContext\") String urlContext);\n \n     /**\n      * Validates the received SAML 2.0 logout response.\n@@ -105,5 +109,5 @@ SAML2RequestTO createLoginRequest(\n     @Path(\"logoutResponse\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void validateLogoutResponse(SAML2ReceivedResponseTO response);\n+    void validateLogoutResponse(SAML2Response response);\n }","previous_filename":"ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java"},{"sha":"fd173ac30252ef1a8c6649b5bfa5c57bf9089137","filename":"ext/saml2sp4ui/rest-cxf/pom.xml","status":"renamed","additions":19,"deletions":13,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Frest-cxf%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -23,14 +23,14 @@ under the License.\n \n   <parent>\n     <groupId>org.apache.syncope.ext</groupId>\n-    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <artifactId>syncope-ext-saml2sp4ui</artifactId>\n     <version>3.0.0-SNAPSHOT</version>\n   </parent>\n \n-  <name>Apache Syncope Ext: SAML2 SP REST CXF</name>\n-  <description>Apache Syncope Ext: SAML2 SP REST CXF</description>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-rest-cxf</artifactId>\n+  <name>Apache Syncope Ext: SAML2 SP4UI REST CXF</name>\n+  <description>Apache Syncope Ext: SAML2 SP4UI REST CXF</description>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-rest-cxf</artifactId>\n   <packaging>jar</packaging>\n   \n   <properties>\n@@ -39,24 +39,30 @@ under the License.\n \n   <dependencies>\n     <dependency>\n-      <groupId>org.apache.syncope.core.idm</groupId>\n-      <artifactId>syncope-core-idm-rest-cxf</artifactId>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>javax.servlet-api</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope.core.idrepo</groupId>\n+      <artifactId>syncope-core-idrepo-rest-cxf</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-rest-api</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-rest-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-rest-api</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-rest-api</artifactId>\n       <version>${project.version}</version>\n       <classifier>javadoc</classifier>\n     </dependency>\n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-logic</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-logic</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n   </dependencies>","previous_filename":"ext/saml2sp/rest-cxf/pom.xml"},{"sha":"620affc3e42343a3060a07504e5a56764663742c","filename":"ext/saml2sp4ui/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SP4UIIdPServiceImpl.java","status":"renamed","additions":9,"deletions":15,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SP4UIIdPServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SP4UIIdPServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SP4UIIdPServiceImpl.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -21,47 +21,41 @@\n import java.io.InputStream;\n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.lib.to.SAML24UIIdPTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPService;\n-import org.apache.syncope.core.logic.SAML2IdPLogic;\n+import org.apache.syncope.core.logic.SAML2SP4UIIdPLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n+import org.apache.syncope.common.rest.api.service.SAML2SP4UIIdPService;\n \n @Service\n-public class SAML2IdPServiceImpl extends AbstractServiceImpl implements SAML2IdPService {\n+public class SAML2SP4UIIdPServiceImpl extends AbstractServiceImpl implements SAML2SP4UIIdPService {\n \n     @Autowired\n-    private SAML2IdPLogic logic;\n+    private SAML2SP4UIIdPLogic logic;\n \n     @Override\n-    public List<SAML2IdPTO> list() {\n+    public List<SAML24UIIdPTO> list() {\n         return logic.list();\n     }\n \n     @Override\n-    public SAML2IdPTO read(final String key) {\n+    public SAML24UIIdPTO read(final String key) {\n         return logic.read(key);\n     }\n \n     @Override\n     public Response importFromMetadata(final InputStream input) {\n-        List<String> imported = logic.importFromMetadata(input);\n-        if (imported.isEmpty()) {\n-            return Response.ok().build();\n-        } else {\n-            return Response.ok().header(RESTHeaders.RESOURCE_KEY, imported).build();\n-        }\n+        return Response.ok().header(RESTHeaders.RESOURCE_KEY, logic.importFromMetadata(input)).build();\n     }\n \n     @Override\n-    public void update(final SAML2IdPTO saml2IdpTO) {\n+    public void update(final SAML24UIIdPTO saml2IdpTO) {\n         logic.update(saml2IdpTO);\n     }\n \n     @Override\n     public void delete(final String key) {\n         logic.delete(key);\n     }\n-\n }","previous_filename":"ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPServiceImpl.java"},{"sha":"2fe2a8f387e3d0c59225bb11a9419331fe656e3d","filename":"ext/saml2sp4ui/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SP4UIServiceImpl.java","status":"renamed","additions":21,"deletions":16,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SP4UIServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fsaml2sp4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SP4UIServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SP4UIServiceImpl.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -18,26 +18,25 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import java.util.Optional;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.to.SAML2RequestTO;\n-import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n-import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n-import org.apache.syncope.common.rest.api.service.SAML2SPService;\n-import org.apache.syncope.core.logic.SAML2SPLogic;\n+import org.apache.syncope.common.lib.saml2.SAML2Request;\n+import org.apache.syncope.common.lib.saml2.SAML2LoginResponse;\n+import org.apache.syncope.common.lib.saml2.SAML2Response;\n+import org.apache.syncope.common.rest.api.service.SAML2SP4UIService;\n+import org.apache.syncope.core.logic.SAML2SP4UILogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import java.util.Optional;\n-\n @Service\n-public class SAML2SPServiceImpl extends AbstractServiceImpl implements SAML2SPService {\n+public class SAML2SP4UIServiceImpl extends AbstractServiceImpl implements SAML2SP4UIService {\n \n     @Autowired\n-    private SAML2SPLogic logic;\n+    private SAML2SP4UILogic logic;\n \n     @Override\n     public Response getMetadata(final String spEntityID, final String urlContext) {\n@@ -49,25 +48,31 @@ public Response getMetadata(final String spEntityID, final String urlContext) {\n     }\n \n     @Override\n-    public SAML2RequestTO createLoginRequest(final String spEntityID, final String idpEntityID) {\n-        return logic.createLoginRequest(StringUtils.appendIfMissing(spEntityID, \"/\"), idpEntityID);\n+    public SAML2Request createLoginRequest(\n+            final String spEntityID, final String urlContext, final String idpEntityID) {\n+\n+        return logic.createLoginRequest(\n+                StringUtils.appendIfMissing(spEntityID, \"/\"),\n+                urlContext,\n+                idpEntityID);\n     }\n \n     @Override\n-    public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO reponse) {\n+    public SAML2LoginResponse validateLoginResponse(final SAML2Response reponse) {\n         return logic.validateLoginResponse(reponse);\n     }\n \n     @Override\n-    public SAML2RequestTO createLogoutRequest(final String spEntityID) {\n+    public SAML2Request createLogoutRequest(final String spEntityID, final String urlContext) {\n         return logic.createLogoutRequest(\n                 getJWTToken(),\n-                StringUtils.appendIfMissing(spEntityID, \"/\"));\n+                StringUtils.appendIfMissing(spEntityID, \"/\"),\n+                urlContext);\n     }\n \n     @Override\n-    public void validateLogoutResponse(final SAML2ReceivedResponseTO response) {\n-        logic.validateLogoutResponse(getJWTToken(), response);\n+    public void validateLogoutResponse(final SAML2Response response) {\n+        logic.validateLogoutResponse(response);\n     }\n \n     private String getJWTToken() {","previous_filename":"ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPServiceImpl.java"},{"sha":"cb7563cab64157a45629ba60668fab3be9def204","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/pages/SCIMConfPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSCIMConfPage.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -22,12 +22,12 @@\n import java.io.Serializable;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.console.annotations.ExtPage;\n import org.apache.syncope.client.console.panels.SCIMConfPanel;\n import org.apache.syncope.client.console.rest.SCIMConfRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wizards.any.ResultPage;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.annotations.ExtPage;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n import org.apache.syncope.common.lib.scim.types.SCIMEntitlement;\n import org.apache.wicket.markup.html.WebMarkupContainer;"},{"sha":"d37c13e2ddefa0b49013957f531c61fa8fcd694c","filename":"fit/build-tools/src/main/resources/content.ldif","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -42,7 +42,7 @@ description: Active\n mail: pullFromLDAP@syncope.apache.org\n sn: Surname\n uid: pullFromLDAP\n-userpassword:: cGFzc3dvcmQxMjM=\n+userpassword:: e1NIQX1zdW1LMXZicmhRamRhaFRQcHdTNjEvQmZiN0U9\n givenname: pullFromLDAP\n title: odd\n registeredAddress:  5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8"},{"sha":"e96ca5d0b6e5c9b1d8ca154bb744b672af1445c1","filename":"fit/console-reference/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fconsole-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fconsole-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -70,8 +70,8 @@ under the License.\n     </dependency>\n     \n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-client-console</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-client-console</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     "},{"sha":"7e5b0d5f84a633ea236140ee503baaa1bd9d8dcf","filename":"fit/console-reference/src/main/resources/saml2sp-agent.properties","status":"removed","additions":0,"deletions":22,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,22 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-conf.directory=${conf.directory}\n-\n-anonymousUser=${anonymousUser}\n-anonymousKey=${anonymousKey}\n-\n-useGZIPCompression=true"},{"sha":"4aef8716b1ba1dae1687b67cc87798ccd8c1620d","filename":"fit/console-reference/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":0,"deletions":23,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -26,29 +26,6 @@ under the License.\n \n   <display-name>Apache Syncope ${syncope.version} Console</display-name>\n \n-  <context-param>\n-    <param-name>saml2sp.login.success.url</param-name>\n-    <param-value>../wicket/bookmarkable/org.apache.syncope.client.console.pages.SAML2SPLogin</param-value>\n-  </context-param>\n-  <context-param>\n-    <param-name>saml2sp.login.error.url</param-name>\n-    <param-value>../wicket/bookmarkable/org.apache.syncope.client.console.pages.Login</param-value>\n-  </context-param>\n-  \n-  <context-param>\n-    <param-name>saml2sp.logout.success.url</param-name>\n-    <param-value>../wicket/bookmarkable/org.apache.syncope.client.console.pages.SAML2SPLogout</param-value>\n-  </context-param>\n-  <context-param>\n-    <param-name>saml2sp.logout.error.url</param-name>\n-    <param-value>../wicket/bookmarkable/org.apache.syncope.client.console.pages.Login</param-value>\n-  </context-param>\n-\n-  <context-param>\n-    <param-name>saml2sp.redirect.selfreg</param-name>\n-    <param-value>../wicket/bookmarkable/org.apache.syncope.client.console.pages.SAML2SPSelfReg</param-value>\n-  </context-param>\n-  \n   <!-- OIDC Client Parameters -->\n   <context-param>\n     <param-name>oidcclient.login.success.url</param-name>"},{"sha":"97a17911aaeee7b19cfdd6101ddff46e1ae31754","filename":"fit/core-reference/pom.xml","status":"modified","additions":16,"deletions":20,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -45,6 +45,12 @@ under the License.\n   </properties>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>javax.servlet-api</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.syncope.core</groupId>\n       <artifactId>syncope-core-starter</artifactId>\n@@ -161,14 +167,14 @@ under the License.\n       <scope>test</scope>\n     </dependency>  \n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-rest-cxf</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-rest-cxf</artifactId>\n       <version>${project.version}</version>\n       <scope>test</scope>          \n     </dependency>\n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-client-console</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-client-console</artifactId>\n       <version>${project.version}</version>\n       <scope>test</scope>\n     </dependency>\n@@ -222,16 +228,6 @@ under the License.\n       <artifactId>junit-jupiter</artifactId>\n       <scope>test</scope>\n     </dependency>\n-    <dependency>\n-      <groupId>org.bouncycastle</groupId>\n-      <artifactId>bcpkix-jdk15on</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.bouncycastle</groupId>\n-      <artifactId>bcprov-jdk15on</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n   </dependencies>\n \n   <build>\n@@ -448,14 +444,14 @@ under the License.\n         <directory>src/test/resources</directory>\n         <filtering>true</filtering>\n         <excludes>\n-          <exclude>keystore</exclude>\n+          <exclude>saml.keystore.jks</exclude>\n         </excludes>\n       </testResource>\n       <testResource>\n         <directory>src/test/resources</directory>\n         <filtering>false</filtering>\n         <includes>\n-          <include>keystore</include>\n+          <include>saml.keystore.jks</include>\n         </includes>\n       </testResource>\n       <testResource>\n@@ -1834,13 +1830,13 @@ under the License.\n         </dependency>\n         \n         <dependency>\n-          <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-          <artifactId>syncope-ext-saml2sp-rest-cxf</artifactId>\n+          <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+          <artifactId>syncope-ext-saml2sp4ui-rest-cxf</artifactId>\n           <version>${project.version}</version>\n         </dependency>\n         <dependency>\n-          <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-          <artifactId>syncope-ext-saml2sp-persistence-jpa</artifactId>\n+          <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+          <artifactId>syncope-ext-saml2sp4ui-persistence-jpa</artifactId>\n           <version>${project.version}</version>\n         </dependency>\n         "},{"sha":"47fc65f72c8107dd951fd00276fbfbc052d79ffb","filename":"fit/core-reference/src/main/resources/all/saml2sp-logic.properties","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fsaml2sp-logic.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fsaml2sp-logic.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fsaml2sp-logic.properties?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,25 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-conf.directory=${conf.directory}\n-\n-keystore.name=keystore\n-keystore.type=jks\n-keystore.storepass=changeit\n-keystore.keypass=changeit\n-sp.cert.alias=sp\n-signature.algorithm=RSA_SHA1\n-"},{"sha":"e94b580a4eecefd6cd5863802288d8cc4dc6c399","filename":"fit/core-reference/src/main/resources/all/saml2sp4ui-logic.properties","status":"renamed","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fsaml2sp4ui-logic.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fsaml2sp4ui-logic.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fsaml2sp4ui-logic.properties?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -16,7 +16,8 @@\n # under the License.\n conf.directory=${conf.directory}\n \n-anonymousUser=${anonymousUser}\n-anonymousKey=${anonymousKey}\n-\n-useGZIPCompression=true\n+saml2.sp4ui.skew=300\n+saml2.sp4ui.keystore=file://${conf.directory}/saml.keystore.jks\n+saml2.sp4ui.keystore.type=jks\n+saml2.sp4ui.keystore.storepass=changeit\n+saml2.sp4ui.keystore.keypass=changeit","previous_filename":"ext/saml2sp/agent/src/main/resources/saml2sp-agent.properties"},{"sha":"192cc9af81bad0eb7e2131ea63f0b287bc6570b1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -114,7 +114,6 @@\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthAccountService;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n-import org.apache.syncope.common.rest.api.service.SAML2SPService;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n@@ -129,7 +128,6 @@\n import org.apache.syncope.common.rest.api.service.RemediationService;\n import org.apache.syncope.common.rest.api.service.ReportTemplateService;\n import org.apache.syncope.common.rest.api.service.RoleService;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPService;\n import org.apache.syncope.common.rest.api.service.SCIMConfService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n@@ -141,6 +139,8 @@\n import org.apache.syncope.common.rest.api.service.BpmnProcessService;\n import org.apache.syncope.common.rest.api.service.OIDCJWKSService;\n import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n+import org.apache.syncope.common.rest.api.service.SAML2SP4UIIdPService;\n+import org.apache.syncope.common.rest.api.service.SAML2SP4UIService;\n import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreService;\n import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n import org.apache.syncope.common.rest.api.service.SRARouteService;\n@@ -313,9 +313,9 @@ public abstract class AbstractITCase {\n \n     protected static CamelRouteService camelRouteService;\n \n-    protected static SAML2SPService saml2SpService;\n+    protected static SAML2SP4UIService saml2SP4UIService;\n \n-    protected static SAML2IdPService saml2IdPService;\n+    protected static SAML2SP4UIIdPService saml2SP4UIIdPService;\n \n     protected static OIDCClientService oidcClientService;\n \n@@ -407,8 +407,8 @@ public static void restSetup() {\n         remediationService = adminClient.getService(RemediationService.class);\n         sraRouteService = adminClient.getService(SRARouteService.class);\n         camelRouteService = adminClient.getService(CamelRouteService.class);\n-        saml2SpService = adminClient.getService(SAML2SPService.class);\n-        saml2IdPService = adminClient.getService(SAML2IdPService.class);\n+        saml2SP4UIService = adminClient.getService(SAML2SP4UIService.class);\n+        saml2SP4UIIdPService = adminClient.getService(SAML2SP4UIIdPService.class);\n         oidcClientService = adminClient.getService(OIDCClientService.class);\n         oidcProviderService = adminClient.getService(OIDCProviderService.class);\n         scimConfService = adminClient.getService(SCIMConfService.class);"},{"sha":"52604c1c9c89441c09ccd8fd13f3a04cc1aeb600","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/SAML2SPDetector.java","status":"removed","additions":0,"deletions":52,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FSAML2SPDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FSAML2SPDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FSAML2SPDetector.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,52 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit;\n-\n-import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.rest.api.service.SAML2SPService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class SAML2SPDetector {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(SAML2SPDetector.class);\n-\n-    private static Boolean ENABLED;\n-\n-    public static boolean isSAML2SPAvailable() {\n-        synchronized (LOG) {\n-            if (ENABLED == null) {\n-                try {\n-                    new SyncopeClientFactoryBean().\n-                            setAddress(AbstractITCase.ADDRESS).\n-                            setContentType(SyncopeClientFactoryBean.ContentType.XML).\n-                            create(new AnonymousAuthenticationHandler(\n-                                    AbstractITCase.ANONYMOUS_UNAME, AbstractITCase.ANONYMOUS_KEY)).\n-                            getService(SAML2SPService.class).getMetadata(\"http://localhost:9080/syncope\", \"saml2sp\");\n-                    ENABLED = true;\n-                } catch (Exception e) {\n-                    // ignore\n-                    ENABLED = false;\n-                }\n-            }\n-        }\n-        return ENABLED;\n-    }\n-}"},{"sha":"efa77c53a9d1d4bc96f00ce807f42b9adb6796ba","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ClientAppITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -157,7 +157,7 @@ public void updateOIDCRP() {\n     }\n \n     @Test\n-    public void delete() {\n+    public void deleteOIDCRP() {\n         OIDCRPTO oidcrpTO = buildOIDCRP();\n         oidcrpTO = createClientApp(ClientAppType.OIDCRP, oidcrpTO);\n "},{"sha":"378d1ecaa664b718ae9ec7c02e6fa9cfd2c61ec3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2CallbackHandler.java","status":"removed","additions":0,"deletions":121,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2CallbackHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2CallbackHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2CallbackHandler.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,121 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core;\n-\n-import java.io.IOException;\n-import java.util.List;\n-\n-import javax.security.auth.callback.Callback;\n-import javax.security.auth.callback.CallbackHandler;\n-import javax.security.auth.callback.UnsupportedCallbackException;\n-import org.apache.wss4j.common.saml.SAMLCallback;\n-import org.apache.wss4j.common.saml.bean.AuthenticationStatementBean;\n-import org.apache.wss4j.common.saml.bean.ConditionsBean;\n-import org.apache.wss4j.common.saml.bean.SubjectBean;\n-import org.apache.wss4j.common.saml.bean.SubjectConfirmationDataBean;\n-import org.apache.wss4j.common.saml.bean.Version;\n-import org.apache.wss4j.common.saml.builder.SAML2Constants;\n-\n-/**\n- * A Callback Handler implementation for a SAML 2 assertion.\n- */\n-public class SAML2CallbackHandler implements CallbackHandler {\n-\n-    private String subjectName = \"uid=joe,ou=people,ou=saml-demo,o=example.com\";\n-\n-    private String subjectQualifier = \"www.example.com\";\n-\n-    private String issuer;\n-\n-    private ConditionsBean conditions;\n-\n-    private SubjectConfirmationDataBean subjectConfirmationData;\n-\n-    private String subjectConfirmationMethod = SAML2Constants.CONF_BEARER;\n-\n-    @Override\n-    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n-        for (Callback callback : callbacks) {\n-            if (callback instanceof SAMLCallback) {\n-                SAMLCallback samlCallback = (SAMLCallback) callback;\n-                samlCallback.setSamlVersion(Version.SAML_20);\n-                samlCallback.setIssuer(issuer);\n-                if (conditions != null) {\n-                    samlCallback.setConditions(conditions);\n-                }\n-                SubjectBean subjectBean = new SubjectBean(subjectName, subjectQualifier, subjectConfirmationMethod);\n-                subjectBean.setSubjectConfirmationData(subjectConfirmationData);\n-                samlCallback.setSubject(subjectBean);\n-                AuthenticationStatementBean authBean = new AuthenticationStatementBean();\n-                authBean.setAuthenticationMethod(\"Password\");\n-                samlCallback.setAuthenticationStatementData(List.of(authBean));\n-            } else {\n-                throw new UnsupportedCallbackException(callback, \"Unrecognized Callback\");\n-            }\n-        }\n-    }\n-\n-    public String getSubjectName() {\n-        return subjectName;\n-    }\n-\n-    public void setSubjectName(String subjectName) {\n-        this.subjectName = subjectName;\n-    }\n-\n-    public String getSubjectQualifier() {\n-        return subjectQualifier;\n-    }\n-\n-    public void setSubjectQualifier(String subjectQualifier) {\n-        this.subjectQualifier = subjectQualifier;\n-    }\n-\n-    public String getIssuer() {\n-        return issuer;\n-    }\n-\n-    public void setIssuer(String issuer) {\n-        this.issuer = issuer;\n-    }\n-\n-    public ConditionsBean getConditions() {\n-        return conditions;\n-    }\n-\n-    public void setConditions(ConditionsBean conditions) {\n-        this.conditions = conditions;\n-    }\n-\n-    public SubjectConfirmationDataBean getSubjectConfirmationData() {\n-        return subjectConfirmationData;\n-    }\n-\n-    public void setSubjectConfirmationData(SubjectConfirmationDataBean subjectConfirmationData) {\n-        this.subjectConfirmationData = subjectConfirmationData;\n-    }\n-\n-    public String getSubjectConfirmationMethod() {\n-        return subjectConfirmationMethod;\n-    }\n-\n-    public void setSubjectConfirmationMethod(String subjectConfirmationMethod) {\n-        this.subjectConfirmationMethod = subjectConfirmationMethod;\n-    }\n-}"},{"sha":"7f732e72caab69a8b4369c8185e0d10cc722ab08","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"removed","additions":0,"deletions":590,"changes":590,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,590 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.fail;\n-import static org.junit.jupiter.api.Assumptions.assumeTrue;\n-\n-import java.io.File;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.OutputStream;\n-import java.math.BigInteger;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.security.KeyPair;\n-import java.security.KeyPairGenerator;\n-import java.security.KeyStore;\n-import java.security.SecureRandom;\n-import java.security.cert.Certificate;\n-import java.security.cert.X509Certificate;\n-import java.util.Base64;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.regex.Pattern;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import javax.xml.namespace.QName;\n-import org.apache.cxf.helpers.DOMUtils;\n-import org.apache.cxf.jaxrs.client.WebClient;\n-import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n-import org.apache.cxf.rs.security.saml.sso.SAMLProtocolResponseValidator;\n-import org.apache.cxf.staxutils.StaxUtils;\n-import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.SAML2IdPTO;\n-import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n-import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n-import org.apache.syncope.common.lib.to.SAML2RequestTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.rest.api.service.SAML2SPService;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.SAML2SPDetector;\n-import org.apache.wss4j.common.crypto.Crypto;\n-import org.apache.wss4j.common.crypto.Merlin;\n-import org.apache.wss4j.common.saml.OpenSAMLUtil;\n-import org.apache.wss4j.common.saml.SAMLCallback;\n-import org.apache.wss4j.common.saml.SAMLUtil;\n-import org.apache.wss4j.common.saml.SamlAssertionWrapper;\n-import org.apache.wss4j.common.saml.bean.AudienceRestrictionBean;\n-import org.apache.wss4j.common.saml.bean.ConditionsBean;\n-import org.apache.wss4j.common.saml.bean.SubjectConfirmationDataBean;\n-import org.apache.wss4j.common.saml.builder.SAML2Constants;\n-import org.apache.wss4j.common.util.DOM2Writer;\n-import org.apache.wss4j.common.util.Loader;\n-import org.apache.wss4j.dom.WSConstants;\n-import org.apache.wss4j.dom.engine.WSSConfig;\n-import org.apache.xml.security.signature.XMLSignature;\n-import org.bouncycastle.asn1.x500.X500Name;\n-import org.bouncycastle.asn1.x500.style.RFC4519Style;\n-import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;\n-import org.bouncycastle.cert.X509v3CertificateBuilder;\n-import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n-import org.bouncycastle.operator.ContentSigner;\n-import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n-import org.joda.time.DateTime;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import org.opensaml.saml.common.xml.SAMLConstants;\n-import org.opensaml.saml.saml2.core.Status;\n-import org.opensaml.xmlsec.signature.support.SignatureConstants;\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-\n-public class SAML2ITCase extends AbstractITCase {\n-\n-    private static final Pattern BASE64 = Pattern.compile(\n-            \"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$\");\n-\n-    private static SyncopeClient anonymous;\n-\n-    private static Path keystorePath;\n-\n-    private static Path truststorePath;\n-\n-    @BeforeAll\n-    public static void setup() {\n-        anonymous = new SyncopeClientFactoryBean().\n-                setAddress(ADDRESS).\n-                create(new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n-\n-        WSSConfig.init();\n-        OpenSAMLUtil.initSamlEngine(false);\n-    }\n-\n-    @BeforeAll\n-    public static void importFromIdPMetadata() throws Exception {\n-        if (!SAML2SPDetector.isSAML2SPAvailable()) {\n-            return;\n-        }\n-\n-        assertTrue(saml2IdPService.list().isEmpty());\n-\n-        createKeystores();\n-\n-        updateMetadataWithCert();\n-\n-        WebClient.client(saml2IdPService).\n-                accept(MediaType.APPLICATION_XML_TYPE).\n-                type(MediaType.APPLICATION_XML_TYPE);\n-        try {\n-            saml2IdPService.importFromMetadata(SAML2ITCase.class.getResourceAsStream(\"/ssocircle.xml\"));\n-            saml2IdPService.importFromMetadata(SAML2ITCase.class.getResourceAsStream(\"/testshib-providers.xml\"));\n-            saml2IdPService.importFromMetadata(SAML2ITCase.class.getResourceAsStream(\"/fediz.xml\"));\n-            saml2IdPService.importFromMetadata(SAML2ITCase.class.getResourceAsStream(\"/fediz_realmb.xml\"));\n-\n-            // Allow unsolicited responses for the realmb case\n-            String realmBEntityId = \"urn:org:apache:cxf:fediz:idp:realm-B\";\n-            Optional<SAML2IdPTO> realmBIdP =\n-                    saml2IdPService.list().stream().filter(idp -> realmBEntityId.equals(idp.getEntityID())).findFirst();\n-            realmBIdP.get().setSupportUnsolicited(true);\n-            saml2IdPService.update(realmBIdP.get());\n-        } catch (Exception e) {\n-            LOG.error(\"Unexpected error while importing SAML 2.0 IdP metadata\", e);\n-        } finally {\n-            WebClient.client(saml2IdPService).\n-                    accept(clientFactory.getContentType().getMediaType()).\n-                    type(clientFactory.getContentType().getMediaType());\n-        }\n-\n-        assertEquals(4, saml2IdPService.list().size());\n-    }\n-\n-    @AfterAll\n-    public static void clearIdPs() throws Exception {\n-        if (!SAML2SPDetector.isSAML2SPAvailable()) {\n-            return;\n-        }\n-\n-        saml2IdPService.list().forEach(idp -> saml2IdPService.delete(idp.getKey()));\n-\n-        Files.delete(keystorePath);\n-        Files.delete(truststorePath);\n-    }\n-\n-    @Test\n-    public void spMetadata() {\n-        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n-\n-        try {\n-            SAML2SPService service = anonymous.getService(SAML2SPService.class);\n-            WebClient.client(service).accept(MediaType.APPLICATION_XML_TYPE);\n-            Response response = service.getMetadata(ADDRESS, \"saml2sp\");\n-            assertNotNull(response);\n-\n-            Document responseDoc = StaxUtils.read(\n-                    new InputStreamReader((InputStream) response.getEntity(), StandardCharsets.UTF_8));\n-            assertEquals(\"EntityDescriptor\", responseDoc.getDocumentElement().getLocalName());\n-            assertEquals(\"urn:oasis:names:tc:SAML:2.0:metadata\", responseDoc.getDocumentElement().getNamespaceURI());\n-\n-            // Get the signature\n-            QName signatureQName = new QName(SignatureConstants.XMLSIG_NS, \"Signature\");\n-            Element signatureElement =\n-                    DOMUtils.getFirstChildWithName(responseDoc.getDocumentElement(), signatureQName);\n-            assertNotNull(signatureElement);\n-\n-            // Validate the signature\n-            XMLSignature signature = new XMLSignature(signatureElement, null);\n-            KeyStore keystore = KeyStore.getInstance(\"JKS\");\n-            keystore.load(Loader.getResourceAsStream(\"keystore\"), \"changeit\".toCharArray());\n-            assertTrue(signature.checkSignatureValue((X509Certificate) keystore.getCertificate(\"sp\")));\n-        } catch (Exception e) {\n-            LOG.error(\"During SAML 2.0 SP metadata parsing\", e);\n-            fail(e::getMessage);\n-        }\n-    }\n-\n-    @Test\n-    public void createLoginRequest() {\n-        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n-\n-        SAML2RequestTO loginRequest = anonymous.getService(SAML2SPService.class).\n-                createLoginRequest(ADDRESS, \"https://idp.testshib.org/idp/shibboleth\");\n-        assertNotNull(loginRequest);\n-\n-        assertEquals(\"https://idp.testshib.org/idp/profile/SAML2/POST/SSO\", loginRequest.getIdpServiceAddress());\n-        assertNotNull(loginRequest.getContent());\n-        assertTrue(BASE64.matcher(loginRequest.getContent()).matches());\n-        assertNotNull(loginRequest.getRelayState());\n-    }\n-\n-    @Test\n-    public void setIdPMapping() {\n-        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n-\n-        Optional<SAML2IdPTO> ssoCircleOpt =\n-                saml2IdPService.list().stream().filter(o -> \"https://idp.ssocircle.com\".equals(o.getEntityID())).\n-                        findFirst();\n-        assertTrue(ssoCircleOpt.isPresent());\n-\n-        SAML2IdPTO ssoCircle = ssoCircleOpt.get();\n-        assertNotNull(ssoCircle);\n-        assertFalse(ssoCircle.isCreateUnmatching());\n-        assertNull(ssoCircle.getUserTemplate());\n-        assertFalse(ssoCircle.getItems().isEmpty());\n-        assertNotNull(ssoCircle.getConnObjectKeyItem());\n-        assertNotEquals(\"email\", ssoCircle.getConnObjectKeyItem().getIntAttrName());\n-        assertNotEquals(\"EmailAddress\", ssoCircle.getConnObjectKeyItem().getExtAttrName());\n-\n-        ssoCircle.setCreateUnmatching(true);\n-\n-        UserTO userTemplate = new UserTO();\n-        userTemplate.setRealm(\"'/'\");\n-        ssoCircle.setUserTemplate(userTemplate);\n-\n-        ssoCircle.getItems().clear();\n-        ItemTO keyMapping = new ItemTO();\n-        keyMapping.setIntAttrName(\"email\");\n-        keyMapping.setExtAttrName(\"EmailAddress\");\n-        ssoCircle.setConnObjectKeyItem(keyMapping);\n-\n-        saml2IdPService.update(ssoCircle);\n-\n-        ssoCircle = saml2IdPService.read(ssoCircle.getKey());\n-        assertTrue(ssoCircle.isCreateUnmatching());\n-        assertEquals(userTemplate, ssoCircle.getUserTemplate());\n-        assertEquals(\"email\", ssoCircle.getConnObjectKeyItem().getIntAttrName());\n-        assertEquals(\"EmailAddress\", ssoCircle.getConnObjectKeyItem().getExtAttrName());\n-    }\n-\n-    @Test\n-    public void validateLoginResponse() throws Exception {\n-        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n-\n-        // Get a valid login request for the Fediz realm\n-        SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n-        SAML2RequestTO loginRequest = saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n-        assertNotNull(loginRequest);\n-\n-        assertEquals(\"https://localhost:8443/fediz-idp/saml/up\", loginRequest.getIdpServiceAddress());\n-        assertNotNull(loginRequest.getContent());\n-        assertTrue(BASE64.matcher(loginRequest.getContent()).matches());\n-        assertNotNull(loginRequest.getRelayState());\n-\n-        // Check a null relaystate\n-        SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n-        response.setSpEntityID(\"http://recipient.apache.org/\");\n-        response.setUrlContext(\"saml2sp\");\n-        try {\n-            saml2Service.validateLoginResponse(response);\n-            fail(\"Failure expected on no Relay State\");\n-        } catch (SyncopeClientException e) {\n-            assertTrue(e.getMessage().contains(\"No Relay State was provided\"));\n-        }\n-\n-        // Check a null Response\n-        response.setRelayState(loginRequest.getRelayState());\n-        try {\n-            saml2Service.validateLoginResponse(response);\n-            fail(\"Failure expected on no SAML Response\");\n-        } catch (SyncopeClientException e) {\n-            assertTrue(e.getMessage().contains(\"No SAML Response was provided\"));\n-        }\n-\n-        // Create a SAML Response using WSS4J\n-        JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n-        String inResponseTo = relayState.getJwtClaims().getSubject();\n-\n-        org.opensaml.saml.saml2.core.Response samlResponse = createResponse(inResponseTo);\n-\n-        Document doc = DOMUtils.newDocument();\n-        Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n-        String responseStr = DOM2Writer.nodeToString(responseElement);\n-\n-        // Validate the SAML Response\n-        response.setSamlResponse(Base64.getEncoder().encodeToString(responseStr.getBytes()));\n-        SAML2LoginResponseTO loginResponse = saml2Service.validateLoginResponse(response);\n-        assertNotNull(loginResponse.getAccessToken());\n-        assertEquals(\"puccini\", loginResponse.getNameID());\n-    }\n-\n-    @Test\n-    public void unsignedAssertionInLoginResponse() throws Exception {\n-        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n-\n-        // Get a valid login request for the Fediz realm\n-        SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n-        SAML2RequestTO loginRequest = saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n-        assertNotNull(loginRequest);\n-\n-        SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n-        response.setSpEntityID(\"http://recipient.apache.org/\");\n-        response.setUrlContext(\"saml2sp\");\n-        response.setRelayState(loginRequest.getRelayState());\n-\n-        // Create a SAML Response using WSS4J\n-        JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n-        String inResponseTo = relayState.getJwtClaims().getSubject();\n-\n-        org.opensaml.saml.saml2.core.Response samlResponse =\n-                createResponse(inResponseTo, false, SAML2Constants.CONF_SENDER_VOUCHES,\n-                        \"urn:org:apache:cxf:fediz:idp:realm-A\");\n-\n-        Document doc = DOMUtils.newDocument();\n-        Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n-        String responseStr = DOM2Writer.nodeToString(responseElement);\n-\n-        // Validate the SAML Response\n-        response.setSamlResponse(Base64.getEncoder().encodeToString(responseStr.getBytes()));\n-        try {\n-            saml2Service.validateLoginResponse(response);\n-            fail(\"Failure expected on an unsigned Assertion\");\n-        } catch (SyncopeClientException e) {\n-            assertNotNull(e);\n-        }\n-    }\n-\n-    @Test\n-    public void loginResponseWrappingAttack() throws Exception {\n-        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n-\n-        // Get a valid login request for the Fediz realm\n-        SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n-        SAML2RequestTO loginRequest = saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n-        assertNotNull(loginRequest);\n-\n-        SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n-        response.setSpEntityID(\"http://recipient.apache.org/\");\n-        response.setUrlContext(\"saml2sp\");\n-        response.setRelayState(loginRequest.getRelayState());\n-\n-        // Create a SAML Response using WSS4J\n-        JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n-        String inResponseTo = relayState.getJwtClaims().getSubject();\n-\n-        org.opensaml.saml.saml2.core.Response samlResponse = createResponse(inResponseTo);\n-\n-        Document doc = DOMUtils.newDocument();\n-        Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n-        assertNotNull(responseElement);\n-        doc.appendChild(responseElement);\n-\n-        // Get Assertion Element\n-        Element assertionElement =\n-                (Element) responseElement.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"Assertion\").item(0);\n-        assertNotNull(assertionElement);\n-\n-        // Clone it, strip the Signature, modify the Subject, change Subj Conf\n-        Element clonedAssertion = (Element) assertionElement.cloneNode(true);\n-        clonedAssertion.setAttributeNS(null, \"ID\", \"_12345623562\");\n-        Element sigElement =\n-                (Element) clonedAssertion.getElementsByTagNameNS(WSConstants.SIG_NS, \"Signature\").item(0);\n-        clonedAssertion.removeChild(sigElement);\n-\n-        Element subjElement =\n-                (Element) clonedAssertion.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"Subject\").item(0);\n-        Element subjNameIdElement =\n-                (Element) subjElement.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"NameID\").item(0);\n-        subjNameIdElement.setTextContent(\"verdi\");\n-\n-        Element subjConfElement =\n-                (Element) subjElement.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"SubjectConfirmation\").item(0);\n-        subjConfElement.setAttributeNS(null, \"Method\", SAML2Constants.CONF_SENDER_VOUCHES);\n-\n-        // Now insert the modified cloned Assertion into the Response after the other assertion\n-        responseElement.insertBefore(clonedAssertion, null);\n-\n-        String responseStr = DOM2Writer.nodeToString(responseElement);\n-\n-        // Validate the SAML Response\n-        response.setSamlResponse(Base64.getEncoder().encodeToString(responseStr.getBytes()));\n-        try {\n-            saml2Service.validateLoginResponse(response);\n-            fail(\"Failure expected on an unsigned Assertion\");\n-        } catch (SyncopeClientException e) {\n-            assertNotNull(e);\n-        }\n-    }\n-\n-    @Test\n-    public void validateIdpInitiatedLoginResponse() throws Exception {\n-        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n-\n-        SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n-\n-        // Create a SAML Response using WSS4J\n-        SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n-        response.setSpEntityID(\"http://recipient.apache.org/\");\n-        response.setUrlContext(\"saml2sp\");\n-\n-        org.opensaml.saml.saml2.core.Response samlResponse =\n-                createResponse(null, true, SAML2Constants.CONF_BEARER, \"urn:org:apache:cxf:fediz:idp:realm-B\");\n-\n-        Document doc = DOMUtils.newDocument();\n-        Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n-        String responseStr = DOM2Writer.nodeToString(responseElement);\n-\n-        // Validate the SAML Response\n-        response.setSamlResponse(Base64.getEncoder().encodeToString(responseStr.getBytes()));\n-        response.setRelayState(\"idpInitiated\");\n-        SAML2LoginResponseTO loginResponse = saml2Service.validateLoginResponse(response);\n-        assertNotNull(loginResponse.getAccessToken());\n-        assertEquals(\"puccini\", loginResponse.getNameID());\n-    }\n-\n-    // Make sure that the IdP initiated case is only supported when \"supportUnsolicited\" is true for that IdP\n-    @Test\n-    public void validateIdpInitiatedLoginResponseFailure() throws Exception {\n-        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n-\n-        SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n-\n-        // Create a SAML Response using WSS4J\n-        SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n-        response.setSpEntityID(\"http://recipient.apache.org/\");\n-        response.setUrlContext(\"saml2sp\");\n-\n-        org.opensaml.saml.saml2.core.Response samlResponse =\n-                createResponse(null, true, SAML2Constants.CONF_BEARER, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n-\n-        Document doc = DOMUtils.newDocument();\n-        Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n-        String responseStr = DOM2Writer.nodeToString(responseElement);\n-\n-        // Validate the SAML Response\n-        response.setSamlResponse(Base64.getEncoder().encodeToString(responseStr.getBytes()));\n-        response.setRelayState(\"idpInitiated\");\n-        try {\n-            saml2Service.validateLoginResponse(response);\n-            fail(\"Failure expected on an unsolicited login\");\n-        } catch (SyncopeClientException e) {\n-            assertNotNull(e);\n-        }\n-    }\n-\n-    private static org.opensaml.saml.saml2.core.Response createResponse(final String inResponseTo) throws Exception {\n-        return createResponse(inResponseTo, true, SAML2Constants.CONF_BEARER, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n-    }\n-\n-    private static org.opensaml.saml.saml2.core.Response createResponse(\n-            final String inResponseTo, final boolean signAssertion, final String subjectConfMethod,\n-            final String issuer) throws Exception {\n-\n-        Status status = SAML2PResponseComponentBuilder.createStatus(\n-                SAMLProtocolResponseValidator.SAML2_STATUSCODE_SUCCESS, null);\n-        org.opensaml.saml.saml2.core.Response response = SAML2PResponseComponentBuilder.createSAMLResponse(\n-                inResponseTo, issuer, status);\n-        response.setDestination(\"http://recipient.apache.org\");\n-\n-        // Create an AuthenticationAssertion\n-        SAML2CallbackHandler callbackHandler = new SAML2CallbackHandler();\n-        callbackHandler.setIssuer(issuer);\n-        callbackHandler.setSubjectName(\"puccini\");\n-        callbackHandler.setSubjectConfirmationMethod(subjectConfMethod);\n-\n-        SubjectConfirmationDataBean subjectConfirmationData = new SubjectConfirmationDataBean();\n-        subjectConfirmationData.setAddress(\"http://apache.org\");\n-        subjectConfirmationData.setInResponseTo(inResponseTo);\n-        subjectConfirmationData.setNotAfter(new DateTime().plusMinutes(5));\n-        subjectConfirmationData.setRecipient(\"http://recipient.apache.org/saml2sp/assertion-consumer\");\n-        callbackHandler.setSubjectConfirmationData(subjectConfirmationData);\n-\n-        ConditionsBean conditions = new ConditionsBean();\n-        conditions.setNotBefore(new DateTime());\n-        conditions.setNotAfter(new DateTime().plusMinutes(5));\n-\n-        AudienceRestrictionBean audienceRestriction = new AudienceRestrictionBean();\n-        audienceRestriction.setAudienceURIs(List.of(\"http://recipient.apache.org/\"));\n-        conditions.setAudienceRestrictions(List.of(audienceRestriction));\n-        callbackHandler.setConditions(conditions);\n-\n-        SAMLCallback samlCallback = new SAMLCallback();\n-        SAMLUtil.doSAMLCallback(callbackHandler, samlCallback);\n-        SamlAssertionWrapper assertion = new SamlAssertionWrapper(samlCallback);\n-\n-        if (signAssertion) {\n-            Crypto issuerCrypto = new Merlin();\n-            KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n-            InputStream input = Files.newInputStream(keystorePath);\n-            keyStore.load(input, \"security\".toCharArray());\n-            ((Merlin) issuerCrypto).setKeyStore(keyStore);\n-\n-            assertion.signAssertion(\"subject\", \"security\", issuerCrypto, false);\n-        }\n-\n-        response.getAssertions().add(assertion.getSaml2());\n-\n-        return response;\n-    }\n-\n-    private static void createKeystores() throws Exception {\n-        // Create KeyPair\n-        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n-        keyPairGenerator.initialize(1024, new SecureRandom());\n-        KeyPair keyPair = keyPairGenerator.generateKeyPair();\n-\n-        Date currentDate = new Date();\n-        Date expiryDate = new Date(currentDate.getTime() + 365L * 24L * 60L * 60L * 1000L);\n-\n-        // Create X509Certificate\n-        String issuerName = \"CN=Issuer\";\n-        String subjectName = \"CN=Subject\";\n-        BigInteger serial = new BigInteger(\"123456\");\n-        X509v3CertificateBuilder certBuilder =\n-                new X509v3CertificateBuilder(new X500Name(RFC4519Style.INSTANCE, issuerName), serial, currentDate,\n-                        expiryDate,\n-                        new X500Name(RFC4519Style.INSTANCE, subjectName),\n-                        SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded()));\n-        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n-        X509Certificate certificate = new JcaX509CertificateConverter().getCertificate(certBuilder.build(contentSigner));\n-\n-        // Store Private Key + Certificate in Keystore\n-        KeyStore keystore = KeyStore.getInstance(\"JKS\");\n-        keystore.load(null, \"security\".toCharArray());\n-        keystore.setKeyEntry(\"subject\", keyPair.getPrivate(), \"security\".toCharArray(),\n-                new Certificate[] { certificate });\n-\n-        File keystoreFile = File.createTempFile(\"samlkeystore\", \".jks\");\n-        try (OutputStream output = Files.newOutputStream(keystoreFile.toPath())) {\n-            keystore.store(output, \"security\".toCharArray());\n-        }\n-        keystorePath = keystoreFile.toPath();\n-\n-        // Now store the Certificate in the truststore\n-        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n-        trustStore.load(null, \"security\".toCharArray());\n-\n-        trustStore.setCertificateEntry(\"subject\", certificate);\n-\n-        File truststoreFile = File.createTempFile(\"samltruststore\", \".jks\");\n-        try (OutputStream output = Files.newOutputStream(truststoreFile.toPath())) {\n-            trustStore.store(output, \"security\".toCharArray());\n-        }\n-        truststorePath = truststoreFile.toPath();\n-    }\n-\n-    private static void updateMetadataWithCert() throws Exception {\n-        // Get encoded truststore cert\n-        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n-        InputStream input = Files.newInputStream(truststorePath);\n-        keyStore.load(input, \"security\".toCharArray());\n-        X509Certificate cert = (X509Certificate) keyStore.getCertificate(\"subject\");\n-        String certEncoded = Base64.getMimeEncoder().encodeToString(cert.getEncoded());\n-\n-        // Replace the \"cert-placeholder\" string in the metadata with the actual cert\n-        String basedir = System.getProperty(\"basedir\");\n-        if (basedir == null) {\n-            basedir = new File(\".\").getCanonicalPath();\n-        }\n-\n-        List<String> fileNames = List.of(\"fediz.xml\", \"fediz_realmb.xml\");\n-        for (String fileName : fileNames) {\n-            Path path = FileSystems.getDefault().getPath(basedir, \"/src/test/resources/\" + fileName);\n-            String content = new String(Files.readAllBytes(path), StandardCharsets.UTF_8);\n-            content = content.replaceAll(\"cert-placeholder\", certEncoded);\n-\n-            Path path2 = FileSystems.getDefault().getPath(basedir, \"/target/test-classes/\" + fileName);\n-            Files.write(path2, content.getBytes());\n-        }\n-    }\n-\n-}"},{"sha":"f83d372ecc35333941320a72877b206c89c633d6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2PResponseComponentBuilder.java","status":"removed","additions":0,"deletions":121,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2PResponseComponentBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2PResponseComponentBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2PResponseComponentBuilder.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,121 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core;\n-\n-import java.util.UUID;\n-import org.joda.time.DateTime;\n-import org.opensaml.saml.common.SAMLObjectBuilder;\n-import org.opensaml.saml.common.SAMLVersion;\n-import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n-import org.opensaml.saml.saml2.core.Issuer;\n-import org.opensaml.saml.saml2.core.Response;\n-import org.opensaml.saml.saml2.core.Status;\n-import org.opensaml.saml.saml2.core.StatusCode;\n-import org.opensaml.saml.saml2.core.StatusMessage;\n-import org.opensaml.saml.saml2.core.impl.AuthnContextClassRefBuilder;\n-import org.opensaml.saml.saml2.core.impl.IssuerBuilder;\n-import org.opensaml.saml.saml2.core.impl.ResponseBuilder;\n-import org.opensaml.saml.saml2.core.impl.StatusBuilder;\n-import org.opensaml.saml.saml2.core.impl.StatusCodeBuilder;\n-import org.opensaml.saml.saml2.core.impl.StatusMessageBuilder;\n-\n-/**\n- * A (basic) set of utility methods to construct SAML 2.0 Protocol Response statements.\n- */\n-public final class SAML2PResponseComponentBuilder {\n-\n-    private static SAMLObjectBuilder<Response> responseBuilder;\n-\n-    private static SAMLObjectBuilder<Issuer> issuerBuilder;\n-\n-    private static SAMLObjectBuilder<Status> statusBuilder;\n-\n-    private static SAMLObjectBuilder<StatusCode> statusCodeBuilder;\n-\n-    private static SAMLObjectBuilder<StatusMessage> statusMessageBuilder;\n-\n-    private static SAMLObjectBuilder<AuthnContextClassRef> authnContextClassRefBuilder;\n-\n-    public static Response createSAMLResponse(final String inResponseTo, final String issuer, final Status status) {\n-        if (responseBuilder == null) {\n-            responseBuilder = new ResponseBuilder();\n-        }\n-        Response response = responseBuilder.buildObject();\n-\n-        response.setID(UUID.randomUUID().toString());\n-        response.setIssueInstant(new DateTime());\n-        response.setInResponseTo(inResponseTo);\n-        response.setIssuer(createIssuer(issuer));\n-        response.setStatus(status);\n-        response.setVersion(SAMLVersion.VERSION_20);\n-\n-        return response;\n-    }\n-\n-    public static Issuer createIssuer(final String issuerValue) {\n-        if (issuerBuilder == null) {\n-            issuerBuilder = new IssuerBuilder();\n-        }\n-        Issuer issuer = issuerBuilder.buildObject();\n-        issuer.setValue(issuerValue);\n-\n-        return issuer;\n-    }\n-\n-    public static Status createStatus(final String statusCodeValue, final String statusMessage) {\n-        if (statusBuilder == null) {\n-            statusBuilder = new StatusBuilder();\n-        }\n-        if (statusCodeBuilder == null) {\n-            statusCodeBuilder = new StatusCodeBuilder();\n-        }\n-        if (statusMessageBuilder == null) {\n-            statusMessageBuilder = new StatusMessageBuilder();\n-        }\n-\n-        Status status = statusBuilder.buildObject();\n-\n-        StatusCode statusCode = statusCodeBuilder.buildObject();\n-        statusCode.setValue(statusCodeValue);\n-        status.setStatusCode(statusCode);\n-\n-        if (statusMessage != null) {\n-            StatusMessage statusMessageObject = statusMessageBuilder.buildObject();\n-            statusMessageObject.setMessage(statusMessage);\n-            status.setStatusMessage(statusMessageObject);\n-        }\n-\n-        return status;\n-    }\n-\n-    public static AuthnContextClassRef createAuthnContextClassRef(final String newAuthnContextClassRef) {\n-        if (authnContextClassRefBuilder == null) {\n-            authnContextClassRefBuilder = new AuthnContextClassRefBuilder();\n-        }\n-\n-        AuthnContextClassRef authnContextClassRef = authnContextClassRefBuilder.buildObject();\n-        authnContextClassRef.setAuthnContextClassRef(newAuthnContextClassRef);\n-\n-        return authnContextClassRef;\n-    }\n-\n-    private SAML2PResponseComponentBuilder() {\n-        // private constructor for static utility class\n-    }\n-}"},{"sha":"8b204250e49ac608dc2ca525e3f06d9f1332edae","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -32,8 +32,8 @@\n import java.util.stream.Collectors;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.RandomStringUtils;\n-import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.ui.commons.ConnIdSpecialName;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;"},{"sha":"d7b22bedd3a818f789967d2842409d7a8620beba","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/WAClientAppITCase.java","status":"modified","additions":16,"deletions":11,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -45,6 +45,8 @@\n \n public class WAClientAppITCase extends AbstractITCase {\n \n+    private static final String AUTH_MODULE = \"DefaultJDBCAuthModule\";\n+\n     private static WAClientAppService waClientAppService;\n \n     @BeforeAll\n@@ -97,7 +99,7 @@ public void read() {\n     public void readWithPolicies() {\n         OIDCRPTO oidcrpto = buildOIDCRP();\n \n-        AuthPolicyTO authPolicyTO = createPolicy(PolicyType.AUTH, buildAuthPolicyTO(\"DefaultLDAPAuthModule\"));\n+        AuthPolicyTO authPolicyTO = createPolicy(PolicyType.AUTH, buildAuthPolicyTO(AUTH_MODULE));\n \n         AccessPolicyTO accessPolicyTO = createPolicy(PolicyType.ACCESS, buildAccessPolicyTO());\n \n@@ -115,16 +117,19 @@ public void readWithPolicies() {\n \n         // add items to the authentication module\n         addItems();\n-        waClientApp = waClientAppService.read(oidcrpto.getClientAppId(), null);\n-        assertNotNull(waClientApp);\n-        assertFalse(waClientApp.getReleaseAttrs().isEmpty());\n-        assertEquals(\"username\", waClientApp.getReleaseAttrs().get(\"uid\"));\n-        assertEquals(\"fullname\", waClientApp.getReleaseAttrs().get(\"cn\"));\n-        removeItems();\n+        try {\n+            waClientApp = waClientAppService.read(oidcrpto.getClientAppId(), null);\n+            assertNotNull(waClientApp);\n+            assertFalse(waClientApp.getReleaseAttrs().isEmpty());\n+            assertEquals(\"username\", waClientApp.getReleaseAttrs().get(\"uid\"));\n+            assertEquals(\"fullname\", waClientApp.getReleaseAttrs().get(\"cn\"));\n+        } finally {\n+            removeItems();\n+        }\n     }\n \n     private void addItems() {\n-        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultLDAPAuthModule\");\n+        AuthModuleTO authModuleTO = authModuleService.read(AUTH_MODULE);\n \n         ItemTO keyMapping = new ItemTO();\n         keyMapping.setIntAttrName(\"uid\");\n@@ -138,17 +143,17 @@ private void addItems() {\n \n         authModuleService.update(authModuleTO);\n \n-        authModuleTO = authModuleService.read(\"DefaultLDAPAuthModule\");\n+        authModuleTO = authModuleService.read(AUTH_MODULE);\n         assertFalse(authModuleTO.getItems().isEmpty());\n     }\n \n     private void removeItems() {\n-        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultLDAPAuthModule\");\n+        AuthModuleTO authModuleTO = authModuleService.read(AUTH_MODULE);\n         authModuleTO.getItems().clear();\n \n         authModuleService.update(authModuleTO);\n \n-        authModuleTO = authModuleService.read(\"DefaultLDAPAuthModule\");\n+        authModuleTO = authModuleService.read(AUTH_MODULE);\n         assertTrue(authModuleTO.getItems().isEmpty());\n     }\n }"},{"sha":"b8cbda05a23bf5754b8edcc5c1a1b7b47a04235f","filename":"fit/core-reference/src/test/resources/fediz.xml","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz.xml?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,35 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<EntityDescriptor entityID=\"urn:org:apache:cxf:fediz:idp:realm-A\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n-    <IDPSSODescriptor WantAuthnRequestsSigned=\"true\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n-        <KeyDescriptor use=\"signing\">\n-            <ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n-                <ds:X509Data>\n-                    <ds:X509Certificate>\n-cert-placeholder\n-                   </ds:X509Certificate>\n-                </ds:X509Data>\n-            </ds:KeyInfo>\n-        </KeyDescriptor>\n-        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>\n-        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://localhost:8443/fediz-idp/saml/up\"/>\n-        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://localhost:8443/fediz-idp/saml/up\"/>\n-    </IDPSSODescriptor>\n-</EntityDescriptor>"},{"sha":"a9a1cec625528fe72057d131e031371e52641789","filename":"fit/core-reference/src/test/resources/fediz_realmb.xml","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz_realmb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz_realmb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz_realmb.xml?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,35 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<EntityDescriptor entityID=\"urn:org:apache:cxf:fediz:idp:realm-B\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n-    <IDPSSODescriptor WantAuthnRequestsSigned=\"true\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n-        <KeyDescriptor use=\"signing\">\n-            <ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n-                <ds:X509Data>\n-                    <ds:X509Certificate>\n-cert-placeholder\n-                   </ds:X509Certificate>\n-                </ds:X509Data>\n-            </ds:KeyInfo>\n-        </KeyDescriptor>\n-        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>\n-        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://localhost:8443/fediz-idp/saml/up\"/>\n-        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://localhost:8443/fediz-idp/saml/up\"/>\n-    </IDPSSODescriptor>\n-</EntityDescriptor>"},{"sha":"e2a5238ff35955cb2138a9a08e0a5e8ffe229e88","filename":"fit/core-reference/src/test/resources/saml.keystore.jks","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fsaml.keystore.jks","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fsaml.keystore.jks","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fsaml.keystore.jks?ref=68151a717080f95aa3301002eac839061ec30008","previous_filename":"fit/core-reference/src/test/resources/keystore"},{"sha":"3d01fe02aa9875974ec0c753e39156384b7a38b4","filename":"fit/core-reference/src/test/resources/ssocircle.xml","status":"removed","additions":0,"deletions":106,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fssocircle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fssocircle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fssocircle.xml?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,106 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<EntityDescriptor entityID=\"https://idp.ssocircle.com\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n-    <IDPSSODescriptor WantAuthnRequestsSigned=\"false\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n-        <KeyDescriptor use=\"signing\">\n-            <ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n-                <ds:X509Data>\n-                    <ds:X509Certificate>\n-MIIEYzCCAkugAwIBAgIDIAZmMA0GCSqGSIb3DQEBCwUAMC4xCzAJBgNVBAYTAkRF\n-MRIwEAYDVQQKDAlTU09DaXJjbGUxCzAJBgNVBAMMAkNBMB4XDTE2MDgwMzE1MDMy\n-M1oXDTI2MDMwNDE1MDMyM1owPTELMAkGA1UEBhMCREUxEjAQBgNVBAoTCVNTT0Np\n-cmNsZTEaMBgGA1UEAxMRaWRwLnNzb2NpcmNsZS5jb20wggEiMA0GCSqGSIb3DQEB\n-AQUAA4IBDwAwggEKAoIBAQCAwWJyOYhYmWZF2TJvm1VyZccs3ZJ0TsNcoazr2pTW\n-cY8WTRbIV9d06zYjngvWibyiylewGXcYONB106ZNUdNgrmFd5194Wsyx6bPvnjZE\n-ERny9LOfuwQaqDYeKhI6c+veXApnOfsY26u9Lqb9sga9JnCkUGRaoVrAVM3yfghv\n-/Cg/QEg+I6SVES75tKdcLDTt/FwmAYDEBV8l52bcMDNF+JWtAuetI9/dWCBe9VTC\n-asAr2Fxw1ZYTAiqGI9sW4kWS2ApedbqsgH3qqMlPA7tg9iKy8Yw/deEn0qQIx8Gl\n-VnQFpDgzG9k+jwBoebAYfGvMcO/BDXD2pbWTN+DvbURlAgMBAAGjezB5MAkGA1Ud\n-EwQCMAAwLAYJYIZIAYb4QgENBB8WHU9wZW5TU0wgR2VuZXJhdGVkIENlcnRpZmlj\n-YXRlMB0GA1UdDgQWBBQhAmCewE7aonAvyJfjImCRZDtccTAfBgNVHSMEGDAWgBTA\n-1nEA+0za6ppLItkOX5yEp8cQaTANBgkqhkiG9w0BAQsFAAOCAgEAAhC5/WsF9ztJ\n-Hgo+x9KV9bqVS0MmsgpG26yOAqFYwOSPmUuYmJmHgmKGjKrj1fdCINtzcBHFFBC1\n-maGJ33lMk2bM2THx22/O93f4RFnFab7t23jRFcF0amQUOsDvltfJw7XCal8JdgPU\n-g6TNC4Fy9XYv0OAHc3oDp3vl1Yj8/1qBg6Rc39kehmD5v8SKYmpE7yFKxDF1ol9D\n-KDG/LvClSvnuVP0b4BWdBAA9aJSFtdNGgEvpEUqGkJ1osLVqCMvSYsUtHmapaX3h\n-iM9RbX38jsSgsl44Rar5Ioc7KXOOZFGfEKyyUqucYpjWCOXJELAVAzp7XTvA2q55\n-u31hO0w8Yx4uEQKlmxDuZmxpMz4EWARyjHSAuDKEW1RJvUr6+5uA9qeOKxLiKN1j\n-o6eWAcl6Wr9MreXR9kFpS6kHllfdVSrJES4ST0uh1Jp4EYgmiyMmFCbUpKXifpsN\n-WCLDenE3hllF0+q3wIdu+4P82RIM71n7qVgnDnK29wnLhHDat9rkC62CIbonpkVY\n-mnReX0jze+7twRanJOMCJ+lFg16BDvBcG8u0n/wIDkHHitBI7bU1k6c6DydLQ+69\n-h8SCo6sO9YuD+/3xAGKad4ImZ6vTwlB4zDCpu6YgQWocWRXE+VkOb+RBfvP755PU\n-aLfL63AFVlpOnEpIio5++UjNJRuPuAA=\n-                   </ds:X509Certificate>\n-                </ds:X509Data>\n-            </ds:KeyInfo>\n-        </KeyDescriptor>\n-        <KeyDescriptor use=\"encryption\">\n-            <ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n-                <ds:X509Data>\n-                    <ds:X509Certificate>\n-MIIEYzCCAkugAwIBAgIDIAZmMA0GCSqGSIb3DQEBCwUAMC4xCzAJBgNVBAYTAkRF\n-MRIwEAYDVQQKDAlTU09DaXJjbGUxCzAJBgNVBAMMAkNBMB4XDTE2MDgwMzE1MDMy\n-M1oXDTI2MDMwNDE1MDMyM1owPTELMAkGA1UEBhMCREUxEjAQBgNVBAoTCVNTT0Np\n-cmNsZTEaMBgGA1UEAxMRaWRwLnNzb2NpcmNsZS5jb20wggEiMA0GCSqGSIb3DQEB\n-AQUAA4IBDwAwggEKAoIBAQCAwWJyOYhYmWZF2TJvm1VyZccs3ZJ0TsNcoazr2pTW\n-cY8WTRbIV9d06zYjngvWibyiylewGXcYONB106ZNUdNgrmFd5194Wsyx6bPvnjZE\n-ERny9LOfuwQaqDYeKhI6c+veXApnOfsY26u9Lqb9sga9JnCkUGRaoVrAVM3yfghv\n-/Cg/QEg+I6SVES75tKdcLDTt/FwmAYDEBV8l52bcMDNF+JWtAuetI9/dWCBe9VTC\n-asAr2Fxw1ZYTAiqGI9sW4kWS2ApedbqsgH3qqMlPA7tg9iKy8Yw/deEn0qQIx8Gl\n-VnQFpDgzG9k+jwBoebAYfGvMcO/BDXD2pbWTN+DvbURlAgMBAAGjezB5MAkGA1Ud\n-EwQCMAAwLAYJYIZIAYb4QgENBB8WHU9wZW5TU0wgR2VuZXJhdGVkIENlcnRpZmlj\n-YXRlMB0GA1UdDgQWBBQhAmCewE7aonAvyJfjImCRZDtccTAfBgNVHSMEGDAWgBTA\n-1nEA+0za6ppLItkOX5yEp8cQaTANBgkqhkiG9w0BAQsFAAOCAgEAAhC5/WsF9ztJ\n-Hgo+x9KV9bqVS0MmsgpG26yOAqFYwOSPmUuYmJmHgmKGjKrj1fdCINtzcBHFFBC1\n-maGJ33lMk2bM2THx22/O93f4RFnFab7t23jRFcF0amQUOsDvltfJw7XCal8JdgPU\n-g6TNC4Fy9XYv0OAHc3oDp3vl1Yj8/1qBg6Rc39kehmD5v8SKYmpE7yFKxDF1ol9D\n-KDG/LvClSvnuVP0b4BWdBAA9aJSFtdNGgEvpEUqGkJ1osLVqCMvSYsUtHmapaX3h\n-iM9RbX38jsSgsl44Rar5Ioc7KXOOZFGfEKyyUqucYpjWCOXJELAVAzp7XTvA2q55\n-u31hO0w8Yx4uEQKlmxDuZmxpMz4EWARyjHSAuDKEW1RJvUr6+5uA9qeOKxLiKN1j\n-o6eWAcl6Wr9MreXR9kFpS6kHllfdVSrJES4ST0uh1Jp4EYgmiyMmFCbUpKXifpsN\n-WCLDenE3hllF0+q3wIdu+4P82RIM71n7qVgnDnK29wnLhHDat9rkC62CIbonpkVY\n-mnReX0jze+7twRanJOMCJ+lFg16BDvBcG8u0n/wIDkHHitBI7bU1k6c6DydLQ+69\n-h8SCo6sO9YuD+/3xAGKad4ImZ6vTwlB4zDCpu6YgQWocWRXE+VkOb+RBfvP755PU\n-aLfL63AFVlpOnEpIio5++UjNJRuPuAA=\n-                    </ds:X509Certificate>\n-                </ds:X509Data>\n-            </ds:KeyInfo>\n-            <EncryptionMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#aes128-cbc\">\n-                <xenc:KeySize xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\">128</xenc:KeySize>\n-</EncryptionMethod>\n-        </KeyDescriptor>\n-        <ArtifactResolutionService index=\"0\" isDefault=\"true\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://idp.ssocircle.com:443/sso/ArtifactResolver/metaAlias/publicidp\"/>\n-        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://idp.ssocircle.com:443/sso/IDPSloRedirect/metaAlias/publicidp\" ResponseLocation=\"https://idp.ssocircle.com:443/sso/IDPSloRedirect/metaAlias/publicidp\"/>\n-        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://idp.ssocircle.com:443/sso/IDPSloPost/metaAlias/publicidp\" ResponseLocation=\"https://idp.ssocircle.com:443/sso/IDPSloPost/metaAlias/publicidp\"/>\n-        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://idp.ssocircle.com:443/sso/IDPSloSoap/metaAlias/publicidp\"/>\n-        <ManageNameIDService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://idp.ssocircle.com:443/sso/IDPMniRedirect/metaAlias/publicidp\" ResponseLocation=\"https://idp.ssocircle.com:443/sso/IDPMniRedirect/metaAlias/publicidp\"/>\n-        <ManageNameIDService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://idp.ssocircle.com:443/sso/IDPMniPOSTmetaAlias/publicidp\" ResponseLocation=\"https://idp.ssocircle.com:443/sso/IDPMniPOST/metaAlias/publicidp\"/>\n-        <ManageNameIDService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://idp.ssocircle.com:443/sso/IDPMniSoap/metaAlias/publicidp\"/>\n-        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</NameIDFormat>\n-        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>\n-        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>\n-        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>\n-        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos</NameIDFormat>\n-        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://idp.ssocircle.com:443/sso/SSORedirect/metaAlias/publicidp\"/>\n-        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://idp.ssocircle.com:443/sso/SSOPOST/metaAlias/publicidp\"/>\n-        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://idp.ssocircle.com:443/sso/SSOSoap/metaAlias/publicidp\"/>\n-        <NameIDMappingService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://idp.ssocircle.com:443/sso/NIMSoap/metaAlias/publicidp\"/>\n-    </IDPSSODescriptor>\n-</EntityDescriptor>"},{"sha":"8e73bc02d41aa3d6afd8692fb62cb32dfa4037c3","filename":"fit/enduser-reference/pom.xml","status":"modified","additions":2,"deletions":121,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fenduser-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fenduser-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -59,8 +59,8 @@ under the License.\n     </dependency>\n     \n     <dependency>\n-      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-      <artifactId>syncope-ext-saml2sp-client-enduser</artifactId>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-client-enduser</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>\n@@ -96,16 +96,6 @@ under the License.\n       <type>war</type>\n       <scope>test</scope>\n     </dependency>\n-    <dependency>\n-      <groupId>org.apache.httpcomponents</groupId>\n-      <artifactId>httpclient</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.junit.jupiter</groupId>\n-      <artifactId>junit-jupiter</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n   </dependencies>\n \n   <build>\n@@ -314,115 +304,6 @@ under the License.\n       </build>\n     </profile>\n \n-    <profile>\n-      <id>sso-it</id>\n-\n-      <build>\n-        <plugins>          \n-          <plugin>\n-            <groupId>io.fabric8</groupId>\n-            <artifactId>docker-maven-plugin</artifactId>\n-            <configuration>\n-              <images>\n-                <image>\n-                  <name>jboss/keycloak:6.0.1</name>\n-                  <run>\n-                    <hostname>keycloak</hostname>\n-                    <env>\n-                      <DB_VENDOR>h2</DB_VENDOR>\n-                      <KEYCLOAK_USER>admin</KEYCLOAK_USER>\n-                      <KEYCLOAK_PASSWORD>password</KEYCLOAK_PASSWORD>\n-                    </env>\n-                    <ports>\n-                      <port>9090:8080</port>\n-                    </ports>\n-                    <volumes>\n-                      <bind>\n-                        <volume>${basedir}/src/test/resources/sso/init.sh:/opt/jboss/startup-scripts/init.sh</volume>\n-                        <volume>${project.build.testOutputDirectory}/sso/delayed-init:/tmp/delayed-init</volume>\n-                        <volume>${project.build.testOutputDirectory}/sso/saml2syncope-console.json:/tmp/saml2syncope-console.json</volume>\n-                        <volume>${project.build.testOutputDirectory}/sso/saml2syncope-enduser.json:/tmp/saml2syncope-enduser.json</volume>\n-                        <volume>${project.build.testOutputDirectory}/sso/oidc-syncope.json:/tmp/oidc-syncope.json</volume>\n-                      </bind>\n-                    </volumes>\n-                  </run>\n-                </image>\n-              </images>\n-            </configuration>\n-            <executions>\n-              <execution>\n-                <id>start-keycloak</id>\n-                <phase>pre-integration-test</phase>\n-                <goals>\n-                  <goal>start</goal>\n-                </goals>\n-              </execution>\n-              <execution>\n-                <id>stop-keycloak</id>\n-                <phase>post-integration-test</phase>\n-                <goals>\n-                  <goal>stop</goal>\n-                  <goal>remove</goal>\n-                </goals>\n-              </execution>\n-            </executions>\n-          </plugin>\n-\n-          <plugin>\n-            <groupId>org.codehaus.cargo</groupId>\n-            <artifactId>cargo-maven2-plugin</artifactId>\n-            <inherited>true</inherited>\n-            <configuration>\n-              <configuration>\n-                <properties>\n-                  <cargo.jvmargs>\n-                    -Dspring.profiles.active=embedded\n-                    -Dwicket.core.settings.general.configuration-type=development\n-                    -XX:+CMSClassUnloadingEnabled -XX:+UseG1GC -Xmx1024m -Xms512m</cargo.jvmargs>\n-                </properties>\n-              </configuration>\n-            </configuration>\n-            <executions>\n-              <execution>\n-                <id>start-container</id>\n-                <phase>pre-integration-test</phase>\n-                <goals>\n-                  <goal>start</goal>\n-                </goals>\n-                <configuration>\n-                  <skip>${skipTests}</skip>\n-                </configuration>\n-              </execution>\n-              <execution>\n-                <id>stop-container</id>\n-                <phase>post-integration-test</phase>\n-                <goals>\n-                  <goal>stop</goal>\n-                </goals>\n-                <configuration>\n-                  <skip>${skipTests}</skip>\n-                </configuration>\n-              </execution>\n-            </executions>\n-          </plugin>\n-\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-failsafe-plugin</artifactId>\n-            <inherited>true</inherited>\n-            <executions>\n-              <execution>\n-                <id>verify</id>\n-                <goals>\n-                  <goal>verify</goal>\n-                </goals>\n-              </execution>\n-            </executions>\n-          </plugin>\n-        </plugins>\n-      </build>\n-    </profile>\n-\n     <profile>\n       <id>apache-release</id>\n "},{"sha":"7e5b0d5f84a633ea236140ee503baaa1bd9d8dcf","filename":"fit/enduser-reference/src/main/resources/saml2sp-agent.properties","status":"removed","additions":0,"deletions":22,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,22 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-conf.directory=${conf.directory}\n-\n-anonymousUser=${anonymousUser}\n-anonymousKey=${anonymousKey}\n-\n-useGZIPCompression=true"},{"sha":"821eab47144ca1c65ecf301c79e693b9d9c82aaa","filename":"fit/enduser-reference/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -26,30 +26,6 @@ under the License.\n \n   <display-name>Apache Syncope ${syncope.version} Enduser</display-name>\n \n-  <context-param>\n-    <param-name>saml2sp.login.success.url</param-name>\n-    <param-value>../wicket/bookmarkable/org.apache.syncope.client.enduser.pages.SAML2SPLogin</param-value>\n-  </context-param>\n-  <context-param>\n-    <param-name>saml2sp.login.error.url</param-name>\n-    <param-value>../wicket/bookmarkable/org.apache.syncope.client.enduser.pages.Login</param-value>\n-  </context-param>\n-  \n-  <context-param>\n-    <param-name>saml2sp.logout.success.url</param-name>\n-    <param-value>../wicket/bookmarkable/org.apache.syncope.client.enduser.pages.SAML2SPLogout</param-value>\n-  </context-param>\n-  <context-param>\n-    <param-name>saml2sp.logout.error.url</param-name>\n-    <param-value>../wicket/bookmarkable/org.apache.syncope.client.enduser.pages.Login</param-value>\n-  </context-param>\n-  \n-  <context-param>\n-    <param-name>saml2sp.redirect.selfreg</param-name>\n-    <param-value>../wicket/bookmarkable/org.apache.syncope.client.enduser.pages.SAML2SPSelfReg</param-value>\n-  </context-param>\n-\n-  <!-- OIDC Client Parameters -->\n   <context-param>\n     <param-name>oidcclient.login.success.url</param-name>\n     <param-value>../wicket/bookmarkable/org.apache.syncope.client.enduser.pages.OIDCClientLogin</param-value>"},{"sha":"7f434929c8df921cf1346b8ef126c3b1702f5c65","filename":"fit/enduser-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"removed","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,51 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit;\n-\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.rest.api.service.OIDCProviderService;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPService;\n-import org.junit.jupiter.api.BeforeAll;\n-\n-public abstract class AbstractITCase {\n-\n-    protected static final String ADMIN_UNAME = \"admin\";\n-\n-    protected static final String ADMIN_PWD = \"password\";\n-\n-    protected static final String ADDRESS = \"http://localhost:9080/syncope/rest\";\n-\n-    protected static SyncopeClientFactoryBean clientFactory;\n-\n-    protected static SyncopeClient adminClient;\n-\n-    protected static SAML2IdPService saml2IdPService;\n-\n-    protected static OIDCProviderService oidcProviderService;\n-\n-    @BeforeAll\n-    public static void restSetup() {\n-        clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS);\n-        adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n-\n-        saml2IdPService = adminClient.getService(SAML2IdPService.class);\n-        oidcProviderService = adminClient.getService(OIDCProviderService.class);\n-    }\n-}"},{"sha":"bccc3ac35e5abdf180630e33f0e065839f75468a","filename":"fit/enduser-reference/src/test/java/org/apache/syncope/fit/OIDCClientITCase.java","status":"removed","additions":0,"deletions":144,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FOIDCClientITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FOIDCClientITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FOIDCClientITCase.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,144 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.http.Consts;\n-import org.apache.http.HttpHeaders;\n-import org.apache.http.HttpStatus;\n-import org.apache.http.NameValuePair;\n-import org.apache.http.client.entity.UrlEncodedFormEntity;\n-import org.apache.http.client.methods.CloseableHttpResponse;\n-import org.apache.http.client.methods.HttpGet;\n-import org.apache.http.client.methods.HttpPost;\n-import org.apache.http.client.protocol.HttpClientContext;\n-import org.apache.http.impl.client.BasicCookieStore;\n-import org.apache.http.impl.client.CloseableHttpClient;\n-import org.apache.http.impl.client.HttpClients;\n-import org.apache.http.message.BasicHeader;\n-import org.apache.http.message.BasicNameValuePair;\n-import org.apache.http.util.EntityUtils;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.OIDCProviderTO;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-\n-public class OIDCClientITCase extends AbstractITCase {\n-\n-    @BeforeAll\n-    public static void oidcSetup() {\n-        OIDCProviderTO keycloak = new OIDCProviderTO();\n-        keycloak.setName(\"Keyloack\");\n-        keycloak.setClientID(\"oidc-syncope\");\n-        keycloak.setClientSecret(\"oidc-syncope\");\n-        keycloak.setAuthorizationEndpoint(\"http://localhost:9090/auth/realms/master/protocol/openid-connect/auth\");\n-        keycloak.setTokenEndpoint(\"http://localhost:9090/auth/realms/master/protocol/openid-connect/token\");\n-        keycloak.setIssuer(\"http://localhost:9090/auth/realms/master\");\n-        keycloak.setJwksUri(\"http://localhost:9090/auth/realms/master/protocol/openid-connect/certs\");\n-        keycloak.setUserinfoEndpoint(\"http://localhost:9090/auth/realms/master/protocol/openid-connect/userinfo\");\n-        keycloak.setEndSessionEndpoint(\"http://localhost:9090/auth/realms/master/protocol/openid-connect/logout\");\n-        keycloak.setCreateUnmatching(true);\n-\n-        ItemTO item = new ItemTO();\n-        item.setIntAttrName(\"username\");\n-        item.setExtAttrName(\"preferred_username\");\n-        item.setConnObjectKey(true);\n-        keycloak.getItems().add(item);\n-\n-        item = new ItemTO();\n-        item.setIntAttrName(\"email\");\n-        item.setExtAttrName(\"email\");\n-        keycloak.getItems().add(item);\n-\n-        item = new ItemTO();\n-        item.setIntAttrName(\"userId\");\n-        item.setExtAttrName(\"email\");\n-        keycloak.getItems().add(item);\n-\n-        item = new ItemTO();\n-        item.setIntAttrName(\"firstname\");\n-        item.setExtAttrName(\"given_name\");\n-        keycloak.getItems().add(item);\n-\n-        item = new ItemTO();\n-        item.setIntAttrName(\"surname\");\n-        item.setExtAttrName(\"family_name\");\n-        keycloak.getItems().add(item);\n-\n-        item = new ItemTO();\n-        item.setIntAttrName(\"fullname\");\n-        item.setExtAttrName(\"fullName\");\n-        keycloak.getItems().add(item);\n-\n-        oidcProviderService.create(keycloak);\n-    }\n-\n-    private static void sso(final String baseURL) throws IOException {\n-        CloseableHttpClient httpclient = HttpClients.custom().setMaxConnPerRoute(100).build();\n-        HttpClientContext context = HttpClientContext.create();\n-        context.setCookieStore(new BasicCookieStore());\n-\n-        // 1. fetch login page\n-        HttpGet get = new HttpGet(baseURL);\n-        CloseableHttpResponse response = httpclient.execute(get, context);\n-        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n-\n-        // 2. click on the OpenID Connect Provider\n-        get = new HttpGet(baseURL + \"oidcclient/login?op=Keyloack\");\n-        response = httpclient.execute(get, context);\n-\n-        // 3. get login form from Keycloack and submit with expected username and password\n-        String action = StringUtils.substringBefore(\n-                StringUtils.substringAfter(EntityUtils.toString(response.getEntity()),\n-                        \"<form id=\\\"kc-form-login\\\" onsubmit=\\\"login.disabled = true; return true;\\\" action=\\\"\"),\n-                \"\\\" method=\\\"post\\\">\").replace(\"&amp;\", \"&\");\n-\n-        List<NameValuePair> toSubmit = new ArrayList<>();\n-        toSubmit.add(new BasicNameValuePair(\"username\", \"john.doe\"));\n-        toSubmit.add(new BasicNameValuePair(\"password\", \"password\"));\n-\n-        HttpPost post = new HttpPost(action);\n-        post.addHeader(new BasicHeader(HttpHeaders.ACCEPT_LANGUAGE, \"en-US,en;q=0.5\"));\n-        post.setEntity(new UrlEncodedFormEntity(toSubmit, Consts.UTF_8));\n-        response = httpclient.execute(post, context);\n-        assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n-\n-        // 4. verify that user is now authenticated\n-        get = new HttpGet(response.getFirstHeader(HttpHeaders.LOCATION).getValue());\n-        response = httpclient.execute(get, context);\n-        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n-        assertTrue(EntityUtils.toString(response.getEntity()).contains(\"john.doe\"));\n-    }\n-\n-    @Test\n-    public void sso2Console() throws IOException {\n-        sso(\"http://localhost:9080/syncope-console/\");\n-    }\n-\n-    @Test\n-    public void sso2Enduser() throws IOException {\n-        sso(\"http://localhost:9080/syncope-enduser/\");\n-    }\n-}"},{"sha":"9c0d4d26b5c2ef9f4453f25d26ec9b598f760563","filename":"fit/enduser-reference/src/test/java/org/apache/syncope/fit/SAML2SPITCase.java","status":"removed","additions":0,"deletions":222,"changes":222,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FSAML2SPITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FSAML2SPITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FSAML2SPITCase.java?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,222 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.ws.rs.core.MediaType;\n-import javax.xml.stream.XMLStreamException;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.cxf.jaxrs.client.WebClient;\n-import org.apache.cxf.staxutils.StaxUtils;\n-import org.apache.http.Consts;\n-import org.apache.http.HttpHeaders;\n-import org.apache.http.HttpStatus;\n-import org.apache.http.NameValuePair;\n-import org.apache.http.client.entity.UrlEncodedFormEntity;\n-import org.apache.http.client.methods.CloseableHttpResponse;\n-import org.apache.http.client.methods.HttpGet;\n-import org.apache.http.client.methods.HttpPost;\n-import org.apache.http.client.protocol.HttpClientContext;\n-import org.apache.http.impl.client.BasicCookieStore;\n-import org.apache.http.impl.client.CloseableHttpClient;\n-import org.apache.http.impl.client.HttpClients;\n-import org.apache.http.message.BasicHeader;\n-import org.apache.http.message.BasicNameValuePair;\n-import org.apache.http.util.EntityUtils;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.to.SAML2IdPTO;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Node;\n-import org.w3c.dom.NodeList;\n-\n-public class SAML2SPITCase extends AbstractITCase {\n-\n-    @BeforeAll\n-    public static void samlSetup() {\n-        WebClient.client(saml2IdPService).\n-                accept(MediaType.APPLICATION_XML_TYPE).\n-                type(MediaType.APPLICATION_XML_TYPE);\n-        try {\n-            saml2IdPService.importFromMetadata((InputStream) WebClient.create(\n-                    \"http://localhost:9090/auth/realms/master/protocol/saml/descriptor/\").get().getEntity());\n-        } finally {\n-            WebClient.client(saml2IdPService).\n-                    accept(clientFactory.getContentType().getMediaType()).\n-                    type(clientFactory.getContentType().getMediaType());\n-        }\n-\n-        List<SAML2IdPTO> idps = saml2IdPService.list();\n-        assertEquals(1, idps.size());\n-\n-        SAML2IdPTO keycloak = idps.get(0);\n-        keycloak.setName(\"Keyloack\");\n-        keycloak.setCreateUnmatching(true);\n-        keycloak.getItems().clear();\n-\n-        ItemTO item = new ItemTO();\n-        item.setIntAttrName(\"username\");\n-        item.setExtAttrName(\"username\");\n-        item.setConnObjectKey(true);\n-        keycloak.getItems().add(item);\n-\n-        item = new ItemTO();\n-        item.setIntAttrName(\"email\");\n-        item.setExtAttrName(\"email\");\n-        keycloak.getItems().add(item);\n-\n-        item = new ItemTO();\n-        item.setIntAttrName(\"userId\");\n-        item.setExtAttrName(\"email\");\n-        keycloak.getItems().add(item);\n-\n-        item = new ItemTO();\n-        item.setIntAttrName(\"firstname\");\n-        item.setExtAttrName(\"givenName\");\n-        keycloak.getItems().add(item);\n-\n-        item = new ItemTO();\n-        item.setIntAttrName(\"surname\");\n-        item.setExtAttrName(\"surname\");\n-        keycloak.getItems().add(item);\n-\n-        item = new ItemTO();\n-        item.setIntAttrName(\"fullname\");\n-        item.setExtAttrName(\"fullName\");\n-        keycloak.getItems().add(item);\n-\n-        saml2IdPService.update(keycloak);\n-    }\n-\n-    private static List<Node> find(final NodeList children, final String match) {\n-        List<Node> nodes = new ArrayList<>();\n-        for (int i = 0; i < children.getLength(); i++) {\n-            if (match.equals(children.item(i).getNodeName())) {\n-                nodes.add(children.item(i));\n-            }\n-        }\n-        return nodes;\n-    }\n-\n-    private static void sso(final String baseURL) throws IOException, XMLStreamException {\n-        CloseableHttpClient httpclient = HttpClients.custom().setMaxConnPerRoute(100).build();\n-        HttpClientContext context = HttpClientContext.create();\n-        context.setCookieStore(new BasicCookieStore());\n-\n-        // 1. fetch login page\n-        HttpGet get = new HttpGet(baseURL);\n-        CloseableHttpResponse response = httpclient.execute(get, context);\n-        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n-\n-        // 2. click on the SAML 2.0 IdP\n-        get = new HttpGet(baseURL + \"saml2sp/login?idp=http%3A%2F%2Flocalhost%3A9090%2Fauth%2Frealms%2Fmaster\");\n-        response = httpclient.execute(get, context);\n-\n-        // 3. process autosubmit form for login request\n-        Document autosubmitForm = StaxUtils.read(response.getEntity().getContent());\n-\n-        Node body = find(autosubmitForm.getChildNodes().item(0).getChildNodes(), \"body\").get(0);\n-        assertNotNull(body);\n-\n-        Node form = find(body.getChildNodes(), \"form\").get(0);\n-        assertNotNull(form);\n-\n-        List<NameValuePair> toSubmit = new ArrayList<>();\n-        for (Node input : find(form.getChildNodes(), \"input\")) {\n-            Node name = input.getAttributes().getNamedItem(\"name\");\n-            Node value = input.getAttributes().getNamedItem(\"value\");\n-            if (name != null && value != null) {\n-                toSubmit.add(new BasicNameValuePair(name.getTextContent(), value.getTextContent()));\n-            }\n-        }\n-\n-        HttpPost post = new HttpPost(form.getAttributes().getNamedItem(\"action\").getTextContent());\n-        post.setEntity(new UrlEncodedFormEntity(toSubmit, Consts.UTF_8));\n-        response = httpclient.execute(post, context);\n-        assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n-\n-        // 4. get login form from Keycloack and submit with expected username and password\n-        get = new HttpGet(response.getFirstHeader(HttpHeaders.LOCATION).getValue());\n-        response = httpclient.execute(get, context);\n-\n-        String action = StringUtils.substringBefore(\n-                StringUtils.substringAfter(EntityUtils.toString(response.getEntity()),\n-                        \"<form id=\\\"kc-form-login\\\" onsubmit=\\\"login.disabled = true; return true;\\\" action=\\\"\"),\n-                \"\\\" method=\\\"post\\\">\").replace(\"&amp;\", \"&\");\n-\n-        toSubmit.clear();\n-        toSubmit.add(new BasicNameValuePair(\"username\", \"john.doe\"));\n-        toSubmit.add(new BasicNameValuePair(\"password\", \"password\"));\n-\n-        post = new HttpPost(action);\n-        post.addHeader(new BasicHeader(HttpHeaders.ACCEPT_LANGUAGE, \"en-US,en;q=0.5\"));\n-        post.setEntity(new UrlEncodedFormEntity(toSubmit, Consts.UTF_8));\n-        response = httpclient.execute(post, context);\n-\n-        // 5. process autosubmit form for login response\n-        autosubmitForm = StaxUtils.read(\n-                new ByteArrayInputStream(EntityUtils.toString(response.getEntity()).replace(\"&\", \"&amp;\").getBytes()));\n-\n-        body = find(autosubmitForm.getChildNodes().item(0).getChildNodes(), \"BODY\").get(0);\n-        assertNotNull(body);\n-\n-        form = find(body.getChildNodes(), \"FORM\").get(0);\n-        assertNotNull(form);\n-\n-        toSubmit.clear();\n-        for (Node input : find(form.getChildNodes(), \"INPUT\")) {\n-            Node name = input.getAttributes().getNamedItem(\"NAME\");\n-            Node value = input.getAttributes().getNamedItem(\"VALUE\");\n-            if (name != null && value != null) {\n-                toSubmit.add(new BasicNameValuePair(name.getTextContent(), value.getTextContent()));\n-            }\n-        }\n-\n-        post = new HttpPost(form.getAttributes().getNamedItem(\"ACTION\").getTextContent());\n-        post.setEntity(new UrlEncodedFormEntity(toSubmit, Consts.UTF_8));\n-        response = httpclient.execute(post, context);\n-        assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n-\n-        // 6. verify that user is now authenticated\n-        get = new HttpGet(baseURL + StringUtils.removeStart(\n-                response.getFirstHeader(HttpHeaders.LOCATION).getValue(), \"../\"));\n-        response = httpclient.execute(get, context);\n-        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n-        assertTrue(EntityUtils.toString(response.getEntity()).contains(\"john.doe\"));\n-    }\n-\n-    @Test\n-    public void sso2Console() throws IOException, XMLStreamException {\n-        sso(\"http://localhost:9080/syncope-console/\");\n-    }\n-\n-    @Test\n-    public void sso2Enduser() throws IOException, XMLStreamException {\n-        sso(\"http://localhost:9080/syncope-enduser/\");\n-    }\n-}"},{"sha":"a432550540bcf491096a5e2f5b7b8c72b614ace4","filename":"fit/enduser-reference/src/test/resources/sso/delayed-init","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Fdelayed-init","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Fdelayed-init","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Fdelayed-init?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,28 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-\n-timeout 300 bash -c 'while [[ \"$(curl -s -o /dev/null -w ''%{http_code}'' keycloak:8080)\" != \"200\" ]]; do sleep 5; done' || false\n-\n-/opt/jboss/keycloak/bin/kcadm.sh config credentials --server http://keycloak:8080/auth --realm master --user admin --password password\n-\n-/opt/jboss/keycloak/bin/kcadm.sh create users -r master -s username=john.doe -s email=john.doe@syncope.apache.org -s lastName=Doe -s firstName=John -s 'attributes.fullName=John Doe' -s enabled=true\n-/opt/jboss/keycloak/bin/kcadm.sh set-password -r master --username john.doe --new-password password\n-\n-/opt/jboss/keycloak/bin/kcadm.sh create clients -r master -f /tmp/saml2syncope-console.json\n-/opt/jboss/keycloak/bin/kcadm.sh create clients -r master -f /tmp/saml2syncope-enduser.json\n-\n-/opt/jboss/keycloak/bin/kcadm.sh create clients -r master -f /tmp/oidc-syncope.json"},{"sha":"7cb523a1f599fec31a07b8315fde574cb1c8db30","filename":"fit/enduser-reference/src/test/resources/sso/init.sh","status":"removed","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Finit.sh","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Finit.sh","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Finit.sh?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,18 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-\n-nohup bash /tmp/delayed-init&"},{"sha":"8d582c1c393ae44771f642270bcd193470afb7ce","filename":"fit/enduser-reference/src/test/resources/sso/oidc-syncope.json","status":"removed","additions":0,"deletions":131,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Foidc-syncope.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Foidc-syncope.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Foidc-syncope.json?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,131 +0,0 @@\n-{\n-    \"clientId\": \"oidc-syncope\",\n-    \"surrogateAuthRequired\": false,\n-    \"enabled\": true,\n-    \"clientAuthenticatorType\": \"client-secret\",\n-    \"redirectUris\": [\n-        \"http://localhost:9080/syncope-enduser/oidcclient/code-consumer\",\n-        \"http://localhost:9080/syncope-enduser/oidcclient/logout\",\n-        \"http://localhost:9080/syncope-console/oidcclient/code-consumer\",\n-        \"http://localhost:9080/syncope-console/oidcclient/logout\"\n-    ],\n-    \"webOrigins\": [],\n-    \"notBefore\": 0,\n-    \"bearerOnly\": false,\n-    \"consentRequired\": false,\n-    \"standardFlowEnabled\": true,\n-    \"implicitFlowEnabled\": false,\n-    \"directAccessGrantsEnabled\": true,\n-    \"serviceAccountsEnabled\": false,\n-    \"publicClient\": true,\n-    \"frontchannelLogout\": false,\n-    \"protocol\": \"openid-connect\",\n-    \"attributes\": {\n-        \"saml.assertion.signature\": \"false\",\n-        \"saml.force.post.binding\": \"false\",\n-        \"saml.multivalued.roles\": \"false\",\n-        \"saml.encrypt\": \"false\",\n-        \"saml.server.signature\": \"false\",\n-        \"saml.server.signature.keyinfo.ext\": \"false\",\n-        \"exclude.session.state.from.auth.response\": \"false\",\n-        \"saml_force_name_id_format\": \"false\",\n-        \"saml.client.signature\": \"false\",\n-        \"tls.client.certificate.bound.access.tokens\": \"false\",\n-        \"saml.authnstatement\": \"false\",\n-        \"display.on.consent.screen\": \"false\",\n-        \"saml.onetimeuse.condition\": \"false\"\n-    },\n-    \"authenticationFlowBindingOverrides\": {},\n-    \"fullScopeAllowed\": true,\n-    \"nodeReRegistrationTimeout\": -1,\n-    \"protocolMappers\": [\n-        {\n-            \"name\": \"family name\",\n-            \"protocol\": \"openid-connect\",\n-            \"protocolMapper\": \"oidc-usermodel-property-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"userinfo.token.claim\": \"true\",\n-                \"user.attribute\": \"lastName\",\n-                \"id.token.claim\": \"true\",\n-                \"access.token.claim\": \"true\",\n-                \"claim.name\": \"family_name\",\n-                \"jsonType.label\": \"String\"\n-            }\n-        },\n-        {\n-            \"name\": \"given name\",\n-            \"protocol\": \"openid-connect\",\n-            \"protocolMapper\": \"oidc-usermodel-property-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"userinfo.token.claim\": \"true\",\n-                \"user.attribute\": \"firstName\",\n-                \"id.token.claim\": \"true\",\n-                \"access.token.claim\": \"true\",\n-                \"claim.name\": \"given_name\",\n-                \"jsonType.label\": \"String\"\n-            }\n-        },\n-        {\n-            \"name\": \"username\",\n-            \"protocol\": \"openid-connect\",\n-            \"protocolMapper\": \"oidc-usermodel-property-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"userinfo.token.claim\": \"true\",\n-                \"user.attribute\": \"username\",\n-                \"id.token.claim\": \"true\",\n-                \"access.token.claim\": \"true\",\n-                \"claim.name\": \"preferred_username\",\n-                \"jsonType.label\": \"String\"\n-            }\n-        },\n-        {\n-            \"name\": \"fullName\",\n-            \"protocol\": \"openid-connect\",\n-            \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"userinfo.token.claim\": \"true\",\n-                \"user.attribute\": \"fullName\",\n-                \"id.token.claim\": \"true\",\n-                \"access.token.claim\": \"true\",\n-                \"claim.name\": \"fullName\",\n-                \"jsonType.label\": \"String\"\n-            }\n-        },\n-        {\n-            \"name\": \"email\",\n-            \"protocol\": \"openid-connect\",\n-            \"protocolMapper\": \"oidc-usermodel-property-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"userinfo.token.claim\": \"true\",\n-                \"user.attribute\": \"email\",\n-                \"id.token.claim\": \"true\",\n-                \"access.token.claim\": \"true\",\n-                \"claim.name\": \"email\",\n-                \"jsonType.label\": \"String\"\n-            }\n-        }\n-    ],\n-    \"defaultClientScopes\": [\n-        \"web-origins\",\n-        \"role_list\",\n-        \"roles\",\n-        \"profile\",\n-        \"email\"\n-    ],\n-    \"optionalClientScopes\": [\n-        \"address\",\n-        \"phone\",\n-        \"offline_access\",\n-        \"microprofile-jwt\"\n-    ],\n-    \"access\": {\n-        \"view\": true,\n-        \"configure\": true,\n-        \"manage\": true\n-    }\n-}\n\\ No newline at end of file"},{"sha":"9d4e73d39a484246da6a723855bba7a36815f3a8","filename":"fit/enduser-reference/src/test/resources/sso/saml2syncope-console.json","status":"removed","additions":0,"deletions":131,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Fsaml2syncope-console.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Fsaml2syncope-console.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Fsaml2syncope-console.json?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,131 +0,0 @@\n-{\n-    \"clientId\": \"http://localhost:9080/syncope-console/\",\n-    \"name\": \"SAML Test\",\n-    \"adminUrl\": \"http://localhost:8080/auth/realms/master\",\n-    \"surrogateAuthRequired\": false,\n-    \"enabled\": true,\n-    \"clientAuthenticatorType\": \"client-secret\",\n-    \"redirectUris\": [\n-        \"http://localhost:9080/*\"\n-    ],\n-    \"webOrigins\": [\n-        \"http://localhost:9080\"\n-    ],\n-    \"notBefore\": 0,\n-    \"bearerOnly\": false,\n-    \"consentRequired\": false,\n-    \"standardFlowEnabled\": true,\n-    \"implicitFlowEnabled\": false,\n-    \"directAccessGrantsEnabled\": false,\n-    \"serviceAccountsEnabled\": false,\n-    \"publicClient\": false,\n-    \"frontchannelLogout\": true,\n-    \"protocol\": \"saml\",\n-    \"attributes\": {\n-        \"saml.assertion.signature\": \"true\",\n-        \"saml_assertion_consumer_url_redirect\": \"http://localhost:9080/syncope-console/saml2sp/assertion-consumer\",\n-        \"saml.force.post.binding\": \"true\",\n-        \"saml.multivalued.roles\": \"false\",\n-        \"saml_single_logout_service_url_post\": \"http://localhost:9080/syncope-console/saml2sp/logout\",\n-        \"saml.encrypt\": \"false\",\n-        \"saml_assertion_consumer_url_post\": \"http://localhost:9080/syncope-console/saml2sp/assertion-consumer\",\n-        \"saml.server.signature\": \"true\",\n-        \"saml.server.signature.keyinfo.ext\": \"false\",\n-        \"exclude.session.state.from.auth.response\": \"false\",\n-        \"saml.signing.certificate\": \"MIIC9TCCAd0CBgFrCC7kezANBgkqhkiG9w0BAQsFADA+MTwwOgYDVQQDDDNodHRwOi8vc3luY29wZS1zYW1sMi10ZXN0LWNvbTo5MDgwL3N5bmNvcGUtZW5kdXNlci8wHhcNMTkwNTMwMDk1ODM5WhcNMjkwNTMwMTAwMDE5WjA+MTwwOgYDVQQDDDNodHRwOi8vc3luY29wZS1zYW1sMi10ZXN0LWNvbTo5MDgwL3N5bmNvcGUtZW5kdXNlci8wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCF4QsiRZGD7BNx0Bglh4rgtACaIr7R/nDQfdGLN9uSA2HkEPygJzBRyluQLiQv9o/LKQMwvmia5fK4Xt99cgJnmrzKXraKo1KsZNz8vpygMpGJzCA2XUMLe065lYg28PV2bjk6hyUcMehlubjKFQ6USAJG5dbrrSz7iS2jHQZcxCZAdPPFpaUZpcJPNXU8n9s+peQvPeiYRu9QUEB/qe/onvQ/WJUXxErx2PHmtG9yeIQKoacSvrD6rSHwCgwxJgo+tW12S4bRXj4Nwm2h9969PrQO8L8egCkF5RLSe0gBaWqan9HYIQ6B/TzgsGrUPIGw7ZA4WW7GgL3tZpXvZYZLAgMBAAEwDQYJKoZIhvcNAQELBQADggEBADo0tTfrgTJ1+p/lAtlmxqIA18Ud1QAqzOCS9yQ2VwbMtiRR6wz92dm1wPAUbTjiZZ9e2zGiBPfLeAlPNlZ+Q2HLJV6lrgNQRFUFgL2cM7ihuYPoQYgPiaH2ciT9Zh+5Wwzb/+h1IgH3qCEiMyE8LVrd/M+HCtDTS+OwdEnLL0CmCZ5l3aEz9XBWa5Nu0Rz3I+R2U4cPM4kn+40Ebjt1Dyf0FvQVUL9goXFpsATxBtSPGmewVJ+AGpKlse4HoNyRtFkdhYPed3QckKJO+NbluE5wsgJOdZD/7J4BDr5CIoe26nlnLBqvJA3m/lxVA39zqh2J1LDzuEeH4F9bBtbCUmY=\",\n-        \"saml_single_logout_service_url_redirect\": \"http://localhost:9080/syncope-console/saml2sp/logout\",\n-        \"saml.signature.algorithm\": \"RSA_SHA256\",\n-        \"saml_force_name_id_format\": \"false\",\n-        \"saml.client.signature\": \"false\",\n-        \"tls.client.certificate.bound.access.tokens\": \"false\",\n-        \"saml.authnstatement\": \"true\",\n-        \"display.on.consent.screen\": \"false\",\n-        \"saml.signing.private.key\": \"MIIEowIBAAKCAQEAheELIkWRg+wTcdAYJYeK4LQAmiK+0f5w0H3RizfbkgNh5BD8oCcwUcpbkC4kL/aPyykDML5omuXyuF7ffXICZ5q8yl62iqNSrGTc/L6coDKRicwgNl1DC3tOuZWINvD1dm45OoclHDHoZbm4yhUOlEgCRuXW660s+4ktox0GXMQmQHTzxaWlGaXCTzV1PJ/bPqXkLz3omEbvUFBAf6nv6J70P1iVF8RK8djx5rRvcniECqGnEr6w+q0h8AoMMSYKPrVtdkuG0V4+DcJtoffevT60DvC/HoApBeUS0ntIAWlqmp/R2CEOgf084LBq1DyBsO2QOFluxoC97WaV72WGSwIDAQABAoIBABXnJY0r2Iy+uMesBedN75inmlmdSZ7Ng+N4Uin2r4OJ7iAD73C8OJmJA8Xo5p66NfhE83KsFC0TZcxoKSQ63M3acPyi1jaEVehCcC0hejpzS4BB1xtN0sQ0HkMahbiHX4FKsy4yIg4k1CKgae0V2NbFmSnEPI8+O9fDL6Y5/2p5pwkE72oAyk/fD0ApeKpEJ2+4IpJEkrdciAlrtDuWb0xk1Y+HQgz2GoFPmCUOssv9KAgFAtMQW4mQrgESmLh2usF9C3usOpeOwuG6VwK6pS14KeyaBFHbg6SKNqbkhyKsKGlkNBvSLCfxMTMsyMaVABGXt8J25ICmzXfLE24Qn3ECgYEA4eFOq4Igtbc8SDaIZZOlJVTYk+W6Ug1ZSZKfoCmVtbzH904DTmY9nOjP6tAUCCAelQH7YnxzQr/n+hMN6tMKW6e6bR3G13XK97znATKBlfQkjix5dvBTdlV384zo+jhU3clgxvgaNfMaxovoDH3bDeDRUC4dGgQ9J19gTnvAuYUCgYEAl7srPPjINeYUf7O14CcfDqPa6oR19IVPvrdwyi8lHEIvSHppDj651dOxjvnP0zm2VXtrzIk65NkcjXxqWPlEuEc9Ka6fX0hARU0mqd34E8ccvbf3wuggPyCZjRNbDcTMqDCwOjJwwtP/a6x0zZ2JdAmb9IoNjvrRvmnpKzPw4Y8CgYEAzNatqQsQ7rmEiVgqyTLjiL8wyK6EEPTaC8ZTy8LqaS0RikvM48QEC890/dRE1jmKgkaR2fZR8C5oCHhPHqzTr9qjTWC7eZjwv0knlAZhTcNhgy0B2cKHbcCETvFyNbfv/lEo2kcUPeiAV514iht4E1XVe4jWC0ncy1/KzmGbnKECgYAoHiTgiiblmV/yI+IC0lUz2b8YIs3NSTI8iuQXkT+OqTE3SKZeTdd04fQgiYyZnLjJAUkPW3lm6MDT6AF2ZPH2h190lectmjzkFfITF81v7UV8JBguQJHGHyh6VJPOoCo8jiMKQCvwV31BSufXNcASHjhN//J1y3uJjRdJhQI7oQKBgCLLXLL5xm5EkXpjLCgLZWBuSgkNbHWPNxR1agHtsL0+nhNu7MPbwQceajCFmrijuvqUKmKgeNJotZw0g0UooewqT7osKfqkmtGgS7+HbZ4WFFNkSMk1oMsRJeT0jTticOp0JbhnMF4vACW5IZWjEDUheONv1dIa4YFYPM6gdFCR\",\n-        \"saml_name_id_format\": \"persistent\",\n-        \"saml.onetimeuse.condition\": \"false\",\n-        \"saml_signature_canonicalization_method\": \"http://www.w3.org/2001/10/xml-exc-c14n#\"\n-    },\n-    \"authenticationFlowBindingOverrides\": {},\n-    \"fullScopeAllowed\": true,\n-    \"nodeReRegistrationTimeout\": -1,\n-    \"protocolMappers\": [\n-        {\n-            \"name\": \"X500 email\",\n-            \"protocol\": \"saml\",\n-            \"protocolMapper\": \"saml-user-property-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"attribute.nameformat\": \"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\",\n-                \"user.attribute\": \"email\",\n-                \"friendly.name\": \"email\",\n-                \"attribute.name\": \"urn:oid:1.2.840.113549.1.9.1\"\n-            }\n-        },\n-        {\n-            \"name\": \"X500 givenName\",\n-            \"protocol\": \"saml\",\n-            \"protocolMapper\": \"saml-user-property-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"attribute.nameformat\": \"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\",\n-                \"user.attribute\": \"firstName\",\n-                \"friendly.name\": \"givenName\",\n-                \"attribute.name\": \"urn:oid:2.5.4.42\"\n-            }\n-        },\n-        {\n-            \"name\": \"fullName\",\n-            \"protocol\": \"saml\",\n-            \"protocolMapper\": \"saml-user-attribute-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"attribute.nameformat\": \"Basic\",\n-                \"user.attribute\": \"fullName\",\n-                \"friendly.name\": \"fullName\",\n-                \"attribute.name\": \"fullName\"\n-            }\n-        },\n-        {\n-            \"name\": \"X500 surname\",\n-            \"protocol\": \"saml\",\n-            \"protocolMapper\": \"saml-user-property-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"attribute.nameformat\": \"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\",\n-                \"user.attribute\": \"lastName\",\n-                \"friendly.name\": \"surname\",\n-                \"attribute.name\": \"urn:oid:2.5.4.4\"\n-            }\n-        },\n-        {\n-            \"name\": \"username\",\n-            \"protocol\": \"saml\",\n-            \"protocolMapper\": \"saml-user-property-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"attribute.nameformat\": \"Basic\",\n-                \"user.attribute\": \"username\",\n-                \"friendly.name\": \"username\",\n-                \"attribute.name\": \"username\"\n-            }\n-        }\n-    ],\n-    \"defaultClientScopes\": [\n-        \"web-origins\",\n-        \"role_list\",\n-        \"profile\",\n-        \"roles\",\n-        \"email\"\n-    ],\n-    \"optionalClientScopes\": [\n-        \"address\",\n-        \"phone\",\n-        \"offline_access\",\n-        \"microprofile-jwt\"\n-    ],\n-    \"access\": {\n-        \"view\": true,\n-        \"configure\": true,\n-        \"manage\": true\n-    }\n-}"},{"sha":"eec025d57f2cf215e6845119a5759195b5dff1f7","filename":"fit/enduser-reference/src/test/resources/sso/saml2syncope-enduser.json","status":"removed","additions":0,"deletions":131,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Fsaml2syncope-enduser.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccf47121c6e74e2700abb39fb5dd512dc4d1711/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Fsaml2syncope-enduser.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fsso%2Fsaml2syncope-enduser.json?ref=bccf47121c6e74e2700abb39fb5dd512dc4d1711","patch":"@@ -1,131 +0,0 @@\n-{\n-    \"clientId\": \"http://localhost:9080/syncope-enduser/\",\n-    \"name\": \"SAML Test\",\n-    \"adminUrl\": \"http://localhost:8080/auth/realms/master\",\n-    \"surrogateAuthRequired\": false,\n-    \"enabled\": true,\n-    \"clientAuthenticatorType\": \"client-secret\",\n-    \"redirectUris\": [\n-        \"http://localhost:9080/*\"\n-    ],\n-    \"webOrigins\": [\n-        \"http://localhost:9080\"\n-    ],\n-    \"notBefore\": 0,\n-    \"bearerOnly\": false,\n-    \"consentRequired\": false,\n-    \"standardFlowEnabled\": true,\n-    \"implicitFlowEnabled\": false,\n-    \"directAccessGrantsEnabled\": false,\n-    \"serviceAccountsEnabled\": false,\n-    \"publicClient\": false,\n-    \"frontchannelLogout\": true,\n-    \"protocol\": \"saml\",\n-    \"attributes\": {\n-        \"saml.assertion.signature\": \"true\",\n-        \"saml_assertion_consumer_url_redirect\": \"http://localhost:9080/syncope-enduser/saml2sp/assertion-consumer\",\n-        \"saml.force.post.binding\": \"true\",\n-        \"saml.multivalued.roles\": \"false\",\n-        \"saml_single_logout_service_url_post\": \"http://localhost:9080/syncope-enduser/saml2sp/logout\",\n-        \"saml.encrypt\": \"false\",\n-        \"saml_assertion_consumer_url_post\": \"http://localhost:9080/syncope-enduser/saml2sp/assertion-consumer\",\n-        \"saml.server.signature\": \"true\",\n-        \"saml.server.signature.keyinfo.ext\": \"false\",\n-        \"exclude.session.state.from.auth.response\": \"false\",\n-        \"saml.signing.certificate\": \"MIIC9TCCAd0CBgFrCC7kezANBgkqhkiG9w0BAQsFADA+MTwwOgYDVQQDDDNodHRwOi8vc3luY29wZS1zYW1sMi10ZXN0LWNvbTo5MDgwL3N5bmNvcGUtZW5kdXNlci8wHhcNMTkwNTMwMDk1ODM5WhcNMjkwNTMwMTAwMDE5WjA+MTwwOgYDVQQDDDNodHRwOi8vc3luY29wZS1zYW1sMi10ZXN0LWNvbTo5MDgwL3N5bmNvcGUtZW5kdXNlci8wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCF4QsiRZGD7BNx0Bglh4rgtACaIr7R/nDQfdGLN9uSA2HkEPygJzBRyluQLiQv9o/LKQMwvmia5fK4Xt99cgJnmrzKXraKo1KsZNz8vpygMpGJzCA2XUMLe065lYg28PV2bjk6hyUcMehlubjKFQ6USAJG5dbrrSz7iS2jHQZcxCZAdPPFpaUZpcJPNXU8n9s+peQvPeiYRu9QUEB/qe/onvQ/WJUXxErx2PHmtG9yeIQKoacSvrD6rSHwCgwxJgo+tW12S4bRXj4Nwm2h9969PrQO8L8egCkF5RLSe0gBaWqan9HYIQ6B/TzgsGrUPIGw7ZA4WW7GgL3tZpXvZYZLAgMBAAEwDQYJKoZIhvcNAQELBQADggEBADo0tTfrgTJ1+p/lAtlmxqIA18Ud1QAqzOCS9yQ2VwbMtiRR6wz92dm1wPAUbTjiZZ9e2zGiBPfLeAlPNlZ+Q2HLJV6lrgNQRFUFgL2cM7ihuYPoQYgPiaH2ciT9Zh+5Wwzb/+h1IgH3qCEiMyE8LVrd/M+HCtDTS+OwdEnLL0CmCZ5l3aEz9XBWa5Nu0Rz3I+R2U4cPM4kn+40Ebjt1Dyf0FvQVUL9goXFpsATxBtSPGmewVJ+AGpKlse4HoNyRtFkdhYPed3QckKJO+NbluE5wsgJOdZD/7J4BDr5CIoe26nlnLBqvJA3m/lxVA39zqh2J1LDzuEeH4F9bBtbCUmY=\",\n-        \"saml_single_logout_service_url_redirect\": \"http://localhost:9080/syncope-enduser/saml2sp/logout\",\n-        \"saml.signature.algorithm\": \"RSA_SHA256\",\n-        \"saml_force_name_id_format\": \"false\",\n-        \"saml.client.signature\": \"false\",\n-        \"tls.client.certificate.bound.access.tokens\": \"false\",\n-        \"saml.authnstatement\": \"true\",\n-        \"display.on.consent.screen\": \"false\",\n-        \"saml.signing.private.key\": \"MIIEowIBAAKCAQEAheELIkWRg+wTcdAYJYeK4LQAmiK+0f5w0H3RizfbkgNh5BD8oCcwUcpbkC4kL/aPyykDML5omuXyuF7ffXICZ5q8yl62iqNSrGTc/L6coDKRicwgNl1DC3tOuZWINvD1dm45OoclHDHoZbm4yhUOlEgCRuXW660s+4ktox0GXMQmQHTzxaWlGaXCTzV1PJ/bPqXkLz3omEbvUFBAf6nv6J70P1iVF8RK8djx5rRvcniECqGnEr6w+q0h8AoMMSYKPrVtdkuG0V4+DcJtoffevT60DvC/HoApBeUS0ntIAWlqmp/R2CEOgf084LBq1DyBsO2QOFluxoC97WaV72WGSwIDAQABAoIBABXnJY0r2Iy+uMesBedN75inmlmdSZ7Ng+N4Uin2r4OJ7iAD73C8OJmJA8Xo5p66NfhE83KsFC0TZcxoKSQ63M3acPyi1jaEVehCcC0hejpzS4BB1xtN0sQ0HkMahbiHX4FKsy4yIg4k1CKgae0V2NbFmSnEPI8+O9fDL6Y5/2p5pwkE72oAyk/fD0ApeKpEJ2+4IpJEkrdciAlrtDuWb0xk1Y+HQgz2GoFPmCUOssv9KAgFAtMQW4mQrgESmLh2usF9C3usOpeOwuG6VwK6pS14KeyaBFHbg6SKNqbkhyKsKGlkNBvSLCfxMTMsyMaVABGXt8J25ICmzXfLE24Qn3ECgYEA4eFOq4Igtbc8SDaIZZOlJVTYk+W6Ug1ZSZKfoCmVtbzH904DTmY9nOjP6tAUCCAelQH7YnxzQr/n+hMN6tMKW6e6bR3G13XK97znATKBlfQkjix5dvBTdlV384zo+jhU3clgxvgaNfMaxovoDH3bDeDRUC4dGgQ9J19gTnvAuYUCgYEAl7srPPjINeYUf7O14CcfDqPa6oR19IVPvrdwyi8lHEIvSHppDj651dOxjvnP0zm2VXtrzIk65NkcjXxqWPlEuEc9Ka6fX0hARU0mqd34E8ccvbf3wuggPyCZjRNbDcTMqDCwOjJwwtP/a6x0zZ2JdAmb9IoNjvrRvmnpKzPw4Y8CgYEAzNatqQsQ7rmEiVgqyTLjiL8wyK6EEPTaC8ZTy8LqaS0RikvM48QEC890/dRE1jmKgkaR2fZR8C5oCHhPHqzTr9qjTWC7eZjwv0knlAZhTcNhgy0B2cKHbcCETvFyNbfv/lEo2kcUPeiAV514iht4E1XVe4jWC0ncy1/KzmGbnKECgYAoHiTgiiblmV/yI+IC0lUz2b8YIs3NSTI8iuQXkT+OqTE3SKZeTdd04fQgiYyZnLjJAUkPW3lm6MDT6AF2ZPH2h190lectmjzkFfITF81v7UV8JBguQJHGHyh6VJPOoCo8jiMKQCvwV31BSufXNcASHjhN//J1y3uJjRdJhQI7oQKBgCLLXLL5xm5EkXpjLCgLZWBuSgkNbHWPNxR1agHtsL0+nhNu7MPbwQceajCFmrijuvqUKmKgeNJotZw0g0UooewqT7osKfqkmtGgS7+HbZ4WFFNkSMk1oMsRJeT0jTticOp0JbhnMF4vACW5IZWjEDUheONv1dIa4YFYPM6gdFCR\",\n-        \"saml_name_id_format\": \"persistent\",\n-        \"saml.onetimeuse.condition\": \"false\",\n-        \"saml_signature_canonicalization_method\": \"http://www.w3.org/2001/10/xml-exc-c14n#\"\n-    },\n-    \"authenticationFlowBindingOverrides\": {},\n-    \"fullScopeAllowed\": true,\n-    \"nodeReRegistrationTimeout\": -1,\n-    \"protocolMappers\": [\n-        {\n-            \"name\": \"X500 email\",\n-            \"protocol\": \"saml\",\n-            \"protocolMapper\": \"saml-user-property-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"attribute.nameformat\": \"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\",\n-                \"user.attribute\": \"email\",\n-                \"friendly.name\": \"email\",\n-                \"attribute.name\": \"urn:oid:1.2.840.113549.1.9.1\"\n-            }\n-        },\n-        {\n-            \"name\": \"X500 givenName\",\n-            \"protocol\": \"saml\",\n-            \"protocolMapper\": \"saml-user-property-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"attribute.nameformat\": \"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\",\n-                \"user.attribute\": \"firstName\",\n-                \"friendly.name\": \"givenName\",\n-                \"attribute.name\": \"urn:oid:2.5.4.42\"\n-            }\n-        },\n-        {\n-            \"name\": \"fullName\",\n-            \"protocol\": \"saml\",\n-            \"protocolMapper\": \"saml-user-attribute-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"attribute.nameformat\": \"Basic\",\n-                \"user.attribute\": \"fullName\",\n-                \"friendly.name\": \"fullName\",\n-                \"attribute.name\": \"fullName\"\n-            }\n-        },\n-        {\n-            \"name\": \"X500 surname\",\n-            \"protocol\": \"saml\",\n-            \"protocolMapper\": \"saml-user-property-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"attribute.nameformat\": \"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\",\n-                \"user.attribute\": \"lastName\",\n-                \"friendly.name\": \"surname\",\n-                \"attribute.name\": \"urn:oid:2.5.4.4\"\n-            }\n-        },\n-        {\n-            \"name\": \"username\",\n-            \"protocol\": \"saml\",\n-            \"protocolMapper\": \"saml-user-property-mapper\",\n-            \"consentRequired\": false,\n-            \"config\": {\n-                \"attribute.nameformat\": \"Basic\",\n-                \"user.attribute\": \"username\",\n-                \"friendly.name\": \"username\",\n-                \"attribute.name\": \"username\"\n-            }\n-        }\n-    ],\n-    \"defaultClientScopes\": [\n-        \"web-origins\",\n-        \"role_list\",\n-        \"profile\",\n-        \"roles\",\n-        \"email\"\n-    ],\n-    \"optionalClientScopes\": [\n-        \"address\",\n-        \"phone\",\n-        \"offline_access\",\n-        \"microprofile-jwt\"\n-    ],\n-    \"access\": {\n-        \"view\": true,\n-        \"configure\": true,\n-        \"manage\": true\n-    }\n-}\n\\ No newline at end of file"},{"sha":"456d00669611273c157666100a0fa7d370c35098","filename":"fit/wa-reference/pom.xml","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -53,6 +53,18 @@ under the License.\n     </dependency>\n \n     <!-- TEST -->\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+      <artifactId>syncope-ext-saml2sp4ui-client-enduser</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-client-enduser</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.syncope</groupId>\n       <artifactId>syncope-sra</artifactId>"},{"sha":"4a2d11f95c0a4519ccd2775c0a2af06ca5c59717","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"added","additions":200,"deletions":0,"changes":200,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,200 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.http.Consts;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.rest.api.service.ClientAppService;\n+import org.apache.syncope.common.rest.api.service.OIDCProviderService;\n+import org.apache.syncope.common.rest.api.service.PolicyService;\n+import org.apache.syncope.common.rest.api.service.SRARouteService;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2IdPMetadataService;\n+import org.apache.syncope.fit.sra.AbstractSRAITCase;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.syncope.common.rest.api.service.SAML2SP4UIIdPService;\n+import org.apache.syncope.common.rest.api.service.UserService;\n+\n+public class AbstractITCase {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractSRAITCase.class);\n+\n+    protected static final String ADMIN_UNAME = \"admin\";\n+\n+    protected static final String ADMIN_PWD = \"password\";\n+\n+    protected static final String CORE_ADDRESS = \"http://localhost:9080/syncope/rest\";\n+\n+    protected static final String CONSOLE_ADDRESS = \"http://localhost:9080/syncope-console/\";\n+\n+    protected static final String ENDUSER_ADDRESS = \"http://localhost:9080/syncope-enduser/\";\n+\n+    protected static final String WA_ADDRESS = \"http://localhost:9080/syncope-wa\";\n+\n+    protected static final String EN_LANGUAGE = \"en-US,en;q=0.5\";\n+\n+    protected static SyncopeClientFactoryBean clientFactory;\n+\n+    protected static SyncopeClient adminClient;\n+\n+    protected static UserService userService;\n+\n+    protected static PolicyService policyService;\n+\n+    protected static ClientAppService clientAppService;\n+\n+    protected static SRARouteService sraRouteService;\n+\n+    protected static SAML2SP4UIIdPService saml2sp4UIIdPService;\n+\n+    protected static OIDCProviderService oidcProviderService;\n+\n+    @BeforeAll\n+    public static void restSetup() {\n+        clientFactory = new SyncopeClientFactoryBean().setAddress(CORE_ADDRESS);\n+        adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+\n+        userService = adminClient.getService(UserService.class);\n+        policyService = adminClient.getService(PolicyService.class);\n+        clientAppService = adminClient.getService(ClientAppService.class);\n+        sraRouteService = adminClient.getService(SRARouteService.class);\n+        saml2sp4UIIdPService = adminClient.getService(SAML2SP4UIIdPService.class);\n+        oidcProviderService = adminClient.getService(OIDCProviderService.class);\n+    }\n+\n+    @BeforeAll\n+    public static void waitForWARefresh() {\n+        WASAML2IdPMetadataService samlIdPMetadataService = adminClient.getService(WASAML2IdPMetadataService.class);\n+\n+        await().atMost(50, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n+            boolean refreshed = false;\n+            try {\n+                samlIdPMetadataService.getByOwner(\"Syncope\");\n+                refreshed = true;\n+            } catch (Exception e) {\n+                // ignore\n+            }\n+            return refreshed;\n+        });\n+    }\n+\n+    protected static Triple<String, String, String> parseSAMLRequestForm(final String responseBody) {\n+        int begin = responseBody.indexOf(\"name=\\\"RelayState\\\" value=\\\"\");\n+        assertNotEquals(-1, begin);\n+        int end = responseBody.indexOf(\"\\\"/>\", begin);\n+        assertNotEquals(-1, end);\n+        String relayState = responseBody.substring(begin + 25, end);\n+        assertNotNull(relayState);\n+\n+        begin = responseBody.indexOf(\"name=\\\"SAMLRequest\\\" value=\\\"\");\n+        assertNotEquals(-1, begin);\n+        end = responseBody.indexOf(\"\\\"/>\", begin);\n+        assertNotEquals(-1, end);\n+        String samlRequest = responseBody.substring(begin + 26, end);\n+        assertNotNull(samlRequest);\n+\n+        begin = responseBody.indexOf(\"<form action=\\\"\");\n+        assertNotEquals(-1, begin);\n+        end = responseBody.indexOf(\"\\\" method=\\\"post\\\">\");\n+        assertNotEquals(-1, end);\n+        String action = StringEscapeUtils.unescapeXml(responseBody.substring(begin + 14, end));\n+        assertNotNull(action);\n+\n+        return Triple.of(action, relayState, samlRequest);\n+    }\n+\n+    protected static Triple<String, String, String> parseSAMLResponseForm(final String responseBody) {\n+        int begin = responseBody.indexOf(\"name=\\\"RelayState\\\" value=\\\"\");\n+        assertNotEquals(-1, begin);\n+        int end = responseBody.indexOf(\"\\\"/>\");\n+        assertNotEquals(-1, end);\n+        String relayState = responseBody.substring(begin + 26, end);\n+        assertNotNull(relayState);\n+\n+        begin = responseBody.indexOf(\"name=\\\"SAMLResponse\\\" value=\\\"\");\n+        assertNotEquals(-1, begin);\n+        end = responseBody.indexOf(\"\\\"/>\", begin);\n+        assertNotEquals(-1, end);\n+        String samlResponse = responseBody.substring(begin + 27, end);\n+        assertNotNull(samlResponse);\n+\n+        begin = responseBody.indexOf(\"<form action=\\\"\");\n+        assertNotEquals(-1, begin);\n+        end = responseBody.indexOf(\"\\\" method=\\\"post\\\">\");\n+        assertNotEquals(-1, end);\n+        String action = StringEscapeUtils.unescapeXml(responseBody.substring(begin + 14, end));\n+        assertNotNull(action);\n+\n+        return Triple.of(action, relayState, samlResponse);\n+    }\n+\n+    protected static String extractCASExecution(final String responseBody) {\n+        int begin = responseBody.indexOf(\"name=\\\"execution\\\" value=\\\"\");\n+        assertNotEquals(-1, begin);\n+        int end = responseBody.indexOf(\"\\\"/><input type=\\\"hidden\\\" name=\\\"_eventId\\\"\");\n+        assertNotEquals(-1, end);\n+\n+        String execution = responseBody.substring(begin + 24, end);\n+        assertNotNull(execution);\n+        return execution;\n+    }\n+\n+    protected static CloseableHttpResponse authenticateToCas(\n+            final String username,\n+            final String password,\n+            final String responseBody,\n+            final CloseableHttpClient httpclient,\n+            final HttpClientContext context)\n+            throws IOException {\n+\n+        List<NameValuePair> form = new ArrayList<>();\n+        form.add(new BasicNameValuePair(\"_eventId\", \"submit\"));\n+        form.add(new BasicNameValuePair(\"execution\", extractCASExecution(responseBody)));\n+        form.add(new BasicNameValuePair(\"username\", username));\n+        form.add(new BasicNameValuePair(\"password\", password));\n+        form.add(new BasicNameValuePair(\"geolocation\", \"\"));\n+\n+        HttpPost post = new HttpPost(WA_ADDRESS + \"/login\");\n+        post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        post.setEntity(new UrlEncodedFormEntity(form, Consts.UTF_8));\n+        return httpclient.execute(post, context);\n+    }\n+}"},{"sha":"25fbea508462e82ebd787b011af8945138385770","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/AbstractSRAITCase.java","status":"renamed","additions":15,"deletions":107,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractSRAITCase.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -21,7 +21,6 @@\n import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.fail;\n \n@@ -35,8 +34,6 @@\n import java.net.InetSocketAddress;\n import java.net.Socket;\n import java.net.URI;\n-import java.util.ArrayList;\n-import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n import java.util.concurrent.TimeUnit;\n@@ -46,18 +43,9 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n-import org.apache.http.Consts;\n import org.apache.http.HttpStatus;\n-import org.apache.http.NameValuePair;\n-import org.apache.http.client.entity.UrlEncodedFormEntity;\n import org.apache.http.client.methods.CloseableHttpResponse;\n-import org.apache.http.client.methods.HttpPost;\n-import org.apache.http.client.protocol.HttpClientContext;\n-import org.apache.http.impl.client.CloseableHttpClient;\n-import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.util.EntityUtils;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n import org.apache.syncope.common.lib.to.SRARouteTO;\n@@ -68,78 +56,25 @@\n import org.apache.syncope.common.lib.types.SRARoutePredicateFactory;\n import org.apache.syncope.common.lib.types.SRARouteType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.ClientAppService;\n-import org.apache.syncope.common.rest.api.service.PolicyService;\n-import org.apache.syncope.common.rest.api.service.SRARouteService;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2IdPMetadataService;\n+import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.BeforeAll;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n-public abstract class AbstractITCase {\n-\n-    protected static final Logger LOG = LoggerFactory.getLogger(AbstractITCase.class);\n+public abstract class AbstractSRAITCase extends AbstractITCase {\n \n     protected static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n \n-    protected static final String EN_LANGUAGE = \"en-US,en;q=0.5\";\n-\n     protected static final int PORT = 8080;\n \n-    protected static final String ADMIN_UNAME = \"admin\";\n-\n-    protected static final String ADMIN_PWD = \"password\";\n-\n-    protected static final String CORE_ADDRESS = \"http://localhost:9080/syncope/rest\";\n-\n-    protected static final String WA_ADDRESS = \"http://localhost:9080/syncope-wa\";\n-\n     protected static final String SRA_ADDRESS = \"http://localhost:\" + PORT;\n \n     protected static final String QUERY_STRING =\n             \"key1=value1&key2=value2&key2=value3&key3=an%20url%20encoded%20value%3A%20this%21\";\n \n     protected static final String LOGGED_OUT_HEADER = \"X-LOGGED-OUT\";\n \n-    protected static SyncopeClientFactoryBean clientFactory;\n-\n-    protected static SyncopeClient adminClient;\n-\n-    protected static PolicyService policyService;\n-\n-    protected static ClientAppService clientAppService;\n-\n-    protected static SRARouteService sraRouteService;\n-\n     private static Process SRA;\n \n-    @BeforeAll\n-    public static void restSetup() {\n-        clientFactory = new SyncopeClientFactoryBean().setAddress(CORE_ADDRESS);\n-        adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n-\n-        policyService = adminClient.getService(PolicyService.class);\n-        clientAppService = adminClient.getService(ClientAppService.class);\n-        sraRouteService = adminClient.getService(SRARouteService.class);\n-    }\n-\n-    @BeforeAll\n-    public static void waitForWARefresh() {\n-        WASAML2IdPMetadataService samlIdPMetadataService = adminClient.getService(WASAML2IdPMetadataService.class);\n-\n-        await().atMost(50, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n-            boolean refreshed = false;\n-            try {\n-                samlIdPMetadataService.getByOwner(\"Syncope\");\n-                refreshed = true;\n-            } catch (Exception e) {\n-                // ignore\n-            }\n-            return refreshed;\n-        });\n-    }\n-\n     @BeforeAll\n     public static void sraRouteSetup() {\n         sraRouteService.list().forEach(route -> sraRouteService.delete(route.getKey()));\n@@ -210,7 +145,7 @@ protected static void doStartSRA(final String activeProfile)\n             throws IOException, InterruptedException, TimeoutException {\n \n         Properties props = new Properties();\n-        try (InputStream propStream = AbstractITCase.class.getResourceAsStream(\"/test.properties\")) {\n+        try (InputStream propStream = AbstractSRAITCase.class.getResourceAsStream(\"/test.properties\")) {\n             props.load(propStream);\n         } catch (Exception e) {\n             fail(\"Could not load /test.properties\", e);\n@@ -258,20 +193,30 @@ protected static void doStartSRA(final String activeProfile)\n         sraRouteService.pushToSRA();\n     }\n \n+    @AfterAll\n+    public static void stopSRA() throws InterruptedException {\n+        if (SRA != null) {\n+            SRA.destroy();\n+            SRA.waitFor();\n+        }\n+    }\n+\n     protected static AuthPolicyTO getAuthPolicy() {\n         String authModule = \"DefaultSyncopeAuthModule\";\n+        String description = \"SRA auth policy\";\n \n         return policyService.list(PolicyType.AUTH).stream().\n                 map(AuthPolicyTO.class::cast).\n-                filter(policy -> policy.getConf() instanceof DefaultAuthPolicyConf\n+                filter(policy -> description.equals(policy.getDescription())\n+                && policy.getConf() instanceof DefaultAuthPolicyConf\n                 && ((DefaultAuthPolicyConf) policy.getConf()).getAuthModules().contains(authModule)).\n                 findFirst().\n                 orElseGet(() -> {\n                     DefaultAuthPolicyConf policyConf = new DefaultAuthPolicyConf();\n                     policyConf.getAuthModules().add(authModule);\n \n                     AuthPolicyTO policy = new AuthPolicyTO();\n-                    policy.setDescription(\"Syncope authentication\");\n+                    policy.setDescription(\"SRA auth policy\");\n                     policy.setConf(policyConf);\n \n                     Response response = policyService.create(PolicyType.AUTH, policy);\n@@ -283,43 +228,6 @@ protected static AuthPolicyTO getAuthPolicy() {\n                 });\n     }\n \n-    @AfterAll\n-    public static void stopSRA() throws InterruptedException {\n-        if (SRA != null) {\n-            SRA.destroy();\n-            SRA.waitFor();\n-        }\n-    }\n-\n-    protected static String extractCASExecution(final String responseBody) {\n-        int begin = responseBody.indexOf(\"name=\\\"execution\\\" value=\\\"\");\n-        assertNotEquals(-1, begin);\n-        int end = responseBody.indexOf(\"\\\"/><input type=\\\"hidden\\\" name=\\\"_eventId\\\"\");\n-        assertNotEquals(-1, end);\n-\n-        String execution = responseBody.substring(begin + 24, end);\n-        assertNotNull(execution);\n-        return execution;\n-    }\n-\n-    protected static CloseableHttpResponse authenticateToCas(\n-            final String responseBody, final CloseableHttpClient httpclient, final HttpClientContext context)\n-            throws IOException {\n-\n-        List<NameValuePair> form = new ArrayList<>();\n-        form.add(new BasicNameValuePair(\"_eventId\", \"submit\"));\n-        form.add(new BasicNameValuePair(\"execution\", extractCASExecution(responseBody)));\n-        form.add(new BasicNameValuePair(\"username\", \"bellini\"));\n-        form.add(new BasicNameValuePair(\"password\", \"password\"));\n-        form.add(new BasicNameValuePair(\"geolocation\", \"\"));\n-\n-        HttpPost post = new HttpPost(WA_ADDRESS + \"/login\");\n-        post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n-        post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n-        post.setEntity(new UrlEncodedFormEntity(form, Consts.UTF_8));\n-        return httpclient.execute(post, context);\n-    }\n-\n     protected static ObjectNode checkGetResponse(\n             final CloseableHttpResponse response, final String originalRequestURI) throws IOException {\n ","previous_filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/AbstractITCase.java"},{"sha":"e968e06101097ef34a90e4dd37dd5e9f4c1f5e54","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/CASSRAITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FCASSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FCASSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FCASSRAITCase.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -51,7 +51,7 @@\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n \n-public class CASSRAITCase extends AbstractITCase {\n+public class CASSRAITCase extends AbstractSRAITCase {\n \n     @BeforeAll\n     public static void startSRA() throws IOException, InterruptedException, TimeoutException {\n@@ -113,7 +113,7 @@ public void web() throws IOException {\n \n         // 2a. authenticate\n         String responseBody = EntityUtils.toString(response.getEntity());\n-        response = authenticateToCas(responseBody, httpclient, context);\n+        response = authenticateToCas(\"bellini\", \"password\", responseBody, httpclient, context);\n \n         // 2b. WA attribute consent screen\n         if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {"},{"sha":"d170205fe8151e5ca7ad34232a346116d7cf790d","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/OIDCSRAITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -64,7 +64,7 @@\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n \n-public class OIDCSRAITCase extends AbstractITCase {\n+public class OIDCSRAITCase extends AbstractSRAITCase {\n \n     protected static String CLIENT_ID;\n \n@@ -162,7 +162,7 @@ public void web() throws IOException {\n \n         // 2a. redirected to WA login screen\n         String responseBody = EntityUtils.toString(response.getEntity());\n-        response = authenticateToCas(responseBody, httpclient, context);\n+        response = authenticateToCas(\"bellini\", \"password\", responseBody, httpclient, context);\n \n         // 2b. WA attribute consent screen\n         if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {"},{"sha":"ba105a9e6a14bcd8bb5960dc8f056497a1d6429c","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/SAML2SRAITCase.java","status":"modified","additions":4,"deletions":57,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -20,8 +20,6 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n@@ -35,7 +33,6 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Triple;\n-import org.apache.commons.text.StringEscapeUtils;\n import org.apache.http.Consts;\n import org.apache.http.HttpStatus;\n import org.apache.http.NameValuePair;\n@@ -56,7 +53,7 @@\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n \n-public class SAML2SRAITCase extends AbstractITCase {\n+public class SAML2SRAITCase extends AbstractSRAITCase {\n \n     @BeforeAll\n     public static void startSRA() throws IOException, InterruptedException, TimeoutException {\n@@ -76,8 +73,8 @@ public static void clientAppSetup() {\n                     SAML2SPTO app = new SAML2SPTO();\n                     app.setName(appName);\n                     app.setClientAppId(3L);\n-                    app.setEntityId(\"http://localhost:8080\");\n-                    app.setMetadataLocation(\"http://localhost:8080/saml2/metadata\");\n+                    app.setEntityId(SRA_ADDRESS);\n+                    app.setMetadataLocation(SRA_ADDRESS + \"/saml2/metadata\");\n \n                     Response response = clientAppService.create(ClientAppType.SAML2SP, app);\n                     if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n@@ -97,56 +94,6 @@ public static void clientAppSetup() {\n         clientAppService.pushToWA();\n     }\n \n-    private Triple<String, String, String> parseSAMLRequestForm(final String responseBody) {\n-        int begin = responseBody.indexOf(\"name=\\\"RelayState\\\" value=\\\"\");\n-        assertNotEquals(-1, begin);\n-        int end = responseBody.indexOf(\"\\\"/>\", begin);\n-        assertNotEquals(-1, end);\n-        String relayState = responseBody.substring(begin + 25, end);\n-        assertNotNull(relayState);\n-\n-        begin = responseBody.indexOf(\"name=\\\"SAMLRequest\\\" value=\\\"\");\n-        assertNotEquals(-1, begin);\n-        end = responseBody.indexOf(\"\\\"/>\", begin);\n-        assertNotEquals(-1, end);\n-        String samlRequest = responseBody.substring(begin + 26, end);\n-        assertNotNull(samlRequest);\n-\n-        begin = responseBody.indexOf(\"<form action=\\\"\");\n-        assertNotEquals(-1, begin);\n-        end = responseBody.indexOf(\"\\\" method=\\\"post\\\">\");\n-        assertNotEquals(-1, end);\n-        String action = StringEscapeUtils.unescapeXml(responseBody.substring(begin + 14, end));\n-        assertNotNull(action);\n-\n-        return Triple.of(action, relayState, samlRequest);\n-    }\n-\n-    private Triple<String, String, String> parseSAMLResponseForm(final String responseBody) {\n-        int begin = responseBody.indexOf(\"name=\\\"RelayState\\\" value=\\\"\");\n-        assertNotEquals(-1, begin);\n-        int end = responseBody.indexOf(\"\\\"/>\");\n-        assertNotEquals(-1, end);\n-        String relayState = responseBody.substring(begin + 26, end);\n-        assertNotNull(relayState);\n-\n-        begin = responseBody.indexOf(\"name=\\\"SAMLResponse\\\" value=\\\"\");\n-        assertNotEquals(-1, begin);\n-        end = responseBody.indexOf(\"\\\"/>\", begin);\n-        assertNotEquals(-1, end);\n-        String samlResponse = responseBody.substring(begin + 27, end);\n-        assertNotNull(samlResponse);\n-\n-        begin = responseBody.indexOf(\"<form action=\\\"\");\n-        assertNotEquals(-1, begin);\n-        end = responseBody.indexOf(\"\\\" method=\\\"post\\\">\");\n-        assertNotEquals(-1, end);\n-        String action = StringEscapeUtils.unescapeXml(responseBody.substring(begin + 14, end));\n-        assertNotNull(action);\n-\n-        return Triple.of(action, relayState, samlResponse);\n-    }\n-\n     @Test\n     public void web() throws IOException {\n         CloseableHttpClient httpclient = HttpClients.createDefault();\n@@ -191,7 +138,7 @@ public void web() throws IOException {\n         assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n \n         responseBody = EntityUtils.toString(response.getEntity());\n-        response = authenticateToCas(responseBody, httpclient, context);\n+        response = authenticateToCas(\"bellini\", \"password\", responseBody, httpclient, context);\n \n         // 2c. WA attribute consent screen\n         if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {"},{"sha":"67539e17a5b4356a68530ee66e8df722c5e92ff7","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/AbstractUIITCase.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FAbstractUIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FAbstractUIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FAbstractUIITCase.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.ui;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n+import org.apache.syncope.common.lib.to.SAML24UIIdPTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+\n+public abstract class AbstractUIITCase extends AbstractITCase {\n+\n+    protected static AuthPolicyTO getAuthPolicy() {\n+        String syncopeAuthModule = \"DefaultSyncopeAuthModule\";\n+        String ldapAuthModule = \"DefaultLDAPAuthModule\";\n+        String description = \"UI auth policy\";\n+\n+        return policyService.list(PolicyType.AUTH).stream().\n+                map(AuthPolicyTO.class::cast).\n+                filter(policy -> description.equals(policy.getDescription())\n+                && policy.getConf() instanceof DefaultAuthPolicyConf\n+                && ((DefaultAuthPolicyConf) policy.getConf()).getAuthModules().contains(syncopeAuthModule)\n+                && ((DefaultAuthPolicyConf) policy.getConf()).getAuthModules().contains(ldapAuthModule)).\n+                findFirst().\n+                orElseGet(() -> {\n+                    DefaultAuthPolicyConf policyConf = new DefaultAuthPolicyConf();\n+                    policyConf.getAuthModules().add(syncopeAuthModule);\n+                    policyConf.getAuthModules().add(ldapAuthModule);\n+\n+                    AuthPolicyTO policy = new AuthPolicyTO();\n+                    policy.setDescription(\"Test authentication\");\n+                    policy.setConf(policyConf);\n+\n+                    Response response = policyService.create(PolicyType.AUTH, policy);\n+                    if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                        fail(\"Could not create Test Auth Policy\");\n+                    }\n+\n+                    return policyService.read(PolicyType.AUTH, response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                });\n+    }\n+\n+    protected abstract void sso(String baseURL, String username, String password) throws IOException;\n+\n+    @Test\n+    public void sso2Console() throws IOException {\n+        sso(CONSOLE_ADDRESS, \"bellini\", \"password\");\n+    }\n+\n+    @Test\n+    public void sso2Enduser() throws IOException {\n+        sso(ENDUSER_ADDRESS, \"bellini\", \"password\");\n+    }\n+\n+    @Test\n+    public void createUnmatching() throws IOException {\n+        try {\n+            userService.delete(\"pullFromLDAP\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+\n+        sso(CONSOLE_ADDRESS, \"pullFromLDAP\", \"Password123\");\n+\n+        assertNotNull(userService.read(\"pullFromLDAP\"));\n+    }\n+\n+    @Test\n+    public void selfRegUnmatching() throws IOException {\n+        try {\n+            userService.delete(\"pullFromLDAP\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+\n+        List<SAML24UIIdPTO> idps = saml2sp4UIIdPService.list();\n+        assertEquals(1, idps.size());\n+\n+        SAML24UIIdPTO cas = idps.get(0);\n+        cas.setCreateUnmatching(false);\n+        cas.setSelfRegUnmatching(true);\n+        saml2sp4UIIdPService.update(cas);\n+\n+        try {\n+            sso(ENDUSER_ADDRESS, \"pullFromLDAP\", \"Password123\");\n+        } finally {\n+            cas.setCreateUnmatching(true);\n+            cas.setSelfRegUnmatching(false);\n+            saml2sp4UIIdPService.update(cas);\n+        }\n+\n+        try {\n+            userService.read(\"pullFromLDAP\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+}"},{"sha":"ac570951fb05bf5f660bb0d3729da50d2fe6c89f","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/OIDC4UIITCase.java","status":"added","additions":260,"deletions":0,"changes":260,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.ui;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.http.Consts;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.OIDCProviderTO;\n+import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.OIDCSubjectType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.ext.oidcclient.agent.Constants;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+public class OIDC4UIITCase extends AbstractUIITCase {\n+\n+    private static final String CLIENT_ID = OIDC4UIITCase.class.getSimpleName();\n+\n+    private static final String CLIENT_SECRET = OIDC4UIITCase.class.getSimpleName();\n+\n+    private static void clientAppSetup(final String appName, final String baseAddress, final long appId) {\n+        OIDCRPTO clientApp = clientAppService.list(ClientAppType.OIDCRP).stream().\n+                filter(app -> appName.equals(app.getName())).\n+                map(OIDCRPTO.class::cast).\n+                findFirst().\n+                orElseGet(() -> {\n+                    OIDCRPTO app = new OIDCRPTO();\n+                    app.setName(appName);\n+                    app.setClientAppId(appId);\n+                    app.setClientId(CLIENT_ID);\n+                    app.setClientSecret(CLIENT_SECRET);\n+\n+                    Response response = clientAppService.create(ClientAppType.OIDCRP, app);\n+                    if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                        fail(\"Could not create OIDC Client App\");\n+                    }\n+\n+                    return clientAppService.read(\n+                            ClientAppType.OIDCRP, response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                });\n+\n+        clientApp.setClientId(CLIENT_ID);\n+        clientApp.setClientSecret(CLIENT_SECRET);\n+        clientApp.setSubjectType(OIDCSubjectType.PUBLIC);\n+        clientApp.getRedirectUris().add(baseAddress + Constants.URL_CONTEXT + \"/code-consumer\");\n+        clientApp.setAuthPolicy(getAuthPolicy().getKey());\n+        clientApp.setSignIdToken(true);\n+        clientApp.setLogoutUri(baseAddress + Constants.URL_CONTEXT + \"/logout\");\n+\n+        clientAppService.update(ClientAppType.OIDCRP, clientApp);\n+        clientAppService.pushToWA();\n+    }\n+\n+    @BeforeAll\n+    public static void consoleClientAppSetup() {\n+        clientAppSetup(OIDC4UIITCase.class.getName() + \"_Console\", CONSOLE_ADDRESS, 7L);\n+    }\n+\n+    @BeforeAll\n+    public static void enduserClientAppSetup() {\n+        clientAppSetup(OIDC4UIITCase.class.getName() + \"_Enduser\", ENDUSER_ADDRESS, 8L);\n+    }\n+\n+    @BeforeAll\n+    public static void oidcSetup() {\n+        List<OIDCProviderTO> ops = oidcProviderService.list();\n+        if (ops.isEmpty()) {\n+            OIDCProviderTO cas = new OIDCProviderTO();\n+            cas.setName(\"CAS\");\n+\n+            cas.setClientID(CLIENT_ID);\n+            cas.setClientSecret(CLIENT_SECRET);\n+\n+            cas.setIssuer(WA_ADDRESS + \"/oidc/\");\n+            cas.setAuthorizationEndpoint(WA_ADDRESS + \"/oidc/authorize\");\n+            cas.setTokenEndpoint(WA_ADDRESS + \"/oidc/accessToken\");\n+            cas.setJwksUri(WA_ADDRESS + \"/oidc/jwks\");\n+            cas.setUserinfoEndpoint(WA_ADDRESS + \"/oidc/profile\");\n+            cas.setEndSessionEndpoint(WA_ADDRESS + \"/oidc/logout\");\n+\n+            cas.setCreateUnmatching(true);\n+            cas.setSelfRegUnmatching(false);\n+\n+            ItemTO item = new ItemTO();\n+            item.setIntAttrName(\"username\");\n+            item.setExtAttrName(\"NameID\");\n+            item.setConnObjectKey(true);\n+            cas.setConnObjectKeyItem(item);\n+\n+            item = new ItemTO();\n+            item.setIntAttrName(\"email\");\n+            item.setExtAttrName(\"mail\");\n+            cas.add(item);\n+\n+            item = new ItemTO();\n+            item.setIntAttrName(\"userId\");\n+            item.setExtAttrName(\"mail\");\n+            cas.add(item);\n+\n+            item = new ItemTO();\n+            item.setIntAttrName(\"firstname\");\n+            item.setExtAttrName(\"givenName\");\n+            cas.add(item);\n+\n+            item = new ItemTO();\n+            item.setIntAttrName(\"surname\");\n+            item.setExtAttrName(\"sn\");\n+            cas.add(item);\n+\n+            item = new ItemTO();\n+            item.setIntAttrName(\"fullname\");\n+            item.setExtAttrName(\"cn\");\n+            cas.add(item);\n+\n+            oidcProviderService.create(cas);\n+        }\n+    }\n+\n+    @Override\n+    protected void sso(final String baseURL, final String username, final String password) throws IOException {\n+        CloseableHttpClient httpclient = HttpClients.createDefault();\n+        HttpClientContext context = HttpClientContext.create();\n+        context.setCookieStore(new BasicCookieStore());\n+\n+        // 1. fetch login page\n+        HttpGet get = new HttpGet(baseURL);\n+        CloseableHttpResponse response = httpclient.execute(get, context);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        // 2. click on the OpenID Connect Provider\n+        get = new HttpGet(baseURL + Constants.URL_CONTEXT + \"/login?op=CAS\");\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        // 2a. redirected to WA login screen\n+        String responseBody = EntityUtils.toString(response.getEntity());\n+        response = authenticateToCas(username, password, responseBody, httpclient, context);\n+\n+        // 2b. WA attribute consent screen\n+        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n+            responseBody = EntityUtils.toString(response.getEntity());\n+            String execution = extractCASExecution(responseBody);\n+\n+            List<NameValuePair> form = new ArrayList<>();\n+            form.add(new BasicNameValuePair(\"_eventId\", \"confirm\"));\n+            form.add(new BasicNameValuePair(\"execution\", execution));\n+            form.add(new BasicNameValuePair(\"option\", \"1\"));\n+            form.add(new BasicNameValuePair(\"reminder\", \"30\"));\n+            form.add(new BasicNameValuePair(\"reminderTimeUnit\", \"days\"));\n+\n+            HttpPost post = new HttpPost(WA_ADDRESS + \"/login\");\n+            post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+            post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+            post.setEntity(new UrlEncodedFormEntity(form, Consts.UTF_8));\n+            response = httpclient.execute(post, context);\n+        }\n+        assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n+\n+        // 2c. WA scope consent screen\n+        get = new HttpGet(response.getLastHeader(HttpHeaders.LOCATION).getValue());\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        responseBody = EntityUtils.toString(response.getEntity());\n+\n+        int begin = responseBody.indexOf(\"name=\\\"allow\\\"\");\n+        assertNotEquals(-1, begin);\n+        begin = responseBody.indexOf(\"href=\\\"\", begin);\n+        assertNotEquals(-1, begin);\n+        int end = responseBody.indexOf(\"\\\">\", begin);\n+        assertNotEquals(-1, end);\n+\n+        String allow = responseBody.substring(begin + 6, end).replace(\"&amp;\", \"&\");\n+        assertNotNull(allow);\n+\n+        // 2d. finally get requested content\n+        get = new HttpGet(allow);\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+\n+        // 3. verify that user is now authenticated\n+        get = new HttpGet(response.getFirstHeader(HttpHeaders.LOCATION).getValue());\n+        response = httpclient.execute(get, context);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+        assertTrue(EntityUtils.toString(response.getEntity()).contains(username));\n+    }\n+\n+    @Test\n+    @Override\n+    public void sso2Console() throws IOException {\n+        assumeTrue(false);\n+        super.sso2Console();\n+    }\n+\n+    @Test\n+    @Override\n+    public void sso2Enduser() throws IOException {\n+        assumeTrue(false);\n+        super.sso2Enduser();\n+    }\n+\n+    @Override\n+    public void createUnmatching() throws IOException {\n+        assumeTrue(false);\n+        super.createUnmatching();\n+    }\n+\n+    @Override\n+    public void selfRegUnmatching() throws IOException {\n+        assumeTrue(false);\n+        super.selfRegUnmatching();\n+    }\n+}"},{"sha":"87bc9bf1e038075066226b1d0589fc7069e24e03","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/SAML2SP4UIITCase.java","status":"added","additions":243,"deletions":0,"changes":243,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -0,0 +1,243 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.ui;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.http.Consts;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.SAML24UIIdPTO;\n+import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.SAML2SPNameId;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+public class SAML2SP4UIITCase extends AbstractUIITCase {\n+\n+    private static void clientAppSetup(final String appName, final String entityId, final long appId) {\n+        SAML2SPTO clientApp = clientAppService.list(ClientAppType.SAML2SP).stream().\n+                filter(app -> appName.equals(app.getName())).\n+                map(SAML2SPTO.class::cast).\n+                findFirst().\n+                orElseGet(() -> {\n+                    SAML2SPTO app = new SAML2SPTO();\n+                    app.setName(appName);\n+                    app.setClientAppId(appId);\n+                    app.setEntityId(entityId);\n+                    app.setMetadataLocation(entityId + SAML2SP4UIConstants.URL_CONTEXT + \"/metadata\");\n+\n+                    Response response = clientAppService.create(ClientAppType.SAML2SP, app);\n+                    if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                        fail(\"Could not create SAML2 Client App\");\n+                    }\n+\n+                    return clientAppService.read(\n+                            ClientAppType.SAML2SP, response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                });\n+\n+        clientApp.setSignAssertions(true);\n+        clientApp.setSignResponses(true);\n+        clientApp.setRequiredNameIdFormat(SAML2SPNameId.PERSISTENT);\n+        clientApp.setAuthPolicy(getAuthPolicy().getKey());\n+\n+        clientAppService.update(ClientAppType.SAML2SP, clientApp);\n+        clientAppService.pushToWA();\n+    }\n+\n+    @BeforeAll\n+    public static void consoleClientAppSetup() {\n+        clientAppSetup(SAML2SP4UIITCase.class.getName() + \"_Console\", CONSOLE_ADDRESS, 5L);\n+    }\n+\n+    @BeforeAll\n+    public static void enduserClientAppSetup() {\n+        clientAppSetup(SAML2SP4UIITCase.class.getName() + \"_Enduser\", ENDUSER_ADDRESS, 6L);\n+    }\n+\n+    @BeforeAll\n+    public static void idpSetup() {\n+        WebClient.client(saml2sp4UIIdPService).\n+                accept(MediaType.APPLICATION_XML_TYPE).\n+                type(MediaType.APPLICATION_XML_TYPE);\n+        try {\n+            saml2sp4UIIdPService.importFromMetadata(\n+                    (InputStream) WebClient.create(WA_ADDRESS + \"/idp/metadata\").get().getEntity());\n+        } catch (SyncopeClientException e) {\n+            // nothing bad if already imported\n+        } finally {\n+            WebClient.client(saml2sp4UIIdPService).\n+                    accept(clientFactory.getContentType().getMediaType()).\n+                    type(clientFactory.getContentType().getMediaType());\n+        }\n+\n+        List<SAML24UIIdPTO> idps = saml2sp4UIIdPService.list();\n+        assertEquals(1, idps.size());\n+\n+        SAML24UIIdPTO cas = idps.get(0);\n+        cas.setName(\"CAS\");\n+        cas.setCreateUnmatching(true);\n+        cas.setSelfRegUnmatching(false);\n+        cas.getItems().clear();\n+\n+        ItemTO item = new ItemTO();\n+        item.setIntAttrName(\"username\");\n+        item.setExtAttrName(\"NameID\");\n+        item.setConnObjectKey(true);\n+        cas.setConnObjectKeyItem(item);\n+\n+        item = new ItemTO();\n+        item.setIntAttrName(\"email\");\n+        item.setExtAttrName(\"mail\");\n+        cas.add(item);\n+\n+        item = new ItemTO();\n+        item.setIntAttrName(\"userId\");\n+        item.setExtAttrName(\"mail\");\n+        cas.add(item);\n+\n+        item = new ItemTO();\n+        item.setIntAttrName(\"firstname\");\n+        item.setExtAttrName(\"givenName\");\n+        cas.add(item);\n+\n+        item = new ItemTO();\n+        item.setIntAttrName(\"surname\");\n+        item.setExtAttrName(\"sn\");\n+        cas.add(item);\n+\n+        item = new ItemTO();\n+        item.setIntAttrName(\"fullname\");\n+        item.setExtAttrName(\"cn\");\n+        cas.add(item);\n+\n+        saml2sp4UIIdPService.update(cas);\n+    }\n+\n+    @Override\n+    protected void sso(final String baseURL, final String username, final String password) throws IOException {\n+        CloseableHttpClient httpclient = HttpClients.createDefault();\n+        HttpClientContext context = HttpClientContext.create();\n+        context.setCookieStore(new BasicCookieStore());\n+\n+        // 1. fetch login page\n+        HttpGet get = new HttpGet(baseURL);\n+        CloseableHttpResponse response = httpclient.execute(get, context);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        // 2. click on the SAML 2.0 IdP\n+        get = new HttpGet(baseURL + SAML2SP4UIConstants.URL_CONTEXT + \"/login?idp=http%3A//localhost%3A9080/saml\");\n+        response = httpclient.execute(get, context);\n+\n+        // 2a. post SAML request\n+        String responseBody = EntityUtils.toString(response.getEntity());\n+        Triple<String, String, String> parsed = parseSAMLRequestForm(responseBody);\n+\n+        HttpPost post = new HttpPost(parsed.getLeft());\n+        post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        post.setEntity(new UrlEncodedFormEntity(\n+                List.of(new BasicNameValuePair(\"RelayState\", parsed.getMiddle()),\n+                        new BasicNameValuePair(\"SAMLRequest\", parsed.getRight())), Consts.UTF_8));\n+        response = httpclient.execute(post, context);\n+        assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n+\n+        // 2b. authenticate\n+        get = new HttpGet(response.getFirstHeader(HttpHeaders.LOCATION).getValue());\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        responseBody = EntityUtils.toString(response.getEntity());\n+        response = authenticateToCas(username, password, responseBody, httpclient, context);\n+\n+        // 2c. WA attribute consent screen\n+        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n+            responseBody = EntityUtils.toString(response.getEntity());\n+            String execution = extractCASExecution(responseBody);\n+\n+            List<NameValuePair> form = new ArrayList<>();\n+            form.add(new BasicNameValuePair(\"_eventId\", \"confirm\"));\n+            form.add(new BasicNameValuePair(\"execution\", execution));\n+            form.add(new BasicNameValuePair(\"option\", \"1\"));\n+            form.add(new BasicNameValuePair(\"reminder\", \"30\"));\n+            form.add(new BasicNameValuePair(\"reminderTimeUnit\", \"days\"));\n+\n+            post = new HttpPost(WA_ADDRESS + \"/login\");\n+            post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+            post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+            post.setEntity(new UrlEncodedFormEntity(form, Consts.UTF_8));\n+            response = httpclient.execute(post, context);\n+        }\n+        assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n+\n+        get = new HttpGet(response.getFirstHeader(HttpHeaders.LOCATION).getValue());\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        // 2d. post SAML response\n+        responseBody = EntityUtils.toString(response.getEntity());\n+        parsed = parseSAMLResponseForm(responseBody);\n+\n+        post = new HttpPost(parsed.getLeft());\n+        post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        post.setEntity(new UrlEncodedFormEntity(\n+                List.of(new BasicNameValuePair(\"RelayState\", parsed.getMiddle()),\n+                        new BasicNameValuePair(\"SAMLResponse\", parsed.getRight())), Consts.UTF_8));\n+        response = httpclient.execute(post, context);\n+        assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n+\n+        // 3. verify that user is now authenticated\n+        get = new HttpGet(baseURL + StringUtils.removeStart(\n+                response.getFirstHeader(HttpHeaders.LOCATION).getValue(), \"../\"));\n+        response = httpclient.execute(get, context);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+        assertTrue(EntityUtils.toString(response.getEntity()).contains(username));\n+    }\n+}"},{"sha":"b325718183e756754b94d3153203321620103f55","filename":"pom.xml","status":"modified","additions":4,"deletions":15,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -641,21 +641,6 @@ under the License.\n         <artifactId>cxf-rt-features-logging</artifactId>\n         <version>${cxf.version}</version>\n       </dependency>\n-      <dependency>\n-        <groupId>org.apache.cxf</groupId>\n-        <artifactId>cxf-rt-rs-security-sso-saml</artifactId>\n-        <version>${cxf.version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>org.opensaml</groupId>\n-            <artifactId>opensaml-xacml-impl</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.opensaml</groupId>\n-            <artifactId>opensaml-xacml-saml-impl</artifactId>\n-          </exclusion>\n-        </exclusions>\n-      </dependency>\n       <dependency>\n         <groupId>org.apache.cxf</groupId>\n         <artifactId>cxf-rt-rs-security-sso-oidc</artifactId>\n@@ -1380,6 +1365,10 @@ under the License.\n             <groupId>org.apache.velocity</groupId>\n             <artifactId>velocity</artifactId>            \n           </exclusion>\n+          <exclusion>\n+            <groupId>xalan</groupId>\n+            <artifactId>xalan</artifactId>            \n+          </exclusion>\n         </exclusions>\n       </dependency>\n       <dependency>"},{"sha":"28ca6f12fdefa5c42c680efdd7083249b4ee69a6","filename":"sra/src/main/java/org/apache/syncope/sra/SecurityConfig.java","status":"modified","additions":32,"deletions":2,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -18,25 +18,30 @@\n  */\n package org.apache.syncope.sra;\n \n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n import java.text.ParseException;\n import java.util.Map;\n import java.util.Objects;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.sra.security.CsrfRouteMatcher;\n import org.apache.syncope.sra.security.LogoutRouteMatcher;\n import org.apache.syncope.sra.security.oauth2.OAuth2SecurityConfigUtils;\n import org.apache.syncope.sra.security.PublicRouteMatcher;\n import org.apache.syncope.sra.security.cas.CASSecurityConfigUtils;\n import org.apache.syncope.sra.security.pac4j.NoOpLogoutHandler;\n-import org.apache.syncope.sra.security.saml2.SAML2BindingType;\n import org.apache.syncope.sra.security.saml2.SAML2MetadataEndpoint;\n import org.apache.syncope.sra.security.saml2.SAML2SecurityConfigUtils;\n import org.apache.syncope.sra.security.saml2.SAML2WebSsoAuthenticationWebFilter;\n import org.jasig.cas.client.Protocol;\n import org.pac4j.core.http.callback.NoParameterCallbackUrlResolver;\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.config.SAML2Configuration;\n+import org.pac4j.saml.metadata.keystore.BaseSAML2KeystoreGenerator;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.autoconfigure.security.reactive.EndpointRequest;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -48,6 +53,7 @@\n import org.springframework.core.annotation.Order;\n import org.springframework.core.convert.converter.Converter;\n import org.springframework.core.env.Environment;\n+import org.springframework.core.io.FileUrlResource;\n import org.springframework.core.io.support.ResourcePatternResolver;\n import org.springframework.http.HttpMethod;\n import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\n@@ -217,19 +223,43 @@ public SAML2Client saml2Client() {\n                 env.getProperty(\"am.saml2.keystore.storepass\"),\n                 env.getProperty(\"am.saml2.keystore.keypass\"),\n                 resourceResolver.getResource(env.getProperty(\"am.saml2.idp\")));\n-        cfg.setIdentityProviderMetadataResource(resourceResolver.getResource(env.getProperty(\"am.saml2.idp\")));\n+\n+        cfg.setKeystoreType(env.getProperty(\"am.saml2.keystore.type\"));\n+        if (cfg.getKeystoreResource() instanceof FileUrlResource) {\n+            cfg.setKeystoreGenerator(new BaseSAML2KeystoreGenerator(cfg) {\n+\n+                @Override\n+                protected void store(\n+                        final KeyStore ks,\n+                        final X509Certificate certificate,\n+                        final PrivateKey privateKey) throws Exception {\n+\n+                    // nothing to do\n+                }\n+\n+                @Override\n+                public InputStream retrieve() throws Exception {\n+                    return cfg.getKeystoreResource().getInputStream();\n+                }\n+            });\n+        }\n+\n         cfg.setAuthnRequestBindingType(\n                 SAML2BindingType.valueOf(env.getProperty(\"am.saml2.sp.authnrequest.binding\")).getUri());\n         cfg.setResponseBindingType(SAML2BindingType.POST.getUri());\n         cfg.setSpLogoutRequestBindingType(\n                 SAML2BindingType.valueOf(env.getProperty(\"am.saml2.sp.logout.request.binding\")).getUri());\n         cfg.setSpLogoutResponseBindingType(\n                 SAML2BindingType.valueOf(env.getProperty(\"am.saml2.sp.logout.response.binding\")).getUri());\n+\n         cfg.setServiceProviderEntityId(env.getProperty(\"am.saml2.sp.entityId\"));\n+\n         cfg.setWantsAssertionsSigned(true);\n         cfg.setAuthnRequestSigned(true);\n         cfg.setSpLogoutRequestSigned(true);\n+\n         cfg.setAcceptedSkew(env.getProperty(\"am.saml2.sp.skew\", int.class));\n+\n         cfg.setLogoutHandler(new NoOpLogoutHandler());\n \n         SAML2Client saml2Client = new SAML2Client(cfg);"},{"sha":"6adc9335ea94ab01d89b5f624b4dc5e28d5db73b","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2WebSsoAuthenticationWebFilter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -75,7 +75,7 @@ private ServerWebExchangeMatcher matchSamlResponse() {\n \n     private ServerAuthenticationConverter convertSamlResponse() {\n         return exchange -> exchange.getFormData().\n-                flatMap(form -> this.MATCHER.matches(exchange).\n+                flatMap(form -> MATCHER.matches(exchange).\n                 flatMap(matchResult -> {\n                     ServerWebExchangeContext swec = new ServerWebExchangeContext(exchange).setForm(form);\n "},{"sha":"b6d51c204fba9dca82e63cebdbe022e9fb2680b9","filename":"src/main/asciidoc/reference-guide/concepts/extensions.adoc","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fextensions.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fextensions.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fextensions.adoc?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -76,10 +76,10 @@ containing the attribute statements - is going to be used by Syncope to match th\n ====\n The source code of this extension is available from the Apache Syncope\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/tree/syncope-{docVersion}/ext/saml2sp[source tree^]\n+https://github.com/apache/syncope/tree/syncope-{docVersion}/ext/saml2sp4ui[source tree^]\n endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/tree/master/ext/saml2sp[source tree^]\n+https://github.com/apache/syncope/tree/master/ext/saml2sp4ui[source tree^]\n endif::[]\n .\n ===="},{"sha":"907169a82dfbe5ce7cd168162a16b58ef3b0168f","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -361,21 +361,21 @@ Add the following dependencies to `core/pom.xml`:\n [source,xml,subs=\"verbatim,attributes\"]\n ----\n <dependency>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-rest-cxf</artifactId>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-rest-cxf</artifactId>\n   <version>${syncope.version}</version>\n </dependency>\n <dependency>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-persistence-jpa</artifactId>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-persistence-jpa</artifactId>\n   <version>${syncope.version}</version>\n </dependency>\n ----\n \n-Copy `core/src/main/resources/all/saml2sp-logic.properties` to `core/src/main/resources/saml2sp-logic.properties`.\n+Copy `core/src/main/resources/all/saml2sp4ui-logic.properties` to `core/src/main/resources/saml2sp4ui-logic.properties`.\n \n Setup a <<keystore,keystore>> and place it under the <<properties-files-location,configuration directory>>, then review\n-the content of `core/src/main/resources/saml2sp-logic.properties` accordingly.\n+the content of `core/src/main/resources/saml2sp4ui-logic.properties` accordingly.\n \n [discrete]\n ===== Enable the <<openid-connect-client>> extension\n@@ -569,14 +569,12 @@ Add the following dependencies to `console/pom.xml`:\n [source,xml,subs=\"verbatim,attributes\"]\n ----\n <dependency>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-client-console</artifactId>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-client-console</artifactId>\n   <version>${syncope.version}</version>\n </dependency>\n ----\n \n-Copy `console/src/main/resources/all/saml2sp-agent.properties` to `console/src/main/resources/saml2sp-agent.properties`.\n-\n [discrete]\n ===== Enable the <<openid-connect-client>> extension\n \n@@ -639,14 +637,12 @@ Add the following dependencies to `enduser/pom.xml`:\n [source,xml,subs=\"verbatim,attributes\"]\n ----\n <dependency>\n-  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n-  <artifactId>syncope-ext-saml2sp-client-enduser</artifactId>\n+  <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n+  <artifactId>syncope-ext-saml2sp4ui-client-enduser</artifactId>\n   <version>${syncope.version}</version>\n </dependency>\n ----\n \n-Copy `enduser/src/main/resources/all/saml2sp-agent.properties` to `enduser/src/main/resources/saml2sp-agent.properties`.\n-\n [discrete]\n ===== Enable the <<openid-connect-client>> extension\n "},{"sha":"62db556b2c48195e59276b7db85887c0c396879c","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/keystore.adoc","status":"modified","additions":18,"deletions":19,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fkeystore.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fkeystore.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fkeystore.adoc?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -41,30 +41,30 @@ complete coverage of the `keytool` command.\n keytool -genkey \\\n   -keyalg RSA \\\n   -keysize 2048 \\\n-  -alias saml2sp \\\n+  -alias saml2sp4ui \\\n   -dname \"CN=SAML2SP,OU=Apache Syncope, O=The ASF, L=Wilmington, ST=Delaware, C=US\" \\\n   -keypass akyepass \\\n   -storepass astorepass \\\n   -storetype JKS \\\n-  -keystore saml2sp.jks\n+  -keystore saml2sp4ui.jks\n ----\n \n-This command will create a keystore file with name `saml2sp.jks` in the execution directory, containing a new 2048-bit\n-RSA key pair, under the specified alias (`saml2sp`); password values for `keypass` and `storepass` are also set.\n+This command will create a keystore file with name `saml2sp4ui.jks` in the execution directory, containing a new 2048-bit\n+RSA key pair, under the specified alias (`saml2sp4ui`); password values for `keypass` and `storepass` are also set.\n \n [discrete]\n ===== Create new CSR\n \n [source,bash]\n ----\n keytool -certreq \\\n-  -alias saml2sp \\\n+  -alias saml2sp4ui \\\n   -keyalg RSA \\\n   -file certreq.pem \\\n   -keypass akyepass \\\n   -storepass astorepass \\\n   -storetype JKS \\\n-  -keystore saml2sp.jks\n+  -keystore saml2sp4ui.jks\n ----\n \n This command will create a CSR file with name `certreq.pem` in the execution directory, within the keystore generated\n@@ -89,7 +89,7 @@ keytool -import \\\n   -keypass akyepass \\\n   -storepass astorepass \\\n   -storetype JKS \\\n-  -keystore saml2sp.jks\n+  -keystore saml2sp4ui.jks\n ----\n \n This command will import the root / intermediate CA certificate(s) from the `cacert.pem` file into the keystore\n@@ -98,29 +98,28 @@ generated above.\n [source,bash]\n ----\n keytool -import \\\n-  -alias saml2sp \\\n+  -alias saml2sp4ui \\\n   -file cert.pem \\\n   -keypass akyepass \\\n   -storepass astorepass \\\n   -storetype JKS \\\n-  -keystore saml2sp.jks\n+  -keystore saml2sp4ui.jks\n ----\n \n This command will import the signed certificate from the `cert.pem` file into the keystore generated above.\n \n [discrete]\n ===== Finalize\n \n-The keystore file `saml2sp.jks` must be now placed in the <<properties-files-location,configuration directory>>; the\n-relevant part of the `saml2sp-agent.properties` file should be:\n+The keystore file `saml2sp4ui.jks` can now be placed in the <<properties-files-location,configuration directory>>; the\n+relevant part of the `saml2sp4ui-logic.properties` file should be:\n \n ....\n-keystore.name=saml2sp.jks\n-keystore.type=jks\n-keystore.storepass=astorepass\n-keystore.keypass=akyepass\n-sp.cert.alias=saml2sp\n-signature.algorithm=RSA_SHA1\n+saml2.sp4ui.skew=300\n+saml2.sp4ui.keystore=file://${conf.directory}/saml2sp4ui.jks\n+saml2.sp4ui.keystore.type=jks\n+saml2.sp4ui.keystore.storepass=astorepass\n+saml2.sp4ui.keystore.keypass=akyepass\n ....\n \n [NOTE]\n@@ -129,10 +128,10 @@ that is used with the key extracted from the keystore referenced in the\n parameters. +\n The value for this parameter must match one of the\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/types/SignatureAlgorithm.java[available values^],\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/saml2sp4ui/common-lib/src/main/java/org/apache/syncope/common/lib/types/SignatureAlgorithm.java[available values^],\n endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/types/SignatureAlgorithm.java[available values^],\n+https://github.com/apache/syncope/blob/master/ext/saml2sp4ui/common-lib/src/main/java/org/apache/syncope/common/lib/types/SignatureAlgorithm.java[available values^],\n endif::[]\n each of which correspond to a shorthand for an associated\n algorithm as defined for use in the XML Signature specification. +"},{"sha":"f7d12147976bebf53d5ed241e9acc791d1c1b342","filename":"standalone/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/standalone%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/standalone%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/standalone%2Fpom.xml?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -142,7 +142,7 @@ under the License.\n                 <copy todir=\"${work.dir}/apache-tomcat-${tomcat.version}/webapps/syncope/WEB-INF/classes\" overwrite=\"true\">\n                   <fileset dir=\"${project.build.outputDirectory}/core\"/>\n                 </copy>\n-                <copy file=\"../fit/core-reference/target/test-classes/keystore\" todir=\"${work.dir}/apache-tomcat-${tomcat.version}/webapps/syncope/WEB-INF/classes\" overwrite=\"true\"/>\n+                <copy file=\"../fit/core-reference/target/test-classes/saml.keystore.jks\" todir=\"${work.dir}/apache-tomcat-${tomcat.version}/webapps/syncope/WEB-INF/classes\" overwrite=\"true\"/>\n \n                 <!-- Syncope console -->\n                 <copy todir=\"${work.dir}/apache-tomcat-${tomcat.version}/webapps/syncope-console\">"},{"sha":"3c1be2335a9f5b3fe048fa4d9c24c8e5255d86e3","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":120,"deletions":117,"changes":237,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68151a717080f95aa3301002eac839061ec30008/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68151a717080f95aa3301002eac839061ec30008/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=68151a717080f95aa3301002eac839061ec30008","patch":"@@ -18,13 +18,35 @@\n  */\n package org.apache.syncope.wa.bootstrap;\n \n+import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;\n+import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.JDBCAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.JaasAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.LDAPAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.OIDCAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.RadiusAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.StaticAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n+import org.apache.syncope.common.rest.api.service.AuthModuleService;\n+import org.apache.syncope.common.rest.api.service.wa.WAConfigService;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n import org.apereo.cas.configuration.CasCoreConfigurationUtils;\n import org.apereo.cas.configuration.model.core.authentication.AuthenticationProperties;\n import org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.jdbc.JdbcAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.ldap.AbstractLdapAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorProperties;\n@@ -36,24 +58,6 @@\n import org.apereo.cas.configuration.model.support.radius.RadiusProperties;\n import org.apereo.cas.configuration.model.support.syncope.SyncopeAuthenticationProperties;\n import org.apereo.cas.util.model.TriStateBoolean;\n-\n-import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;\n-import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.auth.AuthModuleConf;\n-import org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.JDBCAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.JaasAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.LDAPAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.OIDCAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.RadiusAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.StaticAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n-import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n-import org.apache.syncope.common.rest.api.service.AuthModuleService;\n-import org.apache.syncope.common.rest.api.service.wa.WAConfigService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n@@ -62,11 +66,6 @@\n import org.springframework.core.env.MapPropertySource;\n import org.springframework.core.env.PropertySource;\n \n-import java.util.Map;\n-import java.util.TreeMap;\n-import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n-\n @Order\n public class SyncopeWAPropertySourceLocator implements PropertySourceLocator {\n \n@@ -79,10 +78,9 @@ public SyncopeWAPropertySourceLocator(final WARestClient waRestClient) {\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-\n-        final String authModule,\n-        final SyncopeAuthModuleConf conf,\n-        final String address) {\n+            final String authModule,\n+            final SyncopeAuthModuleConf conf,\n+            final String address) {\n \n         SyncopeAuthenticationProperties syncopeProps = new SyncopeAuthenticationProperties();\n         syncopeProps.setName(authModule);\n@@ -93,60 +91,65 @@ private static Map<String, Object> mapAuthModule(\n         casProperties.getAuthn().setSyncope(syncopeProps);\n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n-            SimpleBeanPropertyFilter.filterOutAllExcept(\n-                CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n-                    AuthenticationProperties::getSyncope)));\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                        CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                                AuthenticationProperties::getSyncope)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final StaticAuthModuleConf conf) {\n+            final String authModule,\n+            final StaticAuthModuleConf conf) {\n \n         AcceptAuthenticationProperties staticProps = new AcceptAuthenticationProperties();\n         staticProps.setName(authModule);\n         String users = conf.getUsers().entrySet().stream().\n-            map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n-            collect(Collectors.joining(\",\"));\n+                map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n+                collect(Collectors.joining(\",\"));\n         staticProps.setUsers(users);\n \n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         casProperties.getAuthn().setAccept(staticProps);\n         filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n-            SimpleBeanPropertyFilter.filterOutAllExcept(\n-                CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n-                    AuthenticationProperties::getAccept)));\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                        CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                                AuthenticationProperties::getAccept)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final LDAPAuthModuleConf conf) {\n+            final String authModule,\n+            final LDAPAuthModuleConf conf) {\n \n         LdapAuthenticationProperties ldapProps = new LdapAuthenticationProperties();\n         ldapProps.setName(authModule);\n+        ldapProps.setLdapUrl(conf.getLdapUrl());\n         ldapProps.setBaseDn(conf.getBaseDn());\n-        ldapProps.setBindCredential(conf.getBindCredential());\n         ldapProps.setSearchFilter(conf.getSearchFilter());\n+        ldapProps.setBindDn(conf.getBindDn());\n+        ldapProps.setBindCredential(conf.getBindCredential());\n+        if (StringUtils.isNotBlank(conf.getBindDn()) && StringUtils.isNotBlank(conf.getBindCredential())) {\n+            ldapProps.setType(AbstractLdapAuthenticationProperties.AuthenticationTypes.AUTHENTICATED);\n+        }\n         ldapProps.setPrincipalAttributeId(conf.getUserIdAttribute());\n-        ldapProps.setLdapUrl(conf.getLdapUrl());\n         ldapProps.setSubtreeSearch(conf.isSubtreeSearch());\n         ldapProps.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n \n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         casProperties.getAuthn().getLdap().add(ldapProps);\n-        filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n-            SimpleBeanPropertyFilter.filterOutAllExcept(\n-                CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n-                    AuthenticationProperties::getLdap)));\n+        SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n+        filterProvider.addFilter(\n+                AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                        CasCoreConfigurationUtils.getPropertyName(\n+                                AuthenticationProperties.class, AuthenticationProperties::getLdap)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final GoogleMfaAuthModuleConf conf) {\n+            final String authModule,\n+            final GoogleMfaAuthModuleConf conf) {\n \n         GoogleAuthenticatorMultifactorProperties props = new GoogleAuthenticatorMultifactorProperties();\n         props.setName(authModule);\n@@ -160,20 +163,20 @@ private static Map<String, Object> mapAuthModule(\n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         casProperties.getAuthn().getMfa().setGauth(props);\n         filterProvider.\n-            addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n-                        AuthenticationProperties::getMfa))).\n-            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(MultifactorAuthenticationProperties.class,\n-                        MultifactorAuthenticationProperties::getGauth)));\n+                addFilter(AuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                                        AuthenticationProperties::getMfa))).\n+                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(MultifactorAuthenticationProperties.class,\n+                                        MultifactorAuthenticationProperties::getGauth)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final U2FAuthModuleConf conf) {\n+            final String authModule,\n+            final U2FAuthModuleConf conf) {\n \n         U2FMultifactorProperties props = new U2FMultifactorProperties();\n         props.setName(authModule);\n@@ -187,20 +190,20 @@ private static Map<String, Object> mapAuthModule(\n         casProperties.getAuthn().getMfa().setU2f(props);\n \n         filterProvider.\n-            addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n-                        AuthenticationProperties::getMfa))).\n-            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(MultifactorAuthenticationProperties.class,\n-                        MultifactorAuthenticationProperties::getU2f)));\n+                addFilter(AuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                                        AuthenticationProperties::getMfa))).\n+                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(MultifactorAuthenticationProperties.class,\n+                                        MultifactorAuthenticationProperties::getU2f)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final JaasAuthModuleConf conf) {\n+            final String authModule,\n+            final JaasAuthModuleConf conf) {\n \n         JaasAuthenticationProperties props = new JaasAuthenticationProperties();\n         props.setName(authModule);\n@@ -215,15 +218,15 @@ private static Map<String, Object> mapAuthModule(\n         casProperties.getAuthn().getJaas().add(props);\n \n         filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n-            SimpleBeanPropertyFilter.filterOutAllExcept(\n-                CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n-                    AuthenticationProperties::getJaas)));\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                        CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                                AuthenticationProperties::getJaas)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final JDBCAuthModuleConf conf) {\n+            final String authModule,\n+            final JDBCAuthModuleConf conf) {\n \n         QueryJdbcAuthenticationProperties props = new QueryJdbcAuthenticationProperties();\n         props.setName(authModule);\n@@ -243,20 +246,20 @@ private static Map<String, Object> mapAuthModule(\n         casProperties.getAuthn().getJdbc().getQuery().add(props);\n \n         filterProvider.\n-            addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n-                        AuthenticationProperties::getJdbc))).\n-            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(JdbcAuthenticationProperties.class,\n-                        JdbcAuthenticationProperties::getQuery)));\n+                addFilter(AuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                                        AuthenticationProperties::getJdbc))).\n+                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(JdbcAuthenticationProperties.class,\n+                                        JdbcAuthenticationProperties::getQuery)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final OIDCAuthModuleConf conf) {\n+            final String authModule,\n+            final OIDCAuthModuleConf conf) {\n \n         Pac4jGenericOidcClientProperties props = new Pac4jGenericOidcClientProperties();\n         props.setId(conf.getId());\n@@ -278,20 +281,20 @@ private static Map<String, Object> mapAuthModule(\n         casProperties.getAuthn().getPac4j().getOidc().add(client);\n \n         filterProvider.\n-            addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n-                        AuthenticationProperties::getPac4j))).\n-            addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(Pac4jDelegatedAuthenticationProperties.class,\n-                        Pac4jDelegatedAuthenticationProperties::getOidc)));\n+                addFilter(AuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                                        AuthenticationProperties::getPac4j))).\n+                addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(Pac4jDelegatedAuthenticationProperties.class,\n+                                        Pac4jDelegatedAuthenticationProperties::getOidc)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final RadiusAuthModuleConf conf) {\n+            final String authModule,\n+            final RadiusAuthModuleConf conf) {\n \n         RadiusProperties props = new RadiusProperties();\n         props.setName(authModule);\n@@ -316,16 +319,16 @@ private static Map<String, Object> mapAuthModule(\n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         casProperties.getAuthn().setRadius(props);\n         filterProvider.\n-            addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n-                        AuthenticationProperties::getRadius)));\n+                addFilter(AuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                                        AuthenticationProperties::getRadius)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final SAML2IdPAuthModuleConf conf) {\n+            final String authModule,\n+            final SAML2IdPAuthModuleConf conf) {\n \n         Pac4jSamlClientProperties props = new Pac4jSamlClientProperties();\n         props.setClientName(authModule);\n@@ -335,7 +338,7 @@ private static Map<String, Object> mapAuthModule(\n         props.setAuthnContextClassRef(conf.getAuthnContextClassRefs());\n         props.setAuthnContextComparisonType(conf.getAuthnContextComparisonType());\n         props.setBlockedSignatureSigningAlgorithms(conf.getBlockedSignatureSigningAlgorithms());\n-        props.setDestinationBinding(conf.getDestinationBinding());\n+        props.setDestinationBinding(conf.getDestinationBinding().getUri());\n         props.setIdentityProviderMetadataPath(conf.getIdentityProviderMetadataPath());\n         props.setKeystoreAlias(conf.getKeystoreAlias());\n         props.setKeystorePassword(conf.getKeystorePassword());\n@@ -349,35 +352,35 @@ private static Map<String, Object> mapAuthModule(\n         props.setSignatureReferenceDigestMethods(conf.getSignatureReferenceDigestMethods());\n         props.setPrincipalAttributeId(conf.getUserIdAttribute());\n         props.setNameIdPolicyAllowCreate(StringUtils.isBlank(conf.getNameIdPolicyAllowCreate())\n-            ? TriStateBoolean.UNDEFINED\n-            : TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n+                ? TriStateBoolean.UNDEFINED\n+                : TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n \n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         casProperties.getAuthn().getPac4j().getSaml().add(props);\n \n         filterProvider.\n-            addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n-                        AuthenticationProperties::getPac4j))).\n-            addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(Pac4jDelegatedAuthenticationProperties.class,\n-                        Pac4jDelegatedAuthenticationProperties::getSaml)));\n+                addFilter(AuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(AuthenticationProperties.class,\n+                                        AuthenticationProperties::getPac4j))).\n+                addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(Pac4jDelegatedAuthenticationProperties.class,\n+                                        Pac4jDelegatedAuthenticationProperties::getSaml)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n     private static SimpleFilterProvider getParentCasFilterProvider() {\n         return new SimpleFilterProvider().\n-            setFailOnUnknownId(false).\n-            addFilter(CasConfigurationProperties.class.getSimpleName(), SimpleBeanPropertyFilter.filterOutAllExcept(\n-                CasCoreConfigurationUtils.getPropertyName(CasConfigurationProperties.class,\n-                    CasConfigurationProperties::getAuthn)));\n+                setFailOnUnknownId(false).\n+                addFilter(CasConfigurationProperties.class.getSimpleName(), SimpleBeanPropertyFilter.filterOutAllExcept(\n+                        CasCoreConfigurationUtils.getPropertyName(CasConfigurationProperties.class,\n+                                CasConfigurationProperties::getAuthn)));\n     }\n \n     private static Map<String, Object> filterCasProperties(final CasConfigurationProperties casProperties,\n-                                                           final SimpleFilterProvider filters) {\n+            final SimpleFilterProvider filters) {\n         return CasCoreConfigurationUtils.asMap(casProperties.withHolder(), filters);\n     }\n \n@@ -402,7 +405,7 @@ public PropertySource<?> locate(final Environment environment) {\n                 properties.putAll(mapAuthModule(authModuleTO.getKey(), (StaticAuthModuleConf) authConf));\n             } else if (authConf instanceof SyncopeAuthModuleConf) {\n                 properties.putAll(mapAuthModule(authModuleTO.getKey(),\n-                    (SyncopeAuthModuleConf) authConf, syncopeClient.getAddress()));\n+                        (SyncopeAuthModuleConf) authConf, syncopeClient.getAddress()));\n             } else if (authConf instanceof GoogleMfaAuthModuleConf) {\n                 properties.putAll(mapAuthModule(authModuleTO.getKey(), (GoogleMfaAuthModuleConf) authConf));\n             } else if (authConf instanceof JaasAuthModuleConf) {\n@@ -421,7 +424,7 @@ public PropertySource<?> locate(final Environment environment) {\n         });\n \n         syncopeClient.getService(WAConfigService.class).list()\n-            .forEach(configTO -> properties.put(configTO.getSchema(), configTO.getValues()));\n+                .forEach(configTO -> properties.put(configTO.getSchema(), configTO.getValues()));\n         LOG.debug(\"Collected WA properties: {}\", properties);\n         return new MapPropertySource(getClass().getName(), properties);\n     }"}]}