{"sha":"a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE1YjE1Y2M3MzU0MjRmY2Y2YWM5ZWQzMWM0YmY5YzUxNzc5NDVlOGE=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-09-13T10:41:22Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-09-13T10:41:22Z"},"message":"Fixing non-propagation issues when updating password only\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247117 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f64b1a073283812b439cc7e9544dc773e8be0367","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f64b1a073283812b439cc7e9544dc773e8be0367"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a/comments","author":null,"committer":null,"parents":[{"sha":"a7a029c6ab5a419e03cd1a7bf881ffc9f114dc06","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a7a029c6ab5a419e03cd1a7bf881ffc9f114dc06","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a7a029c6ab5a419e03cd1a7bf881ffc9f114dc06"}],"stats":{"total":150,"additions":88,"deletions":62},"files":[{"sha":"bd54781279d0df9ca7c9ca4b20fbbbf8e9ada803","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a","patch":"@@ -346,7 +346,8 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n         }\n \n         List<SyncopeUser> matchingUsers = userSearchDAO.search(\n-                EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()), searchCondition);\n+                EntitlementUtil.getRoleIds(EntitlementUtil.\n+                getOwnedEntitlementNames()), searchCondition);\n         List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n             result.add(userDataBinder.getUserTO(user, workflow));\n@@ -566,8 +567,9 @@ public UserTO create(HttpServletResponse response,\n         return savedTO;\n     }\n \n-    public SyncopeUser update(SyncopeUser user, UserMod userMod,\n-            Set<Long> mandatoryRoles, Set<String> mandatoryResources)\n+    public SyncopeUser update(SyncopeUser user, final UserMod userMod,\n+            final Set<Long> mandatoryRoles,\n+            final Set<String> mandatoryResources)\n             throws WorkflowException, NotFoundException, PropagationException {\n \n         // First of all, let's check if update is allowed\n@@ -582,8 +584,7 @@ public SyncopeUser update(SyncopeUser user, UserMod userMod,\n                 inputs);\n \n         // Update user with provided userMod\n-        ResourceOperations resourceOperations =\n-                userDataBinder.update(user, userMod);\n+        ResourceOperations resOps = userDataBinder.update(user, userMod);\n \n         try {\n             user = userDAO.save(user);\n@@ -616,7 +617,7 @@ public SyncopeUser update(SyncopeUser user, UserMod userMod,\n         }\n \n         propagationManager.update(user, userMod.getPassword(),\n-                resourceOperations, mandatoryResourceNames);\n+                resOps, mandatoryResourceNames);\n \n         return user;\n     }"},{"sha":"e1f8268665c32c3aad693e421fa4734e606491eb","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a","patch":"@@ -90,10 +90,10 @@ public abstract class AbstractAttributableDataBinder {\n     protected AttrDAO attributeDAO;\n \n     @Autowired\n-    protected DerAttrDAO derivedAttributeDAO;\n+    protected DerAttrDAO derAttrDAO;\n \n     @Autowired\n-    protected VirAttrDAO virtualAttributeDAO;\n+    protected VirAttrDAO virAttrDAO;\n \n     @Autowired\n     protected AttrValueDAO attributeValueDAO;\n@@ -475,7 +475,7 @@ protected ResourceOperations fill(\n                     LOG.debug(\"No derived attribute found for schema {}\",\n                             derivedSchema.getName());\n                 } else {\n-                    derivedAttributeDAO.delete(derivedAttribute);\n+                    derAttrDAO.delete(derivedAttribute);\n                 }\n \n                 for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n@@ -523,7 +523,7 @@ protected ResourceOperations fill(\n                     LOG.debug(\"No virtual attribute found for schema {}\",\n                             virtualSchema.getName());\n                 } else {\n-                    virtualAttributeDAO.delete(virtualAttribute);\n+                    virAttrDAO.delete(virtualAttribute);\n                 }\n \n                 for (SchemaMapping mapping : resourceDAO.findAllMappings()) {"},{"sha":"46ed138713d62ca6725fe7d394dd9b9f5728321d","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":35,"deletions":52,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a","patch":"@@ -54,7 +54,10 @@ public class UserDataBinder extends AbstractAttributableDataBinder {\n \n     public enum CheckinResultAction {\n \n-        CREATE, OVERWRITE, REJECT\n+        CREATE,\n+        OVERWRITE,\n+        REJECT\n+\n     }\n \n     public class CheckInResult {\n@@ -173,16 +176,15 @@ public void create(final SyncopeUser user, final UserTO userTO)\n     public ResourceOperations update(SyncopeUser user, UserMod userMod)\n             throws SyncopeClientCompositeErrorException {\n \n+        ResourceOperations resOps = new ResourceOperations();\n+\n         SyncopeClientCompositeErrorException scce =\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n \n         // password\n-\n         if (userMod.getPassword() != null) {\n-\n             int passwordHistorySize = 0;\n-\n             try {\n                 Policy policy = policyDAO.getGlobalPasswordPolicy();\n                 PasswordPolicy passwordPolicy = policy.getSpecification();\n@@ -193,11 +195,12 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n \n             user.setPassword(userMod.getPassword(), getCipherAlgoritm(),\n                     passwordHistorySize);\n+            resOps.addAll(ResourceOperationType.UPDATE,\n+                    user.getTargetResources());\n         }\n \n         // attributes, derived attributes, virtual attributes and resources\n-        ResourceOperations resourceOperations =\n-                fill(user, userMod, AttributableUtil.USER, scce);\n+        resOps.merge(fill(user, userMod, AttributableUtil.USER, scce));\n \n         // store the role ids of membership required to be added\n         Set<Long> membershipToBeAddedRoleIds = new HashSet<Long>();\n@@ -209,30 +212,23 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n \n         // memberships to be removed\n         Membership membership = null;\n-        for (Long membershipToBeRemovedId :\n+        for (Long membershipId :\n                 userMod.getMembershipsToBeRemoved()) {\n \n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Membership to be removed: \"\n-                        + membershipToBeRemovedId);\n-            }\n+            LOG.debug(\"Membership to be removed: {}\", membershipId);\n \n-            membership = membershipDAO.find(membershipToBeRemovedId);\n+            membership = membershipDAO.find(membershipId);\n             if (membership == null) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\n-                            \"Invalid membership id specified to be removed: \"\n-                            + membershipToBeRemovedId);\n-                }\n+                LOG.debug(\"Invalid membership id specified to be removed: {}\",\n+                        membershipId);\n             } else {\n                 for (TargetResource resource :\n                         membership.getSyncopeRole().getTargetResources()) {\n \n                     if (!membershipToBeAddedRoleIds.contains(\n                             membership.getSyncopeRole().getId())) {\n \n-                        resourceOperations.add(ResourceOperationType.DELETE,\n-                                resource);\n+                        resOps.add(ResourceOperationType.DELETE, resource);\n                     }\n                 }\n \n@@ -247,47 +243,39 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n \n                     Set<Long> attributeIds = new HashSet<Long>(\n                             membership.getAttributes().size());\n-                    for (AbstractAttr attribute :\n-                            membership.getAttributes()) {\n-\n+                    for (AbstractAttr attribute : membership.getAttributes()) {\n                         attributeIds.add(attribute.getId());\n                     }\n                     for (Long attributeId : attributeIds) {\n-                        attributeDAO.delete(attributeId,\n-                                MAttr.class);\n+                        attributeDAO.delete(attributeId, MAttr.class);\n                     }\n-\n                     attributeIds.clear();\n-                    // remove derived attributes\n \n-                    for (AbstractDerAttr derivedAttribute :\n+                    // remove derived attributes\n+                    for (AbstractDerAttr derAttr :\n                             membership.getDerivedAttributes()) {\n \n-                        attributeIds.add(derivedAttribute.getId());\n+                        attributeIds.add(derAttr.getId());\n                     }\n-\n-                    for (Long derivedAttributeId : attributeIds) {\n-                        derivedAttributeDAO.delete(derivedAttributeId,\n-                                MDerAttr.class);\n+                    for (Long derAttrId : attributeIds) {\n+                        derAttrDAO.delete(derAttrId, MDerAttr.class);\n                     }\n-\n                     attributeIds.clear();\n-                    // remove virtual attributes\n \n-                    for (AbstractVirAttr virtulaAttribute :\n+                    // remove virtual attributes\n+                    for (AbstractVirAttr virAttr :\n                             membership.getVirtualAttributes()) {\n \n-                        attributeIds.add(virtulaAttribute.getId());\n+                        attributeIds.add(virAttr.getId());\n                     }\n-\n-                    for (Long virtualAttributeId : attributeIds) {\n-                        virtualAttributeDAO.delete(\n-                                virtualAttributeId, MVirAttr.class);\n+                    for (Long virAttrId : attributeIds) {\n+                        virAttrDAO.delete(virAttrId, MVirAttr.class);\n                     }\n+                    attributeIds.clear();\n                 } else {\n                     user.removeMembership(membership);\n \n-                    membershipDAO.delete(membershipToBeRemovedId);\n+                    membershipDAO.delete(membershipId);\n                 }\n             }\n         }\n@@ -297,17 +285,12 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n         for (MembershipMod membershipMod :\n                 userMod.getMembershipsToBeAdded()) {\n \n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Membership to be added: role(\"\n-                        + membershipMod.getRole() + \")\");\n-            }\n+            LOG.debug(\"Membership to be added: role({})\",\n+                    membershipMod.getRole());\n \n             role = roleDAO.find(membershipMod.getRole());\n             if (role == null) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Ignoring invalid role \"\n-                            + membershipMod.getRole());\n-                }\n+                LOG.debug(\"Ignoring invalid role {}\", membershipMod.getRole());\n             } else {\n                 membership = user.getMembership(role.getId());\n                 if (membership == null) {\n@@ -317,16 +300,16 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n \n                     user.addMembership(membership);\n \n-                    resourceOperations.addAll(ResourceOperationType.UPDATE,\n+                    resOps.addAll(ResourceOperationType.UPDATE,\n                             role.getTargetResources());\n                 }\n \n-                resourceOperations.merge(fill(membership, membershipMod,\n+                resOps.merge(fill(membership, membershipMod,\n                         AttributableUtil.MEMBERSHIP, scce));\n             }\n         }\n \n-        return resourceOperations;\n+        return resOps;\n     }\n \n     public UserTO getUserTO(SyncopeUser user, Workflow userWorkflow) {"},{"sha":"451a2a3abd0ca6d6e63010b48faba008bd3d5ba9","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=a5b15cc735424fcf6ac9ed31c4bf9c5177945e8a","patch":"@@ -827,6 +827,48 @@ public final void update() {\n         assertTrue(usernameFound);\n     }\n \n+    @Test\n+    public void updatePasswordOnly() {\n+        List<PropagationTaskTO> beforeTasks = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+        assertNotNull(beforeTasks);\n+        assertFalse(beforeTasks.isEmpty());\n+\n+        UserTO userTO = getSampleTO(\"pwdonly@t.com\");\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(8L);\n+        AttributeTO membershipAttr = new AttributeTO();\n+        membershipAttr.setSchema(\"subscriptionDate\");\n+        membershipAttr.addValue(\"2009-08-18T16:33:12.203+0200\");\n+        membershipTO.addAttribute(membershipAttr);\n+        userTO.addMembership(membershipTO);\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n+                userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n+                userTO, UserTO.class);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.setPassword(\"newPassword\");\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n+                userMod, UserTO.class);\n+\n+        SyncopeUser passwordTestUser = new SyncopeUser();\n+        passwordTestUser.setPassword(\"newPassword\", CipherAlgorithm.MD5, 0);\n+        assertEquals(passwordTestUser.getPassword(), userTO.getPassword());\n+\n+        List<PropagationTaskTO> afterTasks = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+        assertNotNull(afterTasks);\n+        assertFalse(afterTasks.isEmpty());\n+\n+        assertTrue(beforeTasks.size() < afterTasks.size());\n+    }\n+\n     @Test\n     public final void verifyTaskRegistration() {\n         // get task list"}]}