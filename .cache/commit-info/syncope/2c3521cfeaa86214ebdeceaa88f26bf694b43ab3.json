{"sha":"2c3521cfeaa86214ebdeceaa88f26bf694b43ab3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJjMzUyMWNmZWFhODYyMTRlYmRlY2VhYTg4ZjI2YmY2OTRiNDNhYjM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-26T14:39:08Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-26T14:39:08Z"},"message":"Adding workaround for https://hibernate.onjira.com/browse/EJB-346\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1305377 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ac62d2d1979bdf52080908cc54259469ba36d512","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ac62d2d1979bdf52080908cc54259469ba36d512"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2c3521cfeaa86214ebdeceaa88f26bf694b43ab3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2c3521cfeaa86214ebdeceaa88f26bf694b43ab3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2c3521cfeaa86214ebdeceaa88f26bf694b43ab3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2c3521cfeaa86214ebdeceaa88f26bf694b43ab3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3f70df604bc03a8c13ac750242c2642200c91ade","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3f70df604bc03a8c13ac750242c2642200c91ade","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3f70df604bc03a8c13ac750242c2642200c91ade"}],"stats":{"total":56,"additions":44,"deletions":12},"files":[{"sha":"19f20d79b63f0c5a01a7ef14820470eabf7de9c3","filename":"hibernate-enhancer/src/main/java/org/syncope/hibernate/HibernateEnhancer.java","status":"modified","additions":44,"deletions":12,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c3521cfeaa86214ebdeceaa88f26bf694b43ab3/hibernate-enhancer%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fhibernate%2FHibernateEnhancer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c3521cfeaa86214ebdeceaa88f26bf694b43ab3/hibernate-enhancer%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fhibernate%2FHibernateEnhancer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/hibernate-enhancer%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fhibernate%2FHibernateEnhancer.java?ref=2c3521cfeaa86214ebdeceaa88f26bf694b43ab3","patch":"@@ -19,25 +19,29 @@\n package org.syncope.hibernate;\n \n import java.lang.reflect.Field;\n+import java.util.List;\n import javassist.ClassClassPath;\n import javassist.ClassPool;\n import javassist.CtClass;\n import javassist.CtField;\n import javassist.bytecode.AnnotationsAttribute;\n+import javassist.bytecode.AttributeInfo;\n import javassist.bytecode.ClassFile;\n import javassist.bytecode.ConstPool;\n import javassist.bytecode.annotation.Annotation;\n+import javassist.bytecode.annotation.EnumMemberValue;\n import javassist.bytecode.annotation.StringMemberValue;\n import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n import javax.persistence.Lob;\n+import javax.persistence.OneToMany;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n import org.springframework.core.type.classreading.MetadataReader;\n \n /**\n- * Add Hibernate's @Type to each entity String field labeled @Lob, in order to\n- * enable PostgreSQL's LOB support.\n+ * Enhance JPA entities for usage with Hibernate.\n  */\n public final class HibernateEnhancer {\n \n@@ -56,12 +60,11 @@ public static void main(final String[] args) throws Exception {\n         ClassPool classPool = ClassPool.getDefault();\n         classPool.appendClassPath(args[0]);\n \n-        PathMatchingResourcePatternResolver resResolver = new PathMatchingResourcePatternResolver(classPool\n-                .getClassLoader());\n+        PathMatchingResourcePatternResolver resResolver =\n+                new PathMatchingResourcePatternResolver(classPool.getClassLoader());\n         CachingMetadataReaderFactory cachingMetadataReaderFactory = new CachingMetadataReaderFactory();\n \n         for (Resource resource : resResolver.getResources(\"classpath*:org/syncope/core/**/*.class\")) {\n-\n             MetadataReader metadataReader = cachingMetadataReaderFactory.getMetadataReader(resource);\n             if (metadataReader.getAnnotationMetadata().isAnnotated(Entity.class.getName())) {\n \n@@ -75,16 +78,45 @@ public static void main(final String[] args) throws Exception {\n                 ConstPool constPool = classFile.getConstPool();\n \n                 for (Field field : entity.getDeclaredFields()) {\n+                    AnnotationsAttribute annotAttr = null;\n+                    // Add Hibernate's @Type to each entity String field labeled @Lob,\n+                    // in order to enable PostgreSQL's LOB support.\n                     if (field.isAnnotationPresent(Lob.class)) {\n-                        AnnotationsAttribute typeAttr = new AnnotationsAttribute(constPool,\n-                                AnnotationsAttribute.visibleTag);\n                         Annotation typeAnnot = new Annotation(\"org.hibernate.annotations.Type\", constPool);\n-                        typeAnnot.addMemberValue(\"type\", new StringMemberValue(\"org.hibernate.type.StringClobType\",\n-                                constPool));\n-                        typeAttr.addAnnotation(typeAnnot);\n+                        typeAnnot.addMemberValue(\"type\",\n+                                new StringMemberValue(\"org.hibernate.type.StringClobType\", constPool));\n+\n+                        annotAttr = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n+                        annotAttr.addAnnotation(typeAnnot);\n+                    }\n+\n+                    // Workaround for https://hibernate.onjira.com/browse/EJB-346\n+                    if (field.isAnnotationPresent(OneToMany.class) && field.getType().isAssignableFrom(List.class)\n+                            && FetchType.EAGER == field.getAnnotation(OneToMany.class).fetch()) {\n+\n+                        Annotation fetchAnnot = new Annotation(\"org.hibernate.annotations.Fetch\", constPool);\n+                        EnumMemberValue emb = new EnumMemberValue(constPool);\n+                        emb.setType(\"org.hibernate.annotations.FetchMode\");\n+                        emb.setValue(\"SUBSELECT\");\n+                        fetchAnnot.addMemberValue(\"value\", emb);\n+\n+                        annotAttr = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n+                        annotAttr.addAnnotation(fetchAnnot);\n+                    }\n+\n+                    if (annotAttr != null) {\n+                        CtField ctField = ctClass.getDeclaredField(field.getName());\n+\n+                        List<AttributeInfo> formerAttrs = ctField.getFieldInfo().getAttributes();\n+                        for (AttributeInfo formerAttr : formerAttrs) {\n+                            if (formerAttr instanceof AnnotationsAttribute) {\n+                                for (Annotation annotation : ((AnnotationsAttribute) formerAttr).getAnnotations()) {\n+                                    annotAttr.addAnnotation(annotation);\n+                                }\n+                            }\n+                        }\n \n-                        CtField lobField = ctClass.getDeclaredField(field.getName());\n-                        lobField.getFieldInfo().addAttribute(typeAttr);\n+                        ctField.getFieldInfo().addAttribute(annotAttr);\n                     }\n                 }\n "}]}