{"sha":"4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","node_id":"C_kwDOJfYA1toAKDQ4ODBlMGRkNTJhYjI0M2MxYTU2ZTQxYmIyZDdhNmZmMmRkNmUzN2Q","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2021-12-21T09:57:18Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2021-12-21T09:57:18Z"},"message":"Upgrading Elasticsearch (#298)","tree":{"sha":"a9745cfe6dca25dd8bdbbf4c9446b431cdd393f9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a9745cfe6dca25dd8bdbbf4c9446b431cdd393f9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhwaT+CRBK7hj4Ov3rIwAAenYIADtEMCUur8j3Rc2BqEoOfHLp\nC+USs7vTa2fvfyHnBU3o5BSTf4zqLBs923Ts9MLWHA4sr6KniZCedapw8jYchVYT\n62lSumhyCBJT4qs0tbY0A7gaeX8oyzruCJxWVuzxnzcWZf5EEC7KeHcT/Y7r4v68\ndf/H9iJjp0wM0dC6PPQ6d45oibK/7Z8xBTB3FxccisH7YOzMHuP6kGuf2rTqoLiW\nSLx0eODOLeuuNWMT5oBBXwsC0Q0DT7GnS5oJkDVyRp2gODc0iqLOwjDBmzM7JIiW\nRqEDMXTS50Nr8j9FhUDKfWwZaLpIDBUG8K5Fjg6FYhv/w5oPqVydETBA/qmykXg=\n=3iQQ\n-----END PGP SIGNATURE-----\n","payload":"tree a9745cfe6dca25dd8bdbbf4c9446b431cdd393f9\nparent 0c451247816dfd4c36fcebc5f3f30eb10dc8bd43\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1640080638 +0100\ncommitter GitHub <noreply@github.com> 1640080638 +0100\n\nUpgrading Elasticsearch (#298)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"0c451247816dfd4c36fcebc5f3f30eb10dc8bd43","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0c451247816dfd4c36fcebc5f3f30eb10dc8bd43","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0c451247816dfd4c36fcebc5f3f30eb10dc8bd43"}],"stats":{"total":884,"additions":459,"deletions":425},"files":[{"sha":"10bf6c859f014bbcda842006450846f1ef9fee52","filename":"ext/elasticsearch/client-elasticsearch/pom.xml","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fclient-elasticsearch%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fclient-elasticsearch%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fpom.xml?ref=4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","patch":"@@ -45,25 +45,21 @@ under the License.\n     </dependency>\n       \n     <dependency>\n-      <groupId>org.elasticsearch.client</groupId>\n-      <artifactId>elasticsearch-rest-high-level-client</artifactId>\n+      <groupId>co.elastic.clients</groupId>\n+      <artifactId>elasticsearch-java</artifactId>\n     </dependency>\n     <dependency>\n       <groupId>org.elasticsearch.client</groupId>\n       <artifactId>elasticsearch-rest-client</artifactId>\n     </dependency>\n     <dependency>\n-      <groupId>org.elasticsearch</groupId>\n-      <artifactId>elasticsearch</artifactId>\n-    </dependency>\n-    \n-    <dependency>\n-      <groupId>com.fasterxml.jackson.dataformat</groupId>\n-      <artifactId>jackson-dataformat-smile</artifactId>\n+      <groupId>jakarta.json</groupId>\n+      <artifactId>jakarta.json-api</artifactId>\n     </dependency>\n+\n     <dependency>\n-      <groupId>com.fasterxml.jackson.dataformat</groupId>\n-      <artifactId>jackson-dataformat-cbor</artifactId>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n     </dependency>\n   </dependencies>\n "},{"sha":"dbacb5ec817a08bfc03fbd9e8f6c1f66591fbe82","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientContext.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java?ref=4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","patch":"@@ -18,13 +18,12 @@\n  */\n package org.apache.syncope.ext.elasticsearch.client;\n \n+import co.elastic.clients.elasticsearch.ElasticsearchClient;\n import java.util.List;\n-\n import org.apache.http.HttpHost;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.elasticsearch.client.RestHighLevelClient;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n@@ -61,7 +60,7 @@ public ElasticsearchUtils elasticsearchUtils(\n     @Bean\n     @Autowired\n     public ElasticsearchIndexManager elasticsearchIndexManager(\n-            final RestHighLevelClient client,\n+            final ElasticsearchClient client,\n             final ElasticsearchUtils elasticsearchUtils) {\n \n         return new ElasticsearchIndexManager(client, elasticsearchUtils);"},{"sha":"1a6aae4960a4ff25915cac248589ac42f1891b25","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientFactoryBean.java","status":"modified","additions":19,"deletions":13,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java?ref=4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.ext.elasticsearch.client;\n \n+import co.elastic.clients.elasticsearch.ElasticsearchClient;\n+import co.elastic.clients.json.jackson.JacksonJsonpMapper;\n+import co.elastic.clients.transport.rest_client.RestClientTransport;\n import java.nio.charset.StandardCharsets;\n import java.util.Base64;\n import java.util.List;\n@@ -31,14 +34,13 @@\n import org.apache.http.message.BasicHeader;\n import org.elasticsearch.client.RestClient;\n import org.elasticsearch.client.RestClientBuilder;\n-import org.elasticsearch.client.RestHighLevelClient;\n import org.springframework.beans.factory.DisposableBean;\n import org.springframework.beans.factory.FactoryBean;\n \n /**\n- * Spring {@link FactoryBean} for getting the Elasticsearch's {@link RestHighLevelClient} singleton instance.\n+ * Spring {@link FactoryBean} for getting the {@link ElasticsearchClient} singleton instance.\n  */\n-public class ElasticsearchClientFactoryBean implements FactoryBean<RestHighLevelClient>, DisposableBean {\n+public class ElasticsearchClientFactoryBean implements FactoryBean<ElasticsearchClient>, DisposableBean {\n \n     private final List<HttpHost> hosts;\n \n@@ -52,7 +54,9 @@ public class ElasticsearchClientFactoryBean implements FactoryBean<RestHighLevel\n \n     private String apiKeySecret;\n \n-    private RestHighLevelClient client;\n+    private RestClient restClient;\n+\n+    private ElasticsearchClient client;\n \n     public ElasticsearchClientFactoryBean(final List<HttpHost> hosts) {\n         this.hosts = hosts;\n@@ -91,39 +95,41 @@ public void setApiKeySecret(final String apiKeySecret) {\n     }\n \n     @Override\n-    public RestHighLevelClient getObject() throws Exception {\n+    public ElasticsearchClient getObject() throws Exception {\n         synchronized (this) {\n             if (client == null) {\n-                RestClientBuilder restClient = RestClient.builder(hosts.toArray(new HttpHost[0]));\n+                RestClientBuilder builder = RestClient.builder(hosts.toArray(HttpHost[]::new));\n                 if (username != null && password != null) {\n                     CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n                     credentialsProvider.setCredentials(\n                             AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n-                    restClient.setHttpClientConfigCallback(b -> b.setDefaultCredentialsProvider(credentialsProvider));\n+                    builder.setHttpClientConfigCallback(b -> b.setDefaultCredentialsProvider(credentialsProvider));\n                 } else if (serviceToken != null) {\n-                    restClient.setDefaultHeaders(\n+                    builder.setDefaultHeaders(\n                             new Header[] { new BasicHeader(HttpHeaders.AUTHORIZATION, \"Bearer \" + serviceToken) });\n                 } else if (apiKeyId != null && apiKeySecret != null) {\n                     String apiKeyAuth = Base64.getEncoder().encodeToString(\n                             (apiKeyId + \":\" + apiKeySecret).getBytes(StandardCharsets.UTF_8));\n-                    restClient.setDefaultHeaders(\n+                    builder.setDefaultHeaders(\n                             new Header[] { new BasicHeader(HttpHeaders.AUTHORIZATION, \"ApiKey \" + apiKeyAuth) });\n                 }\n-                client = new RestHighLevelClient(restClient);\n+\n+                restClient = builder.build();\n+                client = new ElasticsearchClient(new RestClientTransport(restClient, new JacksonJsonpMapper()));\n             }\n         }\n         return client;\n     }\n \n     @Override\n     public Class<?> getObjectType() {\n-        return RestHighLevelClient.class;\n+        return ElasticsearchClient.class;\n     }\n \n     @Override\n     public void destroy() throws Exception {\n-        if (client != null) {\n-            client.close();\n+        if (restClient != null) {\n+            restClient.close();\n         }\n     }\n }"},{"sha":"6aaef952796a7f46884227406e6dd2176823b76a","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchIndexManager.java","status":"modified","additions":78,"deletions":99,"changes":177,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java?ref=4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","patch":"@@ -18,30 +18,32 @@\n  */\n package org.apache.syncope.ext.elasticsearch.client;\n \n+import co.elastic.clients.elasticsearch.ElasticsearchClient;\n+import co.elastic.clients.elasticsearch._types.ElasticsearchException;\n+import co.elastic.clients.elasticsearch._types.analysis.CustomNormalizer;\n+import co.elastic.clients.elasticsearch._types.analysis.Normalizer;\n+import co.elastic.clients.elasticsearch._types.mapping.DynamicTemplate;\n+import co.elastic.clients.elasticsearch._types.mapping.KeywordProperty;\n+import co.elastic.clients.elasticsearch._types.mapping.Property;\n+import co.elastic.clients.elasticsearch._types.mapping.TypeMapping;\n+import co.elastic.clients.elasticsearch.core.DeleteRequest;\n+import co.elastic.clients.elasticsearch.core.DeleteResponse;\n+import co.elastic.clients.elasticsearch.core.IndexRequest;\n+import co.elastic.clients.elasticsearch.core.IndexResponse;\n+import co.elastic.clients.elasticsearch.indices.CreateIndexRequest;\n+import co.elastic.clients.elasticsearch.indices.CreateIndexResponse;\n+import co.elastic.clients.elasticsearch.indices.DeleteIndexRequest;\n+import co.elastic.clients.elasticsearch.indices.DeleteIndexResponse;\n+import co.elastic.clients.elasticsearch.indices.IndexSettings;\n+import co.elastic.clients.elasticsearch.indices.IndexSettingsAnalysis;\n import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.elasticsearch.ElasticsearchStatusException;\n-import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n-import org.elasticsearch.action.delete.DeleteRequest;\n-import org.elasticsearch.action.delete.DeleteResponse;\n-import org.elasticsearch.action.get.GetRequest;\n-import org.elasticsearch.action.get.GetResponse;\n-import org.elasticsearch.action.index.IndexRequest;\n-import org.elasticsearch.action.index.IndexResponse;\n-import org.elasticsearch.action.support.master.AcknowledgedResponse;\n-import org.elasticsearch.action.update.UpdateRequest;\n-import org.elasticsearch.action.update.UpdateResponse;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.client.indices.CreateIndexRequest;\n-import org.elasticsearch.client.indices.CreateIndexResponse;\n-import org.elasticsearch.client.indices.GetIndexRequest;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n-import org.elasticsearch.common.xcontent.XContentFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.transaction.event.TransactionalEventListener;\n@@ -53,12 +55,12 @@ public class ElasticsearchIndexManager {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ElasticsearchIndexManager.class);\n \n-    protected final RestHighLevelClient client;\n+    protected final ElasticsearchClient client;\n \n     protected final ElasticsearchUtils elasticsearchUtils;\n \n     public ElasticsearchIndexManager(\n-            final RestHighLevelClient client,\n+            final ElasticsearchClient client,\n             final ElasticsearchUtils elasticsearchUtils) {\n \n         this.client = client;\n@@ -67,127 +69,104 @@ public ElasticsearchIndexManager(\n \n     public boolean existsIndex(final String domain, final AnyTypeKind kind) throws IOException {\n         return client.indices().exists(\n-                new GetIndexRequest(ElasticsearchUtils.getContextDomainName(domain, kind)), RequestOptions.DEFAULT);\n+                new co.elastic.clients.elasticsearch.indices.ExistsRequest.Builder().\n+                        index(ElasticsearchUtils.getContextDomainName(domain, kind)).build()).\n+                value();\n     }\n \n-    public XContentBuilder defaultSettings() throws IOException {\n-        return XContentFactory.jsonBuilder().\n-                startObject().\n-                startObject(\"analysis\").\n-                startObject(\"normalizer\").\n-                startObject(\"string_lowercase\").\n-                field(\"type\", \"custom\").\n-                field(\"char_filter\", new Object[0]).\n-                field(\"filter\").\n-                startArray().\n-                value(\"lowercase\").\n-                endArray().\n-                endObject().\n-                endObject().\n-                endObject().\n-                startObject(\"index\").\n-                field(\"number_of_shards\", elasticsearchUtils.getNumberOfShards()).\n-                field(\"number_of_replicas\", elasticsearchUtils.getNumberOfReplicas()).\n-                endObject().\n-                endObject();\n+    public IndexSettings defaultSettings() throws IOException {\n+        return new IndexSettings.Builder().\n+                analysis(new IndexSettingsAnalysis.Builder().\n+                        normalizer(\"string_lowercase\", new Normalizer.Builder().\n+                                custom(new CustomNormalizer.Builder().\n+                                        charFilter(List.of()).\n+                                        filter(\"lowercase\").\n+                                        build()).\n+                                build()).\n+                        build()).\n+                numberOfShards(elasticsearchUtils.getNumberOfShards()).\n+                numberOfReplicas(elasticsearchUtils.getNumberOfReplicas()).\n+                build();\n     }\n \n-    public XContentBuilder defaultMapping() throws IOException {\n-        return XContentFactory.jsonBuilder().\n-                startObject().\n-                startArray(\"dynamic_templates\").\n-                startObject().\n-                startObject(\"strings\").\n-                field(\"match_mapping_type\", \"string\").\n-                startObject(\"mapping\").\n-                field(\"type\", \"keyword\").\n-                field(\"normalizer\", \"string_lowercase\").\n-                endObject().\n-                endObject().\n-                endObject().\n-                endArray().\n-                endObject();\n+    public TypeMapping defaultMapping() throws IOException {\n+        return new TypeMapping.Builder().\n+                dynamicTemplates(List.of(Map.of(\n+                        \"strings\",\n+                        new DynamicTemplate.Builder().\n+                                matchMappingType(\"string\").\n+                                mapping(new Property.Builder().\n+                                        keyword(new KeywordProperty.Builder().normalizer(\"string_lowercase\").build()).\n+                                        build()).\n+                                build()))).\n+                build();\n     }\n \n     protected CreateIndexResponse doCreateIndex(\n             final String domain,\n             final AnyTypeKind kind,\n-            final XContentBuilder settings,\n-            final XContentBuilder mapping) throws IOException {\n+            final IndexSettings settings,\n+            final TypeMapping mappings) throws IOException {\n \n         return client.indices().create(\n-                new CreateIndexRequest(ElasticsearchUtils.getContextDomainName(domain, kind)).\n+                new CreateIndexRequest.Builder().\n+                        index(ElasticsearchUtils.getContextDomainName(domain, kind)).\n                         settings(settings).\n-                        mapping(mapping), RequestOptions.DEFAULT);\n+                        mappings(mappings).\n+                        build());\n     }\n \n     public void createIndex(\n             final String domain,\n             final AnyTypeKind kind,\n-            final XContentBuilder settings,\n-            final XContentBuilder mapping)\n+            final IndexSettings settings,\n+            final TypeMapping mappings)\n             throws IOException {\n \n         try {\n-            CreateIndexResponse response = doCreateIndex(domain, kind, settings, mapping);\n+            CreateIndexResponse response = doCreateIndex(domain, kind, settings, mappings);\n \n             LOG.debug(\"Successfully created {} for {}: {}\",\n                     ElasticsearchUtils.getContextDomainName(domain, kind), kind.name(), response);\n-        } catch (ElasticsearchStatusException e) {\n+        } catch (ElasticsearchException e) {\n             LOG.debug(\"Could not create index {} because it already exists\",\n                     ElasticsearchUtils.getContextDomainName(domain, kind), e);\n \n             removeIndex(domain, kind);\n-            doCreateIndex(domain, kind, settings, mapping);\n+            doCreateIndex(domain, kind, settings, mappings);\n         }\n     }\n \n     public void removeIndex(final String domain, final AnyTypeKind kind) throws IOException {\n-        AcknowledgedResponse acknowledgedResponse = client.indices().delete(\n-                new DeleteIndexRequest(ElasticsearchUtils.getContextDomainName(domain, kind)), RequestOptions.DEFAULT);\n+        DeleteIndexResponse response = client.indices().delete(\n+                new DeleteIndexRequest.Builder().index(ElasticsearchUtils.getContextDomainName(domain, kind)).build());\n         LOG.debug(\"Successfully removed {}: {}\",\n-                ElasticsearchUtils.getContextDomainName(domain, kind), acknowledgedResponse);\n+                ElasticsearchUtils.getContextDomainName(domain, kind), response);\n     }\n \n     @TransactionalEventListener\n     public void after(final AnyCreatedUpdatedEvent<Any<?>> event) throws IOException {\n-        GetRequest getRequest = new GetRequest(\n-                ElasticsearchUtils.getContextDomainName(\n-                        AuthContextUtils.getDomain(), event.getAny().getType().getKind()),\n-                event.getAny().getKey());\n-        GetResponse getResponse = client.get(getRequest, RequestOptions.DEFAULT);\n-        if (getResponse.isExists()) {\n-            LOG.debug(\"About to update index for {}\", event.getAny());\n-\n-            UpdateRequest request = new UpdateRequest(\n-                    ElasticsearchUtils.getContextDomainName(\n-                            AuthContextUtils.getDomain(), event.getAny().getType().getKind()),\n-                    event.getAny().getKey()).\n-                    retryOnConflict(elasticsearchUtils.getRetryOnConflict()).\n-                    doc(elasticsearchUtils.builder(event.getAny(), event.getDomain()));\n-            UpdateResponse response = client.update(request, RequestOptions.DEFAULT);\n-            LOG.debug(\"Index successfully updated for {}: {}\", event.getAny(), response);\n-        } else {\n-            LOG.debug(\"About to create index for {}\", event.getAny());\n-\n-            IndexRequest request = new IndexRequest(\n-                    ElasticsearchUtils.getContextDomainName(\n-                            AuthContextUtils.getDomain(), event.getAny().getType().getKind())).\n-                    id(event.getAny().getKey()).\n-                    source(elasticsearchUtils.builder(event.getAny(), event.getDomain()));\n-            IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n-            LOG.debug(\"Index successfully created for {}: {}\", event.getAny(), response);\n-        }\n+        String index = ElasticsearchUtils.getContextDomainName(\n+                AuthContextUtils.getDomain(), event.getAny().getType().getKind());\n+\n+        IndexRequest<Map<String, Object>> request = new IndexRequest.Builder<Map<String, Object>>().\n+                index(index).\n+                id(event.getAny().getKey()).\n+                document(elasticsearchUtils.document(event.getAny(), event.getDomain())).\n+                build();\n+        IndexResponse response = client.index(request);\n+        LOG.debug(\"Index successfully created or updated for {}: {}\", event.getAny(), response);\n     }\n \n     @TransactionalEventListener\n     public void after(final AnyDeletedEvent event) throws IOException {\n         LOG.debug(\"About to delete index for {}[{}]\", event.getAnyTypeKind(), event.getAnyKey());\n \n-        DeleteRequest request = new DeleteRequest(\n-                ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), event.getAnyTypeKind()),\n-                event.getAnyKey());\n-        DeleteResponse response = client.delete(request, RequestOptions.DEFAULT);\n+        DeleteRequest request = new DeleteRequest.Builder().index(\n+                ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), event.getAnyTypeKind())).\n+                id(event.getAnyKey()).\n+                build();\n+        DeleteResponse response = client.delete(request);\n         LOG.debug(\"Index successfully deleted for {}[{}]: {}\",\n                 event.getAnyTypeKind(), event.getAnyKey(), response);\n     }"},{"sha":"54d238519e09413df274dbc2548b79edf5f2ba0b","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":55,"deletions":63,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","patch":"@@ -21,8 +21,10 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -37,8 +39,6 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n-import org.elasticsearch.common.xcontent.XContentFactory;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n@@ -60,9 +60,9 @@ public static String getContextDomainName(final String domain, final AnyTypeKind\n \n     protected int retryOnConflict = 5;\n \n-    protected int numberOfShards = 1;\n+    protected String numberOfShards = \"1\";\n \n-    protected int numberOfReplicas = 1;\n+    protected String numberOfReplicas = \"1\";\n \n     public ElasticsearchUtils(final UserDAO userDAO, final GroupDAO groupDAO, final AnyObjectDAO anyObjectDAO) {\n         this.userDAO = userDAO;\n@@ -86,32 +86,32 @@ public int getRetryOnConflict() {\n         return retryOnConflict;\n     }\n \n-    public int getNumberOfShards() {\n+    public String getNumberOfShards() {\n         return numberOfShards;\n     }\n \n     public void setNumberOfShards(final int numberOfShards) {\n-        this.numberOfShards = numberOfShards;\n+        this.numberOfShards = String.valueOf(numberOfShards);\n     }\n \n-    public int getNumberOfReplicas() {\n+    public String getNumberOfReplicas() {\n         return numberOfReplicas;\n     }\n \n     public void setNumberOfReplicas(final int numberOfReplicas) {\n-        this.numberOfReplicas = numberOfReplicas;\n+        this.numberOfReplicas = String.valueOf(numberOfReplicas);\n     }\n \n     /**\n-     * Returns the builder specialized with content from the provided any.\n+     * Returns the document specialized with content from the provided any.\n      *\n      * @param any user, group or any object to index\n      * @param domain tenant information\n-     * @return builder specialized with content from the provided any\n+     * @return document specialized with content from the provided any\n      * @throws IOException in case of errors\n      */\n     @Transactional\n-    public XContentBuilder builder(final Any<?> any, final String domain) throws IOException {\n+    public Map<String, Object> document(final Any<?> any, final String domain) throws IOException {\n         Set<String> resources = new HashSet<>();\n         List<String> dynRealms = new ArrayList<>();\n         AuthContextUtils.callAsAdmin(domain, () -> {\n@@ -128,28 +128,27 @@ public XContentBuilder builder(final Any<?> any, final String domain) throws IOE\n             return null;\n         });\n \n-        XContentBuilder builder = XContentFactory.jsonBuilder().\n-                startObject().\n-                field(\"id\", any.getKey()).\n-                field(\"realm\", any.getRealm().getFullPath()).\n-                field(\"anyType\", any.getType().getKey()).\n-                field(\"creationDate\", any.getCreationDate()).\n-                field(\"creationContext\", any.getCreationContext()).\n-                field(\"creator\", any.getCreator()).\n-                field(\"lastChangeDate\", any.getLastChangeDate()).\n-                field(\"lastModifier\", any.getLastModifier()).\n-                field(\"lastChangeContext\", any.getLastChangeContext()).\n-                field(\"status\", any.getStatus()).\n-                field(\"resources\", resources).\n-                field(\"dynRealms\", dynRealms);\n+        Map<String, Object> builder = new HashMap<>();\n+        builder.put(\"id\", any.getKey());\n+        builder.put(\"realm\", any.getRealm().getFullPath());\n+        builder.put(\"anyType\", any.getType().getKey());\n+        builder.put(\"creationDate\", any.getCreationDate());\n+        builder.put(\"creationContext\", any.getCreationContext());\n+        builder.put(\"creator\", any.getCreator());\n+        builder.put(\"lastChangeDate\", any.getLastChangeDate());\n+        builder.put(\"lastModifier\", any.getLastModifier());\n+        builder.put(\"lastChangeContext\", any.getLastChangeContext());\n+        builder.put(\"status\", any.getStatus());\n+        builder.put(\"resources\", resources);\n+        builder.put(\"dynRealms\", dynRealms);\n \n         if (any instanceof AnyObject) {\n             AnyObject anyObject = ((AnyObject) any);\n-            builder = builder.field(\"name\", anyObject.getName());\n+            builder.put(\"name\", anyObject.getName());\n \n             Collection<String> memberships = AuthContextUtils.callAsAdmin(\n                     domain, () -> anyObjectDAO.findAllGroupKeys(anyObject));\n-            builder = builder.field(\"memberships\", memberships);\n+            builder.put(\"memberships\", memberships);\n \n             List<String> relationships = new ArrayList<>();\n             List<String> relationshipTypes = new ArrayList<>();\n@@ -160,18 +159,18 @@ public XContentBuilder builder(final Any<?> any, final String domain) throws IOE\n                 });\n                 return null;\n             });\n-            builder = builder.field(\"relationships\", relationships);\n-            builder = builder.field(\"relationshipTypes\", relationshipTypes);\n+            builder.put(\"relationships\", relationships);\n+            builder.put(\"relationshipTypes\", relationshipTypes);\n \n-            builder = customizeBuilder(builder, anyObject, domain);\n+            ElasticsearchUtils.this.customizeDocument(builder, anyObject, domain);\n         } else if (any instanceof Group) {\n             Group group = ((Group) any);\n-            builder = builder.field(\"name\", group.getName());\n+            builder.put(\"name\", group.getName());\n             if (group.getUserOwner() != null) {\n-                builder = builder.field(\"userOwner\", group.getUserOwner().getKey());\n+                builder.put(\"userOwner\", group.getUserOwner().getKey());\n             }\n             if (group.getGroupOwner() != null) {\n-                builder = builder.field(\"groupOwner\", group.getGroupOwner().getKey());\n+                builder.put(\"groupOwner\", group.getGroupOwner().getKey());\n             }\n \n             Set<String> members = new HashSet<>();\n@@ -184,20 +183,19 @@ public XContentBuilder builder(final Any<?> any, final String domain) throws IOE\n                 members.addAll(groupDAO.findADynMembers(group));\n                 return null;\n             });\n-            builder = builder.field(\"members\", members);\n+            builder.put(\"members\", members);\n \n-            builder = customizeBuilder(builder, group, domain);\n+            ElasticsearchUtils.this.customizeDocument(builder, group, domain);\n         } else if (any instanceof User) {\n             User user = ((User) any);\n-            builder = builder.\n-                    field(\"username\", user.getUsername()).\n-                    field(\"token\", user.getToken()).\n-                    field(\"tokenExpireTime\", user.getTokenExpireTime()).\n-                    field(\"changePwdDate\", user.getChangePwdDate()).\n-                    field(\"failedLogins\", user.getFailedLogins()).\n-                    field(\"lastLoginDate\", user.getLastLoginDate()).\n-                    field(\"suspended\", user.isSuspended()).\n-                    field(\"mustChangePassword\", user.isMustChangePassword());\n+            builder.put(\"username\", user.getUsername());\n+            builder.put(\"token\", user.getToken());\n+            builder.put(\"tokenExpireTime\", user.getTokenExpireTime());\n+            builder.put(\"changePwdDate\", user.getChangePwdDate());\n+            builder.put(\"failedLogins\", user.getFailedLogins());\n+            builder.put(\"lastLoginDate\", user.getLastLoginDate());\n+            builder.put(\"suspended\", user.isSuspended());\n+            builder.put(\"mustChangePassword\", user.isMustChangePassword());\n \n             List<String> roles = new ArrayList<>();\n             Set<String> privileges = new HashSet<>();\n@@ -208,23 +206,23 @@ public XContentBuilder builder(final Any<?> any, final String domain) throws IOE\n                 });\n                 return null;\n             });\n-            builder = builder.field(\"roles\", roles);\n-            builder = builder.field(\"privileges\", privileges);\n+            builder.put(\"roles\", roles);\n+            builder.put(\"privileges\", privileges);\n \n             Collection<String> memberships = AuthContextUtils.callAsAdmin(\n                     domain, () -> userDAO.findAllGroupKeys(user));\n-            builder = builder.field(\"memberships\", memberships);\n+            builder.put(\"memberships\", memberships);\n \n             List<String> relationships = new ArrayList<>();\n             Set<String> relationshipTypes = new HashSet<>();\n             user.getRelationships().forEach(relationship -> {\n                 relationships.add(relationship.getRightEnd().getKey());\n                 relationshipTypes.add(relationship.getType().getKey());\n             });\n-            builder = builder.field(\"relationships\", relationships);\n-            builder = builder.field(\"relationshipTypes\", relationshipTypes);\n+            builder.put(\"relationships\", relationships);\n+            builder.put(\"relationshipTypes\", relationshipTypes);\n \n-            builder = customizeBuilder(builder, user, domain);\n+            customizeDocument(builder, user, domain);\n         }\n \n         for (PlainAttr<?> plainAttr : any.getPlainAttrs()) {\n@@ -235,29 +233,23 @@ public XContentBuilder builder(final Any<?> any, final String domain) throws IOE\n                 values.add(plainAttr.getUniqueValue().getValue());\n             }\n \n-            builder = builder.field(plainAttr.getSchema().getKey(), values.size() == 1 ? values.get(0) : values);\n+            builder.put(plainAttr.getSchema().getKey(), values.size() == 1 ? values.get(0) : values);\n         }\n \n-        return builder.endObject();\n+        return builder;\n     }\n \n-    protected XContentBuilder customizeBuilder(\n-            final XContentBuilder builder, final AnyObject anyObject, final String domain)\n+    protected void customizeDocument(\n+            final Map<String, Object> builder, final AnyObject anyObject, final String domain)\n             throws IOException {\n-\n-        return builder;\n     }\n \n-    protected XContentBuilder customizeBuilder(\n-            final XContentBuilder builder, final Group group, final String domain)\n+    protected void customizeDocument(\n+            final Map<String, Object> builder, final Group group, final String domain)\n             throws IOException {\n-\n-        return builder;\n     }\n \n-    protected XContentBuilder customizeBuilder(final XContentBuilder builder, final User user, final String domain)\n+    protected void customizeDocument(final Map<String, Object> builder, final User user, final String domain)\n             throws IOException {\n-\n-        return builder;\n     }\n }"},{"sha":"3c935e8949624d513f4649a75c3f8a41730b0f6d","filename":"ext/elasticsearch/persistence-jpa/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fpom.xml?ref=4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","patch":"@@ -66,6 +66,11 @@ under the License.\n       <artifactId>mockito-junit-jupiter</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"ccc8421275db74ccf2ac7de4ad2ea60e2699120d","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/ElasticsearchPersistenceContext.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FElasticsearchPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FElasticsearchPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FElasticsearchPersistenceContext.java?ref=4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearchDAO;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchIndexManager;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n-import org.elasticsearch.client.RestHighLevelClient;\n+import co.elastic.clients.elasticsearch.ElasticsearchClient;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n@@ -59,7 +59,7 @@ public AnySearchDAO anySearchDAO(\n             final PlainSchemaDAO schemaDAO,\n             final EntityFactory entityFactory,\n             final AnyUtilsFactory anyUtilsFactory,\n-            final RestHighLevelClient client,\n+            final ElasticsearchClient client,\n             final @Lazy ElasticsearchUtils elasticsearchUtils) {\n \n         return new ElasticsearchAnySearchDAO("},{"sha":"bd014ba24ffbe3e154b483731771324f7cfee7ef","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":221,"deletions":156,"changes":377,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","patch":"@@ -18,15 +18,29 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import co.elastic.clients.elasticsearch.ElasticsearchClient;\n+import co.elastic.clients.elasticsearch._types.FieldSort;\n+import co.elastic.clients.elasticsearch._types.FieldValue;\n+import co.elastic.clients.elasticsearch._types.SearchType;\n+import co.elastic.clients.elasticsearch._types.SortOptions;\n+import co.elastic.clients.elasticsearch._types.SortOrder;\n+import co.elastic.clients.elasticsearch._types.query_dsl.MatchAllQuery;\n+import co.elastic.clients.elasticsearch._types.query_dsl.MatchNoneQuery;\n+import co.elastic.clients.elasticsearch._types.query_dsl.Query;\n+import co.elastic.clients.elasticsearch._types.query_dsl.QueryBuilders;\n+import co.elastic.clients.elasticsearch.core.CountRequest;\n+import co.elastic.clients.elasticsearch.core.SearchRequest;\n+import co.elastic.clients.elasticsearch.core.search.Hit;\n+import co.elastic.clients.json.JsonData;\n import java.io.IOException;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n@@ -67,30 +81,18 @@\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.action.search.SearchType;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.client.core.CountRequest;\n-import org.elasticsearch.index.query.DisMaxQueryBuilder;\n-import org.elasticsearch.index.query.MatchAllQueryBuilder;\n-import org.elasticsearch.index.query.MatchNoneQueryBuilder;\n-import org.elasticsearch.index.query.QueryBuilder;\n-import org.elasticsearch.index.query.QueryBuilders;\n-import org.elasticsearch.search.SearchHit;\n-import org.elasticsearch.search.builder.SearchSourceBuilder;\n-import org.elasticsearch.search.sort.FieldSortBuilder;\n-import org.elasticsearch.search.sort.SortBuilder;\n-import org.elasticsearch.search.sort.SortOrder;\n+import org.springframework.util.CollectionUtils;\n \n /**\n  * Search engine implementation for users, groups and any objects, based on Elasticsearch.\n  */\n public class ElasticsearchAnySearchDAO extends AbstractAnySearchDAO {\n \n-    protected static final QueryBuilder MATCH_NONE_QUERY_BUILDER = new MatchNoneQueryBuilder();\n+    protected static final Query MATCH_NONE_QUERY =\n+            new Query.Builder().matchNone(new MatchNoneQuery.Builder().build()).build();\n \n-    protected static final QueryBuilder MATCH_ALL_QUERY_BUILDER = new MatchAllQueryBuilder();\n+    protected static final Query MATCH_ALL_QUERY =\n+            new Query.Builder().matchAll(new MatchAllQuery.Builder().build()).build();\n \n     protected static final char[] ELASTICSEARCH_REGEX_CHARS = new char[] {\n         '.', '?', '+', '*', '|', '{', '}', '[', ']', '(', ')', '\"', '\\\\', '&' };\n@@ -107,7 +109,7 @@ protected static String escapeForLikeRegex(final char c) {\n         return output.toString();\n     }\n \n-    protected final RestHighLevelClient client;\n+    protected final ElasticsearchClient client;\n \n     protected final ElasticsearchUtils elasticsearchUtils;\n \n@@ -120,21 +122,20 @@ public ElasticsearchAnySearchDAO(\n             final PlainSchemaDAO schemaDAO,\n             final EntityFactory entityFactory,\n             final AnyUtilsFactory anyUtilsFactory,\n-            final RestHighLevelClient client,\n+            final ElasticsearchClient client,\n             final ElasticsearchUtils elasticsearchUtils) {\n \n         super(realmDAO, dynRealmDAO, userDAO, groupDAO, anyObjectDAO, schemaDAO, entityFactory, anyUtilsFactory);\n         this.client = client;\n         this.elasticsearchUtils = elasticsearchUtils;\n     }\n \n-    protected Triple<Optional<QueryBuilder>, Set<String>, Set<String>> getAdminRealmsFilter(\n+    protected Triple<Optional<Query>, Set<String>, Set<String>> getAdminRealmsFilter(\n             final AnyTypeKind kind, final Set<String> adminRealms) {\n \n-        DisMaxQueryBuilder builder = QueryBuilders.disMaxQuery();\n-\n         Set<String> dynRealmKeys = new HashSet<>();\n         Set<String> groupOwners = new HashSet<>();\n+        List<Query> queries = new ArrayList<>();\n \n         adminRealms.forEach(realmPath -> {\n             Optional<Pair<String, String>> goRealm = RealmUtils.parseGroupOwnerRealm(realmPath);\n@@ -147,68 +148,77 @@ protected Triple<Optional<QueryBuilder>, Set<String>, Set<String>> getAdminRealm\n                     noRealm.getElements().add(\"Invalid realm specified: \" + realmPath);\n                     throw noRealm;\n                 } else {\n-                    realmDAO.findDescendants(realm).forEach(\n-                            descendant -> builder.add(QueryBuilders.termQuery(\"realm\", descendant.getFullPath())));\n+                    realmDAO.findDescendants(realm).forEach(descendant -> queries.add(\n+                            new Query.Builder().term(QueryBuilders.term().\n+                                    field(\"realm\").value(FieldValue.of(descendant.getFullPath())).build()).\n+                                    build()));\n                 }\n             } else {\n                 DynRealm dynRealm = dynRealmDAO.find(realmPath);\n                 if (dynRealm == null) {\n                     LOG.warn(\"Ignoring invalid dynamic realm {}\", realmPath);\n                 } else {\n                     dynRealmKeys.add(dynRealm.getKey());\n-                    builder.add(QueryBuilders.termQuery(\"dynRealm\", dynRealm.getKey()));\n+                    queries.add(new Query.Builder().term(QueryBuilders.term().\n+                            field(\"dynRealm\").value(FieldValue.of(dynRealm.getKey())).build()).\n+                            build());\n                 }\n             }\n         });\n \n         return Triple.of(\n-                dynRealmKeys.isEmpty() && groupOwners.isEmpty() ? Optional.of(builder) : Optional.empty(),\n+                dynRealmKeys.isEmpty() && groupOwners.isEmpty()\n+                ? Optional.of(new Query.Builder().disMax(QueryBuilders.disMax().queries(queries).build()).build())\n+                : Optional.empty(),\n                 dynRealmKeys,\n                 groupOwners);\n     }\n \n-    protected QueryBuilder getQueryBuilder(\n+    protected Query getQuery(\n             final Set<String> adminRealms,\n             final SearchCond cond,\n             final AnyTypeKind kind) {\n \n-        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter = getAdminRealmsFilter(kind, adminRealms);\n-        QueryBuilder queryBuilder;\n+        Triple<Optional<Query>, Set<String>, Set<String>> filter = getAdminRealmsFilter(kind, adminRealms);\n+        Query query;\n         if (SyncopeConstants.FULL_ADMIN_REALMS.equals(adminRealms)) {\n-            queryBuilder = getQueryBuilder(cond, kind);\n+            query = getQuery(cond, kind);\n         } else {\n-            queryBuilder = getQueryBuilder(buildEffectiveCond(cond, filter.getMiddle(), filter.getRight(), kind), kind);\n+            query = getQuery(buildEffectiveCond(cond, filter.getMiddle(), filter.getRight(), kind), kind);\n \n             if (filter.getLeft().isPresent()) {\n-                queryBuilder = QueryBuilders.boolQuery().\n-                        must(filter.getLeft().get()).\n-                        must(queryBuilder);\n+                query = new Query.Builder().bool(\n+                        QueryBuilders.bool().\n+                                must(filter.getLeft().get()).\n+                                must(query).build()).\n+                        build();\n             }\n         }\n \n-        return queryBuilder;\n+        return query;\n     }\n \n     @Override\n     protected int doCount(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind kind) {\n-        CountRequest request = new CountRequest(\n-                ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), kind)).\n-                query(getQueryBuilder(adminRealms, cond, kind));\n+        CountRequest request = new CountRequest.Builder().\n+                index(ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), kind)).\n+                query(getQuery(adminRealms, cond, kind)).\n+                build();\n         try {\n-            return (int) client.count(request, RequestOptions.DEFAULT).getCount();\n+            return (int) client.count(request).count();\n         } catch (IOException e) {\n             LOG.error(\"Search error\", e);\n             return 0;\n         }\n     }\n \n-    protected List<SortBuilder<?>> sortBuilders(\n+    protected List<SortOptions> sortBuilders(\n             final AnyTypeKind kind,\n             final List<OrderByClause> orderBy) {\n \n         AnyUtils anyUtils = anyUtilsFactory.getInstance(kind);\n \n-        List<SortBuilder<?>> builders = new ArrayList<>();\n+        List<SortOptions> options = new ArrayList<>();\n         orderBy.forEach(clause -> {\n             String sortName = null;\n \n@@ -228,10 +238,16 @@ protected List<SortBuilder<?>> sortBuilders(\n             if (sortName == null) {\n                 LOG.warn(\"Cannot build any valid clause from {}\", clause);\n             } else {\n-                builders.add(new FieldSortBuilder(sortName).order(SortOrder.valueOf(clause.getDirection().name())));\n+                options.add(new SortOptions.Builder().field(\n+                        new FieldSort.Builder().\n+                                field(sortName).\n+                                order(clause.getDirection() == OrderByClause.Direction.ASC\n+                                        ? SortOrder.Asc : SortOrder.Desc).\n+                                build()).\n+                        build());\n             }\n         });\n-        return builders;\n+        return options;\n     }\n \n     @Override\n@@ -243,229 +259,252 @@ protected <T extends Any<?>> List<T> doSearch(\n             final List<OrderByClause> orderBy,\n             final AnyTypeKind kind) {\n \n-        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().\n-                query(getQueryBuilder(adminRealms, cond, kind)).\n+        SearchRequest request = new SearchRequest.Builder().\n+                index(ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), kind)).\n+                searchType(SearchType.QueryThenFetch).\n+                query(getQuery(adminRealms, cond, kind)).\n                 from(itemsPerPage * (page <= 0 ? 0 : page - 1)).\n-                size(itemsPerPage < 0 ? elasticsearchUtils.getIndexMaxResultWindow() : itemsPerPage);\n-        sortBuilders(kind, orderBy).forEach(sourceBuilder::sort);\n-\n-        SearchRequest request = new SearchRequest(\n-                ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), kind)).\n-                searchType(SearchType.QUERY_THEN_FETCH).\n-                source(sourceBuilder);\n+                size(itemsPerPage < 0 ? elasticsearchUtils.getIndexMaxResultWindow() : itemsPerPage).\n+                sort(sortBuilders(kind, orderBy)).\n+                build();\n \n-        SearchHit[] esResult = null;\n+        @SuppressWarnings(\"rawtypes\")\n+        List<Hit<Map>> esResult = null;\n         try {\n-            esResult = client.search(request, RequestOptions.DEFAULT).getHits().getHits();\n+            esResult = client.search(request, Map.class).hits().hits();\n         } catch (Exception e) {\n             LOG.error(\"While searching in Elasticsearch\", e);\n         }\n \n-        return ArrayUtils.isEmpty(esResult)\n+        return CollectionUtils.isEmpty(esResult)\n                 ? List.of()\n-                : buildResult(Stream.of(esResult).map(SearchHit::getId).collect(Collectors.toList()), kind);\n+                : buildResult(esResult.stream().map(Hit::id).collect(Collectors.toList()), kind);\n     }\n \n-    protected QueryBuilder getQueryBuilder(final SearchCond cond, final AnyTypeKind kind) {\n-        QueryBuilder builder = null;\n+    protected Query getQuery(final SearchCond cond, final AnyTypeKind kind) {\n+        Query query = null;\n \n         switch (cond.getType()) {\n             case LEAF:\n             case NOT_LEAF:\n-                builder = cond.getLeaf(AnyTypeCond.class).\n+                query = cond.getLeaf(AnyTypeCond.class).\n                         filter(leaf -> AnyTypeKind.ANY_OBJECT == kind).\n-                        map(this::getQueryBuilder).\n+                        map(this::getQuery).\n                         orElse(null);\n \n-                if (builder == null) {\n-                    builder = cond.getLeaf(RelationshipTypeCond.class).\n+                if (query == null) {\n+                    query = cond.getLeaf(RelationshipTypeCond.class).\n                             filter(leaf -> AnyTypeKind.GROUP != kind).\n-                            map(this::getQueryBuilder).\n+                            map(this::getQuery).\n                             orElse(null);\n                 }\n \n-                if (builder == null) {\n-                    builder = cond.getLeaf(RelationshipCond.class).\n+                if (query == null) {\n+                    query = cond.getLeaf(RelationshipCond.class).\n                             filter(leaf -> AnyTypeKind.GROUP != kind).\n-                            map(this::getQueryBuilder).\n+                            map(this::getQuery).\n                             orElse(null);\n                 }\n \n-                if (builder == null) {\n-                    builder = cond.getLeaf(MembershipCond.class).\n+                if (query == null) {\n+                    query = cond.getLeaf(MembershipCond.class).\n                             filter(leaf -> AnyTypeKind.GROUP != kind).\n-                            map(this::getQueryBuilder).\n+                            map(this::getQuery).\n                             orElse(null);\n                 }\n \n-                if (builder == null) {\n-                    builder = cond.getLeaf(MemberCond.class).\n+                if (query == null) {\n+                    query = cond.getLeaf(MemberCond.class).\n                             filter(leaf -> AnyTypeKind.GROUP == kind).\n-                            map(this::getQueryBuilder).\n+                            map(this::getQuery).\n                             orElse(null);\n                 }\n \n-                if (builder == null) {\n-                    builder = cond.getLeaf(AssignableCond.class).\n-                            map(this::getQueryBuilder).\n+                if (query == null) {\n+                    query = cond.getLeaf(AssignableCond.class).\n+                            map(this::getQuery).\n                             orElse(null);\n                 }\n \n-                if (builder == null) {\n-                    builder = cond.getLeaf(RoleCond.class).\n+                if (query == null) {\n+                    query = cond.getLeaf(RoleCond.class).\n                             filter(leaf -> AnyTypeKind.USER == kind).\n-                            map(this::getQueryBuilder).\n+                            map(this::getQuery).\n                             orElse(null);\n                 }\n \n-                if (builder == null) {\n-                    builder = cond.getLeaf(PrivilegeCond.class).\n+                if (query == null) {\n+                    query = cond.getLeaf(PrivilegeCond.class).\n                             filter(leaf -> AnyTypeKind.USER == kind).\n-                            map(this::getQueryBuilder).\n+                            map(this::getQuery).\n                             orElse(null);\n                 }\n \n-                if (builder == null) {\n-                    builder = cond.getLeaf(DynRealmCond.class).\n-                            map(this::getQueryBuilder).\n+                if (query == null) {\n+                    query = cond.getLeaf(DynRealmCond.class).\n+                            map(this::getQuery).\n                             orElse(null);\n                 }\n \n-                if (builder == null) {\n-                    builder = cond.getLeaf(ResourceCond.class).\n-                            map(this::getQueryBuilder).\n+                if (query == null) {\n+                    query = cond.getLeaf(ResourceCond.class).\n+                            map(this::getQuery).\n                             orElse(null);\n                 }\n \n-                if (builder == null) {\n+                if (query == null) {\n                     Optional<AnyCond> anyCond = cond.getLeaf(AnyCond.class);\n                     if (anyCond.isPresent()) {\n-                        builder = getQueryBuilder(anyCond.get(), kind);\n+                        query = getQuery(anyCond.get(), kind);\n                     } else {\n-                        builder = cond.getLeaf(AttrCond.class).\n-                                map(leaf -> getQueryBuilder(leaf, kind)).\n+                        query = cond.getLeaf(AttrCond.class).\n+                                map(leaf -> getQuery(leaf, kind)).\n                                 orElse(null);\n                     }\n                 }\n \n                 // allow for additional search conditions\n-                if (builder == null) {\n-                    builder = getQueryBuilderForCustomConds(cond, kind);\n+                if (query == null) {\n+                    query = getQueryForCustomConds(cond, kind);\n                 }\n \n-                if (builder == null) {\n-                    builder = MATCH_NONE_QUERY_BUILDER;\n+                if (query == null) {\n+                    query = MATCH_NONE_QUERY;\n                 }\n \n                 if (cond.getType() == SearchCond.Type.NOT_LEAF) {\n-                    builder = QueryBuilders.boolQuery().mustNot(builder);\n+                    query = new Query.Builder().bool(QueryBuilders.bool().mustNot(query).build()).build();\n                 }\n                 break;\n \n             case AND:\n-                builder = QueryBuilders.boolQuery().\n-                        must(getQueryBuilder(cond.getLeft(), kind)).\n-                        must(getQueryBuilder(cond.getRight(), kind));\n+                query = new Query.Builder().bool(QueryBuilders.bool().\n+                        must(getQuery(cond.getLeft(), kind)).must(getQuery(cond.getRight(), kind)).build()).\n+                        build();\n                 break;\n \n             case OR:\n-                builder = QueryBuilders.disMaxQuery().\n-                        add(getQueryBuilder(cond.getLeft(), kind)).\n-                        add(getQueryBuilder(cond.getRight(), kind));\n+                query = new Query.Builder().disMax(QueryBuilders.disMax().\n+                        queries(getQuery(cond.getLeft(), kind), getQuery(cond.getRight(), kind)).build()).\n+                        build();\n                 break;\n \n             default:\n         }\n \n-        return builder;\n+        return query;\n     }\n \n-    protected QueryBuilder getQueryBuilder(final AnyTypeCond cond) {\n-        return QueryBuilders.termQuery(\"anyType\", cond.getAnyTypeKey());\n+    protected Query getQuery(final AnyTypeCond cond) {\n+        return new Query.Builder().term(QueryBuilders.term().\n+                field(\"anyType\").value(FieldValue.of(cond.getAnyTypeKey())).build()).\n+                build();\n     }\n \n-    protected QueryBuilder getQueryBuilder(final RelationshipTypeCond cond) {\n-        return QueryBuilders.termQuery(\"relationshipTypes\", cond.getRelationshipTypeKey());\n+    protected Query getQuery(final RelationshipTypeCond cond) {\n+        return new Query.Builder().term(QueryBuilders.term().\n+                field(\"relationshipTypes\").value(FieldValue.of(cond.getRelationshipTypeKey())).build()).\n+                build();\n     }\n \n-    protected QueryBuilder getQueryBuilder(final RelationshipCond cond) {\n+    protected Query getQuery(final RelationshipCond cond) {\n         String rightAnyObjectKey;\n         try {\n             rightAnyObjectKey = check(cond);\n         } catch (IllegalArgumentException e) {\n-            return MATCH_NONE_QUERY_BUILDER;\n+            return MATCH_NONE_QUERY;\n         }\n \n-        return QueryBuilders.termQuery(\"relationships\", rightAnyObjectKey);\n+        return new Query.Builder().term(QueryBuilders.term().\n+                field(\"relationships\").value(FieldValue.of(rightAnyObjectKey)).build()).\n+                build();\n     }\n \n-    protected QueryBuilder getQueryBuilder(final MembershipCond cond) {\n+    protected Query getQuery(final MembershipCond cond) {\n         List<String> groupKeys;\n         try {\n             groupKeys = check(cond);\n         } catch (IllegalArgumentException e) {\n-            return MATCH_NONE_QUERY_BUILDER;\n+            return MATCH_NONE_QUERY;\n         }\n \n-        if (groupKeys.size() == 1) {\n-            return QueryBuilders.termQuery(\"memberships\", groupKeys.get(0));\n+        List<Query> membershipQueries = groupKeys.stream().\n+                map(key -> new Query.Builder().term(QueryBuilders.term().\n+                field(\"memberships\").value(FieldValue.of(key)).build()).\n+                build()).collect(Collectors.toList());\n+        if (membershipQueries.size() == 1) {\n+            return membershipQueries.get(0);\n         }\n \n-        DisMaxQueryBuilder builder = QueryBuilders.disMaxQuery();\n-        groupKeys.forEach(key -> builder.add(QueryBuilders.termQuery(\"memberships\", key)));\n-        return builder;\n+        return new Query.Builder().disMax(QueryBuilders.disMax().queries(membershipQueries).build()).build();\n     }\n \n-    protected QueryBuilder getQueryBuilder(final AssignableCond cond) {\n+    protected Query getQuery(final AssignableCond cond) {\n         Realm realm;\n         try {\n             realm = check(cond);\n         } catch (IllegalArgumentException e) {\n-            return MATCH_NONE_QUERY_BUILDER;\n+            return MATCH_NONE_QUERY;\n         }\n \n-        DisMaxQueryBuilder builder = QueryBuilders.disMaxQuery();\n+        List<Query> queries = new ArrayList<>();\n         if (cond.isFromGroup()) {\n             realmDAO.findDescendants(realm).forEach(\n-                    current -> builder.add(QueryBuilders.termQuery(\"realm\", current.getFullPath())));\n+                    current -> queries.add(new Query.Builder().term(QueryBuilders.term().\n+                            field(\"realm\").value(FieldValue.of(current.getFullPath())).build()).\n+                            build()));\n         } else {\n             for (Realm current = realm; current.getParent() != null; current = current.getParent()) {\n-                builder.add(QueryBuilders.termQuery(\"realm\", current.getFullPath()));\n+                queries.add(new Query.Builder().term(QueryBuilders.term().\n+                        field(\"realm\").value(FieldValue.of(current.getFullPath())).build()).\n+                        build());\n             }\n-            builder.add(QueryBuilders.termQuery(\"realm\", realmDAO.getRoot().getFullPath()));\n+            queries.add(new Query.Builder().term(QueryBuilders.term().\n+                    field(\"realm\").value(FieldValue.of(realmDAO.getRoot().getFullPath())).build()).\n+                    build());\n         }\n \n-        return builder;\n+        return new Query.Builder().disMax(QueryBuilders.disMax().queries(queries).build()).build();\n     }\n \n-    protected QueryBuilder getQueryBuilder(final RoleCond cond) {\n-        return QueryBuilders.termQuery(\"roles\", cond.getRole());\n+    protected Query getQuery(final RoleCond cond) {\n+        return new Query.Builder().term(QueryBuilders.term().\n+                field(\"roles\").value(FieldValue.of(cond.getRole())).build()).\n+                build();\n     }\n \n-    protected QueryBuilder getQueryBuilder(final PrivilegeCond cond) {\n-        return QueryBuilders.termQuery(\"privileges\", cond.getPrivilege());\n+    protected Query getQuery(final PrivilegeCond cond) {\n+        return new Query.Builder().term(QueryBuilders.term().\n+                field(\"privileges\").value(FieldValue.of(cond.getPrivilege())).build()).\n+                build();\n     }\n \n-    protected QueryBuilder getQueryBuilder(final DynRealmCond cond) {\n-        return QueryBuilders.termQuery(\"dynRealms\", cond.getDynRealm());\n+    protected Query getQuery(final DynRealmCond cond) {\n+        return new Query.Builder().term(QueryBuilders.term().\n+                field(\"dynRealms\").value(FieldValue.of(cond.getDynRealm())).build()).\n+                build();\n     }\n \n-    protected QueryBuilder getQueryBuilder(final MemberCond cond) {\n+    protected Query getQuery(final MemberCond cond) {\n         String memberKey;\n         try {\n             memberKey = check(cond);\n         } catch (IllegalArgumentException e) {\n-            return MATCH_NONE_QUERY_BUILDER;\n+            return MATCH_NONE_QUERY;\n         }\n \n-        return QueryBuilders.termQuery(\"members\", memberKey);\n+        return new Query.Builder().term(QueryBuilders.term().\n+                field(\"members\").value(FieldValue.of(memberKey)).build()).\n+                build();\n     }\n \n-    protected QueryBuilder getQueryBuilder(final ResourceCond cond) {\n-        return QueryBuilders.termQuery(\"resources\", cond.getResourceKey());\n+    protected Query getQuery(final ResourceCond cond) {\n+        return new Query.Builder().term(QueryBuilders.term().\n+                field(\"resources\").value(FieldValue.of(cond.getResourceKey())).build()).\n+                build();\n     }\n \n-    protected QueryBuilder fillAttrQuery(\n+    protected Query fillAttrQuery(\n             final PlainSchema schema,\n             final PlainAttrValue attrValue,\n             final AttrCond cond) {\n@@ -474,15 +513,17 @@ protected QueryBuilder fillAttrQuery(\n                 ? attrValue.getDateValue().getTime()\n                 : attrValue.getValue();\n \n-        QueryBuilder builder = MATCH_NONE_QUERY_BUILDER;\n+        Query query = MATCH_NONE_QUERY;\n \n         switch (cond.getType()) {\n             case ISNOTNULL:\n-                builder = QueryBuilders.existsQuery(schema.getKey());\n+                query = new Query.Builder().exists(QueryBuilders.exists().field(schema.getKey()).build()).build();\n                 break;\n \n             case ISNULL:\n-                builder = QueryBuilders.boolQuery().mustNot(QueryBuilders.existsQuery(schema.getKey()));\n+                query = new Query.Builder().bool(QueryBuilders.bool().mustNot(\n+                        new Query.Builder().exists(QueryBuilders.exists().field(schema.getKey()).build()).build()).\n+                        build()).build();\n                 break;\n \n             case ILIKE:\n@@ -499,62 +540,86 @@ protected QueryBuilder fillAttrQuery(\n                         output.append(escapeForLikeRegex(c));\n                     }\n                 }\n-                builder = QueryBuilders.regexpQuery(schema.getKey(), output.toString());\n+                query = new Query.Builder().regexp(QueryBuilders.regexp().\n+                        field(schema.getKey()).value(output.toString()).build()).build();\n                 break;\n \n             case LIKE:\n-                builder = QueryBuilders.wildcardQuery(schema.getKey(), cond.getExpression().replace('%', '*'));\n+                query = new Query.Builder().wildcard(QueryBuilders.wildcard().\n+                        field(schema.getKey()).value(cond.getExpression().replace('%', '*')).build()).build();\n                 break;\n \n             case IEQ:\n-                builder = QueryBuilders.matchQuery(schema.getKey(), cond.getExpression().toLowerCase());\n+                query = new Query.Builder().match(QueryBuilders.match().\n+                        field(schema.getKey()).query(FieldValue.of(cond.getExpression().toLowerCase())).build()).\n+                        build();\n                 break;\n \n             case EQ:\n-                builder = QueryBuilders.termQuery(schema.getKey(), value);\n+                FieldValue fieldValue;\n+                if (value instanceof Double) {\n+                    fieldValue = FieldValue.of((Double) value);\n+                } else if (value instanceof Long) {\n+                    fieldValue = FieldValue.of((Long) value);\n+                } else if (value instanceof Boolean) {\n+                    fieldValue = FieldValue.of((Boolean) value);\n+                } else {\n+                    fieldValue = FieldValue.of(value.toString());\n+                }\n+                query = new Query.Builder().term(QueryBuilders.term().\n+                        field(schema.getKey()).value(fieldValue).build()).\n+                        build();\n                 break;\n \n             case GE:\n-                builder = QueryBuilders.rangeQuery(schema.getKey()).gte(value);\n+                query = new Query.Builder().range(QueryBuilders.range().\n+                        field(schema.getKey()).gte(JsonData.of(value)).build()).\n+                        build();\n                 break;\n \n             case GT:\n-                builder = QueryBuilders.rangeQuery(schema.getKey()).gt(value);\n+                query = new Query.Builder().range(QueryBuilders.range().\n+                        field(schema.getKey()).gt(JsonData.of(value)).build()).\n+                        build();\n                 break;\n \n             case LE:\n-                builder = QueryBuilders.rangeQuery(schema.getKey()).lte(value);\n+                query = new Query.Builder().range(QueryBuilders.range().\n+                        field(schema.getKey()).lte(JsonData.of(value)).build()).\n+                        build();\n                 break;\n \n             case LT:\n-                builder = QueryBuilders.rangeQuery(schema.getKey()).lt(value);\n+                query = new Query.Builder().range(QueryBuilders.range().\n+                        field(schema.getKey()).lt(JsonData.of(value)).build()).\n+                        build();\n                 break;\n \n             default:\n         }\n \n-        return builder;\n+        return query;\n     }\n \n-    protected QueryBuilder getQueryBuilder(final AttrCond cond, final AnyTypeKind kind) {\n+    protected Query getQuery(final AttrCond cond, final AnyTypeKind kind) {\n         Pair<PlainSchema, PlainAttrValue> checked;\n         try {\n             checked = check(cond, kind);\n         } catch (IllegalArgumentException e) {\n-            return MATCH_NONE_QUERY_BUILDER;\n+            return MATCH_NONE_QUERY;\n         }\n \n         return fillAttrQuery(checked.getLeft(), checked.getRight(), cond);\n     }\n \n-    protected QueryBuilder getQueryBuilder(final AnyCond cond, final AnyTypeKind kind) {\n+    protected Query getQuery(final AnyCond cond, final AnyTypeKind kind) {\n         if (JAXRSService.PARAM_REALM.equals(cond.getSchema())\n                 && SyncopeConstants.UUID_PATTERN.matcher(cond.getExpression()).matches()) {\n \n             Realm realm = realmDAO.find(cond.getExpression());\n             if (realm == null) {\n                 LOG.warn(\"Invalid Realm key: {}\", cond.getExpression());\n-                return MATCH_NONE_QUERY_BUILDER;\n+                return MATCH_NONE_QUERY;\n             }\n             cond.setExpression(realm.getFullPath());\n         }\n@@ -563,13 +628,13 @@ protected QueryBuilder getQueryBuilder(final AnyCond cond, final AnyTypeKind kin\n         try {\n             checked = check(cond, kind);\n         } catch (IllegalArgumentException e) {\n-            return MATCH_NONE_QUERY_BUILDER;\n+            return MATCH_NONE_QUERY;\n         }\n \n         return fillAttrQuery(checked.getLeft(), checked.getMiddle(), checked.getRight());\n     }\n \n-    protected QueryBuilder getQueryBuilderForCustomConds(final SearchCond cond, final AnyTypeKind kind) {\n-        return MATCH_ALL_QUERY_BUILDER;\n+    protected Query getQueryForCustomConds(final SearchCond cond, final AnyTypeKind kind) {\n+        return MATCH_ALL_QUERY;\n     }\n }"},{"sha":"770cb766a161dc5cd41a2d5979e9079d12469694","filename":"ext/elasticsearch/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAOTest.java","status":"modified","additions":31,"deletions":27,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java?ref=4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","patch":"@@ -18,11 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n+import co.elastic.clients.elasticsearch._types.FieldValue;\n+import co.elastic.clients.elasticsearch._types.SearchType;\n+import co.elastic.clients.elasticsearch._types.query_dsl.Query;\n+import co.elastic.clients.elasticsearch._types.query_dsl.QueryBuilders;\n+import co.elastic.clients.elasticsearch.core.SearchRequest;\n import java.io.IOException;\n import java.util.List;\n import java.util.Optional;\n@@ -48,11 +54,6 @@\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n-import org.elasticsearch.action.search.SearchRequest;\n-import org.elasticsearch.action.search.SearchType;\n-import org.elasticsearch.index.query.QueryBuilder;\n-import org.elasticsearch.index.query.QueryBuilders;\n-import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.InjectMocks;\n@@ -87,7 +88,7 @@ public class ElasticsearchAnySearchDAOTest {\n     private ElasticsearchAnySearchDAO searchDAO;\n \n     @Test\n-    public void getAdminRealmsFilter_realm() {\n+    public void getAdminRealmsFilter_realm() throws IOException {\n         // 1. mock\n         Realm root = mock(Realm.class);\n         when(root.getFullPath()).thenReturn(SyncopeConstants.ROOT_REALM);\n@@ -97,11 +98,15 @@ public void getAdminRealmsFilter_realm() {\n \n         // 2. test\n         Set<String> adminRealms = Set.of(SyncopeConstants.ROOT_REALM);\n-        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter =\n+        Triple<Optional<Query>, Set<String>, Set<String>> filter =\n                 searchDAO.getAdminRealmsFilter(AnyTypeKind.USER, adminRealms);\n-        assertEquals(\n-                QueryBuilders.disMaxQuery().add(QueryBuilders.termQuery(\"realm\", SyncopeConstants.ROOT_REALM)),\n-                filter.getLeft().get());\n+\n+        assertThat(\n+                new Query.Builder().disMax(QueryBuilders.disMax().queries(\n+                        new Query.Builder().term(QueryBuilders.term().field(\"realm\").value(\n+                                FieldValue.of(SyncopeConstants.ROOT_REALM)).build()).build()).build()).\n+                        build()).\n+                usingRecursiveComparison().isEqualTo(filter.getLeft().get());\n         assertEquals(Set.of(), filter.getMiddle());\n         assertEquals(Set.of(), filter.getRight());\n     }\n@@ -116,7 +121,7 @@ public void getAdminRealmsFilter_dynRealm() {\n \n         // 2. test\n         Set<String> adminRealms = Set.of(\"dyn\");\n-        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter =\n+        Triple<Optional<Query>, Set<String>, Set<String>> filter =\n                 searchDAO.getAdminRealmsFilter(AnyTypeKind.USER, adminRealms);\n         assertFalse(filter.getLeft().isPresent());\n         assertEquals(Set.of(\"dyn\"), filter.getMiddle());\n@@ -126,7 +131,7 @@ public void getAdminRealmsFilter_dynRealm() {\n     @Test\n     public void getAdminRealmsFilter_groupOwner() {\n         Set<String> adminRealms = Set.of(RealmUtils.getGroupOwnerRealm(\"/any\", \"groupKey\"));\n-        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter =\n+        Triple<Optional<Query>, Set<String>, Set<String>> filter =\n                 searchDAO.getAdminRealmsFilter(AnyTypeKind.USER, adminRealms);\n         assertFalse(filter.getLeft().isPresent());\n         assertEquals(Set.of(), filter.getMiddle());\n@@ -156,22 +161,21 @@ public void searchRequest_groupOwner() throws IOException {\n             AnyCond anyCond = new AnyCond(AttrCond.Type.ISNOTNULL);\n             anyCond.setSchema(\"id\");\n \n-            SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().\n-                    query(searchDAO.getQueryBuilder(adminRealms, SearchCond.getLeaf(anyCond), AnyTypeKind.USER)).\n+            SearchRequest request = new SearchRequest.Builder().\n+                    index(ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n+                    searchType(SearchType.QueryThenFetch).\n+                    query(searchDAO.getQuery(adminRealms, SearchCond.getLeaf(anyCond), AnyTypeKind.USER)).\n                     from(1).\n-                    size(10);\n-            searchDAO.sortBuilders(AnyTypeKind.USER, List.of()).forEach(sourceBuilder::sort);\n-\n-            SearchRequest request = new SearchRequest(\n-                    ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n-                    searchType(SearchType.QUERY_THEN_FETCH).\n-                    source(sourceBuilder);\n-\n-            assertEquals(\n-                    QueryBuilders.boolQuery().\n-                            must(QueryBuilders.existsQuery(\"id\")).\n-                            must(QueryBuilders.termQuery(\"memberships\", \"groupKey\")),\n-                    request.source().query());\n+                    size(10).\n+                    build();\n+\n+            assertThat(\n+                    new Query.Builder().bool(QueryBuilders.bool().\n+                            must(new Query.Builder().exists(QueryBuilders.exists().field(\"id\").build()).build()).\n+                            must(new Query.Builder().term(QueryBuilders.term().field(\"memberships\").value(\n+                                    FieldValue.of(\"groupKey\")).build()).build()).\n+                            build()).build()).\n+                    usingRecursiveComparison().isEqualTo(request.query());\n         }\n     }\n }"},{"sha":"bd1d9c81eda0fe9ad5d932b37b46326732313adc","filename":"ext/elasticsearch/provisioning-java/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fpom.xml?ref=4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","patch":"@@ -43,7 +43,7 @@ under the License.\n       <artifactId>syncope-core-provisioning-java</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-    \n+\n     <dependency>\n       <groupId>org.apache.syncope.ext.elasticsearch</groupId>\n       <artifactId>syncope-ext-elasticsearch-client</artifactId>"},{"sha":"f7ef590ef09183d5c580f58c7d4f50c34ae92bab","filename":"ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java","status":"modified","additions":28,"deletions":24,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java?ref=4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","patch":"@@ -18,7 +18,13 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n+import co.elastic.clients.elasticsearch.ElasticsearchClient;\n+import co.elastic.clients.elasticsearch._types.mapping.TypeMapping;\n+import co.elastic.clients.elasticsearch.core.IndexRequest;\n+import co.elastic.clients.elasticsearch.core.IndexResponse;\n+import co.elastic.clients.elasticsearch.indices.IndexSettings;\n import java.io.IOException;\n+import java.util.Map;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -28,11 +34,6 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchIndexManager;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n-import org.elasticsearch.action.index.IndexRequest;\n-import org.elasticsearch.action.index.IndexResponse;\n-import org.elasticsearch.client.RequestOptions;\n-import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -43,7 +44,7 @@\n public class ElasticsearchReindex extends AbstractSchedTaskJobDelegate {\n \n     @Autowired\n-    protected RestHighLevelClient client;\n+    protected ElasticsearchClient client;\n \n     @Autowired\n     protected ElasticsearchIndexManager indexManager;\n@@ -60,27 +61,27 @@ public class ElasticsearchReindex extends AbstractSchedTaskJobDelegate {\n     @Autowired\n     protected AnyObjectDAO anyObjectDAO;\n \n-    protected XContentBuilder userSettings() throws IOException {\n+    protected IndexSettings userSettings() throws IOException {\n         return indexManager.defaultSettings();\n     }\n \n-    protected XContentBuilder groupSettings() throws IOException {\n+    protected IndexSettings groupSettings() throws IOException {\n         return indexManager.defaultSettings();\n     }\n \n-    protected XContentBuilder anyObjectSettings() throws IOException {\n+    protected IndexSettings anyObjectSettings() throws IOException {\n         return indexManager.defaultSettings();\n     }\n \n-    protected XContentBuilder userMapping() throws IOException {\n+    protected TypeMapping userMapping() throws IOException {\n         return indexManager.defaultMapping();\n     }\n \n-    protected XContentBuilder groupMapping() throws IOException {\n+    protected TypeMapping groupMapping() throws IOException {\n         return indexManager.defaultMapping();\n     }\n \n-    protected XContentBuilder anyObjectMapping() throws IOException {\n+    protected TypeMapping anyObjectMapping() throws IOException {\n         return indexManager.defaultMapping();\n     }\n \n@@ -104,13 +105,14 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                 LOG.debug(\"Indexing users...\");\n                 for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (String user : userDAO.findAllKeys(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n-                        IndexRequest request = new IndexRequest(\n-                                ElasticsearchUtils.getContextDomainName(\n+                        IndexRequest<Map<String, Object>> request = new IndexRequest.Builder<Map<String, Object>>().\n+                                index(ElasticsearchUtils.getContextDomainName(\n                                         AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n                                 id(user).\n-                                source(utils.builder(userDAO.find(user), AuthContextUtils.getDomain()));\n+                                document(utils.document(userDAO.find(user), AuthContextUtils.getDomain())).\n+                                build();\n                         try {\n-                            IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n+                            IndexResponse response = client.index(request);\n                             LOG.debug(\"Index successfully created for {}: {}\", user, response);\n                         } catch (Exception e) {\n                             LOG.error(\"Could not create index for {} {}\", AnyTypeKind.USER, user);\n@@ -121,13 +123,14 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                 LOG.debug(\"Indexing groups...\");\n                 for (int page = 1; page <= (groupDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (String group : groupDAO.findAllKeys(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n-                        IndexRequest request = new IndexRequest(\n-                                ElasticsearchUtils.getContextDomainName(\n+                        IndexRequest<Map<String, Object>> request = new IndexRequest.Builder<Map<String, Object>>().\n+                                index(ElasticsearchUtils.getContextDomainName(\n                                         AuthContextUtils.getDomain(), AnyTypeKind.GROUP)).\n                                 id(group).\n-                                source(utils.builder(groupDAO.find(group), AuthContextUtils.getDomain()));\n+                                document(utils.document(groupDAO.find(group), AuthContextUtils.getDomain())).\n+                                build();\n                         try {\n-                            IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n+                            IndexResponse response = client.index(request);\n                             LOG.debug(\"Index successfully created for {}: {}\", group, response);\n                         } catch (Exception e) {\n                             LOG.error(\"Could not create index for {} {}\", AnyTypeKind.GROUP, group);\n@@ -138,13 +141,14 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                 LOG.debug(\"Indexing any objects...\");\n                 for (int page = 1; page <= (anyObjectDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (String anyObject : anyObjectDAO.findAllKeys(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n-                        IndexRequest request = new IndexRequest(\n-                                ElasticsearchUtils.getContextDomainName(\n+                        IndexRequest<Map<String, Object>> request = new IndexRequest.Builder<Map<String, Object>>().\n+                                index(ElasticsearchUtils.getContextDomainName(\n                                         AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT)).\n                                 id(anyObject).\n-                                source(utils.builder(anyObjectDAO.find(anyObject), AuthContextUtils.getDomain()));\n+                                document(utils.document(anyObjectDAO.find(anyObject), AuthContextUtils.getDomain())).\n+                                build();\n                         try {\n-                            IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n+                            IndexResponse response = client.index(request);\n                             LOG.debug(\"Index successfully created for {}: {}\", anyObject, response);\n                         } catch (Exception e) {\n                             LOG.error(\"Could not create index for {} {}\", AnyTypeKind.ANY_OBJECT, anyObject);"},{"sha":"dde15d4d47ce336e66df4ed4c9fb1bdf802fbf50","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","patch":"@@ -167,12 +167,10 @@ public void issueSYNCOPE86() {\n             taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n             assertNotNull(taskTO);\n             assertTrue(taskTO.isExecuted());\n-            assertEquals(1, taskTO.getExecutions().size());\n+            assertFalse(taskTO.getExecutions().isEmpty());\n         } finally {\n             // Remove execution to make test re-runnable\n-            if (!taskTO.getExecutions().isEmpty()) {\n-                taskService.deleteExecution(taskTO.getExecutions().get(0).getKey());\n-            }\n+            taskTO.getExecutions().forEach(e -> taskService.deleteExecution(e.getKey()));\n         }\n     }\n "},{"sha":"00acfdc59ff7476805aa98e002f4a3c31eeec746","filename":"pom.xml","status":"modified","additions":8,"deletions":22,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=4880e0dd52ab243c1a56e41bb2d7a6ff2dd6e37d","patch":"@@ -430,7 +430,7 @@ under the License.\n \n     <slf4j.version>1.7.32</slf4j.version>\n \n-    <elasticsearch.version>7.15.2</elasticsearch.version>\n+    <elasticsearch.version>7.16.2</elasticsearch.version>\n \n     <apacheds.version>2.0.0.AM26</apacheds.version>\n     <apachedirapi.version>2.0.0</apachedirapi.version>\n@@ -677,33 +677,19 @@ under the License.\n       <!-- /Camel -->\n \n       <dependency>\n-        <groupId>org.elasticsearch.client</groupId>\n-        <artifactId>elasticsearch-rest-high-level-client</artifactId>\n-        <version>${elasticsearch.version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>com.fasterxml.jackson.datatype</groupId>\n-            <artifactId>jackson-dataformat-smile</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>com.fasterxml.jackson.datatype</groupId>\n-            <artifactId>jackson-dataformat-yaml</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>com.fasterxml.jackson.datatype</groupId>\n-            <artifactId>jackson-dataformat-cbor</artifactId>\n-          </exclusion>\n-        </exclusions>\n+        <groupId>co.elastic.clients</groupId>\n+        <artifactId>elasticsearch-java</artifactId>\n+\t<version>${elasticsearch.version}</version>\n       </dependency>\n       <dependency>\n         <groupId>org.elasticsearch.client</groupId>\n         <artifactId>elasticsearch-rest-client</artifactId>\n-        <version>${elasticsearch.version}</version>\n+        <version>7.16.1</version>\n       </dependency>\n       <dependency>\n-        <groupId>org.elasticsearch</groupId>\n-        <artifactId>elasticsearch</artifactId>\n-        <version>${elasticsearch.version}</version>\n+        <groupId>jakarta.json</groupId>\n+        <artifactId>jakarta.json-api</artifactId>\n+        <version>2.0.1</version>\n       </dependency>\n \n       <dependency>"}]}