{"sha":"bac03b2569644991e26d2879da2eda47bf9debb9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJhYzAzYjI1Njk2NDQ5OTFlMjZkMjg3OWRhMmVkYTQ3YmY5ZGViYjk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-08T08:00:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-08T08:00:38Z"},"message":"More replacements thanks to commons-collections","tree":{"sha":"4e1aa4e9fe7c885e2f5592d5324e2c1d8ef4c8ed","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4e1aa4e9fe7c885e2f5592d5324e2c1d8ef4c8ed"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bac03b2569644991e26d2879da2eda47bf9debb9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bac03b2569644991e26d2879da2eda47bf9debb9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bac03b2569644991e26d2879da2eda47bf9debb9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bac03b2569644991e26d2879da2eda47bf9debb9/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"091c735fd84516757bac6f47edc98a34102734e1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/091c735fd84516757bac6f47edc98a34102734e1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/091c735fd84516757bac6f47edc98a34102734e1"}],"stats":{"total":352,"additions":213,"deletions":139},"files":[{"sha":"455518963c4b244377d485a7a72c49e1fd1c1f90","filename":"core/logic/src/test/java/org/apache/syncope/core/logic/NotificationTest.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -256,7 +256,7 @@ private boolean verifyMail(final String sender, final String subject) throws Exc\n     public void notifyByMail() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.addEvent(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n+        notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n         notification.setUserAbout(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n         notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n         notification.setSelfAsRecipient(true);\n@@ -314,7 +314,7 @@ public void notifyByMail() throws Exception {\n     public void issueSYNCOPE192() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.addEvent(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n+        notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n         notification.setUserAbout(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n         notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n         notification.setSelfAsRecipient(true);\n@@ -366,7 +366,7 @@ public void issueSYNCOPE192() throws Exception {\n     public void notifyByMailEmptyAbout() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.addEvent(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n+        notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n         notification.setUserAbout(null);\n         notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n         notification.setSelfAsRecipient(true);\n@@ -416,7 +416,7 @@ public void notifyByMailEmptyAbout() throws Exception {\n     public void notifyByMailWithRetry() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.addEvent(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n+        notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n         notification.setUserAbout(null);\n         notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n         notification.setSelfAsRecipient(true);\n@@ -485,7 +485,7 @@ public void notifyByMailWithRetry() throws Exception {\n     public void issueSYNCOPE445() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.addEvent(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n+        notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n         notification.setUserAbout(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n         notification.setRecipients(new UserFiqlSearchConditionBuilder().inGroups(8L).query());\n         notification.setSelfAsRecipient(true);\n@@ -544,7 +544,7 @@ public void issueSYNCOPE445() throws Exception {\n     public void issueSYNCOPE492() throws Exception {\n         // 1. create suitable disabled notification for subsequent tests\n         Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.addEvent(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n+        notification.getEvents().add(\"[REST]:[UserLogic]:[]:[create]:[SUCCESS]\");\n         notification.setUserAbout(new UserFiqlSearchConditionBuilder().inGroups(7L).query());\n         notification.setSelfAsRecipient(true);\n \n@@ -588,7 +588,7 @@ public void issueSYNCOPE446() throws Exception {\n \n         // 1. create suitable notification for subsequent tests\n         Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.addEvent(\"[REST]:[GroupLogic]:[]:[create]:[SUCCESS]\");\n+        notification.getEvents().add(\"[REST]:[GroupLogic]:[]:[create]:[SUCCESS]\");\n         notification.setGroupAbout(new GroupFiqlSearchConditionBuilder().is(\"name\").equalTo(\"group446\").query());\n         notification.setSelfAsRecipient(false);\n "},{"sha":"44ddc5c7b78915da6ffafbf0e1c407b76eb39ee0","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/CollectionUtils2.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FCollectionUtils2.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FCollectionUtils2.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FCollectionUtils2.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc;\n+\n+import java.util.Iterator;\n+\n+public final class CollectionUtils2 {\n+\n+    /**\n+     * Returns the next element in <tt>iterator</tt> or <tt>defaultValue</tt> if the iterator is empty.\n+     *\n+     * @param defaultValue the default value to return if the iterator is empty\n+     * @return the next element of <tt>iterator</tt> or the default value\n+     */\n+    public static <T> T getNext(final Iterator<? extends T> iterator, final T defaultValue) {\n+        return iterator.hasNext() ? iterator.next() : defaultValue;\n+    }\n+\n+    /**\n+     * Returns the first element in <tt>iterable</tt> or <tt>defaultValue</tt> if the iterable is empty.\n+     *\n+     * <p/>\n+     * If no default value is desired (and the caller instead wants a {@link java.util.NoSuchElementException} to be\n+     * thrown), it is recommended that <tt>iterable.iterator().next()}</tt> is used instead.\n+     *\n+     * @param defaultValue the default value to return if the iterable is empty\n+     * @return the first element of <tt>iterable</tt> or the default value\n+     */\n+    public static <T> T getFirst(final Iterable<? extends T> iterable, final T defaultValue) {\n+        return getNext(iterable.iterator(), defaultValue);\n+    }\n+\n+    /**\n+     * Returns the first element in <tt>iterable</tt> or <tt>null</tt> if the iterable is empty.\n+     *\n+     * @return the first element of <tt>iterable</tt> or <tt>null</tt>\n+     */\n+    public static <T> T getFirstOrNull(final Iterable<? extends T> iterable) {\n+        return getNext(iterable.iterator(), null);\n+    }\n+\n+    private CollectionUtils2() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"723dfe1dd0701d3d71018f797f8900250d0023be","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/GroupEntitlementUtil.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FGroupEntitlementUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FGroupEntitlementUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FGroupEntitlementUtil.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -22,6 +22,8 @@\n import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.entity.Entitlement;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -73,11 +75,13 @@ public static Set<Long> getGroupKeys(final Set<String> entitlements) {\n     }\n \n     public static Set<Long> getGroupKeys(final List<Entitlement> entitlements) {\n-        Set<String> names = new HashSet<>(entitlements.size());\n-        for (Entitlement entitlement : entitlements) {\n-            names.add(entitlement.getKey());\n-        }\n-        return GroupEntitlementUtil.getGroupKeys(names);\n+        return getGroupKeys(CollectionUtils.collect(entitlements, new Transformer<Entitlement, String>() {\n+\n+            @Override\n+            public String transform(final Entitlement entitlement) {\n+                return entitlement.getKey();\n+            }\n+        }, new HashSet<String>()));\n     }\n \n     /**"},{"sha":"97f1a583328aadb919774adf4823e97fd2864ed8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/InvalidEntityException.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -24,6 +24,8 @@\n import java.util.Set;\n import javax.validation.ConstraintViolation;\n import javax.validation.ValidationException;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n \n /**\n@@ -97,14 +99,13 @@ public InvalidEntityException(final String entityClassSimpleName,\n     }\n \n     public final boolean hasViolation(final EntityViolationType type) {\n-        boolean found = false;\n-        for (Class<?> entity : violations.keySet()) {\n-            if (violations.get(entity).contains(type)) {\n-                found = true;\n-            }\n-        }\n+        return CollectionUtils.exists(violations.keySet(), new Predicate<Class<?>>() {\n \n-        return found;\n+            @Override\n+            public boolean evaluate(final Class<?> entity) {\n+                return violations.get(entity).contains(type);\n+            }\n+        });\n     }\n \n     public String getEntityClassSimpleName() {"},{"sha":"aa7af9574cda8fd1e3d9202e67250ea228f62ee0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -80,7 +80,7 @@ public String transform(final PlainAttrValue input) {\n             result = Collections.singletonList(getUniqueValue().getValueAsString());\n         }\n \n-        return result;\n+        return Collections.unmodifiableList(result);\n     }\n \n }"},{"sha":"3288432da4955da25c1ef82ba707cd3ae7f1f94e","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheValue.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.cache;\n \n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -73,7 +74,7 @@ public Set<String> getValues() {\n             res.addAll(value);\n         }\n \n-        return res;\n+        return Collections.unmodifiableSet(res);\n     }\n \n     public Date getLastAccessDate() {"},{"sha":"895e0dca0caf5441f825ab39ef1504c607d1a775","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -207,6 +207,7 @@ List<PropagationTask> getUserCreateTaskIds(Long key, Boolean enabled,\n      * the creation fails onto a mandatory resource.\n      *\n      * @param userKey to be deleted\n+     * @param resourceNames resources\n      * @param noPropResourceNames name of external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n@@ -231,7 +232,7 @@ List<PropagationTask> getUserDeleteTaskIds(\n      * @param noPropResourceNames external resource names not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserUpdateTaskIds(User user, Boolean enable, Set<String> noPropResourceNames);\n+    List<PropagationTask> getUserUpdateTaskIds(User user, Boolean enable, Collection<String> noPropResourceNames);\n \n     /**\n      * Performs update on each resource associated to the user."},{"sha":"ae2d297d44e2b8a34551b88569888314c8fabcb4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AsyncConnectorFacade.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -154,7 +154,7 @@ public Future<Set<Attribute>> getObjectAttributes(\n \n     @Async\n     public Future<Set<String>> getSchemaNames(final ConnectorFacade connector, final boolean includeSpecial) {\n-        final Set<String> schemaNames = new HashSet<String>();\n+        final Set<String> schemaNames = new HashSet<>();\n \n         try {\n             final Schema schema = connector.schema();\n@@ -175,7 +175,7 @@ public Future<Set<String>> getSchemaNames(final ConnectorFacade connector, final\n \n     @Async\n     public Future<Set<ObjectClass>> getSupportedObjectClasses(final ConnectorFacade connector) {\n-        final Set<ObjectClass> objectClasses = new HashSet<ObjectClass>();\n+        final Set<ObjectClass> objectClasses = new HashSet<>();\n \n         try {\n             final Schema schema = connector.schema();"},{"sha":"2adbdd087980e6890c02c43e81732d7d8e02f2f1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -26,6 +26,7 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -74,7 +75,8 @@ public Map.Entry<Long, List<PropagationStatus>> create(final GroupTO subject) {\n     public Map.Entry<Long, List<PropagationStatus>> create(final GroupTO subject, final Set<String> excludedResources) {\n         WorkflowResult<Long> created = gwfAdapter.create(subject);\n \n-        AuthContextUtil.extendAuthContext(created.getResult(), GroupEntitlementUtil.getEntitlementNameFromGroupKey(created.getResult()));\n+        AuthContextUtil.extendAuthContext(created.getResult(), GroupEntitlementUtil.getEntitlementNameFromGroupKey(\n+                created.getResult()));\n \n         List<PropagationTask> tasks =\n                 propagationManager.getGroupCreateTaskIds(created, subject.getVirAttrs(), excludedResources);\n@@ -100,7 +102,7 @@ public Map.Entry<Long, List<PropagationStatus>> create(\n             groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next());\n         }\n \n-        AuthContextUtil.extendAuthContext(created.getResult(), \n+        AuthContextUtil.extendAuthContext(created.getResult(),\n                 GroupEntitlementUtil.getEntitlementNameFromGroupKey(created.getResult()));\n \n         List<PropagationTask> tasks = propagationManager.getGroupCreateTaskIds(\n@@ -198,8 +200,7 @@ public Long unlink(final GroupMod subjectMod) {\n     public List<PropagationStatus> deprovision(final Long groupKey, final Collection<String> resources) {\n         Group group = groupDAO.authFetch(groupKey);\n \n-        Set<String> noPropResourceName = group.getResourceNames();\n-        noPropResourceName.removeAll(resources);\n+        Collection<String> noPropResourceName = CollectionUtils.removeAll(group.getResourceNames(), resources);\n \n         List<PropagationTask> tasks = propagationManager.getGroupDeleteTaskIds(\n                 groupKey, new HashSet<>(resources), noPropResourceName);"},{"sha":"4eb425f86dadd07774f42ce5b82471d9f8bfd5dd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.common.lib.mod.MembershipMod;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n@@ -234,11 +235,11 @@ public Map.Entry<Long, List<PropagationStatus>> suspend(final User user, final S\n     }\n \n     protected List<PropagationStatus> propagateStatus(final User user, final StatusMod statusMod) {\n-        Set<String> resourcesToBeExcluded = new HashSet<>(user.getResourceNames());\n-        resourcesToBeExcluded.removeAll(statusMod.getResourceNames());\n+        Collection<String> noPropResourceNames =\n+                CollectionUtils.removeAll(user.getResourceNames(), statusMod.getResourceNames());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                user, statusMod.getType() != StatusMod.ModType.SUSPEND, resourcesToBeExcluded);\n+                user, statusMod.getType() != StatusMod.ModType.SUSPEND, noPropResourceNames);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n@@ -274,11 +275,10 @@ public void innerSuspend(final User user, final boolean propagate) {\n     public List<PropagationStatus> deprovision(final Long userKey, final Collection<String> resources) {\n         final User user = userDAO.authFetch(userKey);\n \n-        final Set<String> noPropResourceName = user.getResourceNames();\n-        noPropResourceName.removeAll(resources);\n+        Collection<String> noPropResourceNames = CollectionUtils.removeAll(user.getResourceNames(), resources);\n \n         final List<PropagationTask> tasks =\n-                propagationManager.getUserDeleteTaskIds(userKey, new HashSet<>(resources), noPropResourceName);\n+                propagationManager.getUserDeleteTaskIds(userKey, new HashSet<>(resources), noPropResourceNames);\n         final PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n@@ -330,12 +330,10 @@ public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, fi\n             }\n         }\n \n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n-                getBean(PropagationReporter.class);\n-\n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n                 updated, updated.getResult().getKey().getPassword() != null, excludedResources);\n-\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+                getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"3c3dcca0ff9fe4286bd2fc080f88431c2a670074","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/cache/DisabledVirAttrCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fcache%2FDisabledVirAttrCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fcache%2FDisabledVirAttrCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fcache%2FDisabledVirAttrCache.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -38,7 +38,7 @@ public VirAttrCacheValue get(final AttributableType type, final Long id, final S\n     }\n \n     @Override\n-    public boolean isValidEntry(VirAttrCacheValue value) {\n+    public boolean isValidEntry(final VirAttrCacheValue value) {\n         return false;\n     }\n "},{"sha":"2c94b8b1d419da13eab4886494dd7765281baf5d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAttributableDataBinder.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -166,7 +166,6 @@ protected <T extends PlainSchema> T getPlainSchema(final String schemaName, fina\n             schema = plainSchemaDAO.find(schemaName, reference);\n \n             // safely ignore invalid schemas from AttrTO\n-            // see http://code.google.com/p/syncope/issues/detail?id=17\n             if (schema == null) {\n                 LOG.debug(\"Ignoring invalid schema {}\", schemaName);\n             } else if (schema.isReadonly()) {\n@@ -753,8 +752,7 @@ protected Map<String, String> getAccountIds(final Subject<?, ?, ?> subject, fina\n             if ((type == AttributableType.USER && resource.getUmapping() != null)\n                     || (type == AttributableType.GROUP && resource.getGmapping() != null)) {\n \n-                MappingItem accountIdItem =\n-                        attrUtilFactory.getInstance(type).getAccountIdItem(resource);\n+                MappingItem accountIdItem = attrUtilFactory.getInstance(type).getAccountIdItem(resource);\n                 if (accountIdItem == null) {\n                     throw new NotFoundException(\n                             \"AccountId mapping for \" + type + \" \" + subject.getKey()"},{"sha":"dac783b051c9bf6e5c226f880d17753a79690803","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.core.misc.CollectionUtils2;\n import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n@@ -347,15 +348,8 @@ private String getRecipientEmail(\n \n             case UserPlainSchema:\n                 UPlainAttr attr = user.getPlainAttr(recipientAttrName);\n-                if (attr != null && !attr.getValuesAsStrings().isEmpty()) {\n-                    email = attr.getValuesAsStrings().get(0);\n-                }\n-                break;\n-\n-            case UserVirtualSchema:\n-                UVirAttr virAttr = user.getVirAttr(recipientAttrName);\n-                if (virAttr != null && !virAttr.getValues().isEmpty()) {\n-                    email = virAttr.getValues().get(0);\n+                if (attr != null) {\n+                    email = CollectionUtils2.getFirstOrNull(attr.getValuesAsStrings());\n                 }\n                 break;\n \n@@ -366,6 +360,13 @@ private String getRecipientEmail(\n                 }\n                 break;\n \n+            case UserVirtualSchema:\n+                UVirAttr virAttr = user.getVirAttr(recipientAttrName);\n+                if (virAttr != null) {\n+                    email = CollectionUtils2.getFirstOrNull(virAttr.getValues());\n+                }\n+                break;\n+\n             default:\n         }\n "},{"sha":"1e75acbce86d273a01351e1b6fe5a6b8ecacb5bb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DBPasswordPropagationActions.java","status":"modified","additions":15,"deletions":13,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -19,8 +19,9 @@\n package org.apache.syncope.core.provisioning.java.propagation;\n \n import java.util.HashSet;\n-import java.util.Iterator;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -85,22 +86,23 @@ && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgori\n         }\n     }\n \n-    private String getCipherAlgorithm(ConnInstance connInstance) {\n-        String cipherAlgorithm = CLEARTEXT;\n-        for (Iterator<ConnConfProperty> propertyIterator = connInstance.getConfiguration().iterator();\n-                propertyIterator.hasNext();) {\n+    private String getCipherAlgorithm(final ConnInstance connInstance) {\n+        ConnConfProperty cipherAlgorithm =\n+                CollectionUtils.find(connInstance.getConfiguration(), new Predicate<ConnConfProperty>() {\n \n-            ConnConfProperty property = propertyIterator.next();\n-            if (\"cipherAlgorithm\".equals(property.getSchema().getName())\n-                    && property.getValues() != null && !property.getValues().isEmpty()) {\n+                    @Override\n+                    public boolean evaluate(final ConnConfProperty property) {\n+                        return \"cipherAlgorithm\".equals(property.getSchema().getName())\n+                        && property.getValues() != null && !property.getValues().isEmpty();\n+                    }\n+                });\n \n-                return (String) property.getValues().get(0);\n-            }\n-        }\n-        return cipherAlgorithm;\n+        return cipherAlgorithm == null\n+                ? CLEARTEXT\n+                : (String) cipherAlgorithm.getValues().get(0);\n     }\n \n-    private boolean cipherAlgorithmMatches(String connectorAlgorithm, CipherAlgorithm userAlgorithm) {\n+    private boolean cipherAlgorithmMatches(final String connectorAlgorithm, final CipherAlgorithm userAlgorithm) {\n         if (userAlgorithm == null) {\n             return false;\n         }"},{"sha":"f62aca009cb9f0e547ddb00c8fa81c006161b6cb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -92,9 +92,9 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n                 }\n                 LOG.debug(\"Group accountLinks to propagate for membership: {}\", groupAccountLinks);\n \n-                Set<Attribute> attributes = new HashSet<Attribute>(task.getAttributes());\n+                Set<Attribute> attributes = new HashSet<>(task.getAttributes());\n \n-                Set<String> groups = new HashSet<String>(groupAccountLinks);\n+                Set<String> groups = new HashSet<>(groupAccountLinks);\n                 Attribute ldapGroups = AttributeUtil.find(getGroupMembershipAttrName(), attributes);\n \n                 if (ldapGroups != null) {"},{"sha":"37ce2facdf075741b26fa55495023f6e0efa8c19","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java","status":"modified","additions":15,"deletions":12,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -19,8 +19,9 @@\n package org.apache.syncope.core.provisioning.java.propagation;\n \n import java.util.HashSet;\n-import java.util.Iterator;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -91,18 +92,20 @@ && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgori\n         }\n     }\n \n-    private String getCipherAlgorithm(ConnInstance connInstance) {\n-        String cipherAlgorithm = CLEARTEXT;\n-        for (Iterator<ConnConfProperty> propertyIterator = connInstance.getConfiguration().iterator();\n-                propertyIterator.hasNext();) {\n+    private String getCipherAlgorithm(final ConnInstance connInstance) {\n+        ConnConfProperty cipherAlgorithm =\n+                CollectionUtils.find(connInstance.getConfiguration(), new Predicate<ConnConfProperty>() {\n \n-            ConnConfProperty property = propertyIterator.next();\n-            if (\"passwordHashAlgorithm\".equals(property.getSchema().getName())\n-                    && property.getValues() != null && !property.getValues().isEmpty()) {\n-                return (String) property.getValues().get(0);\n-            }\n-        }\n-        return cipherAlgorithm;\n+                    @Override\n+                    public boolean evaluate(final ConnConfProperty property) {\n+                        return \"passwordHashAlgorithm\".equals(property.getSchema().getName())\n+                        && property.getValues() != null && !property.getValues().isEmpty();\n+                    }\n+                });\n+\n+        return cipherAlgorithm == null\n+                ? CLEARTEXT\n+                : (String) cipherAlgorithm.getValues().get(0);\n     }\n \n     private boolean cipherAlgorithmMatches(String connectorAlgorithm, CipherAlgorithm userAlgorithm) {"},{"sha":"122261fbfed3b78e907b700a5aa1f8dbe971fd50","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":21,"deletions":26,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -26,6 +26,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.mod.MembershipMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n@@ -173,10 +175,15 @@ public List<PropagationTask> getUserCreateTaskIds(\n             virAttrHandler.fillVirtual(user, vAttrs, attrUtilFactory.getInstance(AttributableType.USER));\n \n         }\n-        for (Membership membership : user.getMemberships()) {\n-            MembershipTO membershipTO;\n+        for (final Membership membership : user.getMemberships()) {\n             if (membership.getVirAttrs() != null && !membership.getVirAttrs().isEmpty()) {\n-                membershipTO = findMembershipTO(membership, membershipTOs);\n+                MembershipTO membershipTO = CollectionUtils.find(membershipTOs, new Predicate<MembershipTO>() {\n+\n+                    @Override\n+                    public boolean evaluate(final MembershipTO membershipTO) {\n+                        return membershipTO.getGroupId() == membership.getGroup().getKey();\n+                    }\n+                });\n                 if (membershipTO != null) {\n                     virAttrHandler.fillVirtual(membership,\n                             membershipTO.getVirAttrs(), attrUtilFactory.getInstance(AttributableType.MEMBERSHIP));\n@@ -276,7 +283,7 @@ protected List<PropagationTask> getCreateTaskIds(final Subject<?, ?, ?> subject,\n      */\n     @Override\n     public List<PropagationTask> getUserUpdateTaskIds(final User user, final Boolean enable,\n-            final Set<String> noPropResourceNames) throws NotFoundException {\n+            final Collection<String> noPropResourceNames) throws NotFoundException {\n \n         return getUpdateTaskIds(\n                 user, // user to be updated on external resources\n@@ -385,6 +392,7 @@ public List<PropagationTask> getGroupUpdateTaskIds(final WorkflowResult<Long> wf\n      * @throws NotFoundException if group is not found\n      * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given group\n      */\n+    @Override\n     public List<PropagationTask> getGroupUpdateTaskIds(final WorkflowResult<Long> wfResult,\n             final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated,\n             final Set<String> noPropResourceNames)\n@@ -413,9 +421,16 @@ public List<PropagationTask> getUpdateTaskIds(final Subject<?, ?, ?> subject,\n         // SYNCOPE-458 fill membership virtual attributes\n         if (subject instanceof User) {\n             final User user = (User) subject;\n-            for (Membership membership : user.getMemberships()) {\n+            for (final Membership membership : user.getMemberships()) {\n                 if (membership.getVirAttrs() != null && !membership.getVirAttrs().isEmpty()) {\n-                    final MembershipMod membershipMod = findMembershipMod(membership, membershipsToAdd);\n+                    final MembershipMod membershipMod = CollectionUtils.find(membershipsToAdd,\n+                            new Predicate<MembershipMod>() {\n+\n+                                @Override\n+                                public boolean evaluate(final MembershipMod membershipMod) {\n+                                    return membershipMod.getGroup() == membership.getGroup().getKey();\n+                                }\n+                            });\n                     if (membershipMod != null) {\n                         virAttrHandler.fillVirtual(membership, membershipMod.getVirAttrsToRemove() == null\n                                 ? Collections.<String>emptySet()\n@@ -750,24 +765,4 @@ protected List<PropagationTask> createTasks(final Subject<?, ?, ?> subject,\n \n         return tasks;\n     }\n-\n-    protected MembershipTO findMembershipTO(final Membership membership, final Collection<MembershipTO> memberships) {\n-        for (MembershipTO membershipTO : memberships) {\n-            if (membershipTO.getGroupId() == membership.getGroup().getKey()) {\n-                return membershipTO;\n-            }\n-        }\n-        LOG.error(\"No MembershipTO found for membership {}\", membership);\n-        return null;\n-    }\n-\n-    protected MembershipMod findMembershipMod(final Membership membership, final Set<MembershipMod> membershipMods) {\n-        for (MembershipMod membershipMod : membershipMods) {\n-            if (membershipMod.getGroup() == membership.getGroup().getKey()) {\n-                return membershipMod;\n-            }\n-        }\n-        LOG.error(\"No MembershipMod found for membership {}\", membership);\n-        return null;\n-    }\n }"},{"sha":"092014688a841fb6596461acf5138119b583382f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractProvisioningJob.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -22,6 +22,8 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -315,11 +317,14 @@ protected String createReport(final Collection<ProvisioningResult> provResults,\n     @Override\n     protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         // PRE: grant all authorities (i.e. setup the SecurityContextHolder)\n-        final List<GrantedAuthority> authorities = new ArrayList<>();\n+        List<GrantedAuthority> authorities = new ArrayList<>();\n+        CollectionUtils.collect(entitlementDAO.findAll(), new Transformer<Entitlement, GrantedAuthority>() {\n \n-        for (Entitlement entitlement : entitlementDAO.findAll()) {\n-            authorities.add(new SimpleGrantedAuthority(entitlement.getKey()));\n-        }\n+            @Override\n+            public GrantedAuthority transform(final Entitlement entitlement) {\n+                return new SimpleGrantedAuthority(entitlement.getKey());\n+            }\n+        }, authorities);\n \n         final UserDetails userDetails = new User(\"admin\", \"FAKE_PASSWORD\", true, true, true, true, authorities);\n "},{"sha":"3067ca564ed5134d65d69ebf5edb91d2dc1cdb5a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -513,7 +513,7 @@ private List<ProvisioningResult> ignore(SyncDelta delta, final AttributableUtil\n \n         LOG.debug(\"Subject to ignore {}\", delta.getObject().getUid().getUidValue());\n \n-        final List<ProvisioningResult> ignoreResults = new ArrayList<ProvisioningResult>();\n+        final List<ProvisioningResult> ignoreResults = new ArrayList<>();\n         final ProvisioningResult result = new ProvisioningResult();\n \n         result.setId(null);"},{"sha":"ec33571be3f4b6b3e668cd7b56f31429097d5fca","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncopeResultHandler.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -116,10 +116,12 @@\n      */\n     protected ProvisioningProfile<T, A> profile;\n \n+    @Override\n     public void setProfile(final ProvisioningProfile<T, A> profile) {\n         this.profile = profile;\n     }\n \n+    @Override\n     public ProvisioningProfile<T, A> getProfile() {\n         return profile;\n     }"},{"sha":"2b3ca026d483fba1dd244394e841c5d4b7fbcc77","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DBPasswordSyncActions.java","status":"modified","additions":15,"deletions":13,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java.sync;\n \n-import java.util.Iterator;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.mod.AbstractSubjectMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n@@ -105,18 +106,19 @@ private void parseEncodedPassword(final String password, final Connector connect\n     }\n \n     private String getCipherAlgorithm(final ConnInstance connInstance) {\n-        String cipherAlgorithm = CLEARTEXT;\n-        for (Iterator<ConnConfProperty> propertyIterator = connInstance.getConfiguration().iterator();\n-                propertyIterator.hasNext();) {\n-\n-            ConnConfProperty property = propertyIterator.next();\n-            if (\"cipherAlgorithm\".equals(property.getSchema().getName())\n-                    && property.getValues() != null && !property.getValues().isEmpty()) {\n-\n-                return (String) property.getValues().get(0);\n-            }\n-        }\n-        return cipherAlgorithm;\n+        ConnConfProperty cipherAlgorithm =\n+                CollectionUtils.find(connInstance.getConfiguration(), new Predicate<ConnConfProperty>() {\n+\n+                    @Override\n+                    public boolean evaluate(final ConnConfProperty property) {\n+                        return \"cipherAlgorithm\".equals(property.getSchema().getName())\n+                        && property.getValues() != null && !property.getValues().isEmpty();\n+                    }\n+                });\n+\n+        return cipherAlgorithm == null\n+                ? CLEARTEXT\n+                : (String) cipherAlgorithm.getValues().get(0);\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"526b49484e1b89b4e1d24b5780012c881dc4346d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/LDAPMembershipSyncActions.java","status":"modified","additions":15,"deletions":16,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -20,9 +20,10 @@\n \n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.mod.AbstractSubjectMod;\n import org.apache.syncope.common.lib.mod.MembershipMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n@@ -32,7 +33,6 @@\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -98,20 +98,19 @@ public class LDAPMembershipSyncActions extends DefaultSyncActions {\n      * @return the name of the attribute used to keep track of group memberships\n      */\n     protected String getGroupMembershipAttrName(final Connector connector) {\n-        ConnInstance connInstance = connector.getActiveConnInstance();\n-        Iterator<ConnConfProperty> propertyIterator = connInstance.getConfiguration().iterator();\n-        String groupMembershipName = \"uniquemember\";\n-        while (propertyIterator.hasNext()) {\n-            ConnConfProperty property = propertyIterator.next();\n-            if (\"groupMemberAttribute\".equals(property.getSchema().getName())\n-                    && property.getValues() != null && !property.getValues().isEmpty()) {\n-\n-                groupMembershipName = (String) property.getValues().get(0);\n-                break;\n-            }\n-        }\n-\n-        return groupMembershipName;\n+        ConnConfProperty groupMembership = CollectionUtils.find(connector.getActiveConnInstance().getConfiguration(),\n+                new Predicate<ConnConfProperty>() {\n+\n+                    @Override\n+                    public boolean evaluate(final ConnConfProperty property) {\n+                        return \"groupMemberAttribute\".equals(property.getSchema().getName())\n+                        && property.getValues() != null && !property.getValues().isEmpty();\n+                    }\n+                });\n+\n+        return groupMembership == null\n+                ? \"uniquemember\"\n+                : (String) groupMembership.getValues().get(0);\n     }\n \n     /**"},{"sha":"fe1a8aa6201916f7bfd17c6e00cc29543a08e667","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/LDAPPasswordSyncActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -82,7 +82,7 @@ public <T extends AbstractSubjectTO, K extends AbstractSubjectMod> SyncDelta bef\n         return delta;\n     }\n \n-    private void parseEncodedPassword(String password) {\n+    private void parseEncodedPassword(final String password) {\n         if (password != null && password.startsWith(\"{\")) {\n             int closingBracketIndex = password.indexOf('}');\n             String digest = password.substring(1, password.indexOf('}'));"}]}