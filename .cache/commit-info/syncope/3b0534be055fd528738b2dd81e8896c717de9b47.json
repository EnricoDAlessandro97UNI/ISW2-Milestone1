{"sha":"3b0534be055fd528738b2dd81e8896c717de9b47","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNiMDUzNGJlMDU1ZmQ1Mjg3MzhiMmRkODFlODg5NmM3MTdkZTliNDc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2020-05-06T11:44:28Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-05-06T11:44:28Z"},"message":"[SYNCOPE-1557] Allowing for flexible Auth, Access, AttrRelease and ClientApp translation (#184)","tree":{"sha":"7a175d2da9f0035f00fbe5da670f23b4c8b95cb9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7a175d2da9f0035f00fbe5da670f23b4c8b95cb9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3b0534be055fd528738b2dd81e8896c717de9b47","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesqMcCRBK7hj4Ov3rIwAAdHIIAKlP27X0YkHtGRJzUWqAMRig\noySCEU5QAq9cvVJbXT+0HwyTPrM4j2xu5sJpru3N7+f4d2PWWkGLUEZk9R9DjeQp\nxr0eH1juQFsW7O7Wm8/e+GBZZEmhlraJdIb6bREsUx+Q/bN5h8XG3VuXSf4XfFjP\n/4XQzM2iagRvRGKUp1nOwGpk1hxGwW4CfKqwG3dG3VDcZIFG2Th1/8/cIp7g6CKN\n5IvXE5YFdv8O2JW3H8VB/TR0YXBqMC072NbhSU/eeTTPU1XB1tExiVqeIWS9En8l\nq9lVSkLW/uwWmwQzKpF6luaJuUABrdSWfqRnOzlh7T/6s9BDPssML8iQ9Jo2Gv0=\n=kyvu\n-----END PGP SIGNATURE-----\n","payload":"tree 7a175d2da9f0035f00fbe5da670f23b4c8b95cb9\nparent 76315c128e196e531885749a6df998a373fb701d\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1588765468 +0200\ncommitter GitHub <noreply@github.com> 1588765468 +0200\n\n[SYNCOPE-1557] Allowing for flexible Auth, Access, AttrRelease and ClientApp translation (#184)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3b0534be055fd528738b2dd81e8896c717de9b47","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3b0534be055fd528738b2dd81e8896c717de9b47","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3b0534be055fd528738b2dd81e8896c717de9b47/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"76315c128e196e531885749a6df998a373fb701d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/76315c128e196e531885749a6df998a373fb701d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/76315c128e196e531885749a6df998a373fb701d"}],"stats":{"total":2067,"additions":1030,"deletions":1037},"files":[{"sha":"5152d95d0a10fe3f5139cd220dca53f6e0e17701","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAccessPolicyConf.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccessPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccessPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccessPolicyConf.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -43,7 +43,7 @@ public abstract class AbstractAccessPolicyConf implements Serializable, AccessPo\n     private boolean ssoEnabled = true;\n \n     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n-    private final Map<String, Set<String>> requiredAttributes = new LinkedHashMap<>();\n+    private final Map<String, Set<String>> requiredAttrs = new LinkedHashMap<>();\n \n     public AbstractAccessPolicyConf() {\n         setName(getClass().getName());\n@@ -76,12 +76,11 @@ public void setSsoEnabled(final boolean ssoEnabled) {\n         this.ssoEnabled = ssoEnabled;\n     }\n \n-    @XmlElementWrapper(name = \"requiredAttributes\")\n-    @XmlElement(name = \"requiredAttribute\")\n-    @JsonProperty(\"requiredAttributes\")\n+    @XmlElementWrapper(name = \"requiredAttrs\")\n+    @XmlElement(name = \"requiredAttr\")\n+    @JsonProperty(\"requiredAttrs\")\n     @Override\n-    public Map<String, Set<String>> getRequiredAttributes() {\n-        return requiredAttributes;\n+    public Map<String, Set<String>> getRequiredAttrs() {\n+        return requiredAttrs;\n     }\n-\n }"},{"sha":"a25438fdb6cc48dea40eb3beaae27c10ac2091bf","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAuthPolicyCriteriaConf.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyCriteriaConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyCriteriaConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyCriteriaConf.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -46,5 +46,4 @@ public final String getName() {\n     public final void setName(final String name) {\n         this.name = name;\n     }\n-\n }"},{"sha":"9587418078280e0e1c5b8b65b68d033bccd40fd0","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AccessPolicyConf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -37,5 +37,5 @@ public interface AccessPolicyConf extends Serializable {\n \n     boolean isSsoEnabled();\n \n-    Map<String, Set<String>> getRequiredAttributes();\n+    Map<String, Set<String>> getRequiredAttrs();\n }"},{"sha":"34c500d4750df63ba0d357dbcb4888f9ce41a189","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AccessPolicyTO.java","status":"renamed","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyTO.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -17,11 +17,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.policy;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n-import org.apache.syncope.common.lib.policy.PolicyTO;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n@@ -32,22 +31,21 @@ public class AccessPolicyTO extends PolicyTO {\n \n     private static final long serialVersionUID = -6711411162433533300L;\n \n-    private String configuration;\n+    private AccessPolicyConf conf;\n \n     @XmlTransient\n     @JsonProperty(\"@class\")\n-    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.AccessPolicyTO\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.policy.AccessPolicyTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();\n     }\n \n-    public String getConfiguration() {\n-        return configuration;\n+    public AccessPolicyConf getConf() {\n+        return conf;\n     }\n \n-    public void setConfiguration(final String configuration) {\n-        this.configuration = configuration;\n+    public void setConf(final AccessPolicyConf conf) {\n+        this.conf = conf;\n     }\n-\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AccessPolicyTO.java"},{"sha":"d0174ff77282358735e695b0482161cb555ccb81","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AllowedAttrReleasePolicyConf.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAllowedAttrReleasePolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAllowedAttrReleasePolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAllowedAttrReleasePolicyConf.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -26,7 +26,7 @@\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n \n-@XmlRootElement(name = \"AllowedAttrReleasePolicyConf\")\n+@XmlRootElement(name = \"allowedAttrReleasePolicyConf\")\n @XmlType\n public class AllowedAttrReleasePolicyConf extends AbstractAttrReleasePolicyConf implements AttrReleasePolicyConf {\n \n@@ -36,13 +36,12 @@ public class AllowedAttrReleasePolicyConf extends AbstractAttrReleasePolicyConf\n      * Specify the list of allowed attribute to release.\n      * Use the special {@code *} to release everything.\n      */\n-    private final List<String> allowedAttributes = new ArrayList<>();\n+    private final List<String> allowedAttrs = new ArrayList<>();\n \n-    @XmlElementWrapper(name = \"allowedAttributes\")\n-    @XmlElement(name = \"allowedAttribute\")\n-    @JsonProperty(\"allowedAttributes\")\n-    public List<String> getAllowedAttributes() {\n-        return allowedAttributes;\n+    @XmlElementWrapper(name = \"allowedAttrs\")\n+    @XmlElement(name = \"allowedAttr\")\n+    @JsonProperty(\"allowedAttrs\")\n+    public List<String> getAllowedAttrs() {\n+        return allowedAttrs;\n     }\n-\n }"},{"sha":"1d7f050f4f5bbef5fa44215539f6b5160abfac73","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AttrReleasePolicyTO.java","status":"renamed","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAttrReleasePolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAttrReleasePolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAttrReleasePolicyTO.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -16,11 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.policy;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n-import org.apache.syncope.common.lib.policy.PolicyTO;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n@@ -31,22 +30,21 @@ public class AttrReleasePolicyTO extends PolicyTO {\n \n     private static final long serialVersionUID = -1432411162433533300L;\n \n-    private String configuration;\n+    private AttrReleasePolicyConf conf;\n \n     @XmlTransient\n     @JsonProperty(\"@class\")\n-    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.AttrReleasePolicyTO\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.policy.AttrReleasePolicyTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();\n     }\n \n-    public String getConfiguration() {\n-        return configuration;\n+    public AttrReleasePolicyConf getConf() {\n+        return conf;\n     }\n \n-    public void setConfiguration(final String configuration) {\n-        this.configuration = configuration;\n+    public void setConf(final AttrReleasePolicyConf conf) {\n+        this.conf = conf;\n     }\n-\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AttrReleasePolicyTO.java"},{"sha":"4ba54bbc0deb94072c1b89dae3441678aa4e208c","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AuthPolicyCriteriaConf.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyCriteriaConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyCriteriaConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyCriteriaConf.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -29,7 +29,6 @@\n  * or \"any module can validate the user\" before the policy can consider it\n  * a success.\n  */\n-@FunctionalInterface\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n public interface AuthPolicyCriteriaConf extends Serializable {\n "},{"sha":"8301d69587aab88d3939f2e37d4a004e87a05f51","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AuthPolicyTO.java","status":"renamed","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyTO.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -16,11 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.policy;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n-import org.apache.syncope.common.lib.policy.PolicyTO;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n@@ -31,23 +30,21 @@ public class AuthPolicyTO extends PolicyTO {\n \n     private static final long serialVersionUID = -6711411162433533300L;\n \n-    private String configuration;\n+    private AuthPolicyConf conf;\n \n     @XmlTransient\n     @JsonProperty(\"@class\")\n-    @Schema(name = \"@class\", required = true,\n-            example = \"org.apache.syncope.common.lib.to.AuthPolicyTO\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.policy.AuthPolicyTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();\n     }\n \n-    public String getConfiguration() {\n-        return configuration;\n+    public AuthPolicyConf getConf() {\n+        return conf;\n     }\n \n-    public void setConfiguration(final String configuration) {\n-        this.configuration = configuration;\n+    public void setConf(final AuthPolicyConf conf) {\n+        this.conf = conf;\n     }\n-\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AuthPolicyTO.java"},{"sha":"df2315c727cd389477616bc0bab50076e956756a","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccessPolicyConf.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -21,10 +21,9 @@\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n-@XmlRootElement(name = \"DefaultAccessPolicyConf\")\n+@XmlRootElement(name = \"defaultAccessPolicyConf\")\n @XmlType\n public class DefaultAccessPolicyConf extends AbstractAccessPolicyConf implements AccessPolicyConf {\n \n     private static final long serialVersionUID = -1969836600059025380L;\n-\n }"},{"sha":"ce1507b78d9b6c2674413030c751060923fc222c","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAuthPolicyConf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyConf.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -26,7 +26,7 @@\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n \n-@XmlRootElement(name = \"DefaultAuthPolicyConf\")\n+@XmlRootElement(name = \"defaultAuthPolicyConf\")\n @XmlType\n public class DefaultAuthPolicyConf extends AbstractAuthPolicyConf implements AuthPolicyConf {\n "},{"sha":"96b17caf771f60691a6590704d976337da76874b","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAuthPolicyCriteriaConf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyCriteriaConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyCriteriaConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyCriteriaConf.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -21,7 +21,7 @@\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n-@XmlRootElement(name = \"AnyAuthPolicyCriteriaConf\")\n+@XmlRootElement(name = \"defaultAuthPolicyCriteriaConf\")\n @XmlType\n public class DefaultAuthPolicyCriteriaConf extends AbstractAuthPolicyCriteriaConf {\n "},{"sha":"1a6a7a03011ec5212c086b49b86228abdd88d5f2","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMImplementationType.java","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76315c128e196e531885749a6df998a373fb701d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMImplementationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76315c128e196e531885749a6df998a373fb701d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMImplementationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMImplementationType.java?ref=76315c128e196e531885749a6df998a373fb701d","patch":"@@ -1,44 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import org.apache.commons.lang3.tuple.Pair;\n-import java.util.Map;\n-\n-public final class AMImplementationType {\n-\n-    public static final String AUTH_POLICY_CONF = \"AUTH_POLICY_CONF\";\n-\n-    public static final String ACCESS_POLICY_CONF = \"ACCESS_POLICY_CONF\";\n-\n-    public static final String ATTR_RELEASE_POLICY_CONF = \"ATTR_RELEASE_POLICY_CONF\";\n-\n-    private AMImplementationType() {\n-        // private constructor for static utility class\n-    }\n-\n-    private static final Map<String, String> VALUES = Map.ofEntries(\n-            Pair.of(AUTH_POLICY_CONF, \"org.apache.syncope.common.lib.policy.AuthPolicyConf\"),\n-            Pair.of(ACCESS_POLICY_CONF, \"org.apache.syncope.common.lib.policy.AccessPolicyConf\"),\n-            Pair.of(ATTR_RELEASE_POLICY_CONF, \"org.apache.syncope.common.lib.policy.AttrReleasePolicyConf\"));\n-\n-    public static Map<String, String> values() {\n-        return VALUES;\n-    }\n-}"},{"sha":"55771de930122afa65042e329e8903df149142d5","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/WAClientApp.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -67,5 +67,4 @@ public AttrReleasePolicyConf getAttrReleasePolicyConf() {\n     public void setAttrReleasePolicyConf(final AttrReleasePolicyConf attrReleasePolicyConf) {\n         this.attrReleasePolicyConf = attrReleasePolicyConf;\n     }\n-\n }"},{"sha":"04f4463697a5361886f50ded09d6a982255b8e64","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"removed","additions":0,"deletions":127,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76315c128e196e531885749a6df998a373fb701d/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76315c128e196e531885749a6df998a373fb701d/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=76315c128e196e531885749a6df998a373fb701d","patch":"@@ -1,127 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic.init;\n-\n-import java.lang.reflect.Modifier;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Set;\n-import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n-import org.apache.syncope.common.lib.types.AMImplementationType;\n-import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n-import org.apache.syncope.core.persistence.api.ImplementationLookup;\n-import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n-import org.springframework.core.Ordered;\n-import org.springframework.core.type.filter.AssignableTypeFilter;\n-import org.springframework.util.ClassUtils;\n-import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n-\n-/**\n- * Cache class names for all implementations of Syncope interfaces found in classpath, for later usage.\n- */\n-public class ClassPathScanImplementationLookup implements SyncopeCoreLoader {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(ImplementationLookup.class);\n-\n-    private static final String DEFAULT_BASE_PACKAGE = \"org.apache.syncope.core\";\n-\n-    private Map<String, Set<String>> classNames;\n-\n-    private Map<Class<? extends AuthPolicyConf>, Class<? extends AuthPolicyConf>> authPolicyClasses;\n-\n-    private Map<Class<? extends AccessPolicyConf>, Class<? extends AccessPolicyConf>> accessPolicyClasses;\n-\n-    @Override\n-    public int getOrder() {\n-        return Ordered.HIGHEST_PRECEDENCE;\n-    }\n-\n-    /**\n-     * This method can be overridden by subclasses to customize classpath scan.\n-     *\n-     * @return basePackage for classpath scanning\n-     */\n-    protected static String getBasePackage() {\n-        return DEFAULT_BASE_PACKAGE;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void load() {\n-        classNames = new HashMap<>();\n-        ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n-        ImplementationTypesHolder.getInstance().getValues().forEach((typeName, typeInterface) -> {\n-            classNames.put(typeName, new HashSet<>());\n-            try {\n-                scanner.addIncludeFilter(new AssignableTypeFilter(\n-                        ClassUtils.resolveClassName(typeInterface, ClassUtils.getDefaultClassLoader())));\n-            } catch (IllegalArgumentException e) {\n-                LOG.error(\"Could not find class, ignoring...\", e);\n-            }\n-        });\n-\n-        authPolicyClasses = new HashMap<>();\n-        accessPolicyClasses = new HashMap<>();\n-\n-        scanner.findCandidateComponents(getBasePackage()).forEach(bd -> {\n-            try {\n-                Class<?> clazz = ClassUtils.resolveClassName(\n-                        Objects.requireNonNull(bd.getBeanClassName()), ClassUtils.getDefaultClassLoader());\n-                boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n-\n-                if (AuthPolicyConf.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(AMImplementationType.AUTH_POLICY_CONF).add(bd.getBeanClassName());\n-                }\n-                if (AccessPolicyConf.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(AMImplementationType.ACCESS_POLICY_CONF).add(bd.getBeanClassName());\n-                }\n-            } catch (Throwable t) {\n-                LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);\n-            }\n-        });\n-\n-        classNames = Collections.unmodifiableMap(classNames);\n-        LOG.debug(\"Implementation classes found: {}\", classNames);\n-\n-        authPolicyClasses = Collections.unmodifiableMap(authPolicyClasses);\n-        accessPolicyClasses = Collections.unmodifiableMap(accessPolicyClasses);\n-    }\n-\n-    public Set<String> getClassNames(final String type) {\n-        return classNames.get(type);\n-    }\n-\n-    public Class<? extends AuthPolicyConf> getAuthPolicyConfClass(\n-            final Class<? extends AuthPolicyConf> authPolicyConfClass) {\n-\n-        return authPolicyClasses.get(authPolicyConfClass);\n-    }\n-\n-    public Class<? extends AccessPolicyConf> getAccessPolicyConfClass(\n-            final Class<? extends AccessPolicyConf> accessPolicyConfClass) {\n-\n-        return accessPolicyClasses.get(accessPolicyConfClass);\n-    }\n-}"},{"sha":"9a444d353e1dd144b099cf743373c27d598144f6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -20,15 +20,12 @@\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n \n public interface PolicyDAO extends DAO<Policy> {\n \n@@ -42,12 +39,6 @@ public interface PolicyDAO extends DAO<Policy> {\n \n     List<PullPolicy> findByPullCorrelationRule(Implementation correlationRule);\n \n-    List<AuthPolicy> findByAuthPolicy(Implementation policy);\n-\n-    List<AccessPolicy> findByAccessPolicy(Implementation policy);\n-\n-    List<AttrReleasePolicy> findByAttrReleasePolicy(Implementation policy);\n-\n     List<PushPolicy> findByPushCorrelationRule(Implementation correlationRule);\n \n     List<AccountPolicy> findByResource(ExternalResource resource);\n@@ -57,5 +48,4 @@ public interface PolicyDAO extends DAO<Policy> {\n     <T extends Policy> T save(T policy);\n \n     <T extends Policy> void delete(T policy);\n-\n }"},{"sha":"1509722f4c82b45c3b8cd03e1157169f1f6285f2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AccessPolicy.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccessPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccessPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccessPolicy.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -18,16 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.policy;\n \n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n \n public interface AccessPolicy extends Policy {\n \n-    String getName();\n-\n-    void setName(String name);\n-\n-    Implementation getConfiguration();\n-\n-    void setConfiguration(Implementation configuration);\n+    AccessPolicyConf getConf();\n \n+    void setConf(AccessPolicyConf conf);\n }"},{"sha":"4b9fec4262fe6b5e46670e5c7ca0f247dec78ff1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AttrReleasePolicy.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAttrReleasePolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAttrReleasePolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAttrReleasePolicy.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -18,15 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.policy;\n \n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n \n public interface AttrReleasePolicy extends Policy {\n \n-    String getName();\n+    AttrReleasePolicyConf getConf();\n \n-    void setName(String name);\n-\n-    Implementation getConfiguration();\n-\n-    void setConfiguration(Implementation configuration);\n+    void setConf(AttrReleasePolicyConf conf);\n }"},{"sha":"46624e698764a8aec524919477e8a934db8814da","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AuthPolicy.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAuthPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAuthPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAuthPolicy.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -18,17 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.policy;\n \n-\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n \n public interface AuthPolicy extends Policy {\n \n-    String getName();\n-\n-    void setName(String name);\n-\n-    Implementation getConfiguration();\n-\n-    void setConfiguration(Implementation configuration);\n+    AuthPolicyConf getConf();\n \n+    void setConf(AuthPolicyConf conf);\n }"},{"sha":"4388d1c73022e255c8b0a4c0f517fbe41e59969f","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":12,"deletions":16,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -44,25 +44,21 @@ under the License.\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n   \n-  <!-- authentication policies -->\n-  <Implementation id=\"MyDefaultAuthPolicyConf\" type=\"AUTH_POLICY_CONF\" engine=\"JAVA\"\n-                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n-  <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" name=\"MyDefaultAuthPolicyConf\" description=\"an authentication policy\"/>\n-  <AuthPolicy id=\"b912a0d4-a890-416f-9ab8-84ab077eb028\" name=\"DefaultAuthPolicy\" description=\"Default authentication policy\"/>\n+  <!-- Authentication policies -->\n+  <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" description=\"MyDefaultAuthPolicyConf\"\n+              jsonConf='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n+  <AuthPolicy id=\"b912a0d4-a890-416f-9ab8-84ab077eb028\" description=\"DefaultAuthPolicy\"\n+              jsonConf='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n \n-  <!-- access policies -->\n-  <Implementation id=\"MyDefaultAccessPolicyConf\" type=\"ACCESS_POLICY_CONF\" engine=\"JAVA\"\n-                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf\",\"name\":\"MyDefaultAccessPolicyConf\",\"enabled\":true,\"ssoEnabled\":true}'/>\n-  <AccessPolicy id=\"419935c7-deb3-40b3-8a9a-683037e523a2\" name=\"MyDefaultAccessPolicyConf\" description=\"an access policy\"/>\n+  <!-- Access policies -->\n+  <AccessPolicy id=\"419935c7-deb3-40b3-8a9a-683037e523a2\" description=\"MyDefaultAccessPolicyConf\"\n+                jsonConf='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf\",\"name\":\"MyDefaultAccessPolicyConf\",\"enabled\":true,\"ssoEnabled\":true}'/>\n \n   <!-- Attr Release Policies -->\n-  <Implementation id=\"AllowedAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONF\" engine=\"JAVA\"\n-                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"AllowedAttrReleasePolicy\",\"allowedAttributes\":[\"cn\",\"givenName\",\"uid\"]}'/>\n-  <AttrReleasePolicy id=\"319935c7-deb3-40b3-8a9a-683037e523a2\" name=\"AllowedAttrReleasePolicy\" description=\"allowed attribute release policy policy\"/>\n-\n-  <Implementation id=\"DenyAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONF\" engine=\"JAVA\"\n-                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n-  <AttrReleasePolicy id=\"219935c7-deb3-40b3-8a9a-683037e523a2\" name=\"DenyAttrReleasePolicy\" description=\"deny attribute release policy policy\"/>\n+  <AttrReleasePolicy id=\"319935c7-deb3-40b3-8a9a-683037e523a2\" description=\"AllowedAttrReleasePolicy\"\n+                     jsonConf='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"AllowedAttrReleasePolicy\",\"allowedAttributes\":[\"cn\",\"givenName\",\"uid\"]}'/>\n+  <AttrReleasePolicy id=\"219935c7-deb3-40b3-8a9a-683037e523a2\" description=\"DenyAttrReleasePolicy\"\n+                     jsonConf='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n   \n   <!-- Authentication modules -->\n   <AuthModule id=\"be456831-593d-4003-b273-4c3fb61700df\" name=\"DefaultLDAPAuthModule\" "},{"sha":"972dcacf53cbe4a615c7c0a6c9eee2a47bf32fb7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -120,33 +120,6 @@ public List<PullPolicy> findByPullCorrelationRule(final Implementation correlati\n         return query.getResultList();\n     }\n \n-    @Override\n-    public List<AuthPolicy> findByAuthPolicy(final Implementation configuration) {\n-        TypedQuery<AuthPolicy> query = entityManager().createQuery(\"SELECT e FROM \" + JPAAuthPolicy.class.\n-                getSimpleName() + \" e \"\n-                + \"WHERE e.configuration=:configuration\", AuthPolicy.class);\n-        query.setParameter(\"configuration\", configuration);\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public List<AccessPolicy> findByAccessPolicy(final Implementation configuration) {\n-        TypedQuery<AccessPolicy> query = entityManager().createQuery(\"SELECT e FROM \" + JPAAccessPolicy.class.\n-                getSimpleName() + \" e \"\n-                + \"WHERE  e.configuration=:configuration\", AccessPolicy.class);\n-        query.setParameter(\"configuration\", configuration);\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public List<AttrReleasePolicy> findByAttrReleasePolicy(final Implementation configuration) {\n-        TypedQuery<AttrReleasePolicy> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAAttrReleasePolicy.class.getSimpleName() + \" e \"\n-                + \"WHERE e.configuration=:configuration\", AttrReleasePolicy.class);\n-        query.setParameter(\"configuration\", configuration);\n-        return query.getResultList();\n-    }\n-\n     @Override\n     public List<PushPolicy> findByPushCorrelationRule(final Implementation correlationRule) {\n         TypedQuery<PushPolicy> query = entityManager().createQuery("},{"sha":"06e1ede4293b13e59f4fff872d10da49088b92a9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccessPolicy.java","status":"modified","additions":14,"deletions":31,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -18,51 +18,34 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.policy;\n \n-import org.apache.syncope.common.lib.types.AMImplementationType;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n-\n-import javax.persistence.Column;\n+import java.util.Optional;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n+import javax.persistence.Lob;\n import javax.persistence.Table;\n-import javax.persistence.ManyToOne;\n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n @Entity\n @Table(name = JPAAccessPolicy.TABLE)\n public class JPAAccessPolicy extends AbstractPolicy implements AccessPolicy {\n \n-    public static final String TABLE = \"AccessPolicy\";\n-\n     private static final long serialVersionUID = -4190607009908888884L;\n \n-    @Column(unique = true, nullable = false)\n-    private String name;\n-\n-    @ManyToOne(fetch = FetchType.EAGER)\n-    private JPAImplementation configuration;\n-\n-    @Override\n-    public String getName() {\n-        return name;\n-    }\n+    public static final String TABLE = \"AccessPolicy\";\n \n-    @Override\n-    public void setName(final String name) {\n-        this.name = name;\n-    }\n+    @Lob\n+    private String jsonConf;\n \n     @Override\n-    public Implementation getConfiguration() {\n-        return configuration;\n+    public AccessPolicyConf getConf() {\n+        return jsonConf == null\n+                ? null\n+                : POJOHelper.deserialize(jsonConf, AccessPolicyConf.class);\n     }\n \n     @Override\n-    public void setConfiguration(final Implementation configuration) {\n-        checkType(configuration, JPAImplementation.class);\n-        checkImplementationType(configuration, AMImplementationType.ACCESS_POLICY_CONF);\n-        this.configuration = (JPAImplementation) configuration;\n+    public void setConf(final AccessPolicyConf conf) {\n+        jsonConf = Optional.ofNullable(conf).map(POJOHelper::serialize).orElse(null);\n     }\n-\n }"},{"sha":"48d515e3df61c212861dadd81941e24b4eba2497","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAttrReleasePolicy.java","status":"modified","additions":14,"deletions":31,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAttrReleasePolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAttrReleasePolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAttrReleasePolicy.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -18,51 +18,34 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.policy;\n \n-import org.apache.syncope.common.lib.types.AMImplementationType;\n-import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n-\n-import javax.persistence.Column;\n+import java.util.Optional;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n+import javax.persistence.Lob;\n import javax.persistence.Table;\n-\n-import javax.persistence.ManyToOne;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n @Entity\n @Table(name = JPAAttrReleasePolicy.TABLE)\n public class JPAAttrReleasePolicy extends AbstractPolicy implements AttrReleasePolicy {\n \n-    public static final String TABLE = \"AttrReleasePolicy\";\n-\n     private static final long serialVersionUID = -4190607669908888884L;\n \n-    @Column(unique = true, nullable = false)\n-    private String name;\n-\n-    @ManyToOne(fetch = FetchType.EAGER)\n-    private JPAImplementation configuration;\n-\n-    @Override\n-    public String getName() {\n-        return name;\n-    }\n+    public static final String TABLE = \"AttrReleasePolicy\";\n \n-    @Override\n-    public void setName(final String name) {\n-        this.name = name;\n-    }\n+    @Lob\n+    private String jsonConf;\n \n     @Override\n-    public Implementation getConfiguration() {\n-        return configuration;\n+    public AttrReleasePolicyConf getConf() {\n+        return jsonConf == null\n+                ? null\n+                : POJOHelper.deserialize(jsonConf, AttrReleasePolicyConf.class);\n     }\n \n     @Override\n-    public void setConfiguration(final Implementation configuration) {\n-        checkType(configuration, JPAImplementation.class);\n-        checkImplementationType(configuration, AMImplementationType.ATTR_RELEASE_POLICY_CONF);\n-        this.configuration = (JPAImplementation) configuration;\n+    public void setConf(final AttrReleasePolicyConf conf) {\n+        jsonConf = Optional.ofNullable(conf).map(POJOHelper::serialize).orElse(null);\n     }\n }"},{"sha":"4fff0dbc7cce632bb30378a1b638fd7a2cdf6d50","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAuthPolicy.java","status":"modified","additions":13,"deletions":30,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAuthPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAuthPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAuthPolicy.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -18,51 +18,34 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.policy;\n \n-import org.apache.syncope.common.lib.types.AMImplementationType;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n-\n-import javax.persistence.Column;\n+import java.util.Optional;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n+import javax.persistence.Lob;\n import javax.persistence.Table;\n-import javax.persistence.ManyToOne;\n+import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n @Entity\n @Table(name = JPAAuthPolicy.TABLE)\n public class JPAAuthPolicy extends AbstractPolicy implements AuthPolicy {\n \n-    public static final String TABLE = \"AuthPolicy\";\n-\n     private static final long serialVersionUID = -4190607009908888884L;\n \n-    @Column(unique = true, nullable = false)\n-    private String name;\n-\n-    @ManyToOne(fetch = FetchType.EAGER)\n-    private JPAImplementation configuration;\n-\n-    @Override\n-    public String getName() {\n-        return name;\n-    }\n+    public static final String TABLE = \"AuthPolicy\";\n \n-    @Override\n-    public void setName(final String name) {\n-        this.name = name;\n-    }\n+    @Lob\n+    private String jsonConf;\n \n     @Override\n-    public Implementation getConfiguration() {\n-        return configuration;\n+    public AuthPolicyConf getConf() {\n+        return jsonConf == null\n+                ? null\n+                : POJOHelper.deserialize(jsonConf, AuthPolicyConf.class);\n     }\n \n     @Override\n-    public void setConfiguration(final Implementation configuration) {\n-        checkType(configuration, JPAImplementation.class);\n-        checkImplementationType(configuration, AMImplementationType.AUTH_POLICY_CONF);\n-        this.configuration = (JPAImplementation) configuration;\n+    public void setConf(final AuthPolicyConf conf) {\n+        jsonConf = Optional.ofNullable(conf).map(POJOHelper::serialize).orElse(null);\n     }\n-\n }"},{"sha":"8508b493e3c91f0c57e1e2adcececec4149c902d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPolicyUtilsFactory.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -18,26 +18,26 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.policy;\n \n-import org.apache.syncope.common.lib.to.AccessPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n+import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.policy.PushPolicyTO;\n-import org.apache.syncope.common.lib.to.AttrReleasePolicyTO;\n-import org.apache.syncope.common.lib.to.AuthPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtils;\n import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtilsFactory;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n-import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+import org.springframework.stereotype.Component;\n \n @Component\n public class JPAPolicyUtilsFactory implements PolicyUtilsFactory {"},{"sha":"4e3140e677b0811b5126c447acacc4d315668696","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AbstractClientAppTest.java","status":"modified","additions":8,"deletions":41,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -24,86 +24,53 @@\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n-import org.apache.syncope.common.lib.types.AMImplementationType;\n-import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.springframework.beans.factory.annotation.Autowired;\n \n public class AbstractClientAppTest extends AbstractTest {\n \n     @Autowired\n     protected PolicyDAO policyDAO;\n \n-    @Autowired\n-    protected ImplementationDAO implementationDAO;\n-\n     protected AttrReleasePolicy buildAndSaveAttrRelPolicy() {\n         AttrReleasePolicy attrRelPolicy = entityFactory.newEntity(AttrReleasePolicy.class);\n-        attrRelPolicy.setName(\"AttrRelPolicyTest\");\n-        attrRelPolicy.setDescription(\"This is a sample access policy\");\n+        attrRelPolicy.setDescription(\"AttrRelPolicyTest\");\n \n         AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n         conf.setName(\"Example Attr Rel Policy for an application\");\n-        conf.getAllowedAttributes().addAll(List.of(\"cn\", \"givenName\"));\n+        conf.getAllowedAttrs().addAll(List.of(\"cn\", \"givenName\"));\n+        attrRelPolicy.setConf(conf);\n \n-        Implementation type = entityFactory.newEntity(Implementation.class);\n-        type.setKey(\"AttrRelPolicyTest\");\n-        type.setEngine(ImplementationEngine.JAVA);\n-        type.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONF);\n-        type.setBody(POJOHelper.serialize(conf));\n-        type = implementationDAO.save(type);\n-        attrRelPolicy.setConfiguration(type);\n         return policyDAO.save(attrRelPolicy);\n \n     }\n \n     protected AccessPolicy buildAndSaveAccessPolicy() {\n         AccessPolicy accessPolicy = entityFactory.newEntity(AccessPolicy.class);\n-        accessPolicy.setName(\"AccessPolicyTest\");\n-        accessPolicy.setDescription(\"This is a sample access policy\");\n+        accessPolicy.setDescription(\"AccessPolicyTest\");\n \n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n         conf.setEnabled(true);\n         conf.setName(\"Example Access Policy for an application\");\n-        conf.getRequiredAttributes().putAll(Map.of(\"attribute1\", Set.of(\"value1\", \"value2\")));\n+        conf.getRequiredAttrs().putAll(Map.of(\"attribute1\", Set.of(\"value1\", \"value2\")));\n         conf.setSsoEnabled(false);\n+        accessPolicy.setConf(conf);\n \n-        Implementation type = entityFactory.newEntity(Implementation.class);\n-        type.setKey(\"AccessPolicyConfKey\");\n-        type.setEngine(ImplementationEngine.JAVA);\n-        type.setType(AMImplementationType.ACCESS_POLICY_CONF);\n-        type.setBody(POJOHelper.serialize(conf));\n-        type = implementationDAO.save(type);\n-\n-        accessPolicy.setConfiguration(type);\n         return policyDAO.save(accessPolicy);\n-\n     }\n \n     protected AuthPolicy buildAndSaveAuthPolicy() {\n         AuthPolicy authPolicy = entityFactory.newEntity(AuthPolicy.class);\n-        authPolicy.setName(\"AuthPolicyTest\");\n-        authPolicy.setDescription(\"This is a sample authentication policy\");\n+        authPolicy.setDescription(\"AuthPolicyTest\");\n \n         DefaultAuthPolicyConf conf = new DefaultAuthPolicyConf();\n         conf.getAuthModules().addAll(List.of(\"LdapAuthentication1\", \"DatabaseAuthentication2\"));\n+        authPolicy.setConf(conf);\n \n-        Implementation type = entityFactory.newEntity(Implementation.class);\n-        type.setKey(\"AuthPolicyConfKey\");\n-        type.setEngine(ImplementationEngine.JAVA);\n-        type.setType(AMImplementationType.AUTH_POLICY_CONF);\n-        type.setBody(POJOHelper.serialize(conf));\n-        type = implementationDAO.save(type);\n-\n-        authPolicy.setConfiguration(type);\n         return policyDAO.save(authPolicy);\n     }\n-\n }"},{"sha":"21297d0c2bc0f5610d0339d1a46aa350f8b95ed8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ImplementationTest.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -23,7 +23,6 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.types.AMImplementationType;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n@@ -45,7 +44,7 @@ public void findAll() {\n         List<Implementation> implementations = implementationDAO.findAll();\n         assertFalse(implementations.isEmpty());\n \n-        assertEquals(22, implementations.size());\n+        assertEquals(18, implementations.size());\n \n         implementations = implementationDAO.findByType(IdMImplementationType.PULL_ACTIONS);\n         assertEquals(1, implementations.size());\n@@ -73,12 +72,6 @@ public void findAll() {\n \n         implementations = implementationDAO.findByType(IdMImplementationType.PUSH_CORRELATION_RULE);\n         assertEquals(1, implementations.size());\n-\n-        implementations = implementationDAO.findByType(AMImplementationType.AUTH_POLICY_CONF);\n-        assertEquals(1, implementations.size());\n-\n-        implementations = implementationDAO.findByType(AMImplementationType.ACCESS_POLICY_CONF);\n-        assertEquals(1, implementations.size());\n     }\n \n     @Test"},{"sha":"fe630bba6906be919724a78aef5a7a58410e8f68","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":24,"deletions":62,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -18,14 +18,23 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyCriteriaConf;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf;\n-import org.apache.syncope.common.lib.types.AMImplementationType;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n@@ -37,6 +46,7 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n@@ -49,15 +59,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.util.List;\n-import java.util.Map;\n-import java.util.UUID;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-import java.util.Set;\n-import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n-\n @Transactional(\"Master\")\n public class PolicyTest extends AbstractTest {\n \n@@ -122,21 +123,6 @@ public void findByKey() {\n         assertNotNull(attrReleasePolicy);\n         attrReleasePolicy = policyDAO.find(UUID.randomUUID().toString());\n         assertNull(attrReleasePolicy);\n-\n-    }\n-\n-    @Test\n-    public void findByPolicyImpl() {\n-        AccessPolicy accessPolicy = policyDAO.find(\"419935c7-deb3-40b3-8a9a-683037e523a2\");\n-        assertNotNull(accessPolicy);\n-        AuthPolicy authPolicy = policyDAO.find(\"b912a0d4-a890-416f-9ab8-84ab077eb028\");\n-        assertNotNull(authPolicy);\n-        AttrReleasePolicy attrReleasePolicy = policyDAO.find(\"319935c7-deb3-40b3-8a9a-683037e523a2\");\n-        assertNotNull(attrReleasePolicy);\n-\n-        assertFalse(policyDAO.findByAccessPolicy(accessPolicy.getConfiguration()).isEmpty());\n-        assertFalse(policyDAO.findByAuthPolicy(authPolicy.getConfiguration()).isEmpty());\n-        assertFalse(policyDAO.findByAttrReleasePolicy(attrReleasePolicy.getConfiguration()).isEmpty());\n     }\n \n     @Test\n@@ -203,21 +189,13 @@ public void create() {\n \n         int beforeCount = policyDAO.findAll().size();\n         AccessPolicy accessPolicy = entityFactory.newEntity(AccessPolicy.class);\n-        accessPolicy.setName(\"AttrReleasePolicyAllowEverything\");\n-        accessPolicy.setDescription(\"This is a sample attr release policy that releases everything\");\n+        accessPolicy.setDescription(\"AttrReleasePolicyAllowEverything\");\n \n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n-        conf.getRequiredAttributes().putAll(Map.of(\"cn\", Set.of(\"syncope\")));\n+        conf.getRequiredAttrs().putAll(Map.of(\"cn\", Set.of(\"syncope\")));\n         conf.setName(\"AttrReleasePolicyAllowEverything\");\n+        accessPolicy.setConf(conf);\n \n-        Implementation type = entityFactory.newEntity(Implementation.class);\n-        type.setKey(\"AttrReleasePolicyAllowEverything\");\n-        type.setEngine(ImplementationEngine.JAVA);\n-        type.setType(AMImplementationType.ACCESS_POLICY_CONF);\n-        type.setBody(POJOHelper.serialize(conf));\n-        type = implementationDAO.save(type);\n-\n-        accessPolicy.setConfiguration(type);\n         accessPolicy = policyDAO.save(accessPolicy);\n \n         assertNotNull(accessPolicy);\n@@ -228,23 +206,16 @@ public void create() {\n \n         beforeCount = policyDAO.findAll().size();\n         AuthPolicy authPolicy = entityFactory.newEntity(AuthPolicy.class);\n-        authPolicy.setName(\"AuthPolicyTest\");\n-        authPolicy.setDescription(\"This is a sample authentication policy\");\n+        authPolicy.setDescription(\"AuthPolicyTest\");\n \n         DefaultAuthPolicyConf authPolicyConf = new DefaultAuthPolicyConf();\n         authPolicyConf.getAuthModules().addAll(List.of(\"LdapAuthentication1\", \"DatabaseAuthentication2\"));\n         DefaultAuthPolicyCriteriaConf criteria = new DefaultAuthPolicyCriteriaConf();\n         criteria.setName(\"DefaultConf\");\n         criteria.setAll(true);\n         authPolicyConf.setCriteria(criteria);\n-        Implementation authPolicyType = entityFactory.newEntity(Implementation.class);\n-        authPolicyType.setKey(\"AuthPolicyConfKey\");\n-        authPolicyType.setEngine(ImplementationEngine.JAVA);\n-        authPolicyType.setType(AMImplementationType.AUTH_POLICY_CONF);\n-        authPolicyType.setBody(POJOHelper.serialize(authPolicyConf));\n-        authPolicyType = implementationDAO.save(authPolicyType);\n-\n-        authPolicy.setConfiguration(authPolicyType);\n+        authPolicy.setConf(authPolicyConf);\n+\n         authPolicy = policyDAO.save(authPolicy);\n \n         assertNotNull(authPolicy);\n@@ -254,30 +225,21 @@ public void create() {\n         assertEquals(afterCount, beforeCount + 1);\n \n         beforeCount = policyDAO.findAll().size();\n-        AttrReleasePolicy attrReleasepolicy = entityFactory.newEntity(AttrReleasePolicy.class);\n-        attrReleasepolicy.setName(\"AttrReleasePolicyAllowEverything\");\n-        attrReleasepolicy.setDescription(\"This is a sample attr release policy that releases everything\");\n+        AttrReleasePolicy attrReleasePolicy = entityFactory.newEntity(AttrReleasePolicy.class);\n+        attrReleasePolicy.setDescription(\"AttrReleasePolicyAllowEverything\");\n \n         AllowedAttrReleasePolicyConf attrReleasePolicyConf = new AllowedAttrReleasePolicyConf();\n-        attrReleasePolicyConf.getAllowedAttributes().addAll(List.of(\"*\"));\n+        attrReleasePolicyConf.getAllowedAttrs().addAll(List.of(\"*\"));\n         attrReleasePolicyConf.setName(\"AttrReleasePolicyAllowEverything\");\n+        attrReleasePolicy.setConf(attrReleasePolicyConf);\n \n-        Implementation attrReleasePolicyType = entityFactory.newEntity(Implementation.class);\n-        attrReleasePolicyType.setKey(\"AttrReleasePolicyAllowEverything\");\n-        attrReleasePolicyType.setEngine(ImplementationEngine.JAVA);\n-        attrReleasePolicyType.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONF);\n-        attrReleasePolicyType.setBody(POJOHelper.serialize(attrReleasePolicyConf));\n-        attrReleasePolicyType = implementationDAO.save(attrReleasePolicyType);\n-\n-        attrReleasepolicy.setConfiguration(attrReleasePolicyType);\n-        attrReleasepolicy = policyDAO.save(attrReleasepolicy);\n+        attrReleasePolicy = policyDAO.save(attrReleasePolicy);\n \n-        assertNotNull(attrReleasepolicy);\n-        assertNotNull(attrReleasepolicy.getKey());\n+        assertNotNull(attrReleasePolicy);\n+        assertNotNull(attrReleasePolicy.getKey());\n \n         afterCount = policyDAO.findAll().size();\n         assertEquals(afterCount, beforeCount + 1);\n-\n     }\n \n     @Test"},{"sha":"8a5780cbdcd2b2460f35c561560182669724ac7d","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -45,24 +45,20 @@ under the License.\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n   \n   <!-- Authentication policies -->\n-  <Implementation id=\"MyDefaultAuthPolicyConf\" type=\"AUTH_POLICY_CONF\" engine=\"JAVA\"\n-                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n-  <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" name=\"MyDefaultAuthPolicyConf\" description=\"an authentication policy\"/>\n-  <AuthPolicy id=\"b912a0d4-a890-416f-9ab8-84ab077eb028\" name=\"DefaultAuthPolicy\" description=\"Default authentication policy\"/>\n+  <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" description=\"MyDefaultAuthPolicyConf\"\n+              jsonConf='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n+  <AuthPolicy id=\"b912a0d4-a890-416f-9ab8-84ab077eb028\" description=\"DefaultAuthPolicy\"\n+              jsonConf='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n \n   <!-- Access policies -->\n-  <Implementation id=\"MyDefaultAccessPolicyConf\" type=\"ACCESS_POLICY_CONF\" engine=\"JAVA\"\n-                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf\",\"name\":\"MyDefaultAccessPolicyConf\",\"enabled\":true,\"ssoEnabled\":true}'/>\n-  <AccessPolicy id=\"419935c7-deb3-40b3-8a9a-683037e523a2\" name=\"MyDefaultAccessPolicyConf\" description=\"an access policy\"/>\n+  <AccessPolicy id=\"419935c7-deb3-40b3-8a9a-683037e523a2\" description=\"MyDefaultAccessPolicyConf\"\n+                jsonConf='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf\",\"name\":\"MyDefaultAccessPolicyConf\",\"enabled\":true,\"ssoEnabled\":true}'/>\n \n   <!-- Attr Release Policies -->\n-  <Implementation id=\"AllowedAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONF\" engine=\"JAVA\"\n-                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"AllowedAttrReleasePolicy\",\"allowedAttributes\":[\"cn\",\"givenName\",\"uid\"]}'/>\n-  <AttrReleasePolicy id=\"319935c7-deb3-40b3-8a9a-683037e523a2\" name=\"AllowedAttrReleasePolicy\" description=\"allowed attribute release policy policy\"/>\n-\n-  <Implementation id=\"DenyAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONF\" engine=\"JAVA\"\n-                  body='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n-  <AttrReleasePolicy id=\"219935c7-deb3-40b3-8a9a-683037e523a2\" name=\"DenyAttrReleasePolicy\" description=\"deny attribute release policy policy\"/>\n+  <AttrReleasePolicy id=\"319935c7-deb3-40b3-8a9a-683037e523a2\" description=\"AllowedAttrReleasePolicy\"\n+                     jsonConf='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"AllowedAttrReleasePolicy\",\"allowedAttributes\":[\"cn\",\"givenName\",\"uid\"]}'/>\n+  <AttrReleasePolicy id=\"219935c7-deb3-40b3-8a9a-683037e523a2\" description=\"DenyAttrReleasePolicy\"\n+                     jsonConf='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n \n   <!-- Authentication modules -->\n   <AuthModule id=\"be456831-593d-4003-b273-4c3fb61700df\" name=\"DefaultLDAPAuthModule\""},{"sha":"99f240ea063aaba6b70cf3759439e3e9038b7e9b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java","status":"modified","additions":0,"deletions":42,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -21,12 +21,9 @@\n import java.lang.reflect.Modifier;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n-import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.RuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n-import org.apache.syncope.common.lib.types.AMImplementationType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n@@ -37,8 +34,6 @@\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n-import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.data.ImplementationDataBinder;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n@@ -56,8 +51,6 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n-import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n-import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n \n @Component\n public class ImplementationDataBinderImpl implements ImplementationDataBinder {\n@@ -156,17 +149,6 @@ public void update(final Implementation implementation, final ImplementationTO i\n                     base = ProvisionSorter.class;\n                     break;\n \n-                case AMImplementationType.ACCESS_POLICY_CONF:\n-                    base = AccessPolicy.class;\n-                    break;\n-\n-                case AMImplementationType.AUTH_POLICY_CONF:\n-                    base = AuthPolicy.class;\n-                    break;\n-\n-                case AMImplementationType.ATTR_RELEASE_POLICY_CONF:\n-                    base = AttrReleasePolicy.class;\n-                    break;\n                 default:\n             }\n \n@@ -176,30 +158,6 @@ public void update(final Implementation implementation, final ImplementationTO i\n             }\n \n             switch (implementation.getType()) {\n-                case AMImplementationType.ACCESS_POLICY_CONF:\n-                    AccessPolicyConf accessPolicyConf =\n-                            POJOHelper.deserialize(implementation.getBody(), AccessPolicyConf.class);\n-                    if (accessPolicyConf == null) {\n-                        sce.getElements().add(\"Could not deserialize as AccessPolicy\");\n-                        throw sce;\n-                    }\n-                    break;\n-                case AMImplementationType.ATTR_RELEASE_POLICY_CONF:\n-                    AttrReleasePolicyConf policyConf =\n-                            POJOHelper.deserialize(implementation.getBody(), AttrReleasePolicyConf.class);\n-                    if (policyConf == null) {\n-                        sce.getElements().add(\"Could not deserialize as AttrReleasePolicy\");\n-                        throw sce;\n-                    }\n-                    break;\n-                case AMImplementationType.AUTH_POLICY_CONF:\n-                    AuthPolicyConf authPolicyConf =\n-                            POJOHelper.deserialize(implementation.getBody(), AuthPolicyConf.class);\n-                    if (authPolicyConf == null) {\n-                        sce.getElements().add(\"Could not deserialize as AuthPolicy\");\n-                        throw sce;\n-                    }\n-                    break;\n                 case IdRepoImplementationType.REPORTLET:\n                     ReportletConf reportlet = POJOHelper.deserialize(implementation.getBody(), ReportletConf.class);\n                     if (reportlet == null) {"},{"sha":"8c51591ce7fd9d39aa1398d190e0eb1d8d9779b5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":14,"deletions":36,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -18,14 +18,15 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.policy.PushPolicyTO;\n-import org.apache.syncope.common.lib.to.AccessPolicyTO;\n-import org.apache.syncope.common.lib.to.AttrReleasePolicyTO;\n-import org.apache.syncope.common.lib.to.AuthPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n+import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n@@ -39,6 +40,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n@@ -52,9 +54,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n-import java.util.stream.Collectors;\n-import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n-\n @Component\n public class PolicyDataBinderImpl implements PolicyDataBinder {\n \n@@ -207,14 +206,8 @@ private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO)\n             AuthPolicy authPolicy = AuthPolicy.class.cast(result);\n             AuthPolicyTO authPolicyTO = AuthPolicyTO.class.cast(policyTO);\n \n-            authPolicy.setName(authPolicyTO.getKey());\n-            Implementation configuration = implementationDAO.find(authPolicyTO.getConfiguration());\n-            if (configuration == null) {\n-                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n-                        authPolicyTO.getConfiguration());\n-            } else {\n-                authPolicy.setConfiguration(configuration);\n-            }\n+            authPolicy.setDescription(authPolicyTO.getKey());\n+            authPolicy.setConf(authPolicyTO.getConf());\n         } else if (policyTO instanceof AccessPolicyTO) {\n             if (result == null) {\n                 result = (T) entityFactory.newEntity(AccessPolicy.class);\n@@ -223,14 +216,8 @@ private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO)\n             AccessPolicy accessPolicy = AccessPolicy.class.cast(result);\n             AccessPolicyTO accessPolicyTO = AccessPolicyTO.class.cast(policyTO);\n \n-            accessPolicy.setName(accessPolicyTO.getKey());\n-            Implementation configuration = implementationDAO.find(accessPolicyTO.getConfiguration());\n-            if (configuration == null) {\n-                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n-                        accessPolicyTO.getConfiguration());\n-            } else {\n-                accessPolicy.setConfiguration(configuration);\n-            }\n+            accessPolicy.setDescription(accessPolicyTO.getKey());\n+            accessPolicy.setConf(accessPolicyTO.getConf());\n         } else if (policyTO instanceof AttrReleasePolicyTO) {\n             if (result == null) {\n                 result = (T) entityFactory.newEntity(AttrReleasePolicy.class);\n@@ -239,14 +226,8 @@ private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO)\n             AttrReleasePolicy attrReleasePolicy = AttrReleasePolicy.class.cast(result);\n             AttrReleasePolicyTO attrReleasePolicyTO = AttrReleasePolicyTO.class.cast(policyTO);\n \n-            attrReleasePolicy.setName(attrReleasePolicyTO.getKey());\n-            Implementation configuration = implementationDAO.find(attrReleasePolicyTO.getConfiguration());\n-            if (configuration == null) {\n-                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n-                        attrReleasePolicyTO.getConfiguration());\n-            } else {\n-                attrReleasePolicy.setConfiguration(configuration);\n-            }\n+            attrReleasePolicy.setDescription(attrReleasePolicyTO.getKey());\n+            attrReleasePolicy.setConf(attrReleasePolicyTO.getConf());\n         }\n \n         if (result != null) {\n@@ -314,18 +295,15 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n                     put(rule.getAnyType().getKey(), rule.getImplementation().getKey()));\n         } else if (policy instanceof AuthPolicy) {\n             AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n-            authPolicyTO.setConfiguration(((AuthPolicy) policy).getConfiguration() == null\n-                    ? null : ((AuthPolicy) policy).getConfiguration().getKey());\n+            authPolicyTO.setConf(((AuthPolicy) policy).getConf());\n             policyTO = (T) authPolicyTO;\n         } else if (policy instanceof AccessPolicy) {\n             AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n-            accessPolicyTO.setConfiguration(((AccessPolicy) policy).getConfiguration() == null\n-                    ? null : ((AccessPolicy) policy).getConfiguration().getKey());\n+            accessPolicyTO.setConf(((AccessPolicy) policy).getConf());\n             policyTO = (T) accessPolicyTO;\n         } else if (policy instanceof AttrReleasePolicy) {\n             AttrReleasePolicyTO attrReleasePolicyTO = new AttrReleasePolicyTO();\n-            attrReleasePolicyTO.setConfiguration(((AttrReleasePolicy) policy).getConfiguration() == null\n-                    ? null : ((AttrReleasePolicy) policy).getConfiguration().getKey());\n+            attrReleasePolicyTO.setConf(((AttrReleasePolicy) policy).getConf());\n             policyTO = (T) attrReleasePolicyTO;\n         }\n "},{"sha":"4f7c22594c6431187e85f9052f88564597c276a1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/wa/WAClientAppBinderImpl.java","status":"modified","additions":6,"deletions":13,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppBinderImpl.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -21,7 +21,6 @@\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n-import org.apache.syncope.core.spring.ImplementationManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -43,27 +42,21 @@ public WAClientApp getWAClientApp(final ClientApp clientApp) {\n \n         try {\n             if (clientApp.getAuthPolicy() != null) {\n-                waClientApp.setAuthPolicyConf(\n-                        ImplementationManager.build((clientApp.getAuthPolicy()).getConfiguration()));\n+                waClientApp.setAuthPolicyConf((clientApp.getAuthPolicy()).getConf());\n             } else if (clientApp.getRealm().getAuthPolicy() != null) {\n-                waClientApp.setAuthPolicyConf(\n-                        ImplementationManager.build((clientApp.getRealm().getAuthPolicy()).getConfiguration()));\n+                waClientApp.setAuthPolicyConf((clientApp.getRealm().getAuthPolicy()).getConf());\n             }\n \n             if (clientApp.getAccessPolicy() != null) {\n-                waClientApp.setAccessPolicyConf(\n-                        ImplementationManager.build((clientApp.getAccessPolicy()).getConfiguration()));\n+                waClientApp.setAccessPolicyConf((clientApp.getAccessPolicy()).getConf());\n             } else if (clientApp.getRealm().getAccessPolicy() != null) {\n-                waClientApp.setAccessPolicyConf(\n-                        ImplementationManager.build((clientApp.getRealm().getAccessPolicy()).getConfiguration()));\n+                waClientApp.setAccessPolicyConf((clientApp.getRealm().getAccessPolicy()).getConf());\n             }\n \n             if (clientApp.getAttrReleasePolicy() != null) {\n-                waClientApp.setAttrReleasePolicyConf(\n-                        ImplementationManager.build((clientApp.getAttrReleasePolicy()).getConfiguration()));\n+                waClientApp.setAttrReleasePolicyConf((clientApp.getAttrReleasePolicy()).getConf());\n             } else if (clientApp.getRealm().getAttrReleasePolicy() != null) {\n-                waClientApp.setAttrReleasePolicyConf(\n-                        ImplementationManager.build((clientApp.getRealm().getAttrReleasePolicy()).getConfiguration()));\n+                waClientApp.setAttrReleasePolicyConf((clientApp.getRealm().getAttrReleasePolicy()).getConf());\n             }\n         } catch (Exception e) {\n             LOG.error(\"While building the configuration from an application's policy \", e);"},{"sha":"90a865a9f2a774258536645a04aa2ea5b5435061","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -65,7 +65,7 @@\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.Attr;\n-import org.apache.syncope.common.lib.to.AccessPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -76,7 +76,7 @@\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n-import org.apache.syncope.common.lib.to.AuthPolicyTO;\n+import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.common.lib.to.client.ClientAppTO;\n import org.apache.syncope.common.lib.to.client.OIDCRPTO;"},{"sha":"f0caecf6fcbda1c832065f6511c40ebf4ae662c4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ClientAppITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -26,7 +26,7 @@\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AccessPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n import org.apache.syncope.common.lib.types.ClientAppType;"},{"sha":"9df49906bafefe3a08e93f5e2fc89550c17af2fc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":35,"deletions":128,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -36,10 +36,9 @@\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.policy.PushPolicyTO;\n-import org.apache.syncope.common.lib.to.AccessPolicyTO;\n-import org.apache.syncope.common.lib.to.AttrReleasePolicyTO;\n+import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n-import org.apache.syncope.common.lib.types.AMImplementationType;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n@@ -51,109 +50,48 @@\n import org.apache.syncope.fit.core.reference.DummyPullCorrelationRule;\n import org.apache.syncope.fit.core.reference.DummyPushCorrelationRule;\n import org.junit.jupiter.api.Test;\n-import org.junit.platform.commons.util.StringUtils;\n import javax.ws.rs.core.Response;\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.List;\n import java.util.Set;\n+import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n-import org.apache.syncope.common.lib.to.AuthPolicyTO;\n \n public class PolicyITCase extends AbstractITCase {\n \n     private static AuthPolicyTO buildAuthPolicyTO() {\n-        String authPolicyName = \"TestAuthPolicy\" + getUUIDString();\n-        ImplementationTO implementationTO = null;\n-        try {\n-            implementationTO = implementationService.read(AMImplementationType.AUTH_POLICY_CONF, authPolicyName);\n-        } catch (SyncopeClientException e) {\n-            if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n-                implementationTO = new ImplementationTO();\n-                implementationTO.setKey(authPolicyName);\n-                implementationTO.setEngine(ImplementationEngine.JAVA);\n-                implementationTO.setType(AMImplementationType.AUTH_POLICY_CONF);\n-\n-                DefaultAuthPolicyConf conf = new DefaultAuthPolicyConf();\n-                conf.getAuthModules().addAll(List.of(\"LdapAuthentication1\"));\n-                implementationTO.setBody(POJOHelper.serialize(conf));\n-\n-                Response response = implementationService.create(implementationTO);\n-                implementationTO = implementationService.read(\n-                        implementationTO.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n-                assertNotNull(implementationTO);\n-            }\n-        }\n-        assertNotNull(implementationTO);\n-\n         AuthPolicyTO policy = new AuthPolicyTO();\n         policy.setDescription(\"Test Authentication policy\");\n-        policy.setKey(implementationTO.getKey());\n+\n+        DefaultAuthPolicyConf conf = new DefaultAuthPolicyConf();\n+        conf.getAuthModules().addAll(List.of(\"LdapAuthentication1\"));\n+        policy.setConf(conf);\n \n         return policy;\n     }\n \n     private static AttrReleasePolicyTO buildAttributeReleasePolicyTO(final String policyName) {\n-        ImplementationTO implementationTO = null;\n-        try {\n-            implementationTO = implementationService.read(AMImplementationType.ATTR_RELEASE_POLICY_CONF, policyName);\n-        } catch (SyncopeClientException e) {\n-            if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n-                implementationTO = new ImplementationTO();\n-                implementationTO.setKey(policyName);\n-                implementationTO.setEngine(ImplementationEngine.JAVA);\n-                implementationTO.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONF);\n-\n-                AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n-                conf.setName(\"MyDefaultAttrReleasePolicyConf\");\n-                conf.getAllowedAttributes().addAll(List.of(\"cn\", \"givenName\"));\n-                implementationTO.setBody(POJOHelper.serialize(conf));\n-\n-                Response response = implementationService.create(implementationTO);\n-                implementationTO = implementationService.read(\n-                        implementationTO.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n-                assertNotNull(implementationTO);\n-            }\n-        }\n-        assertNotNull(implementationTO);\n-\n         AttrReleasePolicyTO policy = new AttrReleasePolicyTO();\n         policy.setDescription(\"Test Attribute Release policy\");\n-        policy.setKey(implementationTO.getKey());\n+\n+        AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n+        conf.setName(\"MyDefaultAttrReleasePolicyConf\");\n+        conf.getAllowedAttrs().addAll(List.of(\"cn\", \"givenName\"));\n+        policy.setConf(conf);\n \n         return policy;\n     }\n \n     private static AccessPolicyTO buildAccessPolicyTO() {\n-        final String accessPolicyName = \"TestAccessPolicy\" + getUUIDString();\n-\n-        ImplementationTO implementationTO = null;\n-        try {\n-            implementationTO = implementationService.read(AMImplementationType.ACCESS_POLICY_CONF, accessPolicyName);\n-        } catch (SyncopeClientException e) {\n-            if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n-                implementationTO = new ImplementationTO();\n-                implementationTO.setKey(accessPolicyName);\n-                implementationTO.setEngine(ImplementationEngine.JAVA);\n-                implementationTO.setType(AMImplementationType.ACCESS_POLICY_CONF);\n-\n-                DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n-                conf.setEnabled(true);\n-                conf.setName(\"TestAccessPolicyConf\");\n-                conf.getRequiredAttributes().put(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n-                implementationTO.setBody(POJOHelper.serialize(conf));\n-\n-                Response response = implementationService.create(implementationTO);\n-                implementationTO = implementationService.read(\n-                        implementationTO.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n-                assertNotNull(implementationTO);\n-            }\n-        }\n-        assertNotNull(implementationTO);\n-\n         AccessPolicyTO policy = new AccessPolicyTO();\n         policy.setDescription(\"Test Access policy\");\n-        policy.setKey(implementationTO.getKey());\n+\n+        DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n+        conf.setEnabled(true);\n+        conf.setName(\"TestAccessPolicyConf\");\n+        conf.getRequiredAttrs().put(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n+        policy.setConf(conf);\n \n         return policy;\n     }\n@@ -329,92 +267,61 @@ public void updateAuthPolicy() {\n         assertNotNull(newAuthPolicyTO);\n         newAuthPolicyTO = createPolicy(PolicyType.AUTH, newAuthPolicyTO);\n \n-        ImplementationTO authPolicyImplementationTO = implementationService.read(AMImplementationType.AUTH_POLICY_CONF, \"MyDefaultAuthPolicyConf\");\n-        assertNotNull(authPolicyImplementationTO);\n-        assertFalse(StringUtils.isBlank(authPolicyImplementationTO.getBody()));\n-\n-        DefaultAuthPolicyConf authPolicyConf =\n-                POJOHelper.deserialize(authPolicyImplementationTO.getBody(), DefaultAuthPolicyConf.class);\n-        assertNotNull(authPolicyConf);\n+        DefaultAuthPolicyConf authPolicyConf = (DefaultAuthPolicyConf) newAuthPolicyTO.getConf();\n         authPolicyConf.getAuthModules().add(\"LdapAuthentication\");\n-        authPolicyImplementationTO.setBody(POJOHelper.serialize(authPolicyConf));\n \n         // update new authentication policy\n         policyService.update(PolicyType.AUTH, newAuthPolicyTO);\n         newAuthPolicyTO = policyService.read(PolicyType.AUTH, newAuthPolicyTO.getKey());\n         assertNotNull(newAuthPolicyTO);\n \n-        authPolicyConf = POJOHelper.deserialize(authPolicyImplementationTO.getBody(),\n-                DefaultAuthPolicyConf.class);\n+        authPolicyConf = (DefaultAuthPolicyConf) newAuthPolicyTO.getConf();\n         assertNotNull(authPolicyConf);\n         assertEquals(2, authPolicyConf.getAuthModules().size());\n         assertTrue(authPolicyConf.getAuthModules().contains(\"LdapAuthentication\"));\n     }\n \n     @Test\n     public void updateAccessPolicy() {\n-        AccessPolicyTO globalAccessPolicyTO =\n-                policyService.read(PolicyType.ACCESS, \"419935c7-deb3-40b3-8a9a-683037e523a2\");\n-        assertNotNull(globalAccessPolicyTO);\n-\n         AccessPolicyTO newAccessPolicyTO = buildAccessPolicyTO();\n         newAccessPolicyTO = createPolicy(PolicyType.ACCESS, newAccessPolicyTO);\n         assertNotNull(newAccessPolicyTO);\n \n-        ImplementationTO accessPolicyImplementationTO = implementationService.read(AMImplementationType.ACCESS_POLICY_CONF, \"MyDefaultAccessPolicyConf\");\n-        assertNotNull(accessPolicyImplementationTO);\n-        assertFalse(StringUtils.isBlank(accessPolicyImplementationTO.getBody()));\n-\n-        DefaultAccessPolicyConf accessPolicyConf =\n-                POJOHelper.deserialize(accessPolicyImplementationTO.getBody(), DefaultAccessPolicyConf.class);\n-        assertNotNull(accessPolicyConf);\n-        accessPolicyConf.getRequiredAttributes().put(\"ou\", Set.of(\"test\"));\n-        accessPolicyConf.getRequiredAttributes().put(\"cn\", Set.of(\"admin\", \"Admin\"));\n-        accessPolicyImplementationTO.setBody(POJOHelper.serialize(accessPolicyConf));\n+        DefaultAccessPolicyConf accessPolicyConf = (DefaultAccessPolicyConf) newAccessPolicyTO.getConf();\n+        accessPolicyConf.getRequiredAttrs().put(\"ou\", Set.of(\"test\"));\n+        accessPolicyConf.getRequiredAttrs().put(\"cn\", Set.of(\"admin\", \"Admin\"));\n \n         // update new authentication policy\n         policyService.update(PolicyType.ACCESS, newAccessPolicyTO);\n         newAccessPolicyTO = policyService.read(PolicyType.ACCESS, newAccessPolicyTO.getKey());\n         assertNotNull(newAccessPolicyTO);\n \n-        accessPolicyConf = POJOHelper.deserialize(accessPolicyImplementationTO.getBody(), DefaultAccessPolicyConf.class);\n-        assertEquals(2, accessPolicyConf.getRequiredAttributes().size());\n-        assertNotNull(accessPolicyConf.getRequiredAttributes().get(\"cn\"));\n-        assertNotNull(accessPolicyConf.getRequiredAttributes().get(\"ou\"));\n-\n+        accessPolicyConf = (DefaultAccessPolicyConf) newAccessPolicyTO.getConf();\n+        assertEquals(2, accessPolicyConf.getRequiredAttrs().size());\n+        assertNotNull(accessPolicyConf.getRequiredAttrs().get(\"cn\"));\n+        assertNotNull(accessPolicyConf.getRequiredAttrs().get(\"ou\"));\n     }\n \n     @Test\n     public void updateAttrReleasePolicy() {\n-        AttrReleasePolicyTO policyTO =\n-                policyService.read(PolicyType.ATTR_RELEASE, \"319935c7-deb3-40b3-8a9a-683037e523a2\");\n-        assertNotNull(policyTO);\n-\n-        final String policyName = \"TestAttrReleasePolicy\" + getUUIDString();\n+        String policyName = \"TestAttrReleasePolicy\" + getUUIDString();\n         AttrReleasePolicyTO newPolicyTO = buildAttributeReleasePolicyTO(policyName);\n         newPolicyTO = createPolicy(PolicyType.ATTR_RELEASE, newPolicyTO);\n         assertNotNull(newPolicyTO);\n \n-        ImplementationTO implementationTO = implementationService.read(AMImplementationType.ATTR_RELEASE_POLICY_CONF, policyName);\n-        assertNotNull(implementationTO);\n-        assertFalse(StringUtils.isBlank(implementationTO.getBody()));\n-\n-        AllowedAttrReleasePolicyConf policyConf =\n-                POJOHelper.deserialize(implementationTO.getBody(), AllowedAttrReleasePolicyConf.class);\n-        assertNotNull(policyConf);\n-        policyConf.getAllowedAttributes().add(\"postalCode\");\n-        implementationTO.setBody(POJOHelper.serialize(policyConf));\n+        AllowedAttrReleasePolicyConf policyConf = (AllowedAttrReleasePolicyConf) newPolicyTO.getConf();\n+        policyConf.getAllowedAttrs().add(\"postalCode\");\n \n         // update new policy\n         policyService.update(PolicyType.ATTR_RELEASE, newPolicyTO);\n         newPolicyTO = policyService.read(PolicyType.ATTR_RELEASE, newPolicyTO.getKey());\n         assertNotNull(newPolicyTO);\n \n-        policyConf = POJOHelper.deserialize(implementationTO.getBody(), AllowedAttrReleasePolicyConf.class);\n-        assertEquals(3, policyConf.getAllowedAttributes().size());\n-        assertTrue(policyConf.getAllowedAttributes().contains(\"cn\"));\n-        assertTrue(policyConf.getAllowedAttributes().contains(\"postalCode\"));\n-        assertTrue(policyConf.getAllowedAttributes().contains(\"givenName\"));\n+        policyConf = (AllowedAttrReleasePolicyConf) newPolicyTO.getConf();\n+        assertEquals(3, policyConf.getAllowedAttrs().size());\n+        assertTrue(policyConf.getAllowedAttrs().contains(\"cn\"));\n+        assertTrue(policyConf.getAllowedAttrs().contains(\"postalCode\"));\n+        assertTrue(policyConf.getAllowedAttrs().contains(\"givenName\"));\n \n     }\n "},{"sha":"a3dfd886d9339c154f16f7d888cdb17abed986ab","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":11,"deletions":36,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -39,13 +39,12 @@\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n-import org.apache.syncope.common.lib.to.AccessPolicyTO;\n-import org.apache.syncope.common.lib.to.AttrReleasePolicyTO;\n-import org.apache.syncope.common.lib.to.AuthPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n+import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n-import org.apache.syncope.common.lib.types.AMImplementationType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -217,25 +216,17 @@ public void deletingAuthPolicy() {\n         DefaultAuthPolicyConf ruleConf = new DefaultAuthPolicyConf();\n         ruleConf.getAuthModules().addAll(List.of(\"LdapAuthentication1\"));\n \n-        ImplementationTO rule = new ImplementationTO();\n-        rule.setKey(\"TestAuthPolicy\" + getUUIDString());\n-        rule.setEngine(ImplementationEngine.JAVA);\n-        rule.setType(AMImplementationType.AUTH_POLICY_CONF);\n-        rule.setBody(POJOHelper.serialize(ruleConf));\n-        Response response = implementationService.create(rule);\n-        rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n-\n         AuthPolicyTO policy = new AuthPolicyTO();\n         policy.setDescription(\"Test Authentication policy\");\n-        policy.setKey(rule.getKey());\n+        policy.setConf(ruleConf);\n         policy = createPolicy(PolicyType.AUTH, policy);\n         assertNotNull(policy);\n \n         // 2. create realm with policy assigned\n         RealmTO realm = new RealmTO();\n         realm.setName(\"withAuthPolicy\");\n \n-        response = realmService.create(SyncopeConstants.ROOT_REALM, realm);\n+        Response response = realmService.create(SyncopeConstants.ROOT_REALM, realm);\n         RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n         assertNotNull(actuals);\n         assertTrue(actuals.length > 0);\n@@ -266,27 +257,19 @@ public void deletingAccessPolicy() {\n         DefaultAccessPolicyConf ruleConf = new DefaultAccessPolicyConf();\n         ruleConf.setEnabled(true);\n         ruleConf.setName(\"TestAccessPolicyConf\" + getUUIDString());\n-        ruleConf.getRequiredAttributes().put(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n-\n-        ImplementationTO rule = new ImplementationTO();\n-        rule.setKey(\"TestAccessPolicy\" + getUUIDString());\n-        rule.setEngine(ImplementationEngine.JAVA);\n-        rule.setType(AMImplementationType.ACCESS_POLICY_CONF);\n-        rule.setBody(POJOHelper.serialize(ruleConf));\n-        Response response = implementationService.create(rule);\n-        rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+        ruleConf.getRequiredAttrs().put(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n \n         AccessPolicyTO policy = new AccessPolicyTO();\n         policy.setDescription(\"Test Access policy\");\n-        policy.setKey(rule.getKey());\n+        policy.setConf(ruleConf);\n         policy = createPolicy(PolicyType.ACCESS, policy);\n         assertNotNull(policy);\n \n         // 2. create realm with policy assigned\n         RealmTO realm = new RealmTO();\n         realm.setName(\"withAccessPolicy\");\n \n-        response = realmService.create(SyncopeConstants.ROOT_REALM, realm);\n+        Response response = realmService.create(SyncopeConstants.ROOT_REALM, realm);\n         RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n         assertNotNull(actuals);\n         assertTrue(actuals.length > 0);\n@@ -316,27 +299,19 @@ public void deletingAttributeReleasePolicy() {\n         // 1. create attribute release policy\n         AllowedAttrReleasePolicyConf ruleConf = new AllowedAttrReleasePolicyConf();\n         ruleConf.setName(\"MyDefaultAttrReleasePolicyConf\" + getUUIDString());\n-        ruleConf.getAllowedAttributes().addAll(List.of(\"cn\", \"givenName\"));\n-\n-        ImplementationTO rule = new ImplementationTO();\n-        rule.setKey(\"TestAttrReleasePolicy\" + getUUIDString());\n-        rule.setEngine(ImplementationEngine.JAVA);\n-        rule.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONF);\n-        rule.setBody(POJOHelper.serialize(ruleConf));\n-        Response response = implementationService.create(rule);\n-        rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+        ruleConf.getAllowedAttrs().addAll(List.of(\"cn\", \"givenName\"));\n \n         AttrReleasePolicyTO policy = new AttrReleasePolicyTO();\n         policy.setDescription(\"Test Attribute Release policy\");\n-        policy.setKey(rule.getKey());\n+        policy.setConf(ruleConf);\n         policy = createPolicy(PolicyType.ATTR_RELEASE, policy);\n         assertNotNull(policy);\n \n         // 2. create realm with policy assigned\n         RealmTO realm = new RealmTO();\n         realm.setName(\"withAttrReleasePolicy\");\n \n-        response = realmService.create(SyncopeConstants.ROOT_REALM, realm);\n+        Response response = realmService.create(SyncopeConstants.ROOT_REALM, realm);\n         RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n         assertNotNull(actuals);\n         assertTrue(actuals.length > 0);"},{"sha":"ce944a716f8f8353a38dc96f719fc4684c416552","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWABootstrapConfiguration.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWABootstrapConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWABootstrapConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWABootstrapConfiguration.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.wa.bootstrap;\n \n-import org.apache.syncope.wa.WARestClient;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.cloud.bootstrap.config.PropertySourceLocator;"},{"sha":"76ff64d69a4cc0d1fde95264c837c98603601e7c","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -46,7 +46,6 @@\n import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n import org.apache.syncope.common.rest.api.service.AuthModuleService;\n-import org.apache.syncope.wa.WARestClient;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.cloud.bootstrap.config.PropertySourceLocator;"},{"sha":"4ad7369eb905518b6359aeeacaeba1333ec061a2","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/WARestClient.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWARestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWARestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWARestClient.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.wa;\n+package org.apache.syncope.wa.bootstrap;\n \n import org.apereo.cas.util.spring.ApplicationContextProvider;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;","previous_filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/WARestClient.java"},{"sha":"27467935f0819cb19a39b3fd58da17676e3aca67","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/RegisteredServiceMapper.java","status":"removed","additions":0,"deletions":205,"changes":205,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/76315c128e196e531885749a6df998a373fb701d/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FRegisteredServiceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/76315c128e196e531885749a6df998a373fb701d/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FRegisteredServiceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FRegisteredServiceMapper.java?ref=76315c128e196e531885749a6df998a373fb701d","patch":"@@ -1,205 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.wa.starter;\n-\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n-import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n-import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n-import org.apache.syncope.common.lib.policy.DefaultAuthPolicyCriteriaConf;\n-import org.apache.syncope.common.lib.wa.WAClientApp;\n-import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n-import org.apache.syncope.common.lib.types.OIDCSubjectType;\n-import org.apache.syncope.common.lib.types.SAML2SPNameId;\n-import org.apereo.cas.services.DefaultRegisteredServiceAccessStrategy;\n-import org.apereo.cas.services.DefaultRegisteredServiceAuthenticationPolicy;\n-import org.apereo.cas.services.DenyAllAttributeReleasePolicy;\n-import org.apereo.cas.services.OidcRegisteredService;\n-import org.apereo.cas.services.RegisteredService;\n-import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n-import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n-import org.apereo.cas.services.AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria;\n-import org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy;\n-import org.apereo.cas.support.saml.services.SamlRegisteredService;\n-\n-public final class RegisteredServiceMapper {\n-\n-    private RegisteredServiceMapper() {\n-        // private constructor for static utility class\n-    }\n-\n-    public static RegisteredService toRegisteredService(final WAClientApp clientApp) {\n-        DefaultRegisteredServiceAuthenticationPolicy authPolicy = new DefaultRegisteredServiceAuthenticationPolicy();\n-        AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria criteria =\n-                new AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria();\n-        criteria.setTryAll(((DefaultAuthPolicyCriteriaConf) clientApp.getAuthPolicyConf().getCriteria()).isAll());\n-        authPolicy.setCriteria(criteria);\n-\n-        RegisteredServiceAccessStrategy accessStrategy = new DefaultRegisteredServiceAccessStrategy(\n-                clientApp.getAccessPolicyConf().isEnabled(), clientApp.getAccessPolicyConf().isSsoEnabled());\n-        accessStrategy.getRequiredAttributes().putAll(clientApp.getAccessPolicyConf().getRequiredAttributes());\n-\n-        RegisteredServiceAttributeReleasePolicy attributeReleasePolicy;\n-        if (clientApp.getAttrReleasePolicyConf() != null\n-                && clientApp.getAttrReleasePolicyConf() instanceof AllowedAttrReleasePolicyConf\n-                && !((AllowedAttrReleasePolicyConf) clientApp.getAttrReleasePolicyConf()).\n-                        getAllowedAttributes().isEmpty()) {\n-\n-            attributeReleasePolicy = new ReturnAllowedAttributeReleasePolicy();\n-            ((AllowedAttrReleasePolicyConf) clientApp.getAttrReleasePolicyConf()).getAllowedAttributes();\n-            ((ReturnAllowedAttributeReleasePolicy) attributeReleasePolicy).getAllowedAttributes().addAll(\n-                    ((AllowedAttrReleasePolicyConf) clientApp.getAttrReleasePolicyConf()).getAllowedAttributes());\n-        } else {\n-            attributeReleasePolicy = new DenyAllAttributeReleasePolicy();\n-        }\n-\n-        if (clientApp.getClientAppTO() instanceof OIDCRPTO) {\n-            OIDCRPTO rp = OIDCRPTO.class.cast(clientApp.getClientAppTO());\n-            OidcRegisteredService service = new OidcRegisteredService();\n-\n-            String redirectURIs = String.join(\"|\", rp.getRedirectUris());\n-            service.setServiceId(redirectURIs);\n-            service.setName(rp.getName());\n-            service.setDescription(rp.getDescription());\n-            service.setAccessStrategy(accessStrategy);\n-            service.setAuthenticationPolicy(authPolicy);\n-            service.setAttributeReleasePolicy(attributeReleasePolicy);\n-\n-            service.setClientId(rp.getClientId());\n-            service.setClientSecret(rp.getClientSecret());\n-            service.setSignIdToken(rp.isSignIdToken());\n-            service.setJwks(rp.getJwks());\n-            service.setSubjectType(rp.getSubjectType().name());\n-            service.setRedirectUrl(redirectURIs);\n-            service.setSupportedGrantTypes((HashSet<String>) rp.getSupportedGrantTypes());\n-            service.setSupportedResponseTypes((HashSet<String>) rp.getSupportedResponseTypes());\n-\n-            return service;\n-        } else if (clientApp.getClientAppTO() instanceof SAML2SPTO) {\n-            SAML2SPTO sp = SAML2SPTO.class.cast(clientApp.getClientAppTO());\n-            SamlRegisteredService service = new SamlRegisteredService();\n-\n-            service.setServiceId(sp.getEntityId());\n-            service.setName(sp.getName());\n-            service.setDescription(sp.getDescription());\n-            service.setAccessStrategy(accessStrategy);\n-            service.setAuthenticationPolicy(authPolicy);\n-            service.setAttributeReleasePolicy(attributeReleasePolicy);\n-\n-            service.setMetadataLocation(sp.getMetadataLocation());\n-            service.setMetadataSignatureLocation(sp.getMetadataSignatureLocation());\n-            service.setSignAssertions(sp.isSignAssertions());\n-            service.setSignResponses(sp.isSignResponses());\n-            service.setEncryptionOptional(sp.isEncryptionOptional());\n-            service.setEncryptAssertions(sp.isEncryptAssertions());\n-            service.setRequiredAuthenticationContextClass(sp.getRequiredAuthenticationContextClass());\n-            service.setRequiredNameIdFormat(sp.getRequiredNameIdFormat().getNameId());\n-            service.setSkewAllowance(sp.getSkewAllowance());\n-            service.setNameIdQualifier(sp.getNameIdQualifier());\n-            service.setAssertionAudiences(sp.getAssertionAudiences());\n-            service.setServiceProviderNameIdQualifier(sp.getServiceProviderNameIdQualifier());\n-\n-            return service;\n-        }\n-\n-        return null;\n-    }\n-\n-    public static WAClientApp fromRegisteredService(final RegisteredService service) {\n-        WAClientApp clientApp = new WAClientApp();\n-\n-        if (service.getAuthenticationPolicy() != null) {\n-            DefaultAuthPolicyConf authPolicyConf = new DefaultAuthPolicyConf();\n-            DefaultAuthPolicyCriteriaConf criteria = new DefaultAuthPolicyCriteriaConf();\n-            criteria.setAll(((DefaultAuthPolicyCriteriaConf) service.getAuthenticationPolicy().getCriteria()).isAll());\n-            authPolicyConf.setCriteria(criteria);\n-\n-            clientApp.setAuthPolicyConf(authPolicyConf);\n-        }\n-\n-        if (service.getAccessStrategy() != null) {\n-            DefaultAccessPolicyConf accessPolicyConf = new DefaultAccessPolicyConf();\n-            accessPolicyConf.setEnabled(\n-                    ((DefaultRegisteredServiceAccessStrategy) service.getAccessStrategy()).isEnabled());\n-            accessPolicyConf.setSsoEnabled(\n-                    ((DefaultRegisteredServiceAccessStrategy) service.getAccessStrategy()).isSsoEnabled());\n-            accessPolicyConf.getRequiredAttributes().putAll(\n-                    ((DefaultRegisteredServiceAccessStrategy) service.getAccessStrategy()).getRejectedAttributes());\n-\n-            clientApp.setAccessPolicyConf(accessPolicyConf);\n-        }\n-\n-        if (service.getAttributeReleasePolicy() != null) {\n-\n-            if (service.getAttributeReleasePolicy() instanceof ReturnAllowedAttributeReleasePolicy) {\n-                ReturnAllowedAttributeReleasePolicy returnAllowedAttributeReleasePolicy =\n-                        ReturnAllowedAttributeReleasePolicy.class.cast(service.getAttributeReleasePolicy());\n-                AllowedAttrReleasePolicyConf allowedAttrReleasePolicyConf = new AllowedAttrReleasePolicyConf();\n-                allowedAttrReleasePolicyConf.getAllowedAttributes().addAll(returnAllowedAttributeReleasePolicy.\n-                        getAllowedAttributes());\n-\n-                clientApp.setAttrReleasePolicyConf(allowedAttrReleasePolicyConf);\n-            }\n-        }\n-\n-        if (service instanceof OidcRegisteredService) {\n-            OidcRegisteredService oidc = OidcRegisteredService.class.cast(service);\n-            OIDCRPTO oidcrpto = new OIDCRPTO();\n-\n-            oidcrpto.getRedirectUris().addAll(Arrays.asList(oidc.getServiceId().split(\"|\")));\n-            oidcrpto.setName(oidc.getName());\n-            oidcrpto.setDescription(oidc.getDescription());\n-            oidcrpto.setClientId(oidc.getClientId());\n-            oidcrpto.setClientSecret(oidc.getClientSecret());\n-            oidcrpto.setSignIdToken(oidc.isSignIdToken());\n-            oidcrpto.setJwks(oidc.getJwks());\n-            oidcrpto.setSubjectType(OIDCSubjectType.valueOf(oidc.getSubjectType()));\n-            oidcrpto.getSupportedGrantTypes().addAll(oidc.getSupportedGrantTypes());\n-            oidcrpto.getSupportedResponseTypes().addAll(oidc.getSupportedResponseTypes());\n-\n-            clientApp.setClientAppTO(oidcrpto);\n-        } else if (service instanceof SamlRegisteredService) {\n-            SamlRegisteredService saml = SamlRegisteredService.class.cast(service);\n-            SAML2SPTO saml2spto = new SAML2SPTO();\n-\n-            saml2spto.setEntityId(saml.getServiceId());\n-            saml2spto.setName(saml.getName());\n-            saml2spto.setDescription(saml.getDescription());\n-\n-            saml2spto.setMetadataLocation(saml.getMetadataLocation());\n-            saml2spto.setMetadataSignatureLocation(saml.getMetadataSignatureLocation());\n-            saml2spto.setSignAssertions(saml.isSignAssertions());\n-            saml2spto.setSignResponses(saml.isSignResponses());\n-            saml2spto.setEncryptionOptional(saml.isEncryptionOptional());\n-            saml2spto.setEncryptAssertions(saml.isEncryptAssertions());\n-            saml2spto.setRequiredAuthenticationContextClass(saml.getRequiredAuthenticationContextClass());\n-            saml2spto.setRequiredNameIdFormat(SAML2SPNameId.valueOf(saml.getRequiredNameIdFormat()));\n-            saml2spto.setSkewAllowance(saml.getSkewAllowance());\n-            saml2spto.setNameIdQualifier(saml.getNameIdQualifier());\n-            saml2spto.setAssertionAudiences(saml.getAssertionAudiences());\n-            saml2spto.setServiceProviderNameIdQualifier(saml.getServiceProviderNameIdQualifier());\n-\n-            clientApp.setClientAppTO(saml2spto);\n-        }\n-\n-        return clientApp;\n-    }\n-}"},{"sha":"a10a7fff4579ca7419f54201dd226936687e7a9f","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeServiceRegistry.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeServiceRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeServiceRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeServiceRegistry.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -18,11 +18,12 @@\n  */\n package org.apache.syncope.wa.starter;\n \n+import org.apache.syncope.wa.starter.mapping.RegisteredServiceMapper;\n import java.util.Collection;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.types.ClientAppType;\n-import org.apache.syncope.wa.WARestClient;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.services.AbstractServiceRegistry;\n import org.apereo.cas.services.OidcRegisteredService;\n import org.apereo.cas.services.RegisteredService;\n@@ -39,13 +40,17 @@ public class SyncopeServiceRegistry extends AbstractServiceRegistry {\n \n     private final WARestClient restClient;\n \n+    private final RegisteredServiceMapper registeredServiceMapper;\n+\n     public SyncopeServiceRegistry(\n             final WARestClient restClient,\n+            final RegisteredServiceMapper registeredServiceMapper,\n             final ConfigurableApplicationContext applicationContext,\n             final Collection<ServiceRegistryListener> serviceRegistryListeners) {\n \n         super(applicationContext, serviceRegistryListeners);\n         this.restClient = restClient;\n+        this.registeredServiceMapper = registeredServiceMapper;\n     }\n \n     @Override\n@@ -63,7 +68,7 @@ public Collection<RegisteredService> load() {\n         if (WARestClient.isReady()) {\n             LOG.info(\"Loading application definitions\");\n             return restClient.getSyncopeClient().getService(WAClientAppService.class).list().stream().\n-                    map(clientApp -> RegisteredServiceMapper.toRegisteredService(clientApp)).\n+                    map(clientApp -> registeredServiceMapper.toRegisteredService(clientApp)).\n                     collect(Collectors.toList());\n         }\n         LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n@@ -74,7 +79,7 @@ public Collection<RegisteredService> load() {\n     public RegisteredService findServiceById(final long id) {\n         if (WARestClient.isReady()) {\n             LOG.info(\"Searching for application definition by id {}\", id);\n-            return RegisteredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+            return registeredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n                     getService(WAClientAppService.class).read(id, null));\n         }\n         LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n@@ -87,10 +92,10 @@ public <T extends RegisteredService> T findServiceById(final long id, final Clas\n         if (WARestClient.isReady()) {\n             LOG.info(\"Searching for application definition by id {} and type {}\", id, clazz);\n             if (clazz.isInstance(OidcRegisteredService.class)) {\n-                return (T) RegisteredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+                return (T) registeredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n                         getService(WAClientAppService.class).read(id, ClientAppType.OIDCRP));\n             } else if (clazz.isInstance(SamlRegisteredService.class)) {\n-                return (T) RegisteredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+                return (T) registeredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n                         getService(WAClientAppService.class).read(id, ClientAppType.SAML2SP));\n             }\n         }\n@@ -104,10 +109,10 @@ public <T extends RegisteredService> T findServiceByExactServiceName(final Strin\n         if (WARestClient.isReady()) {\n             LOG.info(\"Searching for application definition by name {} and type {}\", name, clazz);\n             if (clazz.isInstance(OidcRegisteredService.class)) {\n-                return (T) RegisteredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+                return (T) registeredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n                         getService(WAClientAppService.class).read(name, ClientAppType.OIDCRP));\n             } else if (clazz.isInstance(SamlRegisteredService.class)) {\n-                return (T) RegisteredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+                return (T) registeredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n                         getService(WAClientAppService.class).read(name, ClientAppType.SAML2SP));\n             }\n         }\n@@ -119,7 +124,7 @@ public <T extends RegisteredService> T findServiceByExactServiceName(final Strin\n     public RegisteredService findServiceByExactServiceName(final String name) {\n         if (WARestClient.isReady()) {\n             LOG.info(\"Searching for application definition by name {}\", name);\n-            return RegisteredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+            return registeredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n                     getService(WAClientAppService.class).read(name, null));\n         }\n         LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");"},{"sha":"731eadd42db74001bf3353056bdae74598dc8225","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAAuditTrailManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAAuditTrailManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAAuditTrailManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAAuditTrailManager.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n-import org.apache.syncope.wa.WARestClient;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.inspektr.audit.AuditActionContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"6a615ccd8f2ac33a5d899c462e44732dde89b052","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAConfiguration.java","status":"modified","additions":86,"deletions":20,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -18,37 +18,46 @@\n  */\n package org.apache.syncope.wa.starter;\n \n-import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n-import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n-import org.apereo.cas.services.ServiceRegistryListener;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n-import org.apache.syncope.wa.WARestClient;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apache.syncope.wa.starter.mapping.AccessMapFor;\n+import org.apache.syncope.wa.starter.mapping.AccessMapper;\n+import org.apache.syncope.wa.starter.mapping.AttrReleaseMapFor;\n+import org.apache.syncope.wa.starter.mapping.AttrReleaseMapper;\n+import org.apache.syncope.wa.starter.mapping.AuthMapFor;\n+import org.apache.syncope.wa.starter.mapping.AuthMapper;\n+import org.apache.syncope.wa.starter.mapping.ClientAppMapFor;\n+import org.apache.syncope.wa.starter.mapping.ClientAppMapper;\n+import org.apache.syncope.wa.starter.mapping.RegisteredServiceMapper;\n+import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataGenerator;\n+import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataLocator;\n+import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n+import org.apereo.cas.services.ServiceRegistryListener;\n import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGenerator;\n+import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;\n import org.apereo.cas.support.saml.idp.metadata.locator.SamlIdPMetadataLocator;\n+import org.apereo.cas.support.saml.idp.metadata.writer.SamlIdPCertificateAndKeyWriter;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import java.util.Collection;\n-import org.apache.syncope.wa.saml.idp.metadata.RestfulSamlIdPMetadataGenerator;\n-import org.apache.syncope.wa.saml.idp.metadata.RestfulSamlIdPMetadataLocator;\n-import org.apereo.cas.configuration.CasConfigurationProperties;\n-import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;\n-import org.apereo.cas.support.saml.idp.metadata.writer.SamlIdPCertificateAndKeyWriter;\n-import org.apereo.cas.util.crypto.CipherExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.core.io.ResourceLoader;\n \n @Configuration\n public class SyncopeWAConfiguration {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAConfiguration.class);\n-\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n@@ -67,10 +76,68 @@ public class SyncopeWAConfiguration {\n     private Collection<ServiceRegistryListener> serviceRegistryListeners;\n \n     @Autowired\n+    private ApplicationContext ctx;\n+\n+    @ConditionalOnMissingBean\n     @Bean\n-    public ServiceRegistryExecutionPlanConfigurer syncopeServiceRegistryConfigurer(final WARestClient restClient) {\n-        SyncopeServiceRegistry registry =\n-                new SyncopeServiceRegistry(restClient, applicationContext, serviceRegistryListeners);\n+    public RegisteredServiceMapper registeredServiceMapper() {\n+        Map<String, AuthMapper> authPolicyConfMappers = new HashMap<>();\n+        Map<String, AuthMapper> registeredServiceAuthenticationPolicyMappers = new HashMap<>();\n+        ctx.getBeansOfType(AuthMapper.class).forEach((name, bean) -> {\n+            AuthMapFor authMapFor = ctx.findAnnotationOnBean(name, AuthMapFor.class);\n+            if (authMapFor != null) {\n+                authPolicyConfMappers.put(authMapFor.authPolicyConfClass().getName(), bean);\n+                registeredServiceAuthenticationPolicyMappers.put(\n+                        authMapFor.registeredServiceAuthenticationPolicyClass().getName(), bean);\n+            }\n+        });\n+\n+        Map<String, AccessMapper> accessPolicyConfMappers = new HashMap<>();\n+        Map<String, AccessMapper> registeredServiceAccessStrategyMappers = new HashMap<>();\n+        ctx.getBeansOfType(AccessMapper.class).forEach((name, bean) -> {\n+            AccessMapFor accessMapFor = ctx.findAnnotationOnBean(name, AccessMapFor.class);\n+            if (accessMapFor != null) {\n+                accessPolicyConfMappers.put(accessMapFor.accessPolicyConfClass().getName(), bean);\n+                registeredServiceAccessStrategyMappers.put(\n+                        accessMapFor.registeredServiceAccessStrategyClass().getName(), bean);\n+            }\n+        });\n+\n+        Map<String, AttrReleaseMapper> attrReleasePolicyConfMappers = new HashMap<>();\n+        Map<String, AttrReleaseMapper> registeredServiceAttributeReleasePolicyMappers = new HashMap<>();\n+        ctx.getBeansOfType(AttrReleaseMapper.class).forEach((name, bean) -> {\n+            AttrReleaseMapFor attrReleaseMapFor = ctx.findAnnotationOnBean(name, AttrReleaseMapFor.class);\n+            if (attrReleaseMapFor != null) {\n+                attrReleasePolicyConfMappers.put(attrReleaseMapFor.attrReleasePolicyConfClass().getName(), bean);\n+                registeredServiceAttributeReleasePolicyMappers.put(\n+                        attrReleaseMapFor.registeredServiceAttributeReleasePolicyClass().getName(), bean);\n+            }\n+        });\n+\n+        Map<String, ClientAppMapper> clientAppTOMappers = new HashMap<>();\n+        Map<String, ClientAppMapper> registeredServiceMappers = new HashMap<>();\n+        ctx.getBeansOfType(ClientAppMapper.class).forEach((name, bean) -> {\n+            ClientAppMapFor clientAppMapFor = ctx.findAnnotationOnBean(name, ClientAppMapFor.class);\n+            if (clientAppMapFor != null) {\n+                clientAppTOMappers.put(clientAppMapFor.clientAppClass().getName(), bean);\n+                registeredServiceMappers.put(clientAppMapFor.registeredServiceClass().getName(), bean);\n+            }\n+        });\n+\n+        return new RegisteredServiceMapper(\n+                authPolicyConfMappers, registeredServiceAuthenticationPolicyMappers,\n+                accessPolicyConfMappers, registeredServiceAccessStrategyMappers,\n+                attrReleasePolicyConfMappers, registeredServiceAttributeReleasePolicyMappers,\n+                clientAppTOMappers, registeredServiceMappers);\n+    }\n+\n+    @Autowired\n+    @Bean\n+    public ServiceRegistryExecutionPlanConfigurer syncopeServiceRegistryConfigurer(\n+            final WARestClient restClient, final RegisteredServiceMapper registeredServiceMapper) {\n+\n+        SyncopeServiceRegistry registry = new SyncopeServiceRegistry(\n+                restClient, registeredServiceMapper, applicationContext, serviceRegistryListeners);\n         return plan -> plan.registerServiceRegistry(registry);\n     }\n \n@@ -109,5 +176,4 @@ public KeymasterStart keymasterStart() {\n     public KeymasterStop keymasterStop() {\n         return new KeymasterStop(NetworkService.Type.WA);\n     }\n-\n }"},{"sha":"9d5a1cc98c7f3b8cc75b2fb79dc5623fa404a303","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWARefreshContextJob.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWARefreshContextJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWARefreshContextJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWARefreshContextJob.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.wa.starter;\n \n-import org.apache.syncope.wa.WARestClient;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGenerator;\n import org.apereo.cas.support.saml.services.idp.metadata.SamlIdPMetadataDocument;\n import org.quartz.Job;"},{"sha":"72626b4f8cd3a89a0db72bf00c26f63f0b6ccb22","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AccessMapFor.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapFor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapFor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapFor.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n+import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface AccessMapFor {\n+\n+    Class<? extends AccessPolicyConf> accessPolicyConfClass();\n+\n+    Class<? extends RegisteredServiceAccessStrategy> registeredServiceAccessStrategyClass();\n+}"},{"sha":"7ef07fff691b5061de6075519b5fd30e9f779b7c","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AccessMapper.java","status":"renamed","additions":6,"deletions":16,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -16,24 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.logic.init;\n+package org.apache.syncope.wa.starter.mapping;\n \n-import org.apache.syncope.common.lib.types.AMImplementationType;\n-import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n-import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.springframework.core.Ordered;\n-import org.springframework.stereotype.Component;\n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n+import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n \n-@Component\n-public class AMImplementationTypeLoader implements SyncopeCoreLoader {\n+public interface AccessMapper {\n \n-    @Override\n-    public int getOrder() {\n-        return Ordered.HIGHEST_PRECEDENCE;\n-    }\n+    RegisteredServiceAccessStrategy build(AccessPolicyConf conf);\n \n-    @Override\n-    public void load() {\n-        ImplementationTypesHolder.getInstance().putAll(AMImplementationType.values());\n-    }\n+    AccessPolicyConf build(RegisteredServiceAccessStrategy strategy);\n }","previous_filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/init/AMImplementationTypeLoader.java"},{"sha":"9908f518c1c736cb2fff16405be3b6713a1c99e4","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AllowedAttrReleaseMapper.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAllowedAttrReleaseMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAllowedAttrReleaseMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAllowedAttrReleaseMapper.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n+import org.apereo.cas.services.DenyAllAttributeReleasePolicy;\n+import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n+import org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy;\n+import org.springframework.stereotype.Component;\n+\n+@AttrReleaseMapFor(\n+        attrReleasePolicyConfClass = AllowedAttrReleasePolicyConf.class,\n+        registeredServiceAttributeReleasePolicyClass = ReturnAllowedAttributeReleasePolicy.class)\n+@Component\n+public class AllowedAttrReleaseMapper implements AttrReleaseMapper {\n+\n+    @Override\n+    public RegisteredServiceAttributeReleasePolicy build(final AttrReleasePolicyConf conf) {\n+        RegisteredServiceAttributeReleasePolicy attributeReleasePolicy;\n+        if (!((AllowedAttrReleasePolicyConf) conf).getAllowedAttrs().isEmpty()) {\n+            attributeReleasePolicy = new ReturnAllowedAttributeReleasePolicy();\n+            ((ReturnAllowedAttributeReleasePolicy) attributeReleasePolicy).getAllowedAttributes().addAll(\n+                    ((AllowedAttrReleasePolicyConf) conf).getAllowedAttrs());\n+        } else {\n+            attributeReleasePolicy = new DenyAllAttributeReleasePolicy();\n+        }\n+\n+        return attributeReleasePolicy;\n+    }\n+\n+    @Override\n+    public AttrReleasePolicyConf build(final RegisteredServiceAttributeReleasePolicy policy) {\n+        AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n+        conf.getAllowedAttrs().addAll(((ReturnAllowedAttributeReleasePolicy) policy).getAllowedAttributes());\n+        return conf;\n+    }\n+}"},{"sha":"2060fea3b9eabe27a56e234995ab8b6bd814b6f8","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AttrReleaseMapFor.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapFor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapFor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapFor.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n+import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface AttrReleaseMapFor {\n+\n+    Class<? extends AttrReleasePolicyConf> attrReleasePolicyConfClass();\n+\n+    Class<? extends RegisteredServiceAttributeReleasePolicy> registeredServiceAttributeReleasePolicyClass();\n+}"},{"sha":"50dd5bdb1197e0241bdfc7d09bddae87ee324012","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AttrReleaseMapper.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n+import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n+\n+public interface AttrReleaseMapper {\n+\n+    RegisteredServiceAttributeReleasePolicy build(AttrReleasePolicyConf conf);\n+\n+    AttrReleasePolicyConf build(RegisteredServiceAttributeReleasePolicy policy);\n+}"},{"sha":"95c9baf0363e4fe8132d32b8464af8ebbc38c3a0","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AuthMapFor.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapFor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapFor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapFor.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n+import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface AuthMapFor {\n+\n+    Class<? extends AuthPolicyConf> authPolicyConfClass();\n+\n+    Class<? extends RegisteredServiceAuthenticationPolicy> registeredServiceAuthenticationPolicyClass();\n+}"},{"sha":"dacb020cc1cd69476fd363516e74b39b0f493e42","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AuthMapper.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n+import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+\n+public interface AuthMapper {\n+\n+    RegisteredServiceAuthenticationPolicy build(AuthPolicyConf conf);\n+\n+    AuthPolicyConf build(RegisteredServiceAuthenticationPolicy policy);\n+}"},{"sha":"f4526adcd2cc1bf7864468bfab361cf5405c1b6d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/ClientAppMapFor.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapFor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapFor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapFor.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apereo.cas.services.RegisteredService;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface ClientAppMapFor {\n+\n+    Class<? extends ClientAppTO> clientAppClass();\n+\n+    Class<? extends RegisteredService> registeredServiceClass();\n+}"},{"sha":"4041efff5ae6dc67b08779e17b9ff06ed640773d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/ClientAppMapper.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apereo.cas.services.RegisteredService;\n+import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n+import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n+import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+\n+public interface ClientAppMapper {\n+\n+    RegisteredService build(\n+            ClientAppTO clientAppTO,\n+            RegisteredServiceAuthenticationPolicy authPolicy,\n+            RegisteredServiceAccessStrategy accessStrategy,\n+            RegisteredServiceAttributeReleasePolicy attributeReleasePolicy);\n+\n+    ClientAppTO buid(RegisteredService service);\n+}"},{"sha":"9c441990e68cc8bb39f2b6ffb3041e1a79bc6a3a","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAccessMapper.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n+import org.apereo.cas.services.DefaultRegisteredServiceAccessStrategy;\n+import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n+import org.springframework.stereotype.Component;\n+\n+@AccessMapFor(\n+        accessPolicyConfClass = DefaultAccessPolicyConf.class,\n+        registeredServiceAccessStrategyClass = DefaultRegisteredServiceAccessStrategy.class)\n+@Component\n+public class DefaultAccessMapper implements AccessMapper {\n+\n+    @Override\n+    public RegisteredServiceAccessStrategy build(final AccessPolicyConf conf) {\n+        RegisteredServiceAccessStrategy accessStrategy =\n+                new DefaultRegisteredServiceAccessStrategy(conf.isEnabled(), conf.isSsoEnabled());\n+        accessStrategy.getRequiredAttributes().putAll(conf.getRequiredAttrs());\n+        return accessStrategy;\n+    }\n+\n+    @Override\n+    public AccessPolicyConf build(final RegisteredServiceAccessStrategy strategy) {\n+        DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n+        conf.setEnabled(((DefaultRegisteredServiceAccessStrategy) strategy).isEnabled());\n+        conf.setSsoEnabled(((DefaultRegisteredServiceAccessStrategy) strategy).isSsoEnabled());\n+        conf.getRequiredAttrs().putAll(((DefaultRegisteredServiceAccessStrategy) strategy).getRejectedAttributes());\n+        return conf;\n+    }\n+}"},{"sha":"95c2f7e3eb86220a6b87e08738a9707ebd603715","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAuthMapper.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyCriteriaConf;\n+import org.apereo.cas.services.AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria;\n+import org.apereo.cas.services.DefaultRegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.springframework.stereotype.Component;\n+\n+@AuthMapFor(\n+        authPolicyConfClass = DefaultAuthPolicyConf.class,\n+        registeredServiceAuthenticationPolicyClass = DefaultRegisteredServiceAuthenticationPolicy.class)\n+@Component\n+public class DefaultAuthMapper implements AuthMapper {\n+\n+    @Override\n+    public RegisteredServiceAuthenticationPolicy build(final AuthPolicyConf conf) {\n+        DefaultRegisteredServiceAuthenticationPolicy authPolicy = new DefaultRegisteredServiceAuthenticationPolicy();\n+        AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria criteria =\n+                new AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria();\n+        criteria.setTryAll(((DefaultAuthPolicyCriteriaConf) conf.getCriteria()).isAll());\n+        authPolicy.setCriteria(criteria);\n+        return authPolicy;\n+    }\n+\n+    @Override\n+    public AuthPolicyConf build(final RegisteredServiceAuthenticationPolicy policy) {\n+        DefaultAuthPolicyConf conf = new DefaultAuthPolicyConf();\n+        DefaultAuthPolicyCriteriaConf criteria = new DefaultAuthPolicyCriteriaConf();\n+        criteria.setAll(((DefaultAuthPolicyCriteriaConf) policy.getCriteria()).isAll());\n+        conf.setCriteria(criteria);\n+        return conf;\n+    }\n+}"},{"sha":"850e9d74cccb620c0c4a082582e2113adf48ea4c","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/OIDCRPTOMapper.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.types.OIDCSubjectType;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredService;\n+import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n+import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n+import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.springframework.stereotype.Component;\n+\n+@ClientAppMapFor(clientAppClass = OIDCRPTO.class, registeredServiceClass = OidcRegisteredService.class)\n+@Component\n+public class OIDCRPTOMapper implements ClientAppMapper {\n+\n+    @Override\n+    public RegisteredService build(\n+            final ClientAppTO clientAppTO,\n+            final RegisteredServiceAuthenticationPolicy authPolicy,\n+            final RegisteredServiceAccessStrategy accessStrategy,\n+            final RegisteredServiceAttributeReleasePolicy attributeReleasePolicy) {\n+\n+        OIDCRPTO rp = OIDCRPTO.class.cast(clientAppTO);\n+\n+        OidcRegisteredService service = new OidcRegisteredService();\n+\n+        String redirectURIs = String.join(\"|\", rp.getRedirectUris());\n+        service.setServiceId(redirectURIs);\n+        service.setName(rp.getName());\n+        service.setDescription(rp.getDescription());\n+        service.setAccessStrategy(accessStrategy);\n+        service.setAuthenticationPolicy(authPolicy);\n+        service.setAttributeReleasePolicy(attributeReleasePolicy);\n+\n+        service.setClientId(rp.getClientId());\n+        service.setClientSecret(rp.getClientSecret());\n+        service.setSignIdToken(rp.isSignIdToken());\n+        service.setJwks(rp.getJwks());\n+        service.setSubjectType(rp.getSubjectType().name());\n+        service.setRedirectUrl(redirectURIs);\n+        service.setSupportedGrantTypes((HashSet<String>) rp.getSupportedGrantTypes());\n+        service.setSupportedResponseTypes((HashSet<String>) rp.getSupportedResponseTypes());\n+\n+        return service;\n+    }\n+\n+    public ClientAppTO buid(final RegisteredService service) {\n+        OidcRegisteredService oidc = OidcRegisteredService.class.cast(service);\n+\n+        OIDCRPTO oidcrpto = new OIDCRPTO();\n+\n+        oidcrpto.getRedirectUris().addAll(Arrays.asList(oidc.getServiceId().split(\"|\")));\n+        oidcrpto.setName(oidc.getName());\n+        oidcrpto.setDescription(oidc.getDescription());\n+        oidcrpto.setClientId(oidc.getClientId());\n+        oidcrpto.setClientSecret(oidc.getClientSecret());\n+        oidcrpto.setSignIdToken(oidc.isSignIdToken());\n+        oidcrpto.setJwks(oidc.getJwks());\n+        oidcrpto.setSubjectType(OIDCSubjectType.valueOf(oidc.getSubjectType()));\n+        oidcrpto.getSupportedGrantTypes().addAll(oidc.getSupportedGrantTypes());\n+        oidcrpto.getSupportedResponseTypes().addAll(oidc.getSupportedResponseTypes());\n+\n+        return oidcrpto;\n+    }\n+}"},{"sha":"8b6bc653f3d49e81b72f881afce3bb4746e7f2d7","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/RegisteredServiceMapper.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apereo.cas.services.RegisteredService;\n+import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n+import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n+import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RegisteredServiceMapper {\n+\n+    protected final Map<String, AuthMapper> authPolicyConfMappers;\n+\n+    protected final Map<String, AuthMapper> registeredServiceAuthenticationPolicyMappers;\n+\n+    protected final Map<String, AccessMapper> accessPolicyConfMappers;\n+\n+    protected final Map<String, AccessMapper> registeredServiceAccessStrategyMappers;\n+\n+    protected final Map<String, AttrReleaseMapper> attrReleasePolicyConfMappers;\n+\n+    protected final Map<String, AttrReleaseMapper> registeredServiceAttributeReleasePolicyMappers;\n+\n+    protected final Map<String, ClientAppMapper> clientAppTOMappers;\n+\n+    protected final Map<String, ClientAppMapper> registeredServiceMappers;\n+\n+    public RegisteredServiceMapper(\n+            final Map<String, AuthMapper> authPolicyConfMappers,\n+            final Map<String, AuthMapper> registeredServiceAuthenticationPolicyMappers,\n+            final Map<String, AccessMapper> accessPolicyConfMappers,\n+            final Map<String, AccessMapper> registeredServiceAccessStrategyMappers,\n+            final Map<String, AttrReleaseMapper> attrReleasePolicyConfMappers,\n+            final Map<String, AttrReleaseMapper> registeredServiceAttributeReleasePolicyMappers,\n+            final Map<String, ClientAppMapper> clientAppTOMappers,\n+            final Map<String, ClientAppMapper> registeredServiceMappers) {\n+\n+        this.authPolicyConfMappers = authPolicyConfMappers;\n+        this.registeredServiceAuthenticationPolicyMappers = registeredServiceAuthenticationPolicyMappers;\n+        this.accessPolicyConfMappers = accessPolicyConfMappers;\n+        this.registeredServiceAccessStrategyMappers = registeredServiceAccessStrategyMappers;\n+        this.attrReleasePolicyConfMappers = attrReleasePolicyConfMappers;\n+        this.registeredServiceAttributeReleasePolicyMappers = registeredServiceAttributeReleasePolicyMappers;\n+        this.clientAppTOMappers = clientAppTOMappers;\n+        this.registeredServiceMappers = registeredServiceMappers;\n+    }\n+\n+    public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n+        RegisteredServiceAuthenticationPolicy authPolicy = null;\n+        if (clientApp.getAuthPolicyConf() != null) {\n+            AuthMapper authMapper =\n+                    authPolicyConfMappers.get(clientApp.getAuthPolicyConf().getClass().getName());\n+            authPolicy = Optional.ofNullable(authMapper).\n+                    map(mapper -> mapper.build(clientApp.getAuthPolicyConf())).orElse(null);\n+        }\n+\n+        RegisteredServiceAccessStrategy accessStrategy = null;\n+        if (clientApp.getAccessPolicyConf() != null) {\n+            AccessMapper accessPolicyConfMapper =\n+                    accessPolicyConfMappers.get(clientApp.getAccessPolicyConf().getClass().getName());\n+            accessStrategy = Optional.ofNullable(accessPolicyConfMapper).\n+                    map(mapper -> mapper.build(clientApp.getAccessPolicyConf())).orElse(null);\n+        }\n+\n+        RegisteredServiceAttributeReleasePolicy attributeReleasePolicy = null;\n+        if (clientApp.getAttrReleasePolicyConf() != null) {\n+            AttrReleaseMapper attrReleasePolicyConfMapper =\n+                    attrReleasePolicyConfMappers.get(clientApp.getAttrReleasePolicyConf().getClass().getName());\n+            attributeReleasePolicy = Optional.ofNullable(attrReleasePolicyConfMapper).\n+                    map(mapper -> mapper.build(clientApp.getAttrReleasePolicyConf())).orElse(null);\n+        }\n+\n+        ClientAppMapper clientAppMapper = clientAppTOMappers.get(clientApp.getClientAppTO().getClass().getName());\n+        if (clientAppMapper == null) {\n+            return null;\n+        }\n+        return clientAppMapper.build(clientApp.getClientAppTO(), authPolicy, accessStrategy, attributeReleasePolicy);\n+    }\n+\n+    public WAClientApp fromRegisteredService(final RegisteredService service) {\n+        WAClientApp clientApp = new WAClientApp();\n+\n+        if (service.getAuthenticationPolicy() != null) {\n+            AuthMapper authMapper = registeredServiceAuthenticationPolicyMappers.get(\n+                    service.getAuthenticationPolicy().getClass().getName());\n+            clientApp.setAuthPolicyConf(Optional.ofNullable(authMapper).\n+                    map(mapper -> mapper.build(service.getAuthenticationPolicy())).orElse(null));\n+        }\n+\n+        if (service.getAccessStrategy() != null) {\n+            AccessMapper accessPolicyConfMapper = registeredServiceAccessStrategyMappers.get(\n+                    service.getAccessStrategy().getClass().getName());\n+            clientApp.setAccessPolicyConf(Optional.ofNullable(accessPolicyConfMapper).\n+                    map(mapper -> mapper.build(service.getAccessStrategy())).orElse(null));\n+        }\n+\n+        if (service.getAttributeReleasePolicy() != null) {\n+            AttrReleaseMapper attrReleasePolicyConfMapper = registeredServiceAttributeReleasePolicyMappers.get(\n+                    service.getAttributeReleasePolicy().getClass().getName());\n+            clientApp.setAttrReleasePolicyConf(Optional.ofNullable(attrReleasePolicyConfMapper).\n+                    map(mapper -> mapper.build(service.getAttributeReleasePolicy())).orElse(null));\n+        }\n+\n+        ClientAppMapper clientAppMapper = registeredServiceMappers.get(service.getClass().getName());\n+        clientApp.setClientAppTO(Optional.ofNullable(clientAppMapper).\n+                map(mapper -> mapper.buid(service)).orElse(null));\n+\n+        return clientApp;\n+    }\n+}"},{"sha":"96df87d1a1c7ce6cfed2f94b0c597b4766953750","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/SAML2SPTOMapper.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.types.SAML2SPNameId;\n+import org.apereo.cas.services.RegisteredService;\n+import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n+import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n+import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.support.saml.services.SamlRegisteredService;\n+import org.springframework.stereotype.Component;\n+\n+@ClientAppMapFor(clientAppClass = SAML2SPTO.class, registeredServiceClass = SamlRegisteredService.class)\n+@Component\n+public class SAML2SPTOMapper implements ClientAppMapper {\n+\n+    @Override\n+    public RegisteredService build(\n+            final ClientAppTO clientAppTO,\n+            final RegisteredServiceAuthenticationPolicy authPolicy,\n+            final RegisteredServiceAccessStrategy accessStrategy,\n+            final RegisteredServiceAttributeReleasePolicy attributeReleasePolicy) {\n+\n+        SAML2SPTO sp = SAML2SPTO.class.cast(clientAppTO);\n+\n+        SamlRegisteredService service = new SamlRegisteredService();\n+\n+        service.setServiceId(sp.getEntityId());\n+        service.setName(sp.getName());\n+        service.setDescription(sp.getDescription());\n+        service.setAccessStrategy(accessStrategy);\n+        service.setAuthenticationPolicy(authPolicy);\n+        service.setAttributeReleasePolicy(attributeReleasePolicy);\n+\n+        service.setMetadataLocation(sp.getMetadataLocation());\n+        service.setMetadataSignatureLocation(sp.getMetadataSignatureLocation());\n+        service.setSignAssertions(sp.isSignAssertions());\n+        service.setSignResponses(sp.isSignResponses());\n+        service.setEncryptionOptional(sp.isEncryptionOptional());\n+        service.setEncryptAssertions(sp.isEncryptAssertions());\n+        service.setRequiredAuthenticationContextClass(sp.getRequiredAuthenticationContextClass());\n+        service.setRequiredNameIdFormat(sp.getRequiredNameIdFormat().getNameId());\n+        service.setSkewAllowance(sp.getSkewAllowance());\n+        service.setNameIdQualifier(sp.getNameIdQualifier());\n+        service.setAssertionAudiences(sp.getAssertionAudiences());\n+        service.setServiceProviderNameIdQualifier(sp.getServiceProviderNameIdQualifier());\n+\n+        return service;\n+    }\n+\n+    @Override\n+    public ClientAppTO buid(final RegisteredService service) {\n+        SamlRegisteredService saml = SamlRegisteredService.class.cast(service);\n+\n+        SAML2SPTO saml2spto = new SAML2SPTO();\n+\n+        saml2spto.setEntityId(saml.getServiceId());\n+        saml2spto.setName(saml.getName());\n+        saml2spto.setDescription(saml.getDescription());\n+\n+        saml2spto.setMetadataLocation(saml.getMetadataLocation());\n+        saml2spto.setMetadataSignatureLocation(saml.getMetadataSignatureLocation());\n+        saml2spto.setSignAssertions(saml.isSignAssertions());\n+        saml2spto.setSignResponses(saml.isSignResponses());\n+        saml2spto.setEncryptionOptional(saml.isEncryptionOptional());\n+        saml2spto.setEncryptAssertions(saml.isEncryptAssertions());\n+        saml2spto.setRequiredAuthenticationContextClass(saml.getRequiredAuthenticationContextClass());\n+        saml2spto.setRequiredNameIdFormat(SAML2SPNameId.valueOf(saml.getRequiredNameIdFormat()));\n+        saml2spto.setSkewAllowance(saml.getSkewAllowance());\n+        saml2spto.setNameIdQualifier(saml.getNameIdQualifier());\n+        saml2spto.setAssertionAudiences(saml.getAssertionAudiences());\n+        saml2spto.setServiceProviderNameIdQualifier(saml.getServiceProviderNameIdQualifier());\n+\n+        return saml2spto;\n+    }\n+}"},{"sha":"ceeff8746a43787856c4ca6c975ff7abd9c2651a","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataGenerator.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -16,13 +16,13 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.wa.saml.idp.metadata;\n+package org.apache.syncope.wa.starter.saml.idp.metadata;\n \n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n-import org.apache.syncope.wa.WARestClient;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.support.saml.idp.metadata.generator.BaseSamlIdPMetadataGenerator;\n import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;\n import org.apereo.cas.support.saml.services.SamlRegisteredService;","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/saml/idp/metadata/RestfulSamlIdPMetadataGenerator.java"},{"sha":"d2a16342e0db6c8e6a0941660d56f209e3461f6a","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataLocator.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3b0534be055fd528738b2dd81e8896c717de9b47/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java?ref=3b0534be055fd528738b2dd81e8896c717de9b47","patch":"@@ -16,14 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.wa.saml.idp.metadata;\n+package org.apache.syncope.wa.starter.saml.idp.metadata;\n \n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n-import org.apache.syncope.wa.WARestClient;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.support.saml.idp.metadata.locator.AbstractSamlIdPMetadataLocator;\n import org.apereo.cas.support.saml.services.SamlRegisteredService;\n import org.apereo.cas.support.saml.services.idp.metadata.SamlIdPMetadataDocument;","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/saml/idp/metadata/RestfulSamlIdPMetadataLocator.java"}]}