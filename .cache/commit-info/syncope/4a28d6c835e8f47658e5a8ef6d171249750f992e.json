{"sha":"4a28d6c835e8f47658e5a8ef6d171249750f992e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRhMjhkNmM4MzVlOGY0NzY1OGU1YThlZjZkMTcxMjQ5NzUwZjk5MmU=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T13:07:50Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T13:07:50Z"},"message":"Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/syncope","tree":{"sha":"185e0c701a9fe2321f455e395cd859ba2eb818f5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/185e0c701a9fe2321f455e395cd859ba2eb818f5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4a28d6c835e8f47658e5a8ef6d171249750f992e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4a28d6c835e8f47658e5a8ef6d171249750f992e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4a28d6c835e8f47658e5a8ef6d171249750f992e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4a28d6c835e8f47658e5a8ef6d171249750f992e/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"729cf5b3206435a2526e92cea759f249e964ce9d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/729cf5b3206435a2526e92cea759f249e964ce9d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/729cf5b3206435a2526e92cea759f249e964ce9d"},{"sha":"2f137b211e14b8c97d610f7a1831885774ef644b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2f137b211e14b8c97d610f7a1831885774ef644b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2f137b211e14b8c97d610f7a1831885774ef644b"}],"stats":{"total":646,"additions":646,"deletions":0},"files":[{"sha":"3671cf004fa957f65a6aab0a78e36bfc0a4c7511","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/SchemaCommand.java","status":"added","additions":251,"deletions":0,"changes":251,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4a28d6c835e8f47658e5a8ef6d171249750f992e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4a28d6c835e8f47658e5a8ef6d171249750f992e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java?ref=4a28d6c835e8f47658e5a8ef6d171249750f992e","patch":"@@ -0,0 +1,251 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands;\n+\n+import java.util.Arrays;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.DerSchemaTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.VirSchemaTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.service.SchemaService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Command(name = \"schema\")\n+public class SchemaCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SchemaCommand.class);\n+\n+    private static final String HELP_MESSAGE = \"Usage: schema [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --list-all\\n\"\n+            + \"    --list {SCHEMA-TYPE}\\n\"\n+            + \"       Schema type: PLAIN / DERIVED / VIRTUAL\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        LOG.debug(\"Option: {}\", input.getOption());\n+        LOG.debug(\"Parameters:\");\n+        for (final String parameter : input.getParameters()) {\n+            LOG.debug(\"   > \" + parameter);\n+        }\n+\n+        String[] parameters = input.getParameters();\n+\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        final SchemaService schemaService = SyncopeServices.get(SchemaService.class);\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST:\n+                final String listErrorMessage = \"Usage: schema --list {SCHEMA-TYPE}\\n\"\n+                        + \"   Schema type: PLAIN / DERIVED / VIRTUAL\";\n+                if (parameters.length == 1) {\n+                    try {\n+                        final SchemaType schemaType = SchemaType.valueOf(input.firstParameter());\n+                        for (final AbstractSchemaTO schemaTO : schemaService.list(schemaType)) {\n+                            switch (schemaType) {\n+                                case PLAIN:\n+                                    System.out.println(\" - Schema key: \" + ((PlainSchemaTO) schemaTO).getKey());\n+                                    System.out.println(\"      type: \" + ((PlainSchemaTO) schemaTO).getType());\n+                                    System.out.println(\"      is mandatory: \"\n+                                            + ((PlainSchemaTO) schemaTO).getMandatoryCondition());\n+                                    break;\n+                                case DERIVED:\n+                                    System.out.println(\" - Schema key: \" + ((DerSchemaTO) schemaTO).getKey());\n+                                    System.out.println(\"      expression: \" + ((DerSchemaTO) schemaTO).getExpression());\n+                                    break;\n+                                case VIRTUAL:\n+                                    System.out.println(\" - Schema key: \" + ((VirSchemaTO) schemaTO).getKey());\n+                                    break;\n+                                default:\n+                                    break;\n+                            }\n+                        }\n+                    } catch (final SyncopeClientException ex) {\n+                        System.out.println(\" - Error: \" + ex.getMessage());\n+                    } catch (final IllegalArgumentException ex) {\n+                        System.out.println(\" - Error: \" + input.firstParameter()\n+                                + \" isn't a valid schema type, try with:\");\n+                        for (final SchemaType type : SchemaType.values()) {\n+                            System.out.println(\"  *** \" + type.name());\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(listErrorMessage);\n+                }\n+                break;\n+            case LIST_ALL:\n+                try {\n+                    for (final SchemaType value : SchemaType.values()) {\n+                        System.out.println(\"Schemas for \" + value);\n+                        for (final AbstractSchemaTO schemaTO : schemaService.list(value)) {\n+                            System.out.println(\"   - Name: \" + schemaTO.getKey() + \" type: \"\n+                                    + schemaTO.getAnyTypeClass());\n+                        }\n+                    }\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    System.out.println(\" - Error: \" + ex.getMessage());\n+                }\n+                break;\n+            case READ:\n+                final String readErrorMessage = \"Usage: schema --read {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n+                        + \"   Schema type: PLAIN / DERIVED / VIRTUAL\";\n+                if (parameters.length >= 2) {\n+                    parameters = Arrays.copyOfRange(parameters, 1, parameters.length);\n+                    try {\n+                        final SchemaType schemaType = SchemaType.valueOf(input.firstParameter());\n+                        for (final String parameter : parameters) {\n+                            final AbstractSchemaTO schemaTO = schemaService.read(schemaType, parameter);\n+                            switch (schemaType) {\n+                                case PLAIN:\n+                                    System.out.println(\" - Schema key: \" + ((PlainSchemaTO) schemaTO).getKey());\n+                                    System.out.println(\"      any type class: \"\n+                                            + ((PlainSchemaTO) schemaTO).getAnyTypeClass());\n+                                    System.out.println(\"      conversion pattern: \"\n+                                            + ((PlainSchemaTO) schemaTO).getConversionPattern());\n+                                    System.out.println(\"      enumeration keys: \"\n+                                            + ((PlainSchemaTO) schemaTO).getEnumerationKeys());\n+                                    System.out.println(\"      enumeration values: \"\n+                                            + ((PlainSchemaTO) schemaTO).getEnumerationValues());\n+                                    System.out.println(\"      mandatory condition: \"\n+                                            + ((PlainSchemaTO) schemaTO).getMandatoryCondition());\n+                                    System.out.println(\"      mime type: \" + ((PlainSchemaTO) schemaTO).getMimeType());\n+                                    System.out.println(\"      secret key: \"\n+                                            + ((PlainSchemaTO) schemaTO).getSecretKey());\n+                                    System.out.println(\"      validator class: \"\n+                                            + ((PlainSchemaTO) schemaTO).getValidatorClass());\n+                                    System.out.println(\"      cipher algorithm: \"\n+                                            + ((PlainSchemaTO) schemaTO).getCipherAlgorithm());\n+                                    System.out.println(\"      TYPE: \"\n+                                            + ((PlainSchemaTO) schemaTO).getType());\n+                                    break;\n+                                case DERIVED:\n+                                    System.out.println(\" - Schema key: \" + ((DerSchemaTO) schemaTO).getKey());\n+                                    System.out.println(\"      any type class: \"\n+                                            + ((DerSchemaTO) schemaTO).getAnyTypeClass());\n+                                    System.out.println(\"      expression: \" + ((DerSchemaTO) schemaTO).getExpression());\n+                                    break;\n+                                case VIRTUAL:\n+                                    System.out.println(\" - Schema key: \" + ((VirSchemaTO) schemaTO).getKey());\n+                                    System.out.println(\"      any type class: \"\n+                                            + ((VirSchemaTO) schemaTO).getAnyTypeClass());\n+                                    break;\n+                                default:\n+                                    break;\n+                            }\n+                        }\n+                    } catch (final SyncopeClientException | WebServiceException ex) {\n+                        if (ex.getMessage().startsWith(\"NotFound\")) {\n+                            System.out.println(\" - Schema \" + parameters[0] + \" doesn't exists!\");\n+                        } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                            System.out.println(\" - You cannot delete schema \" + parameters[0]);\n+                        } else {\n+                            System.out.println(ex.getMessage());\n+                        }\n+                    } catch (final IllegalArgumentException ex) {\n+                        System.out.println(\" - Error: \" + parameters[0] + \" isn't a valid schema type, try with:\");\n+                        for (final SchemaType type : SchemaType.values()) {\n+                            System.out.println(\"  *** \" + type.name());\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(readErrorMessage);\n+                }\n+                break;\n+            case DELETE:\n+                final String deleteErrorMessage = \"Usage: schema --delete {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n+                        + \"   Schema type: PLAIN / DERIVED / VIRTUAL\";\n+                if (parameters.length >= 2) {\n+                    parameters = Arrays.copyOfRange(parameters, 1, parameters.length);\n+                    try {\n+                        for (final String parameter : parameters) {\n+                            schemaService.delete(SchemaType.valueOf(input.firstParameter()), parameter);\n+                            System.out.println(\"Schema \" + parameter + \" successfully deleted!\");\n+                        }\n+                    } catch (final SyncopeClientException | WebServiceException ex) {\n+                        if (ex.getMessage().startsWith(\"NotFound\")) {\n+                            System.out.println(\" - Schema \" + parameters[0] + \" doesn't exists!\");\n+                        } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                            System.out.println(\" - You cannot delete schema \" + parameters[0]);\n+                        } else {\n+                            System.out.println(ex.getMessage());\n+                        }\n+                    } catch (final IllegalArgumentException ex) {\n+                        System.out.println(\" - Error: \" + parameters[0] + \" isn't a valid schema type, try with:\");\n+                        for (final SchemaType type : SchemaType.values()) {\n+                            System.out.println(\"  *** \" + type.name());\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(deleteErrorMessage);\n+                }\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                System.out.println(input.getOption() + \" is not a valid option.\");\n+                System.out.println(\"\");\n+                System.out.println(HELP_MESSAGE);\n+        }\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST(\"--list\"),\n+        LIST_ALL(\"--list-all\"),\n+        READ(\"--read\"),\n+        DELETE(\"--delete\");\n+\n+        private final String optionName;\n+\n+        private Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+    }\n+}"},{"sha":"35441d11eb12b88cccab5f88db635fa2d240880e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/install/InstallCommand.java","status":"added","additions":298,"deletions":0,"changes":298,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4a28d6c835e8f47658e5a8ef6d171249750f992e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4a28d6c835e8f47658e5a8ef6d171249750f992e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallCommand.java?ref=4a28d6c835e8f47658e5a8ef6d171249750f992e","patch":"@@ -0,0 +1,298 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.install;\n+\n+import java.io.FileNotFoundException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.ConnectException;\n+import java.net.UnknownHostException;\n+import java.util.Scanner;\n+import javax.ws.rs.ProcessingException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+import org.apache.syncope.client.cli.commands.LoggerCommand;\n+import org.apache.syncope.client.cli.util.FileSystemUtils;\n+import org.apache.syncope.client.cli.util.JasyptUtils;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Command(name = \"install\")\n+public class InstallCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(LoggerCommand.class);\n+\n+    private static final String HELP_MESSAGE = \"Usage: logger [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --setup\";\n+\n+    private String syncopeAdminUser;\n+\n+    private String syncopeAdminPassword;\n+\n+    private String syncopeServerSchema;\n+\n+    private String syncopeServerHostname = \"localhost\";\n+\n+    private String syncopeServerPort = \"8080\";\n+\n+    private String syncopeServerRestContext = \"/syncope/rest/\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        LOG.debug(\"Option: {}\", input.getOption());\n+        LOG.debug(\"Parameters:\");\n+        for (final String parameter : input.getParameters()) {\n+            LOG.debug(\"   > \" + parameter);\n+        }\n+\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case INSTALL:\n+                final Scanner scanIn = new Scanner(System.in);\n+\n+                System.out.println(\"\");\n+                System.out.println(\"###############################################\");\n+                System.out.println(\"#                                             #\");\n+                System.out.println(\"# Welcome to Syncope CLI installation process #\");\n+                System.out.println(\"#                                             #\");\n+                System.out.println(\"###############################################\");\n+                System.out.println(\"\");\n+\n+                System.out.println(\"Path to config files of Syncope CLI client will be: \"\n+                        + InstallConfigFileTemplate.DIR_PATH);\n+\n+                if (!FileSystemUtils.canWrite(InstallConfigFileTemplate.DIR_PATH)) {\n+                    System.out.println(\"Permission denied on \" + InstallConfigFileTemplate.DIR_PATH);\n+                    break;\n+                }\n+                System.out.println(\"- File system permission checked\");\n+                System.out.println(\"\");\n+\n+                System.out.println(\"Syncope server schema [http/https]:\");\n+                String syncopeServerSchemaFromSystemIn = scanIn.nextLine();\n+                boolean schemaFounded = false;\n+                while (!schemaFounded) {\n+                    if ((\"http\".equalsIgnoreCase(syncopeServerSchemaFromSystemIn))\n+                            || (\"https\".equalsIgnoreCase(syncopeServerSchemaFromSystemIn))) {\n+                        syncopeServerSchema = syncopeServerSchemaFromSystemIn;\n+                        schemaFounded = true;\n+                    } else {\n+                        System.out.println(\"Please use one of below values:\");\n+                        System.out.println(\"   - http\");\n+                        System.out.println(\"   - https\");\n+                        syncopeServerSchemaFromSystemIn = scanIn.nextLine();\n+                    }\n+                }\n+\n+                System.out.println(\"Syncope server hostname [e.g. \" + syncopeServerHostname + \"]:\");\n+                String syncopeServerHostnameFromSystemIn = scanIn.nextLine();\n+                boolean syncopeServerHostnameFounded = false;\n+                while (!syncopeServerHostnameFounded) {\n+                    if (StringUtils.isNotBlank(syncopeServerHostnameFromSystemIn)) {\n+                        syncopeServerHostname = syncopeServerHostnameFromSystemIn;\n+                        syncopeServerHostnameFounded = true;\n+                    } else {\n+                        System.out.println(\"Syncope server hostname [e.g. \" + syncopeServerHostname + \"]:\");\n+                        syncopeServerHostnameFromSystemIn = scanIn.nextLine();\n+                    }\n+                }\n+\n+                System.out.println(\"Syncope server port [e.g. \" + syncopeServerPort + \"]:\");\n+                String syncopeServerPortFromSystemIn = scanIn.nextLine();\n+                boolean syncopeServerPortFounded = false;\n+                while (!syncopeServerPortFounded) {\n+                    if (StringUtils.isNotBlank(syncopeServerPortFromSystemIn)) {\n+                        syncopeServerPort = syncopeServerPortFromSystemIn;\n+                        syncopeServerPortFounded = true;\n+                    } else if (!StringUtils.isNumeric(syncopeServerPortFromSystemIn)) {\n+                        System.out.println(syncopeServerPortFromSystemIn + \" is not a numeric string, try again\");\n+                        syncopeServerPortFromSystemIn = scanIn.nextLine();\n+                    } else {\n+                        System.out.println(\"Syncope server port [e.g. \" + syncopeServerPort + \"]:\");\n+                        syncopeServerPortFromSystemIn = scanIn.nextLine();\n+                    }\n+                }\n+\n+                System.out.println(\"Syncope server rest context [e.g. \" + syncopeServerRestContext + \"]:\");\n+                String syncopeServerRestContextFromSystemIn = scanIn.nextLine();\n+                boolean syncopeServerRestContextFounded = false;\n+                while (!syncopeServerRestContextFounded) {\n+                    if (StringUtils.isNotBlank(syncopeServerRestContextFromSystemIn)) {\n+                        syncopeServerRestContext = syncopeServerRestContextFromSystemIn;\n+                        syncopeServerRestContextFounded = true;\n+                    } else {\n+                        System.out.println(\"Syncope server port [e.g. \" + syncopeServerRestContext + \"]:\");\n+                        syncopeServerRestContextFromSystemIn = scanIn.nextLine();\n+                    }\n+                }\n+\n+                System.out.println(\"Syncope admin user:\");\n+                String syncopeAdminUserFromSystemIn = scanIn.nextLine();\n+                boolean syncopeAdminUserFounded = false;\n+                while (!syncopeAdminUserFounded) {\n+                    if (StringUtils.isNotBlank(syncopeAdminUserFromSystemIn)) {\n+                        syncopeAdminUser = syncopeAdminUserFromSystemIn;\n+                        syncopeAdminUserFounded = true;\n+                    } else {\n+                        System.out.println(\"Syncope admin user:\");\n+                        syncopeAdminUserFromSystemIn = scanIn.nextLine();\n+                    }\n+                }\n+\n+                System.out.println(\"Syncope admin password:\");\n+                String syncopeAdminPasswordFromSystemIn = scanIn.nextLine();\n+                boolean syncopeAdminPasswordFounded = false;\n+                while (!syncopeAdminPasswordFounded) {\n+                    if (StringUtils.isNotBlank(syncopeAdminPasswordFromSystemIn)) {\n+                        syncopeAdminPassword = syncopeAdminPasswordFromSystemIn;\n+                        syncopeAdminPasswordFounded = true;\n+                    } else {\n+                        System.out.println(\"Syncope admin user:\");\n+                        syncopeAdminPasswordFromSystemIn = scanIn.nextLine();\n+                    }\n+                }\n+\n+                scanIn.close();\n+\n+                final JasyptUtils jasyptUtils = JasyptUtils.getJasyptUtils();\n+\n+                try {\n+                    FileSystemUtils.createNewDirectory(InstallConfigFileTemplate.DIR_PATH);\n+                    final String contentCliPropertiesFile = InstallConfigFileTemplate.createFile(\n+                            syncopeServerSchema,\n+                            syncopeServerHostname,\n+                            syncopeServerPort,\n+                            syncopeServerRestContext,\n+                            syncopeAdminUser,\n+                            jasyptUtils.encrypt(syncopeAdminPassword));\n+                    FileSystemUtils.createFileWith(InstallConfigFileTemplate.FILE_PATH, contentCliPropertiesFile);\n+\n+                } catch (final FileNotFoundException | UnsupportedEncodingException ex) {\n+                    System.out.println(ex.getMessage());\n+                }\n+\n+                try {\n+                    final SyncopeService syncopeService = SyncopeServices.get(SyncopeService.class);\n+                    System.out.println(\"Provided parameters checked on Syncope core version: \"\n+                            + syncopeService.info().getVersion());\n+                    System.out.println(\"\");\n+                    System.out.println(\"###############################################\");\n+                    System.out.println(\"#                                             #\");\n+                    System.out.println(\"#           Installation successful           #\");\n+                    System.out.println(\"#     now you can use Syncope CLI client      #\");\n+                    System.out.println(\"#                                             #\");\n+                    System.out.println(\"###############################################\");\n+                    System.out.println(\"\");\n+                } catch (final ProcessingException ex) {\n+                    if (ex.getCause() instanceof UnknownHostException) {\n+                        final String unknownHost = ex.getCause().getMessage().split(\":\")[3];\n+                        System.out.println(\"\");\n+                        System.out.println(\"Provided host:\" + unknownHost);\n+                        System.out.println(\"\");\n+                        System.out.println(\"###############################################\");\n+                        System.out.println(\"#                                             #\");\n+                        System.out.println(\"#            Provided unknown host!           #\");\n+                        System.out.println(\"#        START AGAIN the installation!        #\");\n+                        System.out.println(\"#                                             #\");\n+                        System.out.println(\"###############################################\");\n+                        System.out.println(\"\");\n+                    } else if (ex.getCause() instanceof ConnectException) {\n+                        System.out.println(\"\");\n+                        System.out.println(\"Provided address :\" + SyncopeServices.getAddress());\n+                        System.out.println(\"\");\n+                        System.out.println(\"###############################################\");\n+                        System.out.println(\"#                                             #\");\n+                        System.out.println(\"#       Provided address is unreachable!      #\");\n+                        System.out.println(\"#         Check it and if it is wrong         #\");\n+                        System.out.println(\"#        START AGAIN the installation!        #\");\n+                        System.out.println(\"#                                             #\");\n+                        System.out.println(\"###############################################\");\n+                        System.out.println(\"\");\n+                    }\n+                } catch (final Exception e) {\n+                    if (e.getMessage().contains(\"not authenticated\")) {\n+                        System.out.println(\"\");\n+                        System.out.println(\"###############################################\");\n+                        System.out.println(\"#                                             #\");\n+                        System.out.println(\"#   Username or password provided are wrong   #\");\n+                        System.out.println(\"#        START AGAIN the installation!        #\");\n+                        System.out.println(\"#                                             #\");\n+                        System.out.println(\"###############################################\");\n+                        System.out.println(\"\");\n+                    } else {\n+                        System.out.println(\"\");\n+                        System.out.println(\"###############################################\");\n+                        System.out.println(\"#                                             #\");\n+                        System.out.println(\"#                Something wrong              #\");\n+                        System.out.println(\"#        START AGAIN the installation!        #\");\n+                        System.out.println(\"#                                             #\");\n+                        System.out.println(\"###############################################\");\n+                        System.out.println(\"\");\n+                    }\n+                }\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                System.out.println(input.getOption() + \" is not a valid option.\");\n+                System.out.println(\"\");\n+                System.out.println(HELP_MESSAGE);\n+        }\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        INSTALL(\"--setup\");\n+\n+        private final String optionName;\n+\n+        private Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+    }\n+\n+}"},{"sha":"6ef5cc0e7b1861427d6a882ab046eb069b1cb67e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/install/InstallConfigFileTemplate.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4a28d6c835e8f47658e5a8ef6d171249750f992e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallConfigFileTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4a28d6c835e8f47658e5a8ef6d171249750f992e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallConfigFileTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallConfigFileTemplate.java?ref=4a28d6c835e8f47658e5a8ef6d171249750f992e","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.install;\n+\n+import java.util.ResourceBundle;\n+\n+public final class InstallConfigFileTemplate {\n+\n+    private static final ResourceBundle CONF = ResourceBundle.getBundle(\"configuration\");\n+\n+    public static final String DIR_PATH\n+            = CONF.getString(\"cli.installation.directory\");\n+\n+    public static final String FILE_NAME\n+            = CONF.getString(\"cli.installation.filename\");\n+\n+    public static final String FILE_PATH = DIR_PATH + FILE_NAME;\n+\n+    private static final String SYNCOPE_REST_SERVICES = \"syncope.rest.services=%s://%s:%s%s\";\n+\n+    private static final String SYNCOPE_ADMIN_USER = \"syncope.admin.user=%s\";\n+\n+    private static final String SYNCOPE_ADMIN_PASSWORD = \"syncope.admin.password=%s\";\n+\n+    public static String createFile(\n+            final String schema,\n+            final String hostname,\n+            final String port,\n+            final String restContext,\n+            final String user,\n+            final String password) {\n+        final String syncopeRestServices = String.format(SYNCOPE_REST_SERVICES, schema, hostname, port, restContext);\n+        final String syncopeAdminUser = String.format(SYNCOPE_ADMIN_USER, user);\n+        final String syncopeAdminPassword = String.format(SYNCOPE_ADMIN_PASSWORD, password);\n+\n+        return syncopeRestServices + \"\\n\" + syncopeAdminUser + \"\\n\" + syncopeAdminPassword;\n+    }\n+\n+    private InstallConfigFileTemplate() {\n+    }\n+}"},{"sha":"5661b60a0ce604c37d7504a766150943cbbdf442","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/UsageMessages.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4a28d6c835e8f47658e5a8ef6d171249750f992e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FUsageMessages.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4a28d6c835e8f47658e5a8ef6d171249750f992e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FUsageMessages.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FUsageMessages.java?ref=4a28d6c835e8f47658e5a8ef6d171249750f992e","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.messages;\n+\n+public final class UsageMessages {\n+\n+    private static final String OPTION_COMMAND_MESSAGE_TEMPLATE = \"\\n - Usage: %s\\n\";\n+\n+    public static final String optionCommandMessage(final String message) {\n+        return String.format(OPTION_COMMAND_MESSAGE_TEMPLATE, message);\n+    }\n+\n+    public static void printErrorMessage(final String... errors) {\n+        final StringBuilder errorMessage = new StringBuilder(\"\\n\").append(\" - \");\n+        for (final String error : errors) {\n+            errorMessage.append(error).append(\"\\n\");\n+        }\n+        System.out.println(errorMessage.toString());\n+    }\n+\n+    private UsageMessages() {\n+\n+    }\n+}"}]}