{"sha":"e645ebc757b431f958850cbbc5fef5a685519519","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU2NDVlYmM3NTdiNDMxZjk1ODg1MGNiYmM1ZmVmNWE2ODU1MTk1MTk=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-13T09:41:49Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-13T09:41:49Z"},"message":"Creations of a new user without having a global password policy stored into the local repository used to fail with a null pointer exception. This bug has been fixed introducing a simple control.\n\nFixes issue 172\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247129 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"371d3a13e67b84ddf825b99a9dcf617c3e0c9d3d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/371d3a13e67b84ddf825b99a9dcf617c3e0c9d3d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e645ebc757b431f958850cbbc5fef5a685519519","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e645ebc757b431f958850cbbc5fef5a685519519","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e645ebc757b431f958850cbbc5fef5a685519519","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e645ebc757b431f958850cbbc5fef5a685519519/comments","author":null,"committer":null,"parents":[{"sha":"61e34a5f238484115d8cb4d7623a0af255f7d320","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/61e34a5f238484115d8cb4d7623a0af255f7d320","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/61e34a5f238484115d8cb4d7623a0af255f7d320"}],"stats":{"total":250,"additions":185,"deletions":65},"files":[{"sha":"62f146977f2f4089717e3cbfcf6ccd2a89746866","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttributableValidator.java","status":"modified","additions":26,"deletions":17,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e645ebc757b431f958850cbbc5fef5a685519519/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e645ebc757b431f958850cbbc5fef5a685519519/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java?ref=e645ebc757b431f958850cbbc5fef5a685519519","patch":"@@ -58,24 +58,33 @@ public boolean isValid(\n \n             final Policy policy = policyDAO.getGlobalPasswordPolicy();\n \n-            // evaluate policy\n-            PasswordPolicy passwordPolicy = evaluator.evaluate(policy, object);\n-\n-            try {\n-                final String password =\n-                        ((SyncopeUser) object).getClearPassword();\n-\n-                if (password != null) {\n-                    enforcer.enforce(passwordPolicy, policy.getType(), password);\n+            if (policy != null) {\n+                // evaluate policy\n+                PasswordPolicy passwordPolicy =\n+                        evaluator.evaluate(policy, object);\n+\n+                try {\n+                    // clear password will exist just during creation or\n+                    // during password update\n+                    final String password =\n+                            ((SyncopeUser) object).getClearPassword();\n+\n+                    if (password != null) {\n+                        // enforcement will be performed only during creation\n+                        // or during password update\n+                        enforcer.enforce(\n+                                passwordPolicy, policy.getType(), password);\n+                    }\n+\n+                } catch (Exception e) {\n+                    LOG.debug(\"Invalid password\");\n+\n+                    context.buildConstraintViolationWithTemplate(\n+                            e.getMessage()).addNode(\n+                            EntityViolationType.InvalidPassword.toString()).\n+                            addConstraintViolation();\n+                    isValid = false;\n                 }\n-\n-            } catch (Exception e) {\n-                LOG.debug(\"Invalid password\");\n-\n-                context.buildConstraintViolationWithTemplate(e.getMessage()).\n-                        addNode(EntityViolationType.InvalidPassword.toString()).\n-                        addConstraintViolation();\n-                isValid = false;\n             }\n             // ------------------------------\n         }"},{"sha":"1fb30a3e55dcfb79b2e364b8724c9b6617cad0da","filename":"core/src/main/java/org/syncope/core/policy/PasswordPolicyEnforcer.java","status":"modified","additions":55,"deletions":48,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e645ebc757b431f958850cbbc5fef5a685519519/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e645ebc757b431f958850cbbc5fef5a685519519/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java?ref=e645ebc757b431f958850cbbc5fef5a685519519","patch":"@@ -14,7 +14,6 @@\n  */\n package org.syncope.core.policy;\n \n-import java.io.InvalidObjectException;\n import java.util.regex.Pattern;\n import org.springframework.stereotype.Component;\n import org.syncope.types.PasswordPolicy;\n@@ -50,149 +49,157 @@\n     public void enforce(\n             final PasswordPolicy policy,\n             final PolicyType type,\n-            final String object) throws InvalidObjectException, Exception {\n+            final String password)\n+            throws PasswordPolicyException, PolicyEnforceException {\n \n-        if (!(object instanceof String)) {\n-            throw new InvalidObjectException(\"Invalid object type\");\n+        if (password == null) {\n+            throw new PolicyEnforceException(\"Invalid passwordÃ¬\");\n+        }\n+\n+        if (policy == null) {\n+            throw new PolicyEnforceException(\"Invalid policy\");\n         }\n \n         // check length\n         if (policy.getMinLength() > 0\n-                && policy.getMinLength() > object.length()) {\n-            throw new Exception(\"Password too short\");\n+                && policy.getMinLength() > password.length()) {\n+            throw new PasswordPolicyException(\"Password too short\");\n         }\n \n         if (policy.getMaxLength() > 0\n-                && policy.getMaxLength() < object.length()) {\n-            throw new Exception(\"Password too long\");\n+                && policy.getMaxLength() < password.length()) {\n+            throw new PasswordPolicyException(\"Password too long\");\n         }\n \n         // check words not permitted\n         for (String word : policy.getWordsNotPermitted()) {\n-            if (object.contains(word)) {\n-                throw new Exception(\"Used word(s) not permitted\");\n+            if (password.contains(word)) {\n+                throw new PasswordPolicyException(\"Used word(s) not permitted\");\n             }\n         }\n \n         // check digits occurrence\n         if (policy.isDigitRequired()\n-                && !checkForDigit(object)) {\n-            throw new Exception(\"Password must contain digit(s)\");\n+                && !checkForDigit(password)) {\n+            throw new PasswordPolicyException(\"Password must contain digit(s)\");\n         }\n \n         // check lowercase alphabetic characters occurrence\n         if (policy.isLowercaseRequired()\n-                && !checkForLowercase(object)) {\n-            throw new Exception(\n+                && !checkForLowercase(password)) {\n+            throw new PasswordPolicyException(\n                     \"Password must contain lowercase alphabetic character(s)\");\n         }\n \n         // check uppercase alphabetic characters occurrence\n         if (policy.isUppercaseRequired()\n-                && !checkForUppercase(object)) {\n-            throw new Exception(\n+                && !checkForUppercase(password)) {\n+            throw new PasswordPolicyException(\n                     \"Password must contain uppercase alphabetic character(s)\");\n         }\n \n         // check prefix\n         for (String prefix : policy.getPrefixesNotPermitted()) {\n-            if (object.startsWith(prefix)) {\n-                throw new Exception(\"Prefix not permitted\");\n+            if (password.startsWith(prefix)) {\n+                throw new PasswordPolicyException(\"Prefix not permitted\");\n             }\n         }\n \n         // check suffix\n         for (String suffix : policy.getSuffixesNotPermitted()) {\n-            if (object.endsWith(suffix)) {\n-                throw new Exception(\"Suffix not permitted\");\n+            if (password.endsWith(suffix)) {\n+                throw new PasswordPolicyException(\"Suffix not permitted\");\n             }\n         }\n \n         // check digit first occurrence\n         if (policy.isMustStartWithDigit()\n-                && !checkForFirstDigit(object)) {\n-            throw new Exception(\"Password must start with a digit\");\n+                && !checkForFirstDigit(password)) {\n+            throw new PasswordPolicyException(\n+                    \"Password must start with a digit\");\n         }\n \n         if (policy.isMustntStartWithDigit()\n-                && checkForFirstDigit(object)) {\n-            throw new Exception(\"Password mustn't start with a digit\");\n+                && checkForFirstDigit(password)) {\n+            throw new PasswordPolicyException(\n+                    \"Password mustn't start with a digit\");\n         }\n \n         // check digit last occurrence\n         if (policy.isMustEndWithDigit()\n-                && !checkForLastDigit(object)) {\n-            throw new Exception(\"Password must end with a digit\");\n+                && !checkForLastDigit(password)) {\n+            throw new PasswordPolicyException(\"Password must end with a digit\");\n         }\n \n         if (policy.isMustntEndWithDigit()\n-                && checkForLastDigit(object)) {\n-            throw new Exception(\"Password mustn't end with a digit\");\n+                && checkForLastDigit(password)) {\n+            throw new PasswordPolicyException(\n+                    \"Password mustn't end with a digit\");\n         }\n \n         // check alphanumeric characters occurence\n         if (policy.isAlphanumericRequired()\n-                && !checkForAlphanumeric(object)) {\n-            throw new Exception(\n+                && !checkForAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\n                     \"Password must contain alphanumeric character(s)\");\n         }\n \n         // check non alphanumeric characters occurence\n         if (policy.isNonAlphanumericRequired()\n-                && !checkForNonAlphanumeric(object)) {\n-            throw new Exception(\n+                && !checkForNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\n                     \"Password must contain non-alphanumeric character(s)\");\n         }\n \n         // check alphanumeric character first occurrence\n         if (policy.isMustStartWithAlpha()\n-                && !checkForFirstAlphanumeric(object)) {\n-            throw new Exception(\n+                && !checkForFirstAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\n                     \"Password must start with an alphanumeric character\");\n         }\n \n         if (policy.isMustntStartWithAlpha()\n-                && checkForFirstAlphanumeric(object)) {\n-            throw new Exception(\n+                && checkForFirstAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\n                     \"Password mustn't start with an alphanumeric character\");\n         }\n \n         // check alphanumeric character last occurrence\n         if (policy.isMustEndWithAlpha()\n-                && !checkForLastAlphanumeric(object)) {\n-            throw new Exception(\n+                && !checkForLastAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\n                     \"Password must end with an alphanumeric character\");\n         }\n \n         if (policy.isMustntEndWithAlpha()\n-                && checkForLastAlphanumeric(object)) {\n-            throw new Exception(\n+                && checkForLastAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\n                     \"Password mustn't end with an alphanumeric character\");\n         }\n \n         // check non alphanumeric character first occurrence\n         if (policy.isMustStartWithNonAlpha()\n-                && !checkForFirstNonAlphanumeric(object)) {\n-            throw new Exception(\n+                && !checkForFirstNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\n                     \"Password must start with a non-alphanumeric character\");\n         }\n \n         if (policy.isMustntStartWithNonAlpha()\n-                && checkForFirstNonAlphanumeric(object)) {\n-            throw new Exception(\n+                && checkForFirstNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\n                     \"Password mustn't start with a non-alphanumeric character\");\n         }\n \n         // check non alphanumeric character last occurrence\n         if (policy.isMustEndWithNonAlpha()\n-                && !checkForLastNonAlphanumeric(object)) {\n-            throw new Exception(\n+                && !checkForLastNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\n                     \"Password must end with a non-alphanumeric character\");\n         }\n \n         if (policy.isMustntEndWithNonAlpha()\n-                && checkForLastNonAlphanumeric(object)) {\n-            throw new Exception(\n+                && checkForLastNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\n                     \"Password mustn't end with a non-alphanumeric character\");\n         }\n     }"},{"sha":"5b4ea8cd037988a6ddfac091ac9c7740fbd021f1","filename":"core/src/main/java/org/syncope/core/policy/PasswordPolicyException.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e645ebc757b431f958850cbbc5fef5a685519519/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e645ebc757b431f958850cbbc5fef5a685519519/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyException.java?ref=e645ebc757b431f958850cbbc5fef5a685519519","patch":"@@ -0,0 +1,27 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.policy;\n+\n+public class PasswordPolicyException extends Exception {\n+\n+    private static final long serialVersionUID = 8072104484395278469L;\n+\n+    public PasswordPolicyException() {\n+    }\n+\n+    public PasswordPolicyException(String msg) {\n+        super(msg);\n+    }\n+}"},{"sha":"02dd2a42f599922323b07810f9eac4257cbf0927","filename":"core/src/main/java/org/syncope/core/policy/PolicyEnforceException.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e645ebc757b431f958850cbbc5fef5a685519519/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforceException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e645ebc757b431f958850cbbc5fef5a685519519/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforceException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforceException.java?ref=e645ebc757b431f958850cbbc5fef5a685519519","patch":"@@ -0,0 +1,26 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.policy;\n+\n+class PolicyEnforceException extends Exception {\n+\n+    private static final long serialVersionUID = 3247084727383061069L;\n+\n+    public PolicyEnforceException() {\n+    }\n+\n+    public PolicyEnforceException(String string) {\n+    }\n+}"},{"sha":"977a3c987d4a348fa3ba4133ebfe557db3e936f5","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e645ebc757b431f958850cbbc5fef5a685519519/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e645ebc757b431f958850cbbc5fef5a685519519/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=e645ebc757b431f958850cbbc5fef5a685519519","patch":"@@ -36,6 +36,8 @@\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.search.ResourceCond;\n+import org.syncope.client.to.PasswordPolicyTO;\n+import org.syncope.client.to.PolicyTO;\n import org.syncope.client.to.PropagationTaskTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -175,6 +177,55 @@ public final void createUserWithNoPropagation() {\n         assertTrue(taskTO.getExecutions().isEmpty());\n     }\n \n+    @Test\n+    /* This test has been introduced to verify and solve the following issue:\n+     * http://code.google.com/p/syncope/issues/detail?id=172.\n+     * Creations of a new user without having a global password policy stored\n+     * into the local repository used to fail with a null pointer exception.\n+     * This bug has been fixed introducing a simple control.\n+     */\n+    public final void issue172() {\n+        PolicyTO policyTO = restTemplate.getForObject(\n+                BASE_URL + \"policy/read/{id}\", PasswordPolicyTO.class, 2L);\n+\n+        assertNotNull(policyTO);\n+\n+        restTemplate.delete(BASE_URL + \"policy/delete/{id}\", 2L);\n+\n+        UserTO userTO = new UserTO();\n+\n+        AttributeTO attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"firstname\");\n+        attributeTO.addValue(\"ppp\");\n+        userTO.addAttribute(attributeTO);\n+\n+        attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"surname\");\n+        attributeTO.addValue(\"ppp\");\n+        userTO.addAttribute(attributeTO);\n+\n+        attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"userId\");\n+        attributeTO.addValue(\"ppp@ppp.ppp\");\n+        userTO.addAttribute(attributeTO);\n+\n+        attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"username\");\n+        attributeTO.addValue(\"ppp\");\n+        userTO.addAttribute(attributeTO);\n+\n+        userTO.setPassword(\"password\");\n+\n+        restTemplate.postForObject(\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n+\n+        policyTO = restTemplate.postForObject(\n+                BASE_URL + \"policy/password/create\",\n+                policyTO, PasswordPolicyTO.class);\n+\n+        assertNotNull(policyTO);\n+    }\n+\n     @Test\n     public final void createUserWithDbPropagation() {\n         UserTO userTO = new UserTO();"}]}