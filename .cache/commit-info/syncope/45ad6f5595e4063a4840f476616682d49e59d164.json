{"sha":"45ad6f5595e4063a4840f476616682d49e59d164","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ1YWQ2ZjU1OTVlNDA2M2E0ODQwZjQ3NjYxNjY4MmQ0OWU1OWQxNjQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-02T13:29:11Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-02T13:29:11Z"},"message":"[SYNCOPE-1208] Now using JUnit 5 (with temporary junit-platform-surefire-provider 1.1.0-SNAPSHOT)","tree":{"sha":"657947d98dc25d3b411fbaa1f713d08dc94ba2e2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/657947d98dc25d3b411fbaa1f713d08dc94ba2e2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/45ad6f5595e4063a4840f476616682d49e59d164","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/45ad6f5595e4063a4840f476616682d49e59d164","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/45ad6f5595e4063a4840f476616682d49e59d164","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/45ad6f5595e4063a4840f476616682d49e59d164/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"17a8eb5d99a84608a64927b00e7d9352d640517e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/17a8eb5d99a84608a64927b00e7d9352d640517e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/17a8eb5d99a84608a64927b00e7d9352d640517e"}],"stats":{"total":2766,"additions":1423,"deletions":1343},"files":[{"sha":"9b279f1de9a368a55c57d29f629fe54c9a36b7df","filename":"client/cli/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/client%2Fcli%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/client%2Fcli%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fpom.xml?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -97,8 +97,8 @@ under the License.\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>"},{"sha":"f3239eb3b45a150996d94d5ba55c194875a6d2b9","filename":"client/cli/src/test/java/org/apache/syncope/client/cli/commands/MigrateTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FMigrateTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FMigrateTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FMigrateTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.File;\n import java.io.FileInputStream;\n@@ -33,8 +33,8 @@\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.commands.migrate.MigrateCommand;\n import org.apache.syncope.core.persistence.jpa.content.ContentLoaderHandler;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.jdbc.datasource.DriverManagerDataSource;\n import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n@@ -45,7 +45,7 @@ public class MigrateTest {\n \n     private static String BASE_PATH;\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void before() {\n         Properties props = new Properties();\n         InputStream propStream = null;"},{"sha":"a1e4ee522b2c1cf4b97cb7ff23f83b3083f88313","filename":"client/cli/src/test/java/org/apache/syncope/client/cli/util/CommandUtilsTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtilsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtilsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtilsTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,14 +18,14 @@\n  */\n package org.apache.syncope.client.cli.util;\n \n-import static org.junit.Assert.fail;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n \n import java.util.List;\n import org.apache.syncope.client.cli.Command;\n import org.apache.syncope.client.cli.commands.AbstractCommand;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class CommandUtilsTest {\n "},{"sha":"241dbdac74f85c43ebb29c5b0db330afc4e347ad","filename":"client/cli/src/test/java/org/apache/syncope/client/cli/util/JasyptUtilsTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FJasyptUtilsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FJasyptUtilsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FJasyptUtilsTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.client.cli.util;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class JasyptUtilsTest {\n "},{"sha":"57cf120b88a71b3eb4219410f2ee98f1c0827e3f","filename":"client/enduser/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/client%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/client%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fpom.xml?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -185,8 +185,8 @@ under the License.\n     \n     <!-- TEST -->\n     <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n       <scope>test</scope>\n     </dependency>\n     "},{"sha":"84cef5387af689c5ac805f1d8358267f4ff9a9f9","filename":"client/enduser/src/test/java/org/apache/syncope/client/enduser/util/UserRequestValidatorTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidatorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidatorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidatorTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.client.enduser.util;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -30,7 +30,7 @@\n import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.core.io.ClassPathResource;\n \n public class UserRequestValidatorTest {"},{"sha":"1025ee89830eb621458a5ef39454094c4dc52baf","filename":"client/lib/pom.xml","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/client%2Flib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/client%2Flib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fpom.xml?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -82,10 +82,34 @@ under the License.\n       <version>${slf4j.version}</version>\n       <scope>test</scope>\n     </dependency>        \n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.seleniumhq.selenium</groupId>\n+      <artifactId>selenium-java</artifactId>\n+      <scope>test</scope>\n+      <version>2.44.0</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.opera</groupId>\n+      <artifactId>operadriver</artifactId>\n+      <scope>test</scope>\n+      <version>1.5</version>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.seleniumhq.selenium</groupId>\n+          <artifactId>selenium-remote-driver</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n       <scope>test</scope>\n+      <version>4.11</version>\n     </dependency>\n   </dependencies>\n   "},{"sha":"f993504dcd95f842e233429de31d8dff1a3b23c0","filename":"client/lib/src/test/java/org/apache/syncope/client/lib/ConcurrencyTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/client%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FConcurrencyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/client%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FConcurrencyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FConcurrencyTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.client.lib;\n \n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n "},{"sha":"f24f60a0f6ce483f7abc9855538541820cd46f87","filename":"common/lib/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/common%2Flib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/common%2Flib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fpom.xml?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -77,8 +77,8 @@ under the License.\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>"},{"sha":"a94f8b464af663a7d93056ebb93f3da112ce636b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/collections/IteratorChain.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FIteratorChain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FIteratorChain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FIteratorChain.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -124,6 +124,7 @@ public IteratorChain(final Iterator<? extends E> first, final Iterator<? extends\n      * @param iteratorChain the array of iterators, not null\n      * @throws NullPointerException if iterators array is or contains null\n      */\n+    @SafeVarargs\n     public IteratorChain(final Iterator<? extends E>... iteratorChain) {\n         super();\n         for (final Iterator<? extends E> element : iteratorChain) {\n@@ -145,9 +146,9 @@ public IteratorChain(final Iterator<? extends E>... iteratorChain) {\n      */\n     public IteratorChain(final Collection<Iterator<? extends E>> iteratorChain) {\n         super();\n-        for (final Iterator<? extends E> iterator : iteratorChain) {\n+        iteratorChain.forEach(iterator -> {\n             addIterator(iterator);\n-        }\n+        });\n     }\n \n     //-----------------------------------------------------------------------\n@@ -158,7 +159,7 @@ public IteratorChain(final Collection<Iterator<? extends E>> iteratorChain) {\n      * @throws IllegalStateException if I've already started iterating\n      * @throws NullPointerException if the iterator is null\n      */\n-    public void addIterator(final Iterator<? extends E> iterator) {\n+    private void addIterator(final Iterator<? extends E> iterator) {\n         checkLocked();\n         if (iterator == null) {\n             throw new NullPointerException(\"Iterator must not be null\");"},{"sha":"e04ecdd35ee66319b13c728ea43bc6c6f6cd05fb","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/AnyOperationsTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperationsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperationsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperationsTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,14 +18,14 @@\n  */\n package org.apache.syncope.common.lib;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class AnyOperationsTest {\n "},{"sha":"70d14799af1f082a9ec0271642dc376a133983e1","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/JAXBTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.common.lib;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.StringReader;\n import java.io.StringWriter;\n@@ -38,7 +38,7 @@\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class JAXBTest {\n "},{"sha":"7c5006387348ebd27b8a01dc9fc48ab3ad4f4b6d","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/JSONTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.common.lib;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class JSONTest {\n "},{"sha":"168b0afb1b54fcd09bdcc5846d00e14f82da1580","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/search/SyncopeFiqlParserTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParserTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,14 +18,14 @@\n  */\n package org.apache.syncope.common.lib.search;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import org.apache.cxf.jaxrs.ext.search.ConditionType;\n import org.apache.cxf.jaxrs.ext.search.SearchBean;\n import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class SyncopeFiqlParserTest {\n "},{"sha":"c0ddcded84cccff7f7e96734168824ad47e31c5f","filename":"core/persistence-api/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fpom.xml?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -70,8 +70,8 @@ under the License.\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>"},{"sha":"6d5981e193105999291547c17442111a81f7fff1","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/SearchCondConverterTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.search;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import java.util.UUID;\n import org.apache.syncope.common.lib.search.AnyObjectFiqlSearchConditionBuilder;\n@@ -37,7 +37,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class SearchCondConverterTest {\n "},{"sha":"da3270d42844dc0b4463194bba74396834096dfd","filename":"core/persistence-jpa/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fpom.xml?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -132,8 +132,8 @@ under the License.\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n       <scope>test</scope>\n     </dependency>\n     <dependency>"},{"sha":"d0151bac8f97c7fc09ae0c2a997afc3a5cb99858","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/AbstractTest.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -23,14 +23,11 @@\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:persistenceTest.xml\" })\n+@SpringJUnitConfig(locations = { \"classpath:persistenceTest.xml\" })\n public abstract class AbstractTest {\n \n     @Autowired"},{"sha":"c0d71a7d038ff06ba4e1bf1e5e3533ab73186404","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyObjectTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,17 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"480b959c7711c0b9ce715323e9816ba818d281ce","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.ArrayList;\n import java.util.Collections;\n@@ -55,7 +55,7 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"0c7eacf0b6910c84de67c519b761c50e6522c24c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeClassTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeClassTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeClassTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeClassTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,17 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"1db62d8b2ca2d08e55ee86513108f4842d028100","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeTest.java","status":"modified","additions":24,"deletions":17,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -30,7 +31,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -82,20 +83,24 @@ public void save() {\n         assertFalse(newType.getClasses().isEmpty());\n     }\n \n-    @Test(expected = InvalidEntityException.class)\n+    @Test\n     public void saveInvalidKind() {\n-        AnyType newType = entityFactory.newEntity(AnyType.class);\n-        newType.setKey(\"new type\");\n-        newType.setKind(AnyTypeKind.USER);\n-        anyTypeDAO.save(newType);\n+        assertThrows(InvalidEntityException.class, () -> {\n+            AnyType newType = entityFactory.newEntity(AnyType.class);\n+            newType.setKey(\"new type\");\n+            newType.setKind(AnyTypeKind.USER);\n+            anyTypeDAO.save(newType);\n+        });\n     }\n \n-    @Test(expected = InvalidEntityException.class)\n+    @Test\n     public void saveInvalidName() {\n-        AnyType newType = entityFactory.newEntity(AnyType.class);\n-        newType.setKey(\"group\");\n-        newType.setKind(AnyTypeKind.ANY_OBJECT);\n-        anyTypeDAO.save(newType);\n+        assertThrows(InvalidEntityException.class, () -> {\n+            AnyType newType = entityFactory.newEntity(AnyType.class);\n+            newType.setKey(\"group\");\n+            newType.setKind(AnyTypeKind.ANY_OBJECT);\n+            anyTypeDAO.save(newType);\n+        });\n     }\n \n     @Test\n@@ -107,8 +112,10 @@ public void delete() {\n         assertNull(anyTypeDAO.find(\"PRINTER\"));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void deleteInvalid() {\n-        anyTypeDAO.delete(anyTypeDAO.findUser().getKey());\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            anyTypeDAO.delete(anyTypeDAO.findUser().getKey());\n+        });\n     }\n }"},{"sha":"87c4f3f717be1be5b6425182ce88533d4ebc9b68","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ConfTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.Optional;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n@@ -34,7 +34,7 @@\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrValue;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -112,7 +112,7 @@ public void issueSYNCOPE418() {\n             failing.setType(AttrSchemaType.String);\n             plainSchemaDAO.save(failing);\n \n-            fail();\n+            fail(\"This should not happen\");\n         } catch (InvalidEntityException e) {\n             assertTrue(e.hasViolation(EntityViolationType.InvalidKey));\n         }"},{"sha":"1d9784b052f580d8a05c099f61dac417bf6f4f96","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ConnInstanceTest.java","status":"modified","additions":17,"deletions":19,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.File;\n import java.util.HashSet;\n@@ -40,7 +40,7 @@\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.GrantedAuthority;\n@@ -78,13 +78,12 @@ public void findAll() {\n     public void findById() {\n         ConnInstance connInstance = connInstanceDAO.find(\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\");\n         assertNotNull(connInstance);\n-        assertEquals(\"invalid connector name\",\n-                \"net.tirasa.connid.bundles.soap.WebServiceConnector\", connInstance.getConnectorName());\n-        assertEquals(\"invalid bundle name\", \"net.tirasa.connid.bundles.soap\", connInstance.getBundleName());\n+        assertEquals(\"net.tirasa.connid.bundles.soap.WebServiceConnector\", connInstance.getConnectorName());\n+        assertEquals(\"net.tirasa.connid.bundles.soap\", connInstance.getBundleName());\n \n         try {\n             connInstanceDAO.authFind(\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (DelegatedAdministrationException e) {\n             assertNotNull(e);\n         }\n@@ -140,32 +139,31 @@ public void save() throws ClassNotFoundException {\n \n         assertNotNull(\"save did not work\", actual.getKey());\n \n-        assertEquals(\"save did not work for \\\"name\\\" attribute\", \"WebService\", actual.getConnectorName());\n+        assertEquals(\"WebService\", actual.getConnectorName());\n \n-        assertEquals(\"save did not work for \\\"bundle name\\\" attribute\", \"org.apache.syncope.core.persistence.test.util\",\n-                actual.getBundleName());\n+        assertEquals(\"org.apache.syncope.core.persistence.test.util\", actual.getBundleName());\n \n-        assertEquals(\"save did not work for \\\"majorVersion\\\" attribute\", \"1.0\", connInstance.getVersion());\n+        assertEquals(\"1.0\", connInstance.getVersion());\n \n         assertEquals(\"New\", actual.getDisplayName());\n \n-        assertEquals(60, actual.getConnRequestTimeout(), 0);\n+        assertEquals(60, actual.getConnRequestTimeout().intValue());\n \n         conf = connInstance.getConf();\n         assertFalse(conf.isEmpty());\n \n-        assertNotNull(\"configuration retrieving failed\", conf);\n+        assertNotNull(conf);\n         assertTrue(conf.size() == 2);\n     }\n \n     @Test\n     public void delete() {\n         ConnInstance connectorInstance = connInstanceDAO.find(\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\");\n-        assertNotNull(\"find to delete did not work\", connectorInstance);\n+        assertNotNull(connectorInstance);\n \n         connInstanceDAO.delete(connectorInstance.getKey());\n \n         ConnInstance actual = connInstanceDAO.find(\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\");\n-        assertNull(\"delete did not work\", actual);\n+        assertNull(actual);\n     }\n }"},{"sha":"55d2498effb9c3888edf3f8b6249de04fd039556","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DerSchemaTest.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,19 +18,19 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -49,7 +49,7 @@ public void findAll() {\n     @Test\n     public void findByName() {\n         DerSchema attributeSchema = derSchemaDAO.find(\"cn\");\n-        assertNotNull(\"did not find expected derived attribute schema\", attributeSchema);\n+        assertNotNull(attributeSchema);\n     }\n \n     @Test\n@@ -61,7 +61,7 @@ public void save() {\n         derSchemaDAO.save(derivedAttributeSchema);\n \n         DerSchema actual = derSchemaDAO.find(\"cn2\");\n-        assertNotNull(\"expected save to work\", actual);\n+        assertNotNull(actual);\n         assertEquals(derivedAttributeSchema, actual);\n     }\n \n@@ -73,7 +73,7 @@ public void delete() {\n         derSchemaDAO.delete(cn.getKey());\n \n         DerSchema actual = derSchemaDAO.find(\"cn\");\n-        assertNull(\"delete did not work\", actual);\n+        assertNull(actual);\n \n         // ------------- //\n         DerSchema rderiveddata = derSchemaDAO.find(\"rderiveddata\");\n@@ -82,7 +82,7 @@ public void delete() {\n         derSchemaDAO.delete(rderiveddata.getKey());\n \n         actual = derSchemaDAO.find(\"rderiveddata\");\n-        assertNull(\"delete did not work\", actual);\n+        assertNull(actual);\n     }\n \n     @Test\n@@ -92,7 +92,7 @@ public void issueSYNCOPE418() {\n \n         try {\n             derSchemaDAO.save(schema);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (InvalidEntityException e) {\n             assertTrue(e.hasViolation(EntityViolationType.InvalidKey));\n         }"},{"sha":"468c8e542c4c61a3cc9cf7f9178a5caea8e2387b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DomainTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,18 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n import org.apache.syncope.core.persistence.api.entity.Domain;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"52766e573b868b46ecef7dd742a834e2c8d59770","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/GroupTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -29,7 +29,7 @@\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -48,13 +48,13 @@ public class GroupTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<Group> list = groupDAO.findAll(1, 100);\n-        assertEquals(\"did not get expected number of groups \", 16, list.size());\n+        assertEquals(16, list.size());\n     }\n \n     @Test\n     public void find() {\n         Group group = groupDAO.findByName(\"root\");\n-        assertNotNull(\"did not find expected group\", group);\n+        assertNotNull(group);\n \n         group = groupDAO.findByName(\"additional\");\n         assertNotNull(group);\n@@ -71,7 +71,7 @@ public void save() {\n         group = groupDAO.save(group);\n \n         Group actual = groupDAO.find(group.getKey());\n-        assertNotNull(\"expected save to work\", actual);\n+        assertNotNull(actual);\n     }\n \n     @Test\n@@ -80,6 +80,6 @@ public void delete() {\n         groupDAO.delete(group.getKey());\n \n         Group actual = groupDAO.find(\"8fb2d51e-c605-4e80-a72b-13ffecf1aa9a\");\n-        assertNull(\"delete did not work\", actual);\n+        assertNull(actual);\n     }\n }"},{"sha":"efb513ef116360b32bca7ac61e00b67eeca55c45","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MailTemplateTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMailTemplateTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMailTemplateTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMailTemplateTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"caabb79fcce0baf6a13d261202fa8c835cacc817","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MultitenancyTest.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n import java.util.stream.Collectors;\n@@ -35,9 +35,9 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.GrantedAuthority;\n@@ -56,7 +56,7 @@ public class MultitenancyTest extends AbstractTest {\n     @Autowired\n     private UserDAO userDAO;\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setAuthContext() {\n         List<GrantedAuthority> authorities = StandardEntitlement.values().stream().\n                 map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n@@ -69,7 +69,7 @@ public static void setAuthContext() {\n         SecurityContextHolder.getContext().setAuthentication(auth);\n     }\n \n-    @AfterClass\n+    @AfterAll\n     public static void unsetAuthContext() {\n         SecurityContextHolder.getContext().setAuthentication(null);\n     }\n@@ -96,7 +96,7 @@ public void createUser() {\n         user.setUsername(\"username\");\n \n         User actual = userDAO.save(user);\n-        assertNotNull(\"expected save to work\", actual);\n+        assertNotNull(actual);\n         assertEquals(0, actual.getPasswordHistory().size());\n     }\n }"},{"sha":"953cb9d9da09201110561bfc76a0b870b538589b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/NotificationTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FNotificationTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -29,7 +29,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"cc9281e8ddb49000140f339d846edb240d3d154b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainAttrTest.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.UnsupportedEncodingException;\n import java.util.Arrays;\n@@ -41,7 +41,7 @@\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -60,9 +60,9 @@ public class PlainAttrTest extends AbstractTest {\n     @Test\n     public void findByKey() {\n         UPlainAttr attribute = plainAttrDAO.find(\"01f22fbd-b672-40af-b528-686d9b27ebc4\", UPlainAttr.class);\n-        assertNotNull(\"did not find expected attribute\", attribute);\n+        assertNotNull(attribute);\n         attribute = plainAttrDAO.find(\"9d0d9e40-1b18-488e-9482-37dab82163c9\", UPlainAttr.class);\n-        assertNotNull(\"did not find expected attribute\", attribute);\n+        assertNotNull(attribute);\n     }\n \n     @Test\n@@ -91,14 +91,14 @@ public void save() throws ClassNotFoundException {\n         } catch (ValidationException e) {\n             thrown = e;\n         }\n-        assertNull(\"no validation exception expected here \", thrown);\n+        assertNull(thrown);\n \n         try {\n             attr.add(\"http://www.apache.org\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         } catch (ValidationException e) {\n             thrown = e;\n         }\n-        assertNotNull(\"validation exception expected here \", thrown);\n+        assertNotNull(thrown);\n     }\n \n     @Test\n@@ -122,7 +122,7 @@ public void saveWithEnum() throws ClassNotFoundException {\n         } catch (ValidationException e) {\n             thrown = e;\n         }\n-        assertNotNull(\"validation exception expected here \", thrown);\n+        assertNotNull(thrown);\n \n         attribute.add(\"M\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n \n@@ -161,7 +161,7 @@ public void validateAndSave() {\n         InvalidEntityException iee = null;\n         try {\n             userDAO.save(user);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (InvalidEntityException e) {\n             iee = e;\n         }\n@@ -231,6 +231,6 @@ public void delete() {\n         plainAttrDAO.delete(attribute.getKey(), UPlainAttr.class);\n \n         PlainSchema schema = plainSchemaDAO.find(attrSchemaName);\n-        assertNotNull(\"user attribute schema deleted when deleting values\", schema);\n+        assertNotNull(schema);\n     }\n }"},{"sha":"a1f8141bb99b80f0fa3d26b1a4fe4ef4aac7db31","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java","status":"modified","additions":30,"deletions":25,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -34,7 +35,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -53,7 +54,7 @@ public void findAll() {\n     @Test\n     public void findByName() {\n         PlainSchema schema = plainSchemaDAO.find(\"fullname\");\n-        assertNotNull(\"did not find expected attribute schema\", schema);\n+        assertNotNull(schema);\n     }\n \n     @Test\n@@ -78,21 +79,23 @@ public void save() {\n         plainSchemaDAO.save(schema);\n \n         PlainSchema actual = plainSchemaDAO.find(\"secondaryEmail\");\n-        assertNotNull(\"expected save to work\", actual);\n+        assertNotNull(actual);\n         assertEquals(schema, actual);\n     }\n \n-    @Test(expected = InvalidEntityException.class)\n+    @Test\n     public void saveNonValid() {\n-        PlainSchema schema = entityFactory.newEntity(PlainSchema.class);\n-        schema.setKey(\"secondaryEmail\");\n-        schema.setType(AttrSchemaType.String);\n-        schema.setValidatorClass(\"org.apache.syncope.core.validation.EmailAddressValidator\");\n-        schema.setMandatoryCondition(\"false\");\n-        schema.setMultivalue(true);\n-        schema.setUniqueConstraint(true);\n+        assertThrows(InvalidEntityException.class, () -> {\n+            PlainSchema schema = entityFactory.newEntity(PlainSchema.class);\n+            schema.setKey(\"secondaryEmail\");\n+            schema.setType(AttrSchemaType.String);\n+            schema.setValidatorClass(\"org.apache.syncope.core.validation.EmailAddressValidator\");\n+            schema.setMandatoryCondition(\"false\");\n+            schema.setMultivalue(true);\n+            schema.setUniqueConstraint(true);\n \n-        plainSchemaDAO.save(schema);\n+            plainSchemaDAO.save(schema);\n+        });\n     }\n \n     @Test\n@@ -103,7 +106,7 @@ public void checkForEnumType() {\n \n         try {\n             plainSchemaDAO.save(schema);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             assertNotNull(e);\n         }\n@@ -119,11 +122,13 @@ public void checkForEnumType() {\n         assertFalse(actual.getEnumerationKeys().isEmpty());\n     }\n \n-    @Test(expected = InvalidEntityException.class)\n+    @Test\n     public void saveInvalidSchema() {\n-        PlainSchema schema = entityFactory.newEntity(PlainSchema.class);\n-        schema.setKey(\"username\");\n-        plainSchemaDAO.save(schema);\n+        assertThrows(InvalidEntityException.class, () -> {\n+            PlainSchema schema = entityFactory.newEntity(PlainSchema.class);\n+            schema.setKey(\"username\");\n+            plainSchemaDAO.save(schema);\n+        });\n     }\n \n     @Test\n@@ -133,7 +138,7 @@ public void delete() {\n         plainSchemaDAO.delete(firstname.getKey());\n \n         PlainSchema actual = plainSchemaDAO.find(\"firstname\");\n-        assertNull(\"delete did not work\", actual);\n+        assertNull(actual);\n     }\n \n     @Test\n@@ -143,7 +148,7 @@ public void issueSYNCOPE418() {\n \n         try {\n             plainSchemaDAO.save(schema);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (InvalidEntityException e) {\n             assertTrue(e.hasViolation(EntityViolationType.InvalidKey));\n         }"},{"sha":"3f7948d246e18099b630875873d991d5a4c7fea6","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -35,7 +35,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n@@ -59,7 +59,7 @@ public void findAll() {\n     @Test\n     public void findByKey() {\n         PullPolicy policy = policyDAO.find(\"880f8553-069b-4aed-9930-2cd53873f544\");\n-        assertNotNull(\"findById did not work\", policy);\n+        assertNotNull(policy);\n \n         PullPolicySpec spec = policy.getSpecification();\n         assertNotNull(spec);\n@@ -76,7 +76,7 @@ public void findByKey() {\n     @Test\n     public void findByType() {\n         List<PullPolicy> policies = policyDAO.find(PullPolicy.class);\n-        assertNotNull(\"findById did not work\", policies);\n+        assertNotNull(policies);\n         assertFalse(policies.isEmpty());\n     }\n \n@@ -125,11 +125,11 @@ public void update() {\n     @Test\n     public void delete() {\n         Policy policy = policyDAO.find(\"66691e96-285f-4464-bc19-e68384ea4c85\");\n-        assertNotNull(\"find to delete did not work\", policy);\n+        assertNotNull(policy);\n \n         policyDAO.delete(policy);\n \n         Policy actual = policyDAO.find(\"66691e96-285f-4464-bc19-e68384ea4c85\");\n-        assertNull(\"delete did not work\", actual);\n+        assertNull(actual);\n     }\n }"},{"sha":"936e822002ba2eea359276cd9f071e8604faf256","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RealmTest.java","status":"modified","additions":16,"deletions":13,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -36,7 +37,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -75,9 +76,11 @@ public void find() {\n         assertEquals(\"/even/two\", realm.getFullPath());\n     }\n \n-    @Test(expected = MalformedPathException.class)\n+    @Test\n     public void findInvalidPath() {\n-        realmDAO.findByFullPath(\"even/two\");\n+        assertThrows(MalformedPathException.class, () -> {\n+            realmDAO.findByFullPath(\"even/two\");\n+        });\n     }\n \n     @Test\n@@ -96,9 +99,9 @@ public void findAll() {\n         List<Realm> list = realmDAO.findAll();\n         assertNotNull(list);\n         assertFalse(list.isEmpty());\n-        for (Realm realm : list) {\n+        list.forEach(realm -> {\n             assertNotNull(realm);\n-        }\n+        });\n     }\n \n     @Test\n@@ -135,7 +138,7 @@ public void saveInvalidName() {\n \n         try {\n             realmDAO.save(realm);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (InvalidEntityException e) {\n             assertTrue(e.hasViolation(EntityViolationType.InvalidRealm));\n         }\n@@ -149,7 +152,7 @@ public void saveNullParent() {\n \n         try {\n             realmDAO.save(realm);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (InvalidEntityException e) {\n             assertTrue(e.hasViolation(EntityViolationType.InvalidRealm));\n         }"},{"sha":"dce3e096fd59c5366ea11495fa3d1b7cacf2e940","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RelationshipTypeTest.java","status":"modified","additions":13,"deletions":11,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRelationshipTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRelationshipTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRelationshipTypeTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,21 +18,21 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n-import java.util.UUID;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -69,11 +69,13 @@ public void save() {\n         assertEquals(\"description\", newType.getDescription());\n     }\n \n-    @Test(expected = InvalidEntityException.class)\n+    @Test\n     public void saveInvalidName() {\n-        RelationshipType newType = entityFactory.newEntity(RelationshipType.class);\n-        newType.setKey(\"membership\");\n-        relationshipTypeDAO.save(newType);\n+        assertThrows(InvalidEntityException.class, () -> {\n+            RelationshipType newType = entityFactory.newEntity(RelationshipType.class);\n+            newType.setKey(\"membership\");\n+            relationshipTypeDAO.save(newType);\n+        });\n     }\n \n     @Test"},{"sha":"e1e2574cf856b5a7ac11258d65c52d746496e56f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ReportTemplateTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTemplateTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTemplateTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTemplateTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n import org.apache.syncope.core.persistence.api.entity.ReportTemplate;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"2bee35869740dffdb5c82c2c07bba8372ad40a3f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ReportTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.util.List;\n import java.util.UUID;\n@@ -29,7 +29,7 @@\n import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"0bf26722b8047e1f55e6a969a84dd9edb809c6f2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ResourceTest.java","status":"modified","additions":91,"deletions":85,"changes":176,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import java.util.stream.Collectors;\n@@ -44,7 +45,7 @@\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.GrantedAuthority;\n@@ -63,23 +64,22 @@ public class ResourceTest extends AbstractTest {\n     @Test\n     public void findById() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n-        assertNotNull(\"findById did not work\", resource);\n+        assertNotNull(resource);\n \n         ConnInstance connector = resource.getConnector();\n-        assertNotNull(\"connector not found\", connector);\n-        assertEquals(\"invalid connector name\",\n-                \"net.tirasa.connid.bundles.soap.WebServiceConnector\", connector.getConnectorName());\n-        assertEquals(\"invalid bundle name\", \"net.tirasa.connid.bundles.soap\", connector.getBundleName());\n+        assertNotNull(connector);\n+        assertEquals(\"net.tirasa.connid.bundles.soap.WebServiceConnector\", connector.getConnectorName());\n+        assertEquals(\"net.tirasa.connid.bundles.soap\", connector.getBundleName());\n \n         Mapping mapping = resource.getProvision(anyTypeDAO.findUser()).get().getMapping();\n-        assertFalse(\"no mapping specified\", mapping.getItems().isEmpty());\n+        assertFalse(mapping.getItems().isEmpty());\n \n         assertTrue(mapping.getItems().stream().\n                 anyMatch(item -> \"7f55b09c-b573-41dc-a9eb-ccd80bd3ea7a\".equals(item.getKey())));\n \n         try {\n             resourceDAO.authFind(\"ws-target-resource-1\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (DelegatedAdministrationException e) {\n             assertNotNull(e);\n         }\n@@ -156,94 +156,100 @@ public void save() {\n         assertEquals(Integer.valueOf(2), actual.getPropagationPriority());\n     }\n \n-    @Test(expected = InvalidEntityException.class)\n+    @Test\n     public void saveInvalidMappingIntAttr() {\n-        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n-        resource.setKey(\"ws-target-resource-basic-save-invalid\");\n+        assertThrows(InvalidEntityException.class, () -> {\n+            ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n+            resource.setKey(\"ws-target-resource-basic-save-invalid\");\n \n-        ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n-        resource.setConnector(connector);\n+            ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n+            resource.setConnector(connector);\n \n-        Provision provision = entityFactory.newEntity(Provision.class);\n-        provision.setAnyType(anyTypeDAO.findUser());\n-        provision.setObjectClass(ObjectClass.ACCOUNT);\n-        provision.setResource(resource);\n-        resource.add(provision);\n+            Provision provision = entityFactory.newEntity(Provision.class);\n+            provision.setAnyType(anyTypeDAO.findUser());\n+            provision.setObjectClass(ObjectClass.ACCOUNT);\n+            provision.setResource(resource);\n+            resource.add(provision);\n \n-        Mapping mapping = entityFactory.newEntity(Mapping.class);\n-        mapping.setProvision(provision);\n-        provision.setMapping(mapping);\n+            Mapping mapping = entityFactory.newEntity(Mapping.class);\n+            mapping.setProvision(provision);\n+            provision.setMapping(mapping);\n \n-        MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n-        connObjectKey.setConnObjectKey(true);\n-        mapping.add(connObjectKey);\n+            MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n+            connObjectKey.setConnObjectKey(true);\n+            mapping.add(connObjectKey);\n \n-        // save the resource\n-        resourceDAO.save(resource);\n+            // save the resource\n+            resourceDAO.save(resource);\n+        });\n     }\n \n-    @Test(expected = InvalidEntityException.class)\n+    @Test\n     public void saveInvalidMappingExtAttr() {\n-        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n-        resource.setKey(\"ws-target-resource-basic-save-invalid\");\n+        assertThrows(InvalidEntityException.class, () -> {\n+            ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n+            resource.setKey(\"ws-target-resource-basic-save-invalid\");\n \n-        ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n-        resource.setConnector(connector);\n+            ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n+            resource.setConnector(connector);\n \n-        Provision provision = entityFactory.newEntity(Provision.class);\n-        provision.setAnyType(anyTypeDAO.findUser());\n-        provision.setObjectClass(ObjectClass.ACCOUNT);\n-        provision.setResource(resource);\n-        resource.add(provision);\n+            Provision provision = entityFactory.newEntity(Provision.class);\n+            provision.setAnyType(anyTypeDAO.findUser());\n+            provision.setObjectClass(ObjectClass.ACCOUNT);\n+            provision.setResource(resource);\n+            resource.add(provision);\n \n-        Mapping mapping = entityFactory.newEntity(Mapping.class);\n-        mapping.setProvision(provision);\n-        provision.setMapping(mapping);\n+            Mapping mapping = entityFactory.newEntity(Mapping.class);\n+            mapping.setProvision(provision);\n+            provision.setMapping(mapping);\n \n-        MappingItem item = entityFactory.newEntity(MappingItem.class);\n-        item.setConnObjectKey(true);\n-        item.setIntAttrName(\"fullname\");\n-        mapping.add(item);\n+            MappingItem item = entityFactory.newEntity(MappingItem.class);\n+            item.setConnObjectKey(true);\n+            item.setIntAttrName(\"fullname\");\n+            mapping.add(item);\n \n-        item = entityFactory.newEntity(MappingItem.class);\n-        item.setIntAttrName(\"userId\");\n-        mapping.add(item);\n+            item = entityFactory.newEntity(MappingItem.class);\n+            item.setIntAttrName(\"userId\");\n+            mapping.add(item);\n \n-        resourceDAO.save(resource);\n+            resourceDAO.save(resource);\n+        });\n     }\n \n-    @Test(expected = InvalidEntityException.class)\n+    @Test\n     public void saveInvalidProvision() {\n-        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n-        resource.setKey(\"invalidProvision\");\n-\n-        Provision provision = entityFactory.newEntity(Provision.class);\n-        provision.setAnyType(anyTypeDAO.findUser());\n-        provision.setObjectClass(ObjectClass.ACCOUNT);\n-        provision.setResource(resource);\n-        resource.add(provision);\n-\n-        Mapping mapping = entityFactory.newEntity(Mapping.class);\n-        mapping.setProvision(provision);\n-        provision.setMapping(mapping);\n-\n-        MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n-        connObjectKey.setExtAttrName(\"username\");\n-        connObjectKey.setIntAttrName(\"fullname\");\n-        connObjectKey.setPurpose(MappingPurpose.BOTH);\n-        mapping.setConnObjectKeyItem(connObjectKey);\n-\n-        provision = entityFactory.newEntity(Provision.class);\n-        provision.setAnyType(anyTypeDAO.findGroup());\n-        provision.setObjectClass(ObjectClass.ACCOUNT);\n-        provision.setResource(resource);\n-        resource.add(provision);\n-\n-        ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n-        resource.setConnector(connector);\n-\n-        // save the resource\n-        resourceDAO.save(resource);\n+        assertThrows(InvalidEntityException.class, () -> {\n+            ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n+            resource.setKey(\"invalidProvision\");\n+\n+            Provision provision = entityFactory.newEntity(Provision.class);\n+            provision.setAnyType(anyTypeDAO.findUser());\n+            provision.setObjectClass(ObjectClass.ACCOUNT);\n+            provision.setResource(resource);\n+            resource.add(provision);\n+\n+            Mapping mapping = entityFactory.newEntity(Mapping.class);\n+            mapping.setProvision(provision);\n+            provision.setMapping(mapping);\n+\n+            MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n+            connObjectKey.setExtAttrName(\"username\");\n+            connObjectKey.setIntAttrName(\"fullname\");\n+            connObjectKey.setPurpose(MappingPurpose.BOTH);\n+            mapping.setConnObjectKeyItem(connObjectKey);\n+\n+            provision = entityFactory.newEntity(Provision.class);\n+            provision.setAnyType(anyTypeDAO.findGroup());\n+            provision.setObjectClass(ObjectClass.ACCOUNT);\n+            provision.setResource(resource);\n+            resource.add(provision);\n+\n+            ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n+            resource.setConnector(connector);\n+\n+            // save the resource\n+            resourceDAO.save(resource);\n+        });\n     }\n \n     @Test\n@@ -342,7 +348,7 @@ public void issueSYNCOPE418() {\n \n         try {\n             resourceDAO.save(resource);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (InvalidEntityException e) {\n             assertTrue(e.hasViolation(EntityViolationType.InvalidKey));\n         }"},{"sha":"3b1263d14a720abf612b44de53acae7468bba505","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RoleTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,18 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"ce8776dcd125ee3d5bf80293f421e85fadf10363","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SecurityQuestionTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSecurityQuestionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSecurityQuestionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSecurityQuestionTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,16 +18,16 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.util.List;\n import java.util.UUID;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"2bb8e838c5ee29dc266c07341fd9c959d3651619","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskExecTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import java.util.Calendar;\n import java.util.Date;\n@@ -30,7 +30,7 @@\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"803984efdbd60938abcfd9105e43ad138f9ce736","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.Collections;\n import java.util.HashSet;\n@@ -42,7 +42,7 @@\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"26417c8f843a5f326d12ab3822b579bce597fe22","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":32,"deletions":27,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.Date;\n import java.util.List;\n@@ -35,7 +36,7 @@\n import org.apache.syncope.core.provisioning.api.utils.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -57,49 +58,53 @@ public class UserTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<User> list = userDAO.findAll(1, 100);\n-        assertEquals(\"did not get expected number of users\", 5, list.size());\n+        assertEquals(5, list.size());\n     }\n \n     @Test\n     public void count() {\n-        Integer count = userDAO.count();\n+        int count = userDAO.count();\n         assertNotNull(count);\n-        assertEquals(5, count, 0);\n+        assertEquals(5, count);\n     }\n \n     @Test\n     public void findAllByPageAndSize() {\n         // get first page\n         List<User> list = userDAO.findAll(1, 2);\n-        assertEquals(\"did not get expected number of users\", 2, list.size());\n+        assertEquals(2, list.size());\n \n         // get second page\n         list = userDAO.findAll(2, 2);\n-        assertEquals(\"did not get expected number of users\", 2, list.size());\n+        assertEquals(2, list.size());\n \n         // get second page with uncomplete set\n         list = userDAO.findAll(2, 3);\n-        assertEquals(\"did not get expected number of users\", 2, list.size());\n+        assertEquals(2, list.size());\n \n         // get unexistent page\n         list = userDAO.findAll(3, 2);\n-        assertEquals(\"did not get expected number of users\", 1, list.size());\n+        assertEquals(1, list.size());\n     }\n \n     @Test\n     public void findByDerAttributeValue() {\n         final List<User> list = userDAO.findByDerAttrValue(\"cn\", \"Vivaldi, Antonio\");\n-        assertEquals(\"did not get expected number of users\", 1, list.size());\n+        assertEquals(1, list.size());\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void findByInvalidDerAttrValue() {\n-        userDAO.findByDerAttrValue(\"cn\", \"Antonio, Maria, Rossi\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            userDAO.findByDerAttrValue(\"cn\", \"Antonio, Maria, Rossi\");\n+        });\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void findByInvalidDerAttrExpression() {\n-        userDAO.findByDerAttrValue(\"noschema\", \"Antonio, Maria\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            userDAO.findByDerAttrValue(\"noschema\", \"Antonio, Maria\");\n+        });\n     }\n \n     @Test\n@@ -108,7 +113,7 @@ public void findByAttributeValue() {\n         fullnameValue.setStringValue(\"Gioacchino Rossini\");\n \n         final List<User> list = userDAO.findByPlainAttrValue(\"fullname\", fullnameValue);\n-        assertEquals(\"did not get expected number of users\", 1, list.size());\n+        assertEquals(1, list.size());\n     }\n \n     @Test\n@@ -117,23 +122,23 @@ public void findByAttributeBooleanValue() {\n         coolValue.setBooleanValue(true);\n \n         final List<User> list = userDAO.findByPlainAttrValue(\"cool\", coolValue);\n-        assertEquals(\"did not get expected number of users\", 1, list.size());\n+        assertEquals(1, list.size());\n     }\n \n     @Test\n     public void findByKey() {\n         User user = userDAO.find(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n-        assertNotNull(\"did not find expected user\", user);\n+        assertNotNull(user);\n     }\n \n     @Test\n     public void findByUsername() {\n         User user = userDAO.findByUsername(\"rossini\");\n-        assertNotNull(\"did not find expected user\", user);\n+        assertNotNull(user);\n         user = userDAO.findByUsername(\"vivaldi\");\n-        assertNotNull(\"did not find expected user\", user);\n+        assertNotNull(user);\n         user = userDAO.findByUsername(\"user6\");\n-        assertNull(\"found user but did not expect it\", user);\n+        assertNull(user);\n     }\n \n     @Test\n@@ -148,7 +153,7 @@ public void save() {\n \n         try {\n             userDAO.save(user);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (InvalidEntityException e) {\n             assertNotNull(e);\n         }\n@@ -159,15 +164,15 @@ public void save() {\n \n         try {\n             userDAO.save(user);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (InvalidEntityException e) {\n             assertNotNull(e);\n         }\n \n         user.setUsername(\"username\");\n \n         User actual = userDAO.save(user);\n-        assertNotNull(\"expected save to work\", actual);\n+        assertNotNull(actual);\n         assertEquals(1, actual.getPasswordHistory().size());\n         assertNotNull(userDAO.findLastChange(actual.getKey()));\n         assertEquals(actual.getLastChangeDate(), userDAO.findLastChange(actual.getKey()));\n@@ -180,7 +185,7 @@ public void delete() {\n         userDAO.delete(user.getKey());\n \n         User actual = userDAO.find(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\");\n-        assertNull(\"delete did not work\", actual);\n+        assertNull(actual);\n     }\n \n     @Test"},{"sha":"5283b76ad4fe31b0b181ae6cc6b2b7a93c70b864","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirSchemaTest.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n@@ -34,7 +34,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -56,7 +56,7 @@ public void findAll() {\n     @Test\n     public void findByName() {\n         VirSchema attributeSchema = virSchemaDAO.find(\"virtualdata\");\n-        assertNotNull(\"did not find expected virtual attribute schema\", attributeSchema);\n+        assertNotNull(attributeSchema);\n     }\n \n     @Test\n@@ -74,7 +74,7 @@ public void save() {\n         virSchemaDAO.save(virSchema);\n \n         VirSchema actual = virSchemaDAO.find(\"virtual\");\n-        assertNotNull(\"expected save to work\", actual);\n+        assertNotNull(actual);\n         assertTrue(actual.isReadonly());\n         assertEquals(\"EXT_ATTR\", actual.getExtAttrName());\n     }\n@@ -86,7 +86,7 @@ public void delete() {\n         virSchemaDAO.delete(virtualdata.getKey());\n \n         VirSchema actual = virSchemaDAO.find(\"virtualdata\");\n-        assertNull(\"delete did not work\", actual);\n+        assertNull(actual);\n \n         // ------------- //\n         VirSchema rvirtualdata = virSchemaDAO.find(\"rvirtualdata\");\n@@ -95,7 +95,7 @@ public void delete() {\n         virSchemaDAO.delete(rvirtualdata.getKey());\n \n         actual = virSchemaDAO.find(\"rvirtualdata\");\n-        assertNull(\"delete did not work\", actual);\n+        assertNull(actual);\n     }\n \n     @Test\n@@ -105,7 +105,7 @@ public void issueSYNCOPE418() {\n \n         try {\n             virSchemaDAO.save(schema);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (InvalidEntityException e) {\n             assertTrue(e.hasViolation(EntityViolationType.InvalidKey));\n         }"},{"sha":"276eef57256d7b27f4af8a0650e4e18d440c0048","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AccessTokenTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAccessTokenTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAccessTokenTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAccessTokenTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,16 +18,16 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.util.Date;\n import java.util.UUID;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"ce1a1a7242b74bf26aaeede86e41a0fa92cced1a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -37,7 +37,7 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"3b9b69d3e64655dc3a16aa0c859e5a8823d08027","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeClassTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,17 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"95a1ad650c401f9bbfa0f50ec8e86900a74141f7","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,17 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"695bb87a94b659a958bcae1e4d11c96a74058887","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ConfTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,16 +18,16 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrValue;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"fd20122293f3eed553ebed4bc02db536e11b4630","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ConnInstanceHistoryConfTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceHistoryConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceHistoryConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceHistoryConfTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.Date;\n import java.util.List;\n@@ -31,7 +31,7 @@\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ConnInstanceHistoryConf;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"26ac5c3449124fc90061268dc8d5bb91bc1210ce","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ConnInstanceTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n import java.util.UUID;\n@@ -32,7 +32,7 @@\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"f1bb119f9120ea8ac07edc3e672db57b4cf198ed","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/DynRealmTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -35,7 +35,7 @@\n import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -70,7 +70,7 @@ public void misc() {\n         // invalid key (starts with /)\n         try {\n             dynRealmDAO.save(dynRealm);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             assertNotNull(e);\n         }"},{"sha":"9f1f28febab70b715667359aa2920d6b16905d56","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/GroupTest.java","status":"modified","additions":22,"deletions":19,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -57,7 +58,7 @@\n import org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -91,30 +92,32 @@ public class GroupTest extends AbstractTest {\n     @Autowired\n     private AnyTypeClassDAO anyTypeClassDAO;\n \n-    @Test(expected = InvalidEntityException.class)\n+    @Test\n     public void saveWithTwoOwners() {\n-        Group root = groupDAO.findByName(\"root\");\n-        assertNotNull(\"did not find expected group\", root);\n+        assertThrows(InvalidEntityException.class, () -> {\n+            Group root = groupDAO.findByName(\"root\");\n+            assertNotNull(root);\n \n-        User user = userDAO.findByUsername(\"rossini\");\n-        assertNotNull(\"did not find expected user\", user);\n+            User user = userDAO.findByUsername(\"rossini\");\n+            assertNotNull(user);\n \n-        Group group = entityFactory.newEntity(Group.class);\n-        group.setRealm(realmDAO.getRoot());\n-        group.setName(\"error\");\n-        group.setUserOwner(user);\n-        group.setGroupOwner(root);\n+            Group group = entityFactory.newEntity(Group.class);\n+            group.setRealm(realmDAO.getRoot());\n+            group.setName(\"error\");\n+            group.setUserOwner(user);\n+            group.setGroupOwner(root);\n \n-        groupDAO.save(group);\n+            groupDAO.save(group);\n+        });\n     }\n \n     @Test\n     public void findByOwner() {\n         Group group = groupDAO.find(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\");\n-        assertNotNull(\"did not find expected group\", group);\n+        assertNotNull(group);\n \n         User user = userDAO.find(\"823074dc-d280-436d-a7dd-07399fae48ec\");\n-        assertNotNull(\"did not find expected user\", user);\n+        assertNotNull(user);\n \n         assertEquals(user, group.getUserOwner());\n "},{"sha":"8eb98aff104f35e33f39cf485401dec4ade31e0d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainAttrTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"efffb8d193bfb3c08a5a0a2e2797a248dd1a90ea","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.HashSet;\n import java.util.List;\n@@ -47,9 +47,9 @@\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.GrantedAuthority;\n@@ -77,7 +77,7 @@ public class PlainSchemaTest extends AbstractTest {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setAuthContext() {\n         List<GrantedAuthority> authorities = StandardEntitlement.values().stream().\n                 map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n@@ -90,7 +90,7 @@ public static void setAuthContext() {\n         SecurityContextHolder.getContext().setAuthentication(auth);\n     }\n \n-    @AfterClass\n+    @AfterAll\n     public static void unsetAuthContext() {\n         SecurityContextHolder.getContext().setAuthentication(null);\n     }\n@@ -106,7 +106,7 @@ public void checkIdUniqueness() {\n \n         try {\n             plainSchemaDAO.flush();\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             assertTrue(e instanceof EntityExistsException);\n         }\n@@ -116,15 +116,15 @@ public void checkIdUniqueness() {\n     public void deleteFullname() {\n         // fullname is mapped as ConnObjectKey for ws-target-resource-2, need to swap it otherwise validation errors \n         // will be raised\n-        for (MappingItem item : resourceDAO.find(\"ws-target-resource-2\").\n-                getProvision(anyTypeDAO.findUser()).get().getMapping().getItems()) {\n-\n-            if (\"fullname\".equals(item.getIntAttrName())) {\n-                item.setConnObjectKey(false);\n-            } else if (\"surname\".equals(item.getIntAttrName())) {\n-                item.setConnObjectKey(true);\n-            }\n-        }\n+        resourceDAO.find(\"ws-target-resource-2\").\n+                getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().\n+                forEach(item -> {\n+                    if (\"fullname\".equals(item.getIntAttrName())) {\n+                        item.setConnObjectKey(false);\n+                    } else if (\"surname\".equals(item.getIntAttrName())) {\n+                        item.setConnObjectKey(true);\n+                    }\n+                });\n \n         // search for user schema fullname\n         PlainSchema schema = plainSchemaDAO.find(\"fullname\");"},{"sha":"971f9a2a73d086e010743f717109b7515840080d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RealmTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -29,7 +29,7 @@\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"96803798f0ad675afc47d2a81aecdf28ca074e11","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ReportTest.java","status":"modified","additions":18,"deletions":15,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n \n import java.util.Date;\n import javax.persistence.EntityExistsException;\n@@ -32,7 +33,7 @@\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -58,20 +59,22 @@ public void find() {\n         assertEquals(1, report.getExecs().size());\n     }\n \n-    @Test(expected = EntityExistsException.class)\n+    @Test\n     public void saveWithExistingName() {\n-        Report report = reportDAO.find(\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\");\n-        assertNotNull(report);\n+        assertThrows(EntityExistsException.class, () -> {\n+            Report report = reportDAO.find(\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\");\n+            assertNotNull(report);\n \n-        String name = report.getName();\n+            String name = report.getName();\n \n-        report = entityFactory.newEntity(Report.class);\n-        report.setName(name);\n-        report.setActive(true);\n-        report.setTemplate(reportTemplateDAO.find(\"sample\"));\n+            report = entityFactory.newEntity(Report.class);\n+            report.setName(name);\n+            report.setActive(true);\n+            report.setTemplate(reportTemplateDAO.find(\"sample\"));\n \n-        reportDAO.save(report);\n-        reportDAO.flush();\n+            reportDAO.save(report);\n+            reportDAO.flush();\n+        });\n     }\n \n     @Test"},{"sha":"d5cad6d24531a4d9151ff93e4a9934dfac38faf4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceHistoryConfTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceHistoryConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceHistoryConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceHistoryConfTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.Date;\n import java.util.List;\n@@ -31,7 +31,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"46116badf463680c8d946744a373dbdfa56340e9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.Collections;\n import java.util.List;\n@@ -51,7 +51,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnit;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -89,7 +89,7 @@ public void createWithPasswordPolicy() {\n         resource.setPasswordPolicy(policy);\n \n         ConnInstance connector = connInstanceDAO.find(\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\");\n-        assertNotNull(\"connector not found\", connector);\n+        assertNotNull(connector);\n         resource.setConnector(connector);\n \n         ExternalResource actual = resourceDAO.save(resource);\n@@ -112,7 +112,7 @@ public void save() {\n \n         // specify the connector\n         ConnInstance connector = connInstanceDAO.find(\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\");\n-        assertNotNull(\"connector not found\", connector);\n+        assertNotNull(connector);\n \n         resource.setConnector(connector);\n \n@@ -163,7 +163,7 @@ public void save() {\n \n         // assign the new resource to an user\n         User user = userDAO.findByUsername(\"rossini\");\n-        assertNotNull(\"user not found\", user);\n+        assertNotNull(user);\n \n         user.add(actual);\n \n@@ -197,7 +197,7 @@ public void save() {\n     @Test\n     public void delete() {\n         ExternalResource resource = resourceDAO.find(\"resource-testdb\");\n-        assertNotNull(\"find to delete did not work\", resource);\n+        assertNotNull(resource);\n \n         // -------------------------------------\n         // Get originally associated connector\n@@ -228,7 +228,7 @@ public void delete() {\n \n         // resource must be removed\n         ExternalResource actual = resourceDAO.find(\"resource-testdb\");\n-        assertNull(\"delete did not work\", actual);\n+        assertNull(actual);\n \n         // resource must be not referenced any more from users\n         userKeys.stream()."},{"sha":"899dd44eb2d7754ab448a4cbe32b395b4c3597b2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RoleTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -43,7 +43,7 @@\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.persistence.jpa.dao.JPARoleDAO;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"3d49e966a382cfa759b255613728d0d148cd89e1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/SecurityQuestionTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FSecurityQuestionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FSecurityQuestionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FSecurityQuestionTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,13 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"5d14e9d00709a1b87d79685bcba5c2bd1322c5e1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.Collections;\n import java.util.Date;\n@@ -50,7 +50,7 @@\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;"},{"sha":"eddafed7a2687a52b0ac78cd5f88cf96bf5bef11","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.Date;\n import java.util.List;\n@@ -45,7 +45,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -172,7 +172,7 @@ public void membershipWithAttrs() {\n \n         try {\n             userDAO.save(user);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (InvalidEntityException e) {\n             assertNotNull(e);\n         }\n@@ -235,18 +235,18 @@ public void issueSYNCOPE800() {\n \n         // add derived attributes to user\n         User owner = userDAO.findByUsername(\"vivaldi\");\n-        assertNotNull(\"did not get expected user\", owner);\n+        assertNotNull(owner);\n \n         String firstname = owner.getPlainAttr(\"firstname\").get().getValuesAsStrings().iterator().next();\n         assertNotNull(firstname);\n \n         // search by ksuffix derived attribute\n         List<User> list = userDAO.findByDerAttrValue(\"ksuffix\", firstname + \"k\");\n-        assertEquals(\"did not get expected number of users \", 1, list.size());\n+        assertEquals(1, list.size());\n \n         // search by kprefix derived attribute\n         list = userDAO.findByDerAttrValue(\"kprefix\", \"k\" + firstname);\n-        assertEquals(\"did not get expected number of users \", 1, list.size());\n+        assertEquals(1, list.size());\n     }\n \n     @Test"},{"sha":"7522f4561cf1f2ae7a55b1ecdcc56a7071513970","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/VirSchemaTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -30,7 +30,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -62,7 +62,7 @@ public void deal() {\n         virSchemaDAO.flush();\n \n         virSchema = virSchemaDAO.find(\"vSchema\");\n-        assertNotNull(\"expected save to work\", virSchema);\n+        assertNotNull(virSchema);\n         assertTrue(virSchema.isReadonly());\n         assertEquals(\"EXT_ATTR\", virSchema.getExtAttrName());\n "},{"sha":"a0aa326d71f80c68ec774a7fcae5d3d4941ff5f4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/XMLContentExporterTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.jpa.outer;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.nio.charset.Charset;\n import java.util.List;\n@@ -29,7 +29,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"f4510c463091d4390c55b8a2329a59677513a715","filename":"core/provisioning-java/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fpom.xml?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -114,8 +114,8 @@ under the License.\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>"},{"sha":"c8147eeac0cf53904eda87ab80f75ddb233b45ef","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/AbstractTest.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,9 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import org.junit.runner.RunWith;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\n+@SpringJUnitConfig(locations = {\n     \"classpath:persistenceTest.xml\",\n     \"classpath:provisioningContext.xml\",\n     \"classpath:workflowContext.xml\","},{"sha":"49088202976f2c1d5054f874bbdf44421e66dc20","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ConnectorManagerTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,14 +18,14 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.test.util.ReflectionTestUtils;\n import org.springframework.transaction.annotation.Transactional;\n@@ -41,7 +41,7 @@ public class ConnectorManagerTest extends AbstractTest {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n-    @Before\n+    @BeforeEach\n     public void before() {\n         connManager = new ConnectorManager();\n         ReflectionTestUtils.setField(connManager, \"connIdBundleManager\", connIdBundleManager);"},{"sha":"472794a2ba651112afdd3f4202c3f99784825d24","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DerAttrTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,17 +18,17 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -50,7 +50,7 @@ public void derAttrFromSpecialAttrs() {\n         assertEquals(\"username + ' - ' + creationDate + '[' + failedLogins + ']'\", info.getExpression());\n \n         User user = userDAO.findByUsername(\"vivaldi\");\n-        assertNotNull(\"did not get expected user\", user);\n+        assertNotNull(user);\n \n         String value = derAttrHandler.getValue(user, info);\n         assertNotNull(value);"},{"sha":"f84d81641a9a40af2a94e5c51773e6ee7b707db5","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/IntAttrNameParserTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParserTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -153,7 +153,7 @@ public void membership() {\n     public void invalid() {\n         try {\n             intAttrNameParser.parse(\"memberships.cn\", AnyTypeKind.USER);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (IllegalArgumentException e) {\n             assertNotNull(e);\n         }"},{"sha":"ea1f55108d71e004d3d8e18793f6874e65c91c07","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MailTemplateTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMailTemplateTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMailTemplateTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMailTemplateTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.io.IOException;\n import java.io.StringWriter;\n@@ -37,7 +37,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"ea475399adeb1bb1565c471d503a27f41bae9e50","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MappingTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import org.apache.commons.jexl3.JexlContext;\n import org.apache.commons.jexl3.MapContext;\n@@ -34,7 +34,7 @@\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.identityconnectors.framework.common.objects.Name;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n "},{"sha":"367709432594ac35f0eee886667e497a358532f6","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ResourceDataBinderTest.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import java.util.HashSet;\n import java.util.List;\n@@ -43,9 +43,9 @@\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.GrantedAuthority;\n@@ -67,7 +67,7 @@ public class ResourceDataBinderTest extends AbstractTest {\n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setAuthContext() {\n         List<GrantedAuthority> authorities = StandardEntitlement.values().stream().\n                 map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n@@ -80,7 +80,7 @@ public static void setAuthContext() {\n         SecurityContextHolder.getContext().setAuthentication(auth);\n     }\n \n-    @AfterClass\n+    @AfterAll\n     public static void unsetAuthContext() {\n         SecurityContextHolder.getContext().setAuthentication(null);\n     }"},{"sha":"addb5d3a0fcd4f249293ad8cba7bdcac7704b4e0","filename":"core/spring/pom.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fspring%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fspring%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fpom.xml?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -91,8 +91,8 @@ under the License.\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>\n@@ -109,14 +109,14 @@ under the License.\n         <directory>src/main/resources</directory>\n         <filtering>true</filtering>\n         <includes>\n-            <include>**/security.properties</include>\n+          <include>**/security.properties</include>\n         </includes>\n       </resource>\n       <resource>\n         <directory>src/main/resources</directory>\n         <filtering>false</filtering>\n         <excludes>\n-            <exclude>**/security.properties</exclude>\n+          <exclude>**/security.properties</exclude>\n         </excludes>\n       </resource>\n     </resources>"},{"sha":"0d1b80104e14ab159001a4ded13154b6804c962d","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/EncryptorTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptorTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -20,13 +20,13 @@\n \n import org.apache.syncope.core.spring.security.Encryptor;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n /**\n  * Test class to test all encryption algorithms."},{"sha":"2edab6d184d91f140a3500ba258c8557ef813a6f","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/PasswordGeneratorTest.java","status":"modified","additions":19,"deletions":16,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,9 +18,10 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.ArrayList;\n import java.util.Collections;\n@@ -29,7 +30,7 @@\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.core.provisioning.api.utils.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.provisioning.api.utils.policy.PolicyPattern;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class PasswordGeneratorTest {\n \n@@ -107,18 +108,20 @@ public void passwordWithNonAlpha() throws InvalidPasswordRuleConf {\n         assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n \n-    @Test(expected = InvalidPasswordRuleConf.class)\n-    public void incopatiblePolicies() throws InvalidPasswordRuleConf {\n-        DefaultPasswordRuleConf pwdRuleConf = createBaseDefaultPasswordRuleConf();\n-        pwdRuleConf.setMinLength(12);\n-\n-        DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n-        pwdRuleConf.setMaxLength(10);\n-\n-        List<PasswordRuleConf> pwdRuleConfs = new ArrayList<>();\n-        pwdRuleConfs.add(pwdRuleConf);\n-        pwdRuleConfs.add(pwdRuleConf2);\n-        passwordGenerator.generate(pwdRuleConfs);\n+    @Test\n+    public void incopatiblePolicies() {\n+        assertThrows(InvalidPasswordRuleConf.class, () -> {\n+            DefaultPasswordRuleConf pwdRuleConf = createBaseDefaultPasswordRuleConf();\n+            pwdRuleConf.setMinLength(12);\n+\n+            DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n+            pwdRuleConf.setMaxLength(10);\n+\n+            List<PasswordRuleConf> pwdRuleConfs = new ArrayList<>();\n+            pwdRuleConfs.add(pwdRuleConf);\n+            pwdRuleConfs.add(pwdRuleConf2);\n+            passwordGenerator.generate(pwdRuleConfs);\n+        });\n     }\n \n     @Test"},{"sha":"3ceedf0db564ae6474d7288b2f14608d27209ead","filename":"fit/console-reference/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fconsole-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fconsole-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fpom.xml?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -100,8 +100,8 @@ under the License.\n     \n     <!-- TEST -->\n     <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n       <scope>test</scope>\n     </dependency>\n     <dependency>"},{"sha":"aebc662743024e6c6a6ec5674a7eef0d7d24ae64","filename":"fit/core-reference/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -172,8 +172,8 @@ under the License.\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n       <scope>test</scope>\n     </dependency>\n     <dependency>"},{"sha":"98a80a9e7d93e45b020ee43996db428ffab40b8a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.fit;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.InputStream;\n import java.net.URI;\n@@ -99,14 +99,11 @@\n import org.apache.syncope.common.rest.api.service.WorkflowService;\n import org.apache.syncope.fit.core.UserITCase;\n import org.identityconnectors.common.security.Encryptor;\n-import org.junit.BeforeClass;\n+import org.junit.jupiter.api.BeforeAll;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.junit.FixMethodOrder;\n-import org.junit.runners.MethodSorters;\n import org.springframework.jdbc.core.JdbcTemplate;\n \n-@FixMethodOrder(MethodSorters.JVM)\n public abstract class AbstractITCase {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractITCase.class);\n@@ -243,7 +240,7 @@ public abstract class AbstractITCase {\n \n     protected static SAML2IdPService saml2IdPService;\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void securitySetup() {\n         InputStream propStream = null;\n         try {\n@@ -267,7 +264,7 @@ public static void securitySetup() {\n         assertNotNull(JWT_ISSUER);\n     }\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void restSetup() {\n         clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS);\n "},{"sha":"431e119161bfc7729b9579da00c5ba9bbb311efa","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/cli/CLIITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.fit.cli;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.File;\n import java.io.IOException;\n@@ -43,16 +43,16 @@\n import org.apache.syncope.client.cli.commands.role.RoleCommand;\n import org.apache.syncope.client.cli.commands.user.UserCommand;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n \n public class CLIITCase extends AbstractITCase {\n \n     private static final String SCRIPT_FILENAME = \"syncopeadm\";\n \n     private static ProcessBuilder PROCESS_BUILDER;\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void install() {\n         Properties props = new Properties();\n         InputStream propStream = null;"},{"sha":"b7574e1bbaae7be3aac3d3c8c1cced208c6e496b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AbstractConsoleITCase.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -31,13 +31,10 @@\n import org.apache.wicket.util.tester.FormTester;\n import org.apache.wicket.util.tester.WicketTester;\n import org.apache.wicket.util.visit.IVisit;\n-import org.junit.BeforeClass;\n-import org.junit.FixMethodOrder;\n-import org.junit.runners.MethodSorters;\n+import org.junit.jupiter.api.BeforeAll;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-@FixMethodOrder(MethodSorters.JVM)\n public abstract class AbstractConsoleITCase {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractConsoleITCase.class);\n@@ -56,7 +53,7 @@ public abstract class AbstractConsoleITCase {\n \n     protected static SyncopeService SYNCOPE_SERVICE;\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setUp() {\n         TESTER = ConsoleSetup.TESTER;\n "},{"sha":"bf8ebffb8fa7b9a70c9810ca413207add62dcfd3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AbstractTypesITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractTypesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractTypesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractTypesITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -22,7 +22,7 @@\n import org.apache.syncope.client.console.pages.Types;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.AjaxFallbackDataTable;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Before;\n+import org.junit.jupiter.api.BeforeEach;\n \n public abstract class AbstractTypesITCase extends AbstractConsoleITCase {\n \n@@ -35,7 +35,7 @@ public abstract class AbstractTypesITCase extends AbstractConsoleITCase {\n     protected static final String DATATABLE_PATH =\n             \"body:content:tabbedPanel:panel:container:content:searchContainer:resultTable\";\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n     }"},{"sha":"31d05aa6b69afeda10405153a3b7af53b906a6c4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AjaxBrowseITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxBrowseITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxBrowseITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxBrowseITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.client.console.pages.Workflow;\n import org.apache.syncope.client.console.topology.Topology;\n import org.apache.syncope.fit.FlowableDetector;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n // Please, keep the class name as is in order to respect the execution order. It seems that from wicket 7.5.0 the \n // session creted never expire and the unsuccessfulLogin test fail"},{"sha":"e33acb330f4959fa631dcdfd1d71d60d4c9ba09b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AjaxPalettePanelITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxPalettePanelITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxPalettePanelITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxPalettePanelITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import java.util.Arrays;\n import java.util.Collection;\n@@ -28,7 +28,7 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class AjaxPalettePanelITCase extends AbstractConsoleITCase {\n "},{"sha":"04547e461490299ed0d1c86f721991a3b636ba59","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AjaxTextFieldITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxTextFieldITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxTextFieldITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxTextFieldITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,14 +18,14 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.wicket.util.string.Strings;\n import org.apache.wicket.util.tester.FormTester;\n import org.apache.wicket.validation.validator.StringValidator;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n "},{"sha":"a40cb6d28a79f9599f7d570c28a40be457dc4181","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AnyObjectsITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyObjectsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyObjectsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyObjectsITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,24 +18,24 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import org.apache.wicket.Component;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.wicket.markup.html.form.IndicatingOnConfirmAjaxLink;\n import org.apache.wicket.markup.html.form.TextField;\n-import org.junit.Before;\n+import org.junit.jupiter.api.BeforeEach;\n \n public class AnyObjectsITCase extends AbstractConsoleITCase {\n \n     private static final String TAB_PANEL = \"body:content:body:container:content:tabbedPanel:panel:searchResult:\";\n \n     private static final String CONTAINER = TAB_PANEL + \"container:content:\";\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n     }"},{"sha":"1885bf3e7bfabe7f58f4ac42a92e98cbec23b827","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AnyTypeClassesITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyTypeClassesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyTypeClassesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyTypeClassesITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -29,7 +29,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.wicket.Component;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class AnyTypeClassesITCase extends AbstractTypesITCase {\n "},{"sha":"94f4695b4f482eeef19aff37eb3fcab0bc26eff9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AnyTypesITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyTypesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyTypesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyTypesITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -30,7 +30,7 @@\n import org.apache.wicket.Component;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class AnyTypesITCase extends AbstractTypesITCase {\n "},{"sha":"cd20170eb2da8452f27381024278c00e757bc20f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/BulkActionITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBulkActionITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBulkActionITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBulkActionITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.status.Status;\n@@ -28,16 +28,16 @@\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n public class BulkActionITCase extends AbstractConsoleITCase {\n \n     private static final String TAB_PANEL = \"body:content:body:container:content:tabbedPanel:panel:searchResult:\";\n \n     private static final String CONTAINER = TAB_PANEL + \"container:content:\";\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n     }"},{"sha":"21cdfb66d04abb08e0c9ba8a0e0ee7798f74fc3c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/DisplayAttributesITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FDisplayAttributesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FDisplayAttributesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FDisplayAttributesITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -21,12 +21,12 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.syncope.client.console.pages.Realms;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n public class DisplayAttributesITCase extends AbstractConsoleITCase {\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n         TESTER.clickLink(\"body:realmsLI:realms\");"},{"sha":"daac35dde10ecdfac1d94adebf10505dcb3ce19d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/GroupsITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FGroupsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FGroupsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FGroupsITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,26 +18,26 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.wicket.Component;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.wicket.markup.html.form.IndicatingOnConfirmAjaxLink;\n-import org.junit.Before;\n+import org.junit.jupiter.api.BeforeEach;\n \n public class GroupsITCase extends AbstractConsoleITCase {\n \n     private final static String TAB_PANEL = \"body:content:body:container:content:tabbedPanel:panel:searchResult:\";\n \n     private final static String CONTAINER = TAB_PANEL + \"container:content:\";\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n     }"},{"sha":"9d8beaf1d67e77c9b630c0209686fb9d19a0a65f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/LogsITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import java.lang.reflect.InvocationTargetException;\n import org.apache.syncope.client.console.pages.Logs;\n@@ -30,14 +30,14 @@\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.util.visit.IVisit;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n public class LogsITCase extends AbstractConsoleITCase {\n \n     private static final String CONTAINER_PATH = \"body:content:tabbedPanel:panel:loggerContainer\";\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n         TESTER.clickLink(\"body:configurationLI:configurationUL:logsLI:logs\");"},{"sha":"9b9c3e09eaf980d1058639fcd94593ef4f1bcd4b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/NotificationsITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FNotificationsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FNotificationsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FNotificationsITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,21 +18,21 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.Notifications;\n import org.apache.wicket.Component;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n public class NotificationsITCase extends AbstractConsoleITCase {\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n         TESTER.clickLink(\"body:configurationLI:configurationUL:notificationsLI:notifications\");"},{"sha":"a57f004dc9ba6ba2a3e2ab400971f9bc9a750603","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/ParametersITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FParametersITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FParametersITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FParametersITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,20 +18,20 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.Parameters;\n import org.apache.wicket.Component;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n public class ParametersITCase extends AbstractConsoleITCase {\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n         TESTER.clickLink(\"body:configurationLI:configurationUL:parametersLI:parameters\");\n@@ -73,7 +73,7 @@ public void updateParameter() {\n \n         Component result = findComponentByProp(SCHEMA, \"body:content:parametersPanel\", \"notification.maxRetries\");\n         assertNotNull(result);\n-        \n+\n         TESTER.executeAjaxEvent(result.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:parametersPanel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n@@ -112,7 +112,7 @@ public void deleteParameter() {\n \n         Component result = findComponentByProp(SCHEMA, \"body:content:parametersPanel\", \"deleteParam\");\n         assertNotNull(result);\n-        \n+\n         TESTER.executeAjaxEvent(result.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:parametersPanel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:1:action:action\");"},{"sha":"f3be7932b10e5783548685438119983f36d0e089","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/PoliciesITCase.java","status":"modified","additions":39,"deletions":40,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -30,13 +30,12 @@\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n public class PoliciesITCase extends AbstractConsoleITCase {\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n         TESTER.clickLink(\"body:configurationLI:configurationUL:policiesLI:policies\");\n@@ -72,7 +71,7 @@ private void createAccountPolicy(final String description) {\n         Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n@@ -94,7 +93,7 @@ private void createAccountPolicy(final String description) {\n \n         component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n     }\n \n     private void createPasswordPolicy(final String description) {\n@@ -122,7 +121,7 @@ private void createPasswordPolicy(final String description) {\n         Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n@@ -140,7 +139,7 @@ private void createPasswordPolicy(final String description) {\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:buttons:0:button\",\n                 Constants.ON_CLICK);\n \n-        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n     }\n \n@@ -168,7 +167,7 @@ private void createPullPolicy(final String description) {\n         Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n@@ -182,7 +181,7 @@ private void createPullPolicy(final String description) {\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:buttons:0:button\",\n                 Constants.ON_CLICK);\n \n-        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n     }\n \n@@ -191,7 +190,7 @@ private void deleteAccountPolicy(final String description) {\n         Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.getRequest().addParameter(\"confirm\", \"true\");\n         TESTER.clickLink(TESTER.getComponentFromLastRenderedPage(\n@@ -206,7 +205,7 @@ private void deleteAccountPolicy(final String description) {\n         TESTER.assertInfoMessages(\"Operation executed successfully\");\n         TESTER.cleanupFeedbackMessages();\n \n-        Assert.assertNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+        assertNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n     }\n \n@@ -215,7 +214,7 @@ private void deletePasswordPolicy(final String description) {\n         Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.getRequest().addParameter(\"confirm\", \"true\");\n         TESTER.clickLink(TESTER.getComponentFromLastRenderedPage(\n@@ -230,7 +229,7 @@ private void deletePasswordPolicy(final String description) {\n         TESTER.assertInfoMessages(\"Operation executed successfully\");\n         TESTER.cleanupFeedbackMessages();\n \n-        Assert.assertNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+        assertNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n     }\n \n@@ -239,7 +238,7 @@ private void deletePullPolicy(final String description) {\n         Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.getRequest().addParameter(\"confirm\", \"true\");\n         TESTER.clickLink(TESTER.getComponentFromLastRenderedPage(\n@@ -254,13 +253,13 @@ private void deletePullPolicy(final String description) {\n         TESTER.assertInfoMessages(\"Operation executed successfully\");\n         TESTER.cleanupFeedbackMessages();\n \n-        Assert.assertNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+        assertNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n     }\n \n     @Test\n     public void read() {\n-        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", \"an account policy\"));\n     }\n \n@@ -279,7 +278,7 @@ public void cloneDeleteAccountPolicy() {\n         Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:1:action:action\");\n@@ -301,12 +300,12 @@ public void cloneDeleteAccountPolicy() {\n \n         closeCallBack(modal);\n \n-        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n \n         deleteAccountPolicy(description);\n \n-        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description + \"2\"));\n \n         deleteAccountPolicy(description + \"2\");\n@@ -327,7 +326,7 @@ public void cloneDeletePasswordPolicy() {\n         Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:1:action:action\");\n@@ -349,12 +348,12 @@ public void cloneDeletePasswordPolicy() {\n \n         closeCallBack(modal);\n \n-        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n \n         deletePasswordPolicy(description);\n \n-        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description + \"2\"));\n \n         deletePasswordPolicy(description + \"2\");\n@@ -375,7 +374,7 @@ public void cloneDeletePullPolicy() {\n         Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:1:action:action\");\n@@ -397,12 +396,12 @@ public void cloneDeletePullPolicy() {\n \n         closeCallBack(modal);\n \n-        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n \n         deletePullPolicy(description);\n \n-        Assert.assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description + \"2\"));\n \n         deletePullPolicy(description + \"2\");\n@@ -416,7 +415,7 @@ public void createUpdateDeleteAccountPolicy() {\n         Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n@@ -441,7 +440,7 @@ public void createUpdateDeleteAccountPolicy() {\n         component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n@@ -463,7 +462,7 @@ private void composeDefaultAccountPolicy(final String policyDescription, final S\n         Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", policyDescription);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:2:action:action\");\n@@ -497,7 +496,7 @@ private void composeDefaultAccountPolicy(final String policyDescription, final S\n                 + \"content:container:content:searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\",\n                 ruleName);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n \n         TESTER.clickLink(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:4:outer:form:content:container:content:exit\");\n@@ -521,7 +520,7 @@ public void createUpdateDeletePasswordPolicy() {\n         Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n@@ -546,7 +545,7 @@ public void createUpdateDeletePasswordPolicy() {\n         component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n@@ -571,7 +570,7 @@ public void createComposeDeletePasswordPolicy() {\n         Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:2:action:action\");\n@@ -604,7 +603,7 @@ public void createComposeDeletePasswordPolicy() {\n                 + \"content:container:content:searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\",\n                 \"myrule\");\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n \n         TESTER.clickLink(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:4:outer:form:content:container:content:exit\");\n@@ -625,7 +624,7 @@ public void createUpdateDeletePullPolicy() {\n         Component modal = TESTER.getComponentFromLastRenderedPage(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\");\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n@@ -647,7 +646,7 @@ public void createUpdateDeletePullPolicy() {\n         component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description + \"2\");\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n@@ -672,7 +671,7 @@ public void createComposeDeletePullPolicy() {\n         Component component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:2:action:action\");\n@@ -703,7 +702,7 @@ public void createComposeDeletePullPolicy() {\n         component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n \n-        Assert.assertNotNull(component);\n+        assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:2:action:action\");"},{"sha":"a5ba6a03069037d276955a81ae327fce13819cb0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/RealmsITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,20 +18,20 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.Realms;\n import org.apache.syncope.client.console.panels.TogglePanel;\n import org.apache.wicket.Component;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n public class RealmsITCase extends AbstractConsoleITCase {\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n         TESTER.clickLink(\"body:realmsLI:realms\");"},{"sha":"a740dfa1a651fc4a389553d961e314347c080088","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/RelationshipTypesITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRelationshipTypesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRelationshipTypesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRelationshipTypesITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,16 +18,16 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.AjaxDataTablePanel;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.wicket.Component;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class RelationshipTypesITCase extends AbstractTypesITCase {\n "},{"sha":"f4bd69b9a0d14f84d267dab68329e7c2123990b0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/ReportsITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FReportsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FReportsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FReportsITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,21 +18,21 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.Reports;\n import org.apache.wicket.Component;\n import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n public class ReportsITCase extends AbstractConsoleITCase {\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n         TESTER.clickLink(\"body:reportsLI:reports\");"},{"sha":"1f0ec42abd52933306453da4909ba781828de7f5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/RolesITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRolesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRolesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRolesITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,20 +18,20 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.Administration;\n import org.apache.wicket.Component;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n public class RolesITCase extends AbstractConsoleITCase {\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n         TESTER.clickLink(\"body:configurationLI:configurationUL:administrationLI:administration\");"},{"sha":"50aaefa8df166f275d6f78af34a8bb6468d06cbd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/SchemasITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSchemasITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSchemasITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSchemasITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -28,7 +28,7 @@\n import org.apache.wicket.Component;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class SchemasITCase extends AbstractTypesITCase {\n "},{"sha":"4a06ea1766ff47828793f1b83a251e0bf811c9fd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/SecurityQuestionsITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSecurityQuestionsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSecurityQuestionsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FSecurityQuestionsITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -29,12 +29,12 @@\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n public class SecurityQuestionsITCase extends AbstractConsoleITCase {\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n         TESTER.clickLink(\"body:configurationLI:configurationUL:securityquestionsLI:securityquestions\");"},{"sha":"0a910b0eba3bc6dceb4cdada9cd3de3524b84a17","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/TopologyITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n@@ -35,12 +35,12 @@\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n public class TopologyITCase extends AbstractConsoleITCase {\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n         TESTER.clickLink(\"body:topologyLI:topology\");\n@@ -114,7 +114,7 @@ public void editProvisioning() {\n \n         TESTER.executeAjaxEvent(\"body:toggle:outerObjectsRepeater:3:outer:form:content:provision:container:\"\n                 + \"content:group:beans:0:fields:0\", Constants.ON_CLICK);\n-        \n+\n         TESTER.clickLink(\"body:toggle:outerObjectsRepeater:3:outer:form:content:toggle:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n \n@@ -237,10 +237,10 @@ public void createNewResurceAndProvisionRules() {\n \n         TESTER.executeAjaxEvent(\"body:toggle:outerObjectsRepeater:3:outer:form:content:provision:container:\"\n                 + \"content:group:beans:0:fields:0\", Constants.ON_CLICK);\n-        \n+\n         TESTER.clickLink(\"body:toggle:outerObjectsRepeater:3:outer:form:content:toggle:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n-        \n+\n         formTester = TESTER.newFormTester(\n                 \"body:toggle:outerObjectsRepeater:3:outer:form:content:provision:container:content:wizard:form\");\n         formTester.submit(\"buttons:next\");"},{"sha":"7751605009fe0d7ca95f6735bbfc2e6e7c1082c8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/UsersITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FUsersITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FUsersITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FUsersITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,27 +18,27 @@\n  */\n package org.apache.syncope.fit.console;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.util.Calendar;\n import org.apache.wicket.Component;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.wicket.markup.html.form.IndicatingOnConfirmAjaxLink;\n-import org.junit.Before;\n+import org.junit.jupiter.api.BeforeEach;\n \n public class UsersITCase extends AbstractConsoleITCase {\n \n     private static final String TAB_PANEL = \"body:content:body:container:content:tabbedPanel:panel:searchResult:\";\n \n     private static final String CONTAINER = TAB_PANEL + \"container:content:\";\n \n-    @Before\n+    @BeforeEach\n     public void login() {\n         doLogin(ADMIN_UNAME, ADMIN_PWD);\n     }"},{"sha":"e1e41e9484981cc47c9ee193f6e610fd304806a0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractNotificationTaskITCase.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import com.icegreen.greenmail.util.GreenMail;\n import com.icegreen.greenmail.util.ServerSetup;\n@@ -30,8 +30,8 @@\n import javax.mail.Session;\n import javax.mail.Store;\n import org.apache.commons.io.IOUtils;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n \n public abstract class AbstractNotificationTaskITCase extends AbstractTaskITCase {\n \n@@ -45,7 +45,7 @@ public abstract class AbstractNotificationTaskITCase extends AbstractTaskITCase\n \n     private static GreenMail greenMail;\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void startGreenMail() {\n         Properties props = new Properties();\n         InputStream propStream = null;\n@@ -70,7 +70,7 @@ public static void startGreenMail() {\n         greenMail.start();\n     }\n \n-    @AfterClass\n+    @AfterAll\n     public static void stopGreenMail() {\n         if (greenMail != null) {\n             greenMail.stop();\n@@ -83,7 +83,6 @@ protected boolean verifyMail(final String sender, final String subject, final St\n \n         boolean found = false;\n         Session session = Session.getDefaultInstance(System.getProperties());\n-        session.setDebug(true);\n         Store store = session.getStore(\"pop3\");\n         store.connect(POP3_HOST, POP3_PORT, mailAddress, mailAddress);\n "},{"sha":"92aa4b233f5d8bd96a6f55c01b458904e54a96d1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractTaskITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.ArrayList;\n import java.util.List;"},{"sha":"1829c3048313a86731cbdc942a53caf9b0f80217","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyObjectITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.Set;\n import java.util.UUID;\n@@ -42,7 +42,7 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class AnyObjectITCase extends AbstractITCase {\n \n@@ -83,7 +83,7 @@ public void createInvalidMembership() {\n \n         try {\n             createAnyObject(anyObjectTO);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidMembership, e.getType());\n         }\n@@ -194,7 +194,7 @@ public void deleteAttr() {\n \n         try {\n             anyObjectService.read(anyObjectTO.getKey(), SchemaType.PLAIN, \"location\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -208,7 +208,7 @@ public void issueSYNCOPE756() {\n \n         try {\n             createAnyObject(anyObjectTO).getEntity();\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidAnyType, e.getType());\n         }"},{"sha":"703cd4bd5bf237ed32d795af39f25e3ae8e755ac","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyTypeClassITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyTypeClassITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyTypeClassITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyTypeClassITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n@@ -36,7 +36,7 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class AnyTypeClassITCase extends AbstractITCase {\n \n@@ -99,7 +99,7 @@ public void crud() {\n \n         try {\n             anyTypeClassService.read(newClass.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -143,7 +143,7 @@ public void issueSYNCOPE759() {\n \n         try {\n             anyTypeClassService.create(newAnyTypeClass);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n         }"},{"sha":"ba3f65c32771d357a12178417cf4aadae0927b71","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyTypeITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyTypeITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyTypeITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyTypeITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n@@ -34,7 +34,7 @@\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class AnyTypeITCase extends AbstractITCase {\n \n@@ -93,7 +93,7 @@ public void crud() {\n \n         try {\n             anyTypeService.read(newType.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -106,7 +106,7 @@ public void createInvalidKind() {\n         newType.setKind(AnyTypeKind.USER);\n         try {\n             anyTypeService.create(newType);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidAnyType, e.getType());\n         }\n@@ -119,7 +119,7 @@ public void createInvalidName() {\n         newType.setKind(AnyTypeKind.GROUP);\n         try {\n             anyTypeService.create(newType);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n         }\n@@ -129,7 +129,7 @@ public void createInvalidName() {\n     public void deleteInvalid() {\n         try {\n             anyTypeService.delete(AnyTypeKind.USER.name());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidAnyType, e.getType());\n         }"},{"sha":"946d97d5faf5018f61a4e5c1e8bca685ff939b87","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":28,"deletions":31,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,12 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n import java.security.AccessControlException;\n import java.util.Map;\n@@ -72,16 +73,12 @@\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.FlowableDetector;\n-import org.junit.Assume;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:testJDBCEnv.xml\" })\n+@SpringJUnitConfig(locations = { \"classpath:testJDBCEnv.xml\" })\n public class AuthenticationITCase extends AbstractITCase {\n \n     @Autowired\n@@ -99,7 +96,7 @@ public void readEntitlements() {\n         // 1. as not authenticated (not allowed)\n         try {\n             clientFactory.create().self();\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n@@ -181,7 +178,7 @@ public void userRead() {\n \n         try {\n             userService3.read(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertNotNull(e);\n             assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n@@ -253,7 +250,7 @@ public void delegatedUserCRUD() {\n             UserTO user = UserITCase.getUniqueSampleTO(\"delegated@syncope.apache.org\");\n             try {\n                 delegatedUserService.create(user);\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n             }\n@@ -276,7 +273,7 @@ public void delegatedUserCRUD() {\n \n             try {\n                 delegatedUserService.update(userPatch);\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n             }\n@@ -296,7 +293,7 @@ public void delegatedUserCRUD() {\n \n             try {\n                 userService.read(user.getKey());\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.NotFound, e.getType());\n             }\n@@ -326,13 +323,13 @@ public void checkFailedLogins() {\n         // authentications failed ...\n         try {\n             clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n         try {\n             clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n@@ -358,19 +355,19 @@ public void checkUserSuspension() {\n         // authentications failed ...\n         try {\n             clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n         try {\n             clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n         try {\n             clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n@@ -380,21 +377,21 @@ public void checkUserSuspension() {\n         // last authentication before suspension\n         try {\n             clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n \n         userTO = userService.read(userTO.getKey());\n         assertNotNull(userTO);\n         assertNotNull(userTO.getFailedLogins());\n-        assertEquals(3, userTO.getFailedLogins(), 0);\n+        assertEquals(3, userTO.getFailedLogins().intValue());\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         // Access with correct credentials should fail as user is suspended\n         try {\n             clientFactory.create(userTO.getUsername(), \"password123\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n@@ -408,7 +405,7 @@ public void checkUserSuspension() {\n         assertEquals(\"active\", userTO.getStatus());\n \n         SyncopeClient goodPwdClient = clientFactory.create(userTO.getUsername(), \"password123\");\n-        assertEquals(0, goodPwdClient.self().getValue().getFailedLogins(), 0);\n+        assertEquals(0, goodPwdClient.self().getValue().getFailedLogins().intValue());\n     }\n \n     @Test\n@@ -450,7 +447,7 @@ public void anyTypeEntitlement() {\n         SyncopeClient belliniClient = clientFactory.create(\"bellini\", ADMIN_PWD);\n         try {\n             belliniClient.getService(AnyObjectService.class).create(folder);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n         }\n@@ -479,7 +476,7 @@ public void anyTypeEntitlement() {\n \n     @Test\n     public void issueSYNCOPE434() {\n-        Assume.assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n \n         // 1. create user with group 'groupForWorkflowApproval' \n         // (users with group groupForWorkflowApproval are defined in workflow as subject to approval)\n@@ -494,7 +491,7 @@ public void issueSYNCOPE434() {\n         // 2. try to authenticate: fail\n         try {\n             clientFactory.create(userTO.getUsername(), \"password123\").self();\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n@@ -558,14 +555,14 @@ public void issueSYNCOPE706() {\n         String username = getUUIDString();\n         try {\n             userService.read(username);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n \n         try {\n             clientFactory.create(username, \"anypassword\").self();\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (AccessControlException e) {\n             assertNotNull(e.getMessage());\n         }"},{"sha":"95516a827c4772ed55b583a880fba4155fca83c4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/CamelRouteITCase.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -20,8 +20,10 @@\n \n import org.apache.syncope.fit.CamelDetector;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -33,15 +35,13 @@\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Assert;\n-import org.junit.Assume;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class CamelRouteITCase extends AbstractITCase {\n \n     @Test\n     public void userRoutes() {\n-        Assume.assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n+        assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n \n         List<CamelRouteTO> userRoutes = camelRouteService.list(AnyTypeKind.USER);\n         assertNotNull(userRoutes);\n@@ -51,7 +51,7 @@ public void userRoutes() {\n \n     @Test\n     public void groupRoutes() {\n-        Assume.assumeTrue(CamelDetector.isCamelEnabledForGroups(syncopeService));\n+        assumeTrue(CamelDetector.isCamelEnabledForGroups(syncopeService));\n \n         List<CamelRouteTO> groupRoutes = camelRouteService.list(AnyTypeKind.GROUP);\n         assertNotNull(groupRoutes);\n@@ -69,7 +69,7 @@ private CamelRouteTO doUpdate(final String key, final String content) {\n \n     @Test\n     public void update() {\n-        Assume.assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n+        assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n \n         CamelRouteTO oldRoute = camelRouteService.read(\"createUser\");\n         assertNotNull(oldRoute);\n@@ -103,7 +103,7 @@ public void update() {\n \n     @Test\n     public void scriptingUpdate() {\n-        Assume.assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n+        assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n \n         CamelRouteTO oldRoute = camelRouteService.read(\"createUser\");\n         // updating route content including new attribute management\n@@ -169,7 +169,7 @@ public void scriptingUpdate() {\n \n     @Test\n     public void issueSYNCOPE931() {\n-        Assume.assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n+        assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n \n         CamelRouteTO oldRoute = camelRouteService.read(\"createUser\");\n         assertNotNull(oldRoute);\n@@ -197,7 +197,7 @@ public void issueSYNCOPE931() {\n         // Try to update a route with an incorrect propagation type\n         try {\n             doUpdate(\"createUser\", routeContent);\n-            Assert.fail(\"Error expected on an incorrect propagation type\");\n+            fail(\"Error expected on an incorrect propagation type\");\n         } catch (Exception ex) {\n             // Expected\n         }"},{"sha":"e94e3d7ea7fc58d78b3a457565d5968f9791f472","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ConfigurationITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConfigurationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConfigurationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConfigurationITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -42,7 +42,7 @@\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class ConfigurationITCase extends AbstractITCase {\n \n@@ -73,7 +73,7 @@ public void createRequired() {\n         AttrTO conf = new AttrTO.Builder().schema(testKey.getKey()).build();\n         try {\n             configurationService.set(conf);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n@@ -160,7 +160,7 @@ public void issueSYNCOPE418() {\n \n         try {\n             createSchema(SchemaType.PLAIN, failing);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidPlainSchema, e.getType());\n "},{"sha":"b52621393a10b0c82c434dc3b87a5b0e3e764bf6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ConnectorITCase.java","status":"modified","additions":25,"deletions":22,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,13 +18,14 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -63,8 +64,8 @@\n import org.apache.syncope.fit.AbstractITCase;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n \n public class ConnectorITCase extends AbstractITCase {\n \n@@ -76,7 +77,7 @@ public class ConnectorITCase extends AbstractITCase {\n \n     private static String testJDBCURL;\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setUpConnIdBundles() throws IOException {\n         InputStream propStream = null;\n         try {\n@@ -105,14 +106,16 @@ public static void setUpConnIdBundles() throws IOException {\n         assertNotNull(testJDBCURL);\n     }\n \n-    @Test(expected = SyncopeClientException.class)\n+    @Test\n     public void createWithException() {\n-        ConnInstanceTO connectorTO = new ConnInstanceTO();\n+        assertThrows(SyncopeClientException.class, () -> {\n+            ConnInstanceTO connectorTO = new ConnInstanceTO();\n \n-        Response response = connectorService.create(connectorTO);\n-        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-            throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n-        }\n+            Response response = connectorService.create(connectorTO);\n+            if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n+            }\n+        });\n     }\n \n     @Test\n@@ -176,8 +179,8 @@ public void create() {\n         assertEquals(Integer.valueOf(15), actual.getConnRequestTimeout());\n         assertEquals(connectorTO.getCapabilities(), actual.getCapabilities());\n         assertNotNull(actual.getPoolConf());\n-        assertEquals(1534, actual.getPoolConf().getMaxObjects(), 0);\n-        assertEquals(10, actual.getPoolConf().getMaxIdle(), 0);\n+        assertEquals(1534, actual.getPoolConf().getMaxObjects().intValue());\n+        assertEquals(10, actual.getPoolConf().getMaxIdle().intValue());\n \n         Throwable t = null;\n \n@@ -196,7 +199,7 @@ public void create() {\n         assertNull(t);\n         assertNotNull(actual);\n         assertEquals(EnumSet.of(ConnectorCapability.CREATE), actual.getCapabilities());\n-        assertEquals(10, actual.getPoolConf().getMaxObjects(), 0);\n+        assertEquals(10, actual.getPoolConf().getMaxObjects().intValue());\n \n         // check also for the deletion of the created object\n         try {\n@@ -446,7 +449,7 @@ public void validate() {\n \n         try {\n             connectorService.check(connectorTO);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             assertNotNull(e);\n         }\n@@ -528,7 +531,7 @@ public void authorizations() {\n         // 2. attempt to read a connector with a different admin realm: fail\n         try {\n             pcs.read(\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\", null);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n         }\n@@ -689,7 +692,7 @@ public void issueSYNCOPE112() {\n         try {\n             try {\n                 connectorService.check(connectorTO);\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (Exception e) {\n                 assertNotNull(e);\n             }"},{"sha":"69a5d481c7c907e027cdd2d708184c3c4cdf3fe1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DerSchemaITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n@@ -33,7 +33,7 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class DerSchemaITCase extends AbstractITCase {\n \n@@ -75,7 +75,7 @@ public void delete() {\n \n         try {\n             schemaService.read(SchemaType.DERIVED, \"rderiveddata\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         } finally {\n@@ -112,7 +112,7 @@ public void issueSYNCOPE323() {\n \n         try {\n             createSchema(SchemaType.DERIVED, actual);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.CONFLICT, e.getType().getResponseStatus());\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n@@ -121,7 +121,7 @@ public void issueSYNCOPE323() {\n         actual.setKey(null);\n         try {\n             createSchema(SchemaType.DERIVED, actual);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.BAD_REQUEST, e.getType().getResponseStatus());\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n@@ -136,7 +136,7 @@ public void issueSYNCOPE418() {\n \n         try {\n             createSchema(SchemaType.DERIVED, schema);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidDerSchema, e.getType());\n             assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidKey.name()));"},{"sha":"a24d22ef02e3ecdfdebd0cc4c3398a3d1ac0af46","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DomainITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDomainITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDomainITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDomainITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.security.AccessControlException;\n import java.util.List;\n@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class DomainITCase extends AbstractITCase {\n \n@@ -54,7 +54,7 @@ public void create() {\n \n         try {\n             domainService.create(domain);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -107,7 +107,7 @@ public void delete() {\n \n             try {\n                 domainService.read(two.getKey());\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.NotFound, e.getType());\n             }"},{"sha":"1bf4a5456766bef368995650dd336ea991d98ed1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DynRealmITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n@@ -48,7 +48,7 @@\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.ElasticsearchDetector;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class DynRealmITCase extends AbstractITCase {\n \n@@ -63,7 +63,7 @@ public void misc() {\n             // invalid key (starts with /)\n             try {\n                 dynRealmService.create(dynRealm);\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.InvalidDynRealm, e.getType());\n             }\n@@ -180,7 +180,7 @@ public void delegatedAdmin() {\n             // this will fail because unassigning resource-ldap would result in removing the user from the dynamic realm\n             try {\n                 delegatedUserService.update(userPatch);\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n             }"},{"sha":"9653c975ff7853b08be9d61f5e69d24cb488ff10","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ExceptionMapperITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -34,14 +34,14 @@\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n \n public class ExceptionMapperITCase extends AbstractITCase {\n \n     private static final Properties ERROR_MESSAGES = new Properties();\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setUpErrorMessages() throws IOException {\n         InputStream propStream = null;\n         try {\n@@ -99,7 +99,7 @@ public void uniqueSchemaConstraint() {\n \n         try {\n             createUser(userTO2);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             String message = ERROR_MESSAGES.getProperty(\"errMessage.UniqueConstraintViolation\");\n             assertEquals(\"EntityExists [\" + message + \"]\", e.getMessage());\n@@ -122,7 +122,7 @@ public void sameGroupName() {\n         groupTO2.setRealm(SyncopeConstants.ROOT_REALM);\n         try {\n             createGroup(groupTO2);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             String message = ERROR_MESSAGES.getProperty(\"errMessage.UniqueConstraintViolation\");\n             assertEquals(\"DataIntegrityViolation [\" + message + \"]\", e.getMessage());\n@@ -143,7 +143,7 @@ public void headersMultiValue() {\n \n         try {\n             createUser(userTO);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientCompositeException e) {\n             assertEquals(2, e.getExceptions().size());\n         }"},{"sha":"3b8db051ef499244c9273e4998030f47042e8f34","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.security.AccessControlException;\n import java.util.Collections;\n@@ -90,7 +90,7 @@\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class GroupITCase extends AbstractITCase {\n \n@@ -203,7 +203,7 @@ public void selfRead() {\n \n         try {\n             groupService2.read(\"29f96485-729e-4d31-88a1-6fc60e4677f3\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n         }\n@@ -289,7 +289,7 @@ public void updateAsGroupOwner() {\n \n         try {\n             groupService2.update(groupPatch);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (ForbiddenException e) {\n             assertNotNull(e);\n         }\n@@ -340,7 +340,7 @@ public void link() {\n \n         try {\n             resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             assertNotNull(e);\n         }\n@@ -357,7 +357,7 @@ public void link() {\n \n         try {\n             resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             assertNotNull(e);\n         }\n@@ -387,7 +387,7 @@ public void unassign() {\n \n             try {\n                 resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (Exception e) {\n                 assertNotNull(e);\n             }\n@@ -409,7 +409,7 @@ public void assign() {\n \n             try {\n                 resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (Exception e) {\n                 assertNotNull(e);\n             }\n@@ -456,7 +456,7 @@ public void deprovision() {\n \n             try {\n                 resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (Exception e) {\n                 assertNotNull(e);\n             }\n@@ -478,7 +478,7 @@ public void provision() {\n \n             try {\n                 resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (Exception e) {\n                 assertNotNull(e);\n             }\n@@ -513,7 +513,7 @@ public void deprovisionUnlinked() {\n \n             try {\n                 resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (Exception e) {\n                 assertNotNull(e);\n             }\n@@ -544,7 +544,7 @@ public void deprovisionUnlinked() {\n \n             try {\n                 resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (Exception e) {\n                 assertNotNull(e);\n             }\n@@ -586,7 +586,7 @@ public void createWithMandatorySchema() {\n \n             try {\n                 updateGroup(groupPatch);\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n             }\n@@ -611,7 +611,7 @@ public void anonymous() {\n         GroupService unauthenticated = clientFactory.create().getService(GroupService.class);\n         try {\n             unauthenticated.search(new AnyQuery.Builder().realm(\"/even\").build());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n@@ -621,7 +621,7 @@ public void anonymous() {\n         try {\n             anonymous.getService(GroupService.class).\n                     search(new AnyQuery.Builder().realm(\"/even\").build());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (ForbiddenException e) {\n             assertNotNull(e);\n         }\n@@ -861,7 +861,7 @@ public void bulkMembersAction() throws InterruptedException {\n         // 4. verify that the user above is not found on LDAP\n         try {\n             resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }"},{"sha":"ea436626eebaf85c7e4f28726a2ae2d53353cb40","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/IdentityRecertificationITCase.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FIdentityRecertificationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FIdentityRecertificationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FIdentityRecertificationITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,17 +18,14 @@\n  */\r\n package org.apache.syncope.fit.core;\r\n \r\n-import static org.junit.Assert.assertFalse;\r\n-import static org.junit.Assert.assertTrue;\r\n+import static org.junit.jupiter.api.Assertions.assertFalse;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n \r\n import java.util.List;\r\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\r\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.Test;\r\n-import org.junit.runners.MethodSorters;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n-@FixMethodOrder(MethodSorters.JVM)\r\n public class IdentityRecertificationITCase extends AbstractTaskITCase {\r\n \r\n     @Test\r"},{"sha":"1d1c77f4ccc19bcb5cba2fa726ace61bb4334f43","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/JWTITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.security.AccessControlException;\n import java.text.ParseException;\n@@ -54,7 +54,7 @@\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.core.reference.CustomJWTSSOProvider;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n /**\n  * Some tests for JWT Tokens."},{"sha":"f7fe298e5ae131961c15bb3c022fb047e8896ba6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.File;\n import java.io.IOException;\n@@ -58,7 +58,7 @@\n import org.apache.syncope.core.logic.GroupLogic;\n import org.apache.syncope.core.logic.UserLogic;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class LoggerITCase extends AbstractITCase {\n "},{"sha":"df0072863617f927b4c612fcfa1bbae560566dca","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MailTemplateITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMailTemplateITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMailTemplateITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMailTemplateITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -36,7 +36,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MailTemplateFormat;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class MailTemplateITCase extends AbstractITCase {\n \n@@ -70,13 +70,13 @@ public void crud() throws IOException {\n         // 2. attempt to read HTML and TEXT -> fail\n         try {\n             mailTemplateService.getFormat(key, MailTemplateFormat.HTML);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n         try {\n             mailTemplateService.getFormat(key, MailTemplateFormat.TEXT);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -112,7 +112,7 @@ public void crud() throws IOException {\n \n         try {\n             mailTemplateService.getFormat(key, MailTemplateFormat.HTML);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -130,19 +130,19 @@ public void crud() throws IOException {\n \n         try {\n             mailTemplateService.read(key);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n         try {\n             mailTemplateService.getFormat(key, MailTemplateFormat.HTML);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n         try {\n             mailTemplateService.getFormat(key, MailTemplateFormat.TEXT);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -154,7 +154,7 @@ public void issueSYNCOPE866() {\n         mailTemplateTO.setKey(\"optin\");\n         try {\n             mailTemplateService.create(mailTemplateTO);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n         }"},{"sha":"a4f6ac5d76812739b83484cac91180a5e9b765d2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import javax.sql.DataSource;\n import javax.ws.rs.core.Response;\n@@ -52,15 +52,12 @@\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:testJDBCEnv.xml\" })\n+@SpringJUnitConfig(locations = { \"classpath:testJDBCEnv.xml\" })\n public class MembershipITCase extends AbstractITCase {\n \n     @Autowired\n@@ -86,7 +83,7 @@ public void misc() {\n         // user creation fails because of fullname\n         try {\n             createUser(user);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidUser, e.getType());\n             assertTrue(e.getMessage().contains(\"InvalidPlainAttr: fullname not allowed for membership of group\"));"},{"sha":"f98d46800dae772eee7f95f795da4f3a09de3d6e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import java.util.Locale;\n@@ -61,12 +61,12 @@\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n \n public class MultitenancyITCase extends AbstractITCase {\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void restSetup() {\n         clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS).setDomain(\"Two\");\n \n@@ -83,14 +83,14 @@ public static void restSetup() {\n     public void masterOnly() {\n         try {\n             adminClient.getService(DomainService.class).read(\"Two\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (ForbiddenException e) {\n             assertNotNull(e);\n         }\n \n         try {\n             adminClient.getService(LoggerService.class).list(LoggerType.LOG);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (ForbiddenException e) {\n             assertNotNull(e);\n         }"},{"sha":"5b104ecd9154578e600c1234892f706e7c53ef8c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n@@ -34,7 +34,7 @@\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class NotificationITCase extends AbstractITCase {\n \n@@ -111,7 +111,7 @@ public void delete() {\n \n         try {\n             notificationService.read(notification.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -186,7 +186,7 @@ public void issueSYNCOPE974() {\n \n         try {\n             notificationService.create(notificationTO);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n             assertTrue(e.getMessage().contains(\"events\"));"},{"sha":"6790f34354b476fa4efdaad48f44626a11f5ff0b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n@@ -41,7 +41,7 @@\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.core.provisioning.java.job.notification.NotificationJob;\n import org.apache.syncope.fit.core.reference.TestNotificationRecipientsProvider;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class NotificationTaskITCase extends AbstractNotificationTaskITCase {\n \n@@ -64,11 +64,9 @@ public void notifyByMail() throws Exception {\n         assertNotNull(taskTO);\n         assertTrue(taskTO.isExecuted());\n         assertNotNull(taskTO.getTextBody());\n-        assertTrue(\"Notification mail text doesn't contain expected content.\",\n-                taskTO.getTextBody().contains(\"Your email address is \" + created.getRight() + \".\"));\n-        assertTrue(\"Notification mail text doesn't contain expected content.\",\n-                taskTO.getTextBody().contains(\"Your email address inside a link: \"\n-                        + \"http://localhost/?email=\" + created.getRight().replaceAll(\"@\", \"%40\")));\n+        assertTrue(taskTO.getTextBody().contains(\"Your email address is \" + created.getRight() + \".\"));\n+        assertTrue(taskTO.getTextBody().contains(\"Your email address inside a link: \"\n+                + \"http://localhost/?email=\" + created.getRight().replaceAll(\"@\", \"%40\")));\n     }\n \n     @Test"},{"sha":"79a31e99b51f9b3a54ffef3d1b18491d8cbf6bf5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PlainSchemaITCase.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import javax.ws.rs.core.GenericType;\n@@ -42,7 +42,7 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class PlainSchemaITCase extends AbstractITCase {\n \n@@ -63,7 +63,7 @@ public void create() {\n \n         try {\n             createSchema(SchemaType.PLAIN, schemaTO);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n         }\n@@ -293,7 +293,7 @@ public void issueSYNCOPE323() {\n \n         try {\n             createSchema(SchemaType.PLAIN, actual);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.CONFLICT, e.getType().getResponseStatus());\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n@@ -302,7 +302,7 @@ public void issueSYNCOPE323() {\n         actual.setKey(null);\n         try {\n             createSchema(SchemaType.PLAIN, actual);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.BAD_REQUEST, e.getType().getResponseStatus());\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n@@ -316,7 +316,7 @@ public void issueSYNCOPE418() {\n \n         try {\n             createSchema(SchemaType.PLAIN, schema);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidPlainSchema, e.getType());\n             assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidKey.name()));"},{"sha":"40664f0315ad407d949bfb258bfa0dd70fc0f12f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.Arrays;\n import java.util.List;\n@@ -40,7 +40,7 @@\n import org.apache.syncope.common.lib.policy.PullPolicySpec;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.core.reference.TestPullRule;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class PolicyITCase extends AbstractITCase {\n \n@@ -97,7 +97,7 @@ public void createMissingDescription() {\n \n         try {\n             createPolicy(policy);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidPolicy, e.getType());\n         }\n@@ -148,7 +148,7 @@ public void delete() {\n \n         try {\n             policyService.read(policyTO.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertNotNull(e);\n         }"},{"sha":"c1ae0b8733776200a72fab837eea836f85c73795","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -43,7 +43,7 @@\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class PropagationTaskITCase extends AbstractTaskITCase {\n "},{"sha":"699d31786cddacd556d62018b0862e8a188f6e3a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":17,"deletions":25,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n@@ -86,22 +86,19 @@\n import org.apache.syncope.fit.core.reference.TestPullActions;\n import org.apache.syncope.fit.core.reference.TestPullRule;\n import org.identityconnectors.framework.common.objects.Name;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:testJDBCEnv.xml\" })\n+@SpringJUnitConfig(locations = { \"classpath:testJDBCEnv.xml\" })\n public class PullTaskITCase extends AbstractTaskITCase {\n \n     @Autowired\n     private DataSource testDataSource;\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void testPullActionsSetup() {\n         PullTaskTO pullTask = taskService.read(PULL_TASK_KEY, true);\n         pullTask.getActionsClassNames().add(TestPullActions.class.getName());\n@@ -121,7 +118,7 @@ public void list() {\n         assertFalse(tasks.getResult().isEmpty());\n         tasks.getResult().stream().\n                 filter(task -> (!(task instanceof PullTaskTO))).\n-                forEach(item -> fail());\n+                forEach(item -> fail(\"This should not happen\"));\n     }\n \n     @Test\n@@ -255,7 +252,7 @@ public void fromCSV() throws Exception {\n             // Check for ignored user - SYNCOPE-663\n             try {\n                 userService.read(\"test2\");\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n             }\n@@ -287,9 +284,7 @@ public void fromCSV() throws Exception {\n     @Test\n     public void dryRun() {\n         ExecTO execution = execProvisioningTask(taskService, PULL_TASK_KEY, 50, true);\n-        assertEquals(\n-                \"Execution of \" + execution.getRefDesc() + \" failed with message \" + execution.getMessage(),\n-                \"SUCCESS\", execution.getStatus());\n+        assertEquals(\"SUCCESS\", execution.getStatus());\n     }\n \n     @Test\n@@ -402,9 +397,6 @@ public void reconcileFromLDAP() {\n \n     @Test\n     public void reconcileFromScriptedSQL() {\n-        System.out.println(\"QUAAAAAAAAAAAAAAAAAAAAA\");\n-        LOG.info(\"QUAAAAAAAAAAAAAAAa\");\n-                \n         // 0. reset sync token and set MappingItemTransformer\n         ResourceTO resource = resourceService.read(RESOURCE_NAME_DBSCRIPTED);\n         ResourceTO originalResource = SerializationUtils.clone(resource);\n@@ -519,7 +511,7 @@ public void filteredReconciliation() {\n \n             try {\n                 userService.read(\"user1\");\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.NotFound, e.getType());\n             }\n@@ -768,8 +760,8 @@ public void issueSYNCOPE258() {\n         assertEquals(1, executed.getExecutions().size());\n \n         // asser for just one match\n-        assertTrue(executed.getExecutions().get(0).getMessage().substring(0, 55) + \"...\",\n-                executed.getExecutions().get(0).getMessage().contains(\"[updated/failures]: 1/0\"));\n+        assertTrue(executed.getExecutions().get(0).getMessage().contains(\"[updated/failures]: 1/0\"),\n+                executed.getExecutions().get(0).getMessage().substring(0, 55) + \"...\");\n     }\n \n     @Test"},{"sha":"17d9c0571d1d301f3a6e754094dc3addc006c33d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":10,"deletions":13,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.HashSet;\n import java.util.Set;\n@@ -57,15 +57,12 @@\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:testJDBCEnv.xml\" })\n+@SpringJUnitConfig(locations = { \"classpath:testJDBCEnv.xml\" })\n public class PushTaskITCase extends AbstractTaskITCase {\n \n     @Autowired\n@@ -91,7 +88,7 @@ public void list() {\n         assertFalse(tasks.getResult().isEmpty());\n         tasks.getResult().stream().\n                 filter((task) -> (!(task instanceof PushTaskTO))).\n-                forEach(item -> fail());\n+                forEach(item -> fail(\"This should not happen\"));\n     }\n \n     @Test"},{"sha":"2cee05f51ab8191154d9465a4e359f86a176e3ff","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RESTITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -58,7 +58,7 @@\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class RESTITCase extends AbstractITCase {\n \n@@ -72,7 +72,7 @@ public void unauthorizedOrForbidden() {\n         // service with bad password: 401 unauthorized\n         try {\n             clientFactory.create(\"bellini\", \"passwor\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n@@ -81,7 +81,7 @@ public void unauthorizedOrForbidden() {\n         SyncopeClient goodClient = clientFactory.create(\"bellini\", \"password\");\n         try {\n             goodClient.getService(ConnectorService.class).list(null);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (ForbiddenException e) {\n             assertNotNull(e);\n         }\n@@ -149,7 +149,7 @@ public void ifMatch() {\n         userPatch.setUsername(new StringReplacePatchItem.Builder().value(userTO.getUsername() + \"YY\").build());\n         try {\n             ifMatchService.update(userPatch);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.ConcurrentModification, e.getType());\n         }"},{"sha":"751b9d380d0c2ebdc4dba55de376181640346058","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import java.util.Optional;\n@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class RealmITCase extends AbstractITCase {\n \n@@ -58,7 +58,7 @@ public void list() {\n \n         try {\n             realmService.list(\"a name\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidPath, e.getType());\n         }\n@@ -105,15 +105,15 @@ public void createUpdate() {\n         // 4. create under invalid path\n         try {\n             realmService.create(\"a name\", realm);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidPath, e.getType());\n         }\n \n         // 5. attempt to create duplicate\n         try {\n             realmService.create(\"/odd\", realm);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n         }\n@@ -168,7 +168,7 @@ public void delete() {\n \n         try {\n             realmService.list(actual.getFullPath());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -178,7 +178,7 @@ public void delete() {\n     public void deleteNonEmpty() {\n         try {\n             realmService.delete(\"/even/two\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.AssociatedAnys, e.getType());\n             assertEquals(3, e.getElements().size());"},{"sha":"4c446c4a1e134ccd8c7d18c1296c0040460f4ea4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RelationshipTypeITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRelationshipTypeITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRelationshipTypeITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRelationshipTypeITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n@@ -30,7 +30,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.service.RelationshipTypeService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class RelationshipTypeITCase extends AbstractITCase {\n \n@@ -71,7 +71,7 @@ public void crud() {\n \n         try {\n             relationshipTypeService.read(newType.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -83,7 +83,7 @@ public void createInvalidName() {\n         newType.setKey(\"membership\");\n         try {\n             relationshipTypeService.create(newType);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidRelationshipType, e.getType());\n         }"},{"sha":"01965ab26b8f1b15e43485f6ff8c643cc488b568","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -50,7 +50,7 @@\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class ReportITCase extends AbstractITCase {\n \n@@ -133,7 +133,7 @@ public void delete() {\n \n         try {\n             reportService.read(report.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n         }\n@@ -193,7 +193,7 @@ public void executeAndExport() throws IOException {\n \n         try {\n             execute(reportTO.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.Scheduling, e.getType());\n             assertTrue(e.getElements().iterator().next().contains(\"active\"));"},{"sha":"6e7fc608aab7d81df9b47126e9d0ac8301d3ed99","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportTemplateITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -36,7 +36,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class ReportTemplateITCase extends AbstractITCase {\n \n@@ -70,13 +70,13 @@ public void crud() throws IOException {\n         // 2. attempt to read HTML and CSV -> fail\n         try {\n             reportTemplateService.getFormat(key, ReportTemplateFormat.HTML);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n         try {\n             reportTemplateService.getFormat(key, ReportTemplateFormat.CSV);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -114,7 +114,7 @@ public void crud() throws IOException {\n \n         try {\n             reportTemplateService.getFormat(key, ReportTemplateFormat.HTML);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -132,19 +132,19 @@ public void crud() throws IOException {\n \n         try {\n             reportTemplateService.read(key);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n         try {\n             reportTemplateService.getFormat(key, ReportTemplateFormat.HTML);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n         try {\n             reportTemplateService.getFormat(key, ReportTemplateFormat.CSV);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -156,7 +156,7 @@ public void issueSYNCOPE866() {\n         reportTemplateTO.setKey(\"empty\");\n         try {\n             reportTemplateService.create(reportTemplateTO);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n         }"},{"sha":"6a318ee2d470d37a5c540be650e8ceddee5f1903","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":40,"deletions":37,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,13 +18,14 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -59,7 +60,7 @@\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class ResourceITCase extends AbstractITCase {\n \n@@ -262,33 +263,35 @@ public void createWithInvalidMapping() {\n         }\n     }\n \n-    @Test(expected = SyncopeClientException.class)\n+    @Test\n     public void createWithoutExtAttr() {\n-        String resourceKey = RESOURCE_NAME_CREATE_WRONG;\n-        ResourceTO resourceTO = new ResourceTO();\n-        resourceTO.setKey(resourceKey);\n-        resourceTO.setConnector(\"5ffbb4ac-a8c3-4b44-b699-11b398a1ba08\");\n+        assertThrows(SyncopeClientException.class, () -> {\n+            String resourceKey = RESOURCE_NAME_CREATE_WRONG;\n+            ResourceTO resourceTO = new ResourceTO();\n+            resourceTO.setKey(resourceKey);\n+            resourceTO.setConnector(\"5ffbb4ac-a8c3-4b44-b699-11b398a1ba08\");\n \n-        ProvisionTO provisionTO = new ProvisionTO();\n-        provisionTO.setAnyType(AnyTypeKind.USER.name());\n-        provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n-        resourceTO.getProvisions().add(provisionTO);\n+            ProvisionTO provisionTO = new ProvisionTO();\n+            provisionTO.setAnyType(AnyTypeKind.USER.name());\n+            provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n+            resourceTO.getProvisions().add(provisionTO);\n \n-        MappingTO mapping = new MappingTO();\n-        provisionTO.setMapping(mapping);\n+            MappingTO mapping = new MappingTO();\n+            provisionTO.setMapping(mapping);\n \n-        ItemTO item = new ItemTO();\n-        item.setIntAttrName(\"key\");\n-        item.setExtAttrName(\"userId\");\n-        item.setConnObjectKey(true);\n-        mapping.setConnObjectKeyItem(item);\n+            ItemTO item = new ItemTO();\n+            item.setIntAttrName(\"key\");\n+            item.setExtAttrName(\"userId\");\n+            item.setConnObjectKey(true);\n+            mapping.setConnObjectKeyItem(item);\n \n-        item = new ItemTO();\n-        item.setIntAttrName(\"usernane\");\n-        // missing extAttrName ...\n-        mapping.add(item);\n+            item = new ItemTO();\n+            item.setIntAttrName(\"usernane\");\n+            // missing extAttrName ...\n+            mapping.add(item);\n \n-        createResource(resourceTO);\n+            createResource(resourceTO);\n+        });\n     }\n \n     @Test\n@@ -332,7 +335,7 @@ public void updateWithException() {\n             resourceTO.setKey(\"resourcenotfound\");\n             resourceService.update(resourceTO);\n \n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n         }\n@@ -390,7 +393,7 @@ public void update() {\n     public void deleteWithException() {\n         try {\n             resourceService.delete(\"resourcenotfound\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n         }\n@@ -444,7 +447,7 @@ public void delete() {\n \n         try {\n             resourceService.read(resourceKey);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n         }\n@@ -606,7 +609,7 @@ public void authorizations() {\n         // 1. attempt to read a resource for a connector with a different admin realm: fail\n         try {\n             prs.read(RESOURCE_NAME_WS1);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n         }\n@@ -635,7 +638,7 @@ public void issueSYNCOPE323() {\n \n         try {\n             createResource(actual);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.CONFLICT, e.getType().getResponseStatus());\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n@@ -644,7 +647,7 @@ public void issueSYNCOPE323() {\n         actual.setKey(null);\n         try {\n             createResource(actual);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.BAD_REQUEST, e.getType().getResponseStatus());\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n@@ -707,7 +710,7 @@ public void issueSYNCOPE418() {\n         try {\n             resourceService.create(\n                     buildResourceTO(\"http://schemas.examples.org/security/authorization/organizationUnit\"));\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidExternalResource, e.getType());\n             assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidKey.name()));\n@@ -781,7 +784,7 @@ public void issueSYNCOPE645() {\n         // save the resource\n         try {\n             resourceService.create(resource);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidMapping, e.getType());\n         }"},{"sha":"730c7fabd4fb86d2ceb8e0d6bf2afa95a72a83c6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RoleITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n@@ -33,7 +33,7 @@\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class RoleITCase extends AbstractITCase {\n \n@@ -73,7 +73,7 @@ public void create() {\n \n         try {\n             createRole(role);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidRole, e.getType());\n         }\n@@ -114,7 +114,7 @@ public void delete() {\n \n         try {\n             roleService.read(actual.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }"},{"sha":"642c810e39fa7804994db6316263ce07bd8e2595","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,13 +18,14 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n import java.io.File;\n import java.io.InputStream;\n@@ -92,10 +93,9 @@\n import org.bouncycastle.operator.ContentSigner;\n import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n import org.joda.time.DateTime;\n-import org.junit.AfterClass;\n-import org.junit.Assume;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n import org.opensaml.saml.common.xml.SAMLConstants;\n import org.opensaml.saml.saml2.core.Status;\n import org.opensaml.xmlsec.signature.support.SignatureConstants;\n@@ -113,7 +113,7 @@ public class SAML2ITCase extends AbstractITCase {\n \n     private static Path truststorePath;\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setup() {\n         anonymous = new SyncopeClientFactoryBean().\n                 setAddress(ADDRESS).\n@@ -123,7 +123,7 @@ public static void setup() {\n         OpenSAMLUtil.initSamlEngine(false);\n     }\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void importFromIdPMetadata() throws Exception {\n         if (!SAML2SPDetector.isSAML2SPAvailable()) {\n             return;\n@@ -147,7 +147,7 @@ public static void importFromIdPMetadata() throws Exception {\n             // Allow unsolicited responses for the realmb case\n             String realmBEntityId = \"urn:org:apache:cxf:fediz:idp:realm-B\";\n             Optional<SAML2IdPTO> realmBIdP =\n-                saml2IdPService.list().stream().filter(idp -> realmBEntityId.equals(idp.getEntityID())).findFirst();\n+                    saml2IdPService.list().stream().filter(idp -> realmBEntityId.equals(idp.getEntityID())).findFirst();\n             realmBIdP.get().setSupportUnsolicited(true);\n             saml2IdPService.update(realmBIdP.get());\n         } catch (Exception e) {\n@@ -161,7 +161,7 @@ public static void importFromIdPMetadata() throws Exception {\n         assertEquals(4, saml2IdPService.list().size());\n     }\n \n-    @AfterClass\n+    @AfterAll\n     public static void clearIdPs() throws Exception {\n         if (!SAML2SPDetector.isSAML2SPAvailable()) {\n             return;\n@@ -177,7 +177,7 @@ public static void clearIdPs() throws Exception {\n \n     @Test\n     public void spMetadata() {\n-        Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n+        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n \n         try {\n             SAML2SPService service = anonymous.getService(SAML2SPService.class);\n@@ -209,7 +209,7 @@ public void spMetadata() {\n \n     @Test\n     public void createLoginRequest() {\n-        Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n+        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n \n         SAML2RequestTO loginRequest = anonymous.getService(SAML2SPService.class).\n                 createLoginRequest(ADDRESS, \"https://idp.testshib.org/idp/shibboleth\");\n@@ -223,7 +223,7 @@ public void createLoginRequest() {\n \n     @Test\n     public void setIdPMapping() {\n-        Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n+        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n \n         Optional<SAML2IdPTO> ssoCircleOpt =\n                 saml2IdPService.list().stream().filter(o -> \"https://idp.ssocircle.com\".equals(o.getEntityID())).\n@@ -262,7 +262,7 @@ public void setIdPMapping() {\n \n     @Test\n     public void validateLoginResponse() throws Exception {\n-        Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n+        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n \n         // Get a valid login request for the Fediz realm\n         SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n@@ -313,7 +313,7 @@ public void validateLoginResponse() throws Exception {\n \n     @Test\n     public void unsignedAssertionInLoginResponse() throws Exception {\n-        Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n+        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n \n         // Get a valid login request for the Fediz realm\n         SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n@@ -331,7 +331,7 @@ public void unsignedAssertionInLoginResponse() throws Exception {\n \n         org.opensaml.saml.saml2.core.Response samlResponse =\n                 createResponse(inResponseTo, false, SAML2Constants.CONF_SENDER_VOUCHES,\n-                               \"urn:org:apache:cxf:fediz:idp:realm-A\");\n+                        \"urn:org:apache:cxf:fediz:idp:realm-A\");\n \n         Document doc = DOMUtils.newDocument();\n         Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n@@ -349,7 +349,7 @@ public void unsignedAssertionInLoginResponse() throws Exception {\n \n     @Test\n     public void loginResponseWrappingAttack() throws Exception {\n-        Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n+        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n \n         // Get a valid login request for the Fediz realm\n         SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n@@ -411,7 +411,7 @@ public void loginResponseWrappingAttack() throws Exception {\n \n     @Test\n     public void validateIdpInitiatedLoginResponse() throws Exception {\n-        Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n+        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n \n         SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n \n@@ -421,7 +421,7 @@ public void validateIdpInitiatedLoginResponse() throws Exception {\n         response.setUrlContext(\"saml2sp\");\n \n         org.opensaml.saml.saml2.core.Response samlResponse =\n-            createResponse(null, true, SAML2Constants.CONF_BEARER, \"urn:org:apache:cxf:fediz:idp:realm-B\");\n+                createResponse(null, true, SAML2Constants.CONF_BEARER, \"urn:org:apache:cxf:fediz:idp:realm-B\");\n \n         Document doc = DOMUtils.newDocument();\n         Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n@@ -431,15 +431,15 @@ public void validateIdpInitiatedLoginResponse() throws Exception {\n         response.setSamlResponse(Base64.getEncoder().encodeToString(responseStr.getBytes()));\n         response.setRelayState(\"idpInitiated\");\n         SAML2LoginResponseTO loginResponse =\n-            saml2Service.validateLoginResponse(response);\n+                saml2Service.validateLoginResponse(response);\n         assertNotNull(loginResponse.getAccessToken());\n         assertEquals(\"puccini\", loginResponse.getNameID());\n     }\n \n     // Make sure that the IdP initiated case is only supported when \"supportUnsolicited\" is true for that IdP\n     @Test\n     public void validateIdpInitiatedLoginResponseFailure() throws Exception {\n-        Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n+        assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n \n         SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n \n@@ -449,7 +449,7 @@ public void validateIdpInitiatedLoginResponseFailure() throws Exception {\n         response.setUrlContext(\"saml2sp\");\n \n         org.opensaml.saml.saml2.core.Response samlResponse =\n-            createResponse(null, true, SAML2Constants.CONF_BEARER, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n+                createResponse(null, true, SAML2Constants.CONF_BEARER, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n \n         Document doc = DOMUtils.newDocument();\n         Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);"},{"sha":"9ae9644159c1db8e55418cca858161eaf50dcd34","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.Date;\n import java.util.List;\n@@ -44,7 +44,7 @@\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.fit.core.reference.TestSampleJobDelegate;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class SchedTaskITCase extends AbstractTaskITCase {\n \n@@ -63,7 +63,7 @@ public void list() {\n         tasks.getResult().stream().filter(\n                 task -> !(task instanceof SchedTaskTO) || task instanceof PullTaskTO || task instanceof PushTaskTO).\n                 forEachOrdered(item -> {\n-                    fail();\n+                    fail(\"This should not happen\");\n                 });\n     }\n "},{"sha":"e8002a65de5165e141622fb874ce3af28fe933a5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -41,7 +41,7 @@\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.ElasticsearchDetector;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class SearchITCase extends AbstractITCase {\n "},{"sha":"8a6223a3107a8f3dac1693b150f7618ba3512b47","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SecurityQuestionITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSecurityQuestionITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSecurityQuestionITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSecurityQuestionITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n@@ -30,7 +30,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class SecurityQuestionITCase extends AbstractITCase {\n \n@@ -90,7 +90,7 @@ public void delete() {\n \n         try {\n             securityQuestionService.read(securityQuestion.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }"},{"sha":"d928e3c05869f0aabe6b9d69ec0bbccc434b300f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SwaggerITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSwaggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSwaggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSwaggerITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,9 +18,10 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -30,16 +31,15 @@\n import javax.ws.rs.core.Response;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Assume;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class SwaggerITCase extends AbstractITCase {\n \n     @Test\n     public void swagger() throws IOException {\n         WebClient webClient = WebClient.create(ADDRESS + \"/swagger.json\").accept(MediaType.APPLICATION_JSON_TYPE);\n         Response response = webClient.get();\n-        Assume.assumeTrue(response.getStatus() == 200);\n+        assumeTrue(response.getStatus() == 200);\n \n         JsonNode tree = new ObjectMapper().readTree((InputStream) response.getEntity());\n         assertNotNull(tree);"},{"sha":"f406c0e8bd5e045d67b2be5475abecba6715ffc3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":83,"deletions":68,"changes":151,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,12 +18,14 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n import java.security.AccessControlException;\n import java.util.Collections;\n@@ -83,8 +85,7 @@\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.FlowableDetector;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n-import org.junit.Assume;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class UserITCase extends AbstractITCase {\n \n@@ -152,7 +153,7 @@ public void enforceMandatoryCondition() {\n \n         try {\n             userTO = createUser(userTO).getEntity();\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n@@ -180,7 +181,7 @@ public void enforceMandatoryConditionOnDerived() {\n \n             try {\n                 userTO = createUser(userTO).getEntity();\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n             }\n@@ -205,50 +206,60 @@ public void createUserWithDbPropagation() {\n         assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n     }\n \n-    @Test(expected = SyncopeClientException.class)\n+    @Test\n     public void createWithInvalidPassword() {\n-        UserTO userTO = getSampleTO(\"invalidpasswd@syncope.apache.org\");\n-        userTO.setPassword(\"pass\");\n-        createUser(userTO);\n+        assertThrows(SyncopeClientException.class, () -> {\n+            UserTO userTO = getSampleTO(\"invalidpasswd@syncope.apache.org\");\n+            userTO.setPassword(\"pass\");\n+            createUser(userTO);\n+        });\n     }\n \n-    @Test(expected = SyncopeClientException.class)\n+    @Test\n     public void createWithInvalidUsername() {\n-        UserTO userTO = getSampleTO(\"invalidusername@syncope.apache.org\");\n-        userTO.setUsername(\"us\");\n-        userTO.setRealm(\"/odd\");\n+        assertThrows(SyncopeClientException.class, () -> {\n+            UserTO userTO = getSampleTO(\"invalidusername@syncope.apache.org\");\n+            userTO.setUsername(\"us\");\n+            userTO.setRealm(\"/odd\");\n \n-        createUser(userTO);\n+            createUser(userTO);\n+        });\n     }\n \n-    @Test(expected = SyncopeClientException.class)\n+    @Test\n     public void createWithInvalidPasswordByRes() {\n-        UserTO userTO = getSampleTO(\"invalidPwdByRes@passwd.com\");\n+        assertThrows(SyncopeClientException.class, () -> {\n+            UserTO userTO = getSampleTO(\"invalidPwdByRes@passwd.com\");\n \n-        // configured to be minLength=16\n-        userTO.setPassword(\"password1\");\n-        userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION);\n-        createUser(userTO);\n+            // configured to be minLength=16\n+            userTO.setPassword(\"password1\");\n+            userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION);\n+            createUser(userTO);\n+        });\n     }\n \n-    @Test(expected = SyncopeClientException.class)\n+    @Test\n     public void createWithInvalidPasswordByGroup() {\n-        UserTO userTO = getSampleTO(\"invalidPwdByGroup@passwd.com\");\n+        assertThrows(SyncopeClientException.class, () -> {\n+            UserTO userTO = getSampleTO(\"invalidPwdByGroup@passwd.com\");\n \n-        // configured to be minLength=16\n-        userTO.setPassword(\"password1\");\n+            // configured to be minLength=16\n+            userTO.setPassword(\"password1\");\n \n-        userTO.getMemberships().add(new MembershipTO.Builder().\n-                group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n+            userTO.getMemberships().add(new MembershipTO.Builder().\n+                    group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n-        createUser(userTO);\n+            createUser(userTO);\n+        });\n     }\n \n-    @Test(expected = SyncopeClientException.class)\n+    @Test\n     public void createWithException() {\n-        UserTO newUserTO = new UserTO();\n-        newUserTO.getPlainAttrs().add(attrTO(\"userId\", \"userId@nowhere.org\"));\n-        createUser(newUserTO);\n+        assertThrows(SyncopeClientException.class, () -> {\n+            UserTO newUserTO = new UserTO();\n+            newUserTO.getPlainAttrs().add(attrTO(\"userId\", \"userId@nowhere.org\"));\n+            createUser(newUserTO);\n+        });\n     }\n \n     @Test\n@@ -337,7 +348,7 @@ public void create() {\n \n         try {\n             createUser(userTO);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n         }\n@@ -356,7 +367,7 @@ public void createWithRequiredValueMissing() {\n         // 1. create user without type (mandatory by UserSchema)\n         try {\n             createUser(userTO);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n@@ -369,7 +380,7 @@ public void createWithRequiredValueMissing() {\n         // 2. create user without surname (mandatory when type == 'F')\n         try {\n             createUser(userTO);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n@@ -492,33 +503,37 @@ public void updateWithoutPassword() {\n         assertFalse(userTO.getPlainAttr(\"ctype\").isPresent());\n     }\n \n-    @Test(expected = SyncopeClientException.class)\n+    @Test\n     public void updateInvalidPassword() {\n-        UserTO userTO = getSampleTO(\"updateinvalid@password.com\");\n+        assertThrows(SyncopeClientException.class, () -> {\n+            UserTO userTO = getSampleTO(\"updateinvalid@password.com\");\n \n-        userTO = createUser(userTO).getEntity();\n-        assertNotNull(userTO);\n+            userTO = createUser(userTO).getEntity();\n+            assertNotNull(userTO);\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"pass\").build());\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(userTO.getKey());\n+            userPatch.setPassword(new PasswordPatch.Builder().value(\"pass\").build());\n \n-        userService.update(userPatch);\n+            userService.update(userPatch);\n+        });\n     }\n \n-    @Test(expected = SyncopeClientException.class)\n+    @Test\n     public void updateSamePassword() {\n-        UserTO userTO = getUniqueSampleTO(\"updatesame@password.com\");\n-        userTO.setRealm(\"/even/two\");\n+        assertThrows(SyncopeClientException.class, () -> {\n+            UserTO userTO = getUniqueSampleTO(\"updatesame@password.com\");\n+            userTO.setRealm(\"/even/two\");\n \n-        userTO = createUser(userTO).getEntity();\n-        assertNotNull(userTO);\n+            userTO = createUser(userTO).getEntity();\n+            assertNotNull(userTO);\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"password123\").build());\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(userTO.getKey());\n+            userPatch.setPassword(new PasswordPatch.Builder().value(\"password123\").build());\n \n-        userService.update(userPatch);\n+            userService.update(userPatch);\n+        });\n     }\n \n     @Test\n@@ -683,7 +698,7 @@ public void verifyTaskRegistration() {\n \n     @Test\n     public void createActivate() {\n-        Assume.assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n \n         UserTO userTO = getUniqueSampleTO(\"createActivate@syncope.apache.org\");\n \n@@ -921,7 +936,7 @@ public void customPolicyRules() {\n         // org.apache.syncope.common.lib.policy.AbstractAccountRuleConf's and / or\n         // org.apache.syncope.common.lib.policy.AbstractPasswordRuleConf's\n         // @XmlSeeAlso - the power of JAXB :-/\n-        Assume.assumeTrue(MediaType.APPLICATION_JSON_TYPE.equals(clientFactory.getContentType().getMediaType()));\n+        assumeTrue(MediaType.APPLICATION_JSON_TYPE.equals(clientFactory.getContentType().getMediaType()));\n \n         AccountPolicyTO accountPolicy = new AccountPolicyTO();\n         accountPolicy.setDescription(\"Account Policy with custom rules\");\n@@ -947,7 +962,7 @@ public void customPolicyRules() {\n             user.setRealm(realm.getFullPath());\n             try {\n                 createUser(user);\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.InvalidUser, e.getType());\n                 assertTrue(e.getElements().iterator().next().startsWith(\"InvalidPassword\"));\n@@ -956,7 +971,7 @@ public void customPolicyRules() {\n             user.setPassword(user.getPassword() + \"XXX\");\n             try {\n                 createUser(user);\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.InvalidUser, e.getType());\n                 assertTrue(e.getElements().iterator().next().startsWith(\"InvalidUsername\"));\n@@ -1064,7 +1079,7 @@ public void link() {\n \n         try {\n             resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             assertNotNull(e);\n         }\n@@ -1082,7 +1097,7 @@ public void link() {\n \n         try {\n             resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             assertNotNull(e);\n         }\n@@ -1114,7 +1129,7 @@ public void unassign() {\n \n         try {\n             resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             assertNotNull(e);\n         }\n@@ -1134,7 +1149,7 @@ public void assign() {\n \n         try {\n             resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             assertNotNull(e);\n         }\n@@ -1179,7 +1194,7 @@ public void deprovision() {\n \n         try {\n             resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -1199,7 +1214,7 @@ public void provision() {\n \n         try {\n             resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             assertNotNull(e);\n         }\n@@ -1232,7 +1247,7 @@ public void deprovisionUnlinked() {\n \n         try {\n             resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             assertNotNull(e);\n         }\n@@ -1263,7 +1278,7 @@ public void deprovisionUnlinked() {\n \n         try {\n             resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (Exception e) {\n             assertNotNull(e);\n         }"},{"sha":"a7207cebc5b478a2f31be229a6926623e4f16218","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,13 +18,13 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.IOException;\n import java.util.Base64;\n@@ -74,16 +74,13 @@\n import org.apache.syncope.fit.core.reference.DoubleValueLogicActions;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.dao.EmptyResultDataAccessException;\n import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:testJDBCEnv.xml\" })\n+@SpringJUnitConfig(locations = { \"classpath:testJDBCEnv.xml\" })\n public class UserIssuesITCase extends AbstractITCase {\n \n     @Autowired\n@@ -115,7 +112,7 @@ public void issue186() {\n \n         try {\n             userTO = updateUser(userPatch).getEntity();\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n@@ -247,7 +244,7 @@ public void issue288() {\n \n         try {\n             createUser(userTO);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidValues, e.getType());\n         }\n@@ -709,7 +706,7 @@ public void issueSYNCOPE357() throws IOException {\n         // 5. try to read user on resource: fail\n         try {\n             resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -1136,7 +1133,7 @@ public void issueSYNCOPE391() {\n \n             userTO.getResources().add(RESOURCE_NAME_CSV);\n             createUser(userTO, false);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidUser, e.getType());\n             assertTrue(e.getMessage().contains(\"Password mandatory\"));\n@@ -1203,7 +1200,7 @@ public void issueSYNCOPE626() {\n             user.setPassword(user.getUsername());\n             try {\n                 createUser(user);\n-                fail();\n+                fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.InvalidUser, e.getType());\n                 assertTrue(e.getElements().iterator().next().startsWith(\"InvalidPassword\"));"},{"sha":"565b04324e32ad9b6829d1dafb4fc23c0366de18","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":22,"deletions":25,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,13 +18,14 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n import java.util.Map;\n import java.util.Set;\n@@ -53,16 +54,12 @@\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.FlowableDetector;\n-import org.junit.Assume;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:testJDBCEnv.xml\" })\n+@SpringJUnitConfig(locations = { \"classpath:testJDBCEnv.xml\" })\n public class UserSelfITCase extends AbstractITCase {\n \n     @Autowired\n@@ -75,12 +72,12 @@ public void selfRegistrationAllowed() {\n \n     @Test\n     public void create() {\n-        Assume.assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n \n         // 1. self-registration as admin: failure\n         try {\n             userSelfService.create(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"), true);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (ForbiddenException e) {\n             assertNotNull(e);\n         }\n@@ -97,7 +94,7 @@ public void create() {\n \n     @Test\n     public void createAndApprove() {\n-        Assume.assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n \n         // self-create user with membership: goes 'createApproval' with resources and membership but no propagation\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\");\n@@ -117,7 +114,7 @@ public void createAndApprove() {\n \n         try {\n             resourceService.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userTO.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -138,7 +135,7 @@ public void read() {\n \n         try {\n             userService2.read(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (ForbiddenException e) {\n             assertNotNull(e);\n         }\n@@ -182,7 +179,7 @@ public void updateWithoutApproval() {\n \n     @Test\n     public void updateWithApproval() {\n-        Assume.assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n \n         // 1. create user as admin\n         UserTO created = createUser(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).getEntity();\n@@ -215,7 +212,7 @@ public void updateWithApproval() {\n         assertTrue(updated.getResources().isEmpty());\n         try {\n             resourceService.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), updated.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -282,7 +279,7 @@ public void passwordReset() {\n         SyncopeClient anonClient = clientFactory.create();\n         try {\n             anonClient.getService(UserSelfService.class).requestPasswordReset(user.getUsername(), \"WRONG\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidSecurityAnswer, e.getType());\n         }\n@@ -295,7 +292,7 @@ public void passwordReset() {\n         // 5. confirm password reset\n         try {\n             anonClient.getService(UserSelfService.class).confirmPasswordReset(\"WRONG TOKEN\", \"newPassword\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n             assertTrue(e.getMessage().contains(\"WRONG TOKEN\"));\n@@ -340,7 +337,7 @@ public void passwordResetWithoutSecurityQuestion() {\n         // 5. confirm password reset\n         try {\n             anonClient.getService(UserSelfService.class).confirmPasswordReset(\"WRONG TOKEN\", \"newPassword\");\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n             assertTrue(e.getMessage().contains(\"WRONG TOKEN\"));\n@@ -380,7 +377,7 @@ public void mustChangePassword() {\n         // 2. attempt to access -> fail\n         try {\n             vivaldiClient.getService(ResourceService.class).list();\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (ForbiddenException e) {\n             assertNotNull(e);\n             assertEquals(\"Please change your password first\", e.getMessage());"},{"sha":"ceffc32f827a25344a3683820feffe47e8f48adb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserWorkflowITCase.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -20,12 +20,13 @@\n \n import org.apache.syncope.fit.FlowableDetector;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n import java.util.Collections;\n import java.util.List;\n@@ -48,25 +49,21 @@\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserWorkflowService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Assume;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.dao.EmptyResultDataAccessException;\n import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:testJDBCEnv.xml\" })\n+@SpringJUnitConfig(locations = { \"classpath:testJDBCEnv.xml\" })\n public class UserWorkflowITCase extends AbstractITCase {\n \n     @Autowired\n     private DataSource testDataSource;\n \n     @Test\n     public void createWithReject() {\n-        Assume.assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n \n         UserTO userTO = UserITCase.getUniqueSampleTO(\"createWithReject@syncope.apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n@@ -106,7 +103,7 @@ public void createWithReject() {\n                 getService(UserWorkflowService.class);\n         try {\n             userService2.claimForm(form.getTaskId());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.Workflow, e.getType());\n         }\n@@ -140,7 +137,7 @@ public void createWithReject() {\n \n     @Test\n     public void createWithApproval() {\n-        Assume.assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n \n         // read forms *before* any operation\n         List<WorkflowFormTO> forms = userWorkflowService.getForms();\n@@ -226,7 +223,7 @@ public void createWithApproval() {\n \n     @Test\n     public void updateApproval() {\n-        Assume.assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n \n         // read forms *before* any operation\n         List<WorkflowFormTO> forms = userWorkflowService.getForms();\n@@ -284,7 +281,7 @@ public void updateApproval() {\n \n     @Test\n     public void issueSYNCOPE15() {\n-        Assume.assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n \n         // read forms *before* any operation\n         List<WorkflowFormTO> forms = userWorkflowService.getForms();"},{"sha":"d7161f7f3d67c258c052ccca89d846f5c2158ce7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirAttrITCase.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n import java.util.Locale;\n@@ -61,15 +61,12 @@\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:testJDBCEnv.xml\" })\n+@SpringJUnitConfig(locations = { \"classpath:testJDBCEnv.xml\" })\n public class VirAttrITCase extends AbstractITCase {\n \n     @Autowired\n@@ -679,7 +676,7 @@ public void issueSYNCOPE691() {\n             assertNotNull(userTO);\n             assertTrue(ldap.getKey().equals(userTO.getResources().iterator().next()));\n \n-            assertEquals(2, userTO.getVirAttrs().iterator().next().getValues().size(), 0);\n+            assertEquals(2, userTO.getVirAttrs().iterator().next().getValues().size());\n             assertTrue(userTO.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom1.org\"));\n             assertTrue(userTO.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom2.org\"));\n \n@@ -695,7 +692,7 @@ public void issueSYNCOPE691() {\n \n             UserTO updated = updateUser(userPatch).getEntity();\n             assertNotNull(updated);\n-            assertEquals(2, updated.getVirAttrs().iterator().next().getValues().size(), 0);\n+            assertEquals(2, updated.getVirAttrs().iterator().next().getValues().size());\n             assertTrue(updated.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom3.org\"));\n             assertTrue(updated.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom4.org\"));\n         } finally {"},{"sha":"27d4a8eb7974b386f7ce1ea92d4b0c1862d09eab","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirSchemaITCase.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.security.AccessControlException;\n import java.util.List;\n@@ -37,7 +37,7 @@\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n public class VirSchemaITCase extends AbstractITCase {\n \n@@ -79,7 +79,7 @@ public void crud() {\n \n         try {\n             schemaService.read(SchemaType.VIRTUAL, schema.getKey());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n@@ -95,7 +95,7 @@ public void anonymous() {\n         SchemaService unauthenticated = clientFactory.create().getService(SchemaService.class);\n         try {\n             unauthenticated.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n@@ -113,7 +113,7 @@ public void issueSYNCOPE323() {\n \n         try {\n             createSchema(SchemaType.VIRTUAL, actual);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.CONFLICT, e.getType().getResponseStatus());\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n@@ -122,7 +122,7 @@ public void issueSYNCOPE323() {\n         actual.setKey(null);\n         try {\n             createSchema(SchemaType.VIRTUAL, actual);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.BAD_REQUEST, e.getType().getResponseStatus());\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n@@ -144,7 +144,7 @@ public void issueSYNCOPE418() {\n \n         try {\n             createSchema(SchemaType.VIRTUAL, schema);\n-            fail();\n+            fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidVirSchema, e.getType());\n "},{"sha":"3a921f92f1b0a87437b0418f2a302f058c395da3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/WorkflowITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWorkflowITCase.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,9 +18,10 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -32,17 +33,16 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.FlowableDetector;\n-import org.junit.Assume;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n \n public class WorkflowITCase extends AbstractITCase {\n \n     private static String defaultUserKey = null;\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void findDefault() {\n-        Assume.assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n         Optional<WorkflowDefinitionTO> found = workflowService.list(AnyTypeKind.USER.name()).stream().\n                 filter(object -> object.isMain()).findAny();\n         if (found.isPresent()) {\n@@ -53,7 +53,7 @@ public static void findDefault() {\n \n     @Test\n     public void exportUserDefinition() throws IOException {\n-        Assume.assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n         Response response = workflowService.get(AnyTypeKind.USER.name(), defaultUserKey);\n         assertTrue(response.getMediaType().toString().\n                 startsWith(clientFactory.getContentType().getMediaType().toString()));\n@@ -65,7 +65,7 @@ public void exportUserDefinition() throws IOException {\n \n     @Test\n     public void updateUserDefinition() throws IOException {\n-        Assume.assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUsers(syncopeService));\n         Response response = workflowService.get(AnyTypeKind.USER.name(), defaultUserKey);\n         String definition = IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8);\n "},{"sha":"151eedba952eab7e3ce7f4a4827fa311907cb710","filename":"fit/core-reference/src/test/resources/log4j2.xml","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -19,12 +19,19 @@ under the License.\n -->\n <configuration status=\"WARN\" shutdownHook=\"disable\">\n   <appenders>\n-    <console name=\"main\" target=\"SYSTEM_OUT\">\n+    <RollingRandomAccessFile name=\"main\" fileName=\"${log.directory}/it.log\"\n+                             filePattern=\"${log.directory}/it-%d{yyyy-MM-dd}.log.gz\"\n+                             immediateFlush=\"false\" append=\"true\">\n       <PatternLayout>\n         <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>\n       </PatternLayout>\n-    </console>\n+      <Policies>\n+        <TimeBasedTriggeringPolicy/>\n+        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n+      </Policies>\n+    </RollingRandomAccessFile>\n   </appenders>\n+\n   <loggers>\n     <asyncLogger name=\"org.apache.syncope.fit\" additivity=\"false\" level=\"DEBUG\">\n       <appender-ref ref=\"main\"/>"},{"sha":"c9eb188639c1deea07c4690e9be076660e56b9c1","filename":"fit/enduser-reference/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fenduser-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/fit%2Fenduser-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fpom.xml?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -99,8 +99,8 @@ under the License.\n     \n     <!-- TEST -->\n     <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n       <scope>test</scope>\n     </dependency>\n     <dependency>"},{"sha":"b4a45917fd1c095a546813b1832651e2303925dd","filename":"ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/src/main/java/org/apache/syncope/ide/eclipse/tests/SyncopeViewTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.tests%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Ftests%2FSyncopeViewTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.tests%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Ftests%2FSyncopeViewTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.tests%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Ftests%2FSyncopeViewTest.java?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.ide.eclipse.tests;\n \n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import org.eclipse.swtbot.eclipse.finder.SWTWorkbenchBot;\n import org.eclipse.swtbot.eclipse.finder.widgets.SWTBotView;\n@@ -29,7 +29,7 @@\n import org.eclipse.swtbot.swt.finder.widgets.SWTBotShell;\n import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.junit.runner.RunWith;\n \n @RunWith(SWTBotJunit4ClassRunner.class)"},{"sha":"a349edc9fdfcbf9676025dbbce9bf3fcc553bc99","filename":"pom.xml","status":"modified","additions":43,"deletions":3,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45ad6f5595e4063a4840f476616682d49e59d164/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45ad6f5595e4063a4840f476616682d49e59d164/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=45ad6f5595e4063a4840f476616682d49e59d164","patch":"@@ -407,7 +407,7 @@ under the License.\n \n     <h2.version>1.4.196</h2.version>\n \n-    <junit.version>4.12</junit.version>\n+    <junit.version>5.0.0</junit.version>\n \n     <conf.directory>${project.build.directory}/test-classes</conf.directory>\n     <bundles.directory>${project.build.directory}/bundles</bundles.directory>\n@@ -736,6 +736,12 @@ under the License.\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-jdbc</artifactId>\n         <version>${openjpa.version}</version>\n+        <exclusions>\n+          <exclusion>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+          </exclusion>\n+        </exclusions>\n       </dependency>\n       <dependency>\n         <groupId>org.apache.openjpa</groupId>\n@@ -1581,6 +1587,12 @@ under the License.\n         <artifactId>greenmail</artifactId>\n         <version>1.5.5</version>\n         <scope>test</scope>\n+        <exclusions>\n+          <exclusion>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+          </exclusion>\n+        </exclusions>\n       </dependency>\n       <dependency>\n         <groupId>org.bouncycastle</groupId>\n@@ -1595,8 +1607,8 @@ under the License.\n         <scope>test</scope>\n       </dependency>\n       <dependency>\n-        <groupId>junit</groupId>\n-        <artifactId>junit</artifactId>\n+        <groupId>org.junit.jupiter</groupId>\n+        <artifactId>junit-jupiter-engine</artifactId>\n         <version>${junit.version}</version>\n         <scope>test</scope>\n       </dependency>\n@@ -1619,13 +1631,27 @@ under the License.\n       <id>netbeans</id>\n       <url>http://bits.netbeans.org/maven2/</url>\n     </repository>\n+    <repository>\n+      <id>jitpack.io</id>\n+      <url>https://jitpack.io</url>\n+    </repository>\n   </repositories>\n \n   <pluginRepositories>\n     <pluginRepository>\n       <id>apache.snapshots</id>\n       <url>http://repository.apache.org/snapshots</url>\n     </pluginRepository>\n+    <pluginRepository>\n+      <id>sonatype</id>\n+      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n+      <releases>\n+        <enabled>false</enabled>\n+      </releases>\n+      <snapshots>\n+        <enabled>true</enabled>\n+      </snapshots>\n+    </pluginRepository>\n   </pluginRepositories>\n \n   <build>\n@@ -1801,6 +1827,13 @@ under the License.\n             <runOrder>alphabetical</runOrder>\n             <argLine>-Xms512m -Xmx1024m -Xss256k</argLine>\n           </configuration>\n+          <dependencies>\n+            <dependency>\n+              <groupId>org.junit.platform</groupId>\n+              <artifactId>junit-platform-surefire-provider</artifactId>\n+              <version>1.1.0-SNAPSHOT</version>\n+            </dependency>\n+          </dependencies>\n         </plugin>\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n@@ -1812,6 +1845,13 @@ under the License.\n             <runOrder>alphabetical</runOrder>\n             <argLine>-Xms512m -Xmx1024m -Xss256k</argLine>\n           </configuration>\n+          <dependencies>\n+            <dependency>\n+              <groupId>org.junit.platform</groupId>\n+              <artifactId>junit-platform-surefire-provider</artifactId>\n+              <version>1.1.0-SNAPSHOT</version>\n+            </dependency>\n+          </dependencies>\n           <executions>\n             <execution>\n               <goals>"}]}