{"sha":"f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYyOGQ4ZmMxMGJjZGIwMWFmMThjZDVmN2RiZGI0ZjdjNWNlYTRhNzA=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-22T13:23:51Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-22T13:23:51Z"},"message":"[SYNCOPE-231]\n* Added SchemaService implementation\n* Adding JAX-B Annotations for related TOs\n* Changes create response from CXF Services\n* Code cleanup (according to checkstyle and PMD)\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1436899 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ccb038b6e7dcb4ea4d51c162e15ca93ccf6ed8c3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ccb038b6e7dcb4ea4d51c162e15ca93ccf6ed8c3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/comments","author":null,"committer":null,"parents":[{"sha":"dc713ac159f877e6f9d8134eaf439719648da017","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dc713ac159f877e6f9d8134eaf439719648da017","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dc713ac159f877e6f9d8134eaf439719648da017"}],"stats":{"total":444,"additions":355,"deletions":89},"files":[{"sha":"c737f4b4b639d74f5a32a13c6edf05bec296d1c0","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ConfigurationServiceProxy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -45,7 +45,7 @@ public Response create(final ConfigurationTO configurationTO) {\n         ConfigurationTO created = getRestTemplate().postForObject(baseUrl + \"configuration/create\",\r\n                 configurationTO, ConfigurationTO.class);\r\n         URI location = URI.create(baseUrl + \"configuration/read/\" + created.getKey() + \".json\");\r\n-        return Response.created(location).entity(created).build();\r\n+        return Response.created(location).build();\r\n     }\r\n \r\n     @Override\r"},{"sha":"41d9c6e84b643a6d9c3061e35996664e4c38d281","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ConnectorServiceProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -42,8 +42,8 @@ public ConnectorServiceProxy(final String baseUrl, final RestTemplate restTempla\n     public Response create(final ConnInstanceTO connectorTO) {\r\n         ConnInstanceTO response = getRestTemplate().postForObject(baseUrl + \"connector/create.json\", connectorTO,\r\n                 ConnInstanceTO.class);\r\n-        URI location = URI.create(baseUrl + \"connector/read\" + response.getId());\r\n-        return Response.created(location).entity(response).build();\r\n+        URI location = URI.create(baseUrl + \"connector/read/\" + response.getId() + \".json\");\r\n+        return Response.created(location).build();\r\n     }\r\n \r\n     @Override\r"},{"sha":"b926192055fdeafdb17e0dbdc8fa279804bf785f","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SchemaServiceProxy.java","status":"modified","additions":13,"deletions":7,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -18,9 +18,12 @@\n  */\r\n package org.apache.syncope.client.services.proxy;\r\n \r\n+import java.net.URI;\r\n import java.util.Arrays;\r\n import java.util.List;\r\n \r\n+import javax.ws.rs.core.Response;\r\n+\r\n import org.apache.syncope.common.services.SchemaService;\r\n import org.apache.syncope.common.to.AbstractSchemaTO;\r\n import org.apache.syncope.common.to.DerivedSchemaTO;\r\n@@ -37,15 +40,18 @@ public SchemaServiceProxy(final String baseUrl, final RestTemplate restTemplate)\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T create(final AttributableType kind, final SchemaType type, final T schemaTO) {\r\n-        return (T) getRestTemplate().postForObject(baseUrl + type + \"/{kind}/create\", schemaTO, getTOClass(type), kind);\r\n+    public <T extends AbstractSchemaTO> Response create(final AttributableType kind, final SchemaType type,\r\n+            final T schemaTO) {\r\n+        AbstractSchemaTO schema = getRestTemplate().postForObject(baseUrl + type + \"/{kind}/create\", schemaTO,\r\n+                getTOClass(type), kind);\r\n+        return Response.created(URI.create(baseUrl + type + \"/\" + kind + \"/read/\" + schema.getName() + \".json\"))\r\n+                .build();\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T delete(final AttributableType kind, final SchemaType type,\r\n-            final String schemaName) {\r\n+    public void delete(final AttributableType kind, final SchemaType type, final String schemaName) {\r\n \r\n-        return (T) getRestTemplate().getForObject(baseUrl + type + \"/{kind}/delete/{name}.json\", getTOClass(type), kind,\r\n+        getRestTemplate().getForObject(baseUrl + type + \"/{kind}/delete/{name}.json\", getTOClass(type), kind,\r\n                 schemaName);\r\n     }\r\n \r\n@@ -78,10 +84,10 @@ public <T extends AbstractSchemaTO> T read(final AttributableType kind, final Sc\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T update(final AttributableType kind, final SchemaType type,\r\n+    public <T extends AbstractSchemaTO> void update(final AttributableType kind, final SchemaType type,\r\n             final String schemaName, final T schemaTO) {\r\n \r\n-        return (T) getRestTemplate().postForObject(baseUrl + type + \"/{kind}/update\", schemaTO, getTOClass(type), kind);\r\n+        getRestTemplate().postForObject(baseUrl + type + \"/{kind}/update\", schemaTO, getTOClass(type), kind);\r\n     }\r\n \r\n     private Class<? extends AbstractSchemaTO> getTOClass(final SchemaType type) {\r"},{"sha":"26230720b8f32d5c53f94560ff211f1edb05c326","filename":"client/src/test/java/org/apache/syncope/client/test/JSONTest.java","status":"modified","additions":16,"deletions":12,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.common.search.AttributeCond;\n import org.apache.syncope.common.search.MembershipCond;\n import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.to.ReportTO;\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n@@ -49,8 +50,8 @@ public void testSearchCondition() throws IOException {\n         final MembershipCond membershipCond = new MembershipCond();\n         membershipCond.setRoleName(\"root\");\n \n-        final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(usernameCond), NodeCond.getLeafCond(\n-                membershipCond));\n+        final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(usernameCond),\n+                NodeCond.getLeafCond(membershipCond));\n \n         assertTrue(searchCondition.isValid());\n \n@@ -66,21 +67,24 @@ public void testSearchCondition() throws IOException {\n     @Test\n     public void testLists() throws IOException {\n \n-        List<SchemaTO> schemas = new ArrayList<SchemaTO>();\n-        SchemaTO schemaTO = new SchemaTO();\n-        schemaTO.setName(\"name1\");\n-        schemas.add(schemaTO);\n-        schemaTO = new SchemaTO();\n-        schemaTO.setName(\"name2\");\n-        schemas.add(schemaTO);\n+        List<ConfigurationTO> confList = new ArrayList<ConfigurationTO>();\n+        ConfigurationTO configuration = new ConfigurationTO();\n+        configuration.setKey(\"key1\");\n+        configuration.setValue(\"value1\");\n+        confList.add(configuration);\n+        configuration = new ConfigurationTO();\n+        configuration.setKey(\"key2\");\n+        configuration.setValue(\"value2\");\n+        confList.add(configuration);\n \n         ObjectMapper mapper = new ObjectMapper();\n \n         StringWriter writer = new StringWriter();\n-        mapper.writeValue(writer, schemas);\n+        mapper.writeValue(writer, confList);\n \n-        List<SchemaTO> unserializedSchemas = Arrays.asList(mapper.readValue(writer.toString(), SchemaTO[].class));\n-        for (SchemaTO unserializedSchema : unserializedSchemas) {\n+        List<ConfigurationTO> unserializedSchemas = Arrays.asList(mapper.readValue(writer.toString(),\n+                ConfigurationTO[].class));\n+        for (ConfigurationTO unserializedSchema : unserializedSchemas) {\n             assertNotNull(unserializedSchema);\n         }\n     }"},{"sha":"a009767ca16b58785c8a4f2fa984f772f45af014","filename":"common/src/main/java/org/apache/syncope/common/services/SchemaService.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -26,13 +26,16 @@\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n \r\n import org.apache.syncope.common.to.AbstractSchemaTO;\r\n import org.apache.syncope.common.types.AttributableType;\r\n \r\n @Path(\"schemas/{kind}/{type}\")\r\n public interface SchemaService {\r\n \r\n+    @XmlEnum\r\n     enum SchemaType {\r\n \r\n         NORMAL(\"schema\"),\r\n@@ -49,16 +52,20 @@ private SchemaType(String name) {\n         public String toString() {\r\n             return name;\r\n         }\r\n+\r\n+        public static SchemaType fromString(String value) {\r\n+            return valueOf(value.toUpperCase());\r\n+        }\r\n     }\r\n \r\n     @POST\r\n-    <T extends AbstractSchemaTO> T create(@PathParam(\"kind\") AttributableType kind,\r\n+    <T extends AbstractSchemaTO> Response create(@PathParam(\"kind\") AttributableType kind,\r\n             @PathParam(\"type\") SchemaType type,\r\n             T schemaTO);\r\n \r\n     @DELETE\r\n     @Path(\"{name}\")\r\n-    <T extends AbstractSchemaTO> T delete(@PathParam(\"kind\") AttributableType kind,\r\n+    void delete(@PathParam(\"kind\") AttributableType kind,\r\n             @PathParam(\"type\") SchemaType type,\r\n             @PathParam(\"name\") String schemaName);\r\n \r\n@@ -74,7 +81,7 @@ <T extends AbstractSchemaTO> T read(@PathParam(\"kind\") AttributableType kind,\n \r\n     @PUT\r\n     @Path(\"{name}\")\r\n-    <T extends AbstractSchemaTO> T update(@PathParam(\"kind\") AttributableType kind,\r\n+    <T extends AbstractSchemaTO> void update(@PathParam(\"kind\") AttributableType kind,\r\n             @PathParam(\"type\") SchemaType type,\r\n             @PathParam(\"name\") String schemaName,\r\n             T schemaTO);\r"},{"sha":"d81105a7111758e107ce1e78fc6208c4247a7f37","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractSchemaTO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -18,11 +18,16 @@\n  */\r\n package org.apache.syncope.common.to;\r\n \r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlSeeAlso;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n import org.apache.syncope.common.AbstractBaseBean;\r\n \r\n+@XmlRootElement(name = \"abstractSchema\")\r\n @XmlType\r\n+@XmlSeeAlso({SchemaTO.class, DerivedSchemaTO.class, VirtualSchemaTO.class})\r\n+//@JsonTypeInfo(use=Id.CLASS, include=As.PROPERTY, property=\"class\")\r\n public abstract class AbstractSchemaTO extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = 4088388951694301759L;\r"},{"sha":"d00680dc247ad6f0711ec23be00d5584116c53cc","filename":"common/src/main/java/org/apache/syncope/common/to/DerivedSchemaTO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerivedSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerivedSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerivedSchemaTO.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -18,7 +18,11 @@\n  */\r\n package org.apache.syncope.common.to;\r\n \r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n \r\n+@XmlRootElement(name = \"derivedSchema\")\r\n+@XmlType\r\n public class DerivedSchemaTO extends AbstractSchemaTO {\r\n \r\n     private static final long serialVersionUID = -6747399803792103108L;\r"},{"sha":"846da5f53245894871815ccf4e05094671dc8f02","filename":"common/src/main/java/org/apache/syncope/common/to/VirtualSchemaTO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirtualSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirtualSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirtualSchemaTO.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -18,6 +18,9 @@\n  */\r\n package org.apache.syncope.common.to;\r\n \r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+\r\n+@XmlRootElement(name = \"virtualSchema\")\r\n public class VirtualSchemaTO extends AbstractSchemaTO {\r\n \r\n     private static final long serialVersionUID = -8198557479659701343L;\r"},{"sha":"fac99e651f84b2b4df9b7514475a0db4db3fb457","filename":"common/src/main/java/org/apache/syncope/common/types/AttributableType.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributableType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributableType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributableType.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -18,10 +18,17 @@\n  */\r\n package org.apache.syncope.common.types;\r\n \r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n public enum AttributableType {\r\n \r\n     USER,\r\n     ROLE,\r\n     MEMBERSHIP;\r\n \r\n+    public static AttributableType fromString(String value) {\r\n+        return valueOf(value.toUpperCase());\r\n+    }\r\n+\r\n }\r"},{"sha":"4aea46e58db66ec4dde78f8122e91451da5e0a93","filename":"common/src/main/java/org/apache/syncope/common/types/SchemaType.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -18,6 +18,9 @@\n  */\r\n package org.apache.syncope.common.types;\r\n \r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n public enum SchemaType {\r\n \r\n     String(\"java.lang.String\"),\r"},{"sha":"c63a04855f33c6889c1d4e613ef03afbc9d54299","filename":"console/src/main/java/org/apache/syncope/console/rest/ConfigurationRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -47,7 +47,7 @@ public ConfigurationTO readConfiguration(final String key) {\n      *\n      * @param configurationTO\n      */\n-    public void createConfiguration(ConfigurationTO configurationTO) {\n+    public void createConfiguration(final ConfigurationTO configurationTO) {\n         getService(ConfigurationService.class).create(configurationTO);\n     }\n "},{"sha":"12beaa8a39708113be8d7a9b8f6ded692bce9ecc","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -86,7 +86,7 @@ public void update(final ConnInstanceTO connectorTO) {\n         getService(ConnectorService.class).update(connectorTO.getId(), connectorTO);\n     }\n \n-    public ConnInstanceTO delete(Long id) {\n+    public ConnInstanceTO delete(final Long id) {\n         ConnInstanceTO instanceTO = getService(ConnectorService.class).read(id);\n         getService(ConnectorService.class).delete(id);\n         return instanceTO;"},{"sha":"4e3e357519a263d1f25a310ef024f91e78a27ca8","filename":"console/src/main/java/org/apache/syncope/console/rest/SchemaRestClient.java","status":"modified","additions":12,"deletions":6,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -189,7 +189,7 @@ public SchemaTO readSchema(final AttributableType type, final String name) {\n      *\n      * @param schemaTO updated\n      */\n-    public void updateSchema(final AttributableType type, SchemaTO schemaTO) {\n+    public void updateSchema(final AttributableType type, final SchemaTO schemaTO) {\n         getService(SchemaService.class).update(type, SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n     }\n \n@@ -199,8 +199,10 @@ public void updateSchema(final AttributableType type, SchemaTO schemaTO) {\n      * @param name (e.g.:surname)\n      * @return schemaTO\n      */\n-    public SchemaTO deleteSchema(final AttributableType type, String name) {\n-        return getService(SchemaService.class).delete(type, SchemaType.NORMAL, name);\n+    public SchemaTO deleteSchema(final AttributableType type, final String name) {\n+        SchemaTO response = getService(SchemaService.class).read(type, SchemaType.NORMAL, name);\n+        getService(SchemaService.class).delete(type, SchemaType.NORMAL, name);\n+        return response;\n     }\n \n     /**\n@@ -260,8 +262,10 @@ public void updateVirtualSchema(final AttributableType type, final VirtualSchema\n      *\n      * @param name (e.g.:surname)\n      */\n-    public DerivedSchemaTO deleteDerivedSchema(final AttributableType type, String name) {\n-        return getService(SchemaService.class).delete(type, SchemaType.DERIVED, name);\n+    public DerivedSchemaTO deleteDerivedSchema(final AttributableType type, final String name) {\n+        DerivedSchemaTO schemaTO = getService(SchemaService.class).read(type, SchemaType.DERIVED, name);\n+        getService(SchemaService.class).delete(type, SchemaType.DERIVED, name);\n+        return schemaTO;\n     }\n \n     /**\n@@ -270,7 +274,9 @@ public DerivedSchemaTO deleteDerivedSchema(final AttributableType type, String n\n      * @param name (e.g.:surname)\n      */\n     public VirtualSchemaTO deleteVirtualSchema(final AttributableType type, final String name) {\n-        return getService(SchemaService.class).delete(type, SchemaType.VIRTUAL, name);\n+        VirtualSchemaTO schemaTO = getService(SchemaService.class).read(type, SchemaType.VIRTUAL, name);\n+        getService(SchemaService.class).delete(type, SchemaType.VIRTUAL, name);\n+        return schemaTO;\n     }\n \n     /**"},{"sha":"540ee6c95b5b3dba37e2f1d69a338560040a908e","filename":"core/src/main/java/org/apache/syncope/core/services/ConfigurationServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -48,7 +48,7 @@ public class ConfigurationServiceImpl implements ConfigurationService, ContextAw\n     public Response create(final ConfigurationTO configurationTO) {\r\n         ConfigurationTO created = configurationController.create(new DummyHTTPServletResponse(), configurationTO);\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(created.getKey()).build();\r\n-        return Response.created(location).entity(created).build();\r\n+        return Response.created(location).build();\r\n     }\r\n \r\n     @Override\r\n@@ -83,7 +83,7 @@ public List<ConfigurationTO> list() {\n     }\r\n \r\n     @Override\r\n-    public ConfigurationTO read(String key) {\r\n+    public ConfigurationTO read(final String key) {\r\n         try {\r\n             return configurationController.read(null, key);\r\n         } catch (MissingConfKeyException e) {\r\n@@ -92,7 +92,7 @@ public ConfigurationTO read(String key) {\n     }\r\n \r\n     @Override\r\n-    public ConfigurationTO update(String key, ConfigurationTO configurationTO) {\r\n+    public ConfigurationTO update(final String key, final ConfigurationTO configurationTO) {\r\n         try {\r\n             return configurationController.update(null, configurationTO);\r\n         } catch (MissingConfKeyException e) {\r\n@@ -101,7 +101,7 @@ public ConfigurationTO update(String key, ConfigurationTO configurationTO) {\n     }\r\n \r\n     @Override\r\n-    public void setUriInfo(UriInfo ui) {\r\n+    public void setUriInfo(final UriInfo ui) {\r\n         this.uriInfo = ui;\r\n     }\r\n }\r"},{"sha":"660cec51fba65bf690fe679cca139feb3e6bf017","filename":"core/src/main/java/org/apache/syncope/core/services/ConnectorServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -51,7 +51,7 @@ public Response create(final ConnInstanceTO connectorTO) {\n         try {\r\n             ConnInstanceTO connector = connectorController.create(new DummyHTTPServletResponse(), connectorTO);\r\n             URI location = uriInfo.getAbsolutePathBuilder().path(connector.getId() + \"\").build();\r\n-            return Response.created(location).entity(connector).build();\r\n+            return Response.created(location).build();\r\n         } catch (SyncopeClientCompositeErrorException e) {\r\n             throw new BadRequestException(e);\r\n         } catch (NotFoundException e) {\r"},{"sha":"eb91fe189e939ad75ecc9d6945c381b379daccbd","filename":"core/src/main/java/org/apache/syncope/core/services/SchemaServiceImpl.java","status":"added","additions":170,"deletions":0,"changes":170,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -0,0 +1,170 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.core.services;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.BadRequestException;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.UriInfo;\r\n+\r\n+import org.apache.syncope.common.services.SchemaService;\r\n+import org.apache.syncope.common.to.AbstractSchemaTO;\r\n+import org.apache.syncope.common.to.DerivedSchemaTO;\r\n+import org.apache.syncope.common.to.SchemaTO;\r\n+import org.apache.syncope.common.to.VirtualSchemaTO;\r\n+import org.apache.syncope.common.types.AttributableType;\r\n+import org.apache.syncope.core.rest.controller.DerivedSchemaController;\r\n+import org.apache.syncope.core.rest.controller.SchemaController;\r\n+import org.apache.syncope.core.rest.controller.VirtualSchemaController;\r\n+import org.apache.syncope.core.util.NotFoundException;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+@Service\r\n+public class SchemaServiceImpl implements SchemaService, ContextAware {\r\n+\r\n+    @Autowired\r\n+    private SchemaController normalSchemaController;\r\n+\r\n+    @Autowired\r\n+    private DerivedSchemaController derivedSchemaController;\r\n+\r\n+    @Autowired\r\n+    private VirtualSchemaController virtualSchemaController;\r\n+\r\n+    private UriInfo uriInfo;\r\n+\r\n+    @Override\r\n+    public <T extends AbstractSchemaTO> Response create(final AttributableType kind, final SchemaType type,\r\n+            final T schemaTO) {\r\n+        AbstractSchemaTO response;\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                response = normalSchemaController.create(new DummyHTTPServletResponse(), (SchemaTO) schemaTO,\r\n+                        kind.toString());\r\n+                break;\r\n+\r\n+            case DERIVED:\r\n+                response = derivedSchemaController.create(new DummyHTTPServletResponse(), (DerivedSchemaTO) schemaTO,\r\n+                        kind.toString());\r\n+                break;\r\n+\r\n+            case VIRTUAL:\r\n+                response = virtualSchemaController.create(new DummyHTTPServletResponse(), (VirtualSchemaTO) schemaTO,\r\n+                        kind.toString());\r\n+                break;\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n+        }\r\n+        URI location = uriInfo.getAbsolutePathBuilder().path(response.getName()).build();\r\n+        return Response.created(location).build();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final AttributableType kind, final SchemaType type, final String schemaName) {\r\n+        try {\r\n+            switch (type) {\r\n+                case NORMAL:\r\n+                    normalSchemaController.delete(kind.toString(), schemaName);\r\n+\r\n+                case DERIVED:\r\n+                    derivedSchemaController.delete(kind.toString(), schemaName);\r\n+\r\n+                case VIRTUAL:\r\n+                    virtualSchemaController.delete(kind.toString(), schemaName);\r\n+\r\n+                default:\r\n+                    throw new BadRequestException();\r\n+            }\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    @Override\r\n+    public <T extends AbstractSchemaTO> List<T> list(final AttributableType kind, final SchemaType type) {\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                return (List<T>) normalSchemaController.list(kind.toString());\r\n+\r\n+            case DERIVED:\r\n+                return (List<T>) derivedSchemaController.list(kind.toString());\r\n+\r\n+            case VIRTUAL:\r\n+                return (List<T>) virtualSchemaController.list(kind.toString());\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n+        }\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    @Override\r\n+    public <T extends AbstractSchemaTO> T read(final AttributableType kind, final SchemaType type,\r\n+            final String schemaName) {\r\n+        try {\r\n+            switch (type) {\r\n+                case NORMAL:\r\n+                    return (T) normalSchemaController.read(kind.toString(), schemaName);\r\n+\r\n+                case DERIVED:\r\n+                    return (T) derivedSchemaController.read(kind.toString(), schemaName);\r\n+\r\n+                case VIRTUAL:\r\n+                    return (T) virtualSchemaController.read(kind.toString(), schemaName);\r\n+\r\n+                default:\r\n+                    throw new BadRequestException();\r\n+            }\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public  <T extends AbstractSchemaTO> void update(final AttributableType kind, final SchemaType type,\r\n+            final String schemaName, final T schemaTO) {\r\n+        try {\r\n+            switch (type) {\r\n+                case NORMAL:\r\n+                    normalSchemaController.update((SchemaTO) schemaTO, kind.toString());\r\n+\r\n+                case DERIVED:\r\n+                    derivedSchemaController.update((DerivedSchemaTO) schemaTO, kind.toString());\r\n+\r\n+                case VIRTUAL:\r\n+                    virtualSchemaController.update((VirtualSchemaTO) schemaTO, kind.toString());\r\n+\r\n+                default:\r\n+                    throw new BadRequestException();\r\n+            }\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setUriInfo(final UriInfo ui) {\r\n+        this.uriInfo = ui;\r\n+    }\r\n+}\r"},{"sha":"1e4ea6f54094169e6df77bf0b124f68f76ca88dd","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -69,6 +69,7 @@ under the License.\n       <ref bean=\"configurationServiceImpl\"/>\n       <ref bean=\"connectorServiceImpl\"/>\n       <ref bean=\"entitlementServiceImpl\"/>\n+      <ref bean=\"schemaServiceImpl\"/>\n     </jaxrs:serviceBeans>\n     <jaxrs:resourceComparator>\n       <bean id=\"myServiceComparator\" class=\"org.apache.syncope.core.rest.utils.QueryResourceInfoComperator\"/>"},{"sha":"9dee9a7ef1b8f53a942b358be0bc1d83e331bf2b","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/DerSchemaTest.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -37,9 +37,6 @@ public class DerSchemaTest extends AbstractDAOTest {\n     @Autowired\n     private DerSchemaDAO derSchemaDAO;\n \n-    @Autowired\n-    private SchemaDAO schemaDAO;\n-\n     @Test\n     public void findAll() {\n         List<UDerSchema> list = derSchemaDAO.findAll(UDerSchema.class);"},{"sha":"39575e4fefa31585a5cd5e5eee849c77a0602706","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/VirSchemaTest.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -37,9 +37,6 @@ public class VirSchemaTest extends AbstractDAOTest {\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n-    @Autowired\n-    private SchemaDAO schemaDAO;\n-\n     @Test\n     public void findAll() {\n         List<UVirSchema> list = virSchemaDAO.findAll(UVirSchema.class);"},{"sha":"d2ba343c79c4dad206ab43d7e5792ea1e13287d2","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -18,8 +18,13 @@\n  */\n package org.apache.syncope.core.rest;\n \n+import static org.junit.Assert.assertNotNull;\n+\n+import java.net.URI;\n import java.util.UUID;\n+\n import javax.sql.DataSource;\n+\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.impl.client.DefaultHttpClient;\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n@@ -158,4 +163,9 @@ public void resetRestTemplate() {\n         schemaService = new SchemaServiceProxy(BASE_URL, restTemplate);\n         userRequestService = new UserRequestServiceProxy(BASE_URL, restTemplate);\n     }\n+\n+    public <T> T getObject(final URI location, final Class<T> type) {\n+        assertNotNull(location);\n+        return restTemplate.getForEntity(location, type).getBody();\n+    }\n }"},{"sha":"67435cefc457ecdec56711dcb83c588e8b712d09","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -28,10 +28,13 @@\n import java.util.List;\n import java.util.Set;\n \n+import javax.ws.rs.core.Response;\n+\n import org.apache.syncope.common.search.AttributeCond;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.SchemaService;\n import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.to.EntitlementTO;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.RoleTO;\n@@ -83,7 +86,9 @@ public void testUserSchemaAuthorization() {\n         schemaTO.setMandatoryCondition(\"false\");\n         schemaTO.setType(SchemaType.String);\n \n-        SchemaTO newSchemaTO = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        assertNotNull(response);\n+        SchemaTO newSchemaTO = getObject(response.getLocation(), SchemaTO.class);\n         assertEquals(schemaTO, newSchemaTO);\n \n         // 2. create an user with the role created above (as admin)"},{"sha":"ba00e3a9a0725aaf22966e6aad8c622eb2d24bb6","filename":"core/src/test/java/org/apache/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -28,6 +28,7 @@\n import javax.ws.rs.core.Response;\n \n import org.apache.syncope.common.to.ConfigurationTO;\n+import org.apache.syncope.common.to.ConnInstanceTO;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -44,9 +45,9 @@ public void create() {\n         configurationTO.setValue(\"testValue\");\n \n         Response response = configurationService.create(configurationTO);\n+        assertNotNull(response);\n         assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n-        assertTrue(response.hasEntity());\n-        ConfigurationTO newConfigurationTO = (ConfigurationTO) response.getEntity();\n+        ConfigurationTO newConfigurationTO = getObject(response.getLocation(), ConfigurationTO.class);\n         assertEquals(configurationTO, newConfigurationTO);\n     }\n \n@@ -70,8 +71,8 @@ public void delete() throws UnsupportedEncodingException {\n \n         Response response = configurationService.create(tokenLengthTO);\n         assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n-        assertTrue(response.hasEntity());\n-        ConfigurationTO newConfigurationTO = (ConfigurationTO) response.getEntity();\n+        assertNotNull(response);\n+        ConfigurationTO newConfigurationTO = getObject(response.getLocation(), ConfigurationTO.class);\n         assertEquals(tokenLengthTO, newConfigurationTO);\n     }\n "},{"sha":"4d4f84fe0c05d811de24790a4bdc68e19dbd2978","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -137,7 +137,8 @@ public void create() {\n         connectorTO.addCapability(ConnectorCapability.TWO_PHASES_UPDATE);\n \n         Response response = connectorService.create(connectorTO);\n-        ConnInstanceTO actual = (ConnInstanceTO) response.getEntity();\n+        assertNotNull(response);\n+        ConnInstanceTO actual = getObject(response.getLocation(), ConnInstanceTO.class);\n \n         assertNotNull(actual);\n \n@@ -268,7 +269,8 @@ public void issueSYNCOPE10() {\n         // Create a new connector instance.\n         // ----------------------------------\n         Response response = connectorService.create(connInstanceTO);\n-        connInstanceTO = (ConnInstanceTO) response.getEntity();\n+        assertNotNull(response);\n+        connInstanceTO = getObject(response.getLocation(), ConnInstanceTO.class);\n \n         assertNotNull(connInstanceTO);\n         assertTrue(connInstanceTO.getCapabilities().isEmpty());\n@@ -578,7 +580,8 @@ public void issueSYNCOPE112() {\n             assertFalse(connectorService.validate(connectorTO));\n \n             Response response = connectorService.create(connectorTO);\n-            connectorTO = (ConnInstanceTO) response.getEntity();\n+            assertNotNull(response);\n+            connectorTO = getObject(response.getLocation(), ConnInstanceTO.class);\n             assertNotNull(connectorTO);\n             // ----------------------------------------\n "},{"sha":"b46b52760bf5a966e507c3605e8d731291df7061","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":23,"deletions":13,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -24,6 +24,9 @@\n \n import java.util.List;\n \n+import javax.ws.rs.core.Response;\n+\n+import org.apache.http.HttpStatus;\n import org.apache.syncope.common.services.SchemaService;\n import org.apache.syncope.common.to.DerivedSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n@@ -38,7 +41,8 @@ public class DerivedSchemaTestITCase extends AbstractTest {\n \n     @Test\n     public void list() {\n-        List<DerivedSchemaTO> derivedSchemas = schemaService.list(AttributableType.USER, SchemaService.SchemaType.DERIVED);\n+        List<DerivedSchemaTO> derivedSchemas = schemaService.list(AttributableType.USER,\n+                SchemaService.SchemaType.DERIVED);\n         assertFalse(derivedSchemas.isEmpty());\n         for (DerivedSchemaTO derivedSchemaTO : derivedSchemas) {\n             assertNotNull(derivedSchemaTO);\n@@ -47,7 +51,8 @@ public void list() {\n \n     @Test\n     public void read() {\n-        DerivedSchemaTO derivedSchemaTO = schemaService.read(AttributableType.USER, SchemaService.SchemaType.DERIVED, \"cn\");\n+        DerivedSchemaTO derivedSchemaTO = schemaService.read(AttributableType.USER, SchemaService.SchemaType.DERIVED,\n+                \"cn\");\n         assertNotNull(derivedSchemaTO);\n     }\n \n@@ -57,7 +62,9 @@ public void create() {\n         schema.setName(\"derived\");\n         schema.setExpression(\"derived_sx + '_' + derived_dx\");\n \n-        DerivedSchemaTO actual = schemaService.create(AttributableType.USER, SchemaService.SchemaType.DERIVED, schema);\n+        Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.DERIVED, schema);\n+        assertNotNull(response);\n+        DerivedSchemaTO actual = getObject(response.getLocation(), DerivedSchemaTO.class);\n         assertNotNull(actual);\n \n         actual = schemaService.read(AttributableType.USER, SchemaService.SchemaType.DERIVED, actual.getName());\n@@ -67,11 +74,12 @@ public void create() {\n \n     @Test\n     public void delete() {\n-        DerivedSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.DERIVED, \"rderiveddata\");\n+        DerivedSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.DERIVED,\n+                \"rderiveddata\");\n         assertNotNull(schema);\n \n-        DerivedSchemaTO schemaToDelete = schemaService.delete(AttributableType.ROLE, SchemaService.SchemaType.DERIVED, schema.getName());\n-        assertNotNull(schemaToDelete);\n+        schemaService.delete(AttributableType.ROLE, SchemaService.SchemaType.DERIVED,\n+                schema.getName());\n \n         Throwable t = null;\n         try {\n@@ -81,31 +89,33 @@ public void delete() {\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n         } finally {\n             // Recreate schema to make test re-runnable\n-            schema = schemaService.create(AttributableType.ROLE, SchemaService.SchemaType.DERIVED, schemaToDelete);\n-            assertNotNull(schema);\n+            Response response = schemaService.create(AttributableType.ROLE, SchemaService.SchemaType.DERIVED, schema);\n+            assertNotNull(response);\n+            assertEquals(HttpStatus.SC_CREATED, response.getStatus());\n         }\n         assertNotNull(t);\n     }\n \n     @Test\n     public void update() {\n-        DerivedSchemaTO schema = schemaService.read(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED, \"mderiveddata\");\n+        DerivedSchemaTO schema = schemaService.read(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED,\n+                \"mderiveddata\");\n         assertNotNull(schema);\n         assertEquals(\"mderived_sx + '-' + mderived_dx\", schema.getExpression());\n         try {\n             schema.setExpression(\"mderived_sx + '.' + mderived_dx\");\n \n-            schema = schemaService.update(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED, schema.getName(), schema);\n-            assertNotNull(schema);\n+            schemaService.update(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED,\n+                    schema.getName(), schema);\n \n             schema = schemaService.read(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED, \"mderiveddata\");\n             assertNotNull(schema);\n             assertEquals(\"mderived_sx + '.' + mderived_dx\", schema.getExpression());\n         } finally {\n             // Set updated back to make test re-runnable\n             schema.setExpression(\"mderived_sx + '-' + mderived_dx\");\n-            schema = schemaService.update(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED, schema.getName(), schema);\n-            assertNotNull(schema);\n+            schemaService.update(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED,\n+                    schema.getName(), schema);\n         }\n     }\n }"},{"sha":"e404ddf62ca601a6f8217025f95d405fedb13bd5","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":35,"deletions":15,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -27,6 +27,8 @@\n \n import java.util.List;\n \n+import javax.ws.rs.core.Response;\n+\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.services.SchemaService;\n import org.apache.syncope.common.to.MembershipTO;\n@@ -53,10 +55,18 @@ public void create() {\n         SchemaTO schemaTO = buildSchemaTO(\"testAttribute\", SchemaType.String);\n         schemaTO.setMandatoryCondition(\"false\");\n \n-        SchemaTO newSchemaTO = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        assertNotNull(response);\n+        assertNotNull(response.getLocation());\n+\n+        SchemaTO newSchemaTO = getObject(response.getLocation(), SchemaTO.class);\n         assertEquals(schemaTO, newSchemaTO);\n \n-        newSchemaTO = schemaService.create(AttributableType.MEMBERSHIP, SchemaService.SchemaType.NORMAL, schemaTO);\n+        response = schemaService.create(AttributableType.MEMBERSHIP, SchemaService.SchemaType.NORMAL, schemaTO);\n+        assertNotNull(response);\n+        assertNotNull(response.getLocation());\n+\n+        newSchemaTO = getObject(response.getLocation(), SchemaTO.class);\n         assertEquals(schemaTO, newSchemaTO);\n     }\n \n@@ -74,8 +84,7 @@ public void createWithNotPermittedName() {\n \n             assertNotNull(sce.getElements());\n             assertEquals(1, sce.getElements().size());\n-            assertTrue(sce.getElements().iterator().next()\n-                    .contains(EntityViolationType.InvalidUSchema.name()));\n+            assertTrue(sce.getElements().iterator().next().contains(EntityViolationType.InvalidUSchema.name()));\n         }\n     }\n \n@@ -123,8 +132,7 @@ public void delete() {\n         schemaTO.setMandatoryCondition(\"false\");\n         schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n \n-        SchemaTO deletedSchema = schemaService.delete(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO.getName());\n-        assertNotNull(deletedSchema);\n+        schemaService.delete(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO.getName());\n         SchemaTO firstname = null;\n         try {\n             firstname = schemaService.read(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO.getName());\n@@ -148,7 +156,8 @@ public void list() {\n             assertNotNull(schemaTO);\n         }\n \n-        List<SchemaTO> membershipSchemas = schemaService.list(AttributableType.MEMBERSHIP, SchemaService.SchemaType.NORMAL);\n+        List<SchemaTO> membershipSchemas = schemaService.list(AttributableType.MEMBERSHIP,\n+                SchemaService.SchemaType.NORMAL);\n         assertFalse(membershipSchemas.isEmpty());\n         for (SchemaTO schemaTO : membershipSchemas) {\n             assertNotNull(schemaTO);\n@@ -160,7 +169,9 @@ public void update() {\n         SchemaTO schemaTO = schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, \"icon\");\n         assertNotNull(schemaTO);\n \n-        SchemaTO updatedTO = schemaService.update(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n+        schemaService.update(AttributableType.ROLE, SchemaService.SchemaType.NORMAL,\n+                schemaTO.getName(), schemaTO);\n+        SchemaTO updatedTO = schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, \"icon\");\n         assertEquals(schemaTO, updatedTO);\n \n         updatedTO.setType(SchemaType.Date);\n@@ -179,7 +190,10 @@ public void issue258() {\n         schemaTO.setName(\"schema_issue258\");\n         schemaTO.setType(SchemaType.Double);\n \n-        schemaTO = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        assertNotNull(response);\n+        assertNotNull(response.getLocation());\n+        schemaTO = getObject(response.getLocation(), SchemaTO.class);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"issue258@syncope.apache.org\");\n@@ -203,7 +217,10 @@ public void issue259() {\n         SchemaTO schemaTO = buildSchemaTO(\"schema_issue259\", SchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n-        schemaTO = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        assertNotNull(response);\n+        assertNotNull(response.getLocation());\n+        schemaTO = getObject(response.getLocation(), SchemaTO.class);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"issue259@syncope.apache.org\");\n@@ -227,7 +244,10 @@ public void issue260() {\n         SchemaTO schemaTO = buildSchemaTO(\"schema_issue260\", SchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n-        schemaTO = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        assertNotNull(response);\n+        assertNotNull(response.getLocation());\n+        schemaTO = getObject(response.getLocation(), SchemaTO.class);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"issue260@syncope.apache.org\");\n@@ -245,10 +265,10 @@ public void issue260() {\n         }\n     }\n \n-\tprivate SchemaTO buildSchemaTO(String name, SchemaType type) {\n-\t\tSchemaTO schemaTO = new SchemaTO();\n+    private SchemaTO buildSchemaTO(final String name, final SchemaType type) {\n+        SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(name + getUUIDString());\n         schemaTO.setType(type);\n-\t\treturn schemaTO;\n-\t}\n+        return schemaTO;\n+    }\n }"},{"sha":"fa84baae9b0df8887c438f126a8c2635d770186b","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -54,9 +54,9 @@ public void create() {\n         configurationTO.setValue(\"false\");\n \n         Response response = configurationService.create(configurationTO);\n+        assertNotNull(response);\n         assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n-        assertTrue(response.hasEntity());\n-        configurationTO = (ConfigurationTO) response.getEntity();\n+        configurationTO = getObject(response.getLocation(), ConfigurationTO.class);\n         assertNotNull(configurationTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"selfcreate@syncope.apache.org\");\n@@ -75,9 +75,9 @@ public void create() {\n         configurationTO.setValue(\"true\");\n \n         response = configurationService.create(configurationTO);\n+        assertNotNull(response);\n         assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n-        assertTrue(response.hasEntity());\n-        configurationTO = (ConfigurationTO) response.getEntity();\n+        configurationTO = getObject(response.getLocation(), ConfigurationTO.class);\n         assertNotNull(configurationTO);\n \n         // 4. as anonymous, request user create works"},{"sha":"f49403834e01a4c6f522652e3774809901cbad70","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","patch":"@@ -23,6 +23,8 @@\n \n import java.util.List;\n \n+import javax.ws.rs.core.Response;\n+\n import org.apache.syncope.common.services.SchemaService;\n import org.apache.syncope.common.to.VirtualSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n@@ -46,7 +48,8 @@ public void list() {\n \n     @Test\n     public void read() {\n-        VirtualSchemaTO vSchemaTO = schemaService.read(AttributableType.MEMBERSHIP, SchemaService.SchemaType.VIRTUAL, \"mvirtualdata\");\n+        VirtualSchemaTO vSchemaTO = schemaService.read(AttributableType.MEMBERSHIP, SchemaService.SchemaType.VIRTUAL,\n+                \"mvirtualdata\");\n         assertNotNull(vSchemaTO);\n     }\n \n@@ -55,7 +58,10 @@ public void create() {\n         VirtualSchemaTO schema = new VirtualSchemaTO();\n         schema.setName(\"virtual\");\n \n-        VirtualSchemaTO actual = schemaService.create(AttributableType.USER, SchemaService.SchemaType.VIRTUAL, schema);\n+        Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.VIRTUAL, schema);\n+        assertNotNull(response);\n+        assertNotNull(response.getLocation());\n+        VirtualSchemaTO actual = getObject(response.getLocation(), VirtualSchemaTO.class);\n         assertNotNull(actual);\n \n         actual = schemaService.read(AttributableType.USER, SchemaService.SchemaType.VIRTUAL, actual.getName());\n@@ -64,11 +70,12 @@ public void create() {\n \n     @Test\n     public void delete() {\n-        VirtualSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.VIRTUAL, \"rvirtualdata\");\n+        VirtualSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.VIRTUAL,\n+                \"rvirtualdata\");\n         assertNotNull(schema);\n \n-        VirtualSchemaTO deletedSchema = schemaService.delete(AttributableType.ROLE, SchemaService.SchemaType.VIRTUAL, schema.getName());\n-        assertNotNull(deletedSchema);\n+        schemaService.delete(AttributableType.ROLE, SchemaService.SchemaType.VIRTUAL,\n+                schema.getName());\n \n         Throwable t = null;\n         try {"}]}