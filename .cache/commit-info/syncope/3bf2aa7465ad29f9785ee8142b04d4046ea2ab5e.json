{"sha":"3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNiZjJhYTc0NjVhZDI5Zjk3ODVlZTgxNDJiMDRkNDA0NmVhMmFiNWU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-07-01T12:15:20Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-07-01T12:15:20Z"},"message":"[SYNCOPE-1552] Allow WA events to be stored","tree":{"sha":"992b513eab8ccb0024859bc96000f569af6dc0d0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/992b513eab8ccb0024859bc96000f569af6dc0d0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c9cf41a3965b8572c577b9c02348bdb2b9d55a40","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c9cf41a3965b8572c577b9c02348bdb2b9d55a40","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c9cf41a3965b8572c577b9c02348bdb2b9d55a40"}],"stats":{"total":56,"additions":26,"deletions":30},"files":[{"sha":"1acc4f92f36022f1e92150c96a528d5179e8ed04","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AuditQuery.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java?ref=3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e","patch":"@@ -24,7 +24,6 @@\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.List;\n-import javax.validation.constraints.NotNull;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n@@ -95,7 +94,6 @@ public String getEntityKey() {\n         return entityKey;\n     }\n \n-    @NotNull\n     @QueryParam(JAXRSService.PARAM_ENTITY_KEY)\n     public void setEntityKey(final String entityKey) {\n         this.entityKey = entityKey;"},{"sha":"10f48840dfe76dfe529cd13d058ac3a3e8f38409","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e","patch":"@@ -419,16 +419,13 @@ public Pair<Integer, List<AuditEntry>> search(\n         return Pair.of(count, matching);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_CREATE + \"')\")\n+    @PreAuthorize(\"isAuthenticated()\")\n     public void create(final AuditEntry auditEntry) {\n-        boolean auditRequested = auditManager.auditRequested(\n-                auditEntry.getWho(),\n-                auditEntry.getLogger().getType(),\n-                auditEntry.getLogger().getCategory(),\n-                auditEntry.getLogger().getSubcategory(),\n-                auditEntry.getLogger().getEvent());\n-\n-        if (auditRequested) {\n+        boolean authorized =\n+                AuthContextUtils.getAuthorizations().containsKey(IdRepoEntitlement.AUDIT_CREATE)\n+                || AuthContextUtils.getAuthorizations().containsKey(IdRepoEntitlement.ANONYMOUS)\n+                && AuditElements.EventCategoryType.WA == auditEntry.getLogger().getType();\n+        if (authorized) {\n             auditManager.audit(\n                     auditEntry.getWho(),\n                     auditEntry.getLogger().getType(),\n@@ -439,6 +436,10 @@ public void create(final AuditEntry auditEntry) {\n                     auditEntry.getBefore(),\n                     auditEntry.getOutput(),\n                     auditEntry.getInputs());\n+        } else {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.DelegatedAdministration);\n+            sce.getElements().add(\"Not allowed to create Audit entries\");\n+            throw sce;\n         }\n     }\n "},{"sha":"0927fdb4500d8259b94df926d63091f79d94de86","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPALoggerDAO.java","status":"modified","additions":15,"deletions":16,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java?ref=3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e","patch":"@@ -44,11 +44,10 @@ protected static class MessageCriteriaBuilder {\n         protected final StringBuilder query = new StringBuilder();\n \n         protected MessageCriteriaBuilder entityKey(final String entityKey) {\n-            if (entityKey != null) {\n-                query.append(' ').append(AUDIT_MESSAGE_COLUMN).\n-                    append(\" LIKE '%key%\").append(entityKey).append(\"%'\");\n-            } else {\n+            if (entityKey == null) {\n                 query.append(\" 1=1\");\n+            } else {\n+                query.append(' ').append(AUDIT_MESSAGE_COLUMN).append(\" LIKE '%key%\").append(entityKey).append(\"%'\");\n             }\n             return this;\n         }\n@@ -144,19 +143,19 @@ protected MessageCriteriaBuilder messageCriteriaBuilder(final String entityKey)\n \n     @Override\n     public int countAuditEntries(final String entityKey,\n-                                 final AuditElements.EventCategoryType type,\n-                                 final String category,\n-                                 final String subcategory,\n-                                 final List<String> events,\n-                                 final AuditElements.Result result) {\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final List<String> events,\n+            final AuditElements.Result result) {\n         String queryString = \"SELECT COUNT(0) FROM \" + AUDIT_TABLE\n-            + \" WHERE \" + messageCriteriaBuilder(entityKey).\n-            type(type).\n-            category(category).\n-            subcategory(subcategory).\n-            result(result).\n-            events(events).\n-            build();\n+                + \" WHERE \" + messageCriteriaBuilder(entityKey).\n+                        type(type).\n+                        category(category).\n+                        subcategory(subcategory).\n+                        result(result).\n+                        events(events).\n+                        build();\n         Query countQuery = entityManager().createNativeQuery(queryString);\n \n         return ((Number) countQuery.getSingleResult()).intValue();"},{"sha":"b7f0ce58e54300f4e943a981eefbadbcb3db25e5","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/audit/SyncopeWAAuditTrailManager.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java?ref=3bf2aa7465ad29f9785ee8142b04d4046ea2ab5e","patch":"@@ -57,8 +57,6 @@ protected void saveAuditRecord(final AuditActionContext audit) {\n         }\n \n         LOG.info(\"Loading application definitions\");\n-        LoggerService loggerService = syncopeClient.getService(LoggerService.class);\n-\n         try {\n             String output = OBJECT_MAPPER.writeValueAsString(Map.of(\"resource\", audit.getResourceOperatedUpon(),\n                     \"clientIpAddress\", audit.getClientIpAddress(),\n@@ -77,7 +75,7 @@ protected void saveAuditRecord(final AuditActionContext audit) {\n                     audit.getActionPerformed(), result);\n \n             auditEntry.setLogger(auditLogger);\n-            loggerService.create(auditEntry);\n+            syncopeClient.getService(LoggerService.class).create(auditEntry);\n         } catch (Exception e) {\n             LOG.error(\"During serialization\", e);\n         }"}]}