{"sha":"b33f2ca563ebd70b1df0dcd8820264ca4b05a79b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmIzM2YyY2E1NjNlYmQ3MGIxZGYwZGNkODgyMDI2NGNhNGIwNWE3OWI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-30T11:13:03Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-30T11:13:03Z"},"message":"[SYNCOPE-466] Replacing IllegalArgumentException thrown on server side with more appropriate exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1554186 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b7ad553c667133b7f88455d87d870ebe0e057fc6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b7ad553c667133b7f88455d87d870ebe0e057fc6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"210e0e48a980a689e21b6d347b0a5ffbc417011b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/210e0e48a980a689e21b6d347b0a5ffbc417011b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/210e0e48a980a689e21b6d347b0a5ffbc417011b"}],"stats":{"total":64,"additions":44,"deletions":20},"files":[{"sha":"df565c524d0230bcc4570a9634cbca87fb0dcf45","filename":"common/src/main/java/org/apache/syncope/common/types/SyncopeClientExceptionType.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java?ref=b33f2ca563ebd70b1df0dcd8820264ca4b05a79b","patch":"@@ -31,17 +31,15 @@ public enum SyncopeClientExceptionType {\n     InvalidLogger(\"Syncope.InvalidLogger\", \"Syncope.InvalidLogger.message\"),\r\n     InvalidConnInstance(\"Syncope.InvalidConnInstance\", \"Syncope.InvalidConnInstance.message\"),\r\n     InvalidConnIdConf(\"Syncope.InvalidConnIdConf\", \"Syncope.InvalidConnIdConf.message\"),\r\n-    InvalidPasswordPolicy(\"Syncope.InvalidPasswordPolicy\", \"Syncope.InvalidPasswordPolicy.reason\"),\r\n-    InvalidAccountPolicy(\"Syncope.InvalidAccountPolicy\", \"Syncope.InvalidAccountPolicy.reason\"),\r\n-    InvalidSyncPolicy(\"Syncope.InvalidSyncPolicy\", \"Syncope.InvalidSyncPolicy.reason\"),\r\n+    InvalidPolicy(\"Syncope.InvalidPolicy\", \"Syncope.InvalidPolicy.reason\"),\r\n     InvalidSyncopeRole(\"Syncope.InvalidSyncopeRole\", \"Syncope.InvalidSyncopeRole.reason\"),\r\n     InvalidReportExec(\"Syncope.InvalidReportExec\", \"Syncope.InvalidReportExec.reason\"),\r\n     InvalidRoles(\"Syncope.InvalidRoles\", \"Syncope.InvalidRoles.name\"),\r\n     InvalidSchemaDefinition(\"Syncope.InvalidSchemaDefinition\", \"\"),\r\n     InvalidSearchCondition(\"Syncope.InvalidSearchCondition\", \"\"),\r\n     InvalidPropagationTaskExecReport(\r\n-    \"Syncope.InvalidPropagationTaskExecReport\",\r\n-    \"Syncope.InvalidPropagationTaskExecReport.element\"),\r\n+            \"Syncope.InvalidPropagationTaskExecReport\",\r\n+            \"Syncope.InvalidPropagationTaskExecReport.element\"),\r\n     InvalidUSchema(\"Syncope.InvalidUSchema\", \"Syncope.InvalidUSchema.name\"),\r\n     InvalidUDerSchema(\"Syncope.InvalidUDerSchema\", \"Syncope.InvalidUDerSchema.name\"),\r\n     InvalidUVirSchema(\"Syncope.InvalidUVirSchema\", \"Syncope.InvalidUVirSchema.name\"),\r"},{"sha":"6dca526c3511aca3cba2408144b8018cb84fbe20","filename":"core/src/main/java/org/apache/syncope/core/rest/data/PolicyDataBinder.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java?ref=b33f2ca563ebd70b1df0dcd8820264ca4b05a79b","patch":"@@ -26,10 +26,14 @@\n import org.apache.syncope.common.types.PasswordPolicySpec;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.types.SyncPolicySpec;\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.Policy;\n import org.apache.syncope.core.persistence.beans.SyncPolicy;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -105,8 +109,12 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n     @SuppressWarnings(\"unchecked\")\n     public <T extends Policy> T getPolicy(T policy, final PolicyTO policyTO) {\n         if (policy != null && policy.getType() != policyTO.getType()) {\n-            throw new IllegalArgumentException(\n-                    String.format(\"Cannot update %s from %s\", policy.getType(), policyTO.getType()));\n+            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.InvalidPolicy);\n+            sce.addElement(String.format(\"Cannot update %s from %s\", policy.getType(), policyTO.getType()));\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            scce.addException(sce);\n+            throw scce;\n         }\n \n         final boolean isGlobal = isGlobalPolicy(policyTO.getType());"},{"sha":"b0671f1a97599c9e5534d5991531fdf7af704f56","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=b33f2ca563ebd70b1df0dcd8820264ca4b05a79b","patch":"@@ -167,10 +167,12 @@ private Response processBadRequestExceptions(final Exception ex) {\n             } else {\r\n                 return ((BadRequestException) ex).getResponse();\r\n             }\r\n-\r\n         } else if (ex instanceof InvalidEntityException) {\r\n-            SyncopeClientExceptionType exType = SyncopeClientExceptionType.valueOf(\"Invalid\"\r\n-                    + ((InvalidEntityException) ex).getEntityClassSimpleName());\r\n+            SyncopeClientExceptionType exType =\r\n+                    ((InvalidEntityException) ex).getEntityClassSimpleName().endsWith(\"Policy\")\r\n+                    ? SyncopeClientExceptionType.InvalidPolicy\r\n+                    : SyncopeClientExceptionType.valueOf(\r\n+                            \"Invalid\" + ((InvalidEntityException) ex).getEntityClassSimpleName());\r\n \r\n             responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, exType.getHeaderValue());\r\n \r"},{"sha":"c6b8c95172b30909cd3405fdf1467516c8bc18a4","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=b33f2ca563ebd70b1df0dcd8820264ca4b05a79b","patch":"@@ -49,8 +49,11 @@ under the License.\n     int statusCode = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n \n     if (ex instanceof InvalidEntityException) {\n-        SyncopeClientExceptionType exType = SyncopeClientExceptionType.valueOf(\n-                \"Invalid\" + ((InvalidEntityException) ex).getEntityClassSimpleName());\n+        SyncopeClientExceptionType exType =\n+                ((InvalidEntityException) ex).getEntityClassSimpleName().endsWith(\"Policy\")\n+                ? SyncopeClientExceptionType.InvalidPolicy\n+                : SyncopeClientExceptionType.valueOf(\n+                        \"Invalid\" + ((InvalidEntityException) ex).getEntityClassSimpleName());\n \n         response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, exType.getHeaderValue());\n "},{"sha":"d1bc65ec8e61afa07740e1f18e35b07f56611f83","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=b33f2ca563ebd70b1df0dcd8820264ca4b05a79b","patch":"@@ -82,7 +82,7 @@ public void createWithException() {\n             createPolicy(PolicyType.PASSWORD, policy);\n             fail();\n         } catch (SyncopeClientCompositeErrorException sccee) {\n-            assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidPasswordPolicy));\n+            assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidPolicy));\n         }\n     }\n \n@@ -95,7 +95,7 @@ public void createMissingDescription() {\n             createPolicy(PolicyType.SYNC, policy);\n             fail();\n         } catch (SyncopeClientCompositeErrorException sccee) {\n-            assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidSyncPolicy));\n+            assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidPolicy));\n         }\n     }\n \n@@ -165,6 +165,20 @@ public void getCorrelationRules() {\n         assertEquals(1, policyService.getSyncCorrelationRuleClasses(PolicyType.SYNC).size());\n     }\n \n+    @Test\n+    public void issueSYNCOPE466() {\n+        PasswordPolicyTO policy = policyService.read(PolicyType.PASSWORD, 4L);\n+        assertEquals(PolicyType.PASSWORD, policy.getType());\n+\n+        policy.setType(PolicyType.GLOBAL_PASSWORD);\n+        try {\n+            policyService.update(PolicyType.PASSWORD, policy.getId(), policy);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            assertNotNull(e.getException(SyncopeClientExceptionType.InvalidPolicy));\n+        }\n+    }\n+\n     private SyncPolicyTO buildSyncPolicyTO() {\n         SyncPolicyTO policy = new SyncPolicyTO();\n "},{"sha":"6e158fe10ffaaf72ce4eb97985435e1d7efe11be","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b33f2ca563ebd70b1df0dcd8820264ca4b05a79b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=b33f2ca563ebd70b1df0dcd8820264ca4b05a79b","patch":"@@ -128,7 +128,6 @@ public void createOverridingProps() {\n         assertNotNull(actual);\n \n         // check the existence\n-\n         actual = resourceService.read(resourceName);\n         assertNotNull(actual);\n     }\n@@ -257,7 +256,6 @@ public void createWithPasswordPolicy() {\n         assertNotNull(actual);\n \n         // check the existence\n-\n         actual = resourceService.read(resourceName);\n         assertNotNull(actual);\n         assertNotNull(actual.getPasswordPolicy());\n@@ -367,7 +365,7 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        List<ResourceTO> actuals = resourceService.list(null);\n+        List<ResourceTO> actuals = resourceService.list();\n         assertNotNull(actuals);\n         assertFalse(actuals.isEmpty());\n         for (ResourceTO resourceTO : actuals) {\n@@ -379,9 +377,10 @@ public void list() {\n     public void listByType() {\n         List<ResourceTO> actuals = resourceService.list(105L);\n \n-        assertNotNull(actuals);\n-        assertEquals(1, actuals.size());\n-        assertNotNull(actuals.get(0));\n+        for (ResourceTO resourceTO : actuals) {\n+            assertNotNull(resourceTO);\n+            assertEquals(105L, resourceTO.getConnectorId().longValue());\n+        }\n     }\n \n     @Test"}]}