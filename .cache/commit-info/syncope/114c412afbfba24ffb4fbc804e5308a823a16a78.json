{"sha":"114c412afbfba24ffb4fbc804e5308a823a16a78","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjExNGM0MTJhZmJmYmEyNGZmYjRmYmM4MDRlNTMwOGE4MjNhMTZhNzg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-03-20T07:33:31Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-03-20T07:33:31Z"},"message":"Flowable: allow to configure IdGenerator","tree":{"sha":"70cbd50de206b4047dd8ef8ab9519f111afa20b5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/70cbd50de206b4047dd8ef8ab9519f111afa20b5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/114c412afbfba24ffb4fbc804e5308a823a16a78","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/114c412afbfba24ffb4fbc804e5308a823a16a78","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/114c412afbfba24ffb4fbc804e5308a823a16a78","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/114c412afbfba24ffb4fbc804e5308a823a16a78/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7a3d753b3c1fc6193a04ffd927f2cd260c8644c1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7a3d753b3c1fc6193a04ffd927f2cd260c8644c1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7a3d753b3c1fc6193a04ffd927f2cd260c8644c1"}],"stats":{"total":30,"additions":24,"deletions":6},"files":[{"sha":"98714714beac337934b46f3191267dd9d88764fe","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/WorkflowFlowableContext.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/114c412afbfba24ffb4fbc804e5308a823a16a78/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FWorkflowFlowableContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/114c412afbfba24ffb4fbc804e5308a823a16a78/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FWorkflowFlowableContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FWorkflowFlowableContext.java?ref=114c412afbfba24ffb4fbc804e5308a823a16a78","patch":"@@ -28,7 +28,9 @@\n import org.apache.syncope.core.spring.ResourceWithFallbackLoader;\n import org.apache.syncope.core.workflow.java.WorkflowContext;\n import org.flowable.common.engine.impl.AbstractEngineConfiguration;\n+import org.flowable.common.engine.impl.cfg.IdGenerator;\n import org.flowable.common.engine.impl.history.HistoryLevel;\n+import org.flowable.engine.impl.db.DbIdGenerator;\n import org.flowable.idm.spring.SpringIdmEngineConfiguration;\n import org.flowable.idm.spring.configurator.SpringIdmEngineConfigurator;\n import org.flowable.spring.SpringProcessEngineConfiguration;\n@@ -103,6 +105,20 @@ public SyncopeEntitiesVariableType syncopeEntitiesVariableType() {\n         return new SyncopeEntitiesVariableType();\n     }\n \n+    /**\n+     * This is called to generate unique identifiers for database entities used by Flowable.\n+     *\n+     * Consider to switch to {@link import org.flowable.common.engine.impl.persistence.StrongUuidGenerator} in\n+     * high-demanding production environments.\n+     *\n+     * @return {@link IdGenerator} used by Flowable\n+     */\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public IdGenerator idGenerator() {\n+        return new DbIdGenerator();\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     @Scope(\"prototype\")\n@@ -115,6 +131,7 @@ public SpringProcessEngineConfiguration processEngineConfiguration() {\n         conf.setIdmEngineConfigurator(syncopeIdmEngineConfigurator());\n         conf.setCustomPreVariableTypes(Arrays.asList(syncopeEntitiesVariableType()));\n         conf.setFormHandlerHelper(syncopeFormHandlerHelper());\n+        conf.setIdGenerator(idGenerator());\n         return conf;\n     }\n "},{"sha":"c8dee7a1e09ad19687b78425063133d5a1451445","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/init/FlowableLoader.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/114c412afbfba24ffb4fbc804e5308a823a16a78/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FFlowableLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/114c412afbfba24ffb4fbc804e5308a823a16a78/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FFlowableLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FFlowableLoader.java?ref=114c412afbfba24ffb4fbc804e5308a823a16a78","patch":"@@ -33,8 +33,8 @@\n import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.spring.ResourceWithFallbackLoader;\n import org.flowable.engine.ProcessEngine;\n+import org.flowable.engine.impl.db.DbIdGenerator;\n import org.flowable.engine.repository.ProcessDefinition;\n-import org.flowable.spring.SpringProcessEngineConfiguration;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -92,12 +92,13 @@ public void load(final String domain, final DataSource datasource) {\n                 FlowableDeployUtils.deployModel(processEngine, procDef);\n \n                 LOG.debug(\"Flowable Workflow definition loaded for domain {}\", domain);\n-            }\n \n-            // jump to the next ID block\n-            for (int i = 0; i < processEngine.getProcessEngineConfiguration().getIdBlockSize(); i++) {\n-                SpringProcessEngineConfiguration.class.cast(processEngine.getProcessEngineConfiguration()).\n-                        getIdGenerator().getNextId();\n+                if (processEngine.getProcessEngineConfiguration().getIdGenerator() instanceof DbIdGenerator) {\n+                    // jump to the next ID block\n+                    for (int i = 0; i < processEngine.getProcessEngineConfiguration().getIdBlockSize(); i++) {\n+                        processEngine.getProcessEngineConfiguration().getIdGenerator().getNextId();\n+                    }\n+                }\n             }\n         }\n     }"}]}