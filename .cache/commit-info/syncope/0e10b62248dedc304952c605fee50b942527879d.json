{"sha":"0e10b62248dedc304952c605fee50b942527879d","node_id":"C_kwDOJfYA1toAKDBlMTBiNjIyNDhkZWRjMzA0OTUyYzYwNWZlZTUwYjk0MjUyNzg3OWQ","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-03-09T11:14:31Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-03-09T11:17:41Z"},"message":"WA: adding missing conf properties about LDAP auth configuration","tree":{"sha":"d884a6d8b0fedaabf3937c166aa1110d40386712","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d884a6d8b0fedaabf3937c166aa1110d40386712"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0e10b62248dedc304952c605fee50b942527879d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0e10b62248dedc304952c605fee50b942527879d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0e10b62248dedc304952c605fee50b942527879d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0e10b62248dedc304952c605fee50b942527879d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9db04e830733c2e08ff1d158d9bcad8323119249","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9db04e830733c2e08ff1d158d9bcad8323119249","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9db04e830733c2e08ff1d158d9bcad8323119249"}],"stats":{"total":395,"additions":372,"deletions":23},"files":[{"sha":"8b6c8f2feca37ca855c95017cb0da90e8d56bd37","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/AbstractLDAPConf.java","status":"modified","additions":129,"deletions":2,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e10b62248dedc304952c605fee50b942527879d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractLDAPConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e10b62248dedc304952c605fee50b942527879d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractLDAPConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractLDAPConf.java?ref=0e10b62248dedc304952c605fee50b942527879d","patch":"@@ -28,6 +28,30 @@ public abstract class AbstractLDAPConf implements Serializable {\n \n     private static final long serialVersionUID = 3705514707899419599L;\n \n+    /**\n+     * The ldap type used to handle specific ops.\n+     */\n+    public enum LdapType {\n+\n+        /**\n+         * Generic ldap type (OpenLDAP, 389ds, etc).\n+         */\n+        GENERIC,\n+        /**\n+         * Active directory.\n+         */\n+        AD,\n+        /**\n+         * FreeIPA directory.\n+         */\n+        FreeIPA,\n+        /**\n+         * EDirectory.\n+         */\n+        EDirectory\n+\n+    }\n+\n     /**\n      * The ldap connection pool passivator.\n      */\n@@ -65,15 +89,76 @@ public enum LdapConnectionStrategy {\n \n     }\n \n+    /**\n+     * Describe hostname verification strategies.\n+     */\n+    public enum LdapHostnameVerifier {\n+        /**\n+         * Default option, forcing verification.\n+         */\n+        DEFAULT,\n+        /**\n+         * Skip hostname verification and allow all.\n+         */\n+        ANY\n+\n+    }\n+\n+    /**\n+     * Describe trust manager strategies.\n+     */\n+    public enum LdapTrustManager {\n+        /**\n+         * Loads the trust managers from the default {@link javax.net.ssl.TrustManagerFactory} and delegates to those.\n+         */\n+        DEFAULT,\n+        /**\n+         * Trusts any client or server.\n+         */\n+        ANY\n+\n+    }\n+\n+    /**\n+     * User filter to use for searching.\n+     * Syntax is {@code cn={user}} or {@code cn={0}}.\n+     *\n+     * You may also provide an external groovy script in the syntax of {@code file:/path/to/GroovyScript.groovy}\n+     * to fully build the final filter template dynamically.\n+     */\n     private String searchFilter;\n \n     /**\n      * Whether subtree searching is allowed.\n      */\n     private boolean subtreeSearch = true;\n \n+    /**\n+     * Request that the server return results in batches of a\n+     * specific size. See <a href=\"http://www.ietf.org/rfc/rfc2696.txt\">RFC 2696</a>. This control is often\n+     * used to work around server result size limits.\n+     * A negative/zero value disables paged requests.\n+     */\n+    private int pageSize;\n+\n+    /**\n+     * Base DN to use.\n+     * There may be scenarios where different parts of a single LDAP tree could be considered as base-dns. Rather than\n+     * duplicating the LDAP configuration block for each individual base-dn, each entry can be specified\n+     * and joined together using a special delimiter character. The user DN is retrieved using the combination of all\n+     * base-dn and DN resolvers in the order defined. DN resolution should fail if multiple DNs are found. Otherwise the\n+     * first DN found is returned.\n+     * Usual syntax is: {@code subtreeA,dc=example,dc=net|subtreeC,dc=example,dc=net}.\n+     */\n+    private String baseDn;\n+\n     private String ldapUrl;\n \n+    /**\n+     * LDAP type.\n+     */\n+    private LdapType ldapType = LdapType.GENERIC;\n+\n     /**\n      * The bind DN to use when connecting to LDAP.\n      * LDAP connection configuration injected into the LDAP connection pool\n@@ -96,8 +181,6 @@ public enum LdapConnectionStrategy {\n      */\n     private String bindCredential;\n \n-    private String baseDn;\n-\n     /**\n      * Whether to use a pooled connection factory in components.\n      */\n@@ -147,6 +230,18 @@ public enum LdapConnectionStrategy {\n      */\n     private LdapConnectionPoolPassivator poolPassivator = LdapConnectionPoolPassivator.BIND;\n \n+    /**\n+     * Hostname verification options.\n+     */\n+    private LdapHostnameVerifier hostnameVerifier = LdapHostnameVerifier.DEFAULT;\n+\n+    /**\n+     * Trust Manager options.\n+     * Trust managers are responsible for managing the trust material that is used when making LDAP trust decisions,\n+     * and for deciding whether credentials presented by a peer should be accepted.\n+     */\n+    private LdapTrustManager trustManager;\n+\n     /**\n      * Whether connections should be validated when loaned out from the pool.\n      */\n@@ -251,6 +346,14 @@ public void setSearchFilter(final String searchFilter) {\n         this.searchFilter = searchFilter;\n     }\n \n+    public int getPageSize() {\n+        return pageSize;\n+    }\n+\n+    public void setPageSize(final int pageSize) {\n+        this.pageSize = pageSize;\n+    }\n+\n     public boolean isSubtreeSearch() {\n         return subtreeSearch;\n     }\n@@ -259,6 +362,14 @@ public void setSubtreeSearch(final boolean subtreeSearch) {\n         this.subtreeSearch = subtreeSearch;\n     }\n \n+    public LdapType getLdapType() {\n+        return ldapType;\n+    }\n+\n+    public void setLdapType(final LdapType ldapType) {\n+        this.ldapType = ldapType;\n+    }\n+\n     public String getLdapUrl() {\n         return ldapUrl;\n     }\n@@ -323,6 +434,22 @@ public void setPoolPassivator(final LdapConnectionPoolPassivator poolPassivator)\n         this.poolPassivator = poolPassivator;\n     }\n \n+    public LdapHostnameVerifier getHostnameVerifier() {\n+        return hostnameVerifier;\n+    }\n+\n+    public void setHostnameVerifier(final LdapHostnameVerifier hostnameVerifier) {\n+        this.hostnameVerifier = hostnameVerifier;\n+    }\n+\n+    public LdapTrustManager getTrustManager() {\n+        return trustManager;\n+    }\n+\n+    public void setTrustManager(final LdapTrustManager trustManager) {\n+        this.trustManager = trustManager;\n+    }\n+\n     public boolean isValidateOnCheckout() {\n         return validateOnCheckout;\n     }"},{"sha":"109c33b022337625ae3f3d313c23bcdb1292686e","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/LDAPAuthModuleConf.java","status":"modified","additions":210,"deletions":8,"changes":218,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e10b62248dedc304952c605fee50b942527879d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FLDAPAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e10b62248dedc304952c605fee50b942527879d/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FLDAPAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FLDAPAuthModuleConf.java?ref=0e10b62248dedc304952c605fee50b942527879d","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Map;\n import org.apache.syncope.common.lib.AbstractLDAPConf;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n@@ -27,18 +31,216 @@ public class LDAPAuthModuleConf extends AbstractLDAPConf implements AuthModuleCo\n     private static final long serialVersionUID = -471527731042579422L;\n \n     /**\n-     * The attribute value that should be used\n-     * for the authenticated username, upon a successful authentication\n-     * attempt.\n+     * The enum Authentication types.\n      */\n-    private String userIdAttribute;\n+    public enum AuthenticationType {\n \n-    public String getUserIdAttribute() {\n-        return userIdAttribute;\n+        /**\n+         * Active Directory.\n+         */\n+        AD,\n+        /**\n+         * Authenticated Search.\n+         */\n+        AUTHENTICATED,\n+        /**\n+         * Direct Bind.\n+         */\n+        DIRECT,\n+        /**\n+         * Anonymous Search.\n+         */\n+        ANONYMOUS\n+\n+    }\n+\n+    public enum DerefAliasesType {\n+        NEVER,\n+        SEARCHING,\n+        FINDING,\n+        ALWAYS\n+\n+    }\n+\n+    /**\n+     * The authentication type.\n+     * <ul>\n+     * <li>{@code AD} - Users authenticate with {@code sAMAccountName}. </li>\n+     *\n+     * <li>{@code AUTHENTICATED} - Manager bind/search type of authentication.\n+     * If {@code} principalAttributePassword}\n+     * is empty then a user simple bind is done to validate credentials. Otherwise the given\n+     * attribute is compared with the given {@code principalAttributePassword} using\n+     * the {@code SHA} encrypted value of it.</li>\n+     *\n+     * <li>{@code ANONYMOUS}: Similar semantics as {@code AUTHENTICATED} except no {@code bindDn}\n+     * and {@code bindCredential} may be specified to initialize the connection.\n+     * If {@code principalAttributePassword} is empty then a user simple bind is done\n+     * to validate credentials. Otherwise the given attribute is compared with\n+     * the given {@code principalAttributePassword} using the {@code SHA} encrypted value of it.</li>\n+     *\n+     * <li>DIRECT: Direct Bind - Compute user DN from format string and perform simple bind.\n+     * This is relevant when no search is required to compute the DN needed for a bind operation.\n+     * Use cases for this type are:\n+     * 1) All users are under a single branch in the directory, {@code e.g. ou=Users,dc=example,dc=org.}\n+     * 2) The username provided on the CAS login form is part of the DN, e.g.\n+     * {@code uid=%s,ou=Users,dc=example,dc=org}.</li>\n+     *\n+     * </ul>\n+     */\n+    private AuthenticationType authenticationType = AuthenticationType.AUTHENTICATED;\n+\n+    /**\n+     * Specify the dn format accepted by the AD authenticator, etc.\n+     * Example format might be {@code uid=%s,ou=people,dc=example,dc=org}.\n+     */\n+    private String dnFormat;\n+\n+    /**\n+     * Whether specific search entry resolvers need to be set\n+     * on the authenticator, or the default should be used.\n+     */\n+    private boolean enhanceWithEntryResolver = true;\n+\n+    /**\n+     * Define how aliases are de-referenced.\n+     * Accepted values are:\n+     * <ul>\n+     * <li>{@code NEVER}</li>\n+     * <li>{@code SEARCHING}: dereference when searching the entries beneath the starting point but not when searching\n+     * for the starting entry.</li>\n+     * <li>{@code FINDING}: dereference when searching for the starting entry but not when searching the entries beneath\n+     * the starting point.</li>\n+     * <li>{@code ALWAYS}: dereference when searching for the starting entry and when searching the entries beneath the\n+     * starting point.</li>\n+     * </ul>\n+     */\n+    private DerefAliasesType derefAliases;\n+\n+    /**\n+     * If this attribute is set, the value found in the first attribute\n+     * value will be used in place of the DN.\n+     */\n+    private String resolveFromAttribute;\n+\n+    /**\n+     * The attribute value that should be used for the authenticated username, upon a successful authentication attempt.\n+     */\n+    private String principalAttributeId;\n+\n+    /**\n+     * Name of attribute to be used for principal's DN.\n+     */\n+    private String principalDnAttributeName = \"principalLdapDn\";\n+\n+    /**\n+     * Sets a flag that determines whether multiple values are allowed for the {@link #principalAttributeId}.\n+     * This flag only has an effect if {@link #principalAttributeId} is configured. If multiple values are detected\n+     * when the flag is false, the first value is used and a warning is logged. If multiple values are detected\n+     * when the flag is true, an exception is raised.\n+     */\n+    private boolean allowMultiplePrincipalAttributeValues;\n+\n+    /**\n+     * List of additional attributes to retrieve, if any.\n+     */\n+    private final List<String> additionalAttributes = new ArrayList<>();\n+\n+    /**\n+     * Flag to indicate whether CAS should block authentication\n+     * if a specific/configured principal id attribute is not found.\n+     */\n+    private boolean allowMissingPrincipalAttributeValue = true;\n+\n+    /**\n+     * When entry DN should be called as an attribute and stored into the principal.\n+     */\n+    private boolean collectDnAttribute;\n+\n+    public AuthenticationType getAuthenticationType() {\n+        return authenticationType;\n+    }\n+\n+    public void setAuthenticationType(final AuthenticationType authenticationType) {\n+        this.authenticationType = authenticationType;\n+    }\n+\n+    public String getDnFormat() {\n+        return dnFormat;\n+    }\n+\n+    public void setDnFormat(final String dnFormat) {\n+        this.dnFormat = dnFormat;\n+    }\n+\n+    public boolean isEnhanceWithEntryResolver() {\n+        return enhanceWithEntryResolver;\n+    }\n+\n+    public void setEnhanceWithEntryResolver(final boolean enhanceWithEntryResolver) {\n+        this.enhanceWithEntryResolver = enhanceWithEntryResolver;\n+    }\n+\n+    public DerefAliasesType getDerefAliases() {\n+        return derefAliases;\n+    }\n+\n+    public void setDerefAliases(final DerefAliasesType derefAliases) {\n+        this.derefAliases = derefAliases;\n+    }\n+\n+    public String getResolveFromAttribute() {\n+        return resolveFromAttribute;\n+    }\n+\n+    public void setResolveFromAttribute(final String resolveFromAttribute) {\n+        this.resolveFromAttribute = resolveFromAttribute;\n+    }\n+\n+    public String getPrincipalAttributeId() {\n+        return principalAttributeId;\n+    }\n+\n+    public void setPrincipalAttributeId(final String principalAttributeId) {\n+        this.principalAttributeId = principalAttributeId;\n+    }\n+\n+    public String getPrincipalDnAttributeName() {\n+        return principalDnAttributeName;\n+    }\n+\n+    public void setPrincipalDnAttributeName(final String principalDnAttributeName) {\n+        this.principalDnAttributeName = principalDnAttributeName;\n+    }\n+\n+    @JacksonXmlElementWrapper(localName = \"additionalAttributes\")\n+    @JacksonXmlProperty(localName = \"additionalAttribute\")\n+    public List<String> getAdditionalAttributes() {\n+        return additionalAttributes;\n+    }\n+\n+    public boolean isAllowMultiplePrincipalAttributeValues() {\n+        return allowMultiplePrincipalAttributeValues;\n+    }\n+\n+    public void setAllowMultiplePrincipalAttributeValues(final boolean allowMultiplePrincipalAttributeValues) {\n+        this.allowMultiplePrincipalAttributeValues = allowMultiplePrincipalAttributeValues;\n+    }\n+\n+    public boolean isAllowMissingPrincipalAttributeValue() {\n+        return allowMissingPrincipalAttributeValue;\n+    }\n+\n+    public void setAllowMissingPrincipalAttributeValue(final boolean allowMissingPrincipalAttributeValue) {\n+        this.allowMissingPrincipalAttributeValue = allowMissingPrincipalAttributeValue;\n+    }\n+\n+    public boolean isCollectDnAttribute() {\n+        return collectDnAttribute;\n     }\n \n-    public void setUserIdAttribute(final String userIdAttribute) {\n-        this.userIdAttribute = userIdAttribute;\n+    public void setCollectDnAttribute(final boolean collectDnAttribute) {\n+        this.collectDnAttribute = collectDnAttribute;\n     }\n \n     @Override"},{"sha":"dac67b19850bb636ce079f36423bd661ef1ff956","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e10b62248dedc304952c605fee50b942527879d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e10b62248dedc304952c605fee50b942527879d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=0e10b62248dedc304952c605fee50b942527879d","patch":"@@ -365,10 +365,10 @@ protected ReportTO resolveReference(final Method method, final Object... args)\n                 || \"update\".equals(method.getName())\n                 || \"delete\".equals(method.getName()))) {\n             for (int i = 0; key == null && i < args.length; i++) {\n-                if (args[i] instanceof String) {\n-                    key = (String) args[i];\n-                } else if (args[i] instanceof ReportTO) {\n-                    key = ((ReportTO) args[i]).getKey();\n+                if (args[i] instanceof String string) {\n+                    key = string;\n+                } else if (args[i] instanceof ReportTO reportTO) {\n+                    key = reportTO.getKey();\n                 }\n             }\n         }"},{"sha":"cbfd264869c987965b4cac2918e4fba97f022d1f","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e10b62248dedc304952c605fee50b942527879d/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e10b62248dedc304952c605fee50b942527879d/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=0e10b62248dedc304952c605fee50b942527879d","patch":"@@ -64,7 +64,7 @@ under the License.\n       \n   <!-- Authentication modules -->\n   <AuthModule id=\"DefaultLDAPAuthModule\" authModuleState=\"ACTIVE\"\n-              description=\"LDAP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"userIdAttribute\":\"cn\",\"bindDn\": \"${testds.bindDn}\", \"bindCredential\":\"${testds.password}\",\"ldapUrl\":\"ldap://localhost:${testds.port}\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"ou=People,${testds.rootDn}\",\"subtreeSearch\":true}'\n+              description=\"LDAP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"principalAttributeId\":\"cn\",\"bindDn\": \"${testds.bindDn}\", \"bindCredential\":\"${testds.password}\",\"ldapUrl\":\"ldap://localhost:${testds.port}\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"ou=People,${testds.rootDn}\",\"subtreeSearch\":true}'\n               items='[{\"intAttrName\":\"mail\",\"extAttrName\":\"email\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]},{\"intAttrName\":\"givenName\",\"extAttrName\":\"firstname\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]},{\"intAttrName\":\"sn\",\"extAttrName\":\"surname\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]},{\"intAttrName\":\"cn\",\"extAttrName\":\"fullname\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]}]'/>\n   <AuthModule id=\"DefaultJDBCAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"JDBC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"sql\":\"SELECT * FROM users_table WHERE name=?\", \"fieldPassword\": \"password\"}'/>"},{"sha":"08dda7b0d4982e0a63557b087d8c273becd326c8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthModuleTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e10b62248dedc304952c605fee50b942527879d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e10b62248dedc304952c605fee50b942527879d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java?ref=0e10b62248dedc304952c605fee50b942527879d","patch":"@@ -172,7 +172,7 @@ public void saveWithLdapModule() {\n         conf.setSearchFilter(\"cn={user}\");\n         conf.setSubtreeSearch(true);\n         conf.setLdapUrl(\"ldap://localhost:1389\");\n-        conf.setUserIdAttribute(\"uid\");\n+        conf.setPrincipalAttributeId(\"uid\");\n         conf.setBindCredential(\"Password\");\n \n         saveAuthModule(\"LDAPAuthModuleTest\", conf);"},{"sha":"a2231a184c821864312a0f895bfe51ed60905a60","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e10b62248dedc304952c605fee50b942527879d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e10b62248dedc304952c605fee50b942527879d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=0e10b62248dedc304952c605fee50b942527879d","patch":"@@ -64,7 +64,7 @@ under the License.\n \n   <!-- Authentication modules -->\n   <AuthModule id=\"DefaultLDAPAuthModule\" authModuleState=\"ACTIVE\"\n-              description=\"LDAP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"userIdAttribute\":\"cn\",\"bindDn\": \"${testds.bindDn}\", \"bindCredential\":\"${testds.password}\",\"ldapUrl\":\"ldap://localhost:${testds.port}\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"ou=People,${testds.rootDn}\",\"subtreeSearch\":true}'\n+              description=\"LDAP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"principalAttributeId\":\"cn\",\"bindDn\": \"${testds.bindDn}\", \"bindCredential\":\"${testds.password}\",\"ldapUrl\":\"ldap://localhost:${testds.port}\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"ou=People,${testds.rootDn}\",\"subtreeSearch\":true}'\n               items='[{\"intAttrName\":\"mail\",\"extAttrName\":\"email\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]},{\"intAttrName\":\"givenName\",\"extAttrName\":\"firstname\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]},{\"intAttrName\":\"sn\",\"extAttrName\":\"surname\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]},{\"intAttrName\":\"cn\",\"extAttrName\":\"fullname\",\"connObjectKey\":false,\"password\":false,\"mandatoryCondition\":\"false\",\"purpose\":\"NONE\",\"propagationJEXLTransformer\":null,\"pullJEXLTransformer\":null,\"transformers\":[]}]'/>\n   <AuthModule id=\"DefaultJDBCAuthModule\" authModuleState=\"ACTIVE\"\n               description=\"JDBC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"sql\":\"SELECT * FROM users_table WHERE name=?\", \"fieldPassword\": \"password\"}'/>"},{"sha":"9b46d13a75fe5ea0be6091725084d8aaf255bb50","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthModuleITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e10b62248dedc304952c605fee50b942527879d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e10b62248dedc304952c605fee50b942527879d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java?ref=0e10b62248dedc304952c605fee50b942527879d","patch":"@@ -93,7 +93,7 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n                 LDAPAuthModuleConf.class.cast(conf).setSearchFilter(\"cn={user}\");\n                 LDAPAuthModuleConf.class.cast(conf).setSubtreeSearch(true);\n                 LDAPAuthModuleConf.class.cast(conf).setLdapUrl(\"ldap://localhost:1389\");\n-                LDAPAuthModuleConf.class.cast(conf).setUserIdAttribute(\"uid\");\n+                LDAPAuthModuleConf.class.cast(conf).setPrincipalAttributeId(\"uid\");\n                 LDAPAuthModuleConf.class.cast(conf).setBaseDn(\"cn=Directory Manager,dc=example,dc=org\");\n                 LDAPAuthModuleConf.class.cast(conf).setBindCredential(\"Password\");\n                 break;"},{"sha":"7044758142fcf13d5bdc0612d1cf061fd0385437","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/AuthModulePropertySourceMapper.java","status":"modified","additions":19,"deletions":5,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e10b62248dedc304952c605fee50b942527879d/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e10b62248dedc304952c605fee50b942527879d/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java?ref=0e10b62248dedc304952c605fee50b942527879d","patch":"@@ -46,7 +46,8 @@\n import org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.ldap.AbstractLdapAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.ldap.AbstractLdapAuthenticationProperties.AuthenticationTypes;\n+import org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties;\n import org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.mfa.duo.DuoSecurityMultifactorAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorProperties;\n@@ -89,12 +90,25 @@ public Map<String, Object> map(final AuthModuleTO authModuleTO, final LDAPAuthMo\n         props.setName(authModuleTO.getKey());\n         props.setState(AuthenticationHandlerStates.valueOf(authModuleTO.getState().name()));\n         props.setOrder(authModuleTO.getOrder());\n-        if (StringUtils.isNotBlank(conf.getBindDn()) && StringUtils.isNotBlank(conf.getBindCredential())) {\n-            props.setType(AbstractLdapAuthenticationProperties.AuthenticationTypes.AUTHENTICATED);\n-        }\n-        props.setPrincipalAttributeId(conf.getUserIdAttribute());\n+\n+        props.setType(AuthenticationTypes.valueOf(conf.getAuthenticationType().name()));\n+        props.setDnFormat(conf.getDnFormat());\n+        props.setEnhanceWithEntryResolver(conf.isEnhanceWithEntryResolver());\n+        props.setDerefAliases(Optional.ofNullable(conf.getDerefAliases()).\n+                map(LDAPAuthModuleConf.DerefAliasesType::name).orElse(null));\n+        props.setResolveFromAttribute(conf.getResolveFromAttribute());\n+\n+        props.setPrincipalAttributeId(conf.getPrincipalAttributeId());\n+        props.setPrincipalDnAttributeName(conf.getPrincipalDnAttributeName());\n         props.setPrincipalAttributeList(authModuleTO.getItems().stream().\n                 map(item -> item.getIntAttrName() + \":\" + item.getExtAttrName()).collect(Collectors.toList()));\n+        props.setAllowMultiplePrincipalAttributeValues(conf.isAllowMultiplePrincipalAttributeValues());\n+        props.setAdditionalAttributes(conf.getAdditionalAttributes());\n+        props.setAllowMissingPrincipalAttributeValue(conf.isAllowMissingPrincipalAttributeValue());\n+        props.setCollectDnAttribute(props.isCollectDnAttribute());\n+\n+        props.getPasswordPolicy().setType(AbstractLdapProperties.LdapType.valueOf(conf.getLdapType().name()));\n+\n         fill(props, conf);\n \n         return prefix(\"cas.authn.ldap[].\", CasCoreConfigurationUtils.asMap(props));"},{"sha":"9730f4df0652c95cd7f2c17fabaa8cfa122af2f5","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/PropertySourceMapper.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e10b62248dedc304952c605fee50b942527879d/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FPropertySourceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e10b62248dedc304952c605fee50b942527879d/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FPropertySourceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FPropertySourceMapper.java?ref=0e10b62248dedc304952c605fee50b942527879d","patch":"@@ -19,13 +19,16 @@\n package org.apache.syncope.wa.bootstrap;\n \n import java.util.Map;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AbstractJDBCConf;\n import org.apache.syncope.common.lib.AbstractLDAPConf;\n+import org.apache.syncope.common.lib.AbstractLDAPConf.LdapTrustManager;\n import org.apereo.cas.configuration.model.support.ConnectionPoolingProperties;\n import org.apereo.cas.configuration.model.support.jpa.AbstractJpaProperties;\n import org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties.LdapConnectionPoolPassivator;\n+import org.apereo.cas.configuration.model.support.ldap.AbstractLdapProperties.LdapHostnameVerifierOptions;\n import org.apereo.cas.configuration.model.support.ldap.AbstractLdapSearchProperties;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -45,12 +48,15 @@ protected void fill(final AbstractLdapSearchProperties props, final AbstractLDAP\n         props.setBaseDn(conf.getBaseDn());\n         props.setSearchFilter(conf.getSearchFilter());\n         props.setSubtreeSearch(conf.isSubtreeSearch());\n+        props.setPageSize(conf.getPageSize());\n         props.setBindDn(conf.getBindDn());\n         props.setBindCredential(conf.getBindCredential());\n         props.setDisablePooling(conf.isDisablePooling());\n         props.setMinPoolSize(conf.getMinPoolSize());\n         props.setMaxPoolSize(conf.getMaxPoolSize());\n         props.setPoolPassivator(LdapConnectionPoolPassivator.valueOf(conf.getPoolPassivator().name()).name());\n+        props.setHostnameVerifier(LdapHostnameVerifierOptions.valueOf(conf.getHostnameVerifier().name()));\n+        props.setTrustManager(Optional.ofNullable(conf.getTrustManager()).map(LdapTrustManager::name).orElse(null));\n         props.setValidateOnCheckout(conf.isValidateOnCheckout());\n         props.setValidatePeriodically(conf.isValidatePeriodically());\n         props.setValidateTimeout(conf.getValidateTimeout().toString());"}]}