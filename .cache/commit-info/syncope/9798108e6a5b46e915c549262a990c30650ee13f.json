{"sha":"9798108e6a5b46e915c549262a990c30650ee13f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk3OTgxMDhlNmE1YjQ2ZTkxNWM1NDkyNjJhOTkwYzMwNjUwZWUxM2Y=","commit":{"author":{"name":"Jean-Baptiste Onofre","email":"jbonofre@apache.org","date":"2012-12-19T15:58:27Z"},"committer":{"name":"Jean-Baptiste Onofre","email":"jbonofre@apache.org","date":"2012-12-19T15:58:27Z"},"message":"[SYNCOPE-242] Move SyncopeUserValidator back into validation.entity as it is referenced from the @SyncopeUserCheck annotation\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1423908 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8f8b0a9ca8bcf287ba58b69de507e0b9a59190c2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8f8b0a9ca8bcf287ba58b69de507e0b9a59190c2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9798108e6a5b46e915c549262a990c30650ee13f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9798108e6a5b46e915c549262a990c30650ee13f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9798108e6a5b46e915c549262a990c30650ee13f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9798108e6a5b46e915c549262a990c30650ee13f/comments","author":{"login":"jbonofre","id":158903,"node_id":"MDQ6VXNlcjE1ODkwMw==","avatar_url":"https://avatars.githubusercontent.com/u/158903?v=4","gravatar_id":"","url":"https://api.github.com/users/jbonofre","html_url":"https://github.com/jbonofre","followers_url":"https://api.github.com/users/jbonofre/followers","following_url":"https://api.github.com/users/jbonofre/following{/other_user}","gists_url":"https://api.github.com/users/jbonofre/gists{/gist_id}","starred_url":"https://api.github.com/users/jbonofre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jbonofre/subscriptions","organizations_url":"https://api.github.com/users/jbonofre/orgs","repos_url":"https://api.github.com/users/jbonofre/repos","events_url":"https://api.github.com/users/jbonofre/events{/privacy}","received_events_url":"https://api.github.com/users/jbonofre/received_events","type":"User","site_admin":false},"committer":{"login":"jbonofre","id":158903,"node_id":"MDQ6VXNlcjE1ODkwMw==","avatar_url":"https://avatars.githubusercontent.com/u/158903?v=4","gravatar_id":"","url":"https://api.github.com/users/jbonofre","html_url":"https://github.com/jbonofre","followers_url":"https://api.github.com/users/jbonofre/followers","following_url":"https://api.github.com/users/jbonofre/following{/other_user}","gists_url":"https://api.github.com/users/jbonofre/gists{/gist_id}","starred_url":"https://api.github.com/users/jbonofre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jbonofre/subscriptions","organizations_url":"https://api.github.com/users/jbonofre/orgs","repos_url":"https://api.github.com/users/jbonofre/repos","events_url":"https://api.github.com/users/jbonofre/events{/privacy}","received_events_url":"https://api.github.com/users/jbonofre/received_events","type":"User","site_admin":false},"parents":[{"sha":"667152fd48a77b407c6724d1a93c6bf2ff1db808","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/667152fd48a77b407c6724d1a93c6bf2ff1db808","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/667152fd48a77b407c6724d1a93c6bf2ff1db808"}],"stats":{"total":648,"additions":361,"deletions":287},"files":[{"sha":"5a6edc300f418541ada2e2d8a497ba0d70a490a7","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncopeUserCheck.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserCheck.java?ref=9798108e6a5b46e915c549262a990c30650ee13f","patch":"@@ -26,7 +26,6 @@\n import javax.validation.Constraint;\n import javax.validation.Payload;\n \n-import org.apache.syncope.core.validation.user.SyncopeUserValidator;\n \n @Target( { ElementType.TYPE })\n @Retention(RetentionPolicy.RUNTIME)"},{"sha":"54406a1a16b02aec66052095046f4b94a17cf821","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncopeUserValidator.java","status":"renamed","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java?ref=9798108e6a5b46e915c549262a990c30650ee13f","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.validation.user;\n+package org.apache.syncope.core.persistence.validation.entity;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -29,8 +29,6 @@\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.validation.entity.AbstractValidator;\n-import org.apache.syncope.core.persistence.validation.entity.SyncopeUserCheck;\n import org.apache.syncope.core.policy.AccountPolicyEnforcer;\n import org.apache.syncope.core.policy.PasswordPolicyEnforcer;\n import org.apache.syncope.core.policy.PolicyEvaluator;","previous_filename":"core/src/main/java/org/apache/syncope/core/validation/user/SyncopeUserValidator.java"},{"sha":"69846d104277106bbcc09632c9107e0532e22939","filename":"core/src/main/java/org/apache/syncope/core/policy/AccountPolicyEnforcer.java","status":"modified","additions":5,"deletions":114,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java?ref=9798108e6a5b46e915c549262a990c30650ee13f","patch":"@@ -18,123 +18,14 @@\n  */\n package org.apache.syncope.core.policy;\n \n-import java.util.List;\n-import java.util.Map;\n-import java.util.regex.Pattern;\n-import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.apache.syncope.core.propagation.PropagationManager;\n-import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.rest.data.UserDataBinder;\n-import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n-import org.apache.syncope.core.workflow.WorkflowResult;\n import org.apache.syncope.types.AccountPolicySpec;\n import org.apache.syncope.types.PolicyType;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n-public class AccountPolicyEnforcer extends PolicyEnforcer<AccountPolicySpec, SyncopeUser> {\n+public interface AccountPolicyEnforcer {\n \n-    @Autowired\n-    private UserWorkflowAdapter uwfAdapter;\n+\tpublic abstract void enforce(AccountPolicySpec policy, PolicyType type,\n+\t\t\tSyncopeUser user) throws AccountPolicyException,\n+\t\t\tPolicyEnforceException;\n \n-    @Autowired\n-    private PropagationManager propagationManager;\n-\n-    @Autowired\n-    private PropagationTaskExecutor taskExecutor;\n-\n-    @Autowired\n-    private UserDataBinder userDataBinder;\n-\n-    private static final Pattern PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@. ]+\");\n-\n-    private static final Pattern LCPATTERN = Pattern.compile(\"[a-z0-9-_@. ]+\");\n-\n-    private static final Pattern UCPATTERN = Pattern.compile(\"[A-Z0-9-_@. ]+\");\n-\n-    @Override\n-    public void enforce(final AccountPolicySpec policy, final PolicyType type, final SyncopeUser user)\n-            throws AccountPolicyException, PolicyEnforceException {\n-\n-        if (user.getUsername() == null) {\n-            throw new PolicyEnforceException(\"Invalid account\");\n-        }\n-\n-        if (policy == null) {\n-            throw new PolicyEnforceException(\"Invalid policy\");\n-        }\n-\n-        // check min length\n-        if (policy.getMinLength() > 0 && policy.getMinLength() > user.getUsername().length()) {\n-            throw new AccountPolicyException(\"Username too short\");\n-        }\n-\n-        // check max length\n-        if (policy.getMaxLength() > 0 && policy.getMaxLength() < user.getUsername().length()) {\n-            throw new AccountPolicyException(\"Username too long\");\n-        }\n-\n-        // check words not permitted\n-        for (String word : policy.getWordsNotPermitted()) {\n-            if (user.getUsername().contains(word)) {\n-                throw new AccountPolicyException(\"Used word(s) not permitted\");\n-            }\n-        }\n-\n-        // check syntax\n-        if ((policy.isAllLowerCase() && !LCPATTERN.matcher(user.getUsername()).matches())\n-                || (policy.isAllUpperCase() && !UCPATTERN.matcher(user.getUsername()).matches())\n-                || !PATTERN.matcher(user.getUsername()).matches()) {\n-            throw new AccountPolicyException(\"Invalid username syntax\");\n-        }\n-\n-        // check prefix\n-        for (String prefix : policy.getPrefixesNotPermitted()) {\n-            if (user.getUsername().startsWith(prefix)) {\n-                throw new AccountPolicyException(\"Prefix not permitted\");\n-            }\n-        }\n-\n-        // check suffix\n-        for (String suffix : policy.getSuffixesNotPermitted()) {\n-            if (user.getUsername().endsWith(suffix)) {\n-                throw new AccountPolicyException(\"Suffix not permitted\");\n-            }\n-        }\n-\n-        // check for subsequent failed logins\n-        if (user.getFailedLogins() != null && policy.getPermittedLoginRetries() > 0\n-                && user.getFailedLogins() > policy.getPermittedLoginRetries() && !user.getSuspended()) {\n-            try {\n-                LOG.debug(\"User {}:{} is over to max failed logins\", user.getId(), user.getUsername());\n-\n-                // reduce failed logins number to avoid multiple request\n-                user.setFailedLogins(user.getFailedLogins() - 1);\n-\n-                // disable user\n-                final WorkflowResult<Long> updated = uwfAdapter.suspend(user);\n-\n-                // propagate suspension if and only if it is required by policy\n-                if (policy.isPropagateSuspension()) {\n-                    final List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                            new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                            new DefaultMapEntry(updated.getResult(), Boolean.FALSE),\n-                            updated.getPropByRes(), updated.getPerformedTasks()));\n-\n-                    taskExecutor.execute(tasks);\n-                }\n-\n-                if (LOG.isDebugEnabled()) {\n-                    final UserTO savedTO = userDataBinder.getUserTO(updated.getResult());\n-                    LOG.debug(\"About to return suspended user\\n{}\", savedTO);\n-                }\n-            } catch (Exception e) {\n-                LOG.error(\"Error during user suspension\", e);\n-            }\n-        }\n-    }\n-}\n+}\n\\ No newline at end of file"},{"sha":"f4faac88b95aead79a64abc4173dadf98710058e","filename":"core/src/main/java/org/apache/syncope/core/policy/PasswordPolicyEnforcer.java","status":"modified","additions":5,"deletions":168,"changes":173,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java?ref=9798108e6a5b46e915c549262a990c30650ee13f","patch":"@@ -20,174 +20,11 @@\n \n import org.apache.syncope.types.PasswordPolicySpec;\n import org.apache.syncope.types.PolicyType;\n-import org.springframework.stereotype.Component;\n \n-@Component\n-public class PasswordPolicyEnforcer extends PolicyEnforcer<PasswordPolicySpec, String> {\n+public interface PasswordPolicyEnforcer {\n \n-    @Override\n-    public void enforce(final PasswordPolicySpec policy, final PolicyType type, final String password)\n-            throws PasswordPolicyException, PolicyEnforceException {\n+\tpublic abstract void enforce(PasswordPolicySpec policy, PolicyType type,\n+\t\t\tString password) throws PasswordPolicyException,\n+\t\t\tPolicyEnforceException;\n \n-        if (password == null) {\n-            throw new PolicyEnforceException(\"Invalid password\");\n-        }\n-\n-        if (policy == null) {\n-            throw new PolicyEnforceException(\"Invalid policy\");\n-        }\n-\n-        // check length\n-        if (policy.getMinLength() > 0 && policy.getMinLength() > password.length()) {\n-            throw new PasswordPolicyException(\"Password too short\");\n-        }\n-\n-        if (policy.getMaxLength() > 0 && policy.getMaxLength() < password.length()) {\n-            throw new PasswordPolicyException(\"Password too long\");\n-        }\n-\n-        // check words not permitted\n-        for (String word : policy.getWordsNotPermitted()) {\n-            if (password.contains(word)) {\n-                throw new PasswordPolicyException(\"Used word(s) not permitted\");\n-            }\n-        }\n-\n-        // check digits occurrence\n-        if (policy.isDigitRequired() && !checkForDigit(password)) {\n-            throw new PasswordPolicyException(\"Password must contain digit(s)\");\n-        }\n-\n-        // check lowercase alphabetic characters occurrence\n-        if (policy.isLowercaseRequired() && !checkForLowercase(password)) {\n-            throw new PasswordPolicyException(\"Password must contain lowercase alphabetic character(s)\");\n-        }\n-\n-        // check uppercase alphabetic characters occurrence\n-        if (policy.isUppercaseRequired() && !checkForUppercase(password)) {\n-            throw new PasswordPolicyException(\"Password must contain uppercase alphabetic character(s)\");\n-        }\n-\n-        // check prefix\n-        for (String prefix : policy.getPrefixesNotPermitted()) {\n-            if (password.startsWith(prefix)) {\n-                throw new PasswordPolicyException(\"Prefix not permitted\");\n-            }\n-        }\n-\n-        // check suffix\n-        for (String suffix : policy.getSuffixesNotPermitted()) {\n-            if (password.endsWith(suffix)) {\n-                throw new PasswordPolicyException(\"Suffix not permitted\");\n-            }\n-        }\n-\n-        // check digit first occurrence\n-        if (policy.isMustStartWithDigit() && !checkForFirstDigit(password)) {\n-            throw new PasswordPolicyException(\"Password must start with a digit\");\n-        }\n-\n-        if (policy.isMustntStartWithDigit() && checkForFirstDigit(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't start with a digit\");\n-        }\n-\n-        // check digit last occurrence\n-        if (policy.isMustEndWithDigit() && !checkForLastDigit(password)) {\n-            throw new PasswordPolicyException(\"Password must end with a digit\");\n-        }\n-\n-        if (policy.isMustntEndWithDigit() && checkForLastDigit(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't end with a digit\");\n-        }\n-\n-        // check alphanumeric characters occurence\n-        if (policy.isAlphanumericRequired() && !checkForAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must contain alphanumeric character(s)\");\n-        }\n-\n-        // check non alphanumeric characters occurence\n-        if (policy.isNonAlphanumericRequired() && !checkForNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must contain non-alphanumeric character(s)\");\n-        }\n-\n-        // check alphanumeric character first occurrence\n-        if (policy.isMustStartWithAlpha() && !checkForFirstAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must start with an alphanumeric character\");\n-        }\n-\n-        if (policy.isMustntStartWithAlpha() && checkForFirstAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't start with an alphanumeric character\");\n-        }\n-\n-        // check alphanumeric character last occurrence\n-        if (policy.isMustEndWithAlpha() && !checkForLastAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must end with an alphanumeric character\");\n-        }\n-\n-        if (policy.isMustntEndWithAlpha() && checkForLastAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't end with an alphanumeric character\");\n-        }\n-\n-        // check non alphanumeric character first occurrence\n-        if (policy.isMustStartWithNonAlpha() && !checkForFirstNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must start with a non-alphanumeric character\");\n-        }\n-\n-        if (policy.isMustntStartWithNonAlpha() && checkForFirstNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't start with a non-alphanumeric character\");\n-        }\n-\n-        // check non alphanumeric character last occurrence\n-        if (policy.isMustEndWithNonAlpha() && !checkForLastNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must end with a non-alphanumeric character\");\n-        }\n-\n-        if (policy.isMustntEndWithNonAlpha() && checkForLastNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't end with a non-alphanumeric character\");\n-        }\n-    }\n-\n-    private boolean checkForDigit(final String str) {\n-        return PolicyPattern.DIGIT.matcher(str).matches();\n-    }\n-\n-    private boolean checkForLowercase(final String str) {\n-        return PolicyPattern.ALPHA_LOWERCASE.matcher(str).matches();\n-    }\n-\n-    private boolean checkForUppercase(final String str) {\n-        return PolicyPattern.ALPHA_UPPERCASE.matcher(str).matches();\n-    }\n-\n-    private boolean checkForFirstDigit(final String str) {\n-        return PolicyPattern.FIRST_DIGIT.matcher(str).matches();\n-    }\n-\n-    private boolean checkForLastDigit(final String str) {\n-        return PolicyPattern.LAST_DIGIT.matcher(str).matches();\n-    }\n-\n-    private boolean checkForAlphanumeric(final String str) {\n-        return PolicyPattern.ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForFirstAlphanumeric(final String str) {\n-        return PolicyPattern.FIRST_ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForLastAlphanumeric(final String str) {\n-        return PolicyPattern.LAST_ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForNonAlphanumeric(final String str) {\n-        return PolicyPattern.NON_ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForFirstNonAlphanumeric(final String str) {\n-        return PolicyPattern.FIRST_NON_ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForLastNonAlphanumeric(final String str) {\n-        return PolicyPattern.LAST_NON_ALPHANUMERIC.matcher(str).matches();\n-    }\n-}\n+}\n\\ No newline at end of file"},{"sha":"6bb4c63f0bc319bc4946292766e1a404f3d7ade6","filename":"core/src/main/java/org/apache/syncope/core/policy/PolicyEnforceException.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforceException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforceException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforceException.java?ref=9798108e6a5b46e915c549262a990c30650ee13f","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.policy;\n \n-class PolicyEnforceException extends Exception {\n+public class PolicyEnforceException extends Exception {\n \n     private static final long serialVersionUID = 3247084727383061069L;\n "},{"sha":"23befd261d4c8d50f7414000f7ad0dc6b1900a9b","filename":"core/src/main/java/org/apache/syncope/core/policy/impl/AccountPolicyEnforcerImpl.java","status":"added","additions":147,"deletions":0,"changes":147,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2Fimpl%2FAccountPolicyEnforcerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2Fimpl%2FAccountPolicyEnforcerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2Fimpl%2FAccountPolicyEnforcerImpl.java?ref=9798108e6a5b46e915c549262a990c30650ee13f","patch":"@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.policy.impl;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n+import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.policy.AccountPolicyEnforcer;\n+import org.apache.syncope.core.policy.AccountPolicyException;\n+import org.apache.syncope.core.policy.PolicyEnforceException;\n+import org.apache.syncope.core.policy.PolicyEnforcer;\n+import org.apache.syncope.core.propagation.PropagationManager;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.apache.syncope.types.AccountPolicySpec;\n+import org.apache.syncope.types.PolicyType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AccountPolicyEnforcerImpl extends PolicyEnforcer<AccountPolicySpec, SyncopeUser> implements AccountPolicyEnforcer {\n+\n+    @Autowired\n+    private UserWorkflowAdapter uwfAdapter;\n+\n+    @Autowired\n+    private PropagationManager propagationManager;\n+\n+    @Autowired\n+    private PropagationTaskExecutor taskExecutor;\n+\n+    @Autowired\n+    private UserDataBinder userDataBinder;\n+\n+    private static final Pattern PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@. ]+\");\n+\n+    private static final Pattern LCPATTERN = Pattern.compile(\"[a-z0-9-_@. ]+\");\n+\n+    private static final Pattern UCPATTERN = Pattern.compile(\"[A-Z0-9-_@. ]+\");\n+\n+    /* (non-Javadoc)\n+\t * @see org.apache.syncope.core.policy.AccountPolicyEnforcer#enforce(org.apache.syncope.types.AccountPolicySpec, org.apache.syncope.types.PolicyType, org.apache.syncope.core.persistence.beans.user.SyncopeUser)\n+\t */\n+    @Override\n+    public void enforce(final AccountPolicySpec policy, final PolicyType type, final SyncopeUser user)\n+            throws AccountPolicyException, PolicyEnforceException {\n+\n+        if (user.getUsername() == null) {\n+            throw new PolicyEnforceException(\"Invalid account\");\n+        }\n+\n+        if (policy == null) {\n+            throw new PolicyEnforceException(\"Invalid policy\");\n+        }\n+\n+        // check min length\n+        if (policy.getMinLength() > 0 && policy.getMinLength() > user.getUsername().length()) {\n+            throw new AccountPolicyException(\"Username too short\");\n+        }\n+\n+        // check max length\n+        if (policy.getMaxLength() > 0 && policy.getMaxLength() < user.getUsername().length()) {\n+            throw new AccountPolicyException(\"Username too long\");\n+        }\n+\n+        // check words not permitted\n+        for (String word : policy.getWordsNotPermitted()) {\n+            if (user.getUsername().contains(word)) {\n+                throw new AccountPolicyException(\"Used word(s) not permitted\");\n+            }\n+        }\n+\n+        // check syntax\n+        if ((policy.isAllLowerCase() && !LCPATTERN.matcher(user.getUsername()).matches())\n+                || (policy.isAllUpperCase() && !UCPATTERN.matcher(user.getUsername()).matches())\n+                || !PATTERN.matcher(user.getUsername()).matches()) {\n+            throw new AccountPolicyException(\"Invalid username syntax\");\n+        }\n+\n+        // check prefix\n+        for (String prefix : policy.getPrefixesNotPermitted()) {\n+            if (user.getUsername().startsWith(prefix)) {\n+                throw new AccountPolicyException(\"Prefix not permitted\");\n+            }\n+        }\n+\n+        // check suffix\n+        for (String suffix : policy.getSuffixesNotPermitted()) {\n+            if (user.getUsername().endsWith(suffix)) {\n+                throw new AccountPolicyException(\"Suffix not permitted\");\n+            }\n+        }\n+\n+        // check for subsequent failed logins\n+        if (user.getFailedLogins() != null && policy.getPermittedLoginRetries() > 0\n+                && user.getFailedLogins() > policy.getPermittedLoginRetries() && !user.getSuspended()) {\n+            try {\n+                LOG.debug(\"User {}:{} is over to max failed logins\", user.getId(), user.getUsername());\n+\n+                // reduce failed logins number to avoid multiple request\n+                user.setFailedLogins(user.getFailedLogins() - 1);\n+\n+                // disable user\n+                final WorkflowResult<Long> updated = uwfAdapter.suspend(user);\n+\n+                // propagate suspension if and only if it is required by policy\n+                if (policy.isPropagateSuspension()) {\n+                    final List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+                            new WorkflowResult<Map.Entry<Long, Boolean>>(\n+                            new DefaultMapEntry(updated.getResult(), Boolean.FALSE),\n+                            updated.getPropByRes(), updated.getPerformedTasks()));\n+\n+                    taskExecutor.execute(tasks);\n+                }\n+\n+                if (LOG.isDebugEnabled()) {\n+                    final UserTO savedTO = userDataBinder.getUserTO(updated.getResult());\n+                    LOG.debug(\"About to return suspended user\\n{}\", savedTO);\n+                }\n+            } catch (Exception e) {\n+                LOG.error(\"Error during user suspension\", e);\n+            }\n+        }\n+    }\n+}"},{"sha":"58a5f14b82d6d58f0103759d605869cdc35046fc","filename":"core/src/main/java/org/apache/syncope/core/policy/impl/PasswordPolicyEnforcerImpl.java","status":"added","additions":201,"deletions":0,"changes":201,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2Fimpl%2FPasswordPolicyEnforcerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2Fimpl%2FPasswordPolicyEnforcerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2Fimpl%2FPasswordPolicyEnforcerImpl.java?ref=9798108e6a5b46e915c549262a990c30650ee13f","patch":"@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.policy.impl;\n+\n+import org.apache.syncope.core.policy.PasswordPolicyEnforcer;\n+import org.apache.syncope.core.policy.PasswordPolicyException;\n+import org.apache.syncope.core.policy.PolicyEnforceException;\n+import org.apache.syncope.core.policy.PolicyEnforcer;\n+import org.apache.syncope.core.policy.PolicyPattern;\n+import org.apache.syncope.types.PasswordPolicySpec;\n+import org.apache.syncope.types.PolicyType;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class PasswordPolicyEnforcerImpl extends PolicyEnforcer<PasswordPolicySpec, String> implements PasswordPolicyEnforcer {\n+\n+    /* (non-Javadoc)\n+\t * @see org.apache.syncope.core.policy.PasswordPolicyEnforcer#enforce(org.apache.syncope.types.PasswordPolicySpec, org.apache.syncope.types.PolicyType, java.lang.String)\n+\t */\n+\t@Override\n+    public void enforce(final PasswordPolicySpec policy, final PolicyType type, final String password)\n+            throws PasswordPolicyException, PolicyEnforceException {\n+\n+        if (password == null) {\n+            throw new PolicyEnforceException(\"Invalid password\");\n+        }\n+\n+        if (policy == null) {\n+            throw new PolicyEnforceException(\"Invalid policy\");\n+        }\n+\n+        // check length\n+        if (policy.getMinLength() > 0 && policy.getMinLength() > password.length()) {\n+            throw new PasswordPolicyException(\"Password too short\");\n+        }\n+\n+        if (policy.getMaxLength() > 0 && policy.getMaxLength() < password.length()) {\n+            throw new PasswordPolicyException(\"Password too long\");\n+        }\n+\n+        // check words not permitted\n+        for (String word : policy.getWordsNotPermitted()) {\n+            if (password.contains(word)) {\n+                throw new PasswordPolicyException(\"Used word(s) not permitted\");\n+            }\n+        }\n+\n+        // check digits occurrence\n+        if (policy.isDigitRequired() && !checkForDigit(password)) {\n+            throw new PasswordPolicyException(\"Password must contain digit(s)\");\n+        }\n+\n+        // check lowercase alphabetic characters occurrence\n+        if (policy.isLowercaseRequired() && !checkForLowercase(password)) {\n+            throw new PasswordPolicyException(\"Password must contain lowercase alphabetic character(s)\");\n+        }\n+\n+        // check uppercase alphabetic characters occurrence\n+        if (policy.isUppercaseRequired() && !checkForUppercase(password)) {\n+            throw new PasswordPolicyException(\"Password must contain uppercase alphabetic character(s)\");\n+        }\n+\n+        // check prefix\n+        for (String prefix : policy.getPrefixesNotPermitted()) {\n+            if (password.startsWith(prefix)) {\n+                throw new PasswordPolicyException(\"Prefix not permitted\");\n+            }\n+        }\n+\n+        // check suffix\n+        for (String suffix : policy.getSuffixesNotPermitted()) {\n+            if (password.endsWith(suffix)) {\n+                throw new PasswordPolicyException(\"Suffix not permitted\");\n+            }\n+        }\n+\n+        // check digit first occurrence\n+        if (policy.isMustStartWithDigit() && !checkForFirstDigit(password)) {\n+            throw new PasswordPolicyException(\"Password must start with a digit\");\n+        }\n+\n+        if (policy.isMustntStartWithDigit() && checkForFirstDigit(password)) {\n+            throw new PasswordPolicyException(\"Password mustn't start with a digit\");\n+        }\n+\n+        // check digit last occurrence\n+        if (policy.isMustEndWithDigit() && !checkForLastDigit(password)) {\n+            throw new PasswordPolicyException(\"Password must end with a digit\");\n+        }\n+\n+        if (policy.isMustntEndWithDigit() && checkForLastDigit(password)) {\n+            throw new PasswordPolicyException(\"Password mustn't end with a digit\");\n+        }\n+\n+        // check alphanumeric characters occurence\n+        if (policy.isAlphanumericRequired() && !checkForAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password must contain alphanumeric character(s)\");\n+        }\n+\n+        // check non alphanumeric characters occurence\n+        if (policy.isNonAlphanumericRequired() && !checkForNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password must contain non-alphanumeric character(s)\");\n+        }\n+\n+        // check alphanumeric character first occurrence\n+        if (policy.isMustStartWithAlpha() && !checkForFirstAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password must start with an alphanumeric character\");\n+        }\n+\n+        if (policy.isMustntStartWithAlpha() && checkForFirstAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password mustn't start with an alphanumeric character\");\n+        }\n+\n+        // check alphanumeric character last occurrence\n+        if (policy.isMustEndWithAlpha() && !checkForLastAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password must end with an alphanumeric character\");\n+        }\n+\n+        if (policy.isMustntEndWithAlpha() && checkForLastAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password mustn't end with an alphanumeric character\");\n+        }\n+\n+        // check non alphanumeric character first occurrence\n+        if (policy.isMustStartWithNonAlpha() && !checkForFirstNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password must start with a non-alphanumeric character\");\n+        }\n+\n+        if (policy.isMustntStartWithNonAlpha() && checkForFirstNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password mustn't start with a non-alphanumeric character\");\n+        }\n+\n+        // check non alphanumeric character last occurrence\n+        if (policy.isMustEndWithNonAlpha() && !checkForLastNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password must end with a non-alphanumeric character\");\n+        }\n+\n+        if (policy.isMustntEndWithNonAlpha() && checkForLastNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password mustn't end with a non-alphanumeric character\");\n+        }\n+    }\n+\n+    private boolean checkForDigit(final String str) {\n+        return PolicyPattern.DIGIT.matcher(str).matches();\n+    }\n+\n+    private boolean checkForLowercase(final String str) {\n+        return PolicyPattern.ALPHA_LOWERCASE.matcher(str).matches();\n+    }\n+\n+    private boolean checkForUppercase(final String str) {\n+        return PolicyPattern.ALPHA_UPPERCASE.matcher(str).matches();\n+    }\n+\n+    private boolean checkForFirstDigit(final String str) {\n+        return PolicyPattern.FIRST_DIGIT.matcher(str).matches();\n+    }\n+\n+    private boolean checkForLastDigit(final String str) {\n+        return PolicyPattern.LAST_DIGIT.matcher(str).matches();\n+    }\n+\n+    private boolean checkForAlphanumeric(final String str) {\n+        return PolicyPattern.ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForFirstAlphanumeric(final String str) {\n+        return PolicyPattern.FIRST_ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForLastAlphanumeric(final String str) {\n+        return PolicyPattern.LAST_ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForNonAlphanumeric(final String str) {\n+        return PolicyPattern.NON_ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForFirstNonAlphanumeric(final String str) {\n+        return PolicyPattern.FIRST_NON_ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForLastNonAlphanumeric(final String str) {\n+        return PolicyPattern.LAST_NON_ALPHANUMERIC.matcher(str).matches();\n+    }\n+}"},{"sha":"39610eca6fd967691709906ceb825a659c5d54c4","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9798108e6a5b46e915c549262a990c30650ee13f/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=9798108e6a5b46e915c549262a990c30650ee13f","patch":"@@ -38,6 +38,7 @@ under the License.\n   <context:component-scan base-package=\"org.apache.syncope.core.persistence\"/>\n   <context:component-scan base-package=\"org.apache.syncope.core.rest.data\"/>\n   <context:component-scan base-package=\"org.apache.syncope.core.policy\"/>\n+  <context:component-scan base-package=\"org.apache.syncope.core.policy.impl\"/>\n \n   <aop:aspectj-autoproxy/>\n "}]}