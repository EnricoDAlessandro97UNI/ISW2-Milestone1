{"sha":"0685dfd99f1bb6703bdc43769e98a972516aba6a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA2ODVkZmQ5OWYxYmI2NzAzYmRjNDM3NjllOThhOTcyNTE2YWJhNmE=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-02-06T13:42:49Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-02-06T13:42:49Z"},"message":"Fixed issue #227\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247394 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"de6dec3f8d1f42dea40ab4dc041f5554d24ddbaa","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/de6dec3f8d1f42dea40ab4dc041f5554d24ddbaa"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0685dfd99f1bb6703bdc43769e98a972516aba6a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0685dfd99f1bb6703bdc43769e98a972516aba6a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0685dfd99f1bb6703bdc43769e98a972516aba6a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0685dfd99f1bb6703bdc43769e98a972516aba6a/comments","author":null,"committer":null,"parents":[{"sha":"bcdd141106ecd0f5cc1933e2422837ca0186e06d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bcdd141106ecd0f5cc1933e2422837ca0186e06d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bcdd141106ecd0f5cc1933e2422837ca0186e06d"}],"stats":{"total":595,"additions":471,"deletions":124},"files":[{"sha":"1599b6cb25995c84f3138191e411a05cfa9f6f4f","filename":"client/src/main/java/org/syncope/client/util/ConnConfPropUtils.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Futil%2FConnConfPropUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Futil%2FConnConfPropUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Futil%2FConnConfPropUtils.java?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.client.util;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import org.syncope.types.ConnConfProperty;\n+\n+/**\n+ * Utility class for manipulating connector properties.\n+ *\n+ */\n+public final class ConnConfPropUtils {\n+\n+    private ConnConfPropUtils() {\n+    }\n+\n+    public static Set<ConnConfProperty> joinConnInstanceProperties(\n+            final Map<String, ConnConfProperty> connectorProp,\n+            final Map<String, ConnConfProperty> resourceProp) {\n+\n+        connectorProp.putAll(resourceProp);\n+        return new HashSet<ConnConfProperty>(connectorProp.values());\n+    }\n+\n+    public static Map<String, ConnConfProperty> getConnConfPropertyMap(\n+            final Set<ConnConfProperty> properties) {\n+\n+        final Map<String, ConnConfProperty> prop =\n+                new HashMap<String, ConnConfProperty>();\n+        for (Iterator<ConnConfProperty> item =\n+                properties.iterator(); item.hasNext();) {\n+            ConnConfProperty property = item.next();\n+            prop.put(property.getSchema().getName(), property);\n+        }\n+        return prop;\n+    }\n+}"},{"sha":"01043d207518d191d8fa9af77b2cb3b56ddfafc7","filename":"console/src/main/java/org/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":38,"deletions":4,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -26,9 +26,11 @@\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -44,6 +46,7 @@\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.springframework.beans.BeanUtils;\n import org.springframework.util.ClassUtils;\n@@ -196,7 +199,7 @@ protected List<ConnConfProperty> load() {\n \n         final AjaxDropDownChoicePanel<ConnBundleTO> bundle =\n                 new AjaxDropDownChoicePanel<ConnBundleTO>(\n-                \"bundle\", \"bundle\", new Model(null), false);\n+                \"bundle\", \"bundle\", new Model(null), true);\n \n         bundle.setStyleShet(\"long_dynamicsize\");\n \n@@ -388,13 +391,44 @@ protected void populateItem(\n             }\n         };\n \n+        final Form connectorForm = new Form(\"form\");\n+        connectorForm.setModel(new CompoundPropertyModel(connectorTO));\n+\n+        final Form connectorPropForm = new Form(\"connectorPropForm\");\n+        connectorPropForm.setModel(new CompoundPropertyModel(connectorTO));\n+        connectorPropForm.setOutputMarkupId(true);\n+\n         propertiesContainer = new WebMarkupContainer(\"container\");\n         propertiesContainer.setOutputMarkupId(true);\n-        propertiesContainer.add(propView);\n \n-        Form connectorForm = new Form(\"form\");\n-        connectorForm.setModel(new CompoundPropertyModel(connectorTO));\n+        propertiesContainer.add(connectorPropForm);\n         connectorForm.add(propertiesContainer);\n+        connectorPropForm.add(propView);\n+\n+        final AjaxLink check =\n+                new IndicatingAjaxLink(\"check\", new ResourceModel(\"check\")) {\n+\n+                    private static final long serialVersionUID =\n+                            -7978723352517770644L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+\n+                        connectorTO.setBundleName(\n+                                selectedBundleTO.getBundleName());\n+                        connectorTO.setVersion(selectedBundleTO.getVersion());\n+\n+                            if (restClient.check(connectorTO).booleanValue()) {\n+                                info(getString(\"success_connection\"));\n+                            } else {\n+                                error(getString(\"error_connection\"));\n+                            }\n+                            \n+                            target.add(feedbackPanel);\n+                    }\n+                };\n+\n+        connectorPropForm.add(check);\n \n         final AjaxButton submit = new IndicatingAjaxButton(\"apply\", new Model(\n                 getString(\"submit\"))) {"},{"sha":"56883eca3a166602d86e958c0a9e2e34d7d06432","filename":"console/src/main/java/org/syncope/console/pages/ResourceModalPage.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -27,11 +27,13 @@\n import org.apache.wicket.ajax.IAjaxCallDecorator;\n import org.apache.wicket.ajax.calldecorator.AjaxPreprocessingCallDecorator;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.event.Broadcast;\n import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -48,9 +50,11 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.springframework.util.ClassUtils;\n+import org.syncope.client.to.ConnBundleTO;\n import org.syncope.client.to.ConnInstanceTO;\n import org.syncope.client.to.ResourceTO;\n import org.syncope.client.to.SchemaMappingTO;\n+import org.syncope.client.util.ConnConfPropUtils;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.pages.panels.ResourceSecurityPanel;\n import org.syncope.console.rest.ConnectorRestClient;\n@@ -125,6 +129,10 @@ public class ResourceModalPage extends BaseModalPage {\n \n     final AjaxButton addSchemaMappingBtn;\n \n+    final AjaxDropDownChoicePanel<ConnBundleTO> bundle =\n+            new AjaxDropDownChoicePanel<ConnBundleTO>(\n+            \"bundle\", \"bundle\", new Model(null), false);\n+\n     public ResourceModalPage(final PageReference callPageRef,\n             final ModalWindow window, final ResourceTO resourceTO,\n             final boolean createFlag) {\n@@ -744,6 +752,39 @@ protected void onUpdate(AjaxRequestTarget target) {\n                     }\n                 });\n \n+        final AjaxLink check =\n+                new IndicatingAjaxLink(\"check\", new ResourceModel(\"check\")) {\n+\n+                    private static final long serialVersionUID =\n+                            -4199438518229098169L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+\n+                        ConnInstanceTO connectorTO =\n+                                connectorRestClient.read(\n+                                resourceTO.getConnectorId());\n+\n+                        connectorTO.setConfiguration(\n+                                ConnConfPropUtils.joinConnInstanceProperties(\n+                                connectorTO.getConfigurationMap(),\n+                                ConnConfPropUtils.getConnConfPropertyMap(\n+                                resourceTO.getConnectorConfigurationProperties())));\n+\n+                            if (connectorRestClient.check(\n+                                    connectorTO).booleanValue()) {\n+                                info(getString(\"success_connection\"));\n+                            } else {\n+                                error(getString(\"error_connection\"));\n+                            }\n+                            \n+                            target.add(feedbackPanel);  \n+                    }\n+                };\n+\n+        check.setEnabled(!connectorPropertiesModel.getObject().isEmpty());\n+        connectorPropertiesContainer.add(check);\n+\n         //--------------------------------\n         // Security container\n         //--------------------------------"},{"sha":"1c0e73851f515f1c84d3d88598014883395dc153","filename":"console/src/main/java/org/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":35,"deletions":2,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -16,8 +16,10 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.springframework.beans.BeanUtils;\n import org.springframework.stereotype.Component;\n import org.syncope.client.to.ConnBundleTO;\n import org.syncope.client.to.ConnInstanceTO;\n@@ -119,18 +121,49 @@ public List<ConnConfProperty> getConnectorProperties(\n         return properties;\n     }\n \n-    private void filterProperties(final Set<ConnConfProperty> properties) {\n+    private Set<ConnConfProperty> filterProperties(final Set<ConnConfProperty> properties) {\n+\n+        Set<ConnConfProperty> newProperties = new HashSet<ConnConfProperty>();\n \n         for (ConnConfProperty property : properties) {\n+            ConnConfProperty prop = new ConnConfProperty();\n+            prop.setSchema(property.getSchema());\n+            prop.setOverridable(property.isOverridable());\n+\n             final List parsed = new ArrayList();\n \n             for (Object obj : property.getValues()) {\n                 if (obj != null && !obj.toString().isEmpty()) {\n                     parsed.add(obj);\n                 }\n             }\n+            prop.setValues(parsed);\n+            newProperties.add(prop);\n+        }\n+        return newProperties;\n+    }\n+\n+    /**\n+     * Test connection.\n+     *\n+     * @param connectorTO\n+     * @return Connection status\n+     */\n+    public Boolean check(final ConnInstanceTO connectorTO) {\n+\n+        ConnInstanceTO connector = new ConnInstanceTO();\n+        BeanUtils.copyProperties(connectorTO, connector);\n+\n+        connector.setConfiguration(\n+                filterProperties(connector.getConfiguration()));\n+\n+        try {\n+            return restTemplate.postForObject(baseURL\n+                    + \"connector/check.json\", connector, Boolean.class);\n \n-            property.setValues(parsed);\n+        } catch (Exception ex) {\n+            LOG.error(\"Connector not found {}\", ex);\n+            return false;\n         }\n     }\n }"},{"sha":"f65bd53ffbff3f00fae34ca56dfa313748b7ed89","filename":"console/src/main/resources/org/syncope/console/pages/ConnectorModalPage.html","status":"modified","additions":16,"deletions":10,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.html?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -88,19 +88,25 @@\n                                 <label for=\"version\"><wicket:message key=\"overridable\"/></label>\n                             </div>\n                         </div>\n+                        <form wicket:id=\"connectorPropForm\">\n+                            <div class=\"tablerow\" wicket:id=\"connectorProperties\">\n \n-                        <div class=\"tablerow\" wicket:id=\"connectorProperties\">\n-                            <div class=\"tablecolumn_check\" style=\"width: 27px; text-align: center; margin-right: 10px\">\n-                                <span wicket:id=\"connPropAttrOverridable\">[connPropAttrOverridable]</span>\n+                                <div class=\"tablecolumn_check\" style=\"width: 27px; text-align: center; margin-right: 10px\">\n+                                    <span wicket:id=\"connPropAttrOverridable\">[connPropAttrOverridable]</span>\n+                                </div>\n+                                <div class=\"tablecolumn_label short_dynamicsize\">\n+                                    <span wicket:id=\"connPropAttrSchema\">[connPropAttrSchema]</span>\n+                                </div>\n+                                <div class=\"tablecolumn_field short_dynamicsize\">\n+                                    <span wicket:id=\"panel\">[panel]</span>\n+                                </div>\n                             </div>\n-                            <div class=\"tablecolumn_label short_dynamicsize\">\n-                                <span wicket:id=\"connPropAttrSchema\">[connPropAttrSchema]</span>\n+                            <div>\n+                                <label style=\"position: absolute; top: 10px; right:55px;\"><wicket:message key=\"check\"/></label>\n+                                <a style=\"position: absolute; top: 2px; right:20px;\" wicket:id=\"check\">\n+                                    <img src=\"img/ping.png\" width=\"30\" height=\"30\" /></a>\n                             </div>\n-                            <div class=\"tablecolumn_field short_dynamicsize\">\n-                                <span wicket:id=\"panel\">[panel]</span>\n-                            </div>\n-                        </div>\n-\n+                        </form>\n                         <!-- inside the container in order to re-process javascript -->\n                         <script type=\"text/javascript\">\n                             $(function() {"},{"sha":"9633e7faa5a2271a4687a70747155aef52af9379","filename":"console/src/main/resources/org/syncope/console/pages/ConnectorModalPage.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.properties?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -26,3 +26,6 @@ overridable=Overridable\n property=Property\n value=Value\n \n+success_connection=Successful connecting to resource\n+error_connection=Connection failure\n+check=Check connection\n\\ No newline at end of file"},{"sha":"7b7371889aedc0815a121ec89b903216d2a03fa6","filename":"console/src/main/resources/org/syncope/console/pages/ConnectorModalPage_it.properties","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage_it.properties?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -24,4 +24,8 @@ title=Connettori\n displayName=Nome visualizzato\n overridable=Sovrascrivibile\n property=Propriet\\u00e0\n-value=Valore\n\\ No newline at end of file\n+value=Valore\n+\n+success_connection=Connessione alla risorsa avvenuta con successo\n+error_connection=Connessione fallita\n+check=Verifica connessione\n\\ No newline at end of file"},{"sha":"a87f54b9e2a396bebba8c21c8083744b2317ec12","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage.html","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -246,6 +246,11 @@\n                                 $('div#connectorProperties div#formtable div.tablerow:even').addClass(\"alt\");\n                             });\n                         </script>\n+                        <div>\n+                            <label style=\"position: absolute; top: 10px; right:55px;\"><wicket:message key=\"check\"/></label>\n+                            <a style=\"position: absolute; top: 2px; right:20px;\" wicket:id=\"check\">\n+                                <img src=\"img/ping.png\" width=\"30\" height=\"30\" /></a>\n+                        </div>\n                     </span>\n                 </div>\n "},{"sha":"46e72c468ee2d3eb98344fd0cd389008a4eae5e2","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage.properties","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -44,4 +44,8 @@ deleteTraceLevel=Delete trace level\n syncTraceLevel=Synchronization trace level\n propagationPriority=Propagation priority\n propagationPrimary=Propagation primary\n-resetToken=Reset Token\n\\ No newline at end of file\n+resetToken=Reset Token\n+\n+success_connection=Successful connecting to resource\n+error_connection=Connection failure\n+check=Check connection\n\\ No newline at end of file"},{"sha":"3ebc7909006e441506dcbcc2f62afbe924f11f47","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage_it.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -46,3 +46,7 @@ syncTraceLevel=Livello di tracciamento delle sincronizzazioni\n propagationPriority=Priorit\\u00e0 in propagazione\n propagationPrimary=Primaria in propagazione\n resetToken=Reset Token\n+\n+success_connection=Connessione alla risorsa avvenuta con successo\n+error_connection=Connessione fallita\n+check=Verifica connessione\n\\ No newline at end of file"},{"sha":"8ad053dbc0302565764a8678269ea28dc676b8d4","filename":"console/src/main/webapp/img/ping.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fwebapp%2Fimg%2Fping.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Fmain%2Fwebapp%2Fimg%2Fping.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fwebapp%2Fimg%2Fping.png?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a"},{"sha":"d8c50fe3f031111f0bbd4a2b1736e4af561ac61e","filename":"console/src/test/java/org/syncope/console/ConnInstanceTestITCase.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FConnInstanceTestITCase.java?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -84,4 +84,35 @@ public void delete() {\n                 + \"\\\"Error occurred during the requested operation\\\");\",\n                 \"10000\");\n     }\n+\n+    @Test\n+    public void checkConnection() {\n+        selenium.click(\"css=img[alt=\\\"Resources\\\"]\");\n+\n+        selenium.waitForCondition(\n+                \"selenium.isElementPresent(\\\"//div[@id='tabs']\\\");\", \"30000\");\n+\n+        selenium.click(\"//div[3]/ul/li[2]/a\");\n+        selenium.click(\"//tr[2]/td[6]/span/span[7]/a\");\n+\n+\n+\n+        selenium.waitForCondition(\"selenium.isElementPresent(\"\n+                + \"\\\"//input[@name='version:textField']\\\");\",\n+                \"30000\");\n+\n+        selenium.click(\"//div[2]/form/div[2]/ul/li[2]/a\");\n+\n+        selenium.waitForCondition(\"selenium.isElementPresent(\"\n+                + \"\\\"//input[@name='version:textField']\\\");\",\n+                \"30000\");\n+\n+        selenium.click(\"//div[2]/form/div[2]/\"\n+                + \"div[2]/div/span/div[2]/div[27]/a/img\");\n+\n+        selenium.waitForCondition(\n+                \"selenium.isElementPresent(\"\n+                + \"\\\"//div/ul/li/span[contains(text(),'Successful connecting to resource')]\\\");\",\n+                \"30000\");\n+    }\n }"},{"sha":"a1f37bcbf759919084de66b12ce990bc931a02d2","filename":"console/src/test/java/org/syncope/console/ResourceTestITCase.java","status":"modified","additions":32,"deletions":2,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FResourceTestITCase.java?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -53,7 +53,7 @@ public void browseEditModal() {\n                 \"30000\");\n \n         selenium.click(\"//tbody/tr[2]/td/input\");\n-        \n+\n         assertTrue(selenium.getConfirmation().matches(\n                 \"^Do you really want to delete the selected item[\\\\s\\\\S]$\"));\n \n@@ -96,4 +96,34 @@ public void checkSecurityTab() {\n \n         selenium.click(\"css=a.w_close\");\n     }\n-}\n+\n+    @Test\n+    public void checkConnection() {\n+        selenium.click(\"css=img[alt=\\\"Resources\\\"]\");\n+\n+        selenium.waitForCondition(\n+                \"selenium.isElementPresent(\\\"//div[@id='tabs']\\\");\", \"30000\");\n+\n+        selenium.click(\"//*[@id=\\\"users-contain\\\"]//\"\n+                + \"*[span=\\\"ws-target-resource-delete\\\"]/../td[4]/span/span[7]/a\");\n+\n+        selenium.waitForCondition(\"selenium.isElementPresent(\"\n+                + \"\\\"//form/div[2]/div/div/div/div/label[text()='Name']\\\");\",\n+                \"30000\");\n+\n+        selenium.click(\"//li[3]/a\");\n+\n+        selenium.waitForCondition(\"selenium.isElementPresent(\"\n+                + \"\\\"//div[2]/form/div[2]/\"\n+                + \"div[3]/span/div/div/div/span[text()='endpoint']\\\");\",\n+                \"30000\");\n+        \n+        selenium.click(\"//div[2]/form/div[2]/div[3]/span/div[2]/a/img\");\n+\n+        selenium.waitForCondition(\n+                \"selenium.isElementPresent(\"\n+                + \"\\\"//div/ul/li/span[contains(text(),\"\n+                + \"'Successful connecting to resource')]\\\");\",\n+                \"30000\");\n+    }\n+}\n\\ No newline at end of file"},{"sha":"302131ceeaf8315f3116783dcdf31cd72239999d","filename":"core/src/main/java/org/syncope/core/propagation/ConnectorFacadeProxy.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -150,8 +150,7 @@ public ConnectorFacadeProxy(\n \n                     if (GuardedString.class.equals(propertySchemaClass)) {\n                         propertyValue = new GuardedString(\n-                                ((String) property.getValues().iterator().next()).\n-                                toCharArray());\n+                                ((String) property.getValues().iterator().next()).toCharArray());\n                     } else if (GuardedByteArray.class.equals(\n                             propertySchemaClass)) {\n \n@@ -634,6 +633,13 @@ public void validate() {\n         connector.validate();\n     }\n \n+    /**\n+     * Check connection to resource.\n+     */\n+    public void test() {\n+        connector.test();\n+    }\n+\n     @Override\n     public String toString() {\n         return \"ConnectorFacadeProxy{\""},{"sha":"a8b575353d64c7aa7127e90785cbcd4fdc5200d6","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":82,"deletions":55,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -20,6 +20,7 @@\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.log.Log;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConfigurationProperty;\n@@ -36,6 +37,7 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConnBundleTO;\n import org.syncope.client.to.ConnInstanceTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -44,6 +46,7 @@\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n+import org.syncope.core.propagation.ConnectorFacadeProxy;\n import org.syncope.core.rest.data.ConnInstanceDataBinder;\n import org.syncope.core.util.ConnBundleManager;\n import org.syncope.types.ConnConfPropSchema;\n@@ -53,215 +56,215 @@\n @Controller\n @RequestMapping(\"/connector\")\n public class ConnInstanceController extends AbstractController {\n-\n+    \n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n-\n+    \n     @Autowired\n     private ConnInstanceDataBinder binder;\n-\n+    \n     @Autowired\n     private ConnBundleManager bundleManager;\n-\n+    \n     @PreAuthorize(\"hasRole('CONNECTOR_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n     public ConnInstanceTO create(final HttpServletResponse response,\n             @RequestBody final ConnInstanceTO connectorTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n-\n+        \n         LOG.debug(\"ConnInstance create called with configuration {}\",\n                 connectorTO);\n-\n+        \n         ConnInstance connInstance = binder.getConnInstance(connectorTO);\n-\n+        \n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n         } catch (Throwable t) {\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(\n                     HttpStatus.BAD_REQUEST);\n-\n+            \n             SyncopeClientException invalidConnInstance =\n                     new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidConnInstance);\n             invalidConnInstance.addElement(t.getMessage());\n-\n+            \n             scce.addException(invalidConnInstance);\n             throw scce;\n         }\n-\n+        \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getConnInstanceTO(connInstance);\n     }\n-\n+    \n     @PreAuthorize(\"hasRole('CONNECTOR_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public ConnInstanceTO update(\n             @RequestBody final ConnInstanceTO connectorTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n-\n+        \n         LOG.debug(\"Connector update called with configuration {}\", connectorTO);\n-\n+        \n         ConnInstance connInstance = binder.updateConnInstance(\n                 connectorTO.getId(), connectorTO);\n-\n+        \n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n         } catch (RuntimeException e) {\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(\n                     HttpStatus.BAD_REQUEST);\n-\n+            \n             SyncopeClientException invalidConnInstance =\n                     new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidConnInstance);\n             invalidConnInstance.addElement(e.getMessage());\n-\n+            \n             scce.addException(invalidConnInstance);\n             throw scce;\n         }\n-\n+        \n         return binder.getConnInstanceTO(connInstance);\n     }\n-\n+    \n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{connectorId}\")\n     public void delete(@PathVariable(\"connectorId\") Long connectorId)\n             throws NotFoundException {\n-\n+        \n         ConnInstance connInstance = connInstanceDAO.find(connectorId);\n         if (connInstance == null) {\n             LOG.error(\"Could not find connector '\" + connectorId + \"'\");\n-\n+            \n             throw new NotFoundException(String.valueOf(connectorId));\n         }\n-\n+        \n         if (!connInstance.getResources().isEmpty()) {\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(\n                     HttpStatus.BAD_REQUEST);\n-\n+            \n             SyncopeClientException invalidConnInstance =\n                     new SyncopeClientException(\n                     SyncopeClientExceptionType.ResourceExist);\n             for (ExternalResource resource : connInstance.getResources()) {\n                 invalidConnInstance.addElement(resource.getName());\n             }\n-\n+            \n             scce.addException(invalidConnInstance);\n             throw scce;\n         }\n-\n+        \n         connInstanceDAO.delete(connectorId);\n     }\n-\n+    \n     @PreAuthorize(\"hasRole('CONNECTOR_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n     @Transactional(readOnly = true)\n     public List<ConnInstanceTO> list(\n             @RequestParam(value = \"lang\", required = false) final String lang)\n             throws NotFoundException {\n-\n+        \n         if (StringUtils.isBlank(lang)) {\n             CurrentLocale.set(Locale.ENGLISH);\n         } else {\n             CurrentLocale.set(new Locale(lang));\n         }\n-\n+        \n         List<ConnInstance> connInstances = connInstanceDAO.findAll();\n-\n+        \n         List<ConnInstanceTO> connInstanceTOs =\n                 new ArrayList<ConnInstanceTO>();\n         for (ConnInstance connector : connInstances) {\n             connInstanceTOs.add(binder.getConnInstanceTO(connector));\n         }\n-\n+        \n         return connInstanceTOs;\n     }\n-\n+    \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{connectorId}\")\n     @Transactional(readOnly = true)\n     public ConnInstanceTO read(\n             @PathVariable(\"connectorId\") Long connectorId)\n             throws NotFoundException {\n-\n+        \n         ConnInstance connInstance = connInstanceDAO.find(connectorId);\n-\n+        \n         if (connInstance == null) {\n             LOG.error(\"Could not find connector '\" + connectorId + \"'\");\n-\n+            \n             throw new NotFoundException(String.valueOf(connectorId));\n         }\n-\n+        \n         return binder.getConnInstanceTO(connInstance);\n     }\n-\n+    \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/bundle/list\")\n     @Transactional(readOnly = true)\n     public List<ConnBundleTO> getBundles(\n             @RequestParam(value = \"lang\", required = false) final String lang)\n             throws NotFoundException, MissingConfKeyException {\n-\n+        \n         if (StringUtils.isBlank(lang)) {\n             CurrentLocale.set(Locale.ENGLISH);\n         } else {\n             CurrentLocale.set(new Locale(lang));\n         }\n-\n+        \n         ConnectorInfoManager manager =\n                 bundleManager.getConnectorManager();\n-\n+        \n         List<ConnectorInfo> bundles = manager.getConnectorInfos();\n-\n+        \n         if (LOG.isDebugEnabled() && bundles != null) {\n             LOG.debug(\"#Bundles: {}\", bundles.size());\n-\n+            \n             for (ConnectorInfo bundle : bundles) {\n                 LOG.debug(\"Bundle: {}\", bundle.getConnectorDisplayName());\n             }\n         }\n-\n+        \n         ConnBundleTO connectorBundleTO;\n         ConnectorKey key;\n         ConfigurationProperties properties;\n-\n+        \n         List<ConnBundleTO> connectorBundleTOs = new ArrayList<ConnBundleTO>();\n         if (bundles != null) {\n             for (ConnectorInfo bundle : bundles) {\n                 connectorBundleTO = new ConnBundleTO();\n                 connectorBundleTO.setDisplayName(\n                         bundle.getConnectorDisplayName());\n-\n+                \n                 key = bundle.getConnectorKey();\n-\n+                \n                 LOG.debug(\"\\nBundle name: {}\"\n                         + \"\\nBundle version: {}\"\n                         + \"\\nBundle class: {}\",\n                         new Object[]{\n                             key.getBundleName(),\n                             key.getBundleVersion(),\n                             key.getConnectorName()});\n-\n+                \n                 connectorBundleTO.setBundleName(key.getBundleName());\n                 connectorBundleTO.setConnectorName(key.getConnectorName());\n                 connectorBundleTO.setVersion(key.getBundleVersion());\n-\n+                \n                 properties = bundleManager.getConfigurationProperties(bundle);\n-\n+                \n                 ConnConfPropSchema connConfPropSchema;\n                 ConfigurationProperty configurationProperty;\n-\n+                \n                 for (String propName : properties.getPropertyNames()) {\n                     connConfPropSchema = new ConnConfPropSchema();\n-\n+                    \n                     configurationProperty = properties.getProperty(propName);\n \n                     // set name\n@@ -283,33 +286,57 @@ public List<ConnBundleTO> getBundles(\n                     // set type\n                     connConfPropSchema.setType(\n                             configurationProperty.getType().getName());\n-\n+                    \n                     connectorBundleTO.addProperty(connConfPropSchema);\n                 }\n-\n+                \n                 LOG.debug(\"Bundle properties: {}\",\n                         connectorBundleTO.getProperties());\n-\n+                \n                 connectorBundleTOs.add(connectorBundleTO);\n             }\n         }\n-\n+        \n         return connectorBundleTOs;\n     }\n-\n+    \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{connectorId}/configurationProperty/list\")\n     @Transactional(readOnly = true)\n     public List<ConnConfProperty> getConfigurationProperties(\n             @PathVariable(\"connectorId\") final Long connectorId)\n             throws NotFoundException {\n-\n+        \n         final ConnInstance connector = connInstanceDAO.find(connectorId);\n         if (connector == null) {\n             throw new NotFoundException(String.format(\n                     \"Connector instance with id %d not found\", connectorId));\n         }\n         return new ArrayList<ConnConfProperty>(connector.getConfiguration());\n     }\n+    \n+    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/check\")\n+    @Transactional(readOnly = true)\n+    public ModelAndView check(final HttpServletResponse response,\n+            @RequestBody final ConnInstanceTO connectorTO)\n+            throws SyncopeClientCompositeErrorException, NotFoundException {\n+        \n+        Boolean status = false;\n+        ConnectorFacadeProxy connector =\n+                new ConnectorFacadeProxy(\n+                binder.getConnInstance(connectorTO), bundleManager);\n+        \n+        try {\n+            connector.test();\n+            status = true;\n+        } catch (Exception ex) {\n+            LOG.error(\"Test connection failure {}\", ex);\n+            return new ModelAndView().addObject(false);\n+        }\n+        \n+        return new ModelAndView().addObject(status);\n+    }\n }"},{"sha":"e57fdb3dc82725d08412f72836fb4e3716dfcde2","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -26,7 +26,6 @@\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.Uid;\n-import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -37,7 +36,6 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.ConnObjectTO;\n import org.syncope.client.to.ResourceTO;\n@@ -233,41 +231,6 @@ public List<String> getSchemaNames(\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('RESOURCE_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/check/{resourceName}\")\n-    @Transactional(readOnly = true)\n-    public ModelAndView check(\n-            @PathVariable(\"resourceName\") final String resourceName)\n-            throws NotFoundException {\n-\n-        final ExternalResource resource = resourceDAO.find(resourceName);\n-        if (resource == null) {\n-            LOG.error(\"Missing resource: {}\", resourceName);\n-            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n-        }\n-\n-        ConnectorFacadeProxy connector;\n-        try {\n-            connector = connLoader.getConnector(resource);\n-        } catch (BeansException e) {\n-            throw new NotFoundException(\n-                    \"Connector \" + resource.getConnector().getId(), e);\n-        }\n-\n-        Boolean verify = Boolean.FALSE;\n-        try {\n-            if (connector != null) {\n-                connector.validate();\n-                verify = Boolean.TRUE;\n-            }\n-        } catch (RuntimeException ignore) {\n-            LOG.warn(\"Connector validation failed\", ignore);\n-        }\n-\n-        return new ModelAndView().addObject(verify);\n-    }\n-\n     @PreAuthorize(\"hasRole('RESOURCE_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{roleName}/mappings\")"},{"sha":"ac3387d8fd602f1145d070f848f58995c1e15896","filename":"core/src/test/java/org/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":110,"deletions":1,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -30,6 +30,8 @@\n import java.util.Properties;\n import java.util.Set;\n import org.connid.bundles.soap.WebServiceConnector;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.identityconnectors.databasetable.DatabaseTableConnector;\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n@@ -45,6 +47,8 @@ public class ConnInstanceTestITCase extends AbstractTest {\n \n     private static String connidSoapVersion;\n \n+    private static String connidDbTableVersion;\n+\n     private static String bundlesDirectory;\n \n     @BeforeClass\n@@ -56,6 +60,7 @@ public static void init() {\n                     \"/bundles.properties\");\n             props.load(propStream);\n             connidSoapVersion = props.getProperty(\"connid.soap.version\");\n+            connidDbTableVersion = props.getProperty(\"connid.db.table.version\");\n             bundlesDirectory = props.getProperty(\"bundles.directory\");\n         } catch (Throwable t) {\n             LOG.error(\"Could not load bundles.properties\", t);\n@@ -345,4 +350,108 @@ public void checkSelectedLanguage() {\n             }\n         }\n     }\n-}\n+\n+    @Test\n+    public void check() {\n+\n+        ConnInstanceTO connectorTO = new ConnInstanceTO();\n+\n+        // set connector version\n+        connectorTO.setVersion(connidDbTableVersion);\n+\n+        // set connector name\n+        connectorTO.setConnectorName(DatabaseTableConnector.class.getName());\n+\n+        // set bundle name\n+        connectorTO.setBundleName(\"org.connid.bundles.db.table\");\n+\n+        connectorTO.setDisplayName(\"H2Test\");\n+\n+        // set the connector configuration using PropertyTO\n+        Set<ConnConfProperty> conf = new HashSet<ConnConfProperty>();\n+\n+        ConnConfPropSchema userSchema = new ConnConfPropSchema();\n+        userSchema.setName(\"user\");\n+        userSchema.setType(String.class.getName());\n+        userSchema.setRequired(false);\n+        ConnConfProperty user = new ConnConfProperty();\n+        user.setSchema(userSchema);\n+        user.setValues(Collections.singletonList(\"sa\"));\n+\n+        ConnConfPropSchema keyColumnSchema = new ConnConfPropSchema();\n+        keyColumnSchema.setName(\"keyColumn\");\n+        keyColumnSchema.setType(String.class.getName());\n+        keyColumnSchema.setRequired(true);\n+        ConnConfProperty keyColumn = new ConnConfProperty();\n+        keyColumn.setSchema(keyColumnSchema);\n+        keyColumn.setValues(Collections.singletonList(\"id\"));\n+\n+        ConnConfPropSchema jdbcUrlTemplateSchema = new ConnConfPropSchema();\n+        jdbcUrlTemplateSchema.setName(\"jdbcUrlTemplate\");\n+        jdbcUrlTemplateSchema.setType(String.class.getName());\n+        jdbcUrlTemplateSchema.setRequired(true);\n+        ConnConfProperty jdbcUrlTemplate = new ConnConfProperty();\n+        jdbcUrlTemplate.setSchema(jdbcUrlTemplateSchema);\n+        jdbcUrlTemplate.setValues(Collections.singletonList(\n+                \"jdbc:h2:tcp://localhost:9092/testdb\"));\n+\n+        ConnConfPropSchema passwordColumnSchema = new ConnConfPropSchema();\n+        passwordColumnSchema.setName(\"passwordColumn\");\n+        passwordColumnSchema.setType(String.class.getName());\n+        passwordColumnSchema.setRequired(true);\n+        ConnConfProperty passwordColumn = new ConnConfProperty();\n+        passwordColumn.setSchema(passwordColumnSchema);\n+        passwordColumn.setValues(Collections.singletonList(\"password\"));\n+\n+        ConnConfPropSchema tableSchema = new ConnConfPropSchema();\n+        tableSchema.setName(\"table\");\n+        tableSchema.setType(String.class.getName());\n+        tableSchema.setRequired(true);\n+        ConnConfProperty table = new ConnConfProperty();\n+        table.setSchema(tableSchema);\n+        table.setValues(Collections.singletonList(\"test\"));\n+\n+        ConnConfPropSchema passwordSchema = new ConnConfPropSchema();\n+        passwordSchema.setName(\"password\");\n+        passwordSchema.setType(GuardedString.class.getName());\n+        passwordSchema.setRequired(true);\n+        ConnConfProperty password = new ConnConfProperty();\n+        password.setSchema(passwordSchema);\n+        password.setValues(Collections.singletonList(\"sa\"));\n+\n+        ConnConfPropSchema jdbcDriverSchema = new ConnConfPropSchema();\n+        jdbcDriverSchema.setName(\"jdbcDriver\");\n+        jdbcDriverSchema.setType(String.class.getName());\n+        jdbcDriverSchema.setRequired(true);\n+        ConnConfProperty jdbcDriver = new ConnConfProperty();\n+        jdbcDriver.setSchema(jdbcDriverSchema);\n+        jdbcDriver.setValues(Collections.singletonList(\"org.h2.Driver\"));\n+\n+        conf.add(user);\n+        conf.add(keyColumn);\n+        conf.add(jdbcUrlTemplate);\n+        conf.add(passwordColumn);\n+        conf.add(table);\n+        conf.add(password);\n+        conf.add(jdbcDriver);\n+\n+        // set connector configuration\n+        connectorTO.setConfiguration(conf);\n+\n+        Boolean verify = restTemplate.postForObject(\n+                BASE_URL + \"connector/check.json\",\n+                connectorTO, Boolean.class);\n+\n+        assertTrue(verify);\n+\n+        conf.remove(password);\n+        password.setValues(Collections.singletonList(\"password\"));\n+        conf.add(password);\n+        \n+        verify = restTemplate.postForObject(\n+                BASE_URL + \"connector/check.json\",\n+                connectorTO, Boolean.class);\n+        \n+        assertFalse(verify);\n+    }\n+}\n\\ No newline at end of file"},{"sha":"2827dce7631ca7525c65d729be7a976198cbe3c1","filename":"core/src/test/java/org/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -402,15 +402,6 @@ public void read() {\n         assertNotNull(actual);\n     }\n \n-    @Test\n-    public void check() {\n-        Boolean verify = restTemplate.getForObject(\n-                BASE_URL + \"resource/check/{resourceName}.json\",\n-                Boolean.class, \"ws-target-resource-1\");\n-\n-        assertTrue(verify);\n-    }\n-\n     @Test\n     public void getSchemaNames() {\n         List<String> schemaNames = Arrays.asList(restTemplate.getForObject("},{"sha":"e033efb89ff34139b382ab047d50b619e81e385a","filename":"core/src/test/resources/bundles.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0685dfd99f1bb6703bdc43769e98a972516aba6a/core%2Fsrc%2Ftest%2Fresources%2Fbundles.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0685dfd99f1bb6703bdc43769e98a972516aba6a/core%2Fsrc%2Ftest%2Fresources%2Fbundles.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fbundles.properties?ref=0685dfd99f1bb6703bdc43769e98a972516aba6a","patch":"@@ -10,4 +10,5 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n connid.soap.version=${connid.soap.version}\n+connid.db.table.version=${connid.db.table.version}\n bundles.directory=${bundles.directory}"}]}