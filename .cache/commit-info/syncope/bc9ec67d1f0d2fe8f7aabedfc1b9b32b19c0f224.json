{"sha":"bc9ec67d1f0d2fe8f7aabedfc1b9b32b19c0f224","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJjOWVjNjdkMWYwZDJmZThmN2FhYmVkZmMxYjliMzJiMTljMGYyMjQ=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2014-06-23T15:26:52Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2014-06-23T15:26:52Z"},"message":"[SYNCOPE-504] fix on the branch 1_1_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1604839 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6209557024056af0101f1a74df4e979fb27f78e3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6209557024056af0101f1a74df4e979fb27f78e3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bc9ec67d1f0d2fe8f7aabedfc1b9b32b19c0f224","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bc9ec67d1f0d2fe8f7aabedfc1b9b32b19c0f224","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bc9ec67d1f0d2fe8f7aabedfc1b9b32b19c0f224","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bc9ec67d1f0d2fe8f7aabedfc1b9b32b19c0f224/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"13f2038c7164d33a8b6d3f5a05ae72799b83dc47","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/13f2038c7164d33a8b6d3f5a05ae72799b83dc47","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/13f2038c7164d33a8b6d3f5a05ae72799b83dc47"}],"stats":{"total":76,"additions":40,"deletions":36},"files":[{"sha":"c969806a0d7432d2399c3809fc802ec309f2d63b","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":40,"deletions":36,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc9ec67d1f0d2fe8f7aabedfc1b9b32b19c0f224/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc9ec67d1f0d2fe8f7aabedfc1b9b32b19c0f224/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=bc9ec67d1f0d2fe8f7aabedfc1b9b32b19c0f224","patch":"@@ -475,7 +475,7 @@ public Long findMatchingAttributableId(final ObjectClass objectClass, final Stri\n \n         final List<ConnectorObject> found = connector.search(objectClass,\n                 new EqualsFilter(new Name(name)), connector.getOperationOptions(\n-                        attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)));\n+                attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", objectClass, syncTask.getResource(), name);\n@@ -528,8 +528,6 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n \n         AbstractAttributableTO subjectTO = connObjectUtil.getAttributableTO(delta.getObject(), syncTask, attrUtil);\n \n-        delta = actions.beforeCreate(this, delta, subjectTO);\n-\n         // Attributable transformation (if configured)\n         AbstractAttributableTO actual = attrTransformer.transform(subjectTO);\n         LOG.debug(\"Transformed: {}\", actual);\n@@ -543,7 +541,9 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n                 result.setName(((RoleTO) actual).getName());\n             }\n         } else {\n-            Object output = null;\n+            delta = actions.beforeCreate(this, delta, actual);\n+\n+            Object output;\n             Result resultStatus;\n \n             try {\n@@ -599,6 +599,8 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n                 resultStatus = Result.FAILURE;\n             }\n \n+            actions.after(this, delta, actual, result);\n+\n             notificationManager.createTasks(\n                     AuditElements.EventCategoryType.SYNCHRONIZATION,\n                     AttributableType.USER.name().toLowerCase(),\n@@ -620,7 +622,6 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n                     delta);\n         }\n \n-        actions.after(this, delta, actual, result);\n         return Collections.singletonList(result);\n     }\n \n@@ -632,8 +633,6 @@ protected Map.Entry<UserTO, UserTO> updateUser(final Long id, SyncDelta delta, f\n         UserMod userMod = connObjectUtil.getAttributableMod(\n                 id, delta.getObject(), before, syncTask, AttributableUtil.getInstance(AttributableType.USER));\n \n-        delta = actions.beforeUpdate(this, delta, before, userMod);\n-\n         if (dryRun) {\n             return new AbstractMap.SimpleEntry<UserTO, UserTO>(before, before);\n         }\n@@ -642,6 +641,8 @@ protected Map.Entry<UserTO, UserTO> updateUser(final Long id, SyncDelta delta, f\n         UserMod actual = attrTransformer.transform(userMod);\n         LOG.debug(\"Transformed: {}\", actual);\n \n+        delta = actions.beforeUpdate(this, delta, before, userMod);\n+\n         WorkflowResult<Map.Entry<Long, Boolean>> updated;\n         try {\n             updated = uwfAdapter.update(actual);\n@@ -702,8 +703,6 @@ protected Map.Entry<RoleTO, RoleTO> updateRole(\n         RoleMod roleMod = connObjectUtil.getAttributableMod(\n                 id, delta.getObject(), before, syncTask, AttributableUtil.getInstance(AttributableType.ROLE));\n \n-        delta = actions.beforeUpdate(this, delta, before, roleMod);\n-\n         if (dryRun) {\n             return new AbstractMap.SimpleEntry<RoleTO, RoleTO>(before, before);\n         }\n@@ -712,6 +711,8 @@ protected Map.Entry<RoleTO, RoleTO> updateRole(\n         RoleMod actual = attrTransformer.transform(roleMod);\n         LOG.debug(\"Transformed: {}\", actual);\n \n+        delta = actions.beforeUpdate(this, delta, before, roleMod);\n+\n         WorkflowResult<Long> updated = rwfAdapter.update(actual);\n         String roleOwner = null;\n         for (AttributeMod attrMod : actual.getAttributesToBeUpdated()) {\n@@ -753,7 +754,7 @@ protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, fi\n         for (Long id : subjects) {\n             LOG.debug(\"About to update {}\", id);\n \n-            Object output = null;\n+            Object output;\n             AbstractAttributableTO before = null;\n             Result resultStatus;\n \n@@ -837,16 +838,16 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n         List<SyncResult> delResults = new ArrayList<SyncResult>();\n \n         for (Long id : subjects) {\n-            Object output = null;\n+            Object output;\n             Result resultStatus = Result.FAILURE;\n \n+            final SyncResult result = new SyncResult();\n+\n             try {\n                 AbstractAttributableTO subjectTO = AttributableType.USER == attrUtil.getType()\n                         ? userDataBinder.getUserTO(id)\n                         : roleDataBinder.getRoleTO(id);\n-                delta = actions.beforeDelete(this, delta, subjectTO);\n \n-                final SyncResult result = new SyncResult();\n                 result.setId(id);\n                 if (subjectTO instanceof UserTO) {\n                     result.setName(((UserTO) subjectTO).getUsername());\n@@ -859,6 +860,8 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n                 result.setStatus(SyncResult.Status.SUCCESS);\n \n                 if (!dryRun) {\n+                    delta = actions.beforeDelete(this, delta, subjectTO);\n+\n                     try {\n                         List<PropagationTask> tasks = Collections.<PropagationTask>emptyList();\n                         if (AttributableType.USER == attrUtil.getType()) {\n@@ -887,37 +890,38 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n                         LOG.error(\"Could not delete {} {}\", attrUtil.getType(), id, e);\n                         output = e;\n                     }\n+\n+                    actions.after(this, delta, subjectTO, result);\n+\n+                    notificationManager.createTasks(\n+                            AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                            attrUtil.getType().name().toLowerCase(),\n+                            syncTask.getResource().getName(),\n+                            \"delete\",\n+                            resultStatus,\n+                            subjectTO,\n+                            output,\n+                            delta);\n+\n+                    auditManager.audit(\n+                            AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                            attrUtil.getType().name().toLowerCase(),\n+                            syncTask.getResource().getName(),\n+                            \"delete\",\n+                            resultStatus,\n+                            subjectTO,\n+                            output,\n+                            delta);\n                 }\n \n-                actions.after(this, delta, subjectTO, result);\n                 delResults.add(result);\n \n             } catch (NotFoundException e) {\n                 LOG.error(\"Could not find {} {}\", attrUtil.getType(), id, e);\n             } catch (UnauthorizedRoleException e) {\n                 LOG.error(\"Not allowed to read {} {}\", attrUtil.getType(), id, e);\n-            }\n-\n-            if (!dryRun) {\n-                notificationManager.createTasks(\n-                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n-                        attrUtil.getType().name().toLowerCase(),\n-                        syncTask.getResource().getName(),\n-                        \"delete\",\n-                        resultStatus,\n-                        null, // searching for before object is too much expensive ... \n-                        output,\n-                        delta);\n-\n-                auditManager.audit(\n-                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n-                        attrUtil.getType().name().toLowerCase(),\n-                        syncTask.getResource().getName(),\n-                        \"delete\",\n-                        resultStatus,\n-                        null, // searching for before object is too much expensive ... \n-                        output,\n-                        delta);\n+            } catch (Exception e) {\n+                LOG.error(\"Could not delete {} {}\", attrUtil.getType(), id, e);\n             }\n         }\n "}]}