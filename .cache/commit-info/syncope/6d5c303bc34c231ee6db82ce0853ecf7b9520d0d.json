{"sha":"6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZkNWMzMDNiYzM0YzIzMWVlNmRiODJjZTA4NTNlY2Y3Yjk1MjBkMGQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-02T16:47:18Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-02T16:47:18Z"},"message":"[SYNCOPE-429] Adding ETag generation for user and role objects + support for If-Match / If-None-Match headers\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1547101 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d9d8b960eb3d0c1e2a6727385f08fb382a170f48","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d9d8b960eb3d0c1e2a6727385f08fb382a170f48"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8c714111685798517c3be5e2f2e5578e1dd5c5e7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8c714111685798517c3be5e2f2e5578e1dd5c5e7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8c714111685798517c3be5e2f2e5578e1dd5c5e7"}],"stats":{"total":526,"additions":408,"deletions":118},"files":[{"sha":"93d667ef882d2c35c10771cbcf8c32c9434efb83","filename":"client/src/main/java/org/apache/syncope/client/SyncopeClient.java","status":"modified","additions":137,"deletions":19,"changes":156,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -18,9 +18,7 @@\n  */\n package org.apache.syncope.client;\n \n-import java.net.URI;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n+import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.cxf.jaxrs.client.WebClient;\n@@ -47,8 +45,6 @@ public class SyncopeClient {\n \n     private final String password;\n \n-    private final Map<Class<?>, Object> services = new ConcurrentHashMap<Class<?>, Object>();\n-\n     public SyncopeClient(final MediaType mediaType, final RestClientFactoryBean restClientFactory,\n             final String username, final String password) {\n \n@@ -58,37 +54,148 @@ public SyncopeClient(final MediaType mediaType, final RestClientFactoryBean rest\n         this.password = password;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n+    /**\n+     * Creates an instance of the given service class, with configured content type and authentication.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @return service instance of the given reference class\n+     */\n     public <T> T getService(final Class<T> serviceClass) {\n-        if (!services.containsKey(serviceClass)) {\n-            services.put(serviceClass,\n-                    restClientFactory.createServiceInstance(serviceClass, mediaType, username, password));\n-        }\n-        return (T) services.get(serviceClass);\n+        return restClientFactory.createServiceInstance(serviceClass, mediaType, username, password);\n     }\n \n-    public <T> T prefer(final Class<T> serviceClass, final Preference preference) {\n-        return header(serviceClass, RESTHeaders.PREFER, preference.literal());\n+    /**\n+     * Sets the given header on the give service instance.\n+     *\n+     * @param <T> any service class\n+     * @param service service class instance\n+     * @param key HTTP header key\n+     * @param values HTTP header values\n+     * @return given service instance, with given header set\n+     */\n+    public <T> T header(final T service, final String key, final Object... values) {\n+        WebClient.client(service).header(key, values);\n+        return service;\n     }\n \n+    /**\n+     * Creates an instance of the given service class and sets the given header.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @param key HTTP header key\n+     * @param values HTTP header values\n+     * @return service instance of the given reference class, with given header set\n+     */\n     public <T> T header(final Class<T> serviceClass, final String key, final Object... values) {\n-        T service = getService(serviceClass);\n-        WebClient.client(getService(serviceClass)).header(key, values);\n+        return header(getService(serviceClass), key, values);\n+    }\n+\n+    /**\n+     * Sets the <tt>Prefer</tt> header on the give service instance.\n+     *\n+     * @param <T> any service class\n+     * @param service service class instance\n+     * @param preference preference to be set via <tt>Prefer</tt> header\n+     * @return given service instance, with <tt>Prefer</tt> header set\n+     */\n+    public <T> T prefer(final T service, final Preference preference) {\n+        return header(service, RESTHeaders.PREFER, preference.toString());\n+    }\n+\n+    /**\n+     * Creates an instance of the given service class, with <tt>Prefer</tt> header set.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @param preference preference to be set via <tt>Prefer</tt> header\n+     * @return service instance of the given reference class, with <tt>Prefer</tt> header set\n+     */\n+    public <T> T prefer(final Class<T> serviceClass, final Preference preference) {\n+        return header(serviceClass, RESTHeaders.PREFER, preference.toString());\n+    }\n+\n+    /**\n+     * Sets the <tt>If-Match</tt> or <tt>If-None-Match</tt> header on the given service instance.\n+     *\n+     * @param <T> any service class\n+     * @param service service class instance\n+     * @param etag ETag value\n+     * @param ifNot if true then <tt>If-None-Match</tt> is set, <tt>If-Match</tt> otherwise\n+     * @return given service instance, with <tt>If-Match</tt> or <tt>If-None-Match</tt> set\n+     */\n+    private <T> T match(final T service, final EntityTag etag, final boolean ifNot) {\n+        WebClient.client(service).match(etag, ifNot);\n         return service;\n     }\n \n-    public <T> T getObject(final URI location, final Class<?> serviceClass, final Class<T> resultClass) {\n-        WebClient webClient = WebClient.fromClient(WebClient.client(getService(serviceClass)));\n-        webClient.accept(mediaType).to(location.toASCIIString(), false);\n+    /**\n+     * Sets the <tt>If-Match</tt> header on the given service instance.\n+     *\n+     * @param <T> any service class\n+     * @param service service class instance\n+     * @param etag ETag value\n+     * @return given service instance, with <tt>If-Match</tt> set\n+     */\n+    public <T> T ifMatch(final T service, final EntityTag etag) {\n+        return match(service, etag, false);\n+    }\n+\n+    /**\n+     * Creates an instance of the given service class, with <tt>If-Match</tt> header set.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @param etag ETag value\n+     * @return given service instance, with <tt>If-Match</tt> set\n+     */\n+    public <T> T ifMatch(final Class<T> serviceClass, final EntityTag etag) {\n+        return match(getService(serviceClass), etag, false);\n+    }\n \n-        return webClient.get(resultClass);\n+    /**\n+     * Sets the <tt>If-None-Match</tt> header on the given service instance.\n+     *\n+     * @param <T> any service class\n+     * @param service service class instance\n+     * @param etag ETag value\n+     * @return given service instance, with <tt>If-None-Match</tt> set\n+     */\n+    public <T> T ifNoneMatch(final T service, final EntityTag etag) {\n+        return match(service, etag, true);\n     }\n \n+    /**\n+     * Creates an instance of the given service class, with <tt>If-None-Match</tt> header set.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @param etag ETag value\n+     * @return given service instance, with <tt>If-None-Match</tt> set\n+     */\n+    public <T> T ifNoneMatch(final Class<T> serviceClass, final EntityTag etag) {\n+        return match(getService(serviceClass), etag, true);\n+    }\n+\n+    /**\n+     * Checks whether self-registration is allowed by calling <tt>UserSelfService</tt>'s options.\n+     *\n+     * @return whether self-registration is allowed\n+     * @see UserSelfService#getOptions()\n+     */\n     public boolean isSelfRegistrationAllowed() {\n         return Boolean.valueOf(restClientFactory.createServiceInstance(UserSelfService.class, mediaType, null, null).\n                 getOptions().getHeaderString(RESTHeaders.SELFREGISTRATION_ALLOWED));\n     }\n \n+    /**\n+     * Checks whether Activiti workflow is enabled for users / roles, by calling <tt>WorkflowService</tt>'s options.\n+     *\n+     * @param attributableType user / role\n+     * @return whether Activiti workflow is enabled for given attributable type\n+     * @see WorkflowService#getOptions(org.apache.syncope.common.types.AttributableType)\n+     */\n     public boolean isActivitiEnabledFor(final AttributableType attributableType) {\n         Response options = getService(WorkflowService.class).getOptions(attributableType);\n \n@@ -109,4 +216,15 @@ public boolean isActivitiEnabledFor(final AttributableType attributableType) {\n \n         return result;\n     }\n+\n+    /**\n+     * Fetches <tt>Etag</tt> header value from latest service run (if available).\n+     *\n+     * @param <T> any service class\n+     * @param service service class instance\n+     * @return <tt>Etag</tt> header value from latest service run (if available)\n+     */\n+    public <T> EntityTag getLatestEntityTag(final T service) {\n+        return WebClient.client(service).getResponse().getEntityTag();\n+    }\n }"},{"sha":"e10840a8e3f492c80bccc3348e8a67901c1d182c","filename":"client/src/main/java/org/apache/syncope/client/rest/RestClientFactoryBean.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientFactoryBean.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -23,12 +23,33 @@\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n import org.apache.cxf.jaxrs.client.WebClient;\n \n+/**\n+ * Provides shortcuts for creating JAX-RS service instances via CXF's <tt>JAXRSClientFactoryBean</tt>.\n+ */\n public class RestClientFactoryBean extends JAXRSClientFactoryBean {\n \n+    /**\n+     * Creates an anonymous instance of the given service class, for the given content type.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @param mediaType XML or JSON are suppoorted\n+     * @return anonymous service instance of the given reference class\n+     */\n     public <T> T createServiceInstance(final Class<T> serviceClass, final MediaType mediaType) {\n         return createServiceInstance(serviceClass, mediaType, null, null);\n     }\n \n+    /**\n+     * Creates an authenticated instance of the given service class, for the given content type.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @param mediaType XML or JSON are suppoorted\n+     * @param username username for REST authentication\n+     * @param password password for REST authentication\n+     * @return anonymous service instance of the given reference class\n+     */\n     public <T> T createServiceInstance(\n             final Class<T> serviceClass, final MediaType mediaType, final String username, final String password) {\n "},{"sha":"042d239eba4b9f2f9120c6e3054e62540640ab52","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractSysInfoTO.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSysInfoTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSysInfoTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSysInfoTO.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -18,7 +18,9 @@\n  */\n package org.apache.syncope.common.to;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import java.util.Date;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.AbstractBaseBean;\n \n /**\n@@ -91,4 +93,14 @@ public Date getLastChangeDate() {\n     public void setLastChangeDate(final Date lastChangeDate) {\n         this.lastChangeDate = lastChangeDate;\n     }\n+\n+    @JsonIgnore\n+    public String getETagValue() {\n+        Date etagDate = getLastChangeDate() == null\n+                ? getCreationDate() : getLastChangeDate();\n+        return etagDate == null\n+                ? StringUtils.EMPTY\n+                : String.valueOf(etagDate.getTime());\n+\n+    }\n }"},{"sha":"eedc0bd38bd399c2a6c942c75892d4bb25c254e2","filename":"common/src/main/java/org/apache/syncope/common/types/Preference.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPreference.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPreference.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPreference.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -36,15 +36,16 @@ private Preference(final String literal) {\n         this.literal = literal;\n     }\n \n-    public String literal() {\n+    @Override\n+    public String toString() {\n         return literal;\n     }\n \n-    public static Preference fromLiteral(final String literal) {\n+    public static Preference fromString(final String literal) {\n         Preference result = null;\n \n         for (Preference preference : values()) {\n-            if (preference.literal().equalsIgnoreCase(literal)) {\n+            if (preference.toString().equalsIgnoreCase(literal)) {\n                 result = preference;\n             }\n         }"},{"sha":"2afd364168bb509cb1f396951871c3500465bd26","filename":"core/src/main/java/org/apache/syncope/core/services/AbstractServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -48,7 +48,7 @@ abstract class AbstractServiceImpl {\n      * or <tt>Preference.NONE</tt> if missing.\n      */\n     protected Preference getPreference() {\n-        return Preference.fromLiteral(context.getHttpHeaders().getHeaderString(RESTHeaders.PREFER));\n+        return Preference.fromString(context.getHttpHeaders().getHeaderString(RESTHeaders.PREFER));\n     }\n \n     /**\n@@ -77,7 +77,7 @@ protected Response.ResponseBuilder createResponse(final Object id, final Object\n \n         }\n         if (getPreference() == Preference.RETURN_CONTENT || getPreference() == Preference.RETURN_NO_CONTENT) {\n-            builder = builder.header(RESTHeaders.PREFERENCE_APPLIED, getPreference().literal());\n+            builder = builder.header(RESTHeaders.PREFERENCE_APPLIED, getPreference().toString());\n         }\n \n         return builder;\n@@ -89,7 +89,7 @@ protected Response.ResponseBuilder createResponse(final Object id, final Object\n      * @param entity the entity just modified\n      * @return response to successful modification request\n      */\n-    protected Response.ResponseBuilder updateResponse(final Object entity) {\n+    protected Response.ResponseBuilder modificationResponse(final Object entity) {\n         Response.ResponseBuilder builder;\n         switch (getPreference()) {\n             case RETURN_NO_CONTENT:\n@@ -103,7 +103,7 @@ protected Response.ResponseBuilder updateResponse(final Object entity) {\n                 break;\n         }\n         if (getPreference() == Preference.RETURN_CONTENT || getPreference() == Preference.RETURN_NO_CONTENT) {\n-            builder = builder.header(RESTHeaders.PREFERENCE_APPLIED, getPreference().literal());\n+            builder = builder.header(RESTHeaders.PREFERENCE_APPLIED, getPreference().toString());\n         }\n \n         return builder;"},{"sha":"fb525c5511c22dfbbfedace597e062ec55cce0c9","filename":"core/src/main/java/org/apache/syncope/core/services/AddETagFilter.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAddETagFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAddETagFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAddETagFilter.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.services;\n+\n+import java.io.IOException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.core.EntityTag;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.ext.Provider;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.to.AbstractSysInfoTO;\n+\n+/**\n+ * Adds the <tt>ETag</tt> filter to any response containing an instance of <tt>AbstractSysInfoTO</tt> as entity.\n+ * The actual ETag value is computed on the basis of last change date (or creation date if not available).\n+ *\n+ * @see AbstractSysInfoTO\n+ */\n+@Provider\n+public class AddETagFilter implements ContainerResponseFilter {\n+\n+    @Override\n+    public void filter(final ContainerRequestContext reqCtx, final ContainerResponseContext resCtx) throws IOException {\n+        if (resCtx.getEntity() instanceof AbstractSysInfoTO && resCtx.getEntityTag() == null) {\n+            AbstractSysInfoTO sysInfo = (AbstractSysInfoTO) resCtx.getEntity();\n+            String etagValue = sysInfo.getETagValue();\n+            if (StringUtils.isNotBlank(etagValue)) {\n+                resCtx.getHeaders().add(HttpHeaders.ETAG, new EntityTag(etagValue).toString());\n+            }\n+        }\n+    }\n+}"},{"sha":"3f327ff60499b8c1dbca209e0a84fef3bf7dad74","filename":"core/src/main/java/org/apache/syncope/core/services/RoleServiceImpl.java","status":"modified","additions":42,"deletions":19,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -21,7 +21,9 @@\n import java.util.List;\r\n \r\n import javax.ws.rs.ServiceUnavailableException;\r\n+import javax.ws.rs.core.EntityTag;\r\n import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.Response.ResponseBuilder;\r\n \r\n import org.apache.syncope.common.mod.RoleMod;\r\n import org.apache.syncope.common.search.NodeCond;\r\n@@ -59,8 +61,15 @@ public Response create(final RoleTO roleTO) {\n \r\n     @Override\r\n     public Response delete(final Long roleId) {\r\n-        RoleTO deleted = controller.delete(roleId);\r\n-        return updateResponse(deleted).build();\r\n+        RoleTO role = controller.read(roleId);\r\n+\r\n+        ResponseBuilder builder = context.getRequest().evaluatePreconditions(new EntityTag(role.getETagValue()));\r\n+        if (builder == null) {\r\n+            RoleTO deleted = controller.delete(roleId);\r\n+            builder = modificationResponse(deleted);\r\n+        }\r\n+\r\n+        return builder.build();\r\n     }\r\n \r\n     @Override\r\n@@ -107,34 +116,48 @@ public RoleTO readSelf(final Long roleId) {\n \r\n     @Override\r\n     public Response update(final Long roleId, final RoleMod roleMod) {\r\n-        roleMod.setId(roleId);\r\n-        RoleTO updated = controller.update(roleMod);\r\n-        return updateResponse(updated).build();\r\n+        RoleTO role = controller.read(roleId);\r\n+\r\n+        ResponseBuilder builder = context.getRequest().evaluatePreconditions(new EntityTag(role.getETagValue()));\r\n+        if (builder == null) {\r\n+            roleMod.setId(roleId);\r\n+            RoleTO updated = controller.update(roleMod);\r\n+            builder = modificationResponse(updated);\r\n+        }\r\n+\r\n+        return builder.build();\r\n     }\r\n \r\n     @Override\r\n     public Response associate(final Long roleId, final ResourceAssociationActionType type,\r\n             final List<ResourceNameTO> resourceNames) {\r\n \r\n-        RoleTO updated = null;\r\n+        RoleTO role = controller.read(roleId);\r\n+\r\n+        ResponseBuilder builder = context.getRequest().evaluatePreconditions(new EntityTag(role.getETagValue()));\r\n+        if (builder == null) {\r\n+            RoleTO updated;\r\n+\r\n+            switch (type) {\r\n+                case UNLINK:\r\n+                    updated = controller.unlink(roleId, CollectionWrapper.unwrap(resourceNames));\r\n+                    break;\r\n \r\n-        switch (type) {\r\n-            case UNLINK:\r\n-                updated = controller.unlink(roleId, CollectionWrapper.unwrap(resourceNames));\r\n-                break;\r\n+                case UNASSIGN:\r\n+                    updated = controller.unassign(roleId, CollectionWrapper.unwrap(resourceNames));\r\n+                    break;\r\n \r\n-            case UNASSIGN:\r\n-                updated = controller.unassign(roleId, CollectionWrapper.unwrap(resourceNames));\r\n-                break;\r\n+                case DEPROVISION:\r\n+                    updated = controller.deprovision(roleId, CollectionWrapper.unwrap(resourceNames));\r\n+                    break;\r\n \r\n-            case DEPROVISION:\r\n-                updated = controller.deprovision(roleId, CollectionWrapper.unwrap(resourceNames));\r\n-                break;\r\n+                default:\r\n+                    updated = controller.read(roleId);\r\n+            }\r\n \r\n-            default:\r\n-                updated = controller.read(roleId);\r\n+            builder = modificationResponse(updated);\r\n         }\r\n \r\n-        return updateResponse(updated).build();\r\n+        return builder.build();\r\n     }\r\n }\r"},{"sha":"beefb65659a95472fd5e295986ce71c749dd54b0","filename":"core/src/main/java/org/apache/syncope/core/services/UserSelfServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -56,13 +56,13 @@ public UserTO read() {\n     public Response update(final Long userId, final UserMod userMod) {\n         userMod.setId(userId);\n         UserTO updated = controller.updateSelf(userMod);\n-        return updateResponse(updated).build();\n+        return modificationResponse(updated).build();\n     }\n \n     @Override\n     public Response delete() {\n         UserTO deleted = controller.deleteSelf();\n-        return updateResponse(deleted).build();\n+        return modificationResponse(deleted).build();\n     }\n \n }"},{"sha":"ab2eec995dd8b2aeca69d2bb5857b2e5a3d075d0","filename":"core/src/main/java/org/apache/syncope/core/services/UserServiceImpl.java","status":"modified","additions":52,"deletions":22,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.core.services;\n \n import java.util.List;\n+import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.ResponseBuilder;\n import org.apache.syncope.common.mod.StatusMod;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.search.NodeCond;\n@@ -70,8 +72,15 @@ public Response create(final UserTO userTO) {\n \n     @Override\n     public Response delete(final Long userId) {\n-        UserTO deleted = controller.delete(userId);\n-        return updateResponse(deleted).build();\n+        UserTO user = controller.read(userId);\n+\n+        ResponseBuilder builder = context.getRequest().evaluatePreconditions(new EntityTag(user.getETagValue()));\n+        if (builder == null) {\n+            UserTO deleted = controller.delete(userId);\n+            builder = modificationResponse(deleted);\n+        }\n+\n+        return builder.build();\n     }\n \n     @Override\n@@ -108,16 +117,30 @@ public int searchCount(final NodeCond searchCondition) throws InvalidSearchCondi\n \n     @Override\n     public Response update(final Long userId, final UserMod userMod) {\n-        userMod.setId(userId);\n-        UserTO updated = controller.update(userMod);\n-        return updateResponse(updated).build();\n+        UserTO user = controller.read(userId);\n+\n+        ResponseBuilder builder = context.getRequest().evaluatePreconditions(new EntityTag(user.getETagValue()));\n+        if (builder == null) {\n+            userMod.setId(userId);\n+            UserTO updated = controller.update(userMod);\n+            builder = modificationResponse(updated);\n+        }\n+\n+        return builder.build();\n     }\n \n     @Override\n     public Response status(final Long userId, final StatusMod statusMod) {\n-        statusMod.setId(userId);\n-        UserTO updated = controller.status(statusMod);\n-        return updateResponse(updated).build();\n+        UserTO user = controller.read(userId);\n+\n+        ResponseBuilder builder = context.getRequest().evaluatePreconditions(new EntityTag(user.getETagValue()));\n+        if (builder == null) {\n+            statusMod.setId(userId);\n+            UserTO updated = controller.status(statusMod);\n+            builder = modificationResponse(updated);\n+        }\n+\n+        return builder.build();\n     }\n \n     @Override\n@@ -129,25 +152,32 @@ public BulkActionRes bulk(final BulkAction bulkAction) {\n     public Response associate(final Long userId, final ResourceAssociationActionType type,\n             final List<ResourceNameTO> resourceNames) {\n \n-        UserTO updated = null;\n+        UserTO user = controller.read(userId);\n+\n+        ResponseBuilder builder = context.getRequest().evaluatePreconditions(new EntityTag(user.getETagValue()));\n+        if (builder == null) {\n+            UserTO updated;\n+\n+            switch (type) {\n+                case UNLINK:\n+                    updated = controller.unlink(userId, CollectionWrapper.unwrap(resourceNames));\n+                    break;\n \n-        switch (type) {\n-            case UNLINK:\n-                updated = controller.unlink(userId, CollectionWrapper.unwrap(resourceNames));\n-                break;\n+                case UNASSIGN:\n+                    updated = controller.unassign(userId, CollectionWrapper.unwrap(resourceNames));\n+                    break;\n \n-            case UNASSIGN:\n-                updated = controller.unassign(userId, CollectionWrapper.unwrap(resourceNames));\n-                break;\n+                case DEPROVISION:\n+                    updated = controller.deprovision(userId, CollectionWrapper.unwrap(resourceNames));\n+                    break;\n \n-            case DEPROVISION:\n-                updated = controller.deprovision(userId, CollectionWrapper.unwrap(resourceNames));\n-                break;\n+                default:\n+                    updated = controller.read(userId);\n+            }\n \n-            default:\n-                updated = controller.read(userId);\n+            builder = modificationResponse(updated);\n         }\n \n-        return updateResponse(updated).build();\n+        return builder.build();\n     }\n }"},{"sha":"62171da713f0f4a0fe354ccac09b35e638c4138d","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -93,6 +93,8 @@ under the License.\n     <property name=\"addResourceAndMethodIds\" value=\"true\"/>\n   </bean>\n   \n+  <bean id=\"addETagFilter\" class=\"org.apache.syncope.core.services.AddETagFilter\"/>\n+  \n   <jaxrs:server id=\"restContainer\" address=\"/\" staticSubresourceResolution=\"true\">\n     <jaxrs:serviceBeans>\n       <ref bean=\"connectorServiceImpl\"/>\n@@ -119,6 +121,7 @@ under the License.\n       <ref bean=\"jsonProvider\"/>\n       <ref bean=\"exceptionMapper\"/>\n       <ref bean=\"wadlGenerator\"/>\n+      <ref bean=\"addETagFilter\"/>\n     </jaxrs:providers>\n     <jaxrs:extensionMappings>\n       <entry key=\"json\" value=\"application/json;charset=UTF-8\"/>"},{"sha":"b82a228463a9257c2c51da10eb5ad18812b01aa2","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -21,13 +21,15 @@\n import static org.junit.Assert.assertNotNull;\n \n import java.io.InputStream;\n+import java.net.URI;\n import java.util.Properties;\n import java.util.UUID;\n \n import javax.sql.DataSource;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.client.WebClient;\n \n import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.client.SyncopeClientFactoryBean;\n@@ -52,7 +54,6 @@\n import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.to.AbstractSchemaTO;\n import org.apache.syncope.common.to.AttributeTO;\n-import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n@@ -215,10 +216,6 @@ public static void restSetup() {\n         schemaService = adminClient.getService(SchemaService.class);\n     }\n \n-//    protected ConnObjectTO readConnectorObject(final String resourceName, final Long userId, AttributableType type) {\n-//        return resourceService.getConnectorObject(resourceName, type, userId);\n-//    }\n-\n     protected static String getUUIDString() {\n         return UUID.randomUUID().toString().substring(0, 8);\n     }\n@@ -260,7 +257,14 @@ protected UserTO updateUser(final UserMod userMod) {\n     protected UserTO deleteUser(final Long id) {\n         return userService.delete(id).readEntity(UserTO.class);\n     }\n+    \n+    public <T> T getObject(final URI location, final Class<?> serviceClass, final Class<T> resultClass) {\n+        WebClient webClient = WebClient.fromClient(WebClient.client(adminClient.getService(serviceClass)));\n+        webClient.accept(clientFactory.getContentType().getMediaType()).to(location.toASCIIString(), false);\n \n+        return webClient.get(resultClass);\n+    }\n+    \n     @SuppressWarnings(\"unchecked\")\n     protected <T extends AbstractSchemaTO> T createSchema(final AttributableType kind,\n             final SchemaType type, final T schemaTO) {\n@@ -273,7 +277,7 @@ protected <T extends AbstractSchemaTO> T createSchema(final AttributableType kin\n             }\n         }\n \n-        return (T) adminClient.getObject(response.getLocation(), SchemaService.class, schemaTO.getClass());\n+        return (T) getObject(response.getLocation(), SchemaService.class, schemaTO.getClass());\n     }\n \n     protected RoleTO createRole(final RoleTO newRoleTO) {\n@@ -284,7 +288,7 @@ protected RoleTO createRole(final RoleTO newRoleTO) {\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return adminClient.getObject(response.getLocation(), RoleService.class, RoleTO.class);\n+        return getObject(response.getLocation(), RoleService.class, RoleTO.class);\n     }\n \n     protected RoleTO updateRole(final RoleMod roleMod) {\n@@ -304,7 +308,7 @@ protected <T extends AbstractPolicyTO> T createPolicy(final T policy) {\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return (T) adminClient.getObject(response.getLocation(), PolicyService.class, policy.getClass());\n+        return (T) getObject(response.getLocation(), PolicyService.class, policy.getClass());\n     }\n \n     protected ResourceTO createResource(final ResourceTO resourceTO) {\n@@ -315,6 +319,6 @@ protected ResourceTO createResource(final ResourceTO resourceTO) {\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+        return getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n     }\n }"},{"sha":"f654dca8d0bd5bf95cca7a9254808bfd9f99728d","filename":"core/src/test/java/org/apache/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -56,7 +56,7 @@ public void create() {\n         Response response = configurationService.create(configurationTO);\n         assertNotNull(response);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n-        ConfigurationTO newConfigurationTO = adminClient.getObject(response.getLocation(), ConfigurationService.class,\n+        ConfigurationTO newConfigurationTO = getObject(response.getLocation(), ConfigurationService.class,\n                 ConfigurationTO.class);\n         assertEquals(configurationTO, newConfigurationTO);\n     }\n@@ -81,7 +81,7 @@ public void delete() throws UnsupportedEncodingException {\n         Response response = configurationService.create(tokenLengthTO);\n         assertNotNull(response);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n-        ConfigurationTO newConfigurationTO = adminClient.getObject(response.getLocation(), ConfigurationService.class,\n+        ConfigurationTO newConfigurationTO = getObject(response.getLocation(), ConfigurationService.class,\n                 ConfigurationTO.class);\n         assertEquals(tokenLengthTO, newConfigurationTO);\n     }"},{"sha":"06395651ab8f24823b575553cf7ecaca50180f9f","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnectorTestITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnectorTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnectorTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnectorTestITCase.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -145,7 +145,7 @@ public void create() {\n             throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n         }\n \n-        ConnInstanceTO actual = adminClient.getObject(\n+        ConnInstanceTO actual = getObject(\n                 response.getLocation(), ConnectorService.class, ConnInstanceTO.class);\n         assertNotNull(actual);\n \n@@ -287,7 +287,7 @@ public void issueSYNCOPE10() {\n             throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n         }\n \n-        connInstanceTO = adminClient.getObject(response.getLocation(), ConnectorService.class, ConnInstanceTO.class);\n+        connInstanceTO = getObject(response.getLocation(), ConnectorService.class, ConnInstanceTO.class);\n         assertNotNull(connInstanceTO);\n         assertTrue(connInstanceTO.getCapabilities().isEmpty());\n \n@@ -301,7 +301,7 @@ public void issueSYNCOPE10() {\n         // Check for connector instance update after resource creation.\n         // ----------------------------------\n         response = resourceService.create(resourceTO);\n-        resourceTO = adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+        resourceTO = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n \n         assertNotNull(resourceTO);\n \n@@ -620,7 +620,7 @@ public void issueSYNCOPE112() {\n                 throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n             }\n \n-            connectorTO = adminClient.getObject(response.getLocation(), ConnectorService.class, ConnInstanceTO.class);\n+            connectorTO = getObject(response.getLocation(), ConnectorService.class, ConnInstanceTO.class);\n             assertNotNull(connectorTO);\n             // ----------------------------------------\n \n@@ -677,12 +677,12 @@ public void bulkAction() {\n         conn.setId(0);\n         conn.setDisplayName(\"forBulk1\");\n \n-        bulkAction.getTargets().add(String.valueOf(adminClient.getObject(\n+        bulkAction.getTargets().add(String.valueOf(getObject(\n                 connectorService.create(conn).getLocation(), ConnectorService.class, ConnInstanceTO.class).getId()));\n \n         conn.setDisplayName(\"forBulk2\");\n \n-        bulkAction.getTargets().add(String.valueOf(adminClient.getObject(\n+        bulkAction.getTargets().add(String.valueOf(getObject(\n                 connectorService.create(conn).getLocation(), ConnectorService.class, ConnInstanceTO.class).getId()));\n \n         Iterator<String> iter = bulkAction.getTargets().iterator();"},{"sha":"7d234af8415e49d7352ebe10d7845b180668182c","filename":"core/src/test/java/org/apache/syncope/core/rest/NotificationTestITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -94,7 +94,7 @@ public void create() {\n         notificationTO.setRecipients(recipients);\n \n         Response response = notificationService.create(notificationTO);\n-        NotificationTO actual = adminClient.getObject(response.getLocation(), NotificationService.class,\n+        NotificationTO actual = getObject(response.getLocation(), NotificationService.class,\n                 NotificationTO.class);\n \n         assertNotNull(actual);\n@@ -135,7 +135,7 @@ public void delete() {\n         NotificationTO notification = buildNotificationTO();\n         notification.setSelfAsRecipient(true);\n         Response response = notificationService.create(notification);\n-        notification = adminClient.getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n+        notification = getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n \n         notificationService.delete(notification.getId());\n \n@@ -156,7 +156,7 @@ public void issueSYNCOPE83() {\n         SyncopeClientException exception = null;\n         try {\n             Response response = notificationService.create(notificationTO);\n-            actual = adminClient.getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n+            actual = getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidNotification, e.getType());\n         }"},{"sha":"e35f930dd45cd00089743859232ee92308583279","filename":"core/src/test/java/org/apache/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -49,7 +49,7 @@ public class ReportTestITCase extends AbstractTest {\n     public ReportTO createReport(final ReportTO report) {\n         Response response = reportService.create(report);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n-        return adminClient.getObject(response.getLocation(), ReportService.class, ReportTO.class);\n+        return getObject(response.getLocation(), ReportService.class, ReportTO.class);\n     }\n \n     @Test"},{"sha":"f68ecefa6b1d78fa48a24aad477b7dc98cb1b632","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -101,7 +101,7 @@ public void create() {\n         ResourceTO resourceTO = buildResourceTO(resourceName);\n \n         Response response = resourceService.create(resourceTO);\n-        ResourceTO actual = adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+        ResourceTO actual = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n         assertNotNull(actual);\n \n         // check for existence\n@@ -156,7 +156,7 @@ public void createOverridingProps() {\n         resourceTO.getConnConfProperties().addAll(connectorConfigurationProperties);\n \n         Response response = resourceService.create(resourceTO);\n-        ResourceTO actual = adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+        ResourceTO actual = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n         assertNotNull(actual);\n \n         // check the existence\n@@ -192,7 +192,7 @@ public void createWithSingleMappingItem() {\n         resourceTO.setRmapping(rmapping);\n \n         Response response = resourceService.create(resourceTO);\n-        ResourceTO actual = adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+        ResourceTO actual = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n \n         assertNotNull(actual);\n         assertNotNull(actual.getUmapping());\n@@ -280,7 +280,7 @@ public void createWithPasswordPolicy() {\n         resourceTO.setUmapping(mapping);\n \n         Response response = resourceService.create(resourceTO);\n-        ResourceTO actual = adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+        ResourceTO actual = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n         assertNotNull(actual);\n \n         // check the existence\n@@ -379,7 +379,7 @@ public void delete() {\n \n         ResourceTO resource = buildResourceTO(resourceName);\n         Response response = resourceService.create(resource);\n-        ResourceTO actual = adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+        ResourceTO actual = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n         assertNotNull(actual);\n \n         resourceService.delete(resourceName);"},{"sha":"a8c585c0e3e0c5b5f5eb22fc13c547fce7e0e2b6","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.apache.syncope.core.rest.AbstractTest.clientFactory;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n@@ -529,23 +528,23 @@ public void noContent() throws IOException {\n \n         Response response = noContentService.create(role);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n-        assertEquals(Preference.RETURN_NO_CONTENT.literal(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n \n-        role = noContentclient.getObject(response.getLocation(), RoleService.class, RoleTO.class);\n+        role = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n         assertNotNull(role);\n \n         RoleMod roleMod = new RoleMod();\n         roleMod.getAttrsToUpdate().add(attributeMod(\"badge\", \"xxxxxxxxxx\"));\n \n         response = noContentService.update(role.getId(), roleMod);\n         assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n-        assertEquals(Preference.RETURN_NO_CONTENT.literal(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n \n         response = noContentService.delete(role.getId());\n         assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n-        assertEquals(Preference.RETURN_NO_CONTENT.literal(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n     }\n }"},{"sha":"3e8a43eea7f6d37d291eb8dd2882bc57cc74f508","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -122,7 +122,7 @@ public void create() {\n         task.setRoleTemplate(roleTemplate);\n \n         Response response = taskService.create(task);\n-        SyncTaskTO actual = adminClient.getObject(response.getLocation(), TaskService.class, SyncTaskTO.class);\n+        SyncTaskTO actual = getObject(response.getLocation(), TaskService.class, SyncTaskTO.class);\n         assertNotNull(actual);\n \n         task = taskService.read(actual.getId());\n@@ -571,7 +571,7 @@ private void createNotificationTask(final String sender) {\n         notification.setTemplate(\"optin\");\n \n         Response response = notificationService.create(notification);\n-        notification = adminClient.getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n+        notification = getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n         assertNotNull(notification);\n \n         // 2. create user\n@@ -666,7 +666,7 @@ public void issueSYNCOPE144() {\n         task.setJobClassName(SyncJob.class.getName());\n \n         Response response = taskService.create(task);\n-        SchedTaskTO actual = adminClient.getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n+        SchedTaskTO actual = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n         assertNotNull(actual);\n         assertEquals(\"issueSYNCOPE144\", actual.getName());\n         assertEquals(\"issueSYNCOPE144 Description\", actual.getDescription());\n@@ -680,7 +680,7 @@ public void issueSYNCOPE144() {\n         task.setDescription(\"issueSYNCOPE144 Description_2\");\n \n         response = taskService.create(task);\n-        actual = adminClient.getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n+        actual = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n         assertNotNull(actual);\n         assertEquals(\"issueSYNCOPE144_2\", actual.getName());\n         assertEquals(\"issueSYNCOPE144 Description_2\", actual.getDescription());\n@@ -818,7 +818,7 @@ public void issueSYNCOPE258() {\n         task.setPerformUpdate(true);\n \n         Response response = taskService.create(task);\n-        SyncTaskTO actual = adminClient.getObject(response.getLocation(), TaskService.class, SyncTaskTO.class);\n+        SyncTaskTO actual = getObject(response.getLocation(), TaskService.class, SyncTaskTO.class);\n         assertNotNull(actual);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"s258_1@apache.org\");"},{"sha":"f6dbf5e5243baae0f45318acbee958b4e41963f1","filename":"core/src/test/java/org/apache/syncope/core/rest/UserSelfTestITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.apache.syncope.core.rest.AbstractTest.clientFactory;\n import static org.apache.syncope.core.rest.UserTestITCase.getUniqueSampleTO;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n@@ -247,7 +246,7 @@ public void noContent() throws IOException {\n \n         Response response = noContentService.create(user);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n-        assertEquals(Preference.RETURN_NO_CONTENT.literal(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n     }\n }"},{"sha":"859547f6c193e633823d3c6c8fc776bed8a8692f","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":41,"deletions":9,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -18,10 +18,12 @@\n  */\n package org.apache.syncope.core.rest;\n \n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.security.AccessControlException;\n@@ -66,14 +68,13 @@\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n-import static org.apache.syncope.core.rest.AbstractTest.attributeTO;\n-import static org.junit.Assert.assertEquals;\n import org.apache.syncope.core.workflow.ActivitiDetector;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n-import static org.junit.Assert.assertTrue;\n \n import java.io.IOException;\n import java.io.InputStream;\n+import javax.ws.rs.core.EntityTag;\n+import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.syncope.client.SyncopeClient;\n@@ -179,7 +180,7 @@ public void issue172() {\n         } finally {\n             for (PasswordPolicyTO policyTO : policies) {\n                 Response response = policyService.create(policyTO);\n-                PasswordPolicyTO cPolicyTO = adminClient.getObject(\n+                PasswordPolicyTO cPolicyTO = getObject(\n                         response.getLocation(), PolicyService.class, PasswordPolicyTO.class);\n                 assertNotNull(cPolicyTO);\n             }\n@@ -275,7 +276,7 @@ public void enforceMandatoryConditionOnDerived() {\n         resourceTO.setEnforceMandatoryCondition(true);\n \n         Response response = resourceService.create(resourceTO);\n-        resourceTO = adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+        resourceTO = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n         assertNotNull(resourceTO);\n \n         UserTO userTO = getUniqueSampleTO(\"syncope222@apache.org\");\n@@ -1203,23 +1204,23 @@ public void noContent() throws IOException {\n \n         Response response = noContentService.create(user);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n-        assertEquals(Preference.RETURN_NO_CONTENT.literal(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n \n-        user = noContentclient.getObject(response.getLocation(), UserService.class, UserTO.class);\n+        user = getObject(response.getLocation(), UserService.class, UserTO.class);\n         assertNotNull(user);\n \n         UserMod userMod = new UserMod();\n         userMod.setPassword(\"password321\");\n \n         response = noContentService.update(user.getId(), userMod);\n         assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n-        assertEquals(Preference.RETURN_NO_CONTENT.literal(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n \n         response = noContentService.delete(user.getId());\n         assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n-        assertEquals(Preference.RETURN_NO_CONTENT.literal(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n     }\n \n@@ -2011,4 +2012,35 @@ public void issueSYNCOPE435() {\n         assertTrue(userTO.getPropagationStatusTOs().get(0).getFailureReason().\n                 startsWith(\"Not attempted because there are mandatory attributes without value(s): [__PASSWORD__]\"));\n     }\n+\n+    @Test\n+    public void ifMatch() {\n+        UserTO userTO = userService.create(getUniqueSampleTO(\"ifmatch@syncope.apache.org\")).readEntity(UserTO.class);\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getId());\n+\n+        EntityTag etag = adminClient.getLatestEntityTag(userService);\n+        assertNotNull(etag);\n+        assertTrue(StringUtils.isNotBlank(etag.getValue()));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.setUsername(userTO.getUsername() + \"XX\");\n+        userTO = userService.update(userMod.getId(), userMod).readEntity(UserTO.class);\n+        assertTrue(userTO.getUsername().endsWith(\"XX\"));\n+        EntityTag etag1 = adminClient.getLatestEntityTag(userService);\n+        assertFalse(etag.getValue().equals(etag1.getValue()));\n+\n+        UserService ifMatchService = adminClient.ifMatch(UserService.class, etag);\n+        userMod.setUsername(userTO.getUsername() + \"YY\");\n+        try {\n+            ifMatchService.update(userMod.getId(), userMod);\n+            fail();\n+        } catch (WebServiceException e) {\n+            assertTrue(e.getMessage().endsWith(Response.Status.PRECONDITION_FAILED.name()));\n+        }\n+\n+        userTO = userService.read(userTO.getId());\n+        assertTrue(userTO.getUsername().endsWith(\"XX\"));\n+    }\n }"},{"sha":"35ebd9ffca50fc99a8da2655b3b2d5cde9e91576","filename":"core/src/test/java/org/apache/syncope/core/rest/VirAttrTestITCase.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d5c303bc34c231ee6db82ce0853ecf7b9520d0d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java?ref=6d5c303bc34c231ee6db82ce0853ecf7b9520d0d","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.apache.syncope.core.rest.AbstractTest.RESOURCE_NAME_DBVIRATTR;\n-import static org.apache.syncope.core.rest.AbstractTest.attributeMod;\n import static org.apache.syncope.core.rest.UserTestITCase.getUniqueSampleTO;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;"}]}