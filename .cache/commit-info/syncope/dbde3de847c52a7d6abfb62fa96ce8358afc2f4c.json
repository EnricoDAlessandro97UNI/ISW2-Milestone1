{"sha":"dbde3de847c52a7d6abfb62fa96ce8358afc2f4c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRiZGUzZGU4NDdjNTJhN2Q2YWJmYjYyZmE5NmNlODM1OGFmYzJmNGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-05-20T08:22:21Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-05-20T08:55:13Z"},"message":"[SYNCOPE-1567] Do not check for allowed attributes for relationships mapping items","tree":{"sha":"3be21232fa5e171f17f3b4d9a4a351d71aa3edc4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3be21232fa5e171f17f3b4d9a4a351d71aa3edc4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dbde3de847c52a7d6abfb62fa96ce8358afc2f4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dbde3de847c52a7d6abfb62fa96ce8358afc2f4c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dbde3de847c52a7d6abfb62fa96ce8358afc2f4c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dbde3de847c52a7d6abfb62fa96ce8358afc2f4c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"085a0060960a567dd0369f063cb25004be3ad388","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/085a0060960a567dd0369f063cb25004be3ad388","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/085a0060960a567dd0369f063cb25004be3ad388"}],"stats":{"total":71,"additions":68,"deletions":3},"files":[{"sha":"3ed7c087e6a5411217ba93819a1e21289cdb407e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dbde3de847c52a7d6abfb62fa96ce8358afc2f4c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dbde3de847c52a7d6abfb62fa96ce8358afc2f4c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=dbde3de847c52a7d6abfb62fa96ce8358afc2f4c","patch":"@@ -426,6 +426,7 @@ private void populateMapping(\n                     if (intAttrName.getSchemaType() != null\n                             && intAttrName.getEnclosingGroup() == null\n                             && intAttrName.getRelatedAnyObject() == null\n+                            && intAttrName.getRelationshipType() == null\n                             && intAttrName.getPrivilegesOfApplication() == null) {\n \n                         switch (intAttrName.getSchemaType()) {"},{"sha":"7cf873bce6c0be97df8ed8af42391fad5aa6f409","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":67,"deletions":3,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dbde3de847c52a7d6abfb62fa96ce8358afc2f4c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dbde3de847c52a7d6abfb62fa96ce8358afc2f4c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=dbde3de847c52a7d6abfb62fa96ce8358afc2f4c","patch":"@@ -39,9 +39,12 @@\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.Attr;\n@@ -59,6 +62,7 @@\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -542,7 +546,7 @@ public void issueSYNCOPE1473() throws ParseException {\n \n             GroupCR newGroupCR = new GroupCR();\n             newGroupCR.setName(\"NEWSYNCOPEGROUP1473-\" + getUUIDString());\n-            newGroupCR.setRealm(\"/\");\n+            newGroupCR.setRealm(SyncopeConstants.ROOT_REALM);\n             newGroupCR.getResources().add(ldap.getKey());\n \n             GroupTO newGroupTO = createGroup(newGroupCR).getEntity();\n@@ -557,9 +561,69 @@ public void issueSYNCOPE1473() throws ParseException {\n             ConnObjectTO connObject =\n                     resourceService.readConnObject(ldap.getKey(), AnyTypeKind.USER.name(), userTO.getKey());\n             assertNotNull(connObject);\n-            assertNotNull(connObject.getAttr(\"ldapGroups\"));\n-            assertTrue(connObject.getAttr(\"ldapGroups\").get().getValues().size() == 2);\n+            assertTrue(connObject.getAttr(\"ldapGroups\").isPresent());\n+            assertEquals(2, connObject.getAttr(\"ldapGroups\").get().getValues().size());\n+        } finally {\n+            try {\n+                resourceService.delete(ldap.getKey());\n+            } catch (Exception ignore) {\n+                // ignore\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE1567() {\n+        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        try {\n+            // 1. clone the LDAP resource and add the relationships mapping\n+            ProvisionTO provisionUser =\n+                    SerializationUtils.clone(ldap.getProvision(AnyTypeKind.USER.name()).orElse(null));\n+            assertNotNull(provisionUser);\n+            provisionUser.getVirSchemas().clear();\n \n+            ItemTO relationships = new ItemTO();\n+            relationships.setPurpose(MappingPurpose.PROPAGATION);\n+            relationships.setIntAttrName(\"relationships[neighborhood][PRINTER].model\");\n+            relationships.setExtAttrName(\"l\");\n+            provisionUser.getMapping().add(relationships);\n+\n+            ldap.getProvisions().clear();\n+            ldap.getProvisions().add(provisionUser);\n+            ldap.setKey(RESOURCE_NAME_LDAP + \"1567\" + getUUIDString());\n+            resourceService.create(ldap);\n+\n+            // 1. create user with relationship and the new resource assigned\n+            UserCR userCR = UserITCase.getUniqueSample(\"syncope1567@syncope.apache.org\");\n+            userCR.getRelationships().add(new RelationshipTO.Builder().\n+                    type(\"neighborhood\").otherEnd(PRINTER, \"fc6dbc3a-6c07-4965-8781-921e7401a4a5\").build());\n+            userCR.getResources().clear();\n+            userCR.getResources().add(ldap.getKey());\n+\n+            UserTO userTO = createUser(userCR).getEntity();\n+            assertNotNull(userTO);\n+            assertFalse(userTO.getRelationships().isEmpty());\n+\n+            // 2. check attributes prepared for propagation\n+            PagedResult<PropagationTaskTO> tasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n+                    resource(userCR.getResources().iterator().next()).\n+                    anyTypeKind(AnyTypeKind.USER).entityKey(userTO.getKey()).build());\n+            assertEquals(1, tasks.getSize());\n+\n+            Set<Attribute> propagationAttrs = Stream.of(\n+                    POJOHelper.deserialize(tasks.getResult().get(0).getAttributes(), Attribute[].class)).\n+                    collect(Collectors.toSet());\n+            Attribute attr = AttributeUtil.find(\"l\", propagationAttrs);\n+            assertNotNull(attr);\n+            assertNotNull(attr.getValue());\n+            assertEquals(\"Canon MFC8030\", attr.getValue().get(0).toString());\n+\n+            // 3. check propagated value\n+            ConnObjectTO connObject =\n+                    resourceService.readConnObject(ldap.getKey(), AnyTypeKind.USER.name(), userTO.getKey());\n+            assertNotNull(connObject);\n+            assertTrue(connObject.getAttr(\"l\").isPresent());\n+            assertEquals(\"Canon MFC8030\", connObject.getAttr(\"l\").get().getValues().get(0));\n         } finally {\n             try {\n                 resourceService.delete(ldap.getKey());"}]}