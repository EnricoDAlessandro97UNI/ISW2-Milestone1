{"sha":"ff6716aa4e160678e173a1a5c08a45c06b5772f9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZmNjcxNmFhNGUxNjA2NzhlMTczYTFhNWMwOGE0NWMwNmI1NzcyZjk=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-08T11:24:02Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-08T11:24:02Z"},"message":"[SYNCOPE-259]\nIntroduces Schema Service.\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1430219 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"db1a920dae3a3a23a706be29882d14ffc39eecd9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/db1a920dae3a3a23a706be29882d14ffc39eecd9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ff6716aa4e160678e173a1a5c08a45c06b5772f9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ff6716aa4e160678e173a1a5c08a45c06b5772f9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ff6716aa4e160678e173a1a5c08a45c06b5772f9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ff6716aa4e160678e173a1a5c08a45c06b5772f9/comments","author":null,"committer":null,"parents":[{"sha":"f3bdd01fb46112a8937ed5efda37553e674508f6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f3bdd01fb46112a8937ed5efda37553e674508f6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f3bdd01fb46112a8937ed5efda37553e674508f6"}],"stats":{"total":388,"additions":276,"deletions":112},"files":[{"sha":"30da35a8ff14714ed6e5ef2f5b35a5f8d145291f","filename":"client/src/main/java/org/apache/syncope/client/to/AbstractSchemaTO.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff6716aa4e160678e173a1a5c08a45c06b5772f9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FAbstractSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff6716aa4e160678e173a1a5c08a45c06b5772f9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FAbstractSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FAbstractSchemaTO.java?ref=ff6716aa4e160678e173a1a5c08a45c06b5772f9","patch":"@@ -0,0 +1,37 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.to;\r\n+\r\n+import org.apache.syncope.client.AbstractBaseBean;\r\n+\r\n+public abstract class AbstractSchemaTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 4088388951694301759L;\r\n+\r\n+    private String name;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+}\r"},{"sha":"8f9363c79b5000e4964c088efbbdbc4fa9b7827a","filename":"client/src/main/java/org/apache/syncope/client/to/DerivedSchemaTO.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff6716aa4e160678e173a1a5c08a45c06b5772f9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff6716aa4e160678e173a1a5c08a45c06b5772f9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTO.java?ref=ff6716aa4e160678e173a1a5c08a45c06b5772f9","patch":"@@ -18,22 +18,13 @@\n  */\n package org.apache.syncope.client.to;\n \n-import org.apache.syncope.client.AbstractBaseBean;\n \n-public class DerivedSchemaTO extends AbstractBaseBean {\n+public class DerivedSchemaTO extends AbstractSchemaTO {\n \n-    private String name;\n+    private static final long serialVersionUID = -6747399803792103108L;\n \n     private String expression;\n \n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n     public String getExpression() {\n         return expression;\n     }"},{"sha":"65726c836005f03e734f83637c5d067f257a3d13","filename":"client/src/main/java/org/apache/syncope/client/to/SchemaTO.java","status":"modified","additions":1,"deletions":12,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff6716aa4e160678e173a1a5c08a45c06b5772f9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff6716aa4e160678e173a1a5c08a45c06b5772f9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java?ref=ff6716aa4e160678e173a1a5c08a45c06b5772f9","patch":"@@ -19,15 +19,12 @@\n package org.apache.syncope.client.to;\n \n import org.apache.commons.lang.StringUtils;\n-import org.apache.syncope.client.AbstractBaseBean;\n import org.apache.syncope.types.SchemaType;\n \n-public class SchemaTO extends AbstractBaseBean {\n+public class SchemaTO extends AbstractSchemaTO {\n \n     private static final long serialVersionUID = -8133983392476990308L;\n \n-    private String name;\n-\n     private SchemaType type;\n \n     private String mandatoryCondition;\n@@ -108,14 +105,6 @@ public void setReadonly(boolean readonly) {\n         this.readonly = readonly;\n     }\n \n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n     public SchemaType getType() {\n         return type;\n     }"},{"sha":"cd67dad1d95569932c13ee71e32f1415aa7fcec8","filename":"client/src/main/java/org/apache/syncope/client/to/VirtualSchemaTO.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff6716aa4e160678e173a1a5c08a45c06b5772f9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FVirtualSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff6716aa4e160678e173a1a5c08a45c06b5772f9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FVirtualSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FVirtualSchemaTO.java?ref=ff6716aa4e160678e173a1a5c08a45c06b5772f9","patch":"@@ -18,17 +18,8 @@\n  */\n package org.apache.syncope.client.to;\n \n-import org.apache.syncope.client.AbstractBaseBean;\n+public class VirtualSchemaTO extends AbstractSchemaTO {\n \n-public class VirtualSchemaTO extends AbstractBaseBean {\n+    private static final long serialVersionUID = -8198557479659701343L;\n \n-    private String name;\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n }"},{"sha":"c8671980484316a5495420e9b9d3181ee40b9e31","filename":"client/src/main/java/org/apache/syncope/services/SchemaService.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff6716aa4e160678e173a1a5c08a45c06b5772f9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff6716aa4e160678e173a1a5c08a45c06b5772f9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSchemaService.java?ref=ff6716aa4e160678e173a1a5c08a45c06b5772f9","patch":"@@ -0,0 +1,62 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+\r\n+import org.apache.syncope.client.to.AbstractSchemaTO;\r\n+\r\n+@Path(\"schemas\")\r\n+public interface SchemaService {\r\n+\r\n+    @POST\r\n+    //    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\r\n+    <T extends AbstractSchemaTO> T create(@PathParam(\"kind\") final String kind, final T schemaTO);\r\n+\r\n+    @DELETE\r\n+    @Path(\"{kind}/{schema}\")\r\n+    //    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/delete/{schema}\")\r\n+    <T extends AbstractSchemaTO> T delete(@PathParam(\"kind\") final String kind,\r\n+            @PathParam(\"schema\") final String schemaName, final Class<T> type);\r\n+\r\n+    @GET\r\n+    @Path(\"{kind}\")\r\n+    //    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\r\n+    <T extends AbstractSchemaTO> List<T> list(@PathParam(\"kind\") final String kind, final Class<T[]> type);\r\n+\r\n+    @GET\r\n+    @Path(\"{kind}/{schema}\")\r\n+    //    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/read/{schema}\")\r\n+    <T extends AbstractSchemaTO> T read(@PathParam(\"kind\") final String kind,\r\n+            @PathParam(\"schema\") final String schemaName, final Class<T> type);\r\n+\r\n+    @PUT\r\n+    @Path(\"{kind}/{schema}\")\r\n+    //    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\r\n+    <T extends AbstractSchemaTO> T update(@PathParam(\"kind\") final String kind,\r\n+            @PathParam(\"schema\") final String schemaName, final T schemaTO);\r\n+\r\n+}\n\\ No newline at end of file"},{"sha":"17814b5ca21c054b7e7af6b17d2dab7fa1a38761","filename":"client/src/main/java/org/apache/syncope/services/proxy/SchemaServiceProxy.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff6716aa4e160678e173a1a5c08a45c06b5772f9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff6716aa4e160678e173a1a5c08a45c06b5772f9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=ff6716aa4e160678e173a1a5c08a45c06b5772f9","patch":"@@ -0,0 +1,94 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services.proxy;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.client.to.AbstractSchemaTO;\r\n+import org.apache.syncope.client.to.DerivedSchemaTO;\r\n+import org.apache.syncope.client.to.SchemaTO;\r\n+import org.apache.syncope.client.to.VirtualSchemaTO;\r\n+import org.apache.syncope.services.SchemaService;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class SchemaServiceProxy extends SpringServiceProxy implements SchemaService {\r\n+\r\n+    public SchemaServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    @Override\r\n+    public <T extends AbstractSchemaTO> T create(String kind, T schemaTO) {\r\n+        String schemaType = getSchemaType(schemaTO.getClass());\r\n+\r\n+        return (T) restTemplate.postForObject(BASE_URL + schemaType + \"/{kind}/create\", schemaTO,\r\n+                schemaTO.getClass(), kind);\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends AbstractSchemaTO> T delete(String kind, String schemaName, Class<T> type) {\r\n+        String schemaType = getSchemaType(type);\r\n+        return restTemplate.getForObject(BASE_URL + schemaType + \"/{kind}/delete/{name}.json\", type, kind,\r\n+                schemaName);\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends AbstractSchemaTO> List<T> list(String kind, Class<T[]> type) {\r\n+        String schemaType = getSchemaTypeArray(type);\r\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + schemaType + \"/{kind}/list.json\", type,\r\n+                kind));\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends AbstractSchemaTO> T read(String kind, String schemaName, Class<T> type) {\r\n+        String schemaType = getSchemaType(type);\r\n+        return restTemplate.getForObject(BASE_URL + schemaType + \"/{kind}/read/{name}.json\", type, kind,\r\n+                schemaName);\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    @Override\r\n+    public <T extends AbstractSchemaTO> T update(String kind, String schemaName, T schemaTO) {\r\n+        String schemaType = getSchemaType(schemaTO.getClass());\r\n+        return (T) restTemplate.postForObject(BASE_URL + schemaType + \"/{kind}/update\", schemaTO,\r\n+                schemaTO.getClass(), kind);\r\n+    }\r\n+\r\n+    private String getSchemaType(Class<? extends AbstractSchemaTO> type) {\r\n+        return (type.isAssignableFrom(SchemaTO.class))\r\n+                ? \"schema\"\r\n+                : (type.isAssignableFrom(DerivedSchemaTO.class))\r\n+                        ? \"derivedSchema\"\r\n+                        : (type.isAssignableFrom(VirtualSchemaTO.class))\r\n+                                ? \"virtualSchema\"\r\n+                                : \"\";\r\n+    }\r\n+\r\n+    private <T extends AbstractSchemaTO> String getSchemaTypeArray(Class<T[]> type) {\r\n+        return (type.isAssignableFrom(SchemaTO[].class))\r\n+                ? \"schema\"\r\n+                : (type.isAssignableFrom(DerivedSchemaTO[].class))\r\n+                        ? \"derivedSchema\"\r\n+                        : (type.isAssignableFrom(VirtualSchemaTO[].class))\r\n+                                ? \"virtualSchema\"\r\n+                                : \"\";\r\n+    }\r\n+}\r"},{"sha":"ff85164f118564e3e59d5374eba9196f2c75e77a","filename":"client/src/main/java/org/apache/syncope/services/proxy/TaskServiceProxy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff6716aa4e160678e173a1a5c08a45c06b5772f9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff6716aa4e160678e173a1a5c08a45c06b5772f9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java?ref=ff6716aa4e160678e173a1a5c08a45c06b5772f9","patch":"@@ -129,7 +129,6 @@ public <T extends TaskTO> T update(Long taskId, T taskTO) {\n                 ? \"sync\"\r\n                 : (taskTO instanceof SchedTaskTO)\r\n                         ? \"sched\"\r\n-\r\n                         : null;\r\n         if (path == null)\r\n             throw new IllegalArgumentException(\"Task can only be instance of SchedTaskTO or SyncTaskTO\");\r"},{"sha":"98c2eb7c982e32225e82e41a54c845988cf11683","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff6716aa4e160678e173a1a5c08a45c06b5772f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff6716aa4e160678e173a1a5c08a45c06b5772f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=ff6716aa4e160678e173a1a5c08a45c06b5772f9","patch":"@@ -20,7 +20,9 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+\n import javax.servlet.http.HttpServletResponse;\n+\n import org.apache.syncope.client.to.SchemaTO;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n@@ -78,14 +80,14 @@ public SchemaTO delete(@PathVariable(\"kind\") final String kind, @PathVariable(\"s\n         if (schema == null) {\n             throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n         }\n-        \n+\n         SchemaTO schemaToDelete = schemaDataBinder.getSchemaTO(schema, getAttributableUtil(kind));\n \n         schemaDAO.delete(schemaName, getAttributableUtil(kind));\n \n         auditManager.audit(Category.schema, SchemaSubCategory.delete, Result.success,\n                 \"Successfully deleted schema: \" + kind + \"/\" + schema.getName());\n-        \n+\n         return schemaToDelete;\n     }\n "},{"sha":"b12fc90823734a1b4af9c951e9de5bf5842fd1df","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff6716aa4e160678e173a1a5c08a45c06b5772f9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff6716aa4e160678e173a1a5c08a45c06b5772f9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=ff6716aa4e160678e173a1a5c08a45c06b5772f9","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.services.proxy.ReportServiceProxy;\n import org.apache.syncope.services.proxy.ResourceServiceProxy;\n import org.apache.syncope.services.proxy.RoleServiceProxy;\n+import org.apache.syncope.services.proxy.SchemaServiceProxy;\n import org.apache.syncope.services.proxy.TaskServiceProxy;\n import org.apache.syncope.services.proxy.UserServiceProxy;\n import org.apache.syncope.services.proxy.WorkflowServiceProxy;\n@@ -69,7 +70,7 @@ protected static AttributeMod attributeMod(final String schema, final String val\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractTest.class);\n \n-    protected static final String BASE_URL = \"http://localhost:9080/syncope/rest/\";\n+    protected static final String BASE_URL = \"http://localhost:9081/syncope/rest/\";\n \n     public static final String ADMIN_UID = \"admin\";\n \n@@ -102,6 +103,8 @@ protected static AttributeMod attributeMod(final String schema, final String val\n \n     protected NotificationServiceProxy notificationService;\n \n+    protected SchemaServiceProxy schemaService;\n+\n     @Autowired\n     protected DataSource testDataSource;\n \n@@ -132,5 +135,6 @@ public void resetRestTemplate() {\n         policyService = new PolicyServiceProxy(BASE_URL, restTemplate);\n         workflowService = new WorkflowServiceProxy(BASE_URL, restTemplate);\n         notificationService = new NotificationServiceProxy(BASE_URL, restTemplate);\n+        schemaService = new SchemaServiceProxy(BASE_URL, restTemplate);\n     }\n }"},{"sha":"c208643b4c56492a4e976b5ded4bbdddc11434fa","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":13,"deletions":18,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff6716aa4e160678e173a1a5c08a45c06b5772f9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff6716aa4e160678e173a1a5c08a45c06b5772f9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=ff6716aa4e160678e173a1a5c08a45c06b5772f9","patch":"@@ -32,6 +32,10 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class DerivedSchemaTestITCase extends AbstractTest {\n \n+    private static final String ROLE = \"role\";\n+    private static final String USER = \"user\";\n+    private static final String MEMBERSHIP = \"membership\";\n+\n     @Test\n     public void list() {\n         List<DerivedSchemaTO> derivedSchemas = Arrays.asList(restTemplate.getForObject(BASE_URL\n@@ -44,8 +48,7 @@ public void list() {\n \n     @Test\n     public void read() {\n-        DerivedSchemaTO derivedSchemaTO = restTemplate.getForObject(BASE_URL + \"derivedSchema/user/read/cn.json\",\n-                DerivedSchemaTO.class);\n+        DerivedSchemaTO derivedSchemaTO = schemaService.read(USER, \"cn\", DerivedSchemaTO.class);\n         assertNotNull(derivedSchemaTO);\n     }\n \n@@ -55,30 +58,25 @@ public void create() {\n         schema.setName(\"derived\");\n         schema.setExpression(\"derived_sx + '_' + derived_dx\");\n \n-        DerivedSchemaTO actual = restTemplate.postForObject(BASE_URL + \"derivedSchema/user/create.json\", schema,\n-                DerivedSchemaTO.class);\n+        DerivedSchemaTO actual = schemaService.create(USER, schema);\n         assertNotNull(actual);\n \n-        actual = restTemplate.getForObject(BASE_URL + \"derivedSchema/user/read/\" + actual.getName() + \".json\",\n-                DerivedSchemaTO.class);\n+        actual = schemaService.read(USER, actual.getName(), DerivedSchemaTO.class);\n         assertNotNull(actual);\n         assertEquals(actual.getExpression(), \"derived_sx + '_' + derived_dx\");\n     }\n \n     @Test\n     public void delete() {\n-        DerivedSchemaTO schema = restTemplate.getForObject(BASE_URL + \"derivedSchema/role/read/rderiveddata.json\",\n-                DerivedSchemaTO.class);\n+        DerivedSchemaTO schema = schemaService.read(ROLE, \"rderiveddata\", DerivedSchemaTO.class);\n         assertNotNull(schema);\n \n-        DerivedSchemaTO schemaToDelete =\n-                restTemplate.getForObject(\n-                BASE_URL + \"derivedSchema/role/delete/{schema}\", DerivedSchemaTO.class, schema.getName());\n+        DerivedSchemaTO schemaToDelete = schemaService.delete(ROLE, schema.getName(), DerivedSchemaTO.class);\n         assertNotNull(schemaToDelete);\n \n         Throwable t = null;\n         try {\n-            restTemplate.getForObject(BASE_URL + \"derivedSchema/role/read/rderiveddata.json\", DerivedSchemaTO.class);\n+            schemaService.read(ROLE, \"rderiveddata\", DerivedSchemaTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n@@ -88,19 +86,16 @@ public void delete() {\n \n     @Test\n     public void update() {\n-        DerivedSchemaTO schema = restTemplate.getForObject(\n-                BASE_URL + \"derivedSchema/membership/read/mderiveddata.json\", DerivedSchemaTO.class);\n+        DerivedSchemaTO schema = schemaService.read(MEMBERSHIP, \"mderiveddata\", DerivedSchemaTO.class);\n         assertNotNull(schema);\n         assertEquals(\"mderived_sx + '-' + mderived_dx\", schema.getExpression());\n \n         schema.setExpression(\"mderived_sx + '.' + mderived_dx\");\n \n-        schema = restTemplate.postForObject(BASE_URL + \"derivedSchema/membership/update.json\", schema,\n-                DerivedSchemaTO.class);\n+        schema = schemaService.update(MEMBERSHIP, schema.getName(), schema);\n         assertNotNull(schema);\n \n-        schema = restTemplate.getForObject(BASE_URL + \"derivedSchema/membership/read/mderiveddata.json\",\n-                DerivedSchemaTO.class);\n+        schema = schemaService.read(MEMBERSHIP, \"mderiveddata\", DerivedSchemaTO.class);\n         assertNotNull(schema);\n         assertEquals(\"mderived_sx + '.' + mderived_dx\", schema.getExpression());\n     }"},{"sha":"1952c22d944c8bbd7f9ef438fe9000f8a36c7b12","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":40,"deletions":38,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff6716aa4e160678e173a1a5c08a45c06b5772f9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff6716aa4e160678e173a1a5c08a45c06b5772f9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=ff6716aa4e160678e173a1a5c08a45c06b5772f9","patch":"@@ -18,8 +18,15 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import java.util.Arrays;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.util.List;\n+\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.to.MembershipTO;\n import org.apache.syncope.client.to.SchemaTO;\n@@ -30,12 +37,6 @@\n import org.apache.syncope.types.EntityViolationType;\n import org.apache.syncope.types.SchemaType;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -45,17 +46,21 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class SchemaTestITCase extends AbstractTest {\n \n+    private static final String ROLE = \"role\";\n+    private static final String USER = \"user\";\n+    private static final String MEMBERSHIP = \"membership\";\n+\n     @Test\n     public void create() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"testAttribute\");\n         schemaTO.setMandatoryCondition(\"false\");\n         schemaTO.setType(SchemaType.String);\n \n-        SchemaTO newSchemaTO = restTemplate.postForObject(BASE_URL + \"schema/user/create\", schemaTO, SchemaTO.class);\n+        SchemaTO newSchemaTO = schemaService.create(USER, schemaTO);\n         assertEquals(schemaTO, newSchemaTO);\n \n-        newSchemaTO = restTemplate.postForObject(BASE_URL + \"schema/membership/create\", schemaTO, SchemaTO.class);\n+        newSchemaTO = schemaService.create(MEMBERSHIP, schemaTO);\n         assertEquals(schemaTO, newSchemaTO);\n     }\n \n@@ -66,14 +71,15 @@ public void createWithNotPermittedName() {\n         schemaTO.setType(SchemaType.String);\n \n         try {\n-            restTemplate.postForObject(BASE_URL + \"schema/user/create\", schemaTO, SchemaTO.class);\n+            schemaService.create(USER, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n \n             assertNotNull(sce.getElements());\n             assertEquals(1, sce.getElements().size());\n-            assertTrue(sce.getElements().iterator().next().contains(EntityViolationType.InvalidUSchema.name()));\n+            assertTrue(sce.getElements().iterator().next()\n+                    .contains(EntityViolationType.InvalidUSchema.name()));\n         }\n     }\n \n@@ -84,15 +90,15 @@ public void createREnumWithoutEnumeration() {\n         schemaTO.setType(SchemaType.Enum);\n \n         try {\n-            restTemplate.postForObject(BASE_URL + \"schema/role/create\", schemaTO, SchemaTO.class);\n+            schemaService.create(ROLE, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRSchema);\n \n             assertNotNull(sce.getElements());\n             assertEquals(1, sce.getElements().size());\n-            assertTrue(sce.getElements().iterator().next().contains(\n-                    EntityViolationType.InvalidSchemaTypeSpecification.name()));\n+            assertTrue(sce.getElements().iterator().next()\n+                    .contains(EntityViolationType.InvalidSchemaTypeSpecification.name()));\n         }\n     }\n \n@@ -103,26 +109,25 @@ public void createUEnumWithoutEnumeration() {\n         schemaTO.setType(SchemaType.Enum);\n \n         try {\n-            restTemplate.postForObject(BASE_URL + \"schema/user/create\", schemaTO, SchemaTO.class);\n+            schemaService.create(USER, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n \n             assertNotNull(sce.getElements());\n             assertEquals(1, sce.getElements().size());\n-            assertTrue(sce.getElements().iterator().next().contains(\n-                    EntityViolationType.InvalidSchemaTypeSpecification.name()));\n+            assertTrue(sce.getElements().iterator().next()\n+                    .contains(EntityViolationType.InvalidSchemaTypeSpecification.name()));\n         }\n     }\n \n     @Test\n     public void delete() {\n-        SchemaTO deletedSchema =\n-                restTemplate.getForObject(BASE_URL + \"schema/user/delete/cool.json\", SchemaTO.class);\n+        SchemaTO deletedSchema = schemaService.delete(USER, \"cool\", SchemaTO.class);\n         assertNotNull(deletedSchema);\n         SchemaTO firstname = null;\n         try {\n-            firstname = restTemplate.getForObject(BASE_URL + \"schema/user/read/cool.json\", SchemaTO.class);\n+            firstname = schemaService.read(USER, \"cool\", SchemaTO.class);\n         } catch (HttpClientErrorException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -131,22 +136,19 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        List<SchemaTO> userSchemas = Arrays.asList(restTemplate.getForObject(BASE_URL + \"schema/user/list.json\",\n-                SchemaTO[].class));\n+        List<SchemaTO> userSchemas = schemaService.list(USER, SchemaTO[].class);\n         assertFalse(userSchemas.isEmpty());\n         for (SchemaTO schemaTO : userSchemas) {\n             assertNotNull(schemaTO);\n         }\n \n-        List<SchemaTO> roleSchemas = Arrays.asList(restTemplate.getForObject(BASE_URL + \"schema/role/list.json\",\n-                SchemaTO[].class));\n+        List<SchemaTO> roleSchemas = schemaService.list(ROLE, SchemaTO[].class);\n         assertFalse(roleSchemas.isEmpty());\n         for (SchemaTO schemaTO : roleSchemas) {\n             assertNotNull(schemaTO);\n         }\n \n-        List<SchemaTO> membershipSchemas = Arrays.asList(restTemplate.getForObject(BASE_URL\n-                + \"schema/membership/list.json\", SchemaTO[].class));\n+        List<SchemaTO> membershipSchemas = schemaService.list(MEMBERSHIP, SchemaTO[].class);\n         assertFalse(membershipSchemas.isEmpty());\n         for (SchemaTO schemaTO : membershipSchemas) {\n             assertNotNull(schemaTO);\n@@ -155,15 +157,15 @@ public void list() {\n \n     @Test\n     public void update() {\n-        SchemaTO schemaTO = restTemplate.getForObject(BASE_URL + \"schema/role/read/icon.json\", SchemaTO.class);\n+        SchemaTO schemaTO = schemaService.read(ROLE, \"icon\", SchemaTO.class);\n         assertNotNull(schemaTO);\n \n-        SchemaTO updatedTO = restTemplate.postForObject(BASE_URL + \"schema/role/update\", schemaTO, SchemaTO.class);\n+        SchemaTO updatedTO = schemaService.update(ROLE, schemaTO.getName(), schemaTO);\n         assertEquals(schemaTO, updatedTO);\n \n         updatedTO.setType(SchemaType.Date);\n         try {\n-            restTemplate.postForObject(BASE_URL + \"schema/role/update\", updatedTO, SchemaTO.class);\n+            schemaService.update(ROLE, schemaTO.getName(), updatedTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRSchema);\n@@ -177,18 +179,18 @@ public void issue258() {\n         schemaTO.setName(\"schema_issue258\");\n         schemaTO.setType(SchemaType.Double);\n \n-        schemaTO = restTemplate.postForObject(BASE_URL + \"schema/user/create\", schemaTO, SchemaTO.class);\n+        schemaTO = schemaService.create(USER, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getSampleTO(\"issue258@syncope.apache.org\");\n         userTO.addAttribute(attributeTO(schemaTO.getName(), \"1.2\"));\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n \n         schemaTO.setType(SchemaType.Long);\n         try {\n-            restTemplate.postForObject(BASE_URL + \"schema/user/update\", schemaTO, SchemaTO.class);\n+            schemaService.update(USER, schemaTO.getName(), schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -203,12 +205,12 @@ public void issue259() {\n         schemaTO.setUniqueConstraint(true);\n         schemaTO.setType(SchemaType.Long);\n \n-        schemaTO = restTemplate.postForObject(BASE_URL + \"schema/user/create\", schemaTO, SchemaTO.class);\n+        schemaTO = schemaService.create(USER, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getSampleTO(\"issue259@syncope.apache.org\");\n         userTO.addAttribute(attributeTO(schemaTO.getName(), \"1\"));\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n \n         UserTO newUserTO = AttributableOperations.clone(userTO);\n@@ -218,7 +220,7 @@ public void issue259() {\n \n         UserMod userMod = AttributableOperations.diff(newUserTO, userTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n     }\n \n@@ -229,17 +231,17 @@ public void issue260() {\n         schemaTO.setType(SchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n-        schemaTO = restTemplate.postForObject(BASE_URL + \"schema/user/create\", schemaTO, SchemaTO.class);\n+        schemaTO = schemaService.create(USER, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getSampleTO(\"issue260@syncope.apache.org\");\n         userTO.addAttribute(attributeTO(schemaTO.getName(), \"1.2\"));\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n \n         schemaTO.setUniqueConstraint(false);\n         try {\n-            restTemplate.postForObject(BASE_URL + \"schema/user/update\", schemaTO, SchemaTO.class);\n+            schemaService.update(USER, schemaTO.getName(), schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);"},{"sha":"822206848bce820a13bcfe9440ceff4006447e22","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":15,"deletions":17,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff6716aa4e160678e173a1a5c08a45c06b5772f9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff6716aa4e160678e173a1a5c08a45c06b5772f9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=ff6716aa4e160678e173a1a5c08a45c06b5772f9","patch":"@@ -18,10 +18,11 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n \n-import java.util.Arrays;\n import java.util.List;\n+\n import org.apache.syncope.client.to.VirtualSchemaTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n@@ -32,10 +33,13 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class VirtualSchemaTestITCase extends AbstractTest {\n \n+    private static final String ROLE = \"role\";\n+    private static final String USER = \"user\";\n+    private static final String MEMBERSHIP = \"membership\";\n+\n     @Test\n     public void list() {\n-        List<VirtualSchemaTO> VirtualSchemas = Arrays.asList(restTemplate.getForObject(BASE_URL\n-                + \"virtualSchema/user/list.json\", VirtualSchemaTO[].class));\n+        List<VirtualSchemaTO> VirtualSchemas = schemaService.list(USER, VirtualSchemaTO[].class);\n         assertFalse(VirtualSchemas.isEmpty());\n         for (VirtualSchemaTO VirtualSchemaTO : VirtualSchemas) {\n             assertNotNull(VirtualSchemaTO);\n@@ -44,8 +48,8 @@ public void list() {\n \n     @Test\n     public void read() {\n-        VirtualSchemaTO VirtualSchemaTO = restTemplate.getForObject(BASE_URL\n-                + \"virtualSchema/membership/read/mvirtualdata.json\", VirtualSchemaTO.class);\n+        VirtualSchemaTO VirtualSchemaTO = schemaService.read(MEMBERSHIP, \"mvirtualdata\",\n+                VirtualSchemaTO.class);\n         assertNotNull(VirtualSchemaTO);\n     }\n \n@@ -54,30 +58,24 @@ public void create() {\n         VirtualSchemaTO schema = new VirtualSchemaTO();\n         schema.setName(\"virtual\");\n \n-        VirtualSchemaTO actual = restTemplate.postForObject(BASE_URL + \"virtualSchema/user/create.json\", schema,\n-                VirtualSchemaTO.class);\n+        VirtualSchemaTO actual = schemaService.create(USER, schema);\n         assertNotNull(actual);\n \n-        actual = restTemplate.getForObject(BASE_URL + \"virtualSchema/user/read/\" + actual.getName() + \".json\",\n-                VirtualSchemaTO.class);\n+        actual = schemaService.read(USER, actual.getName(), VirtualSchemaTO.class);\n         assertNotNull(actual);\n     }\n \n     @Test\n     public void delete() {\n-        VirtualSchemaTO schema = restTemplate.getForObject(BASE_URL + \"virtualSchema/role/read/rvirtualdata.json\",\n-                VirtualSchemaTO.class);\n+        VirtualSchemaTO schema = schemaService.read(ROLE, \"rvirtualdata\", VirtualSchemaTO.class);\n         assertNotNull(schema);\n \n-        VirtualSchemaTO deletedSchema =\n-                restTemplate.getForObject(BASE_URL + \"virtualSchema/role/delete/{schema}\", VirtualSchemaTO.class,\n-                schema.getName());\n+        VirtualSchemaTO deletedSchema = schemaService.delete(ROLE, schema.getName(), VirtualSchemaTO.class);\n         assertNotNull(deletedSchema);\n \n         Throwable t = null;\n         try {\n-            schema = restTemplate.getForObject(BASE_URL + \"virtualSchema/role/read/rvirtualdata.json\",\n-                    VirtualSchemaTO.class);\n+            schema = schemaService.read(ROLE, \"rvirtualdata\", VirtualSchemaTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));"},{"sha":"dbb9aaa4ace297c4f71263faab03bd22fafeef0f","filename":"core/src/test/resources/restClientContext.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff6716aa4e160678e173a1a5c08a45c06b5772f9/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff6716aa4e160678e173a1a5c08a45c06b5772f9/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml?ref=ff6716aa4e160678e173a1a5c08a45c06b5772f9","patch":"@@ -42,7 +42,7 @@ under the License.\n   \n   <bean id=\"httpClientFactory\" class=\"org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory\">\n     <constructor-arg value=\"localhost\"/>\n-    <constructor-arg value=\"9080\"/>\n+    <constructor-arg value=\"9081\"/>\n     <constructor-arg value=\"http\"/>\n     <constructor-arg ref=\"httpClientConnManager\"/>\n     <constructor-arg ref=\"httpClientParams\"/>"}]}