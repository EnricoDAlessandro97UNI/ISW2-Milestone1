{"sha":"fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZhZDA3ZWY0M2QyNzFhMzAyZjFiM2ZiNWM5OWVlNmRjNjhjZmRiZmY=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2017-04-07T15:05:37Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2017-04-10T07:02:22Z"},"message":"[SYNCOPE-1060] missing fix about dates on membership attributes on self registration","tree":{"sha":"3aee70e215d9ad009bc2cee60d7261f63528ae6f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3aee70e215d9ad009bc2cee60d7261f63528ae6f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"b024bc8eea9a27c87cb67f89e1d8a51d8f8f880d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b024bc8eea9a27c87cb67f89e1d8a51d8f8f880d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b024bc8eea9a27c87cb67f89e1d8a51d8f8f880d"}],"stats":{"total":147,"additions":80,"deletions":67},"files":[{"sha":"6071642b3769416d7ee1f6b090cedbde0d088e9c","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/BaseUserSelfResource.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java?ref=fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.resources;\n+\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.time.FastDateFormat;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+\n+public abstract class BaseUserSelfResource extends BaseResource {\n+\n+    private static final long serialVersionUID = -5892402817902884085L;\n+\n+    protected void dateToMillis(final Map<String, AttrTO> plainAttrMap, final PlainSchemaTO plainSchema)\n+            throws ParseException {\n+        if (plainAttrMap.containsKey(plainSchema.getKey())) {\n+            FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n+\n+            AttrTO dateAttr = plainAttrMap.get(plainSchema.getKey());\n+            List<String> milliValues = new ArrayList<>(dateAttr.getValues().size());\n+            for (String value : dateAttr.getValues()) {\n+                milliValues.add(String.valueOf(fmt.parse(value).getTime()));\n+            }\n+            dateAttr.getValues().clear();\n+            dateAttr.getValues().addAll(milliValues);\n+        }\n+    }\n+\n+    protected void millisToDate(final Map<String, AttrTO> plainAttrMap, final PlainSchemaTO plainSchema)\n+            throws IllegalArgumentException {\n+        if (plainAttrMap.containsKey(plainSchema.getKey())) {\n+            FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n+\n+            AttrTO dateAttr = plainAttrMap.get(plainSchema.getKey());\n+            List<String> formattedValues = new ArrayList<>(dateAttr.getValues().size());\n+            for (String value : dateAttr.getValues()) {\n+                try {\n+                    formattedValues.add(fmt.format(Long.valueOf(value)));\n+                } catch (NumberFormatException e) {\n+                    throw new IllegalArgumentException(\"Invalid format value for \" + value);\n+                }\n+            }\n+            dateAttr.getValues().clear();\n+            dateAttr.getValues().addAll(formattedValues);\n+        }\n+    }\n+\n+}"},{"sha":"fbb2e33a3bf84e91ea9476978e69e5253f3479ef","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java","status":"modified","additions":11,"deletions":25,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java?ref=fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff","patch":"@@ -22,9 +22,7 @@\n \n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n@@ -33,7 +31,6 @@\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n-import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n@@ -45,7 +42,7 @@\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n \n @Resource(key = \"userSelfCreate\", path = \"/api/self/create\")\n-public class UserSelfCreateResource extends BaseResource {\n+public class UserSelfCreateResource extends BaseUserSelfResource {\n \n     private static final long serialVersionUID = -2721621682300247583L;\n \n@@ -86,28 +83,8 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n             }\n \n             if (isSelfRegistrationAllowed() && userTO != null) {\n-                Map<String, AttrTO> userPlainAttrMap = userTO.getPlainAttrMap();\n-\n-                // millis -> Date conversion\n-                for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n-                    if (userPlainAttrMap.containsKey(plainSchema.getKey())) {\n-                        FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n-\n-                        AttrTO dateAttr = userPlainAttrMap.get(plainSchema.getKey());\n-                        List<String> formattedValues = new ArrayList<>(dateAttr.getValues().size());\n-                        for (String value : dateAttr.getValues()) {\n-                            try {\n-                                formattedValues.add(fmt.format(Long.valueOf(value)));\n-                            } catch (NumberFormatException e) {\n-                                throw new IllegalArgumentException(\"Invalid format value for \" + value);\n-                            }\n-                        }\n-                        dateAttr.getValues().clear();\n-                        dateAttr.getValues().addAll(formattedValues);\n-                    }\n-                }\n \n-                // membership attributes management\n+                // 1. membership attributes management\n                 Set<AttrTO> membAttrs = new HashSet<>();\n                 for (AttrTO attr : userTO.getPlainAttrs()) {\n                     if (attr.getSchema().contains(\"#\")) {\n@@ -133,6 +110,15 @@ public boolean evaluate(final MembershipTO item) {\n                 }\n                 userTO.getPlainAttrs().removeAll(membAttrs);\n \n+                // 2. millis -> Date conversion for PLAIN attributes of USER and its MEMBERSHIPS\n+                Map<String, AttrTO> userPlainAttrMap = userTO.getPlainAttrMap();\n+                for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n+                    millisToDate(userPlainAttrMap, plainSchema);\n+                    for (MembershipTO membership : userTO.getMemberships()) {\n+                        millisToDate(membership.getPlainAttrMap(), plainSchema);\n+                    }\n+                }\n+\n                 membAttrs.clear();\n                 for (AttrTO attr : userTO.getDerAttrs()) {\n                     if (attr.getSchema().contains(\"#\")) {"},{"sha":"056e757807ccf2b0e98052b5b023ecbd4fd22ce3","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java","status":"modified","additions":1,"deletions":19,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java?ref=fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff","patch":"@@ -20,15 +20,11 @@\n \n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n-import java.text.ParseException;\n-import java.util.ArrayList;\n-import java.util.List;\n import java.util.Map;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.SerializationUtils;\n-import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -39,7 +35,7 @@\n import org.apache.wicket.request.resource.IResource;\n \n @Resource(key = \"userSelfRead\", path = \"/api/self/read\")\n-public class UserSelfReadResource extends BaseResource {\n+public class UserSelfReadResource extends BaseUserSelfResource {\n \n     private static final long serialVersionUID = -9184809392631523912L;\n \n@@ -111,18 +107,4 @@ public void writeData(final Attributes attributes) throws IOException {\n         return response;\n     }\n \n-    private void dateToMillis(final Map<String, AttrTO> plainAttrMap, final PlainSchemaTO plainSchema)\n-            throws ParseException {\n-        if (plainAttrMap.containsKey(plainSchema.getKey())) {\n-            FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n-\n-            AttrTO dateAttr = plainAttrMap.get(plainSchema.getKey());\n-            List<String> milliValues = new ArrayList<>(dateAttr.getValues().size());\n-            for (String value : dateAttr.getValues()) {\n-                milliValues.add(String.valueOf(fmt.parse(value).getTime()));\n-            }\n-            dateAttr.getValues().clear();\n-            dateAttr.getValues().addAll(milliValues);\n-        }\n-    }\n }"},{"sha":"bc1a9fda9878336ecafb62649e8b5f9f51536d3b","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":1,"deletions":23,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=fad07ef43d271a302f1b3fb5c99ee6dc68cfdbff","patch":"@@ -20,9 +20,7 @@\n \n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n@@ -31,7 +29,6 @@\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n-import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n@@ -45,7 +42,7 @@\n import org.apache.wicket.request.resource.IResource;\n \n @Resource(key = \"userSelfUpdate\", path = \"/api/self/update\")\n-public class UserSelfUpdateResource extends BaseResource {\n+public class UserSelfUpdateResource extends BaseUserSelfResource {\n \n     private static final long serialVersionUID = -2721621682300247583L;\n \n@@ -187,23 +184,4 @@ public void writeData(final Attributes attributes) throws IOException {\n         return response;\n     }\n \n-    private void millisToDate(final Map<String, AttrTO> plainAttrMap, final PlainSchemaTO plainSchema)\n-            throws IllegalArgumentException {\n-        LOG.info(\"CONVERTING >>>>>>>>>> {}\", plainSchema.getKey());\n-        if (plainAttrMap.containsKey(plainSchema.getKey())) {\n-            FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n-\n-            AttrTO dateAttr = plainAttrMap.get(plainSchema.getKey());\n-            List<String> formattedValues = new ArrayList<>(dateAttr.getValues().size());\n-            for (String value : dateAttr.getValues()) {\n-                try {\n-                    formattedValues.add(fmt.format(Long.valueOf(value)));\n-                } catch (NumberFormatException e) {\n-                    throw new IllegalArgumentException(\"Invalid format value for \" + value);\n-                }\n-            }\n-            dateAttr.getValues().clear();\n-            dateAttr.getValues().addAll(formattedValues);\n-        }\n-    }\n }"}]}