{"sha":"29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI5ZGI4ZDRlNmVmMTlmZjFkNjFiYzZlMDNlYzQzMWJmZGRhODZkNDU=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-06-20T13:49:59Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-06-20T13:49:59Z"},"message":"SYNCOPE-96 #comment preemptive authentication has been fixed\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1352100 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6da5ea4506b3072d3d8e187d630b772f470641e6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6da5ea4506b3072d3d8e187d630b772f470641e6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"47460136628e329bba21c4435acef27a64681026","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/47460136628e329bba21c4435acef27a64681026","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/47460136628e329bba21c4435acef27a64681026"}],"stats":{"total":275,"additions":171,"deletions":104},"files":[{"sha":"75d8fc120d35746d8aab9e628e00ccec46213a2f","filename":"client/src/main/java/org/apache/syncope/client/http/HttpClientParams.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FHttpClientParams.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FHttpClientParams.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FHttpClientParams.java?ref=29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.http;\n+\n+import java.util.Map;\n+import org.apache.http.params.SyncBasicHttpParams;\n+\n+public class HttpClientParams extends SyncBasicHttpParams {\n+\n+    public void setParameters(final Map<String, Object> parameters) {\n+        clear();\n+        \n+        for (Map.Entry<String, Object> entry : parameters.entrySet()) {\n+            setParameter(entry.getKey(), entry.getValue());\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"86e29e706d24023150d3a35eb887148c335b2fe4","filename":"client/src/main/java/org/apache/syncope/client/http/PreemptiveAuthHttpRequestFactory.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FPreemptiveAuthHttpRequestFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FPreemptiveAuthHttpRequestFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FPreemptiveAuthHttpRequestFactory.java?ref=29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","patch":"@@ -26,7 +26,9 @@\n import org.apache.http.conn.ClientConnectionManager;\n import org.apache.http.impl.auth.BasicScheme;\n import org.apache.http.impl.client.BasicAuthCache;\n+import org.apache.http.impl.client.DefaultHttpClient;\n import org.apache.http.params.HttpParams;\n+import org.apache.http.params.SyncBasicHttpParams;\n import org.apache.http.protocol.BasicHttpContext;\n import org.apache.http.protocol.HttpContext;\n import org.springframework.http.HttpMethod;\n@@ -50,7 +52,7 @@ public PreemptiveAuthHttpRequestFactory(final String host, final int port, final\n     public PreemptiveAuthHttpRequestFactory(final String host, final int port, final String scheme,\n             final ClientConnectionManager conman, final HttpParams params) {\n \n-        super();\n+        super(new DefaultHttpClient(conman, params));\n         targetHost = new HttpHost(host, port, scheme);\n     }\n \n@@ -61,13 +63,12 @@ public AuthScope getAuthScope() {\n     @Override\n     protected HttpContext createHttpContext(final HttpMethod httpMethod, final URI uri) {\n \n-        AuthCache authCache = new BasicAuthCache();\n-        // Generate BASIC scheme object and add it to the local auth cache\n-        BasicScheme basicAuth = new BasicScheme();\n-        authCache.put(targetHost, basicAuth);\n-\n         // Add AuthCache to the execution context\n         BasicHttpContext localcontext = new BasicHttpContext();\n+\n+        // Generate BASIC scheme object and add it to the local auth cache\n+        AuthCache authCache = new BasicAuthCache();\n+        authCache.put(targetHost, new BasicScheme());\n         localcontext.setAttribute(ClientContext.AUTH_CACHE, authCache);\n \n         return localcontext;"},{"sha":"9639e20c3f24580b7a83a71455136a1bff72258a","filename":"console/src/main/java/org/apache/syncope/console/pages/Login.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java?ref=29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","patch":"@@ -109,16 +109,21 @@ public Login(final PageParameters parameters) {\n \n             @Override\n             public void onSubmit() {\n-                String[] entitlements = authenticate(userIdField.getRawInput(), passwordField.getRawInput());\n+                try {\n+                    String[] entitlements = authenticate(userIdField.getRawInput(), passwordField.getRawInput());\n \n-                if (entitlements == null) {\n-                    error(getString(\"login-error\"));\n-                } else {\n                     SyncopeSession.get().setUserId(userIdField.getRawInput());\n                     SyncopeSession.get().setEntitlements(entitlements);\n                     SyncopeSession.get().setCoreVersion(getCoreVersion());\n \n                     setResponsePage(WelcomePage.class, parameters);\n+                } catch (HttpClientErrorException e) {\n+                    error(getString(\"login-error\"));\n+                    \n+                    PreemptiveAuthHttpRequestFactory requestFactory =\n+                            ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory());\n+\n+                    ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().clear();\n                 }\n             }\n         };\n@@ -174,20 +179,14 @@ public Page createPage() {\n \n     private String[] authenticate(final String userId, final String password) {\n         // 1. Set provided credentials to check\n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n-                getRequestFactory());\n+        PreemptiveAuthHttpRequestFactory requestFactory =\n+                ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory());\n+\n         ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n                 requestFactory.getAuthScope(), new UsernamePasswordCredentials(userId, password));\n \n         // 2. Search authorizations for user specified by credentials\n-        String[] entitlements = null;\n-        try {\n-            entitlements = restTemplate.getForObject(baseURL + \"auth/entitlements.json\", String[].class);\n-        } catch (HttpClientErrorException e) {\n-            LOG.error(\"While fetching user's entitlements\", e);\n-        }\n-\n-        return entitlements;\n+        return restTemplate.getForObject(baseURL + \"auth/entitlements.json\", String[].class);\n     }\n \n     private boolean isSelfRegistrationAllowed() {"},{"sha":"86f616976d4247971ac90d9c438a1f34d7abf513","filename":"console/src/main/java/org/apache/syncope/console/pages/Logout.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogout.java?ref=29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","patch":"@@ -18,8 +18,12 @@\n  */\n package org.apache.syncope.console.pages;\n \n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.syncope.console.SyncopeSession;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.springframework.web.client.RestTemplate;\n \n /**\n  * Syncope Logout.\n@@ -28,6 +32,9 @@ public class Logout extends BasePage {\n \n     private static final long serialVersionUID = -2143007520243939450L;\n \n+    @SpringBean\n+    private RestTemplate restTemplate;\n+\n     public Logout(final PageParameters parameters) {\n         super(parameters);\n \n@@ -37,5 +44,10 @@ public Logout(final PageParameters parameters) {\n         //        getRequestCycle().setRedirect(true);\n \n         setResponsePage(getApplication().getHomePage());\n+\n+        PreemptiveAuthHttpRequestFactory requestFactory =\n+                ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory());\n+\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().clear();\n     }\n }"},{"sha":"1ed5d92a7325b3cdc6b431639101f51002923b88","filename":"console/src/main/resources/applicationContext.xml","status":"modified","additions":19,"deletions":4,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","patch":"@@ -39,7 +39,7 @@ under the License.\n   <context:component-scan base-package=\"org.apache.syncope.console.rest\"/>\n \n   <bean id=\"propertyConfigurer\"\n-          class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n+        class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n     <property name=\"locations\">\n       <list>\n         <value>classpath:configuration.properties</value>\n@@ -64,12 +64,27 @@ under the License.\n   <bean id=\"jacksonObjectMapper\" class=\"org.codehaus.jackson.map.ObjectMapper\"/>\n         \n   <bean id=\"mappingJacksonHttpMessageConverter\"\n-          class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\">\n+        class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\">\n     <property name=\"objectMapper\" ref=\"jacksonObjectMapper\"/>\n   </bean>\n \n   <bean id=\"httpClientConnManager\" class=\"org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager\"/>\n-  <bean id=\"httpClientParams\" class=\"org.apache.http.params.SyncBasicHttpParams\"/>\n+  \n+  <bean id=\"httpClientParams\" class=\"org.apache.syncope.client.http.HttpClientParams\">\n+    <property name=\"parameters\">\n+      <map key-type=\"java.lang.String\">\n+        <entry>\n+          <key>\n+            <value>http.protocol.handle-authentication</value>\n+          </key>\n+          <value type=\"java.lang.Boolean\">\n+            false\n+          </value>\n+        </entry>\n+      </map>\n+    </property>\n+  </bean>\n+  \n   <bean id=\"httpClientFactory\" class=\"org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory\">\n     <constructor-arg value=\"${host}\"/>\n     <constructor-arg value=\"${port}\"/>\n@@ -82,7 +97,7 @@ under the License.\n \n     <property name=\"errorHandler\">\n       <bean id=\"syncopeClientErrorHandler\"\n-                  class=\"org.apache.syncope.client.validation.SyncopeClientErrorHandler\"/>\n+            class=\"org.apache.syncope.client.validation.SyncopeClientErrorHandler\"/>\n     </property>\n   </bean>\n "},{"sha":"694fda5d32ca86043eb1c55a2093d683d71ac2c5","filename":"core/src/main/java/org/apache/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","patch":"@@ -143,12 +143,7 @@ public Authentication authenticate(final Authentication authentication)\n \n             LOG.debug(\"User {} not authenticated\", authentication.getPrincipal());\n \n-            // By using HttpComponents version 4.2 the request is sent twice in case of exception (SYNCOPE-94) ...\n-            // throw new BadCredentialsException(\"User \" + authentication.getPrincipal() + \" not authenticated\");\n-            \n-            // ... this is the reason of the following code.\n-            token = new UsernamePasswordAuthenticationToken(authentication.getPrincipal(), null, null);\n-            token.setDetails(authentication.getDetails());\n+            throw new BadCredentialsException(\"User \" + authentication.getPrincipal() + \" not authenticated\");\n         }\n \n         return token;"},{"sha":"83bc06043490866e1f991ad5fc05fb9799e5d486","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:restClientContext.xml\", \"classpath:testJDBCContext.xml\" })\n+@ContextConfiguration(locations = {\"classpath:restClientContext.xml\", \"classpath:testJDBCContext.xml\"})\n public abstract class AbstractTest {\n \n     /**\n@@ -52,11 +52,16 @@ protected RestTemplate anonymousRestTemplate() {\n         return new RestTemplate();\n     }\n \n-    @Before\n-    public void setupRestTemplate() {\n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate\n-                .getRequestFactory());\n+    public void setupRestTemplate(final String uid, final String pwd) {\n+        PreemptiveAuthHttpRequestFactory requestFactory =\n+                ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory());\n+\n         ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"admin\", \"password\"));\n+                requestFactory.getAuthScope(), new UsernamePasswordCredentials(uid, pwd));\n+    }\n+\n+    @Before\n+    public void resetRestTemplate() {\n+        setupRestTemplate(\"admin\", \"password\");\n     }\n }"},{"sha":"d6546dcebcdb884d298c00f6b233e86102f67221","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":30,"deletions":54,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","patch":"@@ -24,12 +24,10 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.http.auth.UsernamePasswordCredentials;\n-import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.client.HttpClientErrorException;\n-import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.apache.syncope.client.search.AttributeCond;\n import org.apache.syncope.client.search.NodeCond;\n import org.apache.syncope.client.to.AttributeTO;\n@@ -53,7 +51,8 @@ public void testAdminEntitlements() {\n         assertFalse(allEntitlements.isEmpty());\n \n         // 2. as admin, read own entitlements\n-        super.setupRestTemplate();\n+        super.resetRestTemplate();\n+\n         Set<String> adminEntitlements = new HashSet<String>(Arrays.asList(restTemplate.getForObject(BASE_URL\n                 + \"auth/entitlements.json\", String[].class)));\n \n@@ -99,10 +98,7 @@ public void testUserSchemaAuthorization() {\n         assertNotNull(schemaTO);\n \n         // 4. read the schema created above (as user) - success\n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n-                getRequestFactory());\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), \"password123\"));\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n         schemaTO = restTemplate.getForObject(BASE_URL + \"schema/user/read/authTestSchema.json\", SchemaTO.class);\n         assertNotNull(schemaTO);\n@@ -118,7 +114,7 @@ public void testUserSchemaAuthorization() {\n         assertEquals(HttpStatus.FORBIDDEN, exception.getStatusCode());\n \n         // reset admin credentials for restTemplate\n-        super.setupRestTemplate();\n+        super.resetRestTemplate();\n \n         userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n \n@@ -142,16 +138,12 @@ public void testUserRead() {\n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n-                getRequestFactory());\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), \"password123\"));\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n         UserTO readUserTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n         assertNotNull(readUserTO);\n \n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user2\", \"password\"));\n+        super.setupRestTemplate(\"user2\", \"password\");\n \n         SyncopeClientException exception = null;\n         try {\n@@ -163,7 +155,7 @@ public void testUserRead() {\n         assertNotNull(exception);\n \n         // reset admin credentials for restTemplate\n-        super.setupRestTemplate();\n+        super.resetRestTemplate();\n     }\n \n     @Test\n@@ -181,10 +173,7 @@ public void testUserSearch() {\n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n-                getRequestFactory());\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), \"password123\"));\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n         AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n         isNullCond.setSchema(\"loginDate\");\n@@ -200,20 +189,22 @@ public void testUserSearch() {\n         }\n         assertTrue(userIds.contains(1L));\n \n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user2\", \"password\"));\n+        super.setupRestTemplate(\"user2\", \"password\");\n+\n+        matchedUsers =\n+                Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition, UserTO[].class));\n \n-        matchedUsers = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition,\n-                UserTO[].class));\n         assertNotNull(matchedUsers);\n+\n         userIds = new HashSet<Long>(matchedUsers.size());\n+\n         for (UserTO user : matchedUsers) {\n             userIds.add(user.getId());\n         }\n         assertFalse(userIds.contains(1L));\n \n         // reset admin credentials for restTemplate\n-        super.setupRestTemplate();\n+        super.resetRestTemplate();\n     }\n \n     @Test\n@@ -231,10 +222,7 @@ public void checkFailedLogins() {\n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n-                getRequestFactory());\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), \"password123\"));\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n         UserTO readUserTO =\n                 restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n@@ -245,8 +233,7 @@ public void checkFailedLogins() {\n \n         // authentications failed ...\n \n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), \"wrongpwd1\"));\n+        super.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n \n         Throwable t = null;\n \n@@ -268,15 +255,14 @@ public void checkFailedLogins() {\n         }\n \n         // reset admin credentials for restTemplate\n-        super.setupRestTemplate();\n+        super.resetRestTemplate();\n \n         readUserTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n         assertNotNull(readUserTO);\n         assertNotNull(readUserTO.getFailedLogins());\n         assertEquals(Integer.valueOf(2), readUserTO.getFailedLogins());\n \n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), \"password123\"));\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n         readUserTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n         assertNotNull(readUserTO);\n@@ -299,10 +285,7 @@ public void checkUserSuspension() {\n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n-                getRequestFactory());\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), \"password123\"));\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n         userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n \n@@ -312,8 +295,7 @@ public void checkUserSuspension() {\n \n         // authentications failed ...\n \n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), \"wrongpwd1\"));\n+        super.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n \n         Throwable t = null;\n \n@@ -345,7 +327,7 @@ public void checkUserSuspension() {\n         t = null;\n \n         // reset admin credentials for restTemplate\n-        super.setupRestTemplate();\n+        super.resetRestTemplate();\n \n         userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n \n@@ -354,8 +336,7 @@ public void checkUserSuspension() {\n         assertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n \n         // last authentication before suspension\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), \"wrongpwd1\"));\n+        super.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n \n         try {\n             restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n@@ -367,7 +348,7 @@ public void checkUserSuspension() {\n         t = null;\n \n         // reset admin credentials for restTemplate\n-        super.setupRestTemplate();\n+        super.resetRestTemplate();\n \n         userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n \n@@ -378,8 +359,7 @@ public void checkUserSuspension() {\n \n         // check for authentication\n \n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), \"password123\"));\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n         try {\n             restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n@@ -392,15 +372,14 @@ public void checkUserSuspension() {\n         t = null;\n \n         // reset admin credentials for restTemplate\n-        super.setupRestTemplate();\n+        super.resetRestTemplate();\n \n         userTO = restTemplate.getForObject(BASE_URL + \"user/reactivate/\" + userTO.getId(), UserTO.class);\n \n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), \"password123\"));\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n         userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n \n@@ -438,10 +417,7 @@ public void issueSYNCOPE48() {\n         role1Admin = restTemplate.postForObject(BASE_URL + \"user/create\", role1Admin, UserTO.class);\n         assertNotNull(role1Admin);\n \n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n-                getRequestFactory());\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(role1Admin.getUsername(), \"password\"));\n+        super.setupRestTemplate(role1Admin.getUsername(), \"password\");\n \n         // User with role 1, created by user with child role created above\n         UserTO role1User = UserTestITCase.getSampleTO(\"syncope48user@apache.org\");\n@@ -453,6 +429,6 @@ public void issueSYNCOPE48() {\n         assertNotNull(role1User);\n \n         // reset admin credentials for restTemplate\n-        super.setupRestTemplate();\n+        super.resetRestTemplate();\n     }\n }"},{"sha":"706fff45ab6b89e26ffed01faa5c8be96f23b0fc","filename":"core/src/test/java/org/apache/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":22,"deletions":7,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","patch":"@@ -25,10 +25,17 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.http.HttpHost;\n import org.apache.http.HttpResponse;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.client.AuthCache;\n import org.apache.http.client.HttpClient;\n import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.protocol.ClientContext;\n+import org.apache.http.impl.auth.BasicScheme;\n+import org.apache.http.impl.client.BasicAuthCache;\n import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\n+import org.apache.http.protocol.BasicHttpContext;\n import org.apache.http.util.EntityUtils;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n@@ -191,6 +198,17 @@ public void executeAndExport()\n         // 1. XML (default)\n \n         final HttpClient client = ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient();\n+        final AuthScope scope = ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory()).getAuthScope();\n+        final HttpHost targetHost = new HttpHost(scope.getHost(), scope.getPort(), scope.getScheme());\n+\n+\n+        // Add AuthCache to the execution context\n+        BasicHttpContext localcontext = new BasicHttpContext();\n+\n+        // Generate BASIC scheme object and add it to the local auth cache\n+        AuthCache authCache = new BasicAuthCache();\n+        authCache.put(targetHost, new BasicScheme());\n+        localcontext.setAttribute(ClientContext.AUTH_CACHE, authCache);\n \n         HttpResponse response = null;\n \n@@ -207,7 +225,7 @@ public void executeAndExport()\n             } catch (InterruptedException e) {\n             }\n \n-            response = client.execute(getMethod);\n+            response = client.execute(targetHost, getMethod, localcontext);\n \n             maxit--;\n         } while ((response == null || response.getStatusLine().getStatusCode() != 200) && maxit > 0);\n@@ -220,8 +238,7 @@ public void executeAndExport()\n \n         // 2. HTML\n         getMethod = new HttpGet(BASE_URL + \"report/execution/export/\" + postExecIds.iterator().next() + \"?fmt=HTML\");\n-        response = ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().execute(\n-                getMethod);\n+        response = client.execute(targetHost, getMethod, localcontext);\n         assertEquals(200, response.getStatusLine().getStatusCode());\n \n         export = EntityUtils.toString(response.getEntity()).trim();\n@@ -230,8 +247,7 @@ public void executeAndExport()\n \n         // 3. PDF\n         getMethod = new HttpGet(BASE_URL + \"report/execution/export/\" + postExecIds.iterator().next() + \"?fmt=PDF\");\n-        response = ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().execute(\n-                getMethod);\n+        response = client.execute(targetHost, getMethod, localcontext);\n         assertEquals(200, response.getStatusLine().getStatusCode());\n \n         export = EntityUtils.toString(response.getEntity()).trim();\n@@ -240,8 +256,7 @@ public void executeAndExport()\n \n         // 4. RTF\n         getMethod = new HttpGet(BASE_URL + \"report/execution/export/\" + postExecIds.iterator().next() + \"?fmt=RTF\");\n-        response = ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().execute(\n-                getMethod);\n+        response = client.execute(targetHost, getMethod, localcontext);\n         assertEquals(200, response.getStatusLine().getStatusCode());\n \n         export = EntityUtils.toString(response.getEntity()).trim();"},{"sha":"5738ec648b260431f9c48f11e7f1ecf60842bf1e","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","patch":"@@ -182,7 +182,7 @@ public void selfRead() {\n         assertFalse(roleTO.getAttributes().isEmpty());\n \n         // restore admin authentication\n-        super.setupRestTemplate();\n+        super.resetRestTemplate();\n     }\n \n     @Test"},{"sha":"7137e78b0597d774e2af10aac47e4f767c38cfd4","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","patch":"@@ -95,7 +95,7 @@ public void create() {\n         assertNotNull(request);\n \n         // 5. switch back to admin\n-        super.setupRestTemplate();\n+        super.resetRestTemplate();\n \n         // 6. try to find user\n         AttributeCond attrCond = new AttributeCond(AttributeCond.Type.EQ);\n@@ -156,7 +156,7 @@ public void update() {\n         assertNotNull(request);\n \n         // 6. switch back to admin\n-        super.setupRestTemplate();\n+        super.resetRestTemplate();\n \n         // 7. user password has not changed yet\n         Boolean verify = restTemplate.getForObject(BASE_URL + \"user/verifyPassword/{username}.json?password=\"\n@@ -204,7 +204,7 @@ public void delete() {\n         assertNotNull(request);\n \n         // 5. switch back to admin\n-        super.setupRestTemplate();\n+        super.resetRestTemplate();\n \n         // 6. user still exists\n         UserTO actual = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());"},{"sha":"fa93342588b76a529e87bdf82102629b3a0afd4a","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","patch":"@@ -659,7 +659,7 @@ public void createWithReject() {\n         assertEquals(\"rejected\", userTO.getStatus());\n \n         // reset admin credentials for restTemplate\n-        super.setupRestTemplate();\n+        super.resetRestTemplate();\n     }\n \n     @Test"},{"sha":"18cded6e8a51f347875cc4219113b3a5c3e40889","filename":"core/src/test/resources/restClientContext.xml","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml?ref=29db8d4e6ef19ff1d61bc6e03ec431bfdda86d45","patch":"@@ -24,20 +24,36 @@ under the License.\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\">\n \n   <bean id=\"httpClientConnManager\" class=\"org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager\"/>\n-  <bean id=\"httpClientParams\" class=\"org.apache.http.params.SyncBasicHttpParams\"/>\n+  \n+  <bean id=\"httpClientParams\" class=\"org.apache.syncope.client.http.HttpClientParams\">\n+    <property name=\"parameters\">\n+      <map key-type=\"java.lang.String\">\n+        <entry>\n+          <key>\n+            <value>http.protocol.handle-authentication</value>\n+          </key>\n+          <value type=\"java.lang.Boolean\">\n+            false\n+          </value>\n+        </entry>\n+      </map>\n+    </property>\n+  </bean>\n+  \n   <bean id=\"httpClientFactory\" class=\"org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory\">\n     <constructor-arg value=\"localhost\"/>\n     <constructor-arg value=\"9080\"/>\n     <constructor-arg value=\"http\"/>\n     <constructor-arg ref=\"httpClientConnManager\"/>\n     <constructor-arg ref=\"httpClientParams\"/>\n   </bean>\n+  \n   <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n     <constructor-arg ref=\"httpClientFactory\"/>\n \n     <property name=\"errorHandler\">\n       <bean id=\"syncopeClientErrorHandler\"\n-                  class=\"org.apache.syncope.client.validation.SyncopeClientErrorHandler\"/>\n+            class=\"org.apache.syncope.client.validation.SyncopeClientErrorHandler\"/>\n     </property>\n   </bean>\n "}]}