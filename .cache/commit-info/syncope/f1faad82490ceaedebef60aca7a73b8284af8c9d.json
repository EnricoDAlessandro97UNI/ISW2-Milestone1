{"sha":"f1faad82490ceaedebef60aca7a73b8284af8c9d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYxZmFhZDgyNDkwY2VhZWRlYmVmNjBhY2E3YTczYjgyODRhZjhjOWQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-30T09:33:29Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-30T09:33:29Z"},"message":"(Fixes issue #19 and issue #37)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246447 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"001b27be94d72634e4d9fa02314dd6a32d585916","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/001b27be94d72634e4d9fa02314dd6a32d585916"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f1faad82490ceaedebef60aca7a73b8284af8c9d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1faad82490ceaedebef60aca7a73b8284af8c9d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f1faad82490ceaedebef60aca7a73b8284af8c9d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1faad82490ceaedebef60aca7a73b8284af8c9d/comments","author":null,"committer":null,"parents":[{"sha":"13279da7c480afbb5490238c406bb81ebce06cce","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/13279da7c480afbb5490238c406bb81ebce06cce","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/13279da7c480afbb5490238c406bb81ebce06cce"}],"stats":{"total":2176,"additions":1404,"deletions":772},"files":[{"sha":"f5c125d551a807bfc614e02df15d0217626c3646","filename":"client/src/main/java/org/syncope/client/to/SchemaMappingTO.java","status":"modified","additions":18,"deletions":14,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTO.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -15,6 +15,7 @@\n package org.syncope.client.to;\n \n import org.syncope.client.AbstractBaseBean;\n+import org.syncope.types.SchemaType;\n \n public class SchemaMappingTO extends AbstractBaseBean {\n \n@@ -25,14 +26,18 @@ public class SchemaMappingTO extends AbstractBaseBean {\n      * Consider that we can associate tha same attribute schema more\n      * than once, with different aliases, to different resource attributes.\n      */\n-    private String userSchema;\n+    private String schemaName;\n \n     /**\n-     * Attribute schema to be mapped.\n-     * Consider that we can associate tha same attribute schema more\n-     * than once, with different aliases, to different resource attributes.\n+     * Schema type to be mapped.\n+     * Possible values are:\n+     * * AccountId for an account id;\n+     * * Password for a password;\n+     * * UserSchema for a user schema;\n+     * * RoleSchema for a role schema;\n+     * * MembershipSchema for a membership schema.\n      */\n-    private String roleSchema;\n+    private SchemaType schemaType;\n \n     /**\n      * Target resource's field to be mapped.\n@@ -94,20 +99,19 @@ public void setPassword(boolean password) {\n         this.password = password;\n     }\n \n-    public String getRoleSchema() {\n-        return roleSchema;\n+    public String getSchemaName() {\n+        return schemaName;\n     }\n \n-    public void setRoleSchema(String roleSchema) {\n-        this.roleSchema = roleSchema;\n+    public void setSchemaName(String schemaName) {\n+        this.schemaName = schemaName;\n     }\n \n-    public String getUserSchema() {\n-        return userSchema;\n+    public SchemaType getSchemaType() {\n+        return schemaType;\n     }\n \n-    public void setUserSchema(String userSchema) {\n-        this.userSchema = userSchema;\n+    public void setSchemaType(SchemaType schemaType) {\n+        this.schemaType = schemaType;\n     }\n-    \n }"},{"sha":"471bd80a2163470cc69924ff07a4e53c3aaa9f5f","filename":"client/src/main/java/org/syncope/client/to/SchemaTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -17,12 +17,12 @@\n import java.util.HashSet;\n import java.util.Set;\n import org.syncope.client.AbstractBaseBean;\n-import org.syncope.types.SchemaType;\n+import org.syncope.types.SchemaValueType;\n \n public class SchemaTO extends AbstractBaseBean {\n \n     private String name;\n-    private SchemaType type;\n+    private SchemaValueType type;\n     private boolean virtual;\n     private boolean mandatory;\n     private boolean multivalue;\n@@ -84,11 +84,11 @@ public void setName(String name) {\n         this.name = name;\n     }\n \n-    public SchemaType getType() {\n+    public SchemaValueType getType() {\n         return type;\n     }\n \n-    public void setType(SchemaType type) {\n+    public void setType(SchemaValueType type) {\n         this.type = type;\n     }\n "},{"sha":"da8e917d631a87c928893a5f33f18b6643f4ff23","filename":"client/src/main/java/org/syncope/types/SchemaType.java","status":"modified","additions":18,"deletions":33,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -1,3 +1,5 @@\n+package org.syncope.types;\n+\n /*\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n@@ -12,51 +14,34 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.types;\n-\n-import java.text.DecimalFormat;\n-import java.text.Format;\n-import java.text.SimpleDateFormat;\n-\n public enum SchemaType {\n \n-    String(\"java.lang.String\"),\n-    Long(\"java.lang.Long\"),\n-    Double(\"java.lang.Double\"),\n-    Boolean(\"java.lang.Boolean\"),\n-    Date(\"java.util.Date\");\n+    UserSchema(\n+    \"org.syncope.core.persistence.beans.user.UserSchema\"),\n+    RoleSchema(\n+    \"org.syncope.core.persistence.beans.role.RoleSchema\"),\n+    MembershipSchema(\n+    \"org.syncope.core.persistence.beans.membership.MembershipSchema\"),\n+    AccountId(\n+    \"AccountId\"),\n+    Password(\n+    \"Password\");\n+\n     final private String className;\n-    private Format formatter;\n \n     SchemaType(String className) {\n         this.className = className;\n-        this.formatter = null;\n     }\n \n     public String getClassName() {\n         return className;\n     }\n \n-    public Format getBasicFormatter() {\n-        if (formatter == null) {\n-            switch (this) {\n-                case Date:\n-                    this.formatter = new SimpleDateFormat();\n-                    break;\n-                case Long:\n-                case Double:\n-                    this.formatter = new DecimalFormat();\n-                    break;\n-            }\n+    public Class getSchemaType() {\n+        try {\n+            return Class.forName(getClassName());\n+        } catch (ClassNotFoundException e) {\n+            return String.class;\n         }\n-\n-        return formatter;\n     }\n-\n-    public boolean isConversionPatternNeeded() {\n-        return this == SchemaType.Date\n-                || this == SchemaType.Double\n-                || this == SchemaType.Long;\n-    }\n-\n }"},{"sha":"ce642ea97257da45904da53bbb95e567d966db61","filename":"client/src/main/java/org/syncope/types/SchemaValueType.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaValueType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaValueType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaValueType.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -0,0 +1,62 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.types;\n+\n+import java.text.DecimalFormat;\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+\n+public enum SchemaValueType {\n+\n+    String(\"java.lang.String\"),\n+    Long(\"java.lang.Long\"),\n+    Double(\"java.lang.Double\"),\n+    Boolean(\"java.lang.Boolean\"),\n+    Date(\"java.util.Date\");\n+    final private String className;\n+    private Format formatter;\n+\n+    SchemaValueType(String className) {\n+        this.className = className;\n+        this.formatter = null;\n+    }\n+\n+    public String getClassName() {\n+        return className;\n+    }\n+\n+    public Format getBasicFormatter() {\n+        if (formatter == null) {\n+            switch (this) {\n+                case Date:\n+                    this.formatter = new SimpleDateFormat();\n+                    break;\n+                case Long:\n+                case Double:\n+                    this.formatter = new DecimalFormat();\n+                    break;\n+            }\n+        }\n+\n+        return formatter;\n+    }\n+\n+    public boolean isConversionPatternNeeded() {\n+        return this == SchemaValueType.Date\n+                || this == SchemaValueType.Double\n+                || this == SchemaValueType.Long;\n+    }\n+\n+}"},{"sha":"b0b7eedb0b7f9f4db8673f54b727d70fdc39e273","filename":"console/src/main/java/org/syncope/console/pages/ResourceModalPage.java","status":"modified","additions":79,"deletions":72,"changes":151,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -46,31 +46,38 @@\n import org.syncope.console.wicket.markup.html.form.UpdatingCheckBox;\n import org.syncope.console.wicket.markup.html.form.UpdatingDropDownChoice;\n import org.syncope.console.wicket.markup.html.form.UpdatingTextField;\n+import org.syncope.types.SchemaType;\n \n /**\n  * Modal window with Connector form.\n  */\n public class ResourceModalPage extends SyncopeModalPage {\n \n     public TextField resourceName;\n+\n     public DropDownChoice connector;\n-    \n+\n     ConnectorInstanceTO connectorTO = new ConnectorInstanceTO();\n \n     SchemaMappingTOs userSchemas = new SchemaMappingTOs();\n+\n     SchemaMappingTOs roleSchemas = new SchemaMappingTOs();\n \n     public AjaxButton submit;\n+\n     public AjaxButton addUserSchemaMappingBtn;\n+\n     public AjaxButton addRoleSchemaMappingBtn;\n \n     ListView mappingUserSchemaView;\n+\n     ListView mappingRoleSchemaView;\n \n     @SpringBean(name = \"resourcesRestClient\")\n     ResourcesRestClient restClient;\n \n     WebMarkupContainer mappingUserSchemaContainer;\n+\n     WebMarkupContainer mappingRoleSchemaContainer;\n \n     /**\n@@ -81,48 +88,46 @@ public class ResourceModalPage extends SyncopeModalPage {\n      * @param create : set to true only if a CREATE operation is required\n      */\n     public ResourceModalPage(final BasePage basePage, final ModalWindow window,\n-        final ResourceTO resourceTO, final boolean createFlag) {\n+            final ResourceTO resourceTO, final boolean createFlag) {\n \n         setupSchemaLists(resourceTO.getMappings());\n \n         Form resourceForm = new Form(\"ResourceForm\");\n-        \n+\n         resourceForm.setModel(new CompoundPropertyModel(resourceTO));\n \n-        if(!createFlag)\n+        if (!createFlag)\n             connectorTO.setId(resourceTO.getConnectorId());\n \n-        IModel connectors =  new LoadableDetachableModel()\n-        {\n+        IModel connectors = new LoadableDetachableModel() {\n+\n+            @Override\n             protected Object load() {\n \n-                ConnectorsRestClient connectorRestClient = (ConnectorsRestClient)\n-                        ((SyncopeApplication)Application.get()).getApplicationContext().\n+                ConnectorsRestClient connectorRestClient = (ConnectorsRestClient) ((SyncopeApplication) Application.get()).getApplicationContext().\n                         getBean(\"connectorsRestClient\");\n \n                 return connectorRestClient.getAllConnectors().getInstances();\n             }\n         };\n \n-        final IModel userSchemasList =  new LoadableDetachableModel()\n-        {\n+        final IModel userSchemasList = new LoadableDetachableModel() {\n+\n+            @Override\n             protected Object load() {\n \n-                SchemaRestClient schemaRestClient = (SchemaRestClient)\n-                        ((SyncopeApplication)Application.get()).\n-                        getApplicationContext().getBean(\"schemaRestClient\");\n+                SchemaRestClient schemaRestClient = (SchemaRestClient) ((SyncopeApplication) Application.get()).getApplicationContext().getBean(\"schemaRestClient\");\n \n                 return schemaRestClient.getAllUserSchemasNames();\n             }\n         };\n \n-        final IModel roleSchemasList =  new LoadableDetachableModel()\n-        {\n+        final IModel roleSchemasList = new LoadableDetachableModel() {\n+\n+            @Override\n             protected Object load() {\n \n-                SchemaRestClient schemaRestClient = (SchemaRestClient)\n-                        ((SyncopeApplication)Application.get()).\n-                        getApplicationContext().getBean(\"schemaRestClient\");\n+                SchemaRestClient schemaRestClient = (SchemaRestClient) ((SyncopeApplication) Application.get()).getApplicationContext().getBean(\"schemaRestClient\");\n \n                 return schemaRestClient.getAllRoleSchemasNames();\n             }\n@@ -136,51 +141,53 @@ protected Object load() {\n         resourceForm.add(resourceName);\n \n         ChoiceRenderer renderer = new ChoiceRenderer(\"connectorName\", \"id\");\n-        connector = new DropDownChoice(\"connectors\",new Model(connectorTO),connectors,renderer);\n+        connector = new DropDownChoice(\"connectors\", new Model(connectorTO), connectors, renderer);\n         connector.setEnabled(createFlag);\n         connector.setModel(new IModel() {\n \n-                public Object getObject() {\n-                    return connectorTO;\n-                }\n+            @Override\n+            public Object getObject() {\n+                return connectorTO;\n+            }\n \n-                public void setObject(Object object) {\n-                    ConnectorInstanceTO connector = (ConnectorInstanceTO)object;\n-                    resourceTO.setConnectorId(connector.getId());\n-                }\n+            @Override\n+            public void setObject(Object object) {\n+                ConnectorInstanceTO connector = (ConnectorInstanceTO) object;\n+                resourceTO.setConnectorId(connector.getId());\n+            }\n \n-                public void detach() {\n-                }\n-            });\n+            @Override\n+            public void detach() {\n+            }\n+        });\n \n         connector.setRequired(true);\n         connector.setEnabled(createFlag);\n \n         resourceForm.add(connector);\n \n-        mappingUserSchemaView = new ListView(\"mappingsUserSchema\",userSchemas.getMappings()) {\n+        mappingUserSchemaView = new ListView(\"mappingsUserSchema\", userSchemas.getMappings()) {\n \n             SchemaMappingTO mappingTO = null;\n \n             @Override\n             protected void populateItem(ListItem item) {\n-                mappingTO = (SchemaMappingTO)item.getDefaultModelObject();\n+                mappingTO = (SchemaMappingTO) item.getDefaultModelObject();\n+\n+                item.add(new AjaxCheckBox(\"toRemove\", new Model(new Boolean(\"\"))) {\n \n-                item.add(new AjaxCheckBox(\"toRemove\",new Model(new Boolean(\"\"))) {\n                     @Override\n                     protected void onUpdate(AjaxRequestTarget target) {\n                         int id = new Integer(getParent().getId());\n                         userSchemas.getMappings().remove(id);\n                         target.addComponent(mappingUserSchemaContainer);\n                     }\n                 });\n-                item.add(new UpdatingTextField(\"field\",new PropertyModel(mappingTO, \"field\"))\n-                        .setRequired(true));\n-                item.add(new UpdatingDropDownChoice(\"userSchema\",new PropertyModel(mappingTO, \"userSchema\"),userSchemasList)\n-                        .setRequired(true));\n-                item.add(new UpdatingCheckBox(\"nullable\",new PropertyModel(mappingTO, \"nullable\")));\n-                item.add(new UpdatingCheckBox(\"accountId\",new PropertyModel(mappingTO, \"accountid\")));\n-                item.add(new UpdatingCheckBox(\"password\",new PropertyModel(mappingTO, \"password\")));\n+                item.add(new UpdatingTextField(\"field\", new PropertyModel(mappingTO, \"field\")).setRequired(true));\n+                item.add(new UpdatingDropDownChoice(\"userSchema\", new PropertyModel(mappingTO, \"userSchema\"), userSchemasList).setRequired(true));\n+                item.add(new UpdatingCheckBox(\"nullable\", new PropertyModel(mappingTO, \"nullable\")));\n+                item.add(new UpdatingCheckBox(\"accountId\", new PropertyModel(mappingTO, \"accountid\")));\n+                item.add(new UpdatingCheckBox(\"password\", new PropertyModel(mappingTO, \"password\")));\n             }\n         };\n \n@@ -190,7 +197,7 @@ protected void onUpdate(AjaxRequestTarget target) {\n \n         resourceForm.add(mappingUserSchemaContainer);\n \n-        addUserSchemaMappingBtn = new AjaxButton(\"addUserSchemaMappingBtn\",new Model(getString(\"add\"))) {\n+        addUserSchemaMappingBtn = new AjaxButton(\"addUserSchemaMappingBtn\", new Model(getString(\"add\"))) {\n \n             @Override\n             protected void onSubmit(AjaxRequestTarget target, Form form) {\n@@ -203,29 +210,28 @@ protected void onSubmit(AjaxRequestTarget target, Form form) {\n \n         resourceForm.add(addUserSchemaMappingBtn);\n \n-        mappingRoleSchemaView = new ListView(\"mappingsRoleSchema\",roleSchemas.getMappings()) {\n+        mappingRoleSchemaView = new ListView(\"mappingsRoleSchema\", roleSchemas.getMappings()) {\n \n             SchemaMappingTO mappingTO = null;\n \n             @Override\n             protected void populateItem(ListItem item) {\n-                mappingTO = (SchemaMappingTO)item.getDefaultModelObject();\n+                mappingTO = (SchemaMappingTO) item.getDefaultModelObject();\n+\n+                item.add(new AjaxCheckBox(\"toRemove\", new Model(new Boolean(\"\"))) {\n \n-                item.add(new AjaxCheckBox(\"toRemove\",new Model(new Boolean(\"\"))) {\n                     @Override\n                     protected void onUpdate(AjaxRequestTarget target) {\n                         int id = new Integer(getParent().getId());\n                         roleSchemas.getMappings().remove(id);\n                         target.addComponent(mappingRoleSchemaContainer);\n                     }\n                 });\n-                item.add(new UpdatingTextField(\"field\",new PropertyModel(mappingTO, \"field\"))\n-                        .setRequired(true));\n-                item.add(new UpdatingDropDownChoice(\"roleSchema\",new PropertyModel(mappingTO, \"roleSchema\"),roleSchemasList)\n-                        .setRequired(true));\n-                item.add(new UpdatingCheckBox(\"nullable\",new PropertyModel(mappingTO, \"nullable\")));\n-                item.add(new UpdatingCheckBox(\"accountId\",new PropertyModel(mappingTO, \"accountid\")));\n-                item.add(new UpdatingCheckBox(\"password\",new PropertyModel(mappingTO, \"password\")));\n+                item.add(new UpdatingTextField(\"field\", new PropertyModel(mappingTO, \"field\")).setRequired(true));\n+                item.add(new UpdatingDropDownChoice(\"roleSchema\", new PropertyModel(mappingTO, \"roleSchema\"), roleSchemasList).setRequired(true));\n+                item.add(new UpdatingCheckBox(\"nullable\", new PropertyModel(mappingTO, \"nullable\")));\n+                item.add(new UpdatingCheckBox(\"accountId\", new PropertyModel(mappingTO, \"accountid\")));\n+                item.add(new UpdatingCheckBox(\"password\", new PropertyModel(mappingTO, \"password\")));\n             }\n         };\n \n@@ -235,7 +241,7 @@ protected void onUpdate(AjaxRequestTarget target) {\n \n         resourceForm.add(mappingRoleSchemaContainer);\n \n-        addRoleSchemaMappingBtn = new AjaxButton(\"addRoleSchemaMappingBtn\",new Model(getString(\"add\"))) {\n+        addRoleSchemaMappingBtn = new AjaxButton(\"addRoleSchemaMappingBtn\", new Model(getString(\"add\"))) {\n \n             @Override\n             protected void onSubmit(AjaxRequestTarget target, Form form) {\n@@ -256,16 +262,16 @@ protected void onSubmit(AjaxRequestTarget target, Form form) {\n                 resourceTO = mergeSchemaLists(resourceTO);\n                 try {\n \n-                    if (createFlag) \n+                    if (createFlag)\n                         restClient.createResource(resourceTO);\n-                     else\n+                    else\n                         restClient.updateResource(resourceTO);\n \n-                     Resources callerPage = (Resources)basePage;\n-                     callerPage.setOperationResult(true);\n+                    Resources callerPage = (Resources) basePage;\n+                    callerPage.setOperationResult(true);\n+\n+                    window.close(target);\n \n-                     window.close(target);\n-                    \n                 } catch (Exception e) {\n                     error(getString(\"error\") + \":\" + e.getMessage());\n                 }\n@@ -280,10 +286,10 @@ protected void onError(AjaxRequestTarget target, Form form) {\n         resourceForm.add(submit);\n \n         resourceForm.add(new FeedbackPanel(\"feedback\").setOutputMarkupId(true));\n-        \n+\n         add(resourceForm);\n     }\n-    \n+\n     /**\n      * Set User and Role Schemas list for populating different views.\n      * @param schemaMappingTos\n@@ -292,21 +298,25 @@ public void setupSchemaLists(SchemaMappingTOs schemaMappingTos) {\n         userSchemas = new SchemaMappingTOs();\n         roleSchemas = new SchemaMappingTOs();\n \n+        SchemaType schemaType = null;\n+\n         if (schemaMappingTos != null)\n-            for(SchemaMappingTO schemaMappingTO: schemaMappingTos.getMappings()) {\n+            for (SchemaMappingTO schemaMappingTO :\n+                    schemaMappingTos.getMappings()) {\n+\n+                schemaType = schemaMappingTO.getSchemaType();\n \n-                if(schemaMappingTO.getRoleSchema() == null\n-                        && schemaMappingTO.getUserSchema() != null)\n+                if (SchemaType.UserSchema.equals(schemaType)) {\n                     userSchemas.addMapping(schemaMappingTO);\n+                }\n \n-                else if (schemaMappingTO.getUserSchema()== null\n-                        && schemaMappingTO.getRoleSchema()!= null)\n+                if (SchemaType.RoleSchema.equals(schemaType)) {\n                     roleSchemas.addMapping(schemaMappingTO);\n-\n+                }\n             }\n         else {\n-        userSchemas.addMapping(new SchemaMappingTO());\n-        roleSchemas.addMapping(new SchemaMappingTO());\n+            userSchemas.addMapping(new SchemaMappingTO());\n+            roleSchemas.addMapping(new SchemaMappingTO());\n         }\n     }\n \n@@ -322,10 +332,9 @@ public ResourceTO mergeSchemaLists(ResourceTO resourceTO) {\n         schemaMappingTOs.getMappings().addAll(roleSchemas.getMappings());\n \n         resourceTO.setMappings(schemaMappingTOs);\n-        \n+\n         return resourceTO;\n     }\n-\n     /**\n      * Extension class of TextField. It's purposed for storing values in the\n      * corresponding property model after pressing 'Add' button.\n@@ -343,7 +352,6 @@ public ResourceTO mergeSchemaLists(ResourceTO resourceTO) {\n //            } );\n //        }\n //    }\n-\n     /**\n      * Extension class of DropDownChoice. It's purposed for storing values in the\n      * corresponding property model after pressing 'Add' button.\n@@ -360,7 +368,6 @@ public ResourceTO mergeSchemaLists(ResourceTO resourceTO) {\n //            } );\n //        }\n //     }\n-\n     /**\n      * Extension class of CheckBox. It's purposed for storing values in the\n      * corresponding property model after pressing 'Add' button.\n@@ -376,4 +383,4 @@ public ResourceTO mergeSchemaLists(ResourceTO resourceTO) {\n //\n //        }\n //     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"bb281f914672a73b0d0afa411b25ae9e793dec45","filename":"console/src/main/java/org/syncope/console/pages/SchemaModalPage.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -19,10 +19,8 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.form.AjaxFormValidatingBehavior;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n-import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.RadioChoice;\n@@ -33,7 +31,7 @@\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.syncope.client.to.SchemaTO;\n import org.syncope.console.rest.SchemaRestClient;\n-import org.syncope.types.SchemaType;\n+import org.syncope.types.SchemaValueType;\n \n \n /**\n@@ -89,7 +87,7 @@ public SchemaModalPage(final BasePage basePage, final ModalWindow window,\n \n         validatorClass = new DropDownChoice(\"validatorClass\",validatorsList);\n \n-        type = new DropDownChoice(\"type\",Arrays.asList(SchemaType.values()));\n+        type = new DropDownChoice(\"type\",Arrays.asList(SchemaValueType.values()));\n         type.setRequired(true);\n \n         mandatory = new RadioChoice(\"mandatory\",Arrays.asList(new Boolean[]{true,false}));"},{"sha":"da1997d442671eb4b2e6c185d652d71c6c0c0a7a","filename":"core/src/main/java/org/syncope/core/persistence/DefaultContentLoader.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -89,14 +89,12 @@ public void contextInitialized(ServletContextEvent sce) {\n                     ResultSet.TYPE_SCROLL_SENSITIVE,\n                     ResultSet.CONCUR_READ_ONLY);\n \n-            resultSet = statement.executeQuery(\"SELECT * FROM \"\n-                    + SyncopeConfiguration.class.getSimpleName());\n+            resultSet = statement.executeQuery(\"SELECT * FROM \" + SyncopeConfiguration.class.getSimpleName());\n             resultSet.last();\n \n             existingData = resultSet.getRow() > 0;\n         } catch (SQLException e) {\n-            log.error(\"Could not access to table \"\n-                    + SyncopeConfiguration.class.getSimpleName(), e);\n+            log.error(\"Could not access to table \" + SyncopeConfiguration.class.getSimpleName(), e);\n \n             // Setting this to true make nothing to be done below\n             existingData = true;"},{"sha":"7c884247cacbab961c1c0a8aa650bcb9a39ffa4c","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":19,"deletions":7,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -41,8 +41,8 @@ public <T extends AbstractAttribute> T getAttribute(String schemaName) {\n                 result == null && itor.hasNext();) {\n \n             attribute = (T) itor.next();\n-            if (attribute.getSchema() != null\n-                    && schemaName.equals(attribute.getSchema().getName())) {\n+            if (attribute.getSchema() != null &&\n+                    schemaName.equals(attribute.getSchema().getName())) {\n \n                 result = attribute;\n             }\n@@ -61,8 +61,8 @@ public <T extends AbstractDerivedAttribute> T getDerivedAttribute(\n                 result == null && itor.hasNext();) {\n \n             derivedAttribute = (T) itor.next();\n-            if (derivedAttribute.getDerivedSchema() != null\n-                    && derivedSchemaName.equals(\n+            if (derivedAttribute.getDerivedSchema() != null &&\n+                    derivedSchemaName.equals(\n                     derivedAttribute.getDerivedSchema().getName())) {\n \n                 result = derivedAttribute;\n@@ -86,18 +86,30 @@ public boolean removeTargetResource(TargetResource targetResource) {\n     }\n \n     public Set<TargetResource> getTargetResources() {\n-        return targetResources == null \n+        return targetResources == null\n                 ? Collections.EMPTY_SET\n                 : targetResources;\n     }\n \n+    /**\n+     * Provide al inherited target resources.\n+     * This method must be implemented by all that beans that can be indirectly\n+     * associated to some target resources (SyncopeUser for example).\n+     * @return\n+     */\n+    public Set<TargetResource> getInheritedTargetResources() {\n+        return Collections.EMPTY_SET;\n+    }\n+\n     public void setResources(Set<TargetResource> resources) {\n         this.targetResources = resources;\n     }\n \n-    public abstract <T extends AbstractAttribute> boolean addAttribute(T attribute);\n+    public abstract <T extends AbstractAttribute> boolean addAttribute(\n+            T attribute);\n \n-    public abstract <T extends AbstractAttribute> boolean removeAttribute(T attribute);\n+    public abstract <T extends AbstractAttribute> boolean removeAttribute(\n+            T attribute);\n \n     public abstract List<? extends AbstractAttribute> getAttributes();\n "},{"sha":"349aca6dc2e779d371feb4dec6629e9fcf20a7bd","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":52,"deletions":24,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -14,51 +14,70 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import static javax.persistence.EnumType.STRING;\n-\n import java.lang.reflect.Constructor;\n import java.text.DecimalFormat;\n import java.text.Format;\n import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import static javax.persistence.EnumType.STRING;\n+\n import javax.persistence.Column;\n import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n+import javax.persistence.OneToMany;\n import javax.persistence.Transient;\n import org.syncope.core.persistence.validation.AttributeBasicValidator;\n import org.syncope.core.persistence.validation.AttributeValidator;\n-import org.syncope.types.SchemaType;\n+import org.syncope.types.SchemaValueType;\n \n @MappedSuperclass\n public abstract class AbstractSchema extends AbstractBaseBean {\n \n     @Id\n     private String name;\n+\n     @Column(nullable = false)\n     @Enumerated(STRING)\n-    private SchemaType type;\n+    private SchemaValueType type;\n+\n+    /**\n+     * All the mappings of the attribute schema.\n+     */\n+    @OneToMany(cascade = {CascadeType.MERGE, CascadeType.REFRESH},\n+    fetch = FetchType.EAGER)\n+    private List<SchemaMapping> mappings;\n+\n     /**\n      * Specify if the attribute should be stored on the local repository.\n      */\n     @Basic\n     private Character virtual;\n+\n     @Basic\n     private Character mandatory;\n+\n     @Basic\n     private Character multivalue;\n+\n     @Basic\n     private Character uniquevalue;\n+\n     @Column(nullable = true)\n     private String conversionPattern;\n+\n     @Column(nullable = true)\n     private String validatorClass;\n+\n     @Transient\n     private AttributeValidator validator;\n \n     public AbstractSchema() {\n-        type = SchemaType.String;\n+        type = SchemaValueType.String;\n         virtual = 'F';\n         mandatory = 'F';\n         multivalue = 'F';\n@@ -73,14 +92,36 @@ public void setName(String name) {\n         this.name = name;\n     }\n \n-    public SchemaType getType() {\n+    public SchemaValueType getType() {\n         return type;\n     }\n \n-    public void setType(SchemaType type) {\n+    public void setType(SchemaValueType type) {\n         this.type = type;\n     }\n \n+    public List<SchemaMapping> getMappings() {\n+        if (this.mappings == null)\n+            this.mappings = new ArrayList<SchemaMapping>();\n+\n+        return this.mappings;\n+    }\n+\n+    public void setMappings(List<SchemaMapping> mappings) {\n+        this.mappings = mappings;\n+    }\n+\n+    public boolean addMapping(SchemaMapping mapping) {\n+        if (this.mappings == null)\n+            this.mappings = new ArrayList<SchemaMapping>();\n+\n+        return this.mappings.contains(mapping) || this.mappings.add(mapping);\n+    }\n+\n+    public boolean removeMapping(SchemaMapping mapping) {\n+        return this.mappings == null || this.mappings.remove(mapping);\n+    }\n+\n     public boolean isVirtual() {\n         return virtual != null && virtual == 'T';\n     }\n@@ -127,9 +168,7 @@ public AttributeValidator getValidator() {\n                         (AttributeValidator) validatorConstructor.newInstance(\n                         this);\n             } catch (Exception e) {\n-                log.error(\"Could not instantiate validator of type \"\n-                        + getValidatorClass()\n-                        + \", reverting to AttributeBasicValidator\", e);\n+                log.error(\"Could not instantiate validator of type \" + getValidatorClass() + \", reverting to AttributeBasicValidator\", e);\n             }\n         }\n \n@@ -149,20 +188,17 @@ public void setValidatorClass(String validatorClass) {\n     }\n \n     public String getConversionPattern() {\n-        if (!getType().isConversionPatternNeeded()\n-                && log.isDebugEnabled()) {\n+        if (!getType().isConversionPatternNeeded() && log.isDebugEnabled()) {\n \n-            log.debug(\"Conversion pattern is not needed: \"\n-                    + this + \"'s type is \" + getType());\n+            log.debug(\"Conversion pattern is not needed: \" + this + \"'s type is \" + getType());\n         }\n \n         return conversionPattern;\n     }\n \n     public void setConversionPattern(String conversionPattern) {\n         if (!getType().isConversionPatternNeeded()) {\n-            log.warn(\"Conversion pattern will be ignored: \"\n-                    + \"this attribute type is \" + getType());\n+            log.warn(\"Conversion pattern will be ignored: \" + \"this attribute type is \" + getType());\n         }\n \n         this.conversionPattern = conversionPattern;\n@@ -221,12 +257,4 @@ public abstract <T extends AbstractDerivedSchema> boolean removeDerivedSchema(\n \n     public abstract void setDerivedSchemas(\n             List<? extends AbstractDerivedSchema> derivedSchemas);\n-\n-    public abstract boolean addMapping(SchemaMapping mapping);\n-\n-    public abstract boolean removeMapping(SchemaMapping mapping);\n-\n-    public abstract List<SchemaMapping> getMappings();\n-\n-    public abstract void setMappings(List<SchemaMapping> mappings);\n }"},{"sha":"29ca2996e178b123cde52fd52f8b2238666eb681","filename":"core/src/main/java/org/syncope/core/persistence/beans/SchemaMapping.java","status":"modified","additions":27,"deletions":41,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -14,67 +14,61 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import static javax.persistence.EnumType.STRING;\n+\n import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n+import javax.persistence.Enumerated;\n import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n-import org.syncope.core.persistence.beans.membership.MembershipSchema;\n-import org.syncope.core.persistence.beans.role.RoleSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.types.SchemaType;\n \n @Entity\n public class SchemaMapping extends AbstractBaseBean {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n-    /**\n-     * Attribute schema to be mapped.\n-     * Consider that we can associate tha same attribute schema more\n-     * than once, with different aliases, to different resource attributes.\n-     */\n-    @ManyToOne(fetch = FetchType.EAGER)\n-    private UserSchema userSchema;\n-    /**\n-     * Attribute schema to be mapped.\n-     * Consider that we can associate tha same attribute schema more\n-     * than once, with different aliases, to different resource attributes.\n-     */\n-    @ManyToOne(fetch = FetchType.EAGER)\n-    private RoleSchema roleSchema;\n-    /**\n-     * Attribute schema to be mapped.\n-     * Consider that we can associate tha same attribute schema more\n-     * than once, with different aliases, to different resource attributes.\n-     */\n-    @ManyToOne(fetch = FetchType.EAGER)\n-    private MembershipSchema membershipSchema;\n+\n+    @Column(nullable = false)\n+    String schemaName;\n+\n+    @Column(nullable = false)\n+    @Enumerated(STRING)\n+    SchemaType schemaType;\n+\n     /**\n      * Target resource that has fields to be mapped over user attribute schemas.\n      */\n-    @ManyToOne(fetch = FetchType.EAGER)\n+    @ManyToOne(fetch = FetchType.EAGER,\n+    cascade = {CascadeType.REFRESH, CascadeType.MERGE})\n     private TargetResource resource;\n+\n     /**\n      * Target resource's field to be mapped.\n      */\n     @Column(nullable = false)\n     private String field;\n+\n     /**\n      * Specify if the mapped target resource's field is the key.\n      */\n     @Column(nullable = false)\n     @Basic\n     private Character accountid;\n+\n     /**\n      * Specify if the mapped target resource's field is the password.\n      */\n     @Column(nullable = false)\n     @Basic\n     private Character password;\n+\n     /**\n      * Specify if the mapped target resource's field is nullable.\n      */\n@@ -132,27 +126,19 @@ public void setResource(TargetResource resource) {\n         this.resource = resource;\n     }\n \n-    public RoleSchema getRoleSchema() {\n-        return roleSchema;\n-    }\n-\n-    public void setRoleSchema(RoleSchema roleSchema) {\n-        this.roleSchema = roleSchema;\n-    }\n-\n-    public UserSchema getUserSchema() {\n-        return userSchema;\n+    public String getSchemaName() {\n+        return schemaName;\n     }\n \n-    public void setUserSchema(UserSchema userSchema) {\n-        this.userSchema = userSchema;\n+    public void setSchemaName(String schemaName) {\n+        this.schemaName = schemaName;\n     }\n \n-    public MembershipSchema getMembershipSchema() {\n-        return membershipSchema;\n+    public SchemaType getSchemaType() {\n+        return schemaType;\n     }\n \n-    public void setMembershipSchema(MembershipSchema membershipSchema) {\n-        this.membershipSchema = membershipSchema;\n+    public void setSchemaType(SchemaType schemaType) {\n+        this.schemaType = schemaType;\n     }\n }"},{"sha":"cb29048d946c1a7342d88fad6b2aa7351c33ac6e","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":28,"deletions":8,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -18,7 +18,9 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n@@ -36,28 +38,49 @@ public class TargetResource extends AbstractBaseBean {\n      */\n     @Id\n     private String name;\n+\n     /**\n      * The resource type is identified by the associated connector.\n      */\n     @ManyToOne(fetch = FetchType.EAGER)\n     private ConnectorInstance connector;\n+\n     /**\n      * Users associated to this resource.\n      */\n-    @ManyToMany(fetch = FetchType.EAGER)\n+    @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"targetResources\")\n     private Set<SyncopeUser> users;\n+\n     /**\n      * Roles associated to this resource.\n      */\n-    @ManyToMany(fetch = FetchType.EAGER)\n+    @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"targetResources\")\n     private Set<SyncopeRole> roles;\n+\n     /**\n      * Attribute mappings.\n      */\n-    @OneToMany(cascade = {CascadeType.REFRESH, CascadeType.MERGE},\n+    @OneToMany(cascade = {CascadeType.MERGE, CascadeType.REFRESH},\n     mappedBy = \"resource\")\n     private List<SchemaMapping> mappings;\n \n+    @Column(nullable = false)\n+    @Basic\n+    private Character forceMandatoryConstraint;\n+\n+    public TargetResource(){\n+        this.forceMandatoryConstraint = 'F';\n+    }\n+\n+    public boolean isForceMandatoryConstraint() {\n+        return forceMandatoryConstraint != null &&\n+                forceMandatoryConstraint == 'T';\n+    }\n+\n+    public void setForceMandatoryConstraint(boolean forceMandatoryConstraint) {\n+        this.forceMandatoryConstraint = forceMandatoryConstraint ? 'T' : 'F';\n+    }\n+\n     public ConnectorInstance getConnector() {\n         return connector;\n     }\n@@ -74,17 +97,14 @@ public List<SchemaMapping> getMappings() {\n     }\n \n     public boolean removeMapping(SchemaMapping mapping) {\n-        if (this.mappings == null) {\n-            return true;\n-        }\n-        return this.mappings.remove(mapping);\n+        return this.mappings == null || this.mappings.remove(mapping);\n     }\n \n     public boolean addMapping(SchemaMapping mapping) {\n         if (this.mappings == null) {\n             this.mappings = new ArrayList<SchemaMapping>();\n         }\n-        return this.mappings.add(mapping);\n+        return this.mappings.contains(mapping) || this.mappings.add(mapping);\n     }\n \n     public void setMappings(List<SchemaMapping> mappings) {"},{"sha":"ea202e09bfc20390fc1a652ccf0d6e7be8e660fd","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipSchema.java","status":"modified","additions":1,"deletions":39,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -16,34 +16,25 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.SchemaMapping;\n \n @Entity\n public class MembershipSchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")\n     private List<MembershipAttribute> attributes;\n+\n     @ManyToMany(mappedBy = \"schemas\")\n     private List<MembershipDerivedSchema> derivedSchemas;\n-    /**\n-     * All the mappings of the attribute schema.\n-     */\n-    @OneToMany(cascade = CascadeType.MERGE,\n-    fetch = FetchType.EAGER, mappedBy = \"membershipSchema\")\n-    private List<SchemaMapping> mappings;\n \n     public MembershipSchema() {\n         attributes = new ArrayList<MembershipAttribute>();\n         derivedSchemas = new ArrayList<MembershipDerivedSchema>();\n-        mappings = new ArrayList<SchemaMapping>();\n     }\n \n     @Override\n@@ -91,33 +82,4 @@ public void setDerivedSchemas(\n \n         this.derivedSchemas = (List<MembershipDerivedSchema>) derivedSchemas;\n     }\n-\n-    @Override\n-    public List<SchemaMapping> getMappings() {\n-        if (this.mappings == null) {\n-            this.mappings = new ArrayList<SchemaMapping>();\n-        }\n-        return this.mappings;\n-    }\n-\n-    @Override\n-    public void setMappings(List<SchemaMapping> mappings) {\n-        this.mappings = mappings;\n-    }\n-\n-    @Override\n-    public boolean addMapping(SchemaMapping mapping) {\n-        if (this.mappings == null) {\n-            this.mappings = new ArrayList<SchemaMapping>();\n-        }\n-        return this.mappings.add(mapping);\n-    }\n-\n-    @Override\n-    public boolean removeMapping(SchemaMapping mapping) {\n-        if (this.mappings == null) {\n-            return true;\n-        }\n-        return this.mappings.remove(mapping);\n-    }\n }"},{"sha":"46a0fcc702af70678ae17d4151f4e512ac395f0f","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleSchema.java","status":"modified","additions":1,"deletions":28,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -16,32 +16,25 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.SchemaMapping;\n \n @Entity\n public class RoleSchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")\n     private List<RoleAttribute> attributes;\n+\n     @ManyToMany(mappedBy = \"schemas\")\n     private List<RoleDerivedSchema> derivedSchemas;\n-    /**\n-     * All the mappings of the attribute schema.\n-     */\n-    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"roleSchema\")\n-    private List<SchemaMapping> mappings;\n \n     public RoleSchema() {\n         attributes = new ArrayList<RoleAttribute>();\n         derivedSchemas = new ArrayList<RoleDerivedSchema>();\n-        mappings = new ArrayList<SchemaMapping>();\n     }\n \n     @Override\n@@ -89,24 +82,4 @@ public void setDerivedSchemas(\n \n         this.derivedSchemas = (List<RoleDerivedSchema>) derivedSchemas;\n     }\n-\n-    @Override\n-    public List<SchemaMapping> getMappings() {\n-        return mappings;\n-    }\n-\n-    @Override\n-    public void setMappings(List<SchemaMapping> mappings) {\n-        this.mappings = mappings;\n-    }\n-\n-    @Override\n-    public boolean addMapping(SchemaMapping mapping) {\n-        return mappings.add(mapping);\n-    }\n-\n-    @Override\n-    public boolean removeMapping(SchemaMapping mapping) {\n-        return mappings.remove(mapping);\n-    }\n }"},{"sha":"1baf5a17e52608045a2ab750dd687cc66e1a3d5b","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -45,19 +45,27 @@ public class SyncopeRole extends AbstractAttributable {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n+\n     private String name;\n+\n     @ManyToOne(optional = true)\n     private SyncopeRole parent;\n+\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"syncopeRole\")\n     private List<Membership> memberships;\n+\n     @ManyToMany(fetch = FetchType.LAZY)\n     private Set<Entitlement> entitlements;\n+\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     private List<RoleAttribute> attributes;\n+\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     private List<RoleDerivedAttribute> derivedAttributes;\n+\n     @Basic\n     private Character inheritAttributes;\n+\n     @Basic\n     private Character inheritDerivedAttributes;\n \n@@ -187,8 +195,7 @@ public void setInheritAttributes(boolean inheritAttributes) {\n     }\n \n     public boolean isInheritDerivedAttributes() {\n-        return inheritDerivedAttributes != null\n-                && inheritDerivedAttributes == 'T';\n+        return inheritDerivedAttributes != null && inheritDerivedAttributes == 'T';\n     }\n \n     public void setInheritDerivedAttributes(boolean inheritDerivedAttributes) {"},{"sha":"91f5e9dd1d14394e2070d1fd2cb6f530770ac17c","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":36,"deletions":4,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -40,6 +40,7 @@\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n \n@@ -55,22 +56,30 @@ public class SyncopeUser extends AbstractAttributable {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n+\n     @Basic\n     @Lob\n     private byte[] passwordKeyPair;\n+\n     @Basic\n     @Lob\n     private byte[] password;\n+\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"syncopeUser\")\n     private List<Membership> memberships;\n+\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     private List<UserAttribute> attributes;\n+\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     private List<UserDerivedAttribute> derivedAttributes;\n+\n     @Column(nullable = true)\n     private Long workflowId;\n+\n     @Lob\n     private String token;\n+\n     @Temporal(TemporalType.TIMESTAMP)\n     private Date tokenExpireTime;\n \n@@ -85,11 +94,11 @@ public Long getId() {\n     }\n \n     public boolean addMembership(Membership membership) {\n-        return memberships.add(membership);\n+        return memberships.contains(membership) || memberships.add(membership);\n     }\n \n     public boolean removeMembership(Membership membership) {\n-        return memberships.remove(membership);\n+        return memberships == null || memberships.remove(membership);\n     }\n \n     public Membership getMembership(Long syncopeRoleId) {\n@@ -100,8 +109,7 @@ public Membership getMembership(Long syncopeRoleId) {\n                 result == null && itor.hasNext();) {\n \n             membership = itor.next();\n-            if (membership.getSyncopeRole() != null\n-                    && syncopeRoleId.equals(\n+            if (membership.getSyncopeRole() != null && syncopeRoleId.equals(\n                     membership.getSyncopeRole().getId())) {\n \n                 result = membership;\n@@ -129,6 +137,30 @@ public Set<SyncopeRole> getRoles() {\n         return result;\n     }\n \n+    @Override\n+    public Set<TargetResource> getInheritedTargetResources() {\n+        Set<TargetResource> inheritedTargetResources =\n+                new HashSet<TargetResource>();\n+\n+        SyncopeRole role = null;\n+\n+        for (Membership membership : memberships) {\n+            role = membership.getSyncopeRole();\n+\n+            try {\n+\n+                inheritedTargetResources.addAll(role.getTargetResources());\n+\n+            } catch (Throwable t) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Invalid role \" + role, t);\n+                }\n+            }\n+        }\n+\n+        return inheritedTargetResources;\n+    }\n+\n     public String getPassword() {\n         if (password == null || passwordKeyPair == null) {\n             return null;"},{"sha":"866a7d2832186bf889da6b999753a05eba17de80","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserAttribute.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -32,8 +32,10 @@ public class UserAttribute extends AbstractAttribute {\n \n     @ManyToOne(fetch = FetchType.EAGER)\n     private SyncopeUser owner;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     private UserSchema schema;\n+\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n     private List<UserAttributeValue> attributeValues;"},{"sha":"bf456093bf8f591c15d9cf3da9ea70ab87d69ec1","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserDerivedSchema.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedSchema.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -34,6 +34,7 @@ public class UserDerivedSchema extends AbstractDerivedSchema {\n     @ManyToMany\n     @JoinTable(name = \"UserSchemaDerivation\")\n     private Set<UserSchema> schemas;\n+\n     @OneToMany(mappedBy = \"derivedSchema\")\n     private List<UserDerivedAttribute> derivedAttributes;\n "},{"sha":"7dec1bb0904f2db3b1b0323b250a9c7df1149ae5","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserSchema.java","status":"modified","additions":1,"deletions":37,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -16,32 +16,25 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.SchemaMapping;\n \n @Entity\n public class UserSchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")\n     private List<UserAttribute> attributes;\n+\n     @ManyToMany(mappedBy = \"schemas\")\n     private List<UserDerivedSchema> derivedSchemas;\n-    /**\n-     * All the mappings of the attribute schema.\n-     */\n-    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"userSchema\")\n-    private List<SchemaMapping> mappings;\n \n     public UserSchema() {\n         attributes = new ArrayList<UserAttribute>();\n         derivedSchemas = new ArrayList<UserDerivedSchema>();\n-        mappings = new ArrayList<SchemaMapping>();\n     }\n \n     @Override\n@@ -89,33 +82,4 @@ public void setDerivedSchemas(\n \n         this.derivedSchemas = (List<UserDerivedSchema>) derivedSchemas;\n     }\n-\n-    @Override\n-    public List<SchemaMapping> getMappings() {\n-        if (this.mappings == null) {\n-            this.mappings = new ArrayList<SchemaMapping>();\n-        }\n-        return this.mappings;\n-    }\n-\n-    @Override\n-    public void setMappings(List<SchemaMapping> mappings) {\n-        this.mappings = mappings;\n-    }\n-\n-    @Override\n-    public boolean addMapping(SchemaMapping mapping) {\n-        if (this.mappings == null) {\n-            this.mappings = new ArrayList<SchemaMapping>();\n-        }\n-        return this.mappings.add(mapping);\n-    }\n-\n-    @Override\n-    public boolean removeMapping(SchemaMapping mapping) {\n-        if (this.mappings == null) {\n-            return true;\n-        }\n-        return this.mappings.remove(mapping);\n-    }\n }"},{"sha":"83ed4bb32a8e29c48fb14e794ed831aedf639346","filename":"core/src/main/java/org/syncope/core/persistence/dao/SchemaDAO.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -15,7 +15,10 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n+import java.util.Set;\n import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.validation.MultiUniqueValueException;\n \n public interface SchemaDAO extends DAO {\n@@ -27,4 +30,18 @@ public interface SchemaDAO extends DAO {\n     <T extends AbstractSchema> T save(T schema) throws MultiUniqueValueException;\n \n     <T extends AbstractSchema> void delete(String name, Class<T> reference);\n+\n+    public SchemaMapping findMapping(Long id);\n+\n+    public List<SchemaMapping> findAllMappings();\n+\n+    public SchemaMapping saveMapping(SchemaMapping mapping);\n+\n+    public void removeMapping(Long mappingId);\n+\n+    public boolean isMandatoryOnResource(\n+            AbstractSchema schema, TargetResource resource);\n+\n+    public boolean isMandatoryOnResource(\n+            AbstractSchema schema, Set<TargetResource> resources);\n }"},{"sha":"4444ba0fe043f834e4b3536275873ae3a18eebf7","filename":"core/src/main/java/org/syncope/core/persistence/dao/SchemaMappingDAO.java","status":"removed","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13279da7c480afbb5490238c406bb81ebce06cce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaMappingDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13279da7c480afbb5490238c406bb81ebce06cce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaMappingDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaMappingDAO.java?ref=13279da7c480afbb5490238c406bb81ebce06cce","patch":"@@ -1,29 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.persistence.dao;\n-\n-import java.util.List;\n-import org.syncope.core.persistence.beans.SchemaMapping;\n-\n-public interface SchemaMappingDAO extends DAO {\n-\n-    SchemaMapping find(Long id);\n-\n-    List<SchemaMapping> findAll();\n-\n-    SchemaMapping save(SchemaMapping mapping);\n-\n-    void delete(Long id);\n-}"},{"sha":"404207f84b1a192329e0cb9cdb4968e5846e782e","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractDAOImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -30,6 +30,7 @@ public abstract class AbstractDAOImpl implements DAO {\n \n     protected static final Logger log =\n             LoggerFactory.getLogger(AbstractDAOImpl.class);\n+\n     @PersistenceContext(type = PersistenceContextType.EXTENDED)\n     protected EntityManager entityManager;\n "},{"sha":"276d23722d07418d7d7498b0af62e62d18bdb432","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":13,"deletions":11,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n+import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import javax.persistence.Query;\n@@ -26,14 +27,14 @@\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.ResourceDAO;\n-import org.syncope.core.persistence.dao.SchemaMappingDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n \n @Repository\n public class ResourceDAOImpl extends AbstractDAOImpl\n         implements ResourceDAO {\n \n     @Autowired\n-    private SchemaMappingDAO schemaMappingDAO;\n+    private SchemaDAO schemaDAO;\n \n     @Override\n     @Transactional(readOnly = true)\n@@ -58,18 +59,19 @@ public TargetResource save(TargetResource resource) {\n     public void delete(String name) {\n \n         TargetResource resource = find(name);\n-        if (resource == null) {\n-            return;\n-        }\n+        if (resource == null) return;\n \n+        // --------------------------------------\n+        // Remove all mappings\n+        // --------------------------------------\n         List<SchemaMapping> mappings = resource.getMappings();\n-        if (mappings != null) {\n-            for (SchemaMapping mapping : mappings) {\n-                mapping.setResource(null);\n-                schemaMappingDAO.delete(mapping.getId());\n-            }\n+        resource.setMappings(Collections.EMPTY_LIST);\n+\n+        for (SchemaMapping mapping : mappings) {\n+            mapping.setResource(null);\n+            schemaDAO.removeMapping(mapping.getId());\n         }\n-        resource.setMappings(null);\n+        // --------------------------------------\n \n         Set<SyncopeUser> users = resource.getUsers();\n         if (users != null && !users.isEmpty()) {"},{"sha":"2331a014dfdd31975dba798126f03edc7ca74046","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":145,"deletions":20,"changes":165,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -16,6 +16,7 @@\n \n import java.util.Collections;\n import java.util.List;\n+import java.util.Set;\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -24,22 +25,22 @@\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.membership.MembershipSchema;\n-import org.syncope.core.persistence.beans.role.RoleSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.dao.AttributeDAO;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.SchemaMappingDAO;\n import org.syncope.core.persistence.validation.MultiUniqueValueException;\n+import org.syncope.types.SchemaType;\n \n @Repository\n public class SchemaDAOImpl extends AbstractDAOImpl\n         implements SchemaDAO {\n \n     @Autowired\n     private AttributeDAO attributeDAO;\n+\n     @Autowired\n-    private SchemaMappingDAO schemaMappingDAO;\n+    private ResourceDAO resourceDAO;\n \n     @Override\n     @Transactional(readOnly = true)\n@@ -71,13 +72,22 @@ public <T extends AbstractSchema> void delete(\n             String name, Class<T> reference) {\n \n         T schema = find(name, reference);\n-        if (schema == null) {\n-            return;\n-        }\n \n-        for (AbstractDerivedSchema derivedSchema : schema.getDerivedSchemas()) {\n+        if (schema == null) return;\n+\n+        // --------------------------------------\n+        // Remove all mappings\n+        // --------------------------------------\n+        List<SchemaMapping> mappings = schema.getMappings();\n+        schema.setMappings(Collections.EMPTY_LIST);\n+\n+        for (SchemaMapping mapping : mappings)\n+            removeMapping(mapping.getId());\n+        // --------------------------------------\n+\n+        for (AbstractDerivedSchema derivedSchema : schema.getDerivedSchemas())\n             derivedSchema.removeSchema(schema);\n-        }\n+\n         schema.setDerivedSchemas(Collections.EMPTY_LIST);\n \n         for (AbstractAttribute attribute : schema.getAttributes()) {\n@@ -86,21 +96,136 @@ public <T extends AbstractSchema> void delete(\n         }\n         schema.setAttributes(Collections.EMPTY_LIST);\n \n-        for (SchemaMapping schemaMapping : schema.getMappings()) {\n-            if (schema instanceof UserSchema) {\n-                schemaMapping.setUserSchema(null);\n+        entityManager.remove(schema);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public SchemaMapping findMapping(Long id) {\n+        return entityManager.find(SchemaMapping.class, id);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<SchemaMapping> findAllMappings() {\n+        Query query =\n+                entityManager.createQuery(\"SELECT e FROM SchemaMapping e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public SchemaMapping saveMapping(SchemaMapping mapping) {\n+        return entityManager.merge(mapping);\n+    }\n+\n+    @Override\n+    public void removeMapping(Long mappingId) {\n+\n+        // Get mapping object\n+        SchemaMapping mapping = findMapping(mappingId);\n+\n+        if (mapping == null) return;\n+\n+        // --------------------------------------\n+        // Synchronize schema\n+        // --------------------------------------\n+        String schemaName = mapping.getSchemaName();\n+        SchemaType schemaType = mapping.getSchemaType();\n+\n+        try {\n+            // check for schema type\n+            schemaType.getSchemaType().asSubclass(AbstractSchema.class);\n+\n+            /**\n+             * Schema type could be:\n+             * * UserSchema\n+             * * RoleSchema\n+             * * MembershipSchema\n+             */\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Schema type \" + schemaType.getClassName());\n             }\n-            if (schema instanceof RoleSchema) {\n-                schemaMapping.setRoleSchema(null);\n+            AbstractSchema schema = find(schemaName, schemaType.getSchemaType());\n+\n+            if (schema != null)\n+                schema.removeMapping(mapping);\n+\n+        } catch (ClassCastException e) {\n+            /**\n+             * Schema type could be:\n+             * * AccountId\n+             * * Password\n+             */\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Wrong schema type \" + schemaType.getClassName());\n             }\n-            if (schema instanceof MembershipSchema) {\n-                schemaMapping.setMembershipSchema(null);\n+        }\n+        // --------------------------------------\n+\n+        // --------------------------------------\n+        // Synchronize resource\n+        // --------------------------------------\n+        TargetResource resource =\n+                resourceDAO.find(mapping.getResource().getName());\n+\n+        if (resource != null)\n+            resource.removeMapping(mapping);\n+\n+        mapping.setResource(null);\n+        // --------------------------------------\n+\n+        // Remove mapping\n+        entityManager.remove(mapping);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public boolean isMandatoryOnResource(\n+            AbstractSchema schema, TargetResource resource) {\n+\n+        Query query = entityManager.createQuery(\n+                \"SELECT e \" +\n+                \"FROM SchemaMapping e \" +\n+                \"WHERE e.schemaName='\" + schema.getName() + \"' \" +\n+                \"AND e.resource.name='\" + resource.getName() + \"' \" +\n+                \"AND e.nullable='F'\");\n+\n+        return schema.isMandatory() ||\n+                (resource.isForceMandatoryConstraint() &&\n+                !query.getResultList().isEmpty());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public boolean isMandatoryOnResource(\n+            AbstractSchema schema, Set<TargetResource> resources) {\n+\n+        StringBuilder queryBuilder = new StringBuilder();\n+\n+        for (TargetResource resource : resources) {\n+            if (resource.isForceMandatoryConstraint()) {\n+\n+                queryBuilder.append(\n+                        (queryBuilder.length() > 0 ? \" OR \" : \"\") +\n+                        \"e.resource.name='\" + resource.getName() + \"'\");\n+\n             }\n+        }\n+\n+        Query query = null;\n+\n+        if (queryBuilder.length() > 0) {\n+\n+            query = entityManager.createQuery(\n+                    \"SELECT e \" +\n+                    \"FROM SchemaMapping e \" +\n+                    \"WHERE e.schemaName='\" + schema.getName() + \"' \" +\n+                    \"AND (\" + queryBuilder.toString() + \") \" +\n+                    \"AND e.nullable='F'\");\n \n-            schemaMappingDAO.delete(schemaMapping.getId());\n         }\n-        schema.setMappings(Collections.EMPTY_LIST);\n \n-        entityManager.remove(schema);\n+        return schema.isMandatory() ||\n+                (query != null && !query.getResultList().isEmpty());\n     }\n }"},{"sha":"ab9491908a5307373da8d630c1618f4f86aab5f5","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaMappingDAOImpl.java","status":"removed","additions":0,"deletions":81,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13279da7c480afbb5490238c406bb81ebce06cce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaMappingDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13279da7c480afbb5490238c406bb81ebce06cce/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaMappingDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaMappingDAOImpl.java?ref=13279da7c480afbb5490238c406bb81ebce06cce","patch":"@@ -1,81 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.persistence.dao.impl;\n-\n-import java.util.List;\n-import javax.persistence.Query;\n-import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.TargetResource;\n-import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.membership.MembershipSchema;\n-import org.syncope.core.persistence.beans.role.RoleSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n-import org.syncope.core.persistence.dao.SchemaMappingDAO;\n-\n-@Repository\n-public class SchemaMappingDAOImpl extends AbstractDAOImpl\n-        implements SchemaMappingDAO {\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public SchemaMapping find(Long id) {\n-        return entityManager.find(SchemaMapping.class, id);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<SchemaMapping> findAll() {\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM SchemaMapping e\");\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public SchemaMapping save(SchemaMapping mapping) {\n-        return entityManager.merge(mapping);\n-    }\n-\n-    @Override\n-    public void delete(Long id) {\n-        SchemaMapping mapping = find(id);\n-\n-        RoleSchema roleSchema = mapping.getRoleSchema();\n-        if (roleSchema != null && roleSchema.getMappings() != null) {\n-            roleSchema.getMappings().remove(mapping);\n-        }\n-        mapping.setRoleSchema(null);\n-\n-        UserSchema userSchema = mapping.getUserSchema();\n-        if (userSchema != null && userSchema.getMappings() != null) {\n-            userSchema.getMappings().remove(mapping);\n-        }\n-        mapping.setUserSchema(null);\n-\n-        MembershipSchema membershipSchema = mapping.getMembershipSchema();\n-        if (membershipSchema != null && membershipSchema.getMappings() != null) {\n-            membershipSchema.getMappings().remove(mapping);\n-        }\n-        mapping.setMembershipSchema(null);\n-\n-        TargetResource resource = mapping.getResource();\n-        if (resource != null && resource.getMappings() != null) {\n-            resource.getMappings().remove(mapping);\n-        }\n-        mapping.setResource(null);\n-\n-        entityManager.remove(mapping);\n-    }\n-}"},{"sha":"03d080bd7cfa6cac934cfdfed8a9c38870f3784f","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":118,"deletions":44,"changes":162,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -28,21 +28,28 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.ConfigurableApplicationContext;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UserAttribute;\n import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.propagation.ResourceOperations.Type;\n import org.syncope.core.persistence.util.ApplicationContextManager;\n import org.syncope.types.SchemaType;\n+import org.syncope.types.SchemaValueType;\n \n public class PropagationManager {\n \n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+\n     private static final Logger log =\n             LoggerFactory.getLogger(PropagationManager.class);\n \n@@ -147,8 +154,8 @@ private Set<String> provision(SyncopeUser user,\n         // synchronous propagation ...\n         if (log.isDebugEnabled()) {\n             log.debug(\n-                    \"Synchronous provisioning of \"\n-                    + syncOperations + \" with user \" + user);\n+                    \"Synchronous provisioning of \" + syncOperations +\n+                    \" with user \" + user);\n         }\n \n         for (Type type : ResourceOperations.Type.values()) {\n@@ -160,21 +167,21 @@ private Set<String> provision(SyncopeUser user,\n \n                 } catch (Throwable t) {\n                     log.error(\n-                            \"Exception during provision on resource \"\n-                            + resource.getName(), t);\n+                            \"Exception during provision on resource \" +\n+                            resource.getName(), t);\n \n                     throw new PropagationException(\n-                            \"Exception during provision on resource \"\n-                            + resource.getName(), resource.getName(), t);\n+                            \"Exception during provision on resource \" +\n+                            resource.getName(), resource.getName(), t);\n                 }\n             }\n         }\n \n         // asynchronous propagation ...\n         if (log.isDebugEnabled()) {\n             log.debug(\n-                    \"Asynchronous provisioning of \"\n-                    + asyncOperations + \" with user \" + user);\n+                    \"Asynchronous provisioning of \" + asyncOperations +\n+                    \" with user \" + user);\n         }\n \n         for (Type type : ResourceOperations.Type.values()) {\n@@ -186,15 +193,16 @@ private Set<String> provision(SyncopeUser user,\n \n                 } catch (Throwable t) {\n                     log.error(\n-                            \"Exception during provision on resource \"\n-                            + resource.getName(), t);\n+                            \"Exception during provision on resource \" +\n+                            resource.getName(), t);\n                 }\n             }\n         }\n \n         if (log.isDebugEnabled()) {\n             log.debug(\n-                    \"Provisioned \" + provisioned + \" with user \" + user.getId());\n+                    \"Provisioned \" + provisioned +\n+                    \" with user \" + user.getId());\n         }\n \n         return provisioned;\n@@ -212,15 +220,21 @@ private Set<String> provision(SyncopeUser user,\n     private void propagate(SyncopeUser user, TargetResource resource, Type type)\n             throws NoSuchBeanDefinitionException, IllegalStateException {\n \n+        if (log.isDebugEnabled()) {\n+            log.debug(\n+                    \"\\nPropagation of user \" + user +\n+                    \"\\nAttributes: \" + user.getAttributes());\n+        }\n+\n         ConnectorInstance connectorInstance = resource.getConnector();\n \n         ConnectorFacade connector =\n                 getConnectorFacade(connectorInstance.getId().toString());\n \n         if (connector == null) {\n             log.error(\n-                    \"Connector instance bean \"\n-                    + connectorInstance.getId().toString() + \" not found\");\n+                    \"Connector instance bean \" +\n+                    connectorInstance.getId().toString() + \" not found\");\n \n             throw new NoSuchBeanDefinitionException(\n                     \"Connector instance bean not found\");\n@@ -235,7 +249,7 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n         // set of user attributes\n         Set<Attribute> attrs = new HashSet<Attribute>();\n \n-        // cast to be applied on SchemaType\n+        // cast to be applied on SchemaValueType\n         Class castToBeApplied = null;\n \n         // account id\n@@ -247,55 +261,104 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n         Set objValues = null;\n \n         // syncope attribute schema name\n-        String schema = null;\n+        String schemaName = null;\n+        // schema type\n+        SchemaType schemaType = null;\n+\n         // syncope user attribute\n         UserAttribute userAttribute = null;\n         // syncope user attribute schema type\n-        SchemaType schemaType = null;\n+        SchemaValueType schemaValueType = null;\n         // syncope user attribute values\n         List<UserAttributeValue> values = null;\n \n+        //SchemaDAO schemaDAO = getSchemaDAO();\n+\n         for (SchemaMapping mapping : mappings) {\n \n             try {\n                 // get field name on target resource\n                 field = mapping.getField();\n \n                 // get schema name on syncope\n-                schema = mapping.getUserSchema().getName();\n-\n-                // get defined type for user attribute\n-                schemaType = mapping.getUserSchema().getType();\n+                schemaName = mapping.getSchemaName();\n+                schemaType = mapping.getSchemaType();\n \n                 if (log.isDebugEnabled()) {\n                     log.debug(\n-                            \"\\nDefine mapping for: \"\n-                            + \"\\n* Field \" + field\n-                            + \"\\n* is accountId \" + mapping.isAccountid()\n-                            + \"\\n* is password \" + mapping.isPassword()\n-                            + \"\\n* is nullable \" + mapping.isNullable()\n-                            + \"\\n* Schema \" + schema\n-                            + \"\\n* Type \" + schemaType.getClassName());\n+                            \"Process schema \" + schemaName +\n+                            \"(\" + schemaType.getClassName() + \").\");\n+                }\n+\n+                AbstractSchema schema = null;\n+\n+                try {\n+                    // check for schema or constants (AccountId/Password)\n+                    schemaType.getSchemaType().asSubclass(AbstractSchema.class);\n+\n+                    schema = schemaDAO.find(schemaName, schemaType.getSchemaType());\n+                } catch (ClassCastException e) {\n+                    // ignore exception ... check for AccountId or Password\n+                    if (log.isDebugEnabled())\n+                        log.debug(\"Wrong schema type \" +\n+                                schemaType.getClassName());\n                 }\n \n-                // get user attribute object\n-                userAttribute = user.getAttribute(schema);\n+                if (schema != null) {\n+                    // get defined type for user attribute\n+                    schemaValueType = schema.getType();\n+\n+                    // get user attribute object\n+                    userAttribute = user.getAttribute(schemaName);\n+\n+                    values = userAttribute != null\n+                            ? userAttribute.getAttributeValues()\n+                            : Collections.EMPTY_LIST;\n \n-                if (userAttribute == null) {\n-                    throw new Exception(\n-                            \"Invalid user attribute \" + userAttribute);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\n+                                \"\\nRetrieved attribute \" + userAttribute +\n+                                \"\\n* Schema \" + schemaName +\n+                                \"\\n* Schema type \" + schemaType.getClassName() +\n+                                \"\\n* Attribute values \" + values);\n+                    }\n+\n+                } else {\n+                    schemaValueType = SchemaValueType.String;\n+\n+                    UserAttributeValue userAttributeValue =\n+                            new UserAttributeValue();\n+\n+                    userAttributeValue.setStringValue(\n+                            SchemaType.AccountId.equals(schemaType)\n+                            ? user.getId().toString() : password);\n+\n+                    values = Collections.singletonList(userAttributeValue);\n+                }\n+\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\n+                            \"\\nDefine mapping for: \" +\n+                            \"\\n* Field \" + field +\n+                            \"\\n* is accountId \" + mapping.isAccountid() +\n+                            \"\\n* is password \" + (mapping.isPassword() ||\n+                            schemaType.equals(SchemaType.Password)) +\n+                            \"\\n* is nullable \" + mapping.isNullable() +\n+                            \"\\n* Schema \" + schemaName +\n+                            \"\\n* SchemaType \" + schemaType.toString() +\n+                            \"\\n* ClassType \" + schemaValueType.getClassName() +\n+                            \"\\n* Values \" + values);\n                 }\n \n                 // -----------------------------\n                 // Retrieve user attribute values\n                 // -----------------------------\n                 objValues = new HashSet();\n \n-                values = userAttribute.getAttributeValues();\n-\n                 for (UserAttributeValue value : values) {\n \n-                    castToBeApplied = Class.forName(schemaType.getClassName());\n+                    castToBeApplied =\n+                            Class.forName(schemaValueType.getClassName());\n \n                     if (!FrameworkUtil.isSupportedAttributeType(\n                             castToBeApplied)) {\n@@ -318,7 +381,8 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n \n                 if (mapping.isPassword()) {\n                     attrs.add(AttributeBuilder.buildPassword(\n-                            password.toCharArray()));\n+                            objValues.iterator().next().toString().\n+                            toCharArray()));\n                 }\n \n                 Object objValue = null;\n@@ -327,10 +391,9 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n                     objValue = objValues.iterator().next();\n                 }\n \n-                if (!mapping.isPassword()\n-                        && !mapping.isAccountid()) {\n+                if (!mapping.isPassword() && !mapping.isAccountid()) {\n \n-                    if (mapping.getUserSchema().isMultivalue()) {\n+                    if (schema.isMultivalue()) {\n                         attrs.add(AttributeBuilder.build(\n                                 field,\n                                 objValues));\n@@ -344,26 +407,37 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n             } catch (ClassNotFoundException e) {\n \n                 if (log.isWarnEnabled()) {\n-                    log.warn(\"Unsupported attribute type \"\n-                            + schemaType.getClassName(), e);\n+                    log.warn(\"Unsupported attribute type \" +\n+                            schemaValueType.getClassName(), e);\n                 }\n \n             } catch (Throwable t) {\n                 if (log.isDebugEnabled()) {\n-                    log.debug(\"Attribute '\" + schema + \"' processing failed\", t);\n+                    log.debug(\"Attribute '\" + schemaName +\n+                            \"' processing failed\", t);\n                 }\n             }\n         }\n \n         Uid userUid = null;\n+\n         switch (type) {\n             case CREATE:\n                 userUid = connector.create(ObjectClass.ACCOUNT, attrs, null);\n                 break;\n \n             case UPDATE:\n-                userUid = connector.update(ObjectClass.ACCOUNT,\n-                        new Uid(accountId), attrs, null);\n+                userUid = connector.resolveUsername(\n+                        ObjectClass.ACCOUNT, accountId, null);\n+\n+                if (userUid != null) {\n+                    userUid = connector.update(\n+                            ObjectClass.ACCOUNT, userUid, attrs, null);\n+                } else {\n+                    userUid = connector.create(\n+                            ObjectClass.ACCOUNT, attrs, null);\n+                }\n+\n                 break;\n \n             case DELETE:"},{"sha":"606ff4195c687fdff4d190dfdd5eb664b25a7ca6","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":81,"deletions":23,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -15,6 +15,8 @@\n  */\n package org.syncope.core.rest.controller;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.RequestBody;\n@@ -32,15 +34,16 @@\n import org.syncope.client.to.SchemaMappingTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.SchemaMappingDAO;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n import org.syncope.core.rest.data.ResourceDataBinder;\n+import org.syncope.types.SchemaType;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Controller\n@@ -49,12 +52,13 @@ public class ResourceController extends AbstractController {\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n+\n     @Autowired\n     private SchemaDAO schemaDAO;\n+\n     @Autowired\n     private SyncopeRoleDAO syncopeRoleDAO;\n-    @Autowired\n-    private SchemaMappingDAO schemaMappingDAO;\n+\n     @Autowired\n     ConnectorInstanceDAO connectorInstanceDAO;\n \n@@ -86,8 +90,6 @@ public ResourceTO create(HttpServletResponse response,\n                 log.debug(\"Verify that resource dosn't exist\");\n             }\n \n-            TargetResource resource = null;\n-\n             if (resourceDAO.find(resourceTO.getName()) != null) {\n                 SyncopeClientException ex = new SyncopeClientException(\n                         SyncopeClientExceptionType.AlreadyExists);\n@@ -101,7 +103,7 @@ public ResourceTO create(HttpServletResponse response,\n                 log.debug(\"Resource data binder ..\");\n             }\n \n-            resource = binder.getResource(resourceTO);\n+            TargetResource resource = binder.getResource(resourceTO);\n \n             if (log.isInfoEnabled()) {\n                 log.info(\"Create resource \" + resource.getName());\n@@ -182,6 +184,17 @@ public ResourceTO update(HttpServletResponse response,\n         TargetResource actual = null;\n \n         try {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Remove old mappings ..\");\n+            }\n+\n+            // remove older mappings\n+            List<SchemaMapping> mappings = resource.getMappings();\n+            for (SchemaMapping mapping : mappings) {\n+                mapping.setResource(null);\n+                schemaDAO.removeMapping(mapping.getId());\n+            }\n+\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Resource data binder ..\");\n             }\n@@ -205,13 +218,6 @@ public ResourceTO update(HttpServletResponse response,\n                 throw ex;\n             }\n \n-            // remove older mappings\n-            List<SchemaMapping> mappings = resource.getMappings();\n-            for (SchemaMapping mapping : mappings) {\n-                mapping.setResource(null);\n-                schemaMappingDAO.delete(mapping.getId());\n-            }\n-\n         } catch (SyncopeClientException ex) {\n \n             SyncopeClientCompositeErrorException compositeErrorException =\n@@ -360,22 +366,72 @@ public SchemaMappingTOs createMappings(HttpServletResponse response,\n             List<SchemaMapping> existentMappings = resource.getMappings();\n \n             for (SchemaMapping mapping : existentMappings) {\n-                schemaMappingDAO.delete(mapping.getId());\n+                if (mapping != null) {// a list can contain null values\n+                    mapping.setResource(null);\n+                    schemaDAO.removeMapping(mapping.getId());\n+                }\n             }\n \n             // to be sure ...\n-            resource.getMappings().clear();\n+            resource.setMappings(new ArrayList<SchemaMapping>());\n \n             List<SchemaMapping> schemaMappings =\n                     binder.getSchemaMappings(resource, mappings);\n \n             SchemaMapping actual = null;\n \n             for (SchemaMapping schemaMapping : schemaMappings) {\n-                actual = schemaMappingDAO.save(schemaMapping);\n+                // --------------------------------------\n+                // Synchronize resource\n+                // --------------------------------------\n+                resource.addMapping(actual);\n+                // --------------------------------------\n+\n+                // --------------------------------------\n+                // Synchronize schema\n+                // --------------------------------------\n+                String schemaName = schemaMapping.getSchemaName();\n+                SchemaType schemaType = schemaMapping.getSchemaType();\n+\n+                try {\n+                    // check for schema type\n+                    schemaType.getSchemaType().asSubclass(AbstractSchema.class);\n+\n+                    /**\n+                     * Schema type could be:\n+                     * * UserSchema\n+                     * * RoleSchema\n+                     * * MembershipSchema\n+                     */\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Schema type \" + schemaType.getClassName());\n+                    }\n+\n+                    AbstractSchema schema = schemaDAO.find(\n+                            schemaName, schemaType.getSchemaType());\n+\n+                    if (schema != null)\n+                        schema.removeMapping(schemaMapping);\n+\n+                } catch (ClassCastException e) {\n+                    /**\n+                     * Schema type could be:\n+                     * * AccountId\n+                     * * Password\n+                     */\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Wrong schema type \" +\n+                                schemaType.getClassName());\n+                    }\n+                }\n+                // --------------------------------------\n+\n+                actual = schemaDAO.saveMapping(schemaMapping);\n                 actuals.add(actual);\n             }\n \n+            resourceDAO.save(resource);\n+\n         } catch (SyncopeClientException ex) {\n \n             SyncopeClientCompositeErrorException compositeErrorException =\n@@ -431,11 +487,12 @@ public void deleteMappings(HttpServletResponse response,\n             // resource.getMappings() can never return a null value\n \n             for (SchemaMapping mapping : mappings) {\n-                schemaMappingDAO.delete(mapping.getId());\n+                mapping.setResource(null);\n+                schemaDAO.removeMapping(mapping.getId());\n             }\n \n             // to be sure ...\n-            resource.getMappings().clear();\n+            resource.setMappings(Collections.EMPTY_LIST);\n         }\n     }\n \n@@ -481,7 +538,8 @@ public SchemaMappingTOs getResourceMapping(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{roleName}/resources/mappings/list\")\n-    public SchemaMappingTOs getRoleResourcesMapping(HttpServletResponse response,\n+    public SchemaMappingTOs getRoleResourcesMapping(\n+            HttpServletResponse response,\n             @PathVariable(\"roleName\") Long roleId)\n             throws SyncopeClientCompositeErrorException {\n \n@@ -526,15 +584,15 @@ public SchemaMappingTOs getRoleResourcesMapping(HttpServletResponse response,\n             List<SchemaMapping> schemaMappings = resource.getMappings();\n \n             if (log.isDebugEnabled()) {\n-                log.debug(\"The mappings of '\" + resource + \"' are '\"\n-                        + schemaMappings + \"'\");\n+                log.debug(\"The mappings of '\" + resource + \"' are '\" +\n+                        schemaMappings + \"'\");\n             }\n \n             resourceMappings = binder.getSchemaMappingTOs(schemaMappings);\n \n             if (log.isDebugEnabled()) {\n-                log.debug(\"The mappings TO of '\" + resource + \"' are '\"\n-                        + resourceMappings.getMappings() + \"'\");\n+                log.debug(\"The mappings TO of '\" + resource + \"' are '\" +\n+                        resourceMappings.getMappings() + \"'\");\n             }\n \n             roleMappings.getMappings().addAll(resourceMappings.getMappings());"},{"sha":"6b7454bc9fb379a69c4098747c5454b2b53dac5c","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":47,"deletions":24,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -59,22 +59,31 @@ public abstract class AbstractAttributableDataBinder {\n \n     protected static final Logger log = LoggerFactory.getLogger(\n             AbstractAttributableDataBinder.class);\n+\n     @Autowired\n     protected SyncopeRoleDAO syncopeRoleDAO;\n+\n     @Autowired\n     protected SchemaDAO schemaDAO;\n+\n     @Autowired\n     protected DerivedSchemaDAO derivedSchemaDAO;\n+\n     @Autowired\n     protected AttributeDAO attributeDAO;\n+\n     @Autowired\n     protected DerivedAttributeDAO derivedAttributeDAO;\n+\n     @Autowired\n     protected AttributeValueDAO attributeValueDAO;\n+\n     @Autowired\n     protected SyncopeUserDAO syncopeUserDAO;\n+\n     @Autowired\n     protected ResourceDAO resourceDAO;\n+\n     @Autowired\n     protected MembershipDAO membershipDAO;\n \n@@ -90,12 +99,12 @@ private <T extends AbstractSchema> AbstractSchema getSchema(\n                 log.debug(\"Ignoring invalid schema \" + schemaName);\n             }\n         } else if (schema.isVirtual()) {\n-            schema = null;\n+                schema = null;\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Ignoring virtual schema \" + schemaName);\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Ignoring virtual schema \" + schemaName);\n+                }\n             }\n-        }\n \n         return schema;\n     }\n@@ -107,8 +116,8 @@ private <T extends AbstractDerivedSchema> AbstractDerivedSchema getDerivedSchema\n \n         if (derivedSchema == null) {\n             if (log.isDebugEnabled()) {\n-                log.debug(\"Ignoring invalid derivedschema \"\n-                        + derivedSchemaName);\n+                log.debug(\"Ignoring invalid derivedschema \" +\n+                        derivedSchemaName);\n             }\n         }\n \n@@ -151,8 +160,8 @@ private void fillAttribute(Set<String> values,\n                 attributeValue = attribute.addValue(value,\n                         attributeValue);\n             } catch (ValidationException e) {\n-                log.error(\"Invalid value for attribute \"\n-                        + schema.getName() + \": \" + value, e);\n+                log.error(\"Invalid value for attribute \" + schema.getName() +\n+                        \": \" + value, e);\n \n                 invalidValues.addElement(value);\n             }\n@@ -167,20 +176,33 @@ private <T extends AbstractSchema> SyncopeClientException checkMandatory(\n                 new SyncopeClientException(\n                 SyncopeClientExceptionType.RequiredValuesMissing);\n \n+\n+        Set<TargetResource> resources = new HashSet<TargetResource>();\n+        resources.addAll(attributable.getTargetResources());\n+        resources.addAll(attributable.getInheritedTargetResources());\n+        \n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Check mandatory constraint among resources \" +\n+                    resources);\n+        }\n+\n         // Check if there is some mandatory schema defined for which no value\n         // has been provided\n         List<T> allSchemas = schemaDAO.findAll(referenceSchema);\n+        \n         for (T schema : allSchemas) {\n-            if (attributable.getAttribute(schema.getName()) == null\n-                    && schema.isMandatory()) {\n+            if (attributable.getAttribute(schema.getName()) == null &&\n+                    (schema.isMandatory() ||\n+                    schemaDAO.isMandatoryOnResource(schema, resources))) {\n \n-                log.error(\"Mandatory schema \" + schema.getName()\n-                        + \" not provided with values\");\n+                log.error(\"Mandatory schema \" + schema.getName() +\n+                        \" not provided with values\");\n \n                 requiredValuesMissing.addElement(schema.getName());\n             }\n         }\n \n+\n         return requiredValuesMissing;\n     }\n \n@@ -220,8 +242,8 @@ protected ResourceOperations fill(\n                 attribute = attributable.getAttribute(schema.getName());\n                 if (attribute == null) {\n                     if (log.isDebugEnabled()) {\n-                        log.debug(\"No attribute found for schema \"\n-                                + schema.getName());\n+                        log.debug(\"No attribute found for schema \" +\n+                                schema.getName());\n                     }\n                 } else {\n                     attributable.removeAttribute(attribute);\n@@ -315,8 +337,8 @@ protected ResourceOperations fill(\n                         derivedSchema.getName());\n                 if (derivedAttribute == null) {\n                     if (log.isDebugEnabled()) {\n-                        log.debug(\"No derived attribute found for schema \"\n-                                + derivedSchema.getName());\n+                        log.debug(\"No derived attribute found for schema \" +\n+                                derivedSchema.getName());\n                     }\n                 } else {\n                     derivedAttributeDAO.delete(derivedAttribute);\n@@ -447,8 +469,8 @@ protected AbstractAttributable fill(AbstractAttributable attributable,\n \n             if (derivedSchema == null) {\n                 if (log.isDebugEnabled()) {\n-                    log.debug(\"Ignoring invalid derivedschema \"\n-                            + attributeTO.getSchema());\n+                    log.debug(\"Ignoring invalid derivedschema \" +\n+                            attributeTO.getSchema());\n                 }\n             } else {\n                 derivedAttribute = attributableUtil.newDerivedAttribute();\n@@ -529,14 +551,15 @@ public void checkUniqueness(AbstractAttributable attributable)\n             for (AbstractAttributeValue attributeValue :\n                     attribute.getAttributeValues()) {\n \n-                if (attribute.getSchema().isUniquevalue()\n-                        && attributeValueDAO.nonUniqueAttributeValue(\n+                if (attribute.getSchema().isUniquevalue() &&\n+                        attributeValueDAO.nonUniqueAttributeValue(\n                         attributeValue)) {\n \n-                    log.error(\"Unique value schema \"\n-                            + attribute.getSchema().getName()\n-                            + \" with no unique value: \"\n-                            + attributeValue.getValueAsString());\n+                    log.error(\n+                            \"Unique value schema \" +\n+                            attribute.getSchema().getName() +\n+                            \" with no unique value: \" +\n+                            attributeValue.getValueAsString());\n \n                     invalidUniques.addElement(attribute.getSchema().getName());\n                 }"},{"sha":"3bdac1a821758939b2389566d4fc6e68391f5bf4","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":44,"deletions":39,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -29,13 +29,14 @@\n import org.syncope.client.to.SchemaMappingTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.role.RoleSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.validation.MultiUniqueValueException;\n+import org.syncope.types.SchemaType;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -45,7 +46,7 @@ public class ResourceDataBinder {\n             ResourceDataBinder.class);\n \n     private static final String[] ignoreMappingProperties = {\n-        \"id\", \"userSchema\", \"roleSchema\", \"resource\"};\n+        \"id\", \"resource\"};\n \n     private SchemaDAO schemaDAO;\n \n@@ -185,27 +186,16 @@ public SchemaMapping getSchemaMapping(\n             return null;\n         }\n \n-        if (mapping.getField() == null) {\n-            requiredValuesMissing.addElement(\"field\");\n+        if (mapping.getSchemaName() == null) {\n+            requiredValuesMissing.addElement(\"schema\");\n         }\n \n-        // search for the user schema\n-        UserSchema userSchema = null;\n-        if (mapping.getUserSchema() != null) {\n-            userSchema = schemaDAO.find(\n-                    mapping.getUserSchema(), UserSchema.class);\n+        if (mapping.getField() == null) {\n+            requiredValuesMissing.addElement(\"field\");\n         }\n \n-        // search for the role schema\n-        RoleSchema roleSchema = null;\n-        if (mapping.getRoleSchema() != null) {\n-            roleSchema = schemaDAO.find(\n-                    mapping.getRoleSchema(), RoleSchema.class);\n-        }\n-\n-        // at least one schema must be provided\n-        if (userSchema == null && roleSchema == null) {\n-            requiredValuesMissing.addElement(\"schema\");\n+        if (mapping.getSchemaType() == null) {\n+            requiredValuesMissing.addElement(\"type\");\n         }\n \n         // a resource must be provided\n@@ -229,17 +219,42 @@ public SchemaMapping getSchemaMapping(\n                 mapping, schemaMapping, ignoreMappingProperties);\n \n         schemaMapping.setResource(resource);\n-        resource.addMapping(schemaMapping);\n \n-        // synchronize userSchema\n-        schemaMapping.setUserSchema(userSchema);\n-        userSchema = schemaMapping.getUserSchema();\n-        if (userSchema != null) userSchema.addMapping(schemaMapping);\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Save mapping \" + mapping);\n+        }\n+\n+        schemaDAO.saveMapping(schemaMapping);\n+\n+        SchemaType schemaType = mapping.getSchemaType();\n+\n+        try {\n+            schemaType.getSchemaType().asSubclass(AbstractSchema.class);\n+\n \n-        // synchronize roleSchema\n-        schemaMapping.setRoleSchema(roleSchema);\n-        roleSchema = schemaMapping.getRoleSchema();\n-        if (roleSchema != null) roleSchema.addMapping(schemaMapping);\n+            // search for the attribute schema\n+            AbstractSchema schema = schemaDAO.find(\n+                    mapping.getSchemaName(),\n+                    mapping.getSchemaType().getSchemaType());\n+\n+            if (schema != null)\n+                schema.addMapping(schemaMapping);\n+\n+\n+            if (log.isInfoEnabled()) {\n+                log.info(\"Merge schema \" + schema);\n+            }\n+\n+            schemaDAO.save(schema);\n+\n+        } catch (ClassCastException e) {\n+            // no real schema provided\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Wrong schema type \" + schemaType.getClassName());\n+            }\n+        } catch (MultiUniqueValueException e) {\n+            log.error(\"Error during schema persistence\", e);\n+        }\n \n         return schemaMapping;\n     }\n@@ -287,16 +302,6 @@ public SchemaMappingTO getSchemaMappingTO(\n         BeanUtils.copyProperties(\n                 schemaMapping, schemaMappingTO, ignoreMappingProperties);\n \n-        if (schemaMapping.getUserSchema() != null) {\n-            schemaMappingTO.setUserSchema(\n-                    schemaMapping.getUserSchema().getName());\n-        }\n-\n-        if (schemaMapping.getRoleSchema() != null) {\n-            schemaMappingTO.setRoleSchema(\n-                    schemaMapping.getRoleSchema().getName());\n-        }\n-\n         schemaMappingTO.setId(schemaMapping.getId());\n \n         if (log.isDebugEnabled()) {"},{"sha":"1dc61bc60f5dd0ceeb919b6b1e30e78da352c46f","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -74,7 +74,8 @@ public SyncopeUser create(UserTO userTO)\n         // TODO: check password policies\n         SyncopeClientException invalidPassword = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidPassword);\n-        if (userTO.getPassword() == null || userTO.getPassword().length() == 0) {\n+        if (userTO.getPassword() == null ||\n+                userTO.getPassword().length() == 0) {\n \n             log.error(\"No password provided\");\n \n@@ -87,18 +88,15 @@ public SyncopeUser create(UserTO userTO)\n             scce.addException(invalidPassword);\n         }\n \n-        // attributes, derived attributes and resources\n-        user = (SyncopeUser) fill(\n-                user, userTO, AttributableUtil.USER, scce);\n-\n         // memberships\n         SyncopeRole role = null;\n         for (MembershipTO membershipTO : userTO.getMemberships()) {\n             role = syncopeRoleDAO.find(membershipTO.getRole());\n \n             if (role == null) {\n                 if (log.isDebugEnabled()) {\n-                    log.debug(\"Ignoring invalid role \" + membershipTO.getRole());\n+                    log.debug(\"Ignoring invalid role \" +\n+                            membershipTO.getRole());\n                 }\n             } else {\n                 Membership membership = null;\n@@ -125,6 +123,10 @@ public SyncopeUser create(UserTO userTO)\n             membershipDAO.delete(membershipId);\n         }\n \n+        // attributes, derived attributes and resources\n+        user = (SyncopeUser) fill(\n+                user, userTO, AttributableUtil.USER, scce);\n+\n         return user;\n     }\n \n@@ -152,7 +154,9 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n             membership = membershipDAO.find(membershipToBeRemovedId);\n             if (membership == null) {\n                 if (log.isDebugEnabled()) {\n-                    log.debug(\"Invalid membership id specified to be removed: \" + membershipToBeRemovedId);\n+                    log.debug(\n+                            \"Invalid membership id specified to be removed: \" +\n+                            membershipToBeRemovedId);\n                 }\n             } else {\n                 for (TargetResource resource :\n@@ -221,7 +225,8 @@ public UserTO getUserTO(SyncopeUser user, Workflow userWorkflow) {\n                 log.error(\"Could not find status information for \" + user);\n             }\n         } catch (EntityNotFoundException e) {\n-            log.error(\"Could not find workflow entry with id \" + user.getWorkflowId());\n+            log.error(\"Could not find workflow entry with id \" +\n+                    user.getWorkflowId());\n         }\n         userTO.setStatus(status);\n "},{"sha":"b12254c12ad770b26f6ab3185fa14b6a198c31dc","filename":"core/src/main/resources/log4j.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -55,17 +55,17 @@\n     </appender>\n \n     <logger name=\"org.syncope.core.persistence\" additivity=\"false\">\n-        <level value=\"INFO\"/>\n+        <level value=\"DEBUG\"/>\n         <appender-ref ref=\"persistence\"/>\n     </logger>\n \n     <logger name=\"org.syncope.core.rest\" additivity=\"false\">\n-        <level value=\"INFO\"/>\n+        <level value=\"DEBUG\"/>\n         <appender-ref ref=\"rest\"/>\n     </logger>\n \n     <logger name=\"org.syncope.core.test\" additivity=\"false\">\n-        <level value=\"INFO\"/>\n+        <level value=\"DEBUG\"/>\n         <appender-ref ref=\"test\"/>\n     </logger>\n \n@@ -90,7 +90,7 @@\n     </logger>\n \n     <logger name=\"org.hibernate\" additivity=\"false\">\n-        <level value=\"INFO\"/>\n+        <level value=\"DEBUG\"/>\n         <appender-ref ref=\"persistence\"/>\n     </logger>\n "},{"sha":"239417b23028679a01d729b11b4fb3d544e15bef","filename":"core/src/test/java/org/syncope/core/test/persistence/MembershipDAOTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FMembershipDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FMembershipDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FMembershipDAOTest.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -40,7 +40,7 @@ public class MembershipDAOTest extends AbstractTest {\n     @Test\n     public final void findAll() {\n         List<Membership> list = membershipDAO.findAll();\n-        assertEquals(4, list.size());\n+        assertEquals(5, list.size());\n     }\n \n     @Test"},{"sha":"fb3935a89930eeea858d8af45e947e6f2b10f34a","filename":"core/src/test/java/org/syncope/core/test/persistence/ResourceDAOTest.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.test.persistence;\n \n+import java.util.ArrayList;\n import java.util.List;\n import static org.junit.Assert.*;\n \n@@ -59,7 +60,12 @@ public final void findById() {\n \n         assertFalse(\"no mapping specified\", mappings.isEmpty());\n \n-        assertTrue(mappings.iterator().next().getId() == 100L);\n+        List<Long> mappingIds = new ArrayList<Long>();\n+\n+        for (SchemaMapping mapping : mappings)\n+            mappingIds.add(mapping.getId());\n+\n+        assertTrue(mappingIds.contains(100L));\n     }\n \n     @Test"},{"sha":"a4cc0aa70be2c61f6cb0413c3f2c9313eba7ac32","filename":"core/src/test/java/org/syncope/core/test/persistence/SchemaDAOTest.java","status":"modified","additions":48,"deletions":4,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -14,28 +14,36 @@\n  */\n package org.syncope.core.test.persistence;\n \n+import java.util.HashSet;\n import static org.junit.Assert.*;\n \n import java.util.List;\n+import java.util.Set;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.validation.MultiUniqueValueException;\n-import org.syncope.types.SchemaType;\n+import org.syncope.types.SchemaValueType;\n \n @Transactional\n public class SchemaDAOTest extends AbstractTest {\n \n     @Autowired\n     private SchemaDAO schemaDAO;\n \n+    @Autowired\n+    private ResourceDAO resourceDAO;\n+\n     @Test\n     public final void findAll() {\n         List<UserSchema> userList = schemaDAO.findAll(UserSchema.class);\n-        assertEquals(7, userList.size());\n+        assertEquals(8, userList.size());\n \n         List<RoleSchema> roleList = schemaDAO.findAll(RoleSchema.class);\n         assertEquals(2, roleList.size());\n@@ -53,12 +61,12 @@ public final void findByName() {\n     public final void save() {\n         UserSchema attributeSchema = new UserSchema();\n         attributeSchema.setName(\"secondaryEmail\");\n-        attributeSchema.setType(SchemaType.String);\n+        attributeSchema.setType(SchemaValueType.String);\n         attributeSchema.setValidatorClass(\n                 \"org.syncope.core.validation.EmailAddressValidator\");\n         attributeSchema.setMandatory(false);\n         attributeSchema.setMultivalue(true);\n-        \n+\n         try {\n             schemaDAO.save(attributeSchema);\n         } catch (MultiUniqueValueException e) {\n@@ -80,4 +88,40 @@ public final void delete() {\n         UserSchema actual = schemaDAO.find(\"username\", UserSchema.class);\n         assertNull(\"delete did not work\", actual);\n     }\n+\n+    @Test\n+    public final void checkForMandatoryOnResource() {\n+        TargetResource resource = resourceDAO.find(\"ws-target-resource-1\");\n+\n+        assertNotNull(resource);\n+\n+        AbstractSchema schema = schemaDAO.find(\"email\", UserSchema.class);\n+\n+        assertNotNull(schema);\n+\n+        // schema not mandatory but field onto the resource mandatory\n+        assertTrue(schemaDAO.isMandatoryOnResource(schema, resource));\n+\n+        resource = resourceDAO.find(\"ws-target-resource-update\");\n+\n+        // schema not mandatory and field onto the resource not mandatory\n+        assertFalse(schemaDAO.isMandatoryOnResource(schema, resource));\n+\n+        schema = schemaDAO.find(\"userId\", UserSchema.class);\n+\n+        // schema mandatory and field onto the resource not mandatory\n+        assertTrue(schemaDAO.isMandatoryOnResource(schema, resource));\n+\n+        // multi choice\n+        TargetResource resource1 =\n+                resourceDAO.find(\"ws-target-resource-1\");\n+        TargetResource resource2 =\n+                resourceDAO.find(\"ws-target-resource-update\");\n+\n+        Set<TargetResource> resources = new HashSet<TargetResource>();\n+        resources.add(resource1);\n+        resources.add(resource2);\n+\n+        assertTrue(schemaDAO.isMandatoryOnResource(schema, resources));\n+    }\n }"},{"sha":"3e3796c5219dca28c7ac309b4bd549aa0b41000a","filename":"core/src/test/java/org/syncope/core/test/persistence/SchemaMappingDAOTest.java","status":"modified","additions":78,"deletions":14,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaMappingDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaMappingDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaMappingDAOTest.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -14,36 +14,99 @@\n  */\n package org.syncope.core.test.persistence;\n \n+import java.util.List;\n+import org.junit.Before;\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.TargetResource;\n+import org.syncope.core.persistence.beans.membership.MembershipSchema;\n+import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.SchemaMappingDAO;\n+import org.syncope.types.SchemaType;\n \n @Transactional\n public class SchemaMappingDAOTest extends AbstractTest {\n \n     @Autowired\n-    private SchemaMappingDAO schemaMappingDAO;\n+    private ResourceDAO resourceDAO;\n+\n     @Autowired\n     private SchemaDAO schemaDAO;\n-    @Autowired\n-    private ResourceDAO resourceDAO;\n+\n+    @Before\n+    public final void checkBeforeForStoredData() {\n+        List<SchemaMapping> mappings = schemaDAO.findAllMappings();\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Found \" + mappings);\n+        }\n+\n+        assertNotNull(mappings);\n+        assertFalse(mappings.isEmpty());\n+\n+        for (SchemaMapping mapping : mappings) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Check for schema mapping \" + mapping);\n+            }\n+\n+            String name = mapping.getSchemaName();\n+            assertNotNull(name);\n+\n+            SchemaType type = mapping.getSchemaType();\n+            assertNotNull(type);\n+\n+            TargetResource resource = mapping.getResource();\n+            assertNotNull(resource);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\n+                        \"\\nRelated schema name: \" + name +\n+                        \"\\nRelated schema type: \" + type.toString() +\n+                        \"\\nRelated resource name: \" + resource.getName() +\n+                        \"\\nBrothers in resource : \" + resource.getMappings());\n+            }\n+\n+            AbstractSchema schema = null;\n+\n+            schema = schemaDAO.find(name, UserSchema.class);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Brothers in UserSchema: \" +\n+                        (schema != null ? ((UserSchema)schema).getMappings() : \"\"));\n+            }\n+\n+            schema = schemaDAO.find(name, RoleSchema.class);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Brothers in RoleSchema: \" +\n+                        (schema != null ? ((RoleSchema)schema).getMappings() : \"\"));\n+            }\n+\n+            schema = schemaDAO.find(name, MembershipSchema.class);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Brothers in MembershipSchema: \" +\n+                        (schema != null ? ((MembershipSchema)schema).getMappings() : \"\"));\n+            }\n+        }\n+    }\n \n     @Test\n     public final void findById() {\n-        SchemaMapping schema = schemaMappingDAO.find(100L);\n+        SchemaMapping schema = schemaDAO.findMapping(100L);\n \n         assertNotNull(\"findById did not work\", schema);\n \n-        assertEquals(\"username\", schema.getField());\n+        assertEquals(\"email\", schema.getField());\n \n-        assertEquals(\"email\", schema.getUserSchema().getName());\n+        assertEquals(\"email\", schema.getSchemaName());\n \n         assertEquals(\"ws-target-resource-1\", schema.getResource().getName());\n \n@@ -59,10 +122,11 @@ public final void save() throws ClassNotFoundException {\n         SchemaMapping schema = new SchemaMapping();\n \n         schema.setField(\"name\");\n-        schema.setUserSchema(schemaDAO.find(\"firstname\", UserSchema.class));\n+        schema.setSchemaName(\"firstname\");\n+        schema.setSchemaType(SchemaType.UserSchema);\n         schema.setResource(resourceDAO.find(\"ws-target-resource-1\"));\n \n-        SchemaMapping actual = schemaMappingDAO.save(schema);\n+        SchemaMapping actual = schemaDAO.saveMapping(schema);\n \n         assertNotNull(actual);\n \n@@ -72,20 +136,20 @@ public final void save() throws ClassNotFoundException {\n \n         assertFalse(actual.isPassword());\n \n-        assertEquals(\"firstname\", actual.getUserSchema().getName());\n+        assertEquals(\"firstname\", actual.getSchemaName());\n \n         assertEquals(\"name\", actual.getField());\n     }\n \n     @Test\n     public final void delete() {\n-        SchemaMapping schema = schemaMappingDAO.find(100L);\n+        SchemaMapping mapping = schemaDAO.findMapping(100L);\n \n-        assertNotNull(\"find to delete did not work\", schema);\n+        assertNotNull(\"find to delete did not work\", mapping);\n \n-        schemaMappingDAO.delete(schema.getId());\n+        schemaDAO.removeMapping(mapping.getId());\n \n-        SchemaMapping actual = schemaMappingDAO.find(100L);\n+        SchemaMapping actual = schemaDAO.findMapping(100L);\n \n         assertNull(\"delete did not work\", actual);\n     }"},{"sha":"14c1bbc9785206cae8bcbb355141cb89a734079f","filename":"core/src/test/java/org/syncope/core/test/persistence/SyncopeUserDAOTest.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -91,4 +91,10 @@ public final void delete() {\n         SyncopeUser actual = syncopeUserDAO.find(3L);\n         assertNull(\"delete did not work\", actual);\n     }\n+    \n+    @Test\n+    public final void getRoleResources() {\n+        SyncopeUser user = syncopeUserDAO.find(1L);\n+        assertFalse(user.getInheritedTargetResources().isEmpty());\n+    }\n }"},{"sha":"3bf9c1a3b1af9fb9a9897a3bfa83c9041726017d","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/ResourceTest.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -28,15 +28,14 @@\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.SchemaMappingDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.test.persistence.AbstractTest;\n+import org.syncope.types.SchemaType;\n \n @Transactional\n public class ResourceTest extends AbstractTest {\n@@ -50,9 +49,6 @@ public class ResourceTest extends AbstractTest {\n     @Autowired\n     private ConnectorInstanceDAO connectorInstanceDAO;\n \n-    @Autowired\n-    private SchemaMappingDAO schemaMappingDAO;\n-\n     @Autowired\n     private SyncopeUserDAO syncopeUserDAO;\n \n@@ -76,18 +72,14 @@ public final void save() throws ClassNotFoundException {\n         UserSchema userSchema =\n                 schemaDAO.find(\"username\", UserSchema.class);\n \n-        // search for the role schema\n-        RoleSchema roleSchema = schemaDAO.find(\n-                \"icon\", RoleSchema.class);\n-\n         SchemaMapping mapping = null;\n \n         for (int i = 0; i < 3; i++) {\n             mapping = new SchemaMapping();\n             mapping.setField(\"test\" + i);\n \n-            mapping.setUserSchema(userSchema);\n-            mapping.setRoleSchema(roleSchema);\n+            mapping.setSchemaName(userSchema.getName());\n+            mapping.setSchemaType(SchemaType.UserSchema);\n \n             mapping.setResource(resource);\n             resource.addMapping(mapping);\n@@ -194,7 +186,7 @@ public final void delete() {\n         // mappings must be removed\n         for (Long id : mappingIds) {\n             assertNull(\"mapping delete did not work\",\n-                    schemaMappingDAO.find(id));\n+                    schemaDAO.findMapping(id));\n         }\n \n         // resource must be not referenced any more from users"},{"sha":"e9fc34711599767fd0c0234e7b986fcb394e6973","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/SchemaMappingTest.java","status":"modified","additions":214,"deletions":51,"changes":265,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -14,7 +14,10 @@\n  */\n package org.syncope.core.test.persistence.relationships;\n \n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+import org.syncope.core.persistence.validation.MultiUniqueValueException;\n import org.syncope.core.test.persistence.*;\n import static org.junit.Assert.*;\n \n@@ -26,108 +29,268 @@\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.SchemaMappingDAO;\n+import org.syncope.types.SchemaType;\n \n @Transactional\n public class SchemaMappingTest extends AbstractTest {\n \n-    @Autowired\n-    private SchemaMappingDAO schemaMappingDAO;\n     @Autowired\n     private SchemaDAO schemaDAO;\n+\n     @Autowired\n     private ResourceDAO resourceDAO;\n \n     @Test\n-    public final void save() throws ClassNotFoundException {\n-        SchemaMapping schema = new SchemaMapping();\n+    public final void create() throws ClassNotFoundException, MultiUniqueValueException {\n+        SchemaMapping mapping = new SchemaMapping();\n+\n+        mapping.setSchemaType(SchemaType.UserSchema);\n \n-        schema.setField(\"name\");\n+        UserSchema schema = schemaDAO.find(\"firstname\", UserSchema.class);\n \n-        UserSchema user = schemaDAO.find(\"firstname\", UserSchema.class);\n-        schema.setUserSchema(user);\n+        assertNotNull(schema);\n+\n+        mapping.setSchemaName(schema.getName());\n \n         TargetResource resource = resourceDAO.find(\"ws-target-resource-1\");\n-        schema.setResource(resource);\n \n-        SchemaMapping actual = schemaMappingDAO.save(schema);\n+        assertNotNull(resource);\n \n-        user.addMapping(actual);\n-        resource.addMapping(actual);\n+        mapping.setResource(resource);\n \n-        // close the transaction\n-        schemaMappingDAO.flush();\n+        mapping.setField(\"name\");\n \n-        assertNotNull(actual);\n+        // update schema mapping\n+        SchemaMapping actualMapping = schemaDAO.saveMapping(mapping);\n \n-        assertTrue(actual.isNullable());\n+        assertNotNull(actualMapping);\n \n-        assertFalse(actual.isAccountid());\n+        assertTrue(actualMapping.isNullable());\n \n-        assertFalse(actual.isPassword());\n+        assertFalse(actualMapping.isAccountid());\n \n-        assertEquals(\"firstname\", actual.getUserSchema().getName());\n+        assertFalse(actualMapping.isPassword());\n \n-        assertEquals(\"name\", actual.getField());\n+        assertEquals(\"firstname\", actualMapping.getSchemaName());\n \n-        UserSchema actualUser =\n-                schemaDAO.find(\"firstname\", UserSchema.class);\n+        assertEquals(\"name\", actualMapping.getField());\n \n-        assertTrue(actualUser.getMappings().contains(actual));\n+        // update schema\n+        schema.addMapping(actualMapping);\n+        UserSchema actualSchema = schemaDAO.save(schema);\n \n-        TargetResource actualResource =\n-                resourceDAO.find(\"ws-target-resource-1\");\n+        assertNotNull(actualSchema);\n+\n+        // update resource\n+        resource.addMapping(actualMapping);\n+        TargetResource actualResource = resourceDAO.save(resource);\n \n-        assertTrue(actualResource.getMappings().contains(actual));\n+        assertNotNull(actualResource);\n+\n+        // close the transaction\n+        schemaDAO.flush();\n+\n+        actualSchema = schemaDAO.find(\"firstname\", UserSchema.class);\n+\n+        assertNotNull(actualSchema.getMappings());\n+        assertFalse(actualSchema.getMappings().isEmpty());\n+        assertTrue(actualSchema.getMappings().contains(actualMapping));\n+\n+        actualResource = resourceDAO.find(\"ws-target-resource-1\");\n+\n+        assertNotNull(actualResource.getMappings());\n+        assertFalse(actualResource.getMappings().isEmpty());\n+        assertTrue(actualResource.getMappings().contains(actualMapping));\n     }\n \n     @Test\n-    public final void delete() {\n-        SchemaMapping schema = schemaMappingDAO.find(100L);\n-\n-        assertNotNull(\"find did not work\", schema);\n+    public final void delete() throws MultiUniqueValueException {\n+        SchemaMapping mapping = schemaDAO.findMapping(100L);\n \n-        Long id = schema.getId();\n+        assertNotNull(\"find did not work\", mapping);\n \n-        TargetResource resource = schema.getResource();\n+        TargetResource resource = mapping.getResource();\n \n         assertNotNull(resource);\n+        assertNotNull(resource.getMappings());\n+        assertFalse(resource.getMappings().isEmpty());\n \n-        UserSchema user = schema.getUserSchema();\n+        int resourceMappings = resource.getMappings().size();\n \n-        assertNotNull(user);\n+        assertTrue(resourceMappings > 0);\n \n-        schemaMappingDAO.delete(schema.getId());\n+        UserSchema schema =\n+                schemaDAO.find(mapping.getSchemaName(), UserSchema.class);\n \n-        // close the transaction\n-        schemaMappingDAO.flush();\n+        assertNotNull(schema);\n+        assertNotNull(schema.getMappings());\n+        assertFalse(schema.getMappings().isEmpty());\n+\n+        int userMappings = schema.getMappings().size();\n+\n+        assertTrue(userMappings > 0);\n \n-        SchemaMapping actual = schemaMappingDAO.find(100L);\n+        schemaDAO.removeMapping(mapping.getId());\n+\n+        SchemaMapping actual = schemaDAO.findMapping(100L);\n \n         assertNull(\"delete did not work\", actual);\n \n+        // close the transaction\n+        schemaDAO.flush();\n+\n+        UserSchema actualUser =\n+                schemaDAO.find(schema.getName(), UserSchema.class);\n+\n+        assertNotNull(actualUser);\n+        assertNotNull(actualUser.getMappings());\n+        assertTrue(userMappings > actualUser.getMappings().size());\n+        assertFalse(actualUser.getMappings().contains(mapping));\n+\n         TargetResource actualResource =\n                 resourceDAO.find(resource.getName());\n \n         assertNotNull(actualResource);\n+        assertNotNull(actualResource.getMappings());\n+        assertTrue(resourceMappings > actualResource.getMappings().size());\n+        assertFalse(actualResource.getMappings().contains(mapping));\n+    }\n+\n+    @Test\n+    public void update() throws MultiUniqueValueException {\n+        SchemaMapping mapping = schemaDAO.findMapping(100L);\n+\n+        assertNotNull(mapping);\n+        assertEquals(\"email\", mapping.getSchemaName());\n+        assertEquals(mapping.getSchemaType(), SchemaType.UserSchema);\n+        assertTrue(mapping.isAccountid());\n+        assertFalse(mapping.isPassword());\n+        assertEquals(\"ws-target-resource-1\", mapping.getResource().getName());\n+\n+        UserSchema schema =\n+                schemaDAO.find(mapping.getSchemaName(), UserSchema.class);\n+\n+        assertNotNull(schema);\n+        assertTrue(schema.getMappings().contains(mapping));\n+\n+        int schemaMappings = schema.getMappings().size();\n+\n+        TargetResource resource =\n+                resourceDAO.find(mapping.getResource().getName());\n+\n+        assertNotNull(resource);\n+        assertTrue(resource.getMappings().contains(mapping));\n+\n+        int resourceMappings = resource.getMappings().size();\n+\n+        // Schema must be forcely synchronized\n+        schema.removeMapping(mapping);\n+        schemaDAO.save(schema);\n+\n+        // Resource must be forcely synchronized\n+        resource.removeMapping(mapping);\n+        resourceDAO.save(resource);\n+\n+        resource = resourceDAO.find(\"ws-target-resource-2\");\n \n-        List<SchemaMapping> mappings = actualResource.getMappings();\n-        if (mappings != null) {\n-            for (SchemaMapping mapping : mappings) {\n-                assertFalse(mapping.getId().equals(id));\n-            }\n+        mapping.setAccountid(false);\n+        mapping.setPassword(true);\n+        mapping.setSchemaName(\"Password\");\n+        mapping.setSchemaType(SchemaType.Password);\n+        mapping.setResource(resource);\n+\n+        SchemaMapping actual = schemaDAO.saveMapping(mapping);\n+        schemaDAO.flush();\n+\n+        assertNotNull(actual);\n+        assertEquals(\"Password\", actual.getSchemaName());\n+        assertEquals(actual.getSchemaType(), SchemaType.Password);\n+        assertFalse(actual.isAccountid());\n+        assertTrue(actual.isPassword());\n+        assertEquals(\"ws-target-resource-2\", actual.getResource().getName());\n+\n+        // Check for synchronization\n+\n+        schema = schemaDAO.find(\"email\", UserSchema.class);\n+        assertNotNull(schema);\n+        assertTrue(schemaMappings > schema.getMappings().size());\n+\n+        resource = resourceDAO.find(\"ws-target-resource-1\");\n+        assertNotNull(resource);\n+        assertTrue(resourceMappings > resource.getMappings().size());\n+    }\n+\n+    @Test\n+    public void removeResourceAndCheckForMapping() {\n+        TargetResource resource = resourceDAO.find(\"ws-target-resource-2\");\n+\n+        assertNotNull(resource);\n+\n+        List<SchemaMapping> mappings = resource.getMappings();\n+\n+        assertNotNull(mappings);\n+        assertFalse(mappings.isEmpty());\n+\n+        Set<Long> mappingIds = new HashSet<Long>();\n+        for (SchemaMapping mapping : mappings) {\n+            mappingIds.add(mapping.getId());\n         }\n \n-        UserSchema actualUser =\n-                schemaDAO.find(user.getName(), UserSchema.class);\n+        resourceDAO.delete(\"ws-target-resource-2\");\n \n-        assertNotNull(actualUser);\n+        resourceDAO.flush();\n+\n+        resource = resourceDAO.find(\"ws-target-resource-2\");\n+\n+        assertNull(resource);\n+\n+        for (Long id : mappingIds) {\n+            assertNull(schemaDAO.findMapping(id));\n+        }\n+    }\n+\n+    @Test\n+    public void removeSchemaAndCheckForMapping() {\n+        UserSchema schema = schemaDAO.find(\"email\", UserSchema.class);\n+\n+        assertNotNull(schema);\n+\n+        List<SchemaMapping> mappings = schema.getMappings();\n \n-        mappings = actualUser.getMappings();\n-        if (mappings != null) {\n-            for (SchemaMapping mapping : mappings) {\n-                assertFalse(mapping.getId().equals(id));\n-            }\n+        assertNotNull(mappings);\n+        assertFalse(mappings.isEmpty());\n+\n+        Set<Long> mappingIds = new HashSet<Long>();\n+        for (SchemaMapping mapping : mappings) {\n+            mappingIds.add(mapping.getId());\n         }\n+\n+        schemaDAO.delete(\"email\", UserSchema.class);\n+\n+        schemaDAO.flush();\n+\n+        schema = schemaDAO.find(\"email\", UserSchema.class);\n+\n+        assertNull(schema);\n+\n+        for (Long id : mappingIds) {\n+            assertNull(schemaDAO.findMapping(id));\n+        }\n+    }\n+\n+    @Test\n+    public void checkForAccountId() {\n+        schemaDAO.removeMapping(99L);\n+        schemaDAO.flush();\n+\n+        assertNull(schemaDAO.findMapping(99L));\n+    }\n+\n+    @Test\n+    public void checkForPassword() {\n+        schemaDAO.removeMapping(106L);\n+        schemaDAO.flush();\n+\n+        assertNull(schemaDAO.findMapping(106L));\n     }\n }"},{"sha":"d7f7c91e960d00d1d27898581958459d94f235aa","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/SchemaTest.java","status":"modified","additions":66,"deletions":18,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -14,18 +14,21 @@\n  */\n package org.syncope.core.test.persistence.relationships;\n \n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n import static org.junit.Assert.*;\n import org.junit.Test;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.user.UserAttribute;\n import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.SchemaMappingDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.test.persistence.AbstractTest;\n \n@@ -34,45 +37,90 @@ public class SchemaTest extends AbstractTest {\n \n     @Autowired\n     private SyncopeUserDAO syncopeUserDAO;\n+\n     @Autowired\n     private SchemaDAO schemaDAO;\n+\n     @Autowired\n     private DerivedSchemaDAO derivedSchemaDAO;\n+\n     @Autowired\n     private AttributeDAO attributeDAO;\n-    @Autowired\n-    private SchemaMappingDAO schemaMappingDAO;\n \n     @Test\n     public final void test1() {\n-        // 1\n-        schemaDAO.delete(\"username\", UserSchema.class);\n+        // search for user schema username\n+        UserSchema schema = schemaDAO.find(\"username\", UserSchema.class);\n \n-        // 2\n-        schemaDAO.delete(\"surname\", UserSchema.class);\n+        assertNotNull(schema);\n+\n+        // check for associated mappings\n+        List<SchemaMapping> mappings = schema.getMappings();\n+\n+        assertNotNull(mappings);\n+\n+        Set<Long> mappingIds = new HashSet<Long>();\n+        for (SchemaMapping mapping : mappings) {\n+            mappingIds.add(mapping.getId());\n+        }\n+\n+        assertFalse(mappingIds.isEmpty());\n+\n+        // delete user schema username\n+        schemaDAO.delete(\"username\", UserSchema.class);\n \n         schemaDAO.flush();\n \n-        // 1\n-        assertNull(schemaDAO.find(\"username\", UserSchema.class));\n+        // check for schema deletion\n+        schema = schemaDAO.find(\"username\", UserSchema.class);\n+\n+        assertNull(schema);\n+\n+        // check for mappings deletion\n+        for (Long mappingId : mappingIds) {\n+            SchemaMapping actualMapping = schemaDAO.findMapping(mappingId);\n+            assertNull(actualMapping);\n+        }\n+\n         assertNull(attributeDAO.find(100L, UserAttribute.class));\n         assertNull(attributeDAO.find(300L, UserAttribute.class));\n         assertNull(syncopeUserDAO.find(1L).getAttribute(\"username\"));\n         assertNull(syncopeUserDAO.find(3L).getAttribute(\"username\"));\n-\n-        // 2\n-        assertNull(schemaDAO.find(\"surname\", UserSchema.class));\n-        assertEquals(1, derivedSchemaDAO.find(\"cn\",\n-                UserDerivedSchema.class).getSchemas().size());\n     }\n \n     @Test\n-    public final void test2() {\n-        schemaDAO.delete(\"email\", UserSchema.class);\n+    public void test2() {\n+\n+        // search for user schema username\n+        UserSchema schema = schemaDAO.find(\"surname\", UserSchema.class);\n+\n+        assertNotNull(schema);\n+\n+        // check for associated mappings\n+        List<SchemaMapping> mappings = schema.getMappings();\n+\n+        assertNotNull(mappings);\n+\n+        Set<Long> mappingIds = new HashSet<Long>();\n+        for (SchemaMapping mapping : mappings) {\n+            mappingIds.add(mapping.getId());\n+        }\n+\n+        assertFalse(mappingIds.isEmpty());\n+\n+        // delete user schema username\n+        schemaDAO.delete(\"surname\", UserSchema.class);\n \n         schemaDAO.flush();\n \n-        assertNull(schemaDAO.find(\"email\", UserSchema.class));\n-        assertNull(schemaMappingDAO.find(100L));\n+        // check for schema deletion\n+        schema = schemaDAO.find(\"surname\", UserSchema.class);\n+\n+        assertNull(schema);\n+\n+        assertNull(schemaDAO.find(\"surname\", UserSchema.class));\n+        \n+        assertEquals(1, derivedSchemaDAO.find(\"cn\",\n+                UserDerivedSchema.class).getSchemas().size());\n     }\n }"},{"sha":"e66430a202d349e4949ab8016d3873dc98c166fc","filename":"core/src/test/java/org/syncope/core/test/rest/ResourceTestITCase.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FResourceTestITCase.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -25,6 +25,7 @@\n import org.syncope.client.to.SchemaMappingTO;\n import org.syncope.client.to.SchemaMappingTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.types.SchemaType;\n \n public class ResourceTestITCase extends AbstractTestITCase {\n \n@@ -54,12 +55,14 @@ public void create() {\n \n         schemaMappingTO = new SchemaMappingTO();\n         schemaMappingTO.setField(\"uid\");\n-        schemaMappingTO.setUserSchema(\"userId\");\n+        schemaMappingTO.setSchemaName(\"userId\");\n+        schemaMappingTO.setSchemaType(SchemaType.UserSchema);\n         schemaMappingTOs.addMapping(schemaMappingTO);\n \n         schemaMappingTO = new SchemaMappingTO();\n         schemaMappingTO.setField(\"icon\");\n-        schemaMappingTO.setRoleSchema(\"icon\");\n+        schemaMappingTO.setSchemaName(\"icon\");\n+        schemaMappingTO.setSchemaType(SchemaType.RoleSchema);\n         schemaMappingTOs.addMapping(schemaMappingTO);\n \n         resourceTO.setMappings(schemaMappingTOs);\n@@ -111,8 +114,8 @@ public void update() {\n         for (int i = 3; i < 6; i++) {\n             schemaMappingTO = new SchemaMappingTO();\n             schemaMappingTO.setField(\"test\" + i);\n-            schemaMappingTO.setUserSchema(\"username\");\n-            schemaMappingTO.setRoleSchema(\"icon\");\n+            schemaMappingTO.setSchemaName(\"username\");\n+            schemaMappingTO.setSchemaType(SchemaType.UserSchema);\n             schemaMappingTOs.addMapping(schemaMappingTO);\n         }\n \n@@ -148,7 +151,7 @@ public void deleteWithException() {\n \n     @Test\n     public void delete() {\n-        final String resourceName = \"ws-target-resource-delete\";\n+        final String resourceName = \"ws-target-resource-1\";\n \n         restTemplate.delete(\n                 BASE_URL + \"resource/delete/{resourceName}.json\","},{"sha":"a10c713f4e1bfd949e714ae1ff2daa633bb385a5","filename":"core/src/test/java/org/syncope/core/test/rest/SchemaMappingTestITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaMappingTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaMappingTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaMappingTestITCase.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -25,6 +25,7 @@\n import org.syncope.client.to.SchemaMappingTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.types.SchemaType;\n \n public class SchemaMappingTestITCase extends AbstractTestITCase {\n \n@@ -60,8 +61,8 @@ public void create() {\n         for (int i = 0; i < 3; i++) {\n             mapping = new SchemaMappingTO();\n             mapping.setField(\"test\" + i);\n-            mapping.setUserSchema(\"username\");\n-            mapping.setRoleSchema(\"icon\");\n+            mapping.setSchemaName(\"username\");\n+            mapping.setSchemaType(SchemaType.UserSchema);\n             mappings.addMapping(mapping);\n         }\n "},{"sha":"1a311102f4c47064b4a7afa77bafe9626dcb2f65","filename":"core/src/test/java/org/syncope/core/test/rest/SchemaTestITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -14,15 +14,15 @@\n  */\n package org.syncope.core.test.rest;\n \n+import org.junit.Test;\n import org.syncope.types.SyncopeClientExceptionType;\n import org.syncope.client.validation.SyncopeClientException;\n import org.springframework.web.client.HttpClientErrorException;\n-import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.syncope.client.to.SchemaTO;\n import org.syncope.client.to.SchemaTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.types.SchemaType;\n+import org.syncope.types.SchemaValueType;\n import static org.junit.Assert.*;\n \n public class SchemaTestITCase extends AbstractTestITCase {\n@@ -32,7 +32,7 @@ public void create() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"testAttribute\");\n         schemaTO.setMandatory(true);\n-        schemaTO.setType(SchemaType.String);\n+        schemaTO.setType(SchemaValueType.String);\n \n         SchemaTO newSchemaTO = restTemplate.postForObject(BASE_URL\n                 + \"schema/user/create\", schemaTO, SchemaTO.class);\n@@ -95,7 +95,7 @@ public void update() {\n                 + \"schema/role/update\", schemaTO, SchemaTO.class);\n         assertEquals(schemaTO, updatedTO);\n \n-        updatedTO.setType(SchemaType.Date);\n+        updatedTO.setType(SchemaValueType.Date);\n         SyncopeClientException syncopeClientException = null;\n         try {\n             restTemplate.postForObject(BASE_URL"},{"sha":"0d4bc2fbb35bd0c39a4e002b156672e69aeb5ad7","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":45,"deletions":8,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -55,6 +55,11 @@ private UserTO getSampleTO(String email) {\n         surnameTO.addValue(\"Surname\");\n         userTO.addAttribute(surnameTO);\n \n+        AttributeTO typeTO = new AttributeTO();\n+        typeTO.setSchema(\"type\");\n+        typeTO.addValue(\"a type\");\n+        userTO.addAttribute(typeTO);\n+\n         AttributeTO userIdTO = new AttributeTO();\n         userIdTO.setSchema(\"userId\");\n         userIdTO.addValue(email);\n@@ -110,8 +115,7 @@ public void create() {\n         assertFalse(newUserTO.getAttributes().contains(\n                 attrWithInvalidSchemaTO));\n \n-        WorkflowActionsTO workflowActions = restTemplate.getForObject(BASE_URL\n-                + \"user/actions/{userId}\", WorkflowActionsTO.class,\n+        WorkflowActionsTO workflowActions = restTemplate.getForObject(BASE_URL + \"user/actions/{userId}\", WorkflowActionsTO.class,\n                 newUserTO.getId());\n         assertTrue(workflowActions.getActions().equals(\n                 Collections.singleton(Constants.ACTION_ACTIVATE)));\n@@ -120,8 +124,7 @@ public void create() {\n         newUserTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n                 newUserTO, UserTO.class);\n         assertEquals(\"active\",\n-                restTemplate.getForObject(BASE_URL + \"user/status/\"\n-                + newUserTO.getId(), String.class));\n+                restTemplate.getForObject(BASE_URL + \"user/status/\" + newUserTO.getId(), String.class));\n \n         // 3. try (and fail) to create another user with same (unique) values\n         userTO = getSampleTO(\"pippo@c.com\");\n@@ -142,6 +145,42 @@ public void create() {\n         assertTrue(syncopeClientException.getElements().contains(\"userId\"));\n     }\n \n+    @Test\n+    public void createWithRequiredValueMissing() {\n+        UserTO userTO = getSampleTO(\"a.b@c.it\");\n+\n+        AttributeTO type = null;\n+\n+        for (AttributeTO attr : userTO.getAttributes()) {\n+            if (\"type\".equals(attr.getSchema())) {\n+                type = attr;\n+            }\n+        }\n+\n+        assertNotNull(type);\n+\n+        userTO.removeAttribute(type);\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRole(8L);\n+        userTO.addMembership(membershipTO);\n+\n+        SyncopeClientCompositeErrorException ex = null;\n+\n+        try {\n+            // 1. create user\n+            restTemplate.postForObject(\n+                    BASE_URL + \"user/create?syncRoles=8\",\n+                    userTO, UserTO.class);\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            ex = e;\n+        }\n+\n+        assertNotNull(ex);\n+        assertNotNull(ex.getException(\n+                SyncopeClientExceptionType.RequiredValuesMissing));\n+    }\n+\n     @Test\n     public void delete() {\n         try {\n@@ -161,17 +200,15 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        UserTOs users = restTemplate.getForObject(BASE_URL\n-                + \"user/list.json\", UserTOs.class);\n+        UserTOs users = restTemplate.getForObject(BASE_URL + \"user/list.json\", UserTOs.class);\n \n         assertNotNull(users);\n         assertEquals(4, users.getUsers().size());\n     }\n \n     @Test\n     public void read() {\n-        UserTO userTO = restTemplate.getForObject(BASE_URL\n-                + \"user/read/{userId}.json\", UserTO.class, 1);\n+        UserTO userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getAttributes());"},{"sha":"9ff355709f3e03e7dbc58ebd28dff2620ae3ddee","filename":"core/src/test/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":74,"deletions":47,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -50,6 +50,7 @@\n     <Membership id=\"2\" syncopeUser_id=\"2\" syncopeRole_id=\"1\"/>\n     <Membership id=\"3\" syncopeUser_id=\"2\" syncopeRole_id=\"2\"/>\n     <Membership id=\"4\" syncopeUser_id=\"4\" syncopeRole_id=\"7\"/>\n+    <Membership id=\"5\" syncopeUser_id=\"1\" syncopeRole_id=\"8\"/>\n \n     <UserSchema name=\"username\" type=\"String\" virtual=\"F\"\n                 mandatory=\"T\" multivalue=\"F\" uniquevalue=\"T\"/>\n@@ -63,8 +64,10 @@\n                 mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\"/>\n     <UserSchema name=\"surname\" type=\"String\" virtual=\"F\"\n                 mandatory=\"T\" multivalue=\"F\" uniquevalue=\"F\"/>\n+    <UserSchema name=\"type\" type=\"String\" virtual=\"F\"\n+                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\"/>\n     <UserSchema name=\"email\" type=\"String\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"T\" uniquevalue=\"T\"\n+                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"T\"\n                 validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n     <UserSchema name=\"activationDate\" type=\"Date\" virtual=\"F\"\n                 mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\"\n@@ -113,10 +116,8 @@\n \n     <UserDerivedSchema name=\"cn\" expression=\"surname + ', ' + firstname\"/>\n     \n-    <UserSchemaDerivation derivedSchemas_name=\"cn\"\n-                          schemas_name=\"surname\"/>\n-    <UserSchemaDerivation derivedSchemas_name=\"cn\"\n-                          schemas_name=\"firstname\"/>\n+    <UserSchemaDerivation derivedSchemas_name=\"cn\" schemas_name=\"surname\"/>\n+    <UserSchemaDerivation derivedSchemas_name=\"cn\" schemas_name=\"firstname\"/>\n                                             \n     <UserDerivedAttribute id=\"1000\" derivedSchema_name=\"cn\" owner_id=\"3\"/>\n \n@@ -138,67 +139,93 @@\n                        version=\"0.1-SNAPSHOT\"\n                        xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A8888%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n \n-    <TargetResource name=\"ws-target-resource-1\" connector_id=\"100\"/>\n-    <TargetResource name=\"ws-target-resource-2\" connector_id=\"100\"/>\n-    <TargetResource name=\"ws-target-resource-list-mappings-1\" connector_id=\"100\"/>\n-    <TargetResource name=\"ws-target-resource-list-mappings-2\" connector_id=\"100\"/>\n-    <TargetResource name=\"ws-target-resource-delete\" connector_id=\"102\"/>\n-    <TargetResource name=\"ws-target-resource-update\" connector_id=\"100\"/>\n-\n-    <TargetResource_SyncopeUser TargetResource_name=\"ws-target-resource-delete\" users_id=\"3\" />\n-    <SyncopeUser_TargetResource SyncopeUser_id=\"3\" targetResources_name=\"ws-target-resource-delete\" />\n-\n-    <TargetResource_SyncopeRole TargetResource_name=\"ws-target-resource-list-mappings-1\" roles_id=\"3\" />\n-    <SyncopeRole_TargetResource SyncopeRole_id=\"3\" targetResources_name=\"ws-target-resource-list-mappings-1\" />\n-\n-    <TargetResource_SyncopeUser TargetResource_name=\"ws-target-resource-2\" users_id=\"3\" />\n-    <SyncopeUser_TargetResource SyncopeUser_id=\"3\" targetResources_name=\"ws-target-resource-2\" />\n-\n-    <TargetResource_SyncopeRole TargetResource_name=\"ws-target-resource-2\" roles_id=\"8\" />\n-    <SyncopeRole_TargetResource SyncopeRole_id=\"8\" targetResources_name=\"ws-target-resource-2\" />\n+    <TargetResource name=\"ws-target-resource-1\" connector_id=\"100\" forceMandatoryConstraint=\"T\"/>\n+    <TargetResource name=\"ws-target-resource-2\" connector_id=\"100\" forceMandatoryConstraint=\"T\"/>\n+    <TargetResource name=\"ws-target-resource-list-mappings-1\" connector_id=\"100\" forceMandatoryConstraint=\"F\"/>\n+    <TargetResource name=\"ws-target-resource-list-mappings-2\" connector_id=\"100\" forceMandatoryConstraint=\"F\"/>\n+    <TargetResource name=\"ws-target-resource-delete\" connector_id=\"102\" forceMandatoryConstraint=\"F\"/>\n+    <TargetResource name=\"ws-target-resource-update\" connector_id=\"100\" forceMandatoryConstraint=\"T\"/>\n \n-    <TargetResource_SyncopeRole TargetResource_name=\"ws-target-resource-list-mappings-2\" roles_id=\"3\" />\n-    <SyncopeRole_TargetResource SyncopeRole_id=\"3\" targetResources_name=\"ws-target-resource-list-mappings-2\" />\n+    <SyncopeUser_TargetResource users_id=\"3\" targetResources_name=\"ws-target-resource-delete\" />\n+    <SyncopeRole_TargetResource roles_id=\"3\" targetResources_name=\"ws-target-resource-list-mappings-1\" />\n+    <SyncopeUser_TargetResource users_id=\"3\" targetResources_name=\"ws-target-resource-2\" />\n+    <SyncopeRole_TargetResource roles_id=\"8\" targetResources_name=\"ws-target-resource-2\" />\n+    <SyncopeRole_TargetResource roles_id=\"3\" targetResources_name=\"ws-target-resource-list-mappings-2\" />\n \n-    <SchemaMapping id=\"99\" field=\"username\"\n-                   resource_name=\"ws-target-resource-delete\"\n-                   userSchema_name=\"email\" nullable=\"F\"\n+    <SchemaMapping id=\"99\" field=\"userid\"\n+                   resource_name=\"ws-target-resource-1\"\n+                   schemaName=\"AccountId\" schemaType=\"AccountId\" nullable=\"F\"\n                    accountid=\"T\" password=\"F\"/>\n \n-    <SchemaMapping id=\"100\" field=\"username\"\n+    <SchemaMapping id=\"100\" field=\"email\"\n                    resource_name=\"ws-target-resource-1\"\n-                   userSchema_name=\"email\" nullable=\"F\"\n+                   schemaName=\"email\" schemaType=\"UserSchema\" nullable=\"F\"\n                    accountid=\"T\" password=\"F\"/>\n+    <UserSchema_SchemaMapping UserSchema_name=\"email\" mappings_id=\"100\" />\n \n     <SchemaMapping id=\"101\" field=\"username\"\n                    resource_name=\"ws-target-resource-2\"\n-                   userSchema_name=\"username\" nullable=\"F\"\n+                   schemaName=\"username\" schemaType=\"UserSchema\" nullable=\"F\"\n                    accountid=\"T\" password=\"F\"/>\n-\n-    <SchemaMapping id=\"105\" field=\"cognome\"\n-                   resource_name=\"ws-target-resource-2\"\n-                   userSchema_name=\"surname\" nullable=\"F\"\n-                   accountid=\"F\" password=\"F\"/>\n-                   \n-    <SchemaMapping id=\"106\" field=\"password\"\n-                   resource_name=\"ws-target-resource-2\"\n-                   userSchema_name=\"surname\" nullable=\"F\"\n-                   accountid=\"F\" password=\"T\"/>\n+    <UserSchema_SchemaMapping UserSchema_name=\"username\" mappings_id=\"101\" />\n \n     <SchemaMapping id=\"102\" field=\"email\"\n                    resource_name=\"ws-target-resource-list-mappings-1\"\n-                   userSchema_name=\"email\" nullable=\"F\"\n+                   schemaName=\"email\" schemaType=\"UserSchema\" nullable=\"F\"\n                    accountid=\"T\" password=\"F\"/>\n+    <UserSchema_SchemaMapping UserSchema_name=\"email\" mappings_id=\"102\" />\n \n-    <SchemaMapping id=\"103\" field=\"firstname\"\n+    <SchemaMapping id=\"103\" field=\"surname\"\n                    resource_name=\"ws-target-resource-list-mappings-1\"\n-                   userSchema_name=\"email\" nullable=\"F\"\n-                   accountid=\"T\" password=\"F\"/>\n+                   schemaName=\"surname\" schemaType=\"UserSchema\" nullable=\"F\"\n+                   accountid=\"F\" password=\"F\"/>\n+    <UserSchema_SchemaMapping UserSchema_name=\"surname\" mappings_id=\"103\" />\n \n-    <SchemaMapping id=\"104\" field=\"firstname\"\n+    <SchemaMapping id=\"104\" field=\"userid\"\n                    resource_name=\"ws-target-resource-list-mappings-2\"\n-                   userSchema_name=\"email\" nullable=\"F\"\n+                   schemaName=\"userId\" schemaType=\"UserSchema\" nullable=\"F\"\n                    accountid=\"T\" password=\"F\"/>\n+    <UserSchema_SchemaMapping UserSchema_name=\"userId\" mappings_id=\"104\" />\n+\n+    <SchemaMapping id=\"105\" field=\"surname\"\n+                   resource_name=\"ws-target-resource-1\"\n+                   schemaName=\"surname\" schemaType=\"UserSchema\" nullable=\"F\"\n+                   accountid=\"F\" password=\"F\"/>\n+    <UserSchema_SchemaMapping UserSchema_name=\"surname\" mappings_id=\"105\" />\n+\n+    <SchemaMapping id=\"106\" field=\"password\"\n+                   resource_name=\"ws-target-resource-1\"\n+                   schemaName=\"Password\" schemaType=\"Password\" nullable=\"F\"\n+                   accountid=\"F\" password=\"T\"/>\n+\n+    <SchemaMapping id=\"107\" field=\"password\"\n+                   resource_name=\"ws-target-resource-2\"\n+                   schemaName=\"Password\" schemaType=\"Password\" nullable=\"F\"\n+                   accountid=\"F\" password=\"T\"/>\n+\n+    <SchemaMapping id=\"108\" field=\"type\"\n+                   resource_name=\"ws-target-resource-2\"\n+                   schemaName=\"type\" schemaType=\"UserSchema\" nullable=\"F\"\n+                   accountid=\"F\" password=\"F\"/>\n+    <UserSchema_SchemaMapping UserSchema_name=\"type\" mappings_id=\"108\" />\n+\n+    <SchemaMapping id=\"109\" field=\"surname\"\n+                   resource_name=\"ws-target-resource-2\"\n+                   schemaName=\"surname\" schemaType=\"UserSchema\" nullable=\"F\"\n+                   accountid=\"F\" password=\"F\"/>\n+    <UserSchema_SchemaMapping UserSchema_name=\"surname\" mappings_id=\"109\" />\n+\n+    <SchemaMapping id=\"110\" field=\"email\"\n+                   resource_name=\"ws-target-resource-update\"\n+                   schemaName=\"email\" schemaType=\"UserSchema\" nullable=\"T\"\n+                   accountid=\"F\" password=\"F\"/>\n+    <UserSchema_SchemaMapping UserSchema_name=\"email\" mappings_id=\"110\" />\n+\n+    <SchemaMapping id=\"111\" field=\"userId\"\n+                   resource_name=\"ws-target-resource-update\"\n+                   schemaName=\"userId\" schemaType=\"UserSchema\" nullable=\"T\"\n+                   accountid=\"F\" password=\"F\"/>\n+    <UserSchema_SchemaMapping UserSchema_name=\"userId\" mappings_id=\"111\" />\n \n     <Entitlement name=\"base\"/>\n     <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>"},{"sha":"67ee9a1d595420ee348ff2230b6007f6879a9d58","filename":"identityconnectors/bundles/staticws/staticwebservice/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/WebServiceConnector.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1faad82490ceaedebef60aca7a73b8284af8c9d/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1faad82490ceaedebef60aca7a73b8284af8c9d/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java?ref=f1faad82490ceaedebef60aca7a73b8284af8c9d","patch":"@@ -287,7 +287,7 @@ public Uid create(\n             if (value == null && !wsAttributeValue.isNullable()) {\n                 // TODO: provisioningexception\n                 throw new IllegalArgumentException(\n-                        \"Missing required parameter\");\n+                        \"Missing required parameter \" + attr.getName());\n             }\n \n             if (value instanceof GuardedString || value instanceof GuardedByteArray) {"}]}