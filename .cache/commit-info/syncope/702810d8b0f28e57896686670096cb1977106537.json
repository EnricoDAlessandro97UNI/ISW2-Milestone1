{"sha":"702810d8b0f28e57896686670096cb1977106537","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjcwMjgxMGQ4YjBmMjhlNTc4OTY2ODY2NzAwOTZjYjE5NzcxMDY1Mzc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-24T14:15:58Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-24T14:15:58Z"},"message":"[SYNCOPE-620] workflow-activiti in, IT needs to be adapted","tree":{"sha":"33a4f88fafd125e463c9af00041a0cf78f82247e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/33a4f88fafd125e463c9af00041a0cf78f82247e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/702810d8b0f28e57896686670096cb1977106537","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/702810d8b0f28e57896686670096cb1977106537","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/702810d8b0f28e57896686670096cb1977106537","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/702810d8b0f28e57896686670096cb1977106537/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0f9194eb702623b842828ab4ee6c0d569036d8cd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0f9194eb702623b842828ab4ee6c0d569036d8cd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0f9194eb702623b842828ab4ee6c0d569036d8cd"}],"stats":{"total":2941,"additions":2859,"deletions":82},"files":[{"sha":"e5f86d33cc982bb308058be4357f4f0e8de22243","filename":"syncope620/pom.xml","status":"modified","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fpom.xml?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -339,6 +339,8 @@ under the License.\n \n     <groovy.version>2.3.9</groovy.version>\n \n+    <activiti.version>5.16.4</activiti.version>\n+\n     <slf4j.version>1.7.10</slf4j.version>\n     <log4j.version>2.1</log4j.version>\n     <disruptor.version>3.3.0</disruptor.version>\n@@ -749,6 +751,49 @@ under the License.\n         <version>2.11.0</version>\n       </dependency>\n       \n+      <dependency>\n+        <groupId>org.activiti</groupId>\n+        <artifactId>activiti-engine</artifactId>\n+        <version>${activiti.version}</version>\n+        <!-- Using geronimo-* for this -->\n+        <exclusions>\n+          <exclusion>\n+            <groupId>javax.activation</groupId>\n+            <artifactId>activation</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>javax.mail</groupId>\n+            <artifactId>mail</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-beans</artifactId>\n+          </exclusion>\n+        </exclusions>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.activiti</groupId>\n+        <artifactId>activiti-spring</artifactId>\n+        <version>${activiti.version}</version>\n+        <exclusions>\n+          <exclusion>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-log4j12</artifactId>\n+          </exclusion>\n+        </exclusions>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.activiti</groupId>\n+        <artifactId>activiti-json-converter</artifactId>\n+        <version>${activiti.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.activiti</groupId>\n+        <artifactId>activiti-webapp-explorer2</artifactId>\n+        <version>${activiti.version}</version>\n+        <type>war</type>\n+      </dependency>\n+      \n       <dependency>\n         <groupId>org.slf4j</groupId>\n         <artifactId>slf4j-api</artifactId>"},{"sha":"7c6e43f9e41067bfb30cf3fcabe5172af5fff11d","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/ConfigurationLogic.java","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FConfigurationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FConfigurationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FConfigurationLogic.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.server.provisioning.api.data.ConfigurationDataBinder;\n import org.apache.syncope.server.logic.init.ImplementationClassNamesLoader;\n import org.apache.syncope.server.logic.init.WorkflowAdapterLoader;\n-import org.apache.syncope.server.provisioning.java.notification.NotificationManager;\n+import org.apache.syncope.server.provisioning.java.notification.NotificationManagerImpl;\n import org.apache.syncope.server.misc.spring.ResourceWithFallbackLoader;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.io.Resource;\n@@ -109,20 +109,18 @@ public Set<String> getValidators() {\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n     public Set<String> getMailTemplates() {\n-        Set<String> htmlTemplates = new HashSet<String>();\n-        Set<String> textTemplates = new HashSet<String>();\n+        Set<String> htmlTemplates = new HashSet<>();\n+        Set<String> textTemplates = new HashSet<>();\n \n         try {\n-            for (Resource resource : resourceLoader.getResources(NotificationManager.MAIL_TEMPLATES + \"*.vm\")) {\n+            for (Resource resource : resourceLoader.getResources(NotificationManagerImpl.MAIL_TEMPLATES + \"*.vm\")) {\n                 String template = resource.getURL().toExternalForm();\n-                if (template.endsWith(NotificationManager.MAIL_TEMPLATE_HTML_SUFFIX)) {\n-                    htmlTemplates.add(\n-                            template.substring(template.indexOf(NotificationManager.MAIL_TEMPLATES) + 14,\n-                                    template.indexOf(NotificationManager.MAIL_TEMPLATE_HTML_SUFFIX)));\n-                } else if (template.endsWith(NotificationManager.MAIL_TEMPLATE_TEXT_SUFFIX)) {\n-                    textTemplates.add(\n-                            template.substring(template.indexOf(NotificationManager.MAIL_TEMPLATES) + 14,\n-                                    template.indexOf(NotificationManager.MAIL_TEMPLATE_TEXT_SUFFIX)));\n+                if (template.endsWith(NotificationManagerImpl.MAIL_TEMPLATE_HTML_SUFFIX)) {\n+                    htmlTemplates.add(template.substring(template.indexOf(NotificationManagerImpl.MAIL_TEMPLATES) + 14,\n+                                    template.indexOf(NotificationManagerImpl.MAIL_TEMPLATE_HTML_SUFFIX)));\n+                } else if (template.endsWith(NotificationManagerImpl.MAIL_TEMPLATE_TEXT_SUFFIX)) {\n+                    textTemplates.add(template.substring(template.indexOf(NotificationManagerImpl.MAIL_TEMPLATES) + 14,\n+                                    template.indexOf(NotificationManagerImpl.MAIL_TEMPLATE_TEXT_SUFFIX)));\n                 } else {\n                     LOG.warn(\"Unexpected template found: {}, ignoring...\", template);\n                 }\n@@ -141,7 +139,7 @@ public Set<String> getMailTemplates() {\n     @Transactional(readOnly = true)\n     public void export(final OutputStream os) {\n         try {\n-            exporter.export(os, wfAdapterLoader.getTablePrefix());\n+            exporter.export(os, wfAdapterLoader.getPrefix());\n             LOG.debug(\"Database content successfully exported\");\n         } catch (Exception e) {\n             LOG.error(\"While exporting database content\", e);"},{"sha":"0e5ca8ec9c71a5178aa8cc53595cac43b207e37c","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/LogicInvocationHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FLogicInvocationHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FLogicInvocationHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FLogicInvocationHandler.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -22,7 +22,7 @@\n import java.util.Arrays;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.server.misc.AuditManager;\n-import org.apache.syncope.server.provisioning.java.notification.NotificationManager;\n+import org.apache.syncope.server.provisioning.api.notification.NotificationManager;\n import org.aspectj.lang.ProceedingJoinPoint;\n import org.aspectj.lang.annotation.Around;\n import org.aspectj.lang.annotation.Aspect;"},{"sha":"838827cd2e5b0dabccc4ed8eece801cfec9881f3","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/RoleLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FRoleLogic.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -125,7 +125,7 @@ public RoleTO readSelf(final Long roleKey) {\n         if (authUser == null) {\n             ownedRoleIds = Collections.<Long>emptySet();\n         } else {\n-            ownedRoleIds = authUser.getRoleIds();\n+            ownedRoleIds = authUser.getRoleKeys();\n         }\n \n         Set<Long> allowedRoleIds = RoleEntitlementUtil.getRoleKeys(AuthContextUtil.getOwnedEntitlementNames());"},{"sha":"fb9cbe789b4c83287bd42e2faa1f76164d2ee6df","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/init/WorkflowAdapterLoader.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FWorkflowAdapterLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FWorkflowAdapterLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FWorkflowAdapterLoader.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.server.persistence.api.SyncopeLoader;\n import org.apache.syncope.server.workflow.api.RoleWorkflowAdapter;\n import org.apache.syncope.server.workflow.api.UserWorkflowAdapter;\n-import org.apache.syncope.server.workflow.api.WorkflowInstanceLoader;\n+import org.apache.syncope.server.workflow.api.WorkflowDefinitionLoader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n@@ -45,7 +45,7 @@ public class WorkflowAdapterLoader implements BeanFactoryAware, SyncopeLoader {\n \n     private DefaultListableBeanFactory beanFactory;\n \n-    private WorkflowInstanceLoader wfLoader;\n+    private WorkflowDefinitionLoader wfLoader;\n \n     @Override\n     public void setBeanFactory(final BeanFactory beanFactory) throws BeansException {\n@@ -54,20 +54,20 @@ public void setBeanFactory(final BeanFactory beanFactory) throws BeansException\n \n     private void lazyInit() {\n         if (wfLoader == null) {\n-            if (uwfAdapter.getLoaderClass() != null) {\n-                wfLoader = (WorkflowInstanceLoader) beanFactory.createBean(\n-                        uwfAdapter.getLoaderClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+            if (uwfAdapter.getDefinitionLoaderClass() != null) {\n+                wfLoader = (WorkflowDefinitionLoader) beanFactory.createBean(\n+                        uwfAdapter.getDefinitionLoaderClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n             }\n-            if (rwfAdapter.getLoaderClass() != null) {\n-                wfLoader = (WorkflowInstanceLoader) beanFactory.createBean(\n-                        rwfAdapter.getLoaderClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+            if (rwfAdapter.getDefinitionLoaderClass() != null) {\n+                wfLoader = (WorkflowDefinitionLoader) beanFactory.createBean(\n+                        rwfAdapter.getDefinitionLoaderClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n             }\n         }\n     }\n \n-    public String getTablePrefix() {\n+    public String getPrefix() {\n         lazyInit();\n-        return wfLoader == null ? null : wfLoader.getTablePrefix();\n+        return wfLoader == null ? null : wfLoader.getPrefix();\n     }\n \n     public void init() {\n@@ -86,7 +86,7 @@ public Integer getPriority() {\n     public void load() {\n         lazyInit();\n         if (wfLoader == null) {\n-            LOG.debug(\"Configured workflow adapter does not need loading\");\n+            LOG.debug(\"The configured workflow adapter does not need loading\");\n         } else {\n             LOG.debug(\"Loading workflow adapter by {}\", wfLoader.getClass().getName());\n             wfLoader.load();"},{"sha":"de1c7d778476e01f7c9e36e0bd114e72f420dd84","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/notification/NotificationJob.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Fnotification%2FNotificationJob.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -31,8 +31,8 @@\n import org.apache.syncope.server.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.server.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.server.misc.AuditManager;\n-import org.apache.syncope.server.provisioning.java.notification.NotificationManager;\n import org.apache.syncope.server.misc.ExceptionUtil;\n+import org.apache.syncope.server.provisioning.api.notification.NotificationManager;\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.Job;\n import org.quartz.JobExecutionContext;"},{"sha":"3d25bc134be1b159298f6ddcf6c029e4376e76c5","filename":"syncope620/server/logic/src/test/java/org/apache/syncope/server/logic/NotificationTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FNotificationTest.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -62,8 +62,8 @@\n import org.apache.syncope.server.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.server.persistence.api.entity.conf.CPlainSchema;\n import org.apache.syncope.server.persistence.api.entity.task.NotificationTask;\n-import org.apache.syncope.server.provisioning.java.notification.NotificationManager;\n import org.apache.syncope.server.logic.notification.NotificationJob;\n+import org.apache.syncope.server.provisioning.api.notification.NotificationManager;\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;"},{"sha":"d6b30d0f4ebc18bb31191ae4ee15573203ddc888","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/server/persistence/api/entity/user/User.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -57,7 +57,7 @@ public interface User extends Subject<UPlainAttr, UDerAttr, UVirAttr> {\n \n     List<String> getPasswordHistory();\n \n-    Set<Long> getRoleIds();\n+    Set<Long> getRoleKeys();\n \n     List<Role> getRoles();\n "},{"sha":"8a60151324b1947c410cfe7c7f94da4f3a6f4fee","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -319,6 +319,7 @@ private void doExportTable(final TransformerHandler handler, final Connection co\n         }\n     }\n \n+    @Override\n     public void export(final OutputStream os, final String wfTablePrefix)\n             throws SAXException, TransformerConfigurationException {\n \n@@ -345,7 +346,7 @@ public void export(final OutputStream os, final String wfTablePrefix)\n \n             rs = meta.getTables(null, StringUtils.isBlank(dbSchema) ? null : dbSchema, null, new String[] { \"TABLE\" });\n \n-            final Set<String> tableNames = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);\n+            final Set<String> tableNames = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n \n             while (rs.next()) {\n                 String tableName = rs.getString(\"TABLE_NAME\");"},{"sha":"b7877d567d3453af8cb3f31270fbd864c7b58fe8","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -169,8 +169,8 @@ public List<Role> findOwnedByUser(final Long userKey) {\n \n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPARole.class.getSimpleName()).\n                 append(\" e WHERE e.userOwner=:owner \");\n-        for (Long roleId : owner.getRoleIds()) {\n-            queryString.append(\"OR e.roleOwner.id=\").append(roleId).append(' ');\n+        for (Long roleKey : owner.getRoleKeys()) {\n+            queryString.append(\"OR e.roleOwner.id=\").append(roleKey).append(' ');\n         }\n \n         TypedQuery<Role> query = entityManager.createQuery(queryString.toString(), Role.class);\n@@ -550,8 +550,8 @@ public Role authFetch(Long key) {\n             throw new NotFoundException(\"Role \" + key);\n         }\n \n-        Set<Long> allowedRoleIds = RoleEntitlementUtil.getRoleKeys(AuthContextUtil.getOwnedEntitlementNames());\n-        if (!allowedRoleIds.contains(role.getKey())) {\n+        Set<Long> allowedRoleKeys = RoleEntitlementUtil.getRoleKeys(AuthContextUtil.getOwnedEntitlementNames());\n+        if (!allowedRoleKeys.contains(role.getKey())) {\n             throw new UnauthorizedRoleException(role.getKey());\n         }\n         return role;"},{"sha":"b4a61719359539f17011268c88906ff7e178ccb8","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -241,11 +241,11 @@ private void securityChecks(final User user) {\n         if (!AuthContextUtil.getAuthenticatedUsername().equals(anonymousUser)\n                 && !AuthContextUtil.getAuthenticatedUsername().equals(user.getUsername())) {\n \n-            Set<Long> roleIds = user.getRoleIds();\n-            Set<Long> adminRoleIds = RoleEntitlementUtil.getRoleKeys(AuthContextUtil.getOwnedEntitlementNames());\n-            roleIds.removeAll(adminRoleIds);\n-            if (!roleIds.isEmpty()) {\n-                throw new UnauthorizedRoleException(roleIds);\n+            Set<Long> roleKeys = user.getRoleKeys();\n+            Set<Long> adminRoleKeys = RoleEntitlementUtil.getRoleKeys(AuthContextUtil.getOwnedEntitlementNames());\n+            roleKeys.removeAll(adminRoleKeys);\n+            if (!roleKeys.isEmpty()) {\n+                throw new UnauthorizedRoleException(roleKeys);\n             }\n         }\n     }"},{"sha":"276cf63c29d482a4a6c56fe3313941b4a181eb01","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -242,7 +242,7 @@ public List<Role> getRoles() {\n     }\n \n     @Override\n-    public Set<Long> getRoleIds() {\n+    public Set<Long> getRoleKeys() {\n         List<Role> roles = getRoles();\n \n         Set<Long> result = new HashSet<>(roles.size());"},{"sha":"112fabc7043df3110fc25abed7766aed4ed07afd","filename":"syncope620/server/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpom.xml?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -41,6 +41,7 @@ under the License.\n     <module>provisioning-java</module>\n     <module>workflow-api</module>\n     <module>workflow-java</module>\n+    <module>workflow-activiti</module>\n     <module>logic</module>\n     <module>rest-cxf</module>\n   </modules>"},{"sha":"f0ef4c8716620b2aff8b025922d1b314a93a2f40","filename":"syncope620/server/provisioning-api/src/main/java/org/apache/syncope/server/provisioning/api/notification/NotificationManager.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fnotification%2FNotificationManager.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.api.notification;\n+\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.server.persistence.api.entity.task.TaskExec;\n+\n+/**\n+ * Create notification tasks that will be executed by NotificationJob.\n+ *\n+ * @see org.apache.syncope.server.persistence.api.entity.task.NotificationTask\n+ */\n+public interface NotificationManager {\n+\n+    /**\n+     * Count the number of task executions of a given task with a given status.\n+     *\n+     * @param taskId task id\n+     * @param status status\n+     * @return number of task executions\n+     */\n+    long countExecutionsWithStatus(final Long taskId, final String status);\n+\n+    /**\n+     * Create notification tasks for each notification matching the given user id and (some of) tasks performed.\n+     */\n+    void createTasks(final AuditElements.EventCategoryType type, final String category, final String subcategory,\n+            final String event, final AuditElements.Result condition, final Object before, final Object output,\n+            final Object... input);\n+\n+    long getMaxRetries();\n+\n+    /**\n+     * Set execution state of NotificationTask with provided id.\n+     *\n+     * @param taskId task to be updated\n+     * @param executed execution state\n+     */\n+    void setTaskExecuted(final Long taskId, final boolean executed);\n+\n+    /**\n+     * Store execution of a NotificationTask.\n+     *\n+     * @param execution task execution.\n+     * @return merged task execution.\n+     */\n+    TaskExec storeExec(final TaskExec execution);\n+\n+}"},{"sha":"cf328ccce762f8df64c98c7f950017258fbf8a95","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/job/AbstractTaskJob.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -28,8 +28,8 @@\n import org.apache.syncope.server.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.server.provisioning.api.job.TaskJob;\n import org.apache.syncope.server.misc.AuditManager;\n-import org.apache.syncope.server.provisioning.java.notification.NotificationManager;\n import org.apache.syncope.server.misc.ExceptionUtil;\n+import org.apache.syncope.server.provisioning.api.notification.NotificationManager;\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;"},{"sha":"dd323bcc39ed6e5c1ee82fc6af560f7505e6bfd9","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/notification/NotificationManagerImpl.java","status":"renamed","additions":7,"deletions":28,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.server.provisioning.java.notification;\n \n+import org.apache.syncope.server.provisioning.api.notification.NotificationManager;\n import java.io.StringWriter;\n import java.util.ArrayList;\n import java.util.Collections;\n@@ -72,14 +73,9 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-/**\n- * Create notification tasks that will be executed by NotificationJob.\n- *\n- * @see NotificationTask\n- */\n @Component\n @Transactional(rollbackFor = { Throwable.class })\n-public class NotificationManager {\n+public class NotificationManagerImpl implements NotificationManager {\n \n     /**\n      * Logger.\n@@ -159,6 +155,7 @@ public class NotificationManager {\n     private AttributableUtilFactory attrUtilFactory;\n \n     @Transactional(readOnly = true)\n+    @Override\n     public long getMaxRetries() {\n         return confDAO.find(\"notification.maxRetries\", \"0\").getValues().get(0).getLongValue();\n     }\n@@ -262,9 +259,7 @@ protected Context createVelocityContext(Map<String, Object> model) {\n         return new VelocityContext(model, toolContext);\n     }\n \n-    /**\n-     * Create notification tasks for each notification matching the given user id and (some of) tasks performed.\n-     */\n+    @Override\n     public void createTasks(\n             final AuditElements.EventCategoryType type,\n             final String category,\n@@ -377,12 +372,7 @@ private String getRecipientEmail(\n         return email;\n     }\n \n-    /**\n-     * Store execution of a NotificationTask.\n-     *\n-     * @param execution task execution.\n-     * @return merged task execution.\n-     */\n+    @Override\n     public TaskExec storeExec(final TaskExec execution) {\n         NotificationTask task = taskDAO.find(execution.getTask().getKey());\n         task.addExec(execution);\n@@ -393,25 +383,14 @@ public TaskExec storeExec(final TaskExec execution) {\n         return execution;\n     }\n \n-    /**\n-     * Set execution state of NotificationTask with provided id.\n-     *\n-     * @param taskId task to be updated\n-     * @param executed execution state\n-     */\n+    @Override\n     public void setTaskExecuted(final Long taskId, final boolean executed) {\n         NotificationTask task = taskDAO.find(taskId);\n         task.setExecuted(executed);\n         taskDAO.save(task);\n     }\n \n-    /**\n-     * Count the number of task executions of a given task with a given status.\n-     *\n-     * @param taskId task id\n-     * @param status status\n-     * @return number of task executions\n-     */\n+    @Override\n     public long countExecutionsWithStatus(final Long taskId, final String status) {\n         NotificationTask task = taskDAO.find(taskId);\n         long count = 0;","previous_filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/notification/NotificationManager.java"},{"sha":"725a5616f3559c28d1a96aa886b868f711ddc1b9","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -47,10 +47,10 @@\n import org.apache.syncope.server.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.server.misc.AuditManager;\n-import org.apache.syncope.server.provisioning.java.notification.NotificationManager;\n import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.server.misc.ConnObjectUtil;\n import org.apache.syncope.server.misc.ExceptionUtil;\n+import org.apache.syncope.server.provisioning.api.notification.NotificationManager;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;"},{"sha":"c991685e492b6c646d8c1e72e92aa409efa33dec","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/AbstractSyncopeResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -32,8 +32,8 @@\n import org.apache.syncope.server.provisioning.api.sync.ProvisioningProfile;\n import org.apache.syncope.server.provisioning.api.sync.SyncopeResultHandler;\n import org.apache.syncope.server.misc.AuditManager;\n-import org.apache.syncope.server.provisioning.java.notification.NotificationManager;\n import org.apache.syncope.server.misc.ConnObjectUtil;\n+import org.apache.syncope.server.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.server.workflow.api.RoleWorkflowAdapter;\n import org.apache.syncope.server.workflow.api.UserWorkflowAdapter;\n import org.slf4j.Logger;"},{"sha":"5d2d6ad6916d9a661bd5f004fd0403b187ccb13a","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/LDAPMembershipSyncActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -47,7 +47,7 @@\n import org.apache.syncope.server.provisioning.api.sync.ProvisioningProfile;\n import org.apache.syncope.server.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.server.misc.AuditManager;\n-import org.apache.syncope.server.provisioning.java.notification.NotificationManager;\n+import org.apache.syncope.server.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.server.workflow.api.UserWorkflowAdapter;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ObjectClass;"},{"sha":"3d6db049d1730e0528b74503de99283e7a6e2284","filename":"syncope620/server/workflow-activiti/pom.xml","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fpom.xml?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,83 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope-server</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Server Workflow Activiti</name>\n+  <description>Apache Syncope Server Workflow Activiti</description>\n+  <groupId>org.apache.syncope.server</groupId>\n+  <artifactId>syncope-server-workflow-activiti</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>commons-io</groupId>\n+      <artifactId>commons-io</artifactId>\n+    </dependency>\n+      \n+    <dependency>\n+      <groupId>org.activiti</groupId>\n+      <artifactId>activiti-engine</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.activiti</groupId>\n+      <artifactId>activiti-spring</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.activiti</groupId>\n+      <artifactId>activiti-json-converter</artifactId>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.server</groupId>\n+      <artifactId>syncope-server-workflow-java</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.server</groupId>\n+      <artifactId>syncope-server-misc</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-pmd-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"05bcc94847e871086ec20e4a096522da5001e2c2","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/ActivitiDefinitionLoader.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FActivitiDefinitionLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FActivitiDefinitionLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FActivitiDefinitionLoader.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import javax.annotation.Resource;\n+import org.activiti.editor.constants.ModelDataJsonConstants;\n+import org.activiti.engine.RepositoryService;\n+import org.activiti.engine.repository.Model;\n+import org.activiti.engine.repository.ProcessDefinition;\n+import org.activiti.spring.SpringProcessEngineConfiguration;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.server.misc.spring.ResourceWithFallbackLoader;\n+import org.apache.syncope.server.workflow.api.WorkflowDefinitionLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class ActivitiDefinitionLoader implements WorkflowDefinitionLoader {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ActivitiDefinitionLoader.class);\n+\n+    @Resource(name = \"userWorkflowDef\")\n+    private ResourceWithFallbackLoader userWorkflowDef;\n+\n+    @Autowired\n+    private RepositoryService repositoryService;\n+\n+    @Autowired\n+    private SpringProcessEngineConfiguration conf;\n+\n+    @Autowired\n+    private ActivitiImportUtils importUtils;\n+\n+    @Override\n+    public String getPrefix() {\n+        return \"ACT_\";\n+    }\n+\n+    @Override\n+    public void init() {\n+        // jump to the next ID block\n+        for (int i = 0; i < conf.getIdBlockSize(); i++) {\n+            conf.getIdGenerator().getNextId();\n+        }\n+    }\n+\n+    @Override\n+    public void load() {\n+        List<ProcessDefinition> processes = repositoryService.createProcessDefinitionQuery().processDefinitionKey(\n+                ActivitiUserWorkflowAdapter.WF_PROCESS_ID).list();\n+        LOG.debug(ActivitiUserWorkflowAdapter.WF_PROCESS_ID + \" Activiti processes in repository: {}\", processes);\n+\n+        // Only loads process definition from file if not found in repository\n+        if (processes.isEmpty()) {\n+            InputStream wfIn = null;\n+            try {\n+                wfIn = userWorkflowDef.getResource().getInputStream();\n+                repositoryService.createDeployment().addInputStream(ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE,\n+                        new ByteArrayInputStream(IOUtils.toByteArray(wfIn))).deploy();\n+\n+                ProcessDefinition procDef = repositoryService.createProcessDefinitionQuery().processDefinitionKey(\n+                        ActivitiUserWorkflowAdapter.WF_PROCESS_ID).latestVersion().singleResult();\n+\n+                Model model = repositoryService.newModel();\n+                ObjectNode modelObjectNode = new ObjectMapper().createObjectNode();\n+                modelObjectNode.put(ModelDataJsonConstants.MODEL_NAME, procDef.getName());\n+                modelObjectNode.put(ModelDataJsonConstants.MODEL_REVISION, 1);\n+                modelObjectNode.put(ModelDataJsonConstants.MODEL_DESCRIPTION, procDef.getDescription());\n+                model.setMetaInfo(modelObjectNode.toString());\n+                model.setName(procDef.getName());\n+                model.setDeploymentId(procDef.getDeploymentId());\n+                importUtils.fromJSON(procDef, model);\n+\n+                LOG.debug(\"Activiti Workflow definition loaded\");\n+            } catch (IOException e) {\n+                LOG.error(\"While loading \" + ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, e);\n+            } finally {\n+                IOUtils.closeQuietly(wfIn);\n+            }\n+        }\n+    }\n+}"},{"sha":"388f7e9490966f341b8ff1cfd76855a416535eaa","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/ActivitiImportUtils.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FActivitiImportUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FActivitiImportUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FActivitiImportUtils.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+import org.activiti.bpmn.converter.BpmnXMLConverter;\n+import org.activiti.bpmn.model.BpmnModel;\n+import org.activiti.editor.language.json.converter.BpmnJsonConverter;\n+import org.activiti.engine.ActivitiException;\n+import org.activiti.engine.RepositoryService;\n+import org.activiti.engine.repository.Model;\n+import org.activiti.engine.repository.ProcessDefinition;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.server.workflow.api.WorkflowException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ActivitiImportUtils {\n+\n+    @Autowired\n+    private RepositoryService repositoryService;\n+\n+    public void fromXML(final byte[] definition) {\n+        try {\n+            repositoryService.createDeployment().addInputStream(ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE,\n+                    new ByteArrayInputStream(definition)).deploy();\n+        } catch (ActivitiException e) {\n+            throw new WorkflowException(\"While updating process \" + ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, e);\n+        }\n+    }\n+\n+    public void fromJSON(final byte[] definition, final ProcessDefinition procDef, final Model model) {\n+        try {\n+            model.setVersion(procDef.getVersion());\n+            model.setDeploymentId(procDef.getDeploymentId());\n+            repositoryService.saveModel(model);\n+\n+            repositoryService.addModelEditorSource(model.getId(), definition);\n+        } catch (Exception e) {\n+            throw new WorkflowException(\"While updating process \" + ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, e);\n+        }\n+    }\n+\n+    public void fromJSON(final ProcessDefinition procDef, final Model model) {\n+        InputStream bpmnStream = null;\n+        InputStreamReader isr = null;\n+        XMLStreamReader xtr = null;\n+        try {\n+            bpmnStream = repositoryService.getResourceAsStream(\n+                    procDef.getDeploymentId(), procDef.getResourceName());\n+            isr = new InputStreamReader(bpmnStream);\n+            xtr = XMLInputFactory.newInstance().createXMLStreamReader(isr);\n+            BpmnModel bpmnModel = new BpmnXMLConverter().convertToBpmnModel(xtr);\n+\n+            fromJSON(new BpmnJsonConverter().convertToJson(bpmnModel).toString().getBytes(), procDef, model);\n+        } catch (Exception e) {\n+            throw new WorkflowException(\"While updating process \" + ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, e);\n+        } finally {\n+            if (xtr != null) {\n+                try {\n+                    xtr.close();\n+                } catch (XMLStreamException e) {\n+                    // ignore\n+                }\n+            }\n+            IOUtils.closeQuietly(isr);\n+            IOUtils.closeQuietly(bpmnStream);\n+        }\n+    }\n+}"},{"sha":"604848b087dbd34cbb5a1cc459c206125f37cdaa","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"added","additions":893,"deletions":0,"changes":893,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,893 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.annotation.Resource;\n+import javax.ws.rs.NotFoundException;\n+import org.activiti.bpmn.converter.BpmnXMLConverter;\n+import org.activiti.bpmn.model.BpmnModel;\n+import org.activiti.editor.constants.ModelDataJsonConstants;\n+import org.activiti.editor.language.json.converter.BpmnJsonConverter;\n+import org.activiti.engine.ActivitiException;\n+import org.activiti.engine.FormService;\n+import org.activiti.engine.HistoryService;\n+import org.activiti.engine.RepositoryService;\n+import org.activiti.engine.RuntimeService;\n+import org.activiti.engine.TaskService;\n+import org.activiti.engine.form.FormProperty;\n+import org.activiti.engine.form.FormType;\n+import org.activiti.engine.form.TaskFormData;\n+import org.activiti.engine.history.HistoricActivityInstance;\n+import org.activiti.engine.history.HistoricDetail;\n+import org.activiti.engine.history.HistoricTaskInstance;\n+import org.activiti.engine.impl.persistence.entity.HistoricFormPropertyEntity;\n+import org.activiti.engine.query.Query;\n+import org.activiti.engine.repository.Model;\n+import org.activiti.engine.repository.ProcessDefinition;\n+import org.activiti.engine.runtime.ProcessInstance;\n+import org.activiti.engine.task.Task;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n+import org.apache.syncope.common.lib.to.WorkflowFormTO;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.common.lib.types.WorkflowFormPropertyType;\n+import org.apache.syncope.server.misc.security.AuthContextUtil;\n+import org.apache.syncope.server.misc.security.UnauthorizedRoleException;\n+import org.apache.syncope.server.misc.spring.BeanUtils;\n+import org.apache.syncope.server.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.server.persistence.api.attrvalue.validation.ParsingValidationException;\n+import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.apache.syncope.server.provisioning.api.WorkflowResult;\n+import org.apache.syncope.server.provisioning.api.data.UserDataBinder;\n+import org.apache.syncope.server.workflow.api.WorkflowDefinitionFormat;\n+import org.apache.syncope.server.workflow.api.WorkflowException;\n+import org.apache.syncope.server.workflow.api.WorkflowDefinitionLoader;\n+import org.apache.syncope.server.workflow.java.AbstractUserWorkflowAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Activiti (http://www.activiti.org/) based implementation.\n+ */\n+public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(ActivitiUserWorkflowAdapter.class);\n+\n+    private static final String[] PROPERTY_IGNORE_PROPS = { \"type\" };\n+\n+    public static final String WF_PROCESS_ID = \"userWorkflow\";\n+\n+    public static final String WF_PROCESS_RESOURCE = \"userWorkflow.bpmn20.xml\";\n+\n+    public static final String WF_DGRM_RESOURCE = \"userWorkflow.userWorkflow.png\";\n+\n+    public static final String SYNCOPE_USER = \"user\";\n+\n+    public static final String WF_EXECUTOR = \"wfExecutor\";\n+\n+    public static final String FORM_SUBMITTER = \"formSubmitter\";\n+\n+    public static final String USER_TO = \"userTO\";\n+\n+    public static final String ENABLED = \"enabled\";\n+\n+    public static final String USER_MOD = \"userMod\";\n+\n+    public static final String EMAIL_KIND = \"emailKind\";\n+\n+    public static final String TASK = \"task\";\n+\n+    public static final String TOKEN = \"token\";\n+\n+    public static final String PASSWORD = \"password\";\n+\n+    public static final String PROP_BY_RESOURCE = \"propByResource\";\n+\n+    public static final String PROPAGATE_ENABLE = \"propagateEnable\";\n+\n+    public static final String ENCRYPTED_PWD = \"encryptedPwd\";\n+\n+    public static final String TASK_IS_FORM = \"taskIsForm\";\n+\n+    public static final String MODEL_DATA_JSON_MODEL = \"model\";\n+\n+    public static final String STORE_PASSWORD = \"storePassword\";\n+\n+    public static final String EVENT = \"event\";\n+\n+    @Resource(name = \"adminUser\")\n+    private String adminUser;\n+\n+    @Autowired\n+    private RuntimeService runtimeService;\n+\n+    @Autowired\n+    private TaskService taskService;\n+\n+    @Autowired\n+    private FormService formService;\n+\n+    @Autowired\n+    private HistoryService historyService;\n+\n+    @Autowired\n+    private RepositoryService repositoryService;\n+\n+    @Autowired\n+    private ActivitiImportUtils importUtils;\n+\n+    @Autowired\n+    private UserDataBinder userDataBinder;\n+\n+    @Override\n+    public Class<? extends WorkflowDefinitionLoader> getDefinitionLoaderClass() {\n+        return ActivitiDefinitionLoader.class;\n+    }\n+\n+    private void throwException(final ActivitiException e, final String defaultMessage) {\n+        if (e.getCause() != null) {\n+            if (e.getCause().getCause() instanceof SyncopeClientException) {\n+                throw (SyncopeClientException) e.getCause().getCause();\n+            } else if (e.getCause().getCause() instanceof ParsingValidationException) {\n+                throw (ParsingValidationException) e.getCause().getCause();\n+            } else if (e.getCause().getCause() instanceof InvalidEntityException) {\n+                throw (InvalidEntityException) e.getCause().getCause();\n+            }\n+        }\n+\n+        throw new WorkflowException(defaultMessage, e);\n+    }\n+\n+    private void updateStatus(final User user) {\n+        List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n+        if (tasks.isEmpty() || tasks.size() > 1) {\n+            LOG.warn(\"While setting user status: unexpected task number ({})\", tasks.size());\n+        } else {\n+            user.setStatus(tasks.get(0).getTaskDefinitionKey());\n+        }\n+    }\n+\n+    private String getFormTask(final User user) {\n+        String result = null;\n+\n+        List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n+        if (tasks.isEmpty() || tasks.size() > 1) {\n+            LOG.warn(\"While checking if form task: unexpected task number ({})\", tasks.size());\n+        } else {\n+            try {\n+                TaskFormData formData = formService.getTaskFormData(tasks.get(0).getId());\n+                if (formData != null && !formData.getFormProperties().isEmpty()) {\n+                    result = tasks.get(0).getId();\n+                }\n+            } catch (ActivitiException e) {\n+                LOG.warn(\"Could not get task form data\", e);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private Set<String> getPerformedTasks(final User user) {\n+        final Set<String> result = new HashSet<>();\n+\n+        for (HistoricActivityInstance task\n+                : historyService.createHistoricActivityInstanceQuery().executionId(user.getWorkflowId()).list()) {\n+\n+            result.add(task.getActivityId());\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Saves resources to be propagated and password for later - after form submission - propagation.\n+     */\n+    private void saveForFormSubmit(final User user, final String password,\n+            final PropagationByResource propByRes) {\n+\n+        String formTaskId = getFormTask(user);\n+        if (formTaskId != null) {\n+            // SYNCOPE-238: This is needed to simplify the task query in this.getForms()\n+            taskService.setVariableLocal(formTaskId, TASK_IS_FORM, Boolean.TRUE);\n+            runtimeService.setVariable(user.getWorkflowId(), PROP_BY_RESOURCE, propByRes);\n+            if (propByRes != null) {\n+                propByRes.clear();\n+            }\n+\n+            if (StringUtils.isNotBlank(password)) {\n+                runtimeService.setVariable(user.getWorkflowId(), ENCRYPTED_PWD, encrypt(password));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n+            final boolean storePassword) throws WorkflowException {\n+\n+        return create(userTO, disablePwdPolicyCheck, null, storePassword);\n+    }\n+\n+    @Override\n+    public WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean storePassword) throws\n+            UnauthorizedRoleException, WorkflowException {\n+\n+        return create(userTO, false, storePassword);\n+    }\n+\n+    @Override\n+    public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n+            final Boolean enabled, final boolean storePassword) throws WorkflowException {\n+\n+        final Map<String, Object> variables = new HashMap<>();\n+        variables.put(WF_EXECUTOR, AuthContextUtil.getAuthenticatedUsername());\n+        variables.put(USER_TO, userTO);\n+        variables.put(ENABLED, enabled);\n+        variables.put(STORE_PASSWORD, storePassword);\n+\n+        ProcessInstance processInstance = null;\n+        try {\n+            processInstance = runtimeService.startProcessInstanceByKey(WF_PROCESS_ID, variables);\n+        } catch (ActivitiException e) {\n+            throwException(e, \"While starting \" + WF_PROCESS_ID + \" instance\");\n+        }\n+\n+        User user =\n+                runtimeService.getVariable(processInstance.getProcessInstanceId(), SYNCOPE_USER, User.class);\n+\n+        Boolean updatedEnabled =\n+                runtimeService.getVariable(processInstance.getProcessInstanceId(), ENABLED, Boolean.class);\n+        if (updatedEnabled != null) {\n+            user.setSuspended(!updatedEnabled);\n+        }\n+\n+        // this will make UserValidator not to consider password policies at all\n+        if (disablePwdPolicyCheck) {\n+            user.removeClearPassword();\n+        }\n+\n+        updateStatus(user);\n+        user = userDAO.save(user);\n+\n+        Boolean propagateEnable =\n+                runtimeService.getVariable(processInstance.getProcessInstanceId(), PROPAGATE_ENABLE, Boolean.class);\n+        if (propagateEnable == null) {\n+            propagateEnable = enabled;\n+        }\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.set(ResourceOperation.CREATE, user.getResourceNames());\n+\n+        saveForFormSubmit(user, userTO.getPassword(), propByRes);\n+\n+        return new WorkflowResult<Map.Entry<Long, Boolean>>(\n+                new SimpleEntry<>(user.getKey(), propagateEnable), propByRes, getPerformedTasks(user));\n+    }\n+\n+    private Set<String> doExecuteTask(final User user, final String task,\n+            final Map<String, Object> moreVariables) throws WorkflowException {\n+\n+        Set<String> preTasks = getPerformedTasks(user);\n+\n+        final Map<String, Object> variables = new HashMap<>();\n+        variables.put(WF_EXECUTOR, AuthContextUtil.getAuthenticatedUsername());\n+        variables.put(TASK, task);\n+\n+        // using BeanUtils to access all user's properties and trigger lazy loading - we are about to\n+        // serialize a User instance for availability within workflow tasks, and this breaks transactions\n+        BeanUtils.copyProperties(user, entityFactory.newEntity(User.class));\n+        variables.put(SYNCOPE_USER, user);\n+\n+        if (moreVariables != null && !moreVariables.isEmpty()) {\n+            variables.putAll(moreVariables);\n+        }\n+\n+        if (StringUtils.isBlank(user.getWorkflowId())) {\n+            throw new WorkflowException(new NotFoundException(\"Empty workflow id for \" + user));\n+        }\n+\n+        List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n+        if (tasks.size() == 1) {\n+            try {\n+                taskService.complete(tasks.get(0).getId(), variables);\n+            } catch (ActivitiException e) {\n+                throwException(e, \"While completing task '\" + tasks.get(0).getName() + \"' for \" + user);\n+            }\n+        } else {\n+            LOG.warn(\"Expected a single task, found {}\", tasks.size());\n+        }\n+\n+        Set<String> postTasks = getPerformedTasks(user);\n+        postTasks.removeAll(preTasks);\n+        postTasks.add(task);\n+        return postTasks;\n+    }\n+\n+    @Override\n+    protected WorkflowResult<Long> doActivate(final User user, final String token)\n+            throws WorkflowException {\n+\n+        Set<String> tasks = doExecuteTask(user, \"activate\", Collections.singletonMap(TOKEN, (Object) token));\n+\n+        updateStatus(user);\n+        User updated = userDAO.save(user);\n+\n+        return new WorkflowResult<>(updated.getKey(), null, tasks);\n+    }\n+\n+    @Override\n+    protected WorkflowResult<Map.Entry<UserMod, Boolean>> doUpdate(final User user, final UserMod userMod)\n+            throws WorkflowException {\n+\n+        Set<String> tasks = doExecuteTask(user, \"update\", Collections.singletonMap(USER_MOD, (Object) userMod));\n+\n+        updateStatus(user);\n+        User updated = userDAO.save(user);\n+\n+        PropagationByResource propByRes =\n+                runtimeService.getVariable(user.getWorkflowId(), PROP_BY_RESOURCE, PropagationByResource.class);\n+\n+        saveForFormSubmit(updated, userMod.getPassword(), propByRes);\n+\n+        Boolean propagateEnable = runtimeService.getVariable(user.getWorkflowId(), PROPAGATE_ENABLE, Boolean.class);\n+\n+        return new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n+                new SimpleEntry<>(userMod, propagateEnable), propByRes, tasks);\n+    }\n+\n+    @Override\n+    @Transactional(rollbackFor = { Throwable.class })\n+    protected WorkflowResult<Long> doSuspend(final User user) throws WorkflowException {\n+        Set<String> performedTasks = doExecuteTask(user, \"suspend\", null);\n+        updateStatus(user);\n+        User updated = userDAO.save(user);\n+\n+        return new WorkflowResult<>(updated.getKey(), null, performedTasks);\n+    }\n+\n+    @Override\n+    protected WorkflowResult<Long> doReactivate(final User user) throws WorkflowException {\n+        Set<String> performedTasks = doExecuteTask(user, \"reactivate\", null);\n+        updateStatus(user);\n+\n+        User updated = userDAO.save(user);\n+\n+        return new WorkflowResult<>(updated.getKey(), null, performedTasks);\n+    }\n+\n+    @Override\n+    protected void doRequestPasswordReset(final User user) throws WorkflowException {\n+        Map<String, Object> variables = new HashMap<>(2);\n+        variables.put(USER_TO, userDataBinder.getUserTO(user));\n+        variables.put(EVENT, \"requestPasswordReset\");\n+\n+        doExecuteTask(user, \"requestPasswordReset\", variables);\n+        userDAO.save(user);\n+    }\n+\n+    @Override\n+    protected void doConfirmPasswordReset(final User user, final String token, final String password)\n+            throws WorkflowException {\n+\n+        Map<String, Object> variables = new HashMap<>(4);\n+        variables.put(TOKEN, token);\n+        variables.put(PASSWORD, password);\n+        variables.put(USER_TO, userDataBinder.getUserTO(user));\n+        variables.put(EVENT, \"confirmPasswordReset\");\n+\n+        doExecuteTask(user, \"confirmPasswordReset\", variables);\n+        userDAO.save(user);\n+    }\n+\n+    @Override\n+    protected void doDelete(final User user) throws WorkflowException {\n+        doExecuteTask(user, \"delete\", null);\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.set(ResourceOperation.DELETE, user.getResourceNames());\n+\n+        saveForFormSubmit(user, null, propByRes);\n+\n+        if (runtimeService.createProcessInstanceQuery().\n+                processInstanceId(user.getWorkflowId()).active().list().isEmpty()) {\n+\n+            userDAO.delete(user.getKey());\n+\n+            if (!historyService.createHistoricProcessInstanceQuery().\n+                    processInstanceId(user.getWorkflowId()).list().isEmpty()) {\n+\n+                historyService.deleteHistoricProcessInstance(user.getWorkflowId());\n+            }\n+        } else {\n+            updateStatus(user);\n+            userDAO.save(user);\n+        }\n+    }\n+\n+    @Override\n+    public WorkflowResult<Long> execute(final UserTO userTO, final String taskId)\n+            throws UnauthorizedRoleException, WorkflowException {\n+\n+        User user = userDAO.authFetch(userTO.getKey());\n+\n+        final Map<String, Object> variables = new HashMap<>();\n+        variables.put(USER_TO, userTO);\n+\n+        Set<String> performedTasks = doExecuteTask(user, taskId, variables);\n+        updateStatus(user);\n+        User updated = userDAO.save(user);\n+\n+        return new WorkflowResult<>(updated.getKey(), null, performedTasks);\n+    }\n+\n+    protected ProcessDefinition getProcessDefinition() {\n+        try {\n+            return repositoryService.createProcessDefinitionQuery().processDefinitionKey(\n+                    ActivitiUserWorkflowAdapter.WF_PROCESS_ID).latestVersion().singleResult();\n+        } catch (ActivitiException e) {\n+            throw new WorkflowException(\"While accessing process \" + ActivitiUserWorkflowAdapter.WF_PROCESS_ID, e);\n+        }\n+\n+    }\n+\n+    protected Model getModel(final ProcessDefinition procDef) {\n+        try {\n+            Model model = repositoryService.createModelQuery().deploymentId(procDef.getDeploymentId()).singleResult();\n+            if (model == null) {\n+                throw new NotFoundException(\"Could not find Model for deployment \" + procDef.getDeploymentId());\n+            }\n+            return model;\n+        } catch (Exception e) {\n+            throw new WorkflowException(\"While accessing process \" + ActivitiUserWorkflowAdapter.WF_PROCESS_ID, e);\n+        }\n+    }\n+\n+    protected void exportProcessResource(final String resourceName, final OutputStream os) {\n+        ProcessDefinition procDef = getProcessDefinition();\n+\n+        InputStream procDefIS = repositoryService.getResourceAsStream(procDef.getDeploymentId(), resourceName);\n+        try {\n+            IOUtils.copy(procDefIS, os);\n+        } catch (IOException e) {\n+            LOG.error(\"While exporting workflow definition {}\", procDef.getKey(), e);\n+        } finally {\n+            IOUtils.closeQuietly(procDefIS);\n+        }\n+    }\n+\n+    protected void exportProcessModel(final OutputStream os) {\n+        Model model = getModel(getProcessDefinition());\n+\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        try {\n+            ObjectNode modelNode = (ObjectNode) objectMapper.readTree(model.getMetaInfo());\n+            modelNode.put(ModelDataJsonConstants.MODEL_ID, model.getKey());\n+            modelNode.replace(MODEL_DATA_JSON_MODEL,\n+                    objectMapper.readTree(repositoryService.getModelEditorSource(model.getKey())));\n+\n+            os.write(modelNode.toString().getBytes());\n+        } catch (IOException e) {\n+            LOG.error(\"While exporting workflow definition {}\", model.getKey(), e);\n+        }\n+    }\n+\n+    @Override\n+    public void exportDefinition(final WorkflowDefinitionFormat format, final OutputStream os)\n+            throws WorkflowException {\n+\n+        switch (format) {\n+            case JSON:\n+                exportProcessModel(os);\n+                break;\n+\n+            case XML:\n+            default:\n+                exportProcessResource(WF_PROCESS_RESOURCE, os);\n+        }\n+    }\n+\n+    @Override\n+    public void exportDiagram(final OutputStream os) throws WorkflowException {\n+        exportProcessResource(WF_DGRM_RESOURCE, os);\n+    }\n+\n+    @Override\n+    public void importDefinition(final WorkflowDefinitionFormat format, final String definition)\n+            throws WorkflowException {\n+\n+        Model model = getModel(getProcessDefinition());\n+        switch (format) {\n+            case JSON:\n+                JsonNode definitionNode;\n+                try {\n+                    definitionNode = new ObjectMapper().readTree(definition);\n+                    if (definitionNode.has(MODEL_DATA_JSON_MODEL)) {\n+                        definitionNode = definitionNode.get(MODEL_DATA_JSON_MODEL);\n+                    }\n+                    if (!definitionNode.has(BpmnJsonConverter.EDITOR_CHILD_SHAPES)) {\n+                        throw new IllegalArgumentException(\n+                                \"Could not find JSON node \" + BpmnJsonConverter.EDITOR_CHILD_SHAPES);\n+                    }\n+\n+                    BpmnModel bpmnModel = new BpmnJsonConverter().convertToBpmnModel(definitionNode);\n+                    importUtils.fromXML(new BpmnXMLConverter().convertToXML(bpmnModel));\n+                } catch (Exception e) {\n+                    throw new WorkflowException(\"While updating process \"\n+                            + ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, e);\n+                }\n+\n+                importUtils.fromJSON(definitionNode.toString().getBytes(), getProcessDefinition(), model);\n+                break;\n+\n+            case XML:\n+            default:\n+                importUtils.fromXML(definition.getBytes());\n+\n+                importUtils.fromJSON(getProcessDefinition(), model);\n+        }\n+    }\n+\n+    private WorkflowFormPropertyType fromActivitiFormType(final FormType activitiFormType) {\n+        WorkflowFormPropertyType result = WorkflowFormPropertyType.String;\n+\n+        if (\"string\".equals(activitiFormType.getName())) {\n+            result = WorkflowFormPropertyType.String;\n+        }\n+        if (\"long\".equals(activitiFormType.getName())) {\n+            result = WorkflowFormPropertyType.Long;\n+        }\n+        if (\"enum\".equals(activitiFormType.getName())) {\n+            result = WorkflowFormPropertyType.Enum;\n+        }\n+        if (\"date\".equals(activitiFormType.getName())) {\n+            result = WorkflowFormPropertyType.Date;\n+        }\n+        if (\"boolean\".equals(activitiFormType.getName())) {\n+            result = WorkflowFormPropertyType.Boolean;\n+        }\n+\n+        return result;\n+    }\n+\n+    private WorkflowFormTO getFormTO(final Task task) {\n+        return getFormTO(task, formService.getTaskFormData(task.getId()));\n+    }\n+\n+    private WorkflowFormTO getFormTO(final Task task, final TaskFormData fd) {\n+        final WorkflowFormTO formTO =\n+                getFormTO(task.getProcessInstanceId(), task.getId(), fd.getFormKey(), fd.getFormProperties());\n+\n+        BeanUtils.copyProperties(task, formTO);\n+        return formTO;\n+    }\n+\n+    private WorkflowFormTO getFormTO(final HistoricTaskInstance task) {\n+        final List<HistoricFormPropertyEntity> props = new ArrayList<>();\n+\n+        for (HistoricDetail historicDetail : historyService.createHistoricDetailQuery().taskId(task.getId()).list()) {\n+\n+            if (historicDetail instanceof HistoricFormPropertyEntity) {\n+                props.add((HistoricFormPropertyEntity) historicDetail);\n+            }\n+        }\n+\n+        final WorkflowFormTO formTO = getHistoricFormTO(\n+                task.getProcessInstanceId(), task.getId(), task.getFormKey(), props);\n+        BeanUtils.copyProperties(task, formTO);\n+\n+        final HistoricActivityInstance historicActivityInstance = historyService.createHistoricActivityInstanceQuery().\n+                executionId(task.getExecutionId()).activityType(\"userTask\").activityName(task.getName()).singleResult();\n+\n+        if (historicActivityInstance != null) {\n+            formTO.setCreateTime(historicActivityInstance.getStartTime());\n+            formTO.setDueDate(historicActivityInstance.getEndTime());\n+        }\n+\n+        return formTO;\n+    }\n+\n+    private WorkflowFormTO getHistoricFormTO(\n+            final String processInstanceId,\n+            final String taskId,\n+            final String formKey,\n+            final List<HistoricFormPropertyEntity> props) {\n+\n+        WorkflowFormTO formTO = new WorkflowFormTO();\n+\n+        User user = userDAO.findByWorkflowId(processInstanceId);\n+        if (user == null) {\n+            throw new NotFoundException(\"User with workflow id \" + processInstanceId);\n+        }\n+        formTO.setUserKey(user.getKey());\n+\n+        formTO.setTaskId(taskId);\n+        formTO.setKey(formKey);\n+\n+        for (HistoricFormPropertyEntity prop : props) {\n+            WorkflowFormPropertyTO propertyTO = new WorkflowFormPropertyTO();\n+            propertyTO.setKey(prop.getPropertyId());\n+            propertyTO.setName(prop.getPropertyId());\n+            propertyTO.setValue(prop.getPropertyValue());\n+            formTO.addProperty(propertyTO);\n+        }\n+\n+        return formTO;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private WorkflowFormTO getFormTO(\n+            final String processInstanceId,\n+            final String taskId,\n+            final String formKey,\n+            final List<FormProperty> properties) {\n+\n+        WorkflowFormTO formTO = new WorkflowFormTO();\n+\n+        User user = userDAO.findByWorkflowId(processInstanceId);\n+        if (user == null) {\n+            throw new NotFoundException(\"User with workflow id \" + processInstanceId);\n+        }\n+        formTO.setUserKey(user.getKey());\n+\n+        formTO.setTaskId(taskId);\n+        formTO.setKey(formKey);\n+\n+        for (FormProperty fProp : properties) {\n+            WorkflowFormPropertyTO propertyTO = new WorkflowFormPropertyTO();\n+            BeanUtils.copyProperties(fProp, propertyTO, PROPERTY_IGNORE_PROPS);\n+            propertyTO.setType(fromActivitiFormType(fProp.getType()));\n+\n+            if (propertyTO.getType() == WorkflowFormPropertyType.Date) {\n+                propertyTO.setDatePattern((String) fProp.getType().getInformation(\"datePattern\"));\n+            }\n+            if (propertyTO.getType() == WorkflowFormPropertyType.Enum) {\n+                propertyTO.getEnumValues().putAll((Map<String, String>) fProp.getType().getInformation(\"values\"));\n+            }\n+\n+            formTO.addProperty(propertyTO);\n+        }\n+\n+        return formTO;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<WorkflowFormTO> getForms() {\n+        List<WorkflowFormTO> forms = new ArrayList<>();\n+\n+        final String authUser = AuthContextUtil.getAuthenticatedUsername();\n+        if (adminUser.equals(authUser)) {\n+            forms.addAll(getForms(taskService.createTaskQuery().\n+                    taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE)));\n+        } else {\n+            User user = userDAO.find(authUser);\n+            if (user == null) {\n+                throw new NotFoundException(\"Syncope User \" + authUser);\n+            }\n+\n+            forms.addAll(getForms(taskService.createTaskQuery().\n+                    taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE).\n+                    taskCandidateOrAssigned(user.getKey().toString())));\n+\n+            List<String> candidateGroups = new ArrayList<>();\n+            for (Long roleId : user.getRoleKeys()) {\n+                candidateGroups.add(roleId.toString());\n+            }\n+            if (!candidateGroups.isEmpty()) {\n+                forms.addAll(getForms(taskService.createTaskQuery().\n+                        taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE).\n+                        taskCandidateGroupIn(candidateGroups)));\n+            }\n+        }\n+\n+        return forms;\n+    }\n+\n+    @Override\n+    public List<WorkflowFormTO> getForms(final String workflowId, final String name) {\n+        List<WorkflowFormTO> forms = getForms(\n+                taskService.createTaskQuery().processInstanceId(workflowId).taskName(name).\n+                taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE));\n+\n+        forms.addAll(getForms(historyService.createHistoricTaskInstanceQuery().taskName(name).\n+                taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE)));\n+\n+        return forms;\n+    }\n+\n+    private <T extends Query<?, ?>, U extends Object> List<WorkflowFormTO> getForms(final Query<T, U> query) {\n+        List<WorkflowFormTO> forms = new ArrayList<>();\n+\n+        for (U obj : query.list()) {\n+            try {\n+                if (obj instanceof HistoricTaskInstance) {\n+                    forms.add(getFormTO((HistoricTaskInstance) obj));\n+                } else if (obj instanceof Task) {\n+                    forms.add(getFormTO((Task) obj));\n+                } else {\n+                    throw new ActivitiException(\n+                            \"Failure retrieving form\", new IllegalArgumentException(\"Invalid task type\"));\n+                }\n+            } catch (ActivitiException e) {\n+                LOG.debug(\"No form found for task {}\", obj, e);\n+            }\n+        }\n+\n+        return forms;\n+    }\n+\n+    @Override\n+    public WorkflowFormTO getForm(final String workflowId)\n+            throws NotFoundException, WorkflowException {\n+\n+        Task task;\n+        try {\n+            task = taskService.createTaskQuery().processInstanceId(workflowId).singleResult();\n+        } catch (ActivitiException e) {\n+            throw new WorkflowException(\"While reading form for workflow instance \" + workflowId, e);\n+        }\n+\n+        TaskFormData formData;\n+        try {\n+            formData = formService.getTaskFormData(task.getId());\n+        } catch (ActivitiException e) {\n+            LOG.debug(\"No form found for task {}\", task.getId(), e);\n+            formData = null;\n+        }\n+\n+        WorkflowFormTO result = null;\n+        if (formData != null && !formData.getFormProperties().isEmpty()) {\n+            result = getFormTO(task);\n+        }\n+\n+        return result;\n+    }\n+\n+    private Map.Entry<Task, TaskFormData> checkTask(final String taskId, final String authUser) {\n+        Task task;\n+        try {\n+            task = taskService.createTaskQuery().taskId(taskId).singleResult();\n+        } catch (ActivitiException e) {\n+            throw new NotFoundException(\"Activiti Task \" + taskId, e);\n+        }\n+\n+        TaskFormData formData;\n+        try {\n+            formData = formService.getTaskFormData(task.getId());\n+        } catch (ActivitiException e) {\n+            throw new NotFoundException(\"Form for Activiti Task \" + taskId, e);\n+        }\n+\n+        if (!adminUser.equals(authUser)) {\n+            User user = userDAO.find(authUser);\n+            if (user == null) {\n+                throw new NotFoundException(\"Syncope User \" + authUser);\n+            }\n+        }\n+\n+        return new SimpleEntry<>(task, formData);\n+    }\n+\n+    @Transactional\n+    @Override\n+    public WorkflowFormTO claimForm(final String taskId)\n+            throws WorkflowException {\n+\n+        final String authUser = AuthContextUtil.getAuthenticatedUsername();\n+        Map.Entry<Task, TaskFormData> checked = checkTask(taskId, authUser);\n+\n+        if (!adminUser.equals(authUser)) {\n+            List<Task> tasksForUser = taskService.createTaskQuery().taskId(taskId).taskCandidateUser(authUser).list();\n+            if (tasksForUser.isEmpty()) {\n+                throw new WorkflowException(\n+                        new IllegalArgumentException(authUser + \" is not candidate for task \" + taskId));\n+            }\n+        }\n+\n+        Task task;\n+        try {\n+            taskService.setOwner(taskId, authUser);\n+            task = taskService.createTaskQuery().taskId(taskId).singleResult();\n+        } catch (ActivitiException e) {\n+            throw new WorkflowException(\"While reading task \" + taskId, e);\n+        }\n+\n+        return getFormTO(task, checked.getValue());\n+    }\n+\n+    @Transactional\n+    @Override\n+    public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form)\n+            throws WorkflowException {\n+\n+        final String authUser = AuthContextUtil.getAuthenticatedUsername();\n+        Map.Entry<Task, TaskFormData> checked = checkTask(form.getTaskId(), authUser);\n+\n+        if (!checked.getKey().getOwner().equals(authUser)) {\n+            throw new WorkflowException(new IllegalArgumentException(\"Task \" + form.getTaskId() + \" assigned to \"\n+                    + checked.getKey().getOwner() + \" but submitted by \" + authUser));\n+        }\n+\n+        User user = userDAO.findByWorkflowId(checked.getKey().getProcessInstanceId());\n+        if (user == null) {\n+            throw new NotFoundException(\"User with workflow id \" + checked.getKey().getProcessInstanceId());\n+        }\n+\n+        Set<String> preTasks = getPerformedTasks(user);\n+        try {\n+            formService.submitTaskFormData(form.getTaskId(), form.getPropertiesForSubmit());\n+            runtimeService.setVariable(user.getWorkflowId(), FORM_SUBMITTER, authUser);\n+        } catch (ActivitiException e) {\n+            throwException(e, \"While submitting form for task \" + form.getTaskId());\n+        }\n+\n+        Set<String> postTasks = getPerformedTasks(user);\n+        postTasks.removeAll(preTasks);\n+        postTasks.add(form.getTaskId());\n+\n+        updateStatus(user);\n+        User updated = userDAO.save(user);\n+\n+        // see if there is any propagation to be done\n+        PropagationByResource propByRes =\n+                runtimeService.getVariable(user.getWorkflowId(), PROP_BY_RESOURCE, PropagationByResource.class);\n+\n+        // fetch - if available - the encrypted password\n+        String clearPassword = null;\n+        String encryptedPwd = runtimeService.getVariable(user.getWorkflowId(), ENCRYPTED_PWD, String.class);\n+        if (StringUtils.isNotBlank(encryptedPwd)) {\n+            clearPassword = decrypt(encryptedPwd);\n+        }\n+\n+        // supports approval chains\n+        saveForFormSubmit(user, clearPassword, propByRes);\n+\n+        UserMod userMod = runtimeService.getVariable(user.getWorkflowId(), USER_MOD, UserMod.class);\n+        if (userMod == null) {\n+            userMod = new UserMod();\n+            userMod.setKey(updated.getKey());\n+            userMod.setPassword(clearPassword);\n+        }\n+\n+        return new WorkflowResult<>(userMod, propByRes, postTasks);\n+    }\n+}"},{"sha":"f2be8e30b300237e31ec6fda4fec0f8c2331bb76","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/SyncopeEntitiesVariableType.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeEntitiesVariableType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeEntitiesVariableType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeEntitiesVariableType.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti;\n+\n+import org.activiti.engine.impl.variable.SerializableType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+/**\n+ * Activiti variable type for handling Syncope entities as Activiti variables.\n+ * Main purpose: avoid Activiti to handle Syncope entities as JPA entities,\n+ * since this can cause troubles with transactions.\n+ */\n+public class SyncopeEntitiesVariableType extends SerializableType {\n+\n+    @Override\n+    public boolean isAbleToStore(final Object value) {\n+        return value instanceof AbstractBaseBean;\n+    }\n+}"},{"sha":"8c9427af6d1cea296d25527a4087eff0d23b9260","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/SyncopeGroupManager.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeGroupManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeGroupManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeGroupManager.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.activiti.engine.identity.Group;\n+import org.activiti.engine.identity.GroupQuery;\n+import org.activiti.engine.impl.GroupQueryImpl;\n+import org.activiti.engine.impl.Page;\n+import org.activiti.engine.impl.persistence.entity.GroupEntity;\n+import org.activiti.engine.impl.persistence.entity.GroupIdentityManager;\n+import org.apache.syncope.server.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.server.persistence.api.dao.UserDAO;\n+import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class SyncopeGroupManager implements GroupIdentityManager, SyncopeSession {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Override\n+    public Class<?> getType() {\n+        return GroupIdentityManager.class;\n+    }\n+\n+    @Override\n+    public Group createNewGroup(final String groupId) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public GroupQuery createNewGroupQuery() {\n+        return new SyncopeGroupQueryImpl(roleDAO);\n+    }\n+\n+    @Override\n+    public void deleteGroup(final String groupId) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<Group> findGroupsByUser(final String userId) {\n+        List<Group> result = Collections.emptyList();\n+        User user = userDAO.find(userId);\n+        if (user != null) {\n+            result = new ArrayList<>();\n+            for (Long roleId : user.getRoleKeys()) {\n+                result.add(new GroupEntity(roleId.toString()));\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public List<Group> findGroupByQueryCriteria(final GroupQueryImpl query, final Page page) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public long findGroupCountByQueryCriteria(final GroupQueryImpl query) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<Group> findGroupsByNativeQuery(final Map<String, Object> parameterMap, final int firstResult,\n+            final int maxResults) {\n+\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public long findGroupCountByNativeQuery(final Map<String, Object> parameterMap) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void insertGroup(final Group group) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void updateGroup(final Group updatedGroup) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean isNewGroup(final Group group) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void flush() {\n+    }\n+\n+    @Override\n+    public void close() {\n+    }\n+}"},{"sha":"0f28a15fe900952227e60bd008f3efefc83e192f","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/SyncopeGroupQueryImpl.java","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.activiti.engine.ActivitiException;\n+import org.activiti.engine.identity.Group;\n+import org.activiti.engine.identity.GroupQuery;\n+import org.activiti.engine.impl.persistence.entity.GroupEntity;\n+import org.apache.syncope.server.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.server.persistence.api.entity.role.Role;\n+\n+public class SyncopeGroupQueryImpl implements GroupQuery {\n+\n+    private RoleDAO roleDAO;\n+\n+    private Long roleId;\n+\n+    private List<Group> result;\n+\n+    public SyncopeGroupQueryImpl(final RoleDAO roleDAO) {\n+        this.roleDAO = roleDAO;\n+    }\n+\n+    @Override\n+    public GroupQuery groupId(final String groupId) {\n+        try {\n+            roleId = Long.valueOf(groupId);\n+        } catch (NumberFormatException e) {\n+        }\n+\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery groupName(final String groupName) {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery groupNameLike(final String groupNameLike) {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery groupType(final String groupType) {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery groupMember(final String groupMemberUserId) {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery orderByGroupId() {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery orderByGroupName() {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery orderByGroupType() {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery asc() {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery desc() {\n+        return this;\n+    }\n+\n+    private Group fromSyncopeRole(Role role) {\n+        return new GroupEntity(role.getKey().toString());\n+    }\n+\n+    private void execute() {\n+        if (roleId != null) {\n+            Role role = roleDAO.find(roleId);\n+            if (role == null) {\n+                result = Collections.emptyList();\n+            } else {\n+                result = Collections.singletonList(fromSyncopeRole(role));\n+            }\n+        }\n+        if (result == null) {\n+            result = new ArrayList<Group>();\n+            for (Role role : roleDAO.findAll()) {\n+                result.add(fromSyncopeRole(role));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public long count() {\n+        if (result == null) {\n+            execute();\n+        }\n+        return result.size();\n+    }\n+\n+    @Override\n+    public Group singleResult() {\n+        if (result == null) {\n+            execute();\n+        }\n+        if (result.isEmpty()) {\n+            throw new ActivitiException(\"Empty result\");\n+        }\n+\n+        return result.get(0);\n+    }\n+\n+    @Override\n+    public List<Group> list() {\n+        if (result == null) {\n+            execute();\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public List<Group> listPage(final int firstResult, final int maxResults) {\n+        return list();\n+    }\n+\n+    @Override\n+    public GroupQuery potentialStarter(final String procDefId) {\n+        throw new UnsupportedOperationException();\n+    }\n+}"},{"sha":"723b7e37a8d86eb94d12c73971b9fcf8423f4335","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/SyncopeSession.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeSession.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti;\n+\n+import org.activiti.engine.impl.interceptor.Session;\n+\n+public interface SyncopeSession extends Session {\n+\n+    Class<?> getType();\n+}"},{"sha":"7a9bd6ba5f7b7714fc76ba409649a264ad5c9afe","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/SyncopeSessionFactory.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeSessionFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeSessionFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeSessionFactory.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti;\n+\n+import org.activiti.engine.impl.interceptor.Session;\n+import org.activiti.engine.impl.interceptor.SessionFactory;\n+\n+public class SyncopeSessionFactory implements SessionFactory {\n+\n+    private SyncopeSession syncopeSession;\n+\n+    @Override\n+    public Class<?> getSessionType() {\n+        return syncopeSession.getType();\n+    }\n+\n+    @Override\n+    public Session openSession() {\n+        return syncopeSession;\n+    }\n+\n+    public SyncopeSession getSyncopeSession() {\n+        return syncopeSession;\n+    }\n+\n+    public void setSyncopeSession(final SyncopeSession syncopeSession) {\n+        this.syncopeSession = syncopeSession;\n+    }\n+}"},{"sha":"f36c2503547e3ab35fffa2b4a6026e45a8029da4","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/SyncopeUserManager.java","status":"added","additions":170,"deletions":0,"changes":170,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeUserManager.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.activiti.engine.identity.Group;\n+import org.activiti.engine.identity.Picture;\n+import org.activiti.engine.identity.User;\n+import org.activiti.engine.identity.UserQuery;\n+import org.activiti.engine.impl.Page;\n+import org.activiti.engine.impl.UserQueryImpl;\n+import org.activiti.engine.impl.persistence.entity.GroupEntity;\n+import org.activiti.engine.impl.persistence.entity.IdentityInfoEntity;\n+import org.activiti.engine.impl.persistence.entity.UserEntity;\n+import org.activiti.engine.impl.persistence.entity.UserIdentityManager;\n+import org.apache.syncope.server.persistence.api.dao.EntitlementDAO;\n+import org.apache.syncope.server.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.server.persistence.api.dao.UserDAO;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class SyncopeUserManager implements UserIdentityManager, SyncopeSession {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n+\n+    @Override\n+    public Class<?> getType() {\n+        return UserIdentityManager.class;\n+    }\n+\n+    @Override\n+    public Boolean checkPassword(final String userKey, final String password) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public User createNewUser(final String userKey) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public UserQuery createNewUserQuery() {\n+        return new SyncopeUserQueryImpl(userDAO, roleDAO, entitlementDAO);\n+    }\n+\n+    @Override\n+    public void deleteUser(final String userKey) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<Group> findGroupsByUser(final String userKey) {\n+        List<Group> result = Collections.emptyList();\n+        org.apache.syncope.server.persistence.api.entity.user.User user = userDAO.find(userKey);\n+        if (user != null) {\n+            result = new ArrayList<>();\n+            for (Long roleId : user.getRoleKeys()) {\n+                result.add(new GroupEntity(roleId.toString()));\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public UserEntity findUserById(final String userKey) {\n+        UserEntity result = null;\n+        org.apache.syncope.server.persistence.api.entity.user.User user = userDAO.find(userKey);\n+        if (user != null) {\n+            result = new UserEntity(userKey);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public void flush() {\n+    }\n+\n+    @Override\n+    public void close() {\n+    }\n+\n+    @Override\n+    public void insertUser(final User user) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean isNewUser(final User user) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void updateUser(final User updatedUser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Picture getUserPicture(final String string) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void setUserPicture(final String string, final Picture pctr) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<User> findUserByQueryCriteria(final UserQueryImpl query, final Page page) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public long findUserCountByQueryCriteria(final UserQueryImpl query) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public IdentityInfoEntity findUserInfoByUserIdAndKey(final String userKey, final String key) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<String> findUserInfoKeysByUserIdAndType(final String userKey, final String type) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<User> findPotentialStarterUsers(final String proceDefId) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<User> findUsersByNativeQuery(final Map<String, Object> parameterMap,\n+            final int firstResult, final int maxResults) {\n+\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public long findUserCountByNativeQuery(final Map<String, Object> parameterMap) {\n+        throw new UnsupportedOperationException();\n+    }\n+}"},{"sha":"d2c4e31e7802373d7270c74e050ed7da174cde72","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/SyncopeUserQueryImpl.java","status":"added","additions":218,"deletions":0,"changes":218,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.activiti.engine.ActivitiException;\n+import org.activiti.engine.identity.User;\n+import org.activiti.engine.identity.UserQuery;\n+import org.activiti.engine.impl.persistence.entity.UserEntity;\n+import org.apache.syncope.server.persistence.api.RoleEntitlementUtil;\n+import org.apache.syncope.server.persistence.api.dao.EntitlementDAO;\n+import org.apache.syncope.server.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.server.persistence.api.dao.UserDAO;\n+import org.apache.syncope.server.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.server.persistence.api.entity.role.Role;\n+\n+public class SyncopeUserQueryImpl implements UserQuery {\n+\n+    private UserDAO userDAO;\n+\n+    private RoleDAO roleDAO;\n+\n+    private EntitlementDAO entitlementDAO;\n+\n+    private String username;\n+\n+    private Long memberOf;\n+\n+    private List<User> result;\n+\n+    public SyncopeUserQueryImpl(final UserDAO userDAO, final RoleDAO roleDAO, final EntitlementDAO entitlementDAO) {\n+        this.userDAO = userDAO;\n+        this.roleDAO = roleDAO;\n+        this.entitlementDAO = entitlementDAO;\n+    }\n+\n+    @Override\n+    public UserQuery userId(final String id) {\n+        this.username = id;\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery userFirstName(final String firstName) {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery userFirstNameLike(final String firstNameLike) {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery userLastName(final String lastName) {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery userLastNameLike(final String lastNameLike) {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery userFullNameLike(final String fullNameLike) {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery userEmail(final String email) {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery userEmailLike(final String emailLike) {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery memberOfGroup(final String groupId) {\n+        try {\n+            memberOf = Long.valueOf(groupId);\n+        } catch (NumberFormatException e) {\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery orderByUserId() {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery orderByUserFirstName() {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery orderByUserLastName() {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery orderByUserEmail() {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery asc() {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery desc() {\n+        return this;\n+    }\n+\n+    private User fromSyncopeUser(final org.apache.syncope.server.persistence.api.entity.user.User user) {\n+        return new UserEntity(user.getUsername());\n+    }\n+\n+    private void execute(final int page, final int itemsPerPage) {\n+        if (username != null) {\n+            org.apache.syncope.server.persistence.api.entity.user.User user = userDAO.find(username);\n+            if (user == null) {\n+                result = Collections.<User>emptyList();\n+            } else {\n+                if (memberOf == null || user.getRoleKeys().contains(memberOf)) {\n+                    result = Collections.singletonList(fromSyncopeUser(user));\n+                }\n+            }\n+        }\n+        if (memberOf != null) {\n+            Role role = roleDAO.find(memberOf);\n+            if (role == null) {\n+                result = Collections.<User>emptyList();\n+            } else {\n+                result = new ArrayList<>();\n+                List<Membership> memberships = roleDAO.findMemberships(role);\n+                User user;\n+                for (Membership membership : memberships) {\n+                    user = fromSyncopeUser(membership.getUser());\n+                    if (!result.contains(user)) {\n+                        result.add(user);\n+                    }\n+                }\n+            }\n+        }\n+        // THIS CAN BE *VERY* DANGEROUS\n+        if (result == null) {\n+            result = new ArrayList<>();\n+\n+            List<org.apache.syncope.server.persistence.api.entity.user.User> users =\n+                    userDAO.findAll(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), page, itemsPerPage);\n+            for (org.apache.syncope.server.persistence.api.entity.user.User user : users) {\n+                result.add(fromSyncopeUser(user));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public long count() {\n+        if (result == null) {\n+            execute(-1, -1);\n+        }\n+        return result.size();\n+    }\n+\n+    @Override\n+    public User singleResult() {\n+        if (result == null) {\n+            execute(-1, -1);\n+        }\n+        if (result.isEmpty()) {\n+            throw new ActivitiException(\"Empty result\");\n+        }\n+\n+        return result.get(0);\n+    }\n+\n+    @Override\n+    public List<User> list() {\n+        if (result == null) {\n+            execute(-1, -1);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public List<User> listPage(final int firstResult, final int maxResults) {\n+        if (result == null) {\n+            execute((firstResult / maxResults) + 1, maxResults);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public UserQuery potentialStarter(final String string) {\n+        throw new UnsupportedOperationException();\n+    }\n+}"},{"sha":"04962bf19523546e4b4148d4e6cb11baf88862f8","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/task/AbstractActivitiServiceTask.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FAbstractActivitiServiceTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FAbstractActivitiServiceTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FAbstractActivitiServiceTask.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti.task;\n+\n+import org.activiti.engine.RuntimeService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Abstract base class for Activiti's service tasks in Syncope, with Spring support.\n+ */\n+@Component\n+public abstract class AbstractActivitiServiceTask {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractActivitiServiceTask.class);\n+\n+    @Autowired\n+    protected RuntimeService runtimeService;\n+\n+    @Transactional(rollbackFor = { Throwable.class })\n+    public void execute(final String executionId) {\n+        doExecute(executionId);\n+    }\n+\n+    protected abstract void doExecute(final String executionId);\n+}"},{"sha":"3a9508902d409ed8637f65f24044c6c81788ecef","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/task/AutoActivate.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FAutoActivate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FAutoActivate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FAutoActivate.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti.task;\n+\n+import org.apache.syncope.workflow.activiti.ActivitiUserWorkflowAdapter;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AutoActivate extends AbstractActivitiServiceTask {\n+\n+    @Override\n+    protected void doExecute(final String executionId) {\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.PROPAGATE_ENABLE, Boolean.TRUE);\n+    }\n+}"},{"sha":"cc4e1be1be125b201a66846722ed38c63c1735e8","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/task/Create.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FCreate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FCreate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FCreate.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti.task;\n+\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.server.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.apache.syncope.server.provisioning.api.data.UserDataBinder;\n+import org.apache.syncope.workflow.activiti.ActivitiUserWorkflowAdapter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class Create extends AbstractActivitiServiceTask {\n+\n+    @Autowired\n+    private UserDataBinder dataBinder;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    protected void doExecute(final String executionId) {\n+        UserTO userTO = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER_TO, UserTO.class);\n+        Boolean storePassword =\n+                runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.STORE_PASSWORD, Boolean.class);\n+        // create and set workflow id\n+        User user = entityFactory.newEntity(User.class);\n+        dataBinder.create(user, userTO, storePassword == null ? true : storePassword);\n+        user.setWorkflowId(executionId);\n+\n+        // report SyncopeUser as result\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n+    }\n+}"},{"sha":"5e9109d0f673008b95c0d307eb65d288a4b48e5a","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/task/Delete.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FDelete.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti.task;\n+\n+import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.apache.syncope.workflow.activiti.ActivitiUserWorkflowAdapter;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class Delete extends AbstractActivitiServiceTask {\n+\n+    @Override\n+    protected void doExecute(final String executionId) {\n+        User user = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, User.class);\n+\n+        // Do something with SyncopeUser...\n+        if (user != null) {\n+            user.checkToken(\"\");\n+        }\n+\n+        // remove SyncopeUser variable\n+        runtimeService.removeVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER);\n+    }\n+}"},{"sha":"48750b2680695478196d2f5f4d885c65af6c2eb6","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/task/GenerateToken.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FGenerateToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FGenerateToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FGenerateToken.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti.task;\n+\n+import org.apache.syncope.server.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.apache.syncope.workflow.activiti.ActivitiUserWorkflowAdapter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class GenerateToken extends AbstractActivitiServiceTask {\n+\n+    @Autowired\n+    private ConfDAO confDAO;\n+\n+    @Override\n+    protected void doExecute(final String executionId) {\n+        User user = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, User.class);\n+\n+        user.generateToken(\n+                confDAO.find(\"token.length\", \"256\").getValues().get(0).getLongValue().intValue(),\n+                confDAO.find(\"token.expireTime\", \"60\").getValues().get(0).getLongValue().intValue());\n+\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n+    }\n+}"},{"sha":"3c2bd86661e4f41e1c47f2a2cf56e3add73abb54","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/task/Notify.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FNotify.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FNotify.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FNotify.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti.task;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.apache.syncope.server.provisioning.api.notification.NotificationManager;\n+import org.apache.syncope.workflow.activiti.ActivitiUserWorkflowAdapter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * General-purpose notification task for usage within workflow.\n+ * It requires a pre-existing <tt>Notification</tt> with category <tt>CUSTOM</tt> and result <tt>SUCCESS</tt>.\n+ * An <tt>event</tt> workflow variable needs to be provided as well.\n+ */\n+@Component\n+public class Notify extends AbstractActivitiServiceTask {\n+\n+    @Autowired\n+    private NotificationManager notificationManager;\n+\n+    @Override\n+    protected void doExecute(final String executionId) {\n+        User user = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, User.class);\n+        UserTO userTO = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER_TO, UserTO.class);\n+        String event = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.EVENT, String.class);\n+\n+        if (StringUtils.isNotBlank(event)) {\n+            notificationManager.createTasks(\n+                    AuditElements.EventCategoryType.CUSTOM,\n+                    null,\n+                    null,\n+                    event,\n+                    AuditElements.Result.SUCCESS,\n+                    userTO,\n+                    null,\n+                    user.getToken());\n+        } else {\n+            LOG.debug(\"Not sending any notification since no event was found\");\n+        }\n+    }\n+\n+}"},{"sha":"7b9e4beb4773d5d7a86a51848442e589454718a3","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/task/PasswordReset.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FPasswordReset.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FPasswordReset.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FPasswordReset.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti.task;\n+\n+import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.apache.syncope.server.workflow.api.WorkflowException;\n+import org.apache.syncope.workflow.activiti.ActivitiUserWorkflowAdapter;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class PasswordReset extends AbstractActivitiServiceTask {\n+\n+    @Override\n+    protected void doExecute(final String executionId) {\n+        User user = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, User.class);\n+        String token = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.TOKEN, String.class);\n+        String password = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.PASSWORD, String.class);\n+\n+        if (!user.checkToken(token)) {\n+            throw new WorkflowException(new IllegalArgumentException(\"Wrong token: \" + token + \" for \" + user));\n+        }\n+\n+        user.removeToken();\n+        user.setPassword(password, user.getCipherAlgorithm());\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n+    }\n+\n+}"},{"sha":"6d105badc38f1bca1d61b7dc02d8aa78b2487358","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/task/Reactivate.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FReactivate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FReactivate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FReactivate.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti.task;\n+\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class Reactivate extends AbstractActivitiServiceTask {\n+\n+    @Override\n+    protected void doExecute(final String executionId) {\n+    }\n+}"},{"sha":"24a7bdd3518f372711addf284d93d24aaeb6f3c3","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/task/Suspend.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FSuspend.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FSuspend.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FSuspend.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti.task;\n+\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class Suspend extends AbstractActivitiServiceTask {\n+\n+    @Override\n+    protected void doExecute(final String executionId) {\n+    }\n+}"},{"sha":"15d1b3f977b5e3095b8a469520e685682202025e","filename":"syncope620/server/workflow-activiti/src/main/java/org/apache/syncope/workflow/activiti/task/Update.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.workflow.activiti.task;\n+\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.apache.syncope.server.provisioning.api.data.UserDataBinder;\n+import org.apache.syncope.workflow.activiti.ActivitiUserWorkflowAdapter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class Update extends AbstractActivitiServiceTask {\n+\n+    @Autowired\n+    private UserDataBinder dataBinder;\n+\n+    @Override\n+    protected void doExecute(final String executionId) {\n+        User user = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, User.class);\n+        UserMod userMod =\n+                runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, UserMod.class);\n+\n+        // update password internally only if required\n+        UserMod actualMod = SerializationUtils.clone(userMod);\n+        if (actualMod.getPwdPropRequest() != null && !actualMod.getPwdPropRequest().isOnSyncope()) {\n+            actualMod.setPassword(null);\n+        }\n+        // update SyncopeUser\n+        PropagationByResource propByRes = dataBinder.update(user, actualMod);\n+\n+        // report updated user and propagation by resource as result\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.PROP_BY_RESOURCE, propByRes);\n+    }\n+}"},{"sha":"510ce9f262b5861cb111c524072153853adcee89","filename":"syncope620/server/workflow-activiti/src/main/resources/userWorkflow.bpmn20.xml","status":"added","additions":232,"deletions":0,"changes":232,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,232 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" \n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n+             xmlns:activiti=\"http://activiti.org/bpmn\" \n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" \n+             xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" \n+             xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" \n+             typeLanguage=\"http://www.w3.org/2001/XMLSchema\" \n+             expressionLanguage=\"http://www.w3.org/1999/XPath\" \n+             targetNamespace=\"http://activiti.org/bpmn20\">\n+  \n+  <process id=\"userWorkflow\" name=\"User Workflow\" isExecutable=\"true\">\n+    <startEvent id=\"theStart\"/>\n+    <sequenceFlow id=\"flow1\" sourceRef=\"theStart\" targetRef=\"create\"/>\n+    <serviceTask id=\"create\" name=\"Create\" activiti:expression=\"#{create.execute(execution.processInstanceId)}\"/>\n+    <sequenceFlow id=\"flow2\" sourceRef=\"create\" targetRef=\"activate\"/>\n+    <scriptTask id=\"activate\" name=\"Activate\" scriptFormat=\"groovy\" activiti:autoStoreVariables=\"false\">\n+      <script>execution.setVariable(\"propagateEnable\", Boolean.TRUE);</script>\n+    </scriptTask>\n+    <sequenceFlow id=\"flow3\" sourceRef=\"activate\" targetRef=\"active\"/>\n+    <userTask id=\"active\" name=\"Active\"/>\n+    <sequenceFlow id=\"flow8\" sourceRef=\"active\" targetRef=\"activeGw\"/>\n+    <exclusiveGateway id=\"activeGw\"/>\n+    <sequenceFlow id=\"active2Update\" sourceRef=\"activeGw\" targetRef=\"update\">\n+      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${task == 'update'}]]></conditionExpression>\n+    </sequenceFlow>\n+    <sequenceFlow id=\"active2Suspend\" sourceRef=\"activeGw\" targetRef=\"suspend\">\n+      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${task == 'suspend'}]]></conditionExpression>\n+    </sequenceFlow>\n+    <sequenceFlow id=\"active2Delete\" sourceRef=\"activeGw\" targetRef=\"delete\">\n+      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${task == 'delete'}]]></conditionExpression>\n+    </sequenceFlow>\n+    <sequenceFlow id=\"active2RequestPasswordReset\" sourceRef=\"activeGw\" targetRef=\"generateToken4PasswordReset\">\n+      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${task == 'requestPasswordReset'}]]></conditionExpression>\n+    </sequenceFlow>\n+    <sequenceFlow id=\"active2ConfirmPasswordReset\" sourceRef=\"activeGw\" targetRef=\"checkToken4ConfirmPasswordReset\">\n+      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${task == 'confirmPasswordReset'}]]></conditionExpression>\n+    </sequenceFlow>\n+    <serviceTask id=\"update\" name=\"Update\" activiti:expression=\"#{update.execute(execution.processInstanceId)}\"/>\n+    <sequenceFlow id=\"sid-EA22026A-25F0-4ED0-AB6E-9CE9CE74623C\" sourceRef=\"update\" targetRef=\"active\"/>\n+    <serviceTask id=\"suspend\" name=\"Suspend\" activiti:expression=\"#{suspend.execute(execution.processInstanceId)}\"/>\n+    <sequenceFlow id=\"flow10\" sourceRef=\"suspend\" targetRef=\"suspended\"/>\n+    <userTask id=\"suspended\" name=\"Suspended\"/>\n+    <sequenceFlow id=\"flow11\" sourceRef=\"suspended\" targetRef=\"suspendedGw\"/>\n+    <exclusiveGateway id=\"suspendedGw\"/>\n+    <sequenceFlow id=\"suspended2Reactivate\" sourceRef=\"suspendedGw\" targetRef=\"reactivate\">\n+      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${task == 'reactivate'}]]></conditionExpression>\n+    </sequenceFlow>\n+    <sequenceFlow id=\"suspended2Delete\" sourceRef=\"suspendedGw\" targetRef=\"delete\">\n+      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${task == 'delete'}]]></conditionExpression>\n+    </sequenceFlow>\n+    <serviceTask id=\"reactivate\" name=\"Reactivate\" activiti:expression=\"#{reactivate.execute(execution.processInstanceId)}\"/>\n+    <sequenceFlow id=\"flow12\" sourceRef=\"reactivate\" targetRef=\"active\"/>\n+    \n+    <serviceTask id=\"generateToken4PasswordReset\" name=\"Generate Token\" activiti:expression=\"#{generateToken.execute(execution.processInstanceId)}\"/>\n+    <sequenceFlow id=\"sid-7F78CE07-A7A1-467F-BB4B-40FB234AEFF7\" sourceRef=\"generateToken4PasswordReset\" targetRef=\"notify4RequestPasswordReset\"/>\n+    <serviceTask id=\"notify4RequestPasswordReset\" name=\"Notification\" activiti:expression=\"#{notify.execute(execution.processInstanceId)}\"/>\n+    <sequenceFlow id=\"sid-CF9ACA40-7750-47C3-A508-7250D24D4F1F\" sourceRef=\"notify4RequestPasswordReset\" targetRef=\"active\"/>\n+\n+    <serviceTask id=\"checkToken4ConfirmPasswordReset\" name=\"Check token, remove and update password\" activiti:expression=\"#{passwordReset.execute(execution.processInstanceId)}\"/>\n+    <sequenceFlow id=\"sid-3E9FE01D-CC60-4A95-B356-CA0DC000FAD6\" sourceRef=\"checkToken4ConfirmPasswordReset\" targetRef=\"notify4ConfirmPasswordReset\"/>\n+    <serviceTask id=\"notify4ConfirmPasswordReset\" name=\"Notification\" activiti:expression=\"#{notify.execute(execution.processInstanceId)}\"/>\n+    <sequenceFlow id=\"sid-A37806A7-6B7B-48A2-BB37-DAE640231144\" sourceRef=\"notify4ConfirmPasswordReset\" targetRef=\"active\"/>\n+    \n+    <serviceTask id=\"delete\" name=\"Delete\" activiti:expression=\"#{delete.execute(execution.processInstanceId)}\"/>\n+    <sequenceFlow id=\"flow99\" sourceRef=\"delete\" targetRef=\"theEnd\"/>\n+    <endEvent id=\"theEnd\"/>\n+  </process>\n+  \n+  <bpmndi:BPMNDiagram id=\"BPMNDiagram_userWorkflow\">\n+    <bpmndi:BPMNPlane bpmnElement=\"userWorkflow\" id=\"BPMNPlane_userWorkflow\">\n+      <bpmndi:BPMNShape bpmnElement=\"theStart\" id=\"BPMNShape_theStart\">\n+        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"540.0\" y=\"525.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"create\" id=\"BPMNShape_create\">\n+        <omgdc:Bounds height=\"60.00000000000006\" width=\"100.0\" x=\"620.0\" y=\"509.99999999999994\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"active\" id=\"BPMNShape_active\">\n+        <omgdc:Bounds height=\"60.0\" width=\"100.0\" x=\"1030.0\" y=\"511.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"activeGw\" id=\"BPMNShape_activeGw\">\n+        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"1400.0\" y=\"520.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"update\" id=\"BPMNShape_update\">\n+        <omgdc:Bounds height=\"60.0\" width=\"100.0\" x=\"1370.0\" y=\"615.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"suspend\" id=\"BPMNShape_suspend\">\n+        <omgdc:Bounds height=\"60.0\" width=\"100.0\" x=\"1490.0\" y=\"370.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"suspended\" id=\"BPMNShape_suspended\">\n+        <omgdc:Bounds height=\"60.0\" width=\"100.0\" x=\"1640.0\" y=\"370.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"suspendedGw\" id=\"BPMNShape_suspendedGw\">\n+        <omgdc:Bounds height=\"40.0\" width=\"40.0\" x=\"1820.0\" y=\"380.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"reactivate\" id=\"BPMNShape_reactivate\">\n+        <omgdc:Bounds height=\"60.0\" width=\"100.0\" x=\"1940.0\" y=\"290.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"generateToken4PasswordReset\" id=\"BPMNShape_generateToken4PasswordReset\">\n+        <omgdc:Bounds height=\"81.0\" width=\"121.0\" x=\"1515.0\" y=\"604.5\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"notify4RequestPasswordReset\" id=\"BPMNShape_notify4RequestPasswordReset\">\n+        <omgdc:Bounds height=\"81.0\" width=\"121.0\" x=\"1515.0\" y=\"750.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"checkToken4ConfirmPasswordReset\" id=\"BPMNShape_checkToken4ConfirmPasswordReset\">\n+        <omgdc:Bounds height=\"81.0\" width=\"121.0\" x=\"1725.0\" y=\"664.5\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"notify4ConfirmPasswordReset\" id=\"BPMNShape_notify4ConfirmPasswordReset\">\n+        <omgdc:Bounds height=\"81.0\" width=\"121.0\" x=\"1725.0\" y=\"810.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"delete\" id=\"BPMNShape_delete\">\n+        <omgdc:Bounds height=\"60.0\" width=\"100.0\" x=\"1940.0\" y=\"438.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"theEnd\" id=\"BPMNShape_theEnd\">\n+        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"2080.0\" y=\"451.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"activate\" id=\"BPMNShape_activate\">\n+        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"828.286878319943\" y=\"500.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNEdge bpmnElement=\"flow12\" id=\"BPMNEdge_flow12\">\n+        <omgdi:waypoint x=\"1990.0\" y=\"290.0\"/>\n+        <omgdi:waypoint x=\"1990.0\" y=\"261.0\"/>\n+        <omgdi:waypoint x=\"1080.0\" y=\"261.0\"/>\n+        <omgdi:waypoint x=\"1080.0\" y=\"511.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"flow11\" id=\"BPMNEdge_flow11\">\n+        <omgdi:waypoint x=\"1740.0\" y=\"400.0\"/>\n+        <omgdi:waypoint x=\"1820.0\" y=\"400.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"flow10\" id=\"BPMNEdge_flow10\">\n+        <omgdi:waypoint x=\"1590.0\" y=\"400.0\"/>\n+        <omgdi:waypoint x=\"1640.0\" y=\"400.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"active2Suspend\" id=\"BPMNEdge_active2Suspend\">\n+        <omgdi:waypoint x=\"1440.0\" y=\"540.0\"/>\n+        <omgdi:waypoint x=\"1540.0\" y=\"540.0\"/>\n+        <omgdi:waypoint x=\"1540.0\" y=\"430.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"sid-A37806A7-6B7B-48A2-BB37-DAE640231144\" id=\"BPMNEdge_sid-A37806A7-6B7B-48A2-BB37-DAE640231144\">\n+        <omgdi:waypoint x=\"1725.0\" y=\"850.4571226080794\"/>\n+        <omgdi:waypoint x=\"1080.0\" y=\"850.0\"/>\n+        <omgdi:waypoint x=\"1080.0\" y=\"571.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"suspended2Delete\" id=\"BPMNEdge_suspended2Delete\">\n+        <omgdi:waypoint x=\"1860.0\" y=\"400.0\"/>\n+        <omgdi:waypoint x=\"1990.0\" y=\"400.0\"/>\n+        <omgdi:waypoint x=\"1990.0\" y=\"438.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"active2RequestPasswordReset\" id=\"BPMNEdge_active2RequestPasswordReset\">\n+        <omgdi:waypoint x=\"1440.0\" y=\"540.0\"/>\n+        <omgdi:waypoint x=\"1575.0\" y=\"540.0\"/>\n+        <omgdi:waypoint x=\"1575.307142857143\" y=\"604.5\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"active2Delete\" id=\"BPMNEdge_active2Delete\">\n+        <omgdi:waypoint x=\"1440.0\" y=\"540.0\"/>\n+        <omgdi:waypoint x=\"1990.0\" y=\"540.0\"/>\n+        <omgdi:waypoint x=\"1990.0\" y=\"498.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"flow2\" id=\"BPMNEdge_flow2\">\n+        <omgdi:waypoint x=\"720.0\" y=\"540.0\"/>\n+        <omgdi:waypoint x=\"828.286878319943\" y=\"540.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"sid-3E9FE01D-CC60-4A95-B356-CA0DC000FAD6\" id=\"BPMNEdge_sid-3E9FE01D-CC60-4A95-B356-CA0DC000FAD6\">\n+        <omgdi:waypoint x=\"1785.5\" y=\"745.5\"/>\n+        <omgdi:waypoint x=\"1785.5\" y=\"810.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"sid-7F78CE07-A7A1-467F-BB4B-40FB234AEFF7\" id=\"BPMNEdge_sid-7F78CE07-A7A1-467F-BB4B-40FB234AEFF7\">\n+        <omgdi:waypoint x=\"1575.5\" y=\"685.5\"/>\n+        <omgdi:waypoint x=\"1575.5\" y=\"750.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"sid-EA22026A-25F0-4ED0-AB6E-9CE9CE74623C\" id=\"BPMNEdge_sid-EA22026A-25F0-4ED0-AB6E-9CE9CE74623C\">\n+        <omgdi:waypoint x=\"1370.0\" y=\"645.0\"/>\n+        <omgdi:waypoint x=\"1080.0\" y=\"645.0\"/>\n+        <omgdi:waypoint x=\"1080.0\" y=\"571.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n+        <omgdi:waypoint x=\"570.0\" y=\"540.0\"/>\n+        <omgdi:waypoint x=\"620.0\" y=\"540.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"active2ConfirmPasswordReset\" id=\"BPMNEdge_active2ConfirmPasswordReset\">\n+        <omgdi:waypoint x=\"1440.0\" y=\"540.0\"/>\n+        <omgdi:waypoint x=\"1785.0\" y=\"540.0\"/>\n+        <omgdi:waypoint x=\"1785.3772727272726\" y=\"664.5\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"flow3\" id=\"BPMNEdge_flow3\">\n+        <omgdi:waypoint x=\"928.286878319943\" y=\"540.2478767845322\"/>\n+        <omgdi:waypoint x=\"1030.0\" y=\"540.7521232154678\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"sid-CF9ACA40-7750-47C3-A508-7250D24D4F1F\" id=\"BPMNEdge_sid-CF9ACA40-7750-47C3-A508-7250D24D4F1F\">\n+        <omgdi:waypoint x=\"1515.0\" y=\"790.4389505549949\"/>\n+        <omgdi:waypoint x=\"1080.0\" y=\"790.0\"/>\n+        <omgdi:waypoint x=\"1080.0\" y=\"571.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"suspended2Reactivate\" id=\"BPMNEdge_suspended2Reactivate\">\n+        <omgdi:waypoint x=\"1860.0\" y=\"400.0\"/>\n+        <omgdi:waypoint x=\"1902.0\" y=\"400.0\"/>\n+        <omgdi:waypoint x=\"1902.0\" y=\"320.0\"/>\n+        <omgdi:waypoint x=\"1940.0\" y=\"320.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"flow99\" id=\"BPMNEdge_flow99\">\n+        <omgdi:waypoint x=\"2040.0\" y=\"466.5576923076923\"/>\n+        <omgdi:waypoint x=\"2080.005821071606\" y=\"465.40367823831906\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"flow8\" id=\"BPMNEdge_flow8\">\n+        <omgdi:waypoint x=\"1130.0\" y=\"540.8529411764706\"/>\n+        <omgdi:waypoint x=\"1400.058651026393\" y=\"540.0586510263929\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"active2Update\" id=\"BPMNEdge_active2Update\">\n+        <omgdi:waypoint x=\"1420.0\" y=\"560.0\"/>\n+        <omgdi:waypoint x=\"1420.0\" y=\"615.0\"/>\n+      </bpmndi:BPMNEdge>\n+    </bpmndi:BPMNPlane>\n+  </bpmndi:BPMNDiagram>\n+</definitions>\n\\ No newline at end of file"},{"sha":"463c2c780261ebafef4dee503241bbe85de4a451","filename":"syncope620/server/workflow-activiti/src/main/resources/workflowActivitiContext.xml","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fresources%2FworkflowActivitiContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fresources%2FworkflowActivitiContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-activiti%2Fsrc%2Fmain%2Fresources%2FworkflowActivitiContext.xml?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -0,0 +1,79 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\n+                           http://www.springframework.org/schema/context\n+                           http://www.springframework.org/schema/context/spring-context.xsd\">\n+\n+  <bean id=\"userWorkflowDef\" class=\"org.apache.syncope.server.misc.spring.ResourceWithFallbackLoader\">\n+    <property name=\"primary\" value=\"file:${conf.directory}/userWorkflow.bpmn20.xml\"/>\n+    <property name=\"fallback\" value=\"classpath:userWorkflow.bpmn20.xml\"/>\n+  </bean>\n+\n+  <bean id=\"syncopeActivitiUserManager\" class=\"org.apache.syncope.workflow.activiti.SyncopeUserManager\"/>\n+  <bean id=\"syncopeActivitiGroupManager\" class=\"org.apache.syncope.workflow.activiti.SyncopeGroupManager\"/>\n+\n+  <bean id=\"processEngineConfiguration\" class=\"org.activiti.spring.SpringProcessEngineConfiguration\">\n+    <property name=\"dataSource\" ref=\"dataSource\"/>\n+    <property name=\"transactionManager\" ref=\"transactionManager\"/>\n+    <property name=\"transactionsExternallyManaged\" value=\"true\"/>\n+    <property name=\"databaseSchemaUpdate\" value=\"true\"/>\n+\n+    <property name=\"jpaEntityManagerFactory\" ref=\"entityManagerFactory\"/>\n+    <property name=\"jpaHandleTransaction\" value=\"true\"/>\n+    <property name=\"jpaCloseEntityManager\" value=\"false\"/>\n+\n+    <property name=\"jobExecutorActivate\" value=\"${jobExecutorActivate}\"/>\n+\n+    <property name=\"customSessionFactories\">\n+      <list>\n+        <bean class=\"org.apache.syncope.workflow.activiti.SyncopeSessionFactory\">\n+          <property name=\"syncopeSession\" ref=\"syncopeActivitiUserManager\"/>\n+        </bean>\n+        <bean class=\"org.apache.syncope.workflow.activiti.SyncopeSessionFactory\">\n+          <property name=\"syncopeSession\" ref=\"syncopeActivitiGroupManager\"/>\n+        </bean>\n+      </list>\n+    </property>\n+    <property name=\"customPreVariableTypes\">\n+      <list>\n+        <bean class=\"org.apache.syncope.workflow.activiti.SyncopeEntitiesVariableType\"/>\n+      </list>\n+    </property>\n+  </bean>\n+\n+  <bean id=\"processEngine\" class=\"org.activiti.spring.ProcessEngineFactoryBean\">\n+    <property name=\"processEngineConfiguration\" ref=\"processEngineConfiguration\"/>\n+  </bean>\n+\n+  <bean id=\"repositoryService\" factory-bean=\"processEngine\" factory-method=\"getRepositoryService\"/>\n+  <bean id=\"runtimeService\" factory-bean=\"processEngine\" factory-method=\"getRuntimeService\"/>\n+  <bean id=\"taskService\" factory-bean=\"processEngine\" factory-method=\"getTaskService\"/>\n+  <bean id=\"historyService\" factory-bean=\"processEngine\" factory-method=\"getHistoryService\"/>\n+  <bean id=\"managementService\" factory-bean=\"processEngine\" factory-method=\"getManagementService\"/>\n+  <bean id=\"identityService\" factory-bean=\"processEngine\" factory-method=\"getIdentityService\"/>\n+  <bean id=\"formService\" factory-bean=\"processEngine\" factory-method=\"getFormService\"/>\n+\n+  <context:component-scan base-package=\"org.apache.syncope.workflow.activiti\"/>\n+    \n+</beans>"},{"sha":"c52b4e2e5d8a2ca30744444ff4729bb07d47a063","filename":"syncope620/server/workflow-api/src/main/java/org/apache/syncope/server/workflow/api/UserWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -37,8 +37,8 @@ public interface UserWorkflowAdapter extends WorkflowAdapter {\n      * @return user just created\n      * @throws WorkflowException workflow exception\n      */\n-    WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean storePassword) throws\n-            WorkflowException;\n+    WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean storePassword)\n+            throws WorkflowException;\n \n     /**\n      * Create an user, optionally disabling password policy check."},{"sha":"2c5d880dd6e567e84b0ad177952ab4a2bbad677c","filename":"syncope620/server/workflow-api/src/main/java/org/apache/syncope/server/workflow/api/WorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fapi%2FWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fapi%2FWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fapi%2FWorkflowAdapter.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -34,7 +34,7 @@ public interface WorkflowAdapter {\n      * @return null if no init is needed or the WorkflowLoader class for handling initialization\n      * @see org.apache.syncope.core.init.SpringContextInitializer\n      */\n-    Class<? extends WorkflowInstanceLoader> getLoaderClass();\n+    Class<? extends WorkflowDefinitionLoader> getDefinitionLoaderClass();\n \n     /**\n      * Export workflow definition."},{"sha":"5a3d7f452e0b860f033cabd9d878d8cb07b6ce1a","filename":"syncope620/server/workflow-api/src/main/java/org/apache/syncope/server/workflow/api/WorkflowDefinitionLoader.java","status":"renamed","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fapi%2FWorkflowDefinitionLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fapi%2FWorkflowDefinitionLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fapi%2FWorkflowDefinitionLoader.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -18,11 +18,12 @@\n  */\n package org.apache.syncope.server.workflow.api;\n \n-public interface WorkflowInstanceLoader {\n+public interface WorkflowDefinitionLoader {\n \n     void load();\n \n-    String getTablePrefix();\n-\n     void init();\n+\n+    String getPrefix();\n+\n }","previous_filename":"syncope620/server/workflow-api/src/main/java/org/apache/syncope/server/workflow/api/WorkflowInstanceLoader.java"},{"sha":"95998e49112a0cfb62f4669fbe9cb0ea93d4f3e1","filename":"syncope620/server/workflow-java/src/main/java/org/apache/syncope/server/workflow/java/AbstractRoleWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fjava%2FAbstractRoleWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fjava%2FAbstractRoleWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fjava%2FAbstractRoleWorkflowAdapter.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.server.provisioning.api.data.RoleDataBinder;\n import org.apache.syncope.server.workflow.api.RoleWorkflowAdapter;\n import org.apache.syncope.server.workflow.api.WorkflowException;\n-import org.apache.syncope.server.workflow.api.WorkflowInstanceLoader;\n+import org.apache.syncope.server.workflow.api.WorkflowDefinitionLoader;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -44,7 +44,7 @@ public abstract class AbstractRoleWorkflowAdapter implements RoleWorkflowAdapter\n     protected EntityFactory entityFactory;\n \n     @Override\n-    public Class<? extends WorkflowInstanceLoader> getLoaderClass() {\n+    public Class<? extends WorkflowDefinitionLoader> getDefinitionLoaderClass() {\n         return null;\n     }\n "},{"sha":"ae13d0bc4c63847f14e23474d59b5d8ae6877e43","filename":"syncope620/server/workflow-java/src/main/java/org/apache/syncope/server/workflow/java/AbstractUserWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/702810d8b0f28e57896686670096cb1977106537/syncope620%2Fserver%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java?ref=702810d8b0f28e57896686670096cb1977106537","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.server.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.server.workflow.api.UserWorkflowAdapter;\n import org.apache.syncope.server.workflow.api.WorkflowException;\n-import org.apache.syncope.server.workflow.api.WorkflowInstanceLoader;\n+import org.apache.syncope.server.workflow.api.WorkflowDefinitionLoader;\n import org.identityconnectors.common.Base64;\n import org.identityconnectors.common.security.EncryptorFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -56,7 +56,7 @@ public static String decrypt(final String crypted) {\n     }\n \n     @Override\n-    public Class<? extends WorkflowInstanceLoader> getLoaderClass() {\n+    public Class<? extends WorkflowDefinitionLoader> getDefinitionLoaderClass() {\n         return null;\n     }\n "}]}