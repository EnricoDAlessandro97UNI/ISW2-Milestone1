{"sha":"0d97f451542c42665a10c8e5ec2a07212d3163e8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBkOTdmNDUxNTQyYzQyNjY1YTEwYzhlNWVjMmEwNzIxMmQzMTYzZTg=","commit":{"author":{"name":"Matteo Di Carlo","email":"matteo.dicarlo@tirasa.net","date":"2016-09-07T13:15:31Z"},"committer":{"name":"Matteo Di Carlo","email":"matteo.dicarlo@tirasa.net","date":"2016-09-07T13:15:31Z"},"message":"Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/syncope","tree":{"sha":"45a4649a3043af54d80bb7b8d18004053f30c5ea","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/45a4649a3043af54d80bb7b8d18004053f30c5ea"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0d97f451542c42665a10c8e5ec2a07212d3163e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0d97f451542c42665a10c8e5ec2a07212d3163e8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0d97f451542c42665a10c8e5ec2a07212d3163e8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0d97f451542c42665a10c8e5ec2a07212d3163e8/comments","author":null,"committer":null,"parents":[{"sha":"4715ef1ea909a932b3cf3d4874404480e8bdc889","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4715ef1ea909a932b3cf3d4874404480e8bdc889","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4715ef1ea909a932b3cf3d4874404480e8bdc889"},{"sha":"7a7d415cdb8df78f78ee4fcd73b0d5b392022d86","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7a7d415cdb8df78f78ee4fcd73b0d5b392022d86","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7a7d415cdb8df78f78ee4fcd73b0d5b392022d86"}],"stats":{"total":111,"additions":85,"deletions":26},"files":[{"sha":"2856dafedc76dbe5b1755ad2f1ade7c44b86e04d","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/CamelRouteLogic.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0d97f451542c42665a10c8e5ec2a07212d3163e8/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0d97f451542c42665a10c8e5ec2a07212d3163e8/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java?ref=0d97f451542c42665a10c8e5ec2a07212d3163e8","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n import org.apache.syncope.core.provisioning.api.data.CamelRouteDataBinder;\n+import org.apache.syncope.core.provisioning.camel.CamelException;\n import org.apache.syncope.core.provisioning.camel.SyncopeCamelContext;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -84,11 +85,20 @@ public void update(final CamelRouteTO routeTO) {\n         if (route == null) {\n             throw new NotFoundException(\"CamelRoute with key=\" + routeTO.getKey());\n         }\n+        String originalContent = route.getContent();\n \n         LOG.debug(\"Updating route {} with content {}\", routeTO.getKey(), routeTO.getContent());\n         binder.update(route, routeTO);\n \n-        context.updateContext(routeTO.getKey());\n+        try {\n+            context.updateContext(routeTO.getKey());\n+        } catch (CamelException e) {\n+            // if an exception was thrown while updating the context, restore the former route definition\n+            LOG.debug(\"Update of route {} failed, reverting\", routeTO.getKey());\n+            context.restoreRoute(routeTO.getKey(), originalContent);\n+\n+            throw e;\n+        }\n     }\n \n     @PreAuthorize(\"hasRole('\" + CamelEntitlement.ROUTE_UPDATE + \"')\")\n@@ -106,7 +116,7 @@ public CamelMetrics metrics() {\n         } else {\n             MetricRegistry registry = registryService.getMetricsRegistry();\n             for (Map.Entry<String, Timer> entry : registry.getTimers().entrySet()) {\n-                CamelMetrics.MeanRate meanRate = new CamelMetrics.MeanRate();                \n+                CamelMetrics.MeanRate meanRate = new CamelMetrics.MeanRate();\n                 meanRate.setRouteId(StringUtils.substringBetween(entry.getKey(), \".\", \".\"));\n                 meanRate.setValue(entry.getValue().getMeanRate());\n                 metrics.getResponseMeanRates().add(meanRate);"},{"sha":"30ae2b3e5e3b87b025c67a0b1a9f9711783a5e06","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/AbstractCamelProvisioningManager.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0d97f451542c42665a10c8e5ec2a07212d3163e8/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0d97f451542c42665a10c8e5ec2a07212d3163e8/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java?ref=0d97f451542c42665a10c8e5ec2a07212d3163e8","patch":"@@ -53,23 +53,19 @@ abstract class AbstractCamelProvisioningManager {\n \n     protected final List<String> knownURIs = new ArrayList<>();\n \n-    protected SpringCamelContext getContext() {\n-        return contextFactory.getContext();\n-    }\n-\n     protected void sendMessage(final String uri, final Object obj) {\n-        Exchange exchange = new DefaultExchange(getContext());\n+        Exchange exchange = new DefaultExchange(contextFactory.getContext());\n \n         DefaultMessage message = new DefaultMessage();\n         message.setBody(obj);\n         exchange.setIn(message);\n \n-        ProducerTemplate template = getContext().createProducerTemplate();\n+        ProducerTemplate template = contextFactory.getContext().createProducerTemplate();\n         template.send(uri, exchange);\n     }\n \n     protected void sendMessage(final String uri, final Object body, final Map<String, Object> properties) {\n-        Exchange exchange = new DefaultExchange(getContext());\n+        Exchange exchange = new DefaultExchange(contextFactory.getContext());\n \n         for (Map.Entry<String, Object> property : properties.entrySet()) {\n             exchange.setProperty(property.getKey(), property.getValue());\n@@ -79,14 +75,14 @@ protected void sendMessage(final String uri, final Object body, final Map<String\n         DefaultMessage message = new DefaultMessage();\n         message.setBody(body);\n         exchange.setIn(message);\n-        ProducerTemplate template = getContext().createProducerTemplate();\n+        ProducerTemplate template = contextFactory.getContext().createProducerTemplate();\n         template.send(uri, exchange);\n     }\n \n     protected PollingConsumer getConsumer(final String uri) {\n         if (!knownURIs.contains(uri)) {\n             knownURIs.add(uri);\n-            Endpoint endpoint = getContext().getEndpoint(uri);\n+            Endpoint endpoint = contextFactory.getContext().getEndpoint(uri);\n             PollingConsumer pollingConsumer = null;\n             try {\n                 pollingConsumer = endpoint.createPollingConsumer();"},{"sha":"4df313727a21b26abaa5aa9ae4acd341a2abdc0a","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelException.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0d97f451542c42665a10c8e5ec2a07212d3163e8/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0d97f451542c42665a10c8e5ec2a07212d3163e8/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelException.java?ref=0d97f451542c42665a10c8e5ec2a07212d3163e8","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel;\n+\n+/**\n+ * Wraps checked exceptions thrown by Apache Camel.\n+ */\n+public class CamelException extends RuntimeException {\n+\n+    private static final long serialVersionUID = 517692473216575144L;\n+\n+    public CamelException(final Throwable cause) {\n+        super(cause);\n+    }\n+\n+}"},{"sha":"54660040d7539a44734e024e7c962d5dca9727b0","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/SyncopeCamelContext.java","status":"modified","additions":32,"deletions":15,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0d97f451542c42665a10c8e5ec2a07212d3163e8/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0d97f451542c42665a10c8e5ec2a07212d3163e8/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java?ref=0d97f451542c42665a10c8e5ec2a07212d3163e8","patch":"@@ -20,6 +20,7 @@\n \n import java.io.InputStream;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import javax.xml.bind.JAXBContext;\n@@ -28,6 +29,8 @@\n import org.apache.camel.model.Constants;\n import org.apache.camel.model.RouteDefinition;\n import org.apache.camel.spring.SpringCamelContext;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n@@ -37,6 +40,8 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n import org.w3c.dom.Node;\n import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n import org.w3c.dom.ls.DOMImplementationLS;\n@@ -64,18 +69,25 @@ public SpringCamelContext getContext() {\n         if (camelContext.getRouteDefinitions().isEmpty()) {\n             List<CamelRoute> routes = routeDAO.findAll();\n             LOG.debug(\"{} route(s) are going to be loaded \", routes.size());\n-            loadContext(routes);\n+            loadContext(CollectionUtils.collect(routes, new Transformer<CamelRoute, String>() {\n+\n+                @Override\n+                public String transform(final CamelRoute input) {\n+                    return input.getContent();\n+                }\n+            }));\n             try {\n                 camelContext.start();\n             } catch (Exception e) {\n                 LOG.error(\"While starting Camel context\", e);\n+                throw new CamelException(e);\n             }\n         }\n \n         return camelContext;\n     }\n \n-    private void loadContext(final List<CamelRoute> routes) {\n+    private void loadContext(final Collection<String> routes) {\n         try {\n             DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();\n             DOMImplementationLS domImpl = (DOMImplementationLS) reg.getDOMImplementation(\"LS\");\n@@ -84,10 +96,10 @@ private void loadContext(final List<CamelRoute> routes) {\n             JAXBContext jaxbContext = JAXBContext.newInstance(Constants.JAXB_CONTEXT_PACKAGES);\n             Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n             List<RouteDefinition> routeDefs = new ArrayList<>();\n-            for (CamelRoute route : routes) {\n+            for (String route : routes) {\n                 InputStream input = null;\n                 try {\n-                    input = IOUtils.toInputStream(route.getContent(), SyncopeConstants.DEFAULT_CHARSET);\n+                    input = IOUtils.toInputStream(route, SyncopeConstants.DEFAULT_CHARSET);\n                     LSInput lsinput = domImpl.createLSInput();\n                     lsinput.setByteStream(input);\n \n@@ -100,25 +112,29 @@ private void loadContext(final List<CamelRoute> routes) {\n             camelContext.addRouteDefinitions(routeDefs);\n         } catch (Exception e) {\n             LOG.error(\"While loading Camel context {}\", e);\n+            throw new CamelException(e);\n         }\n     }\n \n+    @Transactional(propagation = Propagation.SUPPORTS)\n     public void updateContext(final String routeKey) {\n         if (camelContext == null) {\n             getContext();\n         } else if (!camelContext.getRouteDefinitions().isEmpty()) {\n             camelContext.getRouteDefinitions().remove(camelContext.getRouteDefinition(routeKey));\n-            loadContext(Collections.singletonList(routeDAO.find(routeKey)));\n-            \n-            // Start the Camel Context if it's stopped, as maybe this update fixes a previous route error which\n-            // caused startup to fail\n-            if (camelContext.isStopped()) {\n-                try {\n-                    camelContext.start();\n-                } catch (Exception e) {\n-                    LOG.error(\"While restarting Camel context\", e);\n-                }\n-            }\n+            loadContext(Collections.singletonList(routeDAO.find(routeKey).getContent()));\n+        }\n+    }\n+\n+    public void restoreRoute(final String routeKey, final String routeContent) {\n+        try {\n+            camelContext.getRouteDefinitions().remove(camelContext.getRouteDefinition(routeKey));\n+            loadContext(Collections.singletonList(routeContent));\n+\n+            camelContext.start();\n+        } catch (Exception e) {\n+            LOG.error(\"While restoring Camel route {}\", routeKey, e);\n+            throw new CamelException(e);\n         }\n     }\n \n@@ -128,6 +144,7 @@ public void restartContext() {\n             camelContext.start();\n         } catch (Exception e) {\n             LOG.error(\"While restarting Camel context\", e);\n+            throw new CamelException(e);\n         }\n     }\n "},{"sha":"7112f39e5be1ada1bced4a20e000b7bbbf2b6e32","filename":"pom.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0d97f451542c42665a10c8e5ec2a07212d3163e8/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0d97f451542c42665a10c8e5ec2a07212d3163e8/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=0d97f451542c42665a10c8e5ec2a07212d3163e8","patch":"@@ -2064,6 +2064,10 @@ under the License.\n                       <link>http://camel.apache.org/maven/current/camel-core/apidocs/</link>\n                       <link>http://camel.apache.org/maven/current/camel-spring/apidocs/</link>\n                       <link>https://ci.apache.org/projects/wicket/apidocs/7.x/</link>\n+                      <link>https://commons.apache.org/proper/commons-lang/javadocs/api-release/</link>\n+                      <link>https://commons.apache.org/proper/commons-io/javadocs/api-2.5/</link>\n+                      <link>https://commons.apache.org/proper/commons-jexl/apidocs/</link>\n+                      <link>https://commons.apache.org/proper/commons-collections/javadocs/</link>\n                       <link>http://docs.spring.io/spring/docs/4.3.x/javadoc-api/</link>\n                       <link>http://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/</link>\n                       <link>http://activiti.org/javadocs/</link>"}]}