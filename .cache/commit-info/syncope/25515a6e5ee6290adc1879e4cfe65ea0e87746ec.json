{"sha":"25515a6e5ee6290adc1879e4cfe65ea0e87746ec","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI1NTE1YTZlNWVlNjI5MGFkYzE4NzllNGNmZTY1ZWEwZTg3NzQ2ZWM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-11-27T14:38:52Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-11-27T14:38:52Z"},"message":"[SYNCOPE-1513] Fixing basic console tests","tree":{"sha":"e635c2ab153435de69a018c259db884f69b263e4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e635c2ab153435de69a018c259db884f69b263e4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/25515a6e5ee6290adc1879e4cfe65ea0e87746ec","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/25515a6e5ee6290adc1879e4cfe65ea0e87746ec","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/25515a6e5ee6290adc1879e4cfe65ea0e87746ec","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/25515a6e5ee6290adc1879e4cfe65ea0e87746ec/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7d6bfc655f8d96212e036c711062269fb9491db4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7d6bfc655f8d96212e036c711062269fb9491db4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7d6bfc655f8d96212e036c711062269fb9491db4"}],"stats":{"total":377,"additions":236,"deletions":141},"files":[{"sha":"6e4372bb688f508de579ad5df91048bd2034cca1","filename":"client/console/src/test/java/org/apache/syncope/client/console/AbstractTest.java","status":"removed","additions":0,"deletions":141,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d6bfc655f8d96212e036c711062269fb9491db4/client%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d6bfc655f8d96212e036c711062269fb9491db4/client%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java?ref=7d6bfc655f8d96212e036c711062269fb9491db4","patch":"@@ -1,141 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console;\n-\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyString;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Properties;\n-import java.util.stream.Stream;\n-import javax.servlet.ServletContext;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.cxf.jaxrs.client.Client;\n-import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n-import org.apache.syncope.client.console.init.ConsoleInitializer;\n-import org.apache.syncope.client.console.init.MIMETypesLoader;\n-import org.apache.syncope.client.lib.AuthenticationHandler;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.info.NumbersInfo;\n-import org.apache.syncope.common.lib.info.PlatformInfo;\n-import org.apache.syncope.common.lib.info.SystemInfo;\n-import org.apache.syncope.common.lib.to.DomainTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.rest.api.service.DomainService;\n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n-import org.apache.wicket.util.tester.WicketTester;\n-import org.junit.jupiter.api.BeforeAll;\n-\n-public abstract class AbstractTest {\n-\n-    protected static Properties PROPS;\n-\n-    public interface SyncopeServiceClient extends SyncopeService, Client {\n-    }\n-\n-    @BeforeAll\n-    public static void loadProps() throws IOException {\n-        PROPS = new Properties();\n-        try (InputStream is = AbstractTest.class.getResourceAsStream(\"/console.properties\")) {\n-            PROPS.load(is);\n-        }\n-    }\n-\n-    protected static final WicketTester TESTER = new WicketTester(new SyncopeConsoleApplication() {\n-\n-        @Override\n-        protected void init() {\n-            ServletContext ctx = getServletContext();\n-            ClassPathScanImplementationLookup lookup = new ClassPathScanImplementationLookup();\n-            lookup.load();\n-            ctx.setAttribute(ConsoleInitializer.CLASSPATH_LOOKUP, lookup);\n-\n-            MIMETypesLoader mimeTypes = new MIMETypesLoader();\n-            mimeTypes.load();\n-            ctx.setAttribute(ConsoleInitializer.MIMETYPES_LOADER, mimeTypes);\n-\n-            super.init();\n-        }\n-\n-        @Override\n-        public List<String> getDomains() {\n-            return super.getDomains();\n-        }\n-\n-        private SyncopeService getSyncopeService() {\n-            SyncopeServiceClient service = mock(SyncopeServiceClient.class);\n-            when(service.type(anyString())).thenReturn(service);\n-            when(service.accept(anyString())).thenReturn(service);\n-\n-            when(service.platform()).thenReturn(new PlatformInfo());\n-            when(service.system()).thenReturn(new SystemInfo());\n-\n-            NumbersInfo numbersInfo = new NumbersInfo();\n-            Stream.of(NumbersInfo.ConfItem.values()).\n-                    forEach(item -> numbersInfo.getConfCompleteness().put(item.name(), true));\n-            when(service.numbers()).thenReturn(numbersInfo);\n-\n-            return service;\n-        }\n-\n-        private UserTO getUserTO() {\n-            UserTO userTO = new UserTO();\n-            userTO.setUsername(\"username\");\n-            return userTO;\n-        }\n-\n-        private DomainService getDomainService() {\n-            DomainService domainService = mock(DomainService.class);\n-            DomainTO domainTO = new DomainTO();\n-            domainTO.setKey(SyncopeConstants.MASTER_DOMAIN);\n-            when(domainService.list()).thenReturn(Collections.singletonList(domainTO));\n-            return domainService;\n-        }\n-\n-        @SuppressWarnings(\"unchecked\")\n-        @Override\n-        public SyncopeClientFactoryBean newClientFactory() {\n-            SyncopeClient client = mock(SyncopeClient.class);\n-\n-            when(client.self()).thenReturn(Pair.of(new HashMap<>(), getUserTO()));\n-\n-            SyncopeService syncopeService = getSyncopeService();\n-            when(client.getService(SyncopeService.class)).thenReturn(syncopeService);\n-\n-            DomainService domainService = getDomainService();\n-            when(client.getService(DomainService.class)).thenReturn(domainService);\n-\n-            SyncopeClientFactoryBean clientFactory = mock(SyncopeClientFactoryBean.class);\n-            when(clientFactory.setDomain(any())).thenReturn(clientFactory);\n-            when(clientFactory.create(any(AuthenticationHandler.class))).thenReturn(client);\n-            when(clientFactory.create(anyString(), anyString())).thenReturn(client);\n-\n-            return clientFactory;\n-        }\n-    });\n-\n-}"},{"sha":"8f34e28e7214f8a4a0629b2edb2230b271eab84c","filename":"client/idrepo/console/src/test/java/org/apache/syncope/client/console/AbstractTest.java","status":"added","additions":236,"deletions":0,"changes":236,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25515a6e5ee6290adc1879e4cfe65ea0e87746ec/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25515a6e5ee6290adc1879e4cfe65ea0e87746ec/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java?ref=25515a6e5ee6290adc1879e4cfe65ea0e87746ec","patch":"@@ -0,0 +1,236 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.giffing.wicket.spring.boot.context.extensions.WicketApplicationInitConfiguration;\n+import com.giffing.wicket.spring.boot.context.extensions.boot.actuator.WicketEndpointRepository;\n+import com.giffing.wicket.spring.boot.starter.app.classscanner.candidates.WicketClassCandidatesHolder;\n+import com.giffing.wicket.spring.boot.starter.configuration.extensions.core.settings.general.GeneralSettingsProperties;\n+import com.giffing.wicket.spring.boot.starter.configuration.extensions.external.spring.boot.actuator.WicketEndpointRepositoryDefault;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.jaxrs.client.Client;\n+import org.apache.syncope.client.console.AbstractTest.TestSyncopeWebApplication.SyncopeServiceClient;\n+import org.apache.syncope.client.console.commons.AnyDirectoryPanelAditionalActionLinksProvider;\n+import org.apache.syncope.client.console.commons.AnyWizardBuilderAdditionalSteps;\n+import org.apache.syncope.client.console.commons.ExternalResourceProvider;\n+import org.apache.syncope.client.console.commons.IdRepoAnyDirectoryPanelAditionalActionLinksProvider;\n+import org.apache.syncope.client.console.commons.IdRepoAnyWizardBuilderAdditionalSteps;\n+import org.apache.syncope.client.console.commons.IdRepoExternalResourceProvider;\n+import org.apache.syncope.client.console.commons.IdRepoImplementationInfoProvider;\n+import org.apache.syncope.client.console.commons.IdRepoPolicyTabProvider;\n+import org.apache.syncope.client.console.commons.IdRepoStatusProvider;\n+import org.apache.syncope.client.console.commons.IdRepoVirSchemaDetailsPanelProvider;\n+import org.apache.syncope.client.console.commons.ImplementationInfoProvider;\n+import org.apache.syncope.client.console.commons.PolicyTabProvider;\n+import org.apache.syncope.client.console.commons.PreviewUtils;\n+import org.apache.syncope.client.console.commons.StatusProvider;\n+import org.apache.syncope.client.console.commons.VirSchemaDetailsPanelProvider;\n+import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n+import org.apache.syncope.client.console.init.MIMETypesLoader;\n+import org.apache.syncope.client.lib.AuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.info.NumbersInfo;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n+import org.apache.syncope.common.lib.info.SystemInfo;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n+import org.apache.wicket.util.tester.WicketTester;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.springframework.boot.autoconfigure.ImportAutoConfiguration;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+public abstract class AbstractTest {\n+\n+    @ImportAutoConfiguration\n+    @Configuration\n+    public static class SyncopeConsoleWebApplicationTestConfig {\n+\n+        @Bean\n+        public ServiceOps selfServiceOps() {\n+            return mock(ServiceOps.class);\n+        }\n+\n+        @Bean\n+        public DomainOps domainOps() {\n+            DomainOps domainOps = mock(DomainOps.class);\n+            when(domainOps.list()).thenReturn(List.of(new Domain.Builder(SyncopeConstants.MASTER_DOMAIN).build()));\n+            return domainOps;\n+        }\n+\n+        @Bean\n+        public GeneralSettingsProperties generalSettingsProperties() {\n+            return new GeneralSettingsProperties();\n+        }\n+\n+        @Bean\n+        public List<WicketApplicationInitConfiguration> configurations() {\n+            return List.of();\n+        }\n+\n+        @Bean\n+        public WicketClassCandidatesHolder wicketClassCandidatesHolder() {\n+            return new WicketClassCandidatesHolder();\n+        }\n+\n+        @Bean\n+        public WicketEndpointRepository wicketEndpointRepository() {\n+            return new WicketEndpointRepositoryDefault();\n+        }\n+\n+        @Bean\n+        public ClassPathScanImplementationLookup classPathScanImplementationLookup() {\n+            ClassPathScanImplementationLookup lookup = new ClassPathScanImplementationLookup();\n+            lookup.load();\n+            return lookup;\n+        }\n+\n+        @Bean\n+        public MIMETypesLoader mimeTypesLoader() {\n+            MIMETypesLoader mimeTypesLoader = new MIMETypesLoader();\n+            mimeTypesLoader.load();\n+            return mimeTypesLoader;\n+        }\n+\n+        @Bean\n+        public PreviewUtils previewUtils() {\n+            return new PreviewUtils();\n+        }\n+\n+        @Bean\n+        public ExternalResourceProvider resourceProvider() {\n+            return new IdRepoExternalResourceProvider();\n+        }\n+\n+        @Bean\n+        public AnyWizardBuilderAdditionalSteps anyWizardBuilderAdditionalSteps() {\n+            return new IdRepoAnyWizardBuilderAdditionalSteps();\n+        }\n+\n+        @Bean\n+        public StatusProvider statusProvider() {\n+            return new IdRepoStatusProvider();\n+        }\n+\n+        @Bean\n+        public VirSchemaDetailsPanelProvider virSchemaDetailsPanelProvider() {\n+            return new IdRepoVirSchemaDetailsPanelProvider();\n+        }\n+\n+        @Bean\n+        public AnyDirectoryPanelAditionalActionLinksProvider anyDirectoryPanelAditionalActionLinksProvider() {\n+            return new IdRepoAnyDirectoryPanelAditionalActionLinksProvider();\n+        }\n+\n+        @Bean\n+        public ImplementationInfoProvider implementationInfoProvider() {\n+            return new IdRepoImplementationInfoProvider();\n+        }\n+\n+        @Bean\n+        public PolicyTabProvider policyTabProvider() {\n+            return new IdRepoPolicyTabProvider();\n+        }\n+    }\n+\n+    public static class TestSyncopeWebApplication extends SyncopeWebApplication {\n+\n+        public interface SyncopeServiceClient extends SyncopeService, Client {\n+        }\n+\n+        private SyncopeService getSyncopeService() {\n+            SyncopeServiceClient service = mock(SyncopeServiceClient.class);\n+            when(service.type(anyString())).thenReturn(service);\n+            when(service.accept(anyString())).thenReturn(service);\n+\n+            when(service.platform()).thenReturn(new PlatformInfo());\n+            when(service.system()).thenReturn(new SystemInfo());\n+\n+            NumbersInfo numbersInfo = new NumbersInfo();\n+            Stream.of(NumbersInfo.ConfItem.values()).\n+                    forEach(item -> numbersInfo.getConfCompleteness().put(item.name(), true));\n+            when(service.numbers()).thenReturn(numbersInfo);\n+\n+            return service;\n+        }\n+\n+        private UserTO getUserTO() {\n+            UserTO userTO = new UserTO();\n+            userTO.setUsername(\"username\");\n+            return userTO;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public SyncopeClientFactoryBean newClientFactory() {\n+            SyncopeClient client = mock(SyncopeClient.class);\n+\n+            when(client.self()).thenReturn(Pair.of(new HashMap<>(), getUserTO()));\n+\n+            SyncopeService syncopeService = getSyncopeService();\n+            when(client.getService(SyncopeService.class)).thenReturn(syncopeService);\n+\n+            SyncopeClientFactoryBean clientFactory = mock(SyncopeClientFactoryBean.class);\n+            when(clientFactory.setDomain(any())).thenReturn(clientFactory);\n+            when(clientFactory.create(any(AuthenticationHandler.class))).thenReturn(client);\n+            when(clientFactory.create(anyString(), anyString())).thenReturn(client);\n+\n+            return clientFactory;\n+        }\n+    }\n+\n+    protected static Properties PROPS;\n+\n+    protected static WicketTester TESTER;\n+\n+    @BeforeAll\n+    public static void loadProps() throws IOException {\n+        PROPS = new Properties();\n+        try (InputStream is = AbstractTest.class.getResourceAsStream(\"/console.properties\")) {\n+            PROPS.load(is);\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void setupTester() throws IOException {\n+        AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n+        ctx.register(SyncopeConsoleWebApplicationTestConfig.class);\n+        ctx.register(TestSyncopeWebApplication.class);\n+        ctx.refresh();\n+\n+        TESTER = new WicketTester(ctx.getBean(SyncopeWebApplication.class));\n+    }\n+}"},{"sha":"a1f0bd1a3ff5b35d62764459c88c51a812cc6011","filename":"client/idrepo/console/src/test/java/org/apache/syncope/client/console/SyncopeConsoleApplicationTest.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25515a6e5ee6290adc1879e4cfe65ea0e87746ec/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplicationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25515a6e5ee6290adc1879e4cfe65ea0e87746ec/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplicationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplicationTest.java?ref=25515a6e5ee6290adc1879e4cfe65ea0e87746ec","previous_filename":"client/console/src/test/java/org/apache/syncope/client/console/SyncopeConsoleApplicationTest.java"},{"sha":"28257a537d0fecf54e638209133b6218f58c37e5","filename":"client/idrepo/console/src/test/resources/log4j2.xml","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25515a6e5ee6290adc1879e4cfe65ea0e87746ec/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25515a6e5ee6290adc1879e4cfe65ea0e87746ec/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml?ref=25515a6e5ee6290adc1879e4cfe65ea0e87746ec","previous_filename":"client/console/src/test/resources/log4j2.xml"}]}