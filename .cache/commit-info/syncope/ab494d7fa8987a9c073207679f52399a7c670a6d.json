{"sha":"ab494d7fa8987a9c073207679f52399a7c670a6d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFiNDk0ZDdmYTg5ODdhOWMwNzMyMDc2NzlmNTIzOTlhN2M2NzBhNmQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-09-18T12:11:04Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-09-18T12:11:04Z"},"message":"[SYNCOPE-412] Backporting to 1_1_X part of audit SQL management from SYNCOPE-405\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1524383 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7100f2e2ad94f8c04a9ffa3f016eea10d24c81c3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7100f2e2ad94f8c04a9ffa3f016eea10d24c81c3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ab494d7fa8987a9c073207679f52399a7c670a6d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ab494d7fa8987a9c073207679f52399a7c670a6d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ab494d7fa8987a9c073207679f52399a7c670a6d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ab494d7fa8987a9c073207679f52399a7c670a6d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"cedcfd35fb7a8e58863ca700c537e47fd20cafa7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cedcfd35fb7a8e58863ca700c537e47fd20cafa7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cedcfd35fb7a8e58863ca700c537e47fd20cafa7"}],"stats":{"total":453,"additions":195,"deletions":258},"files":[{"sha":"50d5b62c924ba41d6ea8bda39ba007e4194ea3e8","filename":"core/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=ab494d7fa8987a9c073207679f52399a7c670a6d","patch":"@@ -1027,7 +1027,7 @@ under the License.\n         <dependency>\n           <groupId>mysql</groupId>\n           <artifactId>mysql-connector-java</artifactId>\n-          <version>5.1.24</version>\n+          <version>5.1.26</version>\n           <scope>test</scope>\n         </dependency>\n       </dependencies>"},{"sha":"b1361c0db982f3fa0576c8254ff9c60117da4e0c","filename":"core/src/main/java/org/apache/syncope/core/audit/JNDIFallbackConnectionSource.java","status":"modified","additions":74,"deletions":104,"changes":178,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FJNDIFallbackConnectionSource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FJNDIFallbackConnectionSource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FJNDIFallbackConnectionSource.java?ref=ab494d7fa8987a9c073207679f52399a7c670a6d","patch":"@@ -18,138 +18,108 @@\n  */\n package org.apache.syncope.core.audit;\n \n-import ch.qos.logback.core.db.ConnectionSource;\n-import ch.qos.logback.core.db.ConnectionSourceBase;\n import ch.qos.logback.core.db.DataSourceConnectionSource;\n-import ch.qos.logback.core.db.JNDIConnectionSource;\n-import ch.qos.logback.core.db.dialect.SQLDialectCode;\n-import ch.qos.logback.core.spi.ContextAwareBase;\n+import java.io.InputStream;\n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.util.Properties;\n import javax.naming.Context;\n import javax.naming.InitialContext;\n-import javax.naming.NamingException;\n import javax.rmi.PortableRemoteObject;\n import javax.sql.DataSource;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathFactory;\n+import org.apache.commons.dbcp.BasicDataSource;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.core.persistence.dao.impl.AbstractContentDealer;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.PropertiesLoaderUtils;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n+import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n+import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n+import org.w3c.dom.ls.DOMImplementationLS;\n+import org.w3c.dom.ls.LSInput;\n+import org.w3c.dom.ls.LSParser;\n \n /**\n- * Implementation of {@link ConnectionSource} that attempts at first to obtain a {@link javax.sql.DataSource} from a\n- * JNDI provider and, if not found, from a provided {@link javax.sql.DataSource DataSource}.\n+ * Specialization of {@link DataSourceConnectionSource} that first attempts to obtain a {@link javax.sql.DataSource}\n+ * from the JNDI name configured in Spring or, when not found, builds a new {@link javax.sql.DataSource DataSource} via\n+ * Commons DBCP; if any datasource if found, the SQL init script is used to populate the database.\n  */\n-public class JNDIFallbackConnectionSource extends ContextAwareBase implements ConnectionSource {\n+public class JNDIFallbackConnectionSource extends DataSourceConnectionSource {\n \n-    private String jndiLocation;\n+    private static final String PERSISTENCE_CONTEXT = \"/persistenceContext.xml\";\n \n-    private DataSource dataSource;\n+    private static DataSource datasource;\n \n-    private ConnectionSourceBase delegate;\n-\n-    public String getJndiLocation() {\n-        return jndiLocation;\n-    }\n-\n-    public void setJndiLocation(final String jndiLocation) {\n-        this.jndiLocation = jndiLocation;\n-    }\n+    static {\n+        // 1. Attempts to lookup for configured JNDI datasource (if present and available)\n+        InputStream springConf = JNDIFallbackConnectionSource.class.getResourceAsStream(PERSISTENCE_CONTEXT);\n+        try {\n+            DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();\n+            DOMImplementationLS impl = (DOMImplementationLS) reg.getDOMImplementation(\"LS\");\n+            LSParser parser = impl.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, null);\n+            LSInput lsinput = impl.createLSInput();\n+            lsinput.setByteStream(springConf);\n \n-    public DataSource getDataSource() {\n-        return dataSource;\n-    }\n+            XPathFactory xPathfactory = XPathFactory.newInstance();\n+            XPath xpath = xPathfactory.newXPath();\n+            XPathExpression expr = xpath.compile(\"//*[local-name()='property' and @name='jndiName']/@value\");\n+            String jndiName = (String) expr.evaluate(parser.parse(lsinput), XPathConstants.STRING);\n \n-    public void setDataSource(final DataSource dataSource) {\n-        this.dataSource = dataSource;\n-    }\n+            Context ctx = new InitialContext();\n+            Object obj = ctx.lookup(jndiName);\n \n-    private void chooseDelegate() {\n-        if (delegate != null) {\n-            return;\n+            datasource = (DataSource) PortableRemoteObject.narrow(obj, DataSource.class);\n+        } catch (Exception e) {\n+            // ignore\n+        } finally {\n+            IOUtils.closeQuietly(springConf);\n         }\n \n-        JNDIConnectionSource jndiCS = new JNDIConnectionSource();\n-        jndiCS.setJndiLocation(jndiLocation);\n+        // 2. Creates Commons DBCP datasource\n+        String initSQLScript = null;\n         try {\n-            Context ctx = new InitialContext();\n-            Object obj = ctx.lookup(jndiCS.getJndiLocation());\n-\n-            PortableRemoteObject.narrow(obj, DataSource.class);\n+            Properties persistence = PropertiesLoaderUtils.loadProperties(\n+                    new ClassPathResource(AbstractContentDealer.PERSISTENCE_PROPERTIES));\n \n-            delegate = jndiCS;\n-            addInfo(\"DataSource obtained from \" + jndiLocation);\n-        } catch (NamingException e) {\n-            addError(\"During lookup of \" + jndiLocation);\n-        } catch (ClassCastException e) {\n-            addError(\"Object at \" + jndiLocation + \" does not seem to be a DataSource instance\", e);\n-        }\n+            initSQLScript = persistence.getProperty(\"logback.sql\");\n \n-        if (delegate == null) {\n-            addInfo(\"Could not obtain DataSource via JNDI\");\n+            if (datasource == null) {\n+                BasicDataSource bds = new BasicDataSource();\n+                bds.setDriverClassName(persistence.getProperty(\"jpa.driverClassName\"));\n+                bds.setUrl(persistence.getProperty(\"jpa.url\"));\n+                bds.setUsername(persistence.getProperty(\"jpa.username\"));\n+                bds.setPassword(persistence.getProperty(\"jpa.password\"));\n \n-            DataSourceConnectionSource dataSourceCS = new DataSourceConnectionSource();\n-            dataSourceCS.setDataSource(dataSource);\n-            Connection conn = null;\n-            try {\n-                conn = dataSourceCS.getConnection();\n+                bds.setLogAbandoned(true);\n+                bds.setRemoveAbandoned(true);\n \n-                delegate = dataSourceCS;\n-                addInfo(\"Provided DataSource successfully reported\");\n-            } catch (SQLException e) {\n-                addError(\"While trying to get connection from DataSource \" + dataSource, e);\n-            } finally {\n-                if (conn != null) {\n-                    try {\n-                        conn.close();\n-                    } catch (SQLException sqle) {\n-                        addError(\"Could not close connection\", sqle);\n-                    }\n-                }\n+                datasource = bds;\n             }\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Audit datasource configuration failed\", e);\n         }\n \n-        if (delegate != null) {\n-            delegate.setContext(context);\n+        // 3. Initializes the chosen datasource\n+        ResourceDatabasePopulator populator = new ResourceDatabasePopulator();\n+        populator.setScripts(new Resource[] {new ClassPathResource(\"/logback/\" + initSQLScript)});\n+        // forces statement separation via ;; in order to support stored procedures\n+        populator.setSeparator(\";;\");\n+        Connection conn = DataSourceUtils.getConnection(datasource);\n+        try {\n+            populator.populate(conn);\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(\"Could not init the Audit datasource\", e);\n+        } finally {\n+            DataSourceUtils.releaseConnection(conn, datasource);\n         }\n     }\n \n-    @Override\n-    public boolean isStarted() {\n-        chooseDelegate();\n-        return delegate.isStarted();\n-    }\n-\n-    @Override\n-    public void start() {\n-        chooseDelegate();\n-        delegate.start();\n-    }\n-\n-    @Override\n-    public void stop() {\n-        chooseDelegate();\n-        delegate.stop();\n-    }\n-\n-    @Override\n-    public Connection getConnection() throws SQLException {\n-\n-        chooseDelegate();\n-        return delegate.getConnection();\n-    }\n-\n-    @Override\n-    public SQLDialectCode getSQLDialectCode() {\n-        chooseDelegate();\n-        return delegate.getSQLDialectCode();\n-    }\n-\n-    @Override\n-    public boolean supportsGetGeneratedKeys() {\n-        chooseDelegate();\n-        return delegate.supportsGetGeneratedKeys();\n-    }\n-\n-    @Override\n-    public boolean supportsBatchUpdates() {\n-        chooseDelegate();\n-        return delegate.supportsBatchUpdates();\n+    public JNDIFallbackConnectionSource() {\n+        super.setDataSource(datasource);\n     }\n }"},{"sha":"33c36d141cad3ce9122e17ae7eea23b6c9f66458","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AbstractContentDealer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractContentDealer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractContentDealer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractContentDealer.java?ref=ab494d7fa8987a9c073207679f52399a7c670a6d","patch":"@@ -35,7 +35,7 @@ public abstract class AbstractContentDealer {\n \n     protected static final String ROOT_ELEMENT = \"dataset\";\n \n-    private static final String PERSISTENCE_PROPERTIES = \"/persistence.properties\";\n+    public static final String PERSISTENCE_PROPERTIES = \"/persistence.properties\";\n \n     private static final String VIEWS_XML = \"/views.xml\";\n "},{"sha":"f78649883ea501ea2a911f640f3ffc3751daf447","filename":"core/src/main/resources/audit.xml","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fresources%2Faudit.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fresources%2Faudit.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Faudit.xml?ref=ab494d7fa8987a9c073207679f52399a7c670a6d","patch":"@@ -18,18 +18,8 @@ specific language governing permissions and limitations\n under the License.\n -->\n <included>\n-  <property resource=\"persistence.properties\"/>\n-  \n   <appender name=\"audit\" class=\"ch.qos.logback.classic.db.DBAppender\">\n-    <connectionSource class=\"org.apache.syncope.core.audit.JNDIFallbackConnectionSource\">\n-      <param name=\"jndiLocation\" value=\"java:comp/env/jdbc/syncopeDataSource\"/>\n-      <dataSource class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n-        <param name=\"driverClassName\" value=\"${jpa.driverClassName}\"/>\n-        <param name=\"url\" value=\"${jpa.url}\"/>\n-        <param name=\"username\" value=\"${jpa.username}\"/>\n-        <param name=\"password\" value=\"${jpa.password}\"/>\n-      </dataSource>\n-    </connectionSource>\n+    <connectionSource class=\"org.apache.syncope.core.audit.JNDIFallbackConnectionSource\"/>\n   </appender>\n   \n   <logger name=\"syncope.audit\" additivity=\"false\">"},{"sha":"a054a5f895af1d61bb892d1968e50b814d95061e","filename":"core/src/main/resources/logback/h2.sql","status":"modified","additions":9,"deletions":14,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fh2.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fh2.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fh2.sql?ref=ab494d7fa8987a9c073207679f52399a7c670a6d","patch":"@@ -15,15 +15,11 @@\n -- specific language governing permissions and limitations\n -- under the License.\n \n-# This SQL script creates the required tables by ch.qos.logback.classic.db.DBAppender.\n-#\n-# It is intended for H2 databases. \n-\n-DROP TABLE logging_event_exception IF EXISTS;\n-DROP TABLE logging_event_property IF EXISTS;\n-DROP TABLE logging_event IF EXISTS;\n+-- This SQL script creates the required tables by ch.qos.logback.classic.db.DBAppender.\n+--\n+-- It is intended for H2 databases. \n \n-CREATE TABLE logging_event (\n+CREATE TABLE IF NOT EXISTS logging_event (\n   timestmp BIGINT NOT NULL,\n   formatted_message LONGVARCHAR NOT NULL,\n   logger_name VARCHAR(256) NOT NULL,\n@@ -38,19 +34,18 @@ CREATE TABLE logging_event (\n   caller_class VARCHAR(256), \n   caller_method VARCHAR(256), \n   caller_line CHAR(4),\n-  event_id IDENTITY NOT NULL);\n-\n+  event_id IDENTITY NOT NULL);;\n \n-CREATE TABLE logging_event_property (\n+CREATE TABLE IF NOT EXISTS logging_event_property (\n   event_id BIGINT NOT NULL,\n   mapped_key  VARCHAR(254) NOT NULL,\n   mapped_value LONGVARCHAR,\n   PRIMARY KEY(event_id, mapped_key),\n-  FOREIGN KEY (event_id) REFERENCES logging_event(event_id));\n+  FOREIGN KEY (event_id) REFERENCES logging_event(event_id));;\n \n-CREATE TABLE logging_event_exception (\n+CREATE TABLE IF NOT EXISTS logging_event_exception (\n   event_id BIGINT NOT NULL,\n   i SMALLINT NOT NULL,\n   trace_line VARCHAR(256) NOT NULL,\n   PRIMARY KEY(event_id, i),\n-  FOREIGN KEY (event_id) REFERENCES logging_event(event_id));\n+  FOREIGN KEY (event_id) REFERENCES logging_event(event_id));;"},{"sha":"cd8cb55d41ac7a7b3ace9f37d9619231f362ea74","filename":"core/src/main/resources/logback/hsqldb.sql","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cedcfd35fb7a8e58863ca700c537e47fd20cafa7/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fhsqldb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cedcfd35fb7a8e58863ca700c537e47fd20cafa7/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fhsqldb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fhsqldb.sql?ref=cedcfd35fb7a8e58863ca700c537e47fd20cafa7","patch":"@@ -1,56 +0,0 @@\n--- Licensed to the Apache Software Foundation (ASF) under one\n--- or more contributor license agreements.  See the NOTICE file\n--- distributed with this work for additional information\n--- regarding copyright ownership.  The ASF licenses this file\n--- to you under the Apache License, Version 2.0 (the\n--- \"License\"); you may not use this file except in compliance\n--- with the License.  You may obtain a copy of the License at\n---\n---   http://www.apache.org/licenses/LICENSE-2.0\n---\n--- Unless required by applicable law or agreed to in writing,\n--- software distributed under the License is distributed on an\n--- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n--- KIND, either express or implied.  See the License for the\n--- specific language governing permissions and limitations\n--- under the License.\n-\n-# This SQL script creates the required tables by ch.qos.logback.classic.db.DBAppender.\n-#\n-# It is intended for HSQL databases. It has been tested on HSQL 1.8.07.\n-\n-DROP TABLE logging_event_exception IF EXISTS;\n-DROP TABLE logging_event_property IF EXISTS;\n-DROP TABLE logging_event IF EXISTS;\n-\n-CREATE TABLE logging_event (\n-  timestmp BIGINT NOT NULL,\n-  formatted_message LONGVARCHAR NOT NULL,\n-  logger_name VARCHAR(256) NOT NULL,\n-  level_string VARCHAR(256) NOT NULL,\n-  thread_name VARCHAR(256),\n-  reference_flag SMALLINT,\n-  arg0 VARCHAR(256),\n-  arg1 VARCHAR(256),\n-  arg2 VARCHAR(256),\n-  arg3 VARCHAR(256),\n-  caller_filename VARCHAR(256), \n-  caller_class VARCHAR(256), \n-  caller_method VARCHAR(256), \n-  caller_line CHAR(4),\n-  event_id BIGINT NOT NULL IDENTITY);\n-\n-\n-CREATE TABLE logging_event_property (\n-  event_id BIGINT NOT NULL,\n-  mapped_key  VARCHAR(254) NOT NULL,\n-  mapped_value LONGVARCHAR,\n-  PRIMARY KEY(event_id, mapped_key),\n-  FOREIGN KEY (event_id) REFERENCES logging_event(event_id));\n-\n-CREATE TABLE logging_event_exception (\n-  event_id BIGINT NOT NULL,\n-  i SMALLINT NOT NULL,\n-  trace_line VARCHAR(256) NOT NULL,\n-  PRIMARY KEY(event_id, i),\n-  FOREIGN KEY (event_id) REFERENCES logging_event(event_id));\n\\ No newline at end of file"},{"sha":"848240995580089d5cf9805c07c0bc60a2be4591","filename":"core/src/main/resources/logback/mysql.sql","status":"modified","additions":10,"deletions":23,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fmysql.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fmysql.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fmysql.sql?ref=ab494d7fa8987a9c073207679f52399a7c670a6d","patch":"@@ -15,20 +15,12 @@\n -- specific language governing permissions and limitations\n -- under the License.\n \n-# This SQL script creates the required tables by ch.qos.logback.classic.db.DBAppender.\n-#\n-# It is intended for MySQL databases. It has been tested on MySQL 5.1.37 \n-# on Linux\n-\n-BEGIN;\n-DROP TABLE IF EXISTS logging_event_property;\n-DROP TABLE IF EXISTS logging_event_exception;\n-DROP TABLE IF EXISTS logging_event;\n-COMMIT;\n-\n+-- This SQL script creates the required tables by ch.qos.logback.classic.db.DBAppender.\n+--\n+-- It is intended for MySQL databases. It has been tested on MySQL 5.1.37 \n+-- on Linux\n \n-BEGIN;\n-CREATE TABLE logging_event \n+CREATE TABLE IF NOT EXISTS logging_event \n   (\n     timestmp         BIGINT NOT NULL,\n     formatted_message  TEXT NOT NULL,\n@@ -45,27 +37,22 @@ CREATE TABLE logging_event\n     caller_method     VARCHAR(254) NOT NULL,\n     caller_line       CHAR(4) NOT NULL,\n     event_id          BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY\n-  );\n-COMMIT;\n+  );;\n \n-BEGIN;\n-CREATE TABLE logging_event_property\n+CREATE TABLE IF NOT EXISTS logging_event_property\n   (\n     event_id\t      BIGINT NOT NULL,\n     mapped_key        VARCHAR(254) NOT NULL,\n     mapped_value      TEXT,\n     PRIMARY KEY(event_id, mapped_key),\n     FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n-  );\n-COMMIT;\n+  );;\n \n-BEGIN;\n-CREATE TABLE logging_event_exception\n+CREATE TABLE IF NOT EXISTS logging_event_exception\n   (\n     event_id         BIGINT NOT NULL,\n     i                SMALLINT NOT NULL,\n     trace_line       VARCHAR(254) NOT NULL,\n     PRIMARY KEY(event_id, i),\n     FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n-  );\n-COMMIT;\n\\ No newline at end of file\n+  );;"},{"sha":"a6d93cffc46caae71f424fd7304bf73993949e90","filename":"core/src/main/resources/logback/oracle.sql","status":"modified","additions":66,"deletions":30,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Foracle.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Foracle.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Foracle.sql?ref=ab494d7fa8987a9c073207679f52399a7c670a6d","patch":"@@ -20,17 +20,17 @@\n -- It is intended for Oracle 9i, 10g and 11g databases. Tested on version 9.2, \n -- 10g and 11g.\n \n--- The following lines are useful in cleaning any previously existing tables \n-\n---drop TRIGGER logging_event_id_seq_trig; \n---drop SEQUENCE logging_event_id_seq; \n---drop table logging_event_property; \n---drop table logging_event_exception; \n---drop table logging_event; \n-\n-\n-CREATE SEQUENCE logging_event_id_seq MINVALUE 1 START WITH 1;\n+BEGIN\n+    BEGIN\n+         EXECUTE IMMEDIATE 'DROP TABLE logging_event CASCADE CONSTRAINTS';\n+    EXCEPTION\n+         WHEN OTHERS THEN\n+                IF SQLCODE != -942 THEN\n+                     RAISE;\n+                END IF;\n+    END;\n \n+    EXECUTE IMMEDIATE '\n CREATE TABLE logging_event \n   (\n     timestmp         NUMBER(20) NOT NULL,\n@@ -48,43 +48,79 @@ CREATE TABLE logging_event\n     caller_method     VARCHAR(254) NOT NULL,\n     caller_line       CHAR(4) NOT NULL,\n     event_id          NUMBER(10) PRIMARY KEY\n-  );\n+  )';\n \n+END;\n+;;\n \n--- the / suffix may or may not be needed depending on your SQL Client\n--- Some SQL Clients, e.g. SQuirrel SQL has trouble with the following\n--- trigger creation command, while SQLPlus (the basic SQL Client which\n--- ships with Oracle) has no trouble at all.\n-\n-CREATE TRIGGER logging_event_id_seq_trig\n-  BEFORE INSERT ON logging_event\n-  FOR EACH ROW  \n-  BEGIN  \n-    SELECT logging_event_id_seq.NEXTVAL \n-    INTO   :NEW.event_id \n-    FROM   DUAL;  \n-  END;\n-/\n-\n+BEGIN\n+    BEGIN\n+         EXECUTE IMMEDIATE 'DROP TABLE logging_event_property CASCADE CONSTRAINTS';\n+    EXCEPTION\n+         WHEN OTHERS THEN\n+                IF SQLCODE != -942 THEN\n+                     RAISE;\n+                END IF;\n+    END;\n \n+    EXECUTE IMMEDIATE '\n CREATE TABLE logging_event_property\n   (\n     event_id\t      NUMBER(10) NOT NULL,\n     mapped_key        VARCHAR2(254) NOT NULL,\n     mapped_value      VARCHAR2(1024),\n     PRIMARY KEY(event_id, mapped_key),\n     FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n-  );\n-  \n+  )\n+';\n+\n+END;\n+;;\n+\n+BEGIN\n+    BEGIN\n+         EXECUTE IMMEDIATE 'DROP TABLE logging_event_exception CASCADE CONSTRAINTS';\n+    EXCEPTION\n+         WHEN OTHERS THEN\n+                IF SQLCODE != -942 THEN\n+                     RAISE;\n+                END IF;\n+    END;\n+\n+    EXECUTE IMMEDIATE '\n CREATE TABLE logging_event_exception\n   (\n     event_id         NUMBER(10) NOT NULL,\n     i                SMALLINT NOT NULL,\n     trace_line       VARCHAR2(254) NOT NULL,\n     PRIMARY KEY(event_id, i),\n     FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n-  );\n-  \n+  )\n+';\n \n+END;\n+;;\n \n+DECLARE\n+  t_count INTEGER;\n+BEGIN\n+  SELECT COUNT(*)\n+    INTO t_count\n+    FROM user_sequences\n+   WHERE sequence_name = 'LOGGING_EVENT_ID_SEQ';\n \n+  IF t_count = 0 THEN\n+    EXECUTE IMMEDIATE 'CREATE SEQUENCE LOGGING_EVENT_ID_SEQ MINVALUE 1 START WITH 1';\n+  END IF;\n+END;\n+;;\n+\n+CREATE OR REPLACE TRIGGER logging_event_id_seq_trig\n+  BEFORE INSERT ON logging_event\n+  FOR EACH ROW  \n+  BEGIN  \n+    SELECT logging_event_id_seq.NEXTVAL \n+    INTO   :NEW.event_id \n+    FROM   DUAL;  \n+  END;\n+;;"},{"sha":"e7ee1ceed28e1a64018856befb7ff6faa403f6f4","filename":"core/src/main/resources/logback/postgresql.sql","status":"modified","additions":21,"deletions":11,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fpostgresql.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fpostgresql.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fpostgresql.sql?ref=ab494d7fa8987a9c073207679f52399a7c670a6d","patch":"@@ -19,16 +19,26 @@\n --\n -- It is intended for PostgreSQL databases.\n \n-DROP TABLE    logging_event_property;\n-DROP TABLE    logging_event_exception;\n-DROP TABLE    logging_event;\n-DROP SEQUENCE logging_event_id_seq;\n+DO\n+$do$\n+DECLARE\n+   _kind \"char\";\n+BEGIN\n \n+SELECT INTO _kind  c.relkind\n+FROM   pg_class     c\n+JOIN   pg_namespace n ON n.oid = c.relnamespace\n+WHERE  c.relname = 'logging_event_id_seq'\n+AND    c.relkind = ANY('{r,i,S,v,f}');\n \n-CREATE SEQUENCE logging_event_id_seq MINVALUE 1 START 1;\n+IF NOT FOUND THEN\n+  CREATE SEQUENCE logging_event_id_seq MINVALUE 1 START 1;\n+END IF;\n \n+END\n+$do$;;\n \n-CREATE TABLE logging_event \n+CREATE TABLE IF NOT EXISTS logging_event \n   (\n     timestmp         BIGINT NOT NULL,\n     formatted_message  TEXT NOT NULL,\n@@ -45,22 +55,22 @@ CREATE TABLE logging_event\n     caller_method     VARCHAR(254) NOT NULL,\n     caller_line       CHAR(4) NOT NULL,\n     event_id          BIGINT DEFAULT nextval('logging_event_id_seq') PRIMARY KEY\n-  );\n+  );;\n \n-CREATE TABLE logging_event_property\n+CREATE TABLE IF NOT EXISTS logging_event_property\n   (\n     event_id\t      BIGINT NOT NULL,\n     mapped_key        VARCHAR(254) NOT NULL,\n     mapped_value      VARCHAR(1024),\n     PRIMARY KEY(event_id, mapped_key),\n     FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n-  );\n+  );;\n \n-CREATE TABLE logging_event_exception\n+CREATE TABLE IF NOT EXISTS logging_event_exception\n   (\n     event_id         BIGINT NOT NULL,\n     i                SMALLINT NOT NULL,\n     trace_line       VARCHAR(254) NOT NULL,\n     PRIMARY KEY(event_id, i),\n     FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n-  );\n+  );;"},{"sha":"fbab0c9fef349267c00de0e63ef2e4f6ef447f8a","filename":"core/src/main/resources/logback/sqlserver.sql","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fsqlserver.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fsqlserver.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fsqlserver.sql?ref=ab494d7fa8987a9c073207679f52399a7c670a6d","patch":"@@ -15,12 +15,20 @@\n -- specific language governing permissions and limitations\n -- under the License.\n \n-DROP TABLE logging_event_property\n-DROP TABLE logging_event_exception\n-DROP TABLE logging_event\n-\n+IF NOT EXISTS\n+(SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[logging_event]') AND type in (N'U'))\n+BEGIN\n CREATE TABLE logging_event ( timestmp         DECIMAL(20) NOT NULL, formatted_message  VARCHAR(4000) NOT NULL, logger_name       VARCHAR(254) NOT NULL, level_string      VARCHAR(254) NOT NULL, thread_name       VARCHAR(254), reference_flag    SMALLINT, arg0              VARCHAR(254), arg1              VARCHAR(254), arg2              VARCHAR(254), arg3              VARCHAR(254), caller_filename   VARCHAR(254) NOT NULL, caller_class      VARCHAR(254) NOT NULL, caller_method     VARCHAR(254) NOT NULL, caller_line       CHAR(4) NOT NULL, event_id          DECIMAL(38) NOT NULL identity, PRIMARY KEY(event_id))\n+END;;\n \n+IF NOT EXISTS\n+(SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[logging_event_property]') AND type in (N'U'))\n+BEGIN\n CREATE TABLE logging_event_property ( event_id          DECIMAL(38) NOT NULL, mapped_key        VARCHAR(254) NOT NULL, mapped_value      VARCHAR(1024), PRIMARY KEY(event_id, mapped_key), FOREIGN KEY (event_id) REFERENCES logging_event(event_id))\n+END;;\n \n+IF NOT EXISTS\n+(SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[logging_event_exception]') AND type in (N'U'))\n+BEGIN\n CREATE TABLE logging_event_exception ( event_id         DECIMAL(38) NOT NULL, i                SMALLINT NOT NULL, trace_line       VARCHAR(254) NOT NULL, PRIMARY KEY(event_id, i), FOREIGN KEY (event_id) REFERENCES logging_event(event_id) ) \n+END;;"},{"sha":"3d57b0604c7240021c73a59719d076283f4cf754","filename":"core/src/main/resources/syncopeContext.xml","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab494d7fa8987a9c073207679f52399a7c670a6d/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml?ref=ab494d7fa8987a9c073207679f52399a7c670a6d","patch":"@@ -65,9 +65,6 @@ under the License.\n             <value type=\"org.springframework.core.io.Resource\">\n               classpath:/quartz/${quartz.sql}\n             </value>\n-            <value type=\"org.springframework.core.io.Resource\">\n-              classpath:/logback/${logback.sql}\n-            </value>\n           </array>\n         </property>\n       </bean>"}]}