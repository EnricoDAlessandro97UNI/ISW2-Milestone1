{"sha":"12f75f39e2b6f626ec230893e9960f3f76414e2e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjEyZjc1ZjM5ZTJiNmY2MjZlYzIzMDg5M2U5OTYwZjNmNzY0MTRlMmU=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-04T08:16:22Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-04T08:16:22Z"},"message":"(Fixes issue #30)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246423 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f8e589db2042e3ee21bf3df7eee5af4066a724bd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f8e589db2042e3ee21bf3df7eee5af4066a724bd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/12f75f39e2b6f626ec230893e9960f3f76414e2e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/12f75f39e2b6f626ec230893e9960f3f76414e2e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/12f75f39e2b6f626ec230893e9960f3f76414e2e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/12f75f39e2b6f626ec230893e9960f3f76414e2e/comments","author":null,"committer":null,"parents":[{"sha":"d7decbce78dd169b69ced306572f96a5b403df2f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d7decbce78dd169b69ced306572f96a5b403df2f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d7decbce78dd169b69ced306572f96a5b403df2f"}],"stats":{"total":221,"additions":94,"deletions":127},"files":[{"sha":"5a1ef12ca401ba7f7369c6e648c2d5898b14cca7","filename":"core/src/main/java/org/syncope/core/rest/SyncopeHandlerExceptionResolver.java","status":"removed","additions":0,"deletions":119,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d7decbce78dd169b69ced306572f96a5b403df2f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSyncopeHandlerExceptionResolver.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d7decbce78dd169b69ced306572f96a5b403df2f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSyncopeHandlerExceptionResolver.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSyncopeHandlerExceptionResolver.java?ref=d7decbce78dd169b69ced306572f96a5b403df2f","patch":"@@ -1,119 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.rest;\n-\n-import com.opensymphony.workflow.WorkflowException;\n-import java.io.IOException;\n-import javassist.NotFoundException;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import org.springframework.web.servlet.ModelAndView;\n-import org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver;\n-import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.client.validation.SyncopeClientErrorHandler;\n-import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.propagation.PropagationException;\n-import org.syncope.core.persistence.validation.MultiUniqueValueException;\n-import org.syncope.core.rest.data.InvalidSearchConditionException;\n-import org.syncope.types.SyncopeClientExceptionType;\n-\n-public class SyncopeHandlerExceptionResolver\n-        extends DefaultHandlerExceptionResolver {\n-\n-    @Override\n-    protected ModelAndView doResolveException(HttpServletRequest request,\n-            HttpServletResponse response,\n-            Object handler,\n-            Exception ex) {\n-\n-        ModelAndView defaultResolution =\n-                super.doResolveException(request, response, handler, ex);\n-        if (defaultResolution != null) {\n-            return defaultResolution;\n-        }\n-\n-        logger.error(\"Unexpected exception\", ex);\n-\n-        int statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-\n-        if (ex instanceof NotFoundException) {\n-            response.setHeader(\n-                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                    SyncopeClientExceptionType.NotFound.getHeaderValue());\n-            response.setHeader(\n-                    SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n-                    ex.getMessage());\n-\n-            statusCode = HttpServletResponse.SC_NOT_FOUND;\n-        } else if (ex instanceof WorkflowException) {\n-            response.setHeader(\n-                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                    SyncopeClientExceptionType.Workflow.getHeaderValue());\n-            response.setHeader(\n-                    SyncopeClientExceptionType.Workflow.getElementHeaderName(),\n-                    ex.getMessage());\n-        } else if (ex instanceof PropagationException) {\n-            response.setHeader(\n-                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                    SyncopeClientExceptionType.Propagation.getHeaderValue());\n-            response.setHeader(\n-                    SyncopeClientExceptionType.Propagation.getElementHeaderName(),\n-                    ((PropagationException) ex).getResource());\n-        } else if (ex instanceof SyncopeClientCompositeErrorException) {\n-            for (SyncopeClientException exception :\n-                    ((SyncopeClientCompositeErrorException) ex).getExceptions()) {\n-\n-                response.addHeader(\n-                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                        exception.getType().getHeaderValue());\n-\n-                for (String attributeName : exception.getElements()) {\n-                    response.addHeader(\n-                            exception.getType().getElementHeaderName(),\n-                            attributeName);\n-                }\n-            }\n-\n-            statusCode = ((SyncopeClientCompositeErrorException) ex).getStatusCode().value();\n-        } else if (ex instanceof MultiUniqueValueException) {\n-            response.setHeader(\n-                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                    SyncopeClientExceptionType.InvalidSchemaDefinition.getHeaderValue());\n-        } else if (ex instanceof MissingConfKeyException) {\n-            response.setHeader(\n-                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                    SyncopeClientExceptionType.NotFound.getHeaderValue());\n-            response.setHeader(\n-                    SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n-                    ((MissingConfKeyException) ex).getConfKey());\n-\n-            statusCode = HttpServletResponse.SC_NOT_FOUND;\n-        } else if (ex instanceof InvalidSearchConditionException) {\n-            response.setHeader(\n-                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                    SyncopeClientExceptionType.InvalidSearchCondition.getHeaderValue());\n-        }\n-\n-        try {\n-            response.sendError(statusCode);\n-        } catch (IOException ioe) {\n-            logger.warn(\"Handling of [\" + ex.getClass().getName()\n-                    + \"] resulted in Exception\", ioe);\n-        }\n-\n-        return new ModelAndView();\n-    }\n-}"},{"sha":"436a112f938d9198cd5a5322b2a8188426b9b099","filename":"core/src/main/webapp/WEB-INF/syncope-core-rest-servlet.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12f75f39e2b6f626ec230893e9960f3f76414e2e/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12f75f39e2b6f626ec230893e9960f3f76414e2e/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml?ref=12f75f39e2b6f626ec230893e9960f3f76414e2e","patch":"@@ -31,8 +31,6 @@\n \n     <context:component-scan base-package=\"org.syncope.core.rest.controller\"/>\n \n-    <bean id=\"handlerExceptionResolver\" class=\"org.syncope.core.rest.SyncopeHandlerExceptionResolver\"/>\n-\n     <bean id=\"jacksonObjectMapper\" class=\"org.syncope.core.rest.jackson.UnwrappedObjectMapper\"/>\n     \n     <bean id=\"mappingJacksonHttpMessageConverter\""},{"sha":"197039cd4c3383ef6e806559673ded52be5f6b7d","filename":"core/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12f75f39e2b6f626ec230893e9960f3f76414e2e/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12f75f39e2b6f626ec230893e9960f3f76414e2e/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=12f75f39e2b6f626ec230893e9960f3f76414e2e","patch":"@@ -76,11 +76,7 @@\n     </filter-mapping>\n \n     <error-page>\n-        <error-code>400</error-code>\n-        <location>/syncopeClientError.jsp</location>\n-    </error-page>\n-    <error-page>\n-        <error-code>404</error-code>\n+        <exception-type>java.lang.Throwable</exception-type>\n         <location>/syncopeClientError.jsp</location>\n     </error-page>\n     "},{"sha":"70c833f7b4a430064dfd5b3b4fd62a1adfb1fd04","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"modified","additions":93,"deletions":1,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12f75f39e2b6f626ec230893e9960f3f76414e2e/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12f75f39e2b6f626ec230893e9960f3f76414e2e/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=12f75f39e2b6f626ec230893e9960f3f76414e2e","patch":"@@ -1,2 +1,94 @@\n-<%@page contentType=\"application/json\" pageEncoding=\"UTF-8\"%>\n+<%@page isErrorPage=\"true\" contentType=\"application/json\" pageEncoding=\"UTF-8\"%>\n+<%@page import=\"org.syncope.core.rest.data.InvalidSearchConditionException\"%>\n+<%@page import=\"org.syncope.core.persistence.dao.MissingConfKeyException\"%>\n+<%@page import=\"org.syncope.core.persistence.validation.MultiUniqueValueException\"%>\n+<%@page import=\"org.syncope.client.validation.SyncopeClientException\"%>\n+<%@page import=\"org.syncope.client.validation.SyncopeClientCompositeErrorException\"%>\n+<%@page import=\"org.syncope.core.persistence.propagation.PropagationException\"%>\n+<%@page import=\"com.opensymphony.workflow.WorkflowException\"%>\n+<%@page import=\"org.syncope.types.SyncopeClientExceptionType\"%>\n+<%@page import=\"org.syncope.client.validation.SyncopeClientErrorHandler\"%>\n+<%@page import=\"javassist.NotFoundException\"%>\n+<%@page import=\"org.slf4j.LoggerFactory\"%>\n+<%@page import=\"org.slf4j.Logger\"%>\n+<%@page import=\"org.syncope.core.rest.controller.AbstractController\"%>\n+\n+<%!    static final Logger log =\n+            LoggerFactory.getLogger(AbstractController.class);%>\n+\n+<%\n+            Throwable ex = pageContext.getErrorData().getThrowable();\n+\n+            log.error(\"Exception thrown by REST methods\", ex);\n+\n+            int statusCode = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+            if (ex instanceof NotFoundException) {\n+                response.setHeader(\n+                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                        SyncopeClientExceptionType.NotFound.getHeaderValue());\n+                response.setHeader(\n+                        SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n+                        ex.getMessage());\n+\n+                statusCode = HttpServletResponse.SC_NOT_FOUND;\n+            } else if (ex instanceof WorkflowException) {\n+                response.setHeader(\n+                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                        SyncopeClientExceptionType.Workflow.getHeaderValue());\n+                response.setHeader(\n+                        SyncopeClientExceptionType.Workflow.getElementHeaderName(),\n+                        ex.getMessage());\n+\n+                statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+            } else if (ex instanceof PropagationException) {\n+                response.setHeader(\n+                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                        SyncopeClientExceptionType.Propagation.getHeaderValue());\n+                response.setHeader(\n+                        SyncopeClientExceptionType.Propagation.getElementHeaderName(),\n+                        ((PropagationException) ex).getResource());\n+\n+                statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+            } else if (ex instanceof SyncopeClientCompositeErrorException) {\n+                for (SyncopeClientException sce :\n+                        ((SyncopeClientCompositeErrorException) ex).getExceptions()) {\n+\n+                    response.addHeader(\n+                            SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                            sce.getType().getHeaderValue());\n+\n+                    for (String attributeName : sce.getElements()) {\n+                        response.addHeader(\n+                                sce.getType().getElementHeaderName(),\n+                                attributeName);\n+                    }\n+                }\n+\n+                statusCode = ((SyncopeClientCompositeErrorException) ex).getStatusCode().value();\n+            } else if (ex instanceof MultiUniqueValueException) {\n+                response.setHeader(\n+                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                        SyncopeClientExceptionType.InvalidSchemaDefinition.getHeaderValue());\n+\n+                statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+            } else if (ex instanceof MissingConfKeyException) {\n+                response.setHeader(\n+                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                        SyncopeClientExceptionType.NotFound.getHeaderValue());\n+                response.setHeader(\n+                        SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n+                        ((MissingConfKeyException) ex).getConfKey());\n+\n+                statusCode = HttpServletResponse.SC_NOT_FOUND;\n+            } else if (ex instanceof InvalidSearchConditionException) {\n+                response.setHeader(\n+                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                        SyncopeClientExceptionType.InvalidSearchCondition.getHeaderValue());\n+\n+                statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+            }\n+\n+            response.setStatus(statusCode);\n+%>\n null\n\\ No newline at end of file"}]}