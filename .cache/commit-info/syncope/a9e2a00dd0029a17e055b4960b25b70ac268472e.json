{"sha":"a9e2a00dd0029a17e055b4960b25b70ac268472e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE5ZTJhMDBkZDAwMjlhMTdlMDU1YjQ5NjBiMjViNzBhYzI2ODQ3MmU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-18T13:04:13Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-18T13:04:13Z"},"message":"Merge from 1_0_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1399647 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9282fa6d0faae2d5be40d7d2bae662668e11d7b2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9282fa6d0faae2d5be40d7d2bae662668e11d7b2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a9e2a00dd0029a17e055b4960b25b70ac268472e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a9e2a00dd0029a17e055b4960b25b70ac268472e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a9e2a00dd0029a17e055b4960b25b70ac268472e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a9e2a00dd0029a17e055b4960b25b70ac268472e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5532f9ee12d4a28b66005d81042daf1e238b6e1f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5532f9ee12d4a28b66005d81042daf1e238b6e1f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5532f9ee12d4a28b66005d81042daf1e238b6e1f"}],"stats":{"total":385,"additions":344,"deletions":41},"files":[{"sha":"d2b41b070a628885f3cc429b15e1d4a209b748c7","filename":"core/pom.xml","status":"modified","additions":87,"deletions":1,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -864,7 +864,9 @@ under the License.\n                 <phase>process-test-resources</phase>\n                 <configuration>\n                   <target>\n-                    <copy tofile=\"${project.build.directory}/classes/META-INF/orm.xml\" file=\"${basedir}/src/main/resources/META-INF/orm.xml.oracle\" overwrite=\"true\" />\n+                    <copy tofile=\"${project.build.directory}/classes/META-INF/orm.xml\" \n+                          file=\"${basedir}/src/main/resources/META-INF/orm.xml.oracle\" \n+                          overwrite=\"true\" />\n                   </target>\n                 </configuration>\n                 <goals>\n@@ -890,6 +892,90 @@ under the License.\n         </testResources>\n       </build>\n     </profile>\n+    \n+    <profile>\n+      <id>noopworkflow</id>\n+      <properties>\n+        <javaagent />\n+      </properties>\n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+\n+        <plugins>\n+          \n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-antrun-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>remove-activiti</id>\n+                <phase>process-test-resources</phase>\n+                <configuration>\n+                  <target>\n+                    <copy tofile=\"${project.build.directory}/classes/workflowContext.xml\" \n+                          file=\"${basedir}/src/test/resources/noopworkflow/workflowContext.xml\" \n+                          overwrite=\"true\" />\n+                  </target>\n+                </configuration>\n+                <goals>\n+                  <goal>run</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+          \n+          <!-- Strip Activiti-related entries from content.xml -->\n+          <plugin>\n+            <groupId>org.codehaus.mojo</groupId>\n+            <artifactId>xml-maven-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <phase>process-test-resources</phase>\n+                <goals>\n+                  <goal>transform</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+            <configuration>\n+              <forceCreation>true</forceCreation>\n+              <transformationSets>\n+                <transformationSet>\n+                  <dir>${project.build.directory}/test-classes</dir>\n+                  <includes>\n+                    <include>content.xml</include>\n+                  </includes>\n+                  <outputDir>${project.build.directory}/test-classes/</outputDir>\n+                  <stylesheet>${basedir}/src/test/resources/noopworkflow/stripActivitiFromContent.xsl</stylesheet>\n+                  <outputProperties>\n+                    <outputProperty>\n+                      <name>indent</name>\n+                      <value>yes</value>\n+                    </outputProperty>\n+                  </outputProperties>\n+                </transformationSet>\n+              </transformationSets>\n+            </configuration>\n+          </plugin>\n+\n+        </plugins>\n+        \n+        <testResources>\n+          <testResource>\n+            <directory>src/test/resources</directory>\n+            <filtering>true</filtering>\n+            <excludes>\n+              <exclude>workflow.properties</exclude>\n+            </excludes>\n+          </testResource>\n+          <testResource>\n+            <directory>src/test/resources/noopworkflow</directory>\n+            <filtering>true</filtering>\n+          </testResource>\n+        </testResources>\n+      </build>\n+    </profile>\n \n     <profile>\n       <id>sqlserver-it</id>"},{"sha":"31d93ca174449fd8ec0e0d6694c0c981ee471a77","filename":"core/src/main/java/org/apache/syncope/core/init/ActivitiWorkflowLoader.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FActivitiWorkflowLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FActivitiWorkflowLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FActivitiWorkflowLoader.java?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -27,16 +27,15 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n-public class ActivitiWorkflowLoader {\n+public class ActivitiWorkflowLoader implements WorkflowLoader {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ActivitiWorkflowLoader.class);\n \n     @Autowired\n     private RepositoryService repositoryService;\n \n+    @Override\n     public void load() {\n         List<ProcessDefinition> processes = repositoryService.createProcessDefinitionQuery().processDefinitionKey(\n                 ActivitiUserWorkflowAdapter.WF_PROCESS_ID).list();"},{"sha":"23e43580599d5b7a5aabc686a96a4f322f0e0675","filename":"core/src/main/java/org/apache/syncope/core/init/ContentLoader.java","status":"modified","additions":17,"deletions":13,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentLoader.java?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -38,7 +38,7 @@\n \n /**\n  * If empty, load default content to Syncope database by reading from\n- * <code>content.xml</code>.\n+ * <code>ckasspath:/content.xml</code>.\n  */\n @Component\n public class ContentLoader {\n@@ -65,7 +65,8 @@ public void load() {\n         boolean existingData = false;\n         try {\n             final String queryContent = \"SELECT * FROM \" + SyncopeConf.class.getSimpleName();\n-            statement = conn.prepareStatement(queryContent, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\n+            statement = conn.prepareStatement(\n+                    queryContent, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\n             resultSet = statement.executeQuery();\n             resultSet.last();\n \n@@ -155,17 +156,20 @@ public void load() {\n             LOG.error(\"While creating indexes\", e);\n         }\n \n-        try {\n-            statement = conn.prepareStatement(\"DELETE FROM ACT_GE_PROPERTY\");\n-            statement.executeUpdate();\n-        } catch (SQLException e) {\n-            LOG.error(\"Error during ACT_GE_PROPERTY delete rows\", e);\n-        } finally {\n-            if (statement != null) {\n-                try {\n-                    statement.close();\n-                } catch (SQLException e) {\n-                    LOG.error(\"Error closing statement of ACT_GE_PROPERTY delete rows\", e);\n+        // Can't test wfAdapter.getClass() because it is @Autowired\n+        if (SpringContextInitializer.isActivitiConfigured()) {\n+            try {\n+                statement = conn.prepareStatement(\"DELETE FROM ACT_GE_PROPERTY\");\n+                statement.executeUpdate();\n+            } catch (SQLException e) {\n+                LOG.error(\"Error during ACT_GE_PROPERTY delete rows\", e);\n+            } finally {\n+                if (statement != null) {\n+                    try {\n+                        statement.close();\n+                    } catch (SQLException e) {\n+                        LOG.error(\"Error closing statement of ACT_GE_PROPERTY delete rows\", e);\n+                    }\n                 }\n             }\n         }"},{"sha":"b89c456c45513b8b3e26d62431cada4afa2ce301","filename":"core/src/main/java/org/apache/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -74,9 +74,9 @@ public class JobInstanceLoader {\n     private ConfDAO confDAO;\n \n     private DefaultListableBeanFactory getBeanFactory() {\n-        ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n+        ConfigurableApplicationContext ctx = ApplicationContextProvider.getApplicationContext();\n \n-        return (DefaultListableBeanFactory) context.getBeanFactory();\n+        return (DefaultListableBeanFactory) ctx.getBeanFactory();\n     }\n \n     private static Long getIdFromJobName(final String name, final String pattern, final int prefixLength) {"},{"sha":"93c96b5eb25e424038b9f98cdc0ea2de4fe6df92","filename":"core/src/main/java/org/apache/syncope/core/init/SpringContextInitializer.java","status":"modified","additions":64,"deletions":3,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -18,12 +18,21 @@\n  */\n package org.apache.syncope.core.init;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Properties;\n import javax.servlet.ServletContext;\n+import org.apache.syncope.core.workflow.ActivitiUserWorkflowAdapter;\n+import org.apache.syncope.core.workflow.UserWorkflowAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.BeanFactoryAware;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.stereotype.Component;\n import org.springframework.web.context.ServletContextAware;\n \n@@ -33,6 +42,51 @@\n @Component\n public class SpringContextInitializer implements ServletContextAware, BeanFactoryAware, InitializingBean {\n \n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(SpringContextInitializer.class);\n+\n+    private static String wfAdapterClassName;\n+\n+    static {\n+        try {\n+            initWFAdapterClassName();\n+        } catch (IOException e) {\n+            LOG.error(\"Could not init wfAdapterClassName\", e);\n+        }\n+    }\n+\n+    /**\n+     * Read classpath:/workflow.properties in order to determine the configured workflow adapter class name.\n+     *\n+     * @throws IOException if anything goes wrong\n+     */\n+    public static void initWFAdapterClassName() throws IOException {\n+        Properties props = new java.util.Properties();\n+        InputStream propStream = null;\n+        try {\n+            propStream = ContentLoader.class.getResourceAsStream(\"/workflow.properties\");\n+            props.load(propStream);\n+            wfAdapterClassName = props.getProperty(\"wfAdapter\");\n+        } catch (Exception e) {\n+            LOG.error(\"Could not load workflow.properties\", e);\n+        } finally {\n+            if (propStream != null) {\n+                propStream.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check if the configured user workflow adapter is Activiti's.\n+     *\n+     * @return whether Activiti is configured for workflow or not\n+     */\n+    public static boolean isActivitiConfigured() {\n+        return wfAdapterClassName != null && wfAdapterClassName.equals(ActivitiUserWorkflowAdapter.class.getName());\n+    }\n+\n     @Autowired\n     private ConnInstanceLoader connInstanceLoader;\n \n@@ -43,30 +97,37 @@ public class SpringContextInitializer implements ServletContextAware, BeanFactor\n     private JobInstanceLoader jobInstanceLoader;\n \n     @Autowired\n-    private ActivitiWorkflowLoader activitiWorkflowLoader;\n+    private UserWorkflowAdapter wfAdapter;\n \n     @Autowired\n     private LoggerLoader loggerLoader;\n \n     @Autowired\n     private ImplementationClassNamesLoader classNamesLoader;\n \n+    private DefaultListableBeanFactory beanFactory;\n+\n     @Override\n     public void setServletContext(final ServletContext servletContext) {\n     }\n \n     @Override\n     public void setBeanFactory(final BeanFactory beanFactory) throws BeansException {\n+        this.beanFactory = (DefaultListableBeanFactory) beanFactory;\n     }\n \n     @Override\n     public void afterPropertiesSet() throws Exception {\n-\n         contentLoader.load();\n         connInstanceLoader.load();\n         jobInstanceLoader.load();\n-        activitiWorkflowLoader.load();\n         loggerLoader.load();\n         classNamesLoader.load();\n+\n+        if (wfAdapter.getLoaderClass() != null) {\n+            final WorkflowLoader wfLoader = (WorkflowLoader) beanFactory.createBean(\n+                    wfAdapter.getLoaderClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+            wfLoader.load();\n+        }\n     }\n }"},{"sha":"3780e48f12067e77fbf906014a48a4ff1a921b4a","filename":"core/src/main/java/org/apache/syncope/core/init/WorkflowLoader.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FWorkflowLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FWorkflowLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FWorkflowLoader.java?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.init;\n+\n+public interface WorkflowLoader {\n+\n+    void load();\n+}"},{"sha":"d93aec4f66c629f9c4d05dfd24ed9de92416f9ef","filename":"core/src/main/java/org/apache/syncope/core/workflow/AbstractUserWorkflowAdapter.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -22,6 +22,7 @@\n import java.util.Map.Entry;\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.core.init.WorkflowLoader;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n@@ -30,7 +31,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = { Throwable.class })\n+@Transactional(rollbackFor = {Throwable.class})\n public abstract class AbstractUserWorkflowAdapter implements UserWorkflowAdapter {\n \n     @Autowired\n@@ -39,6 +40,11 @@ public abstract class AbstractUserWorkflowAdapter implements UserWorkflowAdapter\n     @Autowired\n     protected UserDAO userDAO;\n \n+    @Override\n+    public Class<? extends WorkflowLoader> getLoaderClass() {\n+        return null;\n+    }\n+\n     @Override\n     public WorkflowResult<Entry<Long, Boolean>> create(final UserTO userTO)\n             throws UnauthorizedRoleException, WorkflowException {"},{"sha":"4a94b9fb22e538e34cfa722179ac46bbe7127359","filename":"core/src/main/java/org/apache/syncope/core/workflow/ActivitiUserWorkflowAdapter.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -59,6 +59,8 @@\n import org.apache.syncope.client.to.WorkflowDefinitionTO;\n import org.apache.syncope.client.to.WorkflowFormPropertyTO;\n import org.apache.syncope.client.to.WorkflowFormTO;\n+import org.apache.syncope.core.init.ActivitiWorkflowLoader;\n+import org.apache.syncope.core.init.WorkflowLoader;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.propagation.PropagationByResource;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n@@ -129,6 +131,11 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     @Autowired\n     private RepositoryService repositoryService;\n \n+    @Override\n+    public Class<? extends WorkflowLoader> getLoaderClass() {\n+        return ActivitiWorkflowLoader.class;\n+    }\n+\n     private void updateStatus(final SyncopeUser user) {\n         List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n         if (tasks.isEmpty() || tasks.size() > 1) {"},{"sha":"4da1f0f3f74716a48753029d27d23efe6d37fddd","filename":"core/src/main/java/org/apache/syncope/core/workflow/NoOpUserWorkflowAdapter.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -40,8 +40,8 @@\n @Transactional(rollbackFor = {Throwable.class})\n public class NoOpUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n \n-    private static final List<String> TASKS = Arrays.asList(new String[]{\n-                \"create\", \"activate\", \"update\", \"suspend\", \"reactivate\", \"delete\"});\n+    private static final List<String> TASKS =\n+            Arrays.asList(new String[]{\"create\", \"activate\", \"update\", \"suspend\", \"reactivate\", \"delete\"});\n \n     public static final String ENABLED = \"enabled\";\n \n@@ -66,16 +66,15 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n         }\n \n         String status;\n-        boolean propagate_enable;\n-\n+        boolean propagateEnable;\n         if (enabled == null) {\n             status = \"created\";\n-            propagate_enable = true;\n+            propagateEnable = true;\n         } else {\n             status = enabled\n                     ? \"active\"\n                     : \"suspended\";\n-            propagate_enable = enabled;\n+            propagateEnable = enabled;\n         }\n \n         user.setStatus(status);\n@@ -84,7 +83,7 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n         final PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(PropagationOperation.CREATE, user.getResourceNames());\n \n-        return new WorkflowResult<Map.Entry<Long, Boolean>>(new DefaultMapEntry(user.getId(), propagate_enable),\n+        return new WorkflowResult<Map.Entry<Long, Boolean>>(new DefaultMapEntry(user.getId(), propagateEnable),\n                 propByRes, \"create\");\n     }\n "},{"sha":"68a51ab52989df7a8fa346af3f20dd745e0e42e8","filename":"core/src/main/java/org/apache/syncope/core/workflow/UserWorkflowAdapter.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FUserWorkflowAdapter.java?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -24,6 +24,8 @@\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.client.to.WorkflowDefinitionTO;\n import org.apache.syncope.client.to.WorkflowFormTO;\n+import org.apache.syncope.core.init.SpringContextInitializer;\n+import org.apache.syncope.core.init.WorkflowLoader;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.util.NotFoundException;\n@@ -33,6 +35,15 @@\n  */\n public interface UserWorkflowAdapter {\n \n+    /**\n+     * Give the class to be instantiated and invoked by SpringContextInitializer for loading anything needed by this\n+     * adapter.\n+     *\n+     * @return null if no init is needed or the WorkflowLoader class for handling initialization\n+     * @see SpringContextInitializer\n+     */\n+    Class<? extends WorkflowLoader> getLoaderClass();\n+\n     /**\n      * Create an user.\n      *"},{"sha":"7c2308d5466556c97e6ad1fd591e54708d501a2c","filename":"core/src/test/java/org/apache/syncope/core/AbstractTest.java","status":"modified","additions":12,"deletions":6,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractTest.java?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -21,21 +21,22 @@\n import static org.junit.Assert.*;\n \n import java.io.InputStream;\n+import java.io.IOException;\n import java.sql.Connection;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n import java.util.Properties;\n-import org.junit.Before;\n+import org.junit.BeforeClass;\n import org.junit.runner.RunWith;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:syncopeContext.xml\", \"classpath:persistenceContext.xml\",\n-        \"classpath:schedulingContext.xml\", \"classpath:workflowContext.xml\" })\n+@ContextConfiguration(locations = {\"classpath:syncopeContext.xml\", \"classpath:persistenceContext.xml\",\n+    \"classpath:schedulingContext.xml\", \"classpath:workflowContext.xml\"})\n public abstract class AbstractTest {\n \n     /**\n@@ -76,16 +77,21 @@ private void logTableContent(final Connection conn, final String tableName) thro\n         }\n     }\n \n-    @Before\n-    public void setUpIdentityConnectorsBundles() {\n+    @BeforeClass\n+    public static void setUpIdentityConnectorsBundles() throws IOException {\n         Properties props = new java.util.Properties();\n+        InputStream propStream = null;\n         try {\n-            InputStream propStream = getClass().getResourceAsStream(\"/bundles.properties\");\n+            propStream = AbstractTest.class.getResourceAsStream(\"/bundles.properties\");\n             props.load(propStream);\n             connidSoapVersion = props.getProperty(\"connid.soap.version\");\n             bundlesDirectory = props.getProperty(\"bundles.directory\");\n         } catch (Exception e) {\n             LOG.error(\"Could not load bundles.properties\", e);\n+        } finally {\n+            if (propStream != null) {\n+                propStream.close();\n+            }\n         }\n         assertNotNull(connidSoapVersion);\n         assertNotNull(bundlesDirectory);"},{"sha":"2d45ec100ef40d8acb56dd580fd7852d542e3b08","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -21,6 +21,7 @@\n import javax.sql.DataSource;\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n import org.slf4j.Logger;\n@@ -29,7 +30,6 @@\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.web.client.RestTemplate;\n-import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = {\"classpath:restClientContext.xml\", \"classpath:testJDBCContext.xml\"})"},{"sha":"6c30702e793cb5318e5bde435a3c546bdafbd9b2","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.client.to.TaskTO;\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.core.scheduling.SyncJob;\n+import org.apache.syncope.core.init.SpringContextInitializer;\n import org.apache.syncope.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.scheduling.TestSyncJobActions;\n import org.apache.syncope.types.IntMappingType;\n@@ -317,7 +318,7 @@ public void sync() {\n \n         assertNotNull(userTO);\n         assertEquals(\"test9\", userTO.getUsername());\n-        assertEquals(\"active\", userTO.getStatus());\n+        assertEquals(SpringContextInitializer.isActivitiConfigured() ? \"active\" : \"created\", userTO.getStatus());\n         assertEquals(\"test9@syncope.apache.org\", userTO.getAttributeMap().get(\"email\").getValues().get(0));\n         assertEquals(\"test9@syncope.apache.org\", userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n         assertTrue(Integer.valueOf(userTO.getAttributeMap().get(\"fullname\").getValues().get(0)) <= 10);"},{"sha":"445bc5c30c885612a73878029ec1c04044f50973","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -60,10 +60,12 @@\n import org.apache.syncope.client.util.AttributableOperations;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.client.validation.SyncopeClientException;\n+import org.apache.syncope.core.init.SpringContextInitializer;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.types.CipherAlgorithm;\n import org.apache.syncope.types.PropagationTaskExecStatus;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n+import org.junit.Assume;\n import org.springframework.util.StringUtils;\n \n public class UserTestITCase extends AbstractTest {\n@@ -665,6 +667,8 @@ public void createWithRequiredValueMissing() {\n \n     @Test\n     public void createWithReject() {\n+        Assume.assumeTrue(SpringContextInitializer.isActivitiConfigured());\n+\n         UserTO userTO = getSampleTO(\"createWithReject@syncope.apache.org\");\n \n         // User with role 9 are defined in workflow as subject to approval\n@@ -727,6 +731,8 @@ public void createWithReject() {\n \n     @Test\n     public void createWithApproval() {\n+        Assume.assumeTrue(SpringContextInitializer.isActivitiConfigured());\n+\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n \n         UserTO userTO = getSampleTO(\"createWithApproval@syncope.apache.org\");\n@@ -1330,6 +1336,8 @@ public void verifyTaskRegistration() {\n \n     @Test\n     public void createActivate() {\n+        Assume.assumeTrue(SpringContextInitializer.isActivitiConfigured());\n+\n         UserTO userTO = getSampleTO(\"createActivate@syncope.apache.org\");\n \n         MembershipTO membershipTO = new MembershipTO();\n@@ -1356,6 +1364,8 @@ public void createActivate() {\n \n     @Test\n     public void createActivateByUsername() {\n+        Assume.assumeTrue(SpringContextInitializer.isActivitiConfigured());\n+\n         UserTO userTO = getSampleTO(\"createActivateByUsername@syncope.apache.org\");\n \n         MembershipTO membershipTO = new MembershipTO();\n@@ -1392,7 +1402,7 @@ public void suspendReactivate() {\n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         assertNotNull(userTO);\n-        assertEquals(\"active\", userTO.getStatus());\n+        assertEquals(SpringContextInitializer.isActivitiConfigured() ? \"active\" : \"created\", userTO.getStatus());\n \n         userTO = restTemplate.getForObject(BASE_URL + \"user/suspend/\" + userTO.getId(), UserTO.class);\n \n@@ -1416,7 +1426,7 @@ public void suspendReactivateByUsername() {\n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         assertNotNull(userTO);\n-        assertEquals(\"active\", userTO.getStatus());\n+        assertEquals(SpringContextInitializer.isActivitiConfigured() ? \"active\" : \"created\", userTO.getStatus());\n \n         userTO = restTemplate.getForObject(\n                 BASE_URL + \"user/suspendByUsername/{username}.json\", UserTO.class, userTO.getUsername());\n@@ -1453,7 +1463,7 @@ public void suspendReactivateOnResource() {\n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         assertNotNull(userTO);\n-        assertEquals(\"active\", userTO.getStatus());\n+        assertEquals(SpringContextInitializer.isActivitiConfigured() ? \"active\" : \"created\", userTO.getStatus());\n \n         String query = \"?resourceNames=\" + dbTable.getName() + \"&resourceNames=\" + ldap.getName()\n                 + \"&performLocally=true\"; // check also performLocally"},{"sha":"9c45e2ef1673ec7eb386f1fe6df8720233b35de9","filename":"core/src/test/resources/noopworkflow/stripActivitiFromContent.xsl","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Ftest%2Fresources%2Fnoopworkflow%2FstripActivitiFromContent.xsl","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Ftest%2Fresources%2Fnoopworkflow%2FstripActivitiFromContent.xsl","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fnoopworkflow%2FstripActivitiFromContent.xsl?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -0,0 +1,31 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n+                version=\"1.0\">\n+  \n+  <xsl:template match=\"/dataset/ACT_GE_PROPERTY\"/>\n+\n+  <xsl:template match=\"node()|@*|comment()\">\n+    <xsl:copy>\n+      <xsl:apply-templates select=\"@*|node()\"/>\n+    </xsl:copy>\n+  </xsl:template>\n+\n+</xsl:stylesheet>"},{"sha":"8f67ffd62eb11c080de1b1e093b84d0312757769","filename":"core/src/test/resources/noopworkflow/workflow.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Ftest%2Fresources%2Fnoopworkflow%2Fworkflow.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Ftest%2Fresources%2Fnoopworkflow%2Fworkflow.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fnoopworkflow%2Fworkflow.properties?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+wfAdapter=org.apache.syncope.core.workflow.NoOpUserWorkflowAdapter\n+jobExecutorActivate=false\n\\ No newline at end of file"},{"sha":"4ff6a43147002a1a46f9fe14ffaa683c2f4fd07c","filename":"core/src/test/resources/noopworkflow/workflowContext.xml","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Ftest%2Fresources%2Fnoopworkflow%2FworkflowContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9e2a00dd0029a17e055b4960b25b70ac268472e/core%2Fsrc%2Ftest%2Fresources%2Fnoopworkflow%2FworkflowContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fnoopworkflow%2FworkflowContext.xml?ref=a9e2a00dd0029a17e055b4960b25b70ac268472e","patch":"@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\" \n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+    \n+  <bean id=\"adminUser\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${adminUser}\"/>\n+  </bean>\n+    \n+  <bean id=\"wfAdapter\" class=\"${wfAdapter}\"/>\n+\n+  <bean id=\"velocityEngine\" class=\"org.springframework.ui.velocity.VelocityEngineFactoryBean\">\n+    <property name=\"velocityProperties\">\n+      <value>\n+        resource.loader=class\n+        class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader\n+      </value>\n+    </property>\n+  </bean>\n+</beans>\n\\ No newline at end of file"}]}