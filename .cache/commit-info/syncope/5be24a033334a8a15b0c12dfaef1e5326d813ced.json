{"sha":"5be24a033334a8a15b0c12dfaef1e5326d813ced","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjViZTI0YTAzMzMzNGE4YTE1YjBjMTJkZmFlZjFlNTMyNmQ4MTNjZWQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-25T15:36:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-25T15:36:06Z"},"message":"[SYNCOPE-938] Applying all Netbeans hints for upgrade to JDK 8","tree":{"sha":"0723120b4857787d7f0aa03c67fa7cc3c93e705b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0723120b4857787d7f0aa03c67fa7cc3c93e705b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5be24a033334a8a15b0c12dfaef1e5326d813ced","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5be24a033334a8a15b0c12dfaef1e5326d813ced","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5be24a033334a8a15b0c12dfaef1e5326d813ced","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5be24a033334a8a15b0c12dfaef1e5326d813ced/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a02779a2ccf4ee26953468713a1d2e3722883840","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a02779a2ccf4ee26953468713a1d2e3722883840","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a02779a2ccf4ee26953468713a1d2e3722883840"}],"stats":{"total":1992,"additions":861,"deletions":1131},"files":[{"sha":"18bf9a3041063dabd69d193dc1a7746d4ad2e884","filename":"client/console/src/main/java/org/apache/syncope/client/console/approvals/Approval.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApproval.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApproval.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApproval.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -171,7 +171,7 @@ public void setObject(final Long object) {\n \n                     case String:\n                     default:\n-                        field = new AjaxTextFieldPanel(\"value\", label, new PropertyModel<String>(prop, \"value\"), false);\n+                        field = new AjaxTextFieldPanel(\"value\", label, new PropertyModel<>(prop, \"value\"), false);\n                         break;\n                 }\n "},{"sha":"29ea4aa5dba89b014d9cceb382b486c6ab3c7acf","filename":"client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -88,17 +88,17 @@ public void onClose(final AjaxRequestTarget target) {\n     protected List<IColumn<WorkflowFormTO, String>> getColumns() {\n \n         List<IColumn<WorkflowFormTO, String>> columns = new ArrayList<>();\n-        columns.add(new PropertyColumn<WorkflowFormTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new ResourceModel(\"taskId\"), \"taskId\", \"taskId\"));\n-        columns.add(new PropertyColumn<WorkflowFormTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new ResourceModel(\"key\"), \"key\", \"key\"));\n-        columns.add(new PropertyColumn<WorkflowFormTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new ResourceModel(\"username\"), \"username\", \"username\"));\n-        columns.add(new DatePropertyColumn<WorkflowFormTO>(\n+        columns.add(new DatePropertyColumn<>(\n                 new ResourceModel(\"createTime\"), \"createTime\", \"createTime\"));\n-        columns.add(new DatePropertyColumn<WorkflowFormTO>(\n+        columns.add(new DatePropertyColumn<>(\n                 new ResourceModel(\"dueDate\"), \"dueDate\", \"dueDate\"));\n-        columns.add(new PropertyColumn<WorkflowFormTO, String>(new ResourceModel(\"owner\"), \"owner\", \"owner\"));\n+        columns.add(new PropertyColumn<>(new ResourceModel(\"owner\"), \"owner\", \"owner\"));\n \n         return columns;\n     }\n@@ -150,7 +150,7 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                     }\n \n                 }));\n-                \n+\n                 modal.header(new Model<>(getString(\"approval.edit\", new Model<>(model.getObject()))));\n                 modal.show(true);\n             }"},{"sha":"11091c3f6963e69ad52842018b5cde6201b02666","filename":"client/console/src/main/java/org/apache/syncope/client/console/notifications/MailTemplateDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -111,7 +111,7 @@ public WizardModalPanel<MailTemplateTO> build(\n     @Override\n     protected List<IColumn<MailTemplateTO, String>> getColumns() {\n         List<IColumn<MailTemplateTO, String>> columns = new ArrayList<>();\n-        columns.add(new PropertyColumn<MailTemplateTO, String>(new StringResourceModel(\"key\", this), \"key\", \"key\"));\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\"key\", this), \"key\", \"key\"));\n         return columns;\n     }\n "},{"sha":"cb33f80c62627d5ec6a102f945d4ce4e4aab2033","filename":"client/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationDirectoryPanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -85,16 +85,16 @@ public NotificationDirectoryPanel(final String id, final PageReference pageRef)\n     @Override\n     protected List<IColumn<NotificationTO, String>> getColumns() {\n         List<IColumn<NotificationTO, String>> columns = new ArrayList<>();\n-        columns.add(new KeyPropertyColumn<NotificationTO>(new StringResourceModel(\"key\", this), \"key\"));\n-        columns.add(new PropertyColumn<NotificationTO, String>(\n+        columns.add(new KeyPropertyColumn<>(new StringResourceModel(\"key\", this), \"key\"));\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"sender\", this), \"sender\", \"sender\"));\n-        columns.add(new PropertyColumn<NotificationTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"subject\", this), \"subject\", \"subject\"));\n-        columns.add(new PropertyColumn<NotificationTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"template\", this), \"template\", \"template\"));\n-        columns.add(new CollectionPropertyColumn<NotificationTO>(\n+        columns.add(new CollectionPropertyColumn<>(\n                 new StringResourceModel(\"events\", this), \"events\"));\n-        columns.add(new BooleanPropertyColumn<NotificationTO>(\n+        columns.add(new BooleanPropertyColumn<>(\n                 new StringResourceModel(\"active\", this), \"active\", \"active\"));\n         return columns;\n     }"},{"sha":"d6cfce0141758cffdee32d17c57c09dee886f244","filename":"client/console/src/main/java/org/apache/syncope/client/console/notifications/TemplateModal.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FTemplateModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FTemplateModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FTemplateModal.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -51,7 +51,7 @@ public TemplateModal(\n         this.templateTO = templateTO;\n \n         AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n-                \"key\", \"key\", new PropertyModel<String>(templateTO, \"key\"), false);\n+                \"key\", \"key\", new PropertyModel<>(templateTO, \"key\"), false);\n         key.setOutputMarkupPlaceholderTag(true);\n         add(key.setRenderBodyOnly(true));\n     }"},{"sha":"b17d61ea72af973024940afcc3ff2c0b05a5f9b7","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Login.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.console.init.ConsoleInitializer;\n import org.apache.syncope.client.console.panels.NotificationPanel;\n-import org.apache.syncope.client.console.panels.SSOLoginFormPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n@@ -88,11 +87,11 @@ public Login(final PageParameters parameters) {\n \n         form = new StatelessForm<>(\"login\");\n \n-        usernameField = new TextField<>(\"username\", new Model<String>());\n+        usernameField = new TextField<>(\"username\", new Model<>());\n         usernameField.setMarkupId(\"username\");\n         form.add(usernameField);\n \n-        passwordField = new PasswordTextField(\"password\", new Model<String>());\n+        passwordField = new PasswordTextField(\"password\", new Model<>());\n         passwordField.setMarkupId(\"password\");\n         form.add(passwordField);\n \n@@ -137,15 +136,13 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 (ClassPathScanImplementationLookup) SyncopeConsoleApplication.get().\n                         getServletContext().getAttribute(ConsoleInitializer.CLASSPATH_LOOKUP);\n         List<Panel> ssoLoginFormPanels = new ArrayList<>();\n-        for (Class<? extends SSOLoginFormPanel> ssoLoginFormPanel : classPathScanImplementationLookup.\n-                getSSOLoginFormPanels()) {\n-\n+        classPathScanImplementationLookup.getSSOLoginFormPanels().forEach(ssoLoginFormPanel -> {\n             try {\n                 ssoLoginFormPanels.add(ssoLoginFormPanel.getConstructor(String.class).newInstance(\"ssoLogin\"));\n             } catch (Exception e) {\n                 LOG.error(\"Could not initialize the provided SSO login form panel\", e);\n             }\n-        }\n+        });\n         ListView<Panel> ssoLogins = new ListView<Panel>(\"ssoLogins\", ssoLoginFormPanels) {\n \n             private static final long serialVersionUID = -9180479401817023838L;"},{"sha":"f613d5490ffabed6d2a14a961cd818b1d5242db2","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/MustChangePassword.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -67,14 +67,14 @@ public MustChangePassword(final PageParameters parameters) {\n         usernameField.setEnabled(false);\n         form.add(usernameField);\n \n-        passwordField = new AjaxPasswordFieldPanel(\"password\", \"password\", new Model<String>());\n+        passwordField = new AjaxPasswordFieldPanel(\"password\", \"password\", new Model<>());\n         passwordField.setRequired(true);\n         passwordField.setMarkupId(\"password\");\n         passwordField.setPlaceholder(\"password\");\n         ((PasswordTextField) passwordField.getField()).setResetPassword(true);\n         form.add(passwordField);\n \n-        confirmPasswordField = new AjaxPasswordFieldPanel(\"confirmPassword\", \"confirmPassword\", new Model<String>());\n+        confirmPasswordField = new AjaxPasswordFieldPanel(\"confirmPassword\", \"confirmPassword\", new Model<>());\n         confirmPasswordField.setRequired(true);\n         confirmPasswordField.setMarkupId(\"confirmPassword\");\n         confirmPasswordField.setPlaceholder(\"confirmPassword\");"},{"sha":"36fb95abea4be2b94011892496e317c811de03c3","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AbstractSchemaDetailsPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSchemaDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSchemaDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSchemaDetailsPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -35,7 +35,7 @@ public abstract class AbstractSchemaDetailsPanel extends Panel {\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractSchemaDetailsPanel.class);\n \n     protected static final String FORM = \"form\";\n-    \n+\n     protected final Form<AbstractSchemaTO> schemaForm;\n \n     protected final AbstractSchemaTO schemaTO;\n@@ -53,7 +53,7 @@ public AbstractSchemaDetailsPanel(\n         schemaForm.setOutputMarkupId(true);\n \n         final AjaxTextFieldPanel name =\n-                new AjaxTextFieldPanel(\"key\", getString(\"key\"), new PropertyModel<String>(schemaTO, \"key\"));\n+                new AjaxTextFieldPanel(\"key\", getString(\"key\"), new PropertyModel<>(schemaTO, \"key\"));\n         name.addRequiredLabel();\n         name.setEnabled(schemaTO == null || schemaTO.getKey() == null || schemaTO.getKey().isEmpty());\n "},{"sha":"082b860a8e3a18225043575326b3fe19a645bca2","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AccessTokenDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -83,12 +83,12 @@ protected String paginatorRowsKey() {\n     @Override\n     protected List<IColumn<AccessTokenTO, String>> getColumns() {\n         List<IColumn<AccessTokenTO, String>> columns = new ArrayList<>();\n-        columns.add(new KeyPropertyColumn<AccessTokenTO>(\n+        columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(Constants.KEY_FIELD_NAME, this),\n                 Constants.KEY_FIELD_NAME,\n                 Constants.KEY_FIELD_NAME));\n \n-        columns.add(new PropertyColumn<AccessTokenTO, String>(new ResourceModel(\"owner\"), \"owner\", \"owner\"));\n+        columns.add(new PropertyColumn<>(new ResourceModel(\"owner\"), \"owner\", \"owner\"));\n \n         columns.add(new AbstractColumn<AccessTokenTO, String>(new ResourceModel(\"issuedAt\", \"\")) {\n \n@@ -107,7 +107,7 @@ public void populateItem(\n             }\n         });\n \n-        columns.add(new DatePropertyColumn<AccessTokenTO>(new ResourceModel(\"expiryTime\"), \"expiryTime\", \"expiryTime\"));\n+        columns.add(new DatePropertyColumn<>(new ResourceModel(\"expiryTime\"), \"expiryTime\", \"expiryTime\"));\n \n         return columns;\n     }"},{"sha":"4574544aa97e5380998620c39b45883cbed334a8","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ActionDataTablePanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FActionDataTablePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FActionDataTablePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FActionDataTablePanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -80,7 +80,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         });\n         bulkActionForm.add(group);\n \n-        columns.add(0, new CheckGroupColumn<T, S>(group));\n+        columns.add(0, new CheckGroupColumn<>(group));\n         dataTable = new AjaxFallbackDataTable<>(\"dataTable\", columns, dataProvider, rowsPerPage, this);\n         group.add(dataTable);\n "},{"sha":"001de677b9279d041c003dada530e58cdb76fea6","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AjaxDataTablePanel.java","status":"modified","additions":4,"deletions":11,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -51,8 +51,6 @@\n import org.apache.wicket.markup.html.panel.Fragment;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.ResourceModel;\n-import org.apache.wicket.util.visit.IVisit;\n-import org.apache.wicket.util.visit.IVisitor;\n \n public final class AjaxDataTablePanel<T extends Serializable, S> extends DataTablePanel<T, S> {\n \n@@ -206,21 +204,16 @@ public void onClose(final AjaxRequestTarget target) {\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                group.visitChildren(\n-                        CheckGroupSelector.class, new IVisitor<CheckGroupSelector, List<CheckGroupSelector>>() {\n-\n-                    @Override\n-                    public void component(final CheckGroupSelector t, final IVisit<List<CheckGroupSelector>> ivisit) {\n-                        target.focusComponent(t);\n-                        ivisit.stop();\n-                    }\n+                group.visitChildren(CheckGroupSelector.class, (selector, ivisit) -> {\n+                    target.focusComponent(selector);\n+                    ivisit.stop();\n                 });\n             }\n         });\n         bulkActionForm.add(group);\n \n         if (builder.checkBoxEnabled) {\n-            builder.columns.add(0, new CheckGroupColumn<T, S>(group));\n+            builder.columns.add(0, new CheckGroupColumn<>(group));\n         }\n \n         dataTable = new AjaxFallbackDataTable<T, S>("},{"sha":"af1f72e4e7ff44667e1b0b749b86641f012c6f26","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeClassesPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -126,10 +126,10 @@ protected List<IColumn<AnyTypeClassTO, String>> getColumns() {\n                         || Collection.class.isAssignableFrom(field.getType())\n                         || Map.class.isAssignableFrom(field.getType())) {\n \n-                    columns.add(new PropertyColumn<AnyTypeClassTO, String>(\n+                    columns.add(new PropertyColumn<>(\n                             new ResourceModel(field.getName()), field.getName()));\n                 } else if (field.getType().equals(boolean.class) || field.getType().equals(Boolean.class)) {\n-                    columns.add(new BooleanPropertyColumn<AnyTypeClassTO>(\n+                    columns.add(new BooleanPropertyColumn<>(\n                             new ResourceModel(field.getName()), field.getName(), field.getName()));\n                 } else {\n                     columns.add(new PropertyColumn<AnyTypeClassTO, String>("},{"sha":"0e31a67c8b0e77f051c188c3959eb207f65236a2","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeDetailsPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -51,13 +51,13 @@ public AnyTypeDetailsPanel(final String id, final AnyTypeTO anyTypeTO) {\n         container.add(form);\n \n         final AjaxTextFieldPanel key =\n-                new AjaxTextFieldPanel(\"key\", getString(\"key\"), new PropertyModel<String>(anyTypeTO, \"key\"));\n+                new AjaxTextFieldPanel(\"key\", getString(\"key\"), new PropertyModel<>(anyTypeTO, \"key\"));\n         key.addRequiredLabel();\n         key.setEnabled(key.getModelObject() == null || key.getModelObject().isEmpty());\n         form.add(key);\n \n         final AjaxDropDownChoicePanel<AnyTypeKind> kind = new AjaxDropDownChoicePanel<>(\n-                \"kind\", getString(\"kind\"), new PropertyModel<AnyTypeKind>(anyTypeTO, \"kind\"));\n+                \"kind\", getString(\"kind\"), new PropertyModel<>(anyTypeTO, \"kind\"));\n         kind.setChoices(Arrays.asList(AnyTypeKind.values()));\n         kind.setOutputMarkupId(true);\n         if (anyTypeTO.getKind() == null) {"},{"sha":"736bb7d71a5a16b1b9260b7866824861f3d56d0a","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -125,10 +125,10 @@ protected List<IColumn<AnyTypeTO, String>> getColumns() {\n                         || Collection.class.isAssignableFrom(field.getType())\n                         || Map.class.isAssignableFrom(field.getType())) {\n \n-                    columns.add(new PropertyColumn<AnyTypeTO, String>(\n+                    columns.add(new PropertyColumn<>(\n                             new ResourceModel(field.getName()), field.getName()));\n                 } else if (field.getType().equals(boolean.class) || field.getType().equals(Boolean.class)) {\n-                    columns.add(new BooleanPropertyColumn<AnyTypeTO>(\n+                    columns.add(new BooleanPropertyColumn<>(\n                             new ResourceModel(field.getName()), field.getName(), field.getName()));\n                 } else {\n                     columns.add(new PropertyColumn<AnyTypeTO, String>("},{"sha":"2e836ba776ded1bc0ee8078807def74c1ad03fb3","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnInstanceHistoryConfDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -87,13 +87,13 @@ public ConnInstanceHistoryConfDirectoryPanel(\n     protected List<IColumn<ConnInstanceHistoryConfTO, String>> getColumns() {\n         final List<IColumn<ConnInstanceHistoryConfTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<ConnInstanceHistoryConfTO>(\n+        columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(\"key\", this), \"key\"));\n \n-        columns.add(new PropertyColumn<ConnInstanceHistoryConfTO, String>(new StringResourceModel(\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\n                 \"creator\", this), \"creator\", \"creator\"));\n \n-        columns.add(new DatePropertyColumn<ConnInstanceHistoryConfTO>(\n+        columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"creation\", this), \"creation\", \"creation\"));\n \n         return columns;"},{"sha":"52fbfe5cc4c9ac13b010515573bf6ab24669c5ba","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/DerSchemaDetails.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDerSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDerSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDerSchemaDetails.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -34,7 +34,7 @@ public DerSchemaDetails(final String id,\n             final AbstractSchemaTO schemaTO) {\n         super(id, pageReference, schemaTO);\n \n-        TextField<String> expression = new TextField<>(\"expression\", new PropertyModel<String>(schemaTO, \"expression\"));\n+        TextField<String> expression = new TextField<>(\"expression\", new PropertyModel<>(schemaTO, \"expression\"));\n         expression.setRequired(true);\n         schemaForm.add(expression);\n "},{"sha":"22c104ed34460b99478d747948f5c1fa5b49e6d6","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/DirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -215,7 +215,7 @@ protected void initResultTable() {\n         container.add(paginatorForm);\n \n         DropDownChoice<Integer> rowsChooser = new DropDownChoice<>(\n-                \"rowsChooser\", new PropertyModel<Integer>(this, \"rows\"), prefMan.getPaginatorChoices());\n+                \"rowsChooser\", new PropertyModel<>(this, \"rows\"), prefMan.getPaginatorChoices());\n         rowsChooser.add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n@@ -353,7 +353,7 @@ protected void customActionOnFinishCallback(final AjaxRequestTarget target) {\n     }\n \n     protected ActionsPanel<T> getActions(final IModel<T> model) {\n-        return model == null ? new ActionsPanel<>(\"actions\", new Model<T>()) : new ActionsPanel<>(\"actions\", model);\n+        return model == null ? new ActionsPanel<>(\"actions\", new Model<>()) : new ActionsPanel<>(\"actions\", model);\n     }\n \n     protected ActionLinksTogglePanel<T> getTogglePanel() {"},{"sha":"d1c15e6ccacb19cd7f5d48ff17117cf69492a452","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/DynRealmDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -108,7 +108,7 @@ protected String paginatorRowsKey() {\n     protected List<IColumn<DynRealmTO, String>> getColumns() {\n         final List<IColumn<DynRealmTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new PropertyColumn<DynRealmTO, String>(new ResourceModel(\"key\"), \"key\", \"key\"));\n+        columns.add(new PropertyColumn<>(new ResourceModel(\"key\"), \"key\", \"key\"));\n \n         return columns;\n     }"},{"sha":"f548bfe4ab36ade16631f5f4e2cd2c5c233dc359","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/FailureMessageModal.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FFailureMessageModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FFailureMessageModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FFailureMessageModal.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -33,7 +33,7 @@ public FailureMessageModal(final PageReference pageRef, final String failureMess\n         super(BaseModal.CONTENT_ID);\n         final Label executionFailureMessage;\n         if (!failureMessage.isEmpty()) {\n-            executionFailureMessage = new Label(\"failureMessage\", new Model<String>(failureMessage));\n+            executionFailureMessage = new Label(\"failureMessage\", new Model<>(failureMessage));\n         } else {\n             executionFailureMessage = new Label(\"failureMessage\");\n         }"},{"sha":"be021c735743300da4ea1de2cec9bcd65ecda429","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/NewWorkflowProcess.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNewWorkflowProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNewWorkflowProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNewWorkflowProcess.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -49,7 +49,7 @@ public NewWorkflowProcess(final String id, final WebMarkupContainer container, f\n         form = new Form<>(\"form\");\n         addInnerObject(form);\n \n-        final TextField<String> key = new TextField<>(\"key\", new Model<String>());\n+        final TextField<String> key = new TextField<>(\"key\", new Model<>());\n         key.setRequired(true);\n         form.add(key);\n "},{"sha":"795b8df6f3d1d22f99277176aad3732e2c221120","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/PlainSchemaDetails.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -69,7 +69,7 @@ public PlainSchemaDetails(\n         super(id, pageReference, schemaTO);\n \n         final AjaxDropDownChoicePanel<AttrSchemaType> type = new AjaxDropDownChoicePanel<>(\n-                \"type\", getString(\"type\"), new PropertyModel<AttrSchemaType>(schemaTO, \"type\"));\n+                \"type\", getString(\"type\"), new PropertyModel<>(schemaTO, \"type\"));\n \n         type.setChoices(Arrays.asList(AttrSchemaType.values()));\n         type.setEnabled(schemaTO == null || schemaTO.getKey() == null || schemaTO.getKey().isEmpty());\n@@ -79,7 +79,7 @@ public PlainSchemaDetails(\n \n         // long, double, date\n         final AjaxTextFieldPanel conversionPattern = new AjaxTextFieldPanel(\"conversionPattern\",\n-                getString(\"conversionPattern\"), new PropertyModel<String>(schemaTO, \"conversionPattern\"));\n+                getString(\"conversionPattern\"), new PropertyModel<>(schemaTO, \"conversionPattern\"));\n \n         schemaForm.add(conversionPattern);\n \n@@ -94,8 +94,8 @@ public PlainSchemaDetails(\n         typeParams.setOutputMarkupPlaceholderTag(true);\n \n         // enum\n-        final AjaxTextFieldPanel enumerationValuesPanel = new AjaxTextFieldPanel(\"panel\", \"enumerationValues\",\n-                new Model<String>(null));\n+        final AjaxTextFieldPanel enumerationValuesPanel = new AjaxTextFieldPanel(\"panel\",\n+                \"enumerationValues\", new Model<>(null));\n \n         enumerationValues = new MultiFieldPanel.Builder<String>(\n                 new PropertyModel<List<String>>(schemaTO, \"enumerationValues\") {\n@@ -183,11 +183,11 @@ protected String newModelObject() {\n \n         // encrypted\n         final AjaxTextFieldPanel secretKey = new AjaxTextFieldPanel(\"secretKey\",\n-                getString(\"secretKey\"), new PropertyModel<String>(schemaTO, \"secretKey\"));\n+                getString(\"secretKey\"), new PropertyModel<>(schemaTO, \"secretKey\"));\n \n         final AjaxDropDownChoicePanel<CipherAlgorithm> cipherAlgorithm = new AjaxDropDownChoicePanel<>(\n                 \"cipherAlgorithm\", getString(\"cipherAlgorithm\"),\n-                new PropertyModel<CipherAlgorithm>(schemaTO, \"cipherAlgorithm\"));\n+                new PropertyModel<>(schemaTO, \"cipherAlgorithm\"));\n \n         cipherAlgorithm.setChoices(Arrays.asList(CipherAlgorithm.values()));\n \n@@ -200,7 +200,7 @@ protected String newModelObject() {\n \n         // binary\n         final AjaxTextFieldPanel mimeType = new AjaxTextFieldPanel(\"mimeType\",\n-                getString(\"mimeType\"), new PropertyModel<String>(schemaTO, \"mimeType\"));\n+                getString(\"mimeType\"), new PropertyModel<>(schemaTO, \"mimeType\"));\n \n         final WebMarkupContainer binaryParams = new WebMarkupContainer(\"binaryParams\");\n         binaryParams.setOutputMarkupPlaceholderTag(true);\n@@ -242,7 +242,7 @@ protected List<String> load() {\n             }\n         };\n         final AjaxDropDownChoicePanel<String> validatorClass = new AjaxDropDownChoicePanel<>(\"validatorClass\",\n-                getString(\"validatorClass\"), new PropertyModel<String>(schemaTO, \"validatorClass\"));\n+                getString(\"validatorClass\"), new PropertyModel<>(schemaTO, \"validatorClass\"));\n         ((DropDownChoice) validatorClass.getField()).setNullValid(true);\n         validatorClass.setChoices(validatorsList.getObject());\n         schemaForm.add(validatorClass);\n@@ -279,13 +279,13 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         schemaForm.add(Constants.getJEXLPopover(this, TooltipConfig.Placement.right));\n \n         schemaForm.add(new AjaxCheckBoxPanel(\n-                \"multivalue\", getString(\"multivalue\"), new PropertyModel<Boolean>(schemaTO, \"multivalue\")));\n+                \"multivalue\", getString(\"multivalue\"), new PropertyModel<>(schemaTO, \"multivalue\")));\n \n         schemaForm.add(new AjaxCheckBoxPanel(\n-                \"readonly\", getString(\"readonly\"), new PropertyModel<Boolean>(schemaTO, \"readonly\")));\n+                \"readonly\", getString(\"readonly\"), new PropertyModel<>(schemaTO, \"readonly\")));\n \n         schemaForm.add(new AjaxCheckBoxPanel(\"uniqueConstraint\",\n-                getString(\"uniqueConstraint\"), new PropertyModel<Boolean>(schemaTO, \"uniqueConstraint\")));\n+                getString(\"uniqueConstraint\"), new PropertyModel<>(schemaTO, \"uniqueConstraint\")));\n \n     }\n "},{"sha":"068ce5bd5016a1abeb7a4b2166fedf131ab0d719","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RelationshipTypeDetailsPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypeDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypeDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypeDetailsPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -43,14 +43,14 @@ public RelationshipTypeDetailsPanel(\n         form.setModel(new CompoundPropertyModel<>(relationshipTypeTO));\n         container.add(form);\n \n-        final AjaxTextFieldPanel key = new AjaxTextFieldPanel(\"key\", getString(\"key\"), new PropertyModel<String>(\n-                relationshipTypeTO, \"key\"));\n+        final AjaxTextFieldPanel key = new AjaxTextFieldPanel(\"key\", getString(\"key\"),\n+                new PropertyModel<>(relationshipTypeTO, \"key\"));\n         key.addRequiredLabel();\n         key.setEnabled(key.getModelObject() == null || key.getModelObject().isEmpty());\n         form.add(key);\n \n         final AjaxTextFieldPanel description = new AjaxTextFieldPanel(\"description\",\n-                getString(\"description\"), new PropertyModel<String>(relationshipTypeTO, \"description\"));\n+                getString(\"description\"), new PropertyModel<>(relationshipTypeTO, \"description\"));\n         description.addRequiredLabel();\n         form.add(description);\n     }"},{"sha":"56d92ecb8b0096cb68140d33603fff5111c48e04","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RelationshipTypesPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -129,10 +129,10 @@ protected List<IColumn<RelationshipTypeTO, String>> getColumns() {\n                         || Collection.class.isAssignableFrom(field.getType())\n                         || Map.class.isAssignableFrom(field.getType())) {\n \n-                    columns.add(new PropertyColumn<RelationshipTypeTO, String>(\n+                    columns.add(new PropertyColumn<>(\n                             new ResourceModel(field.getName()), field.getName()));\n                 } else if (field.getType().equals(boolean.class) || field.getType().equals(Boolean.class)) {\n-                    columns.add(new BooleanPropertyColumn<RelationshipTypeTO>(\n+                    columns.add(new BooleanPropertyColumn<>(\n                             new ResourceModel(field.getName()), field.getName(), field.getName()));\n                 } else {\n                     columns.add(new PropertyColumn<RelationshipTypeTO, String>("},{"sha":"c6663130bc7fc519f519c4c222b8b13705d395cb","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -90,13 +90,13 @@ public ResourceHistoryConfDirectoryPanel(\n     protected List<IColumn<ResourceHistoryConfTO, String>> getColumns() {\n         final List<IColumn<ResourceHistoryConfTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<ResourceHistoryConfTO>(\n+        columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(\"key\", this), \"key\"));\n \n-        columns.add(new PropertyColumn<ResourceHistoryConfTO, String>(new StringResourceModel(\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\n                 \"creator\", this), \"creator\", \"creator\"));\n \n-        columns.add(new DatePropertyColumn<ResourceHistoryConfTO>(\n+        columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"creation\", this), \"creation\", \"creation\"));\n \n         return columns;"},{"sha":"5644e85406fb653ca6b2c54f5e08b6469c1126bb","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -109,13 +109,13 @@ protected String paginatorRowsKey() {\n     protected List<IColumn<RoleTO, String>> getColumns() {\n         final List<IColumn<RoleTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new PropertyColumn<RoleTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new ResourceModel(\"key\"), \"key\", \"key\"));\n-        columns.add(new PropertyColumn<RoleTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new ResourceModel(\"entitlements\", \"Entitlements\"), null, \"entitlements\"));\n-        columns.add(new PropertyColumn<RoleTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new ResourceModel(\"realms\"), null, \"realms\"));\n-        columns.add(new PropertyColumn<RoleTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new ResourceModel(\"dynRealms\"), null, \"dynRealms\"));\n \n         return columns;"},{"sha":"c49dc36a8f02f43c2a42b9590e8f5b50214d690d","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemaModalPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaModalPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -47,7 +47,7 @@ public SchemaModalPanel(\n         add(kindForm);\n \n         final AjaxDropDownChoicePanel<SchemaType> kind = new AjaxDropDownChoicePanel<>(\n-                \"kind\", getString(\"kind\"), new Model<SchemaType>());\n+                \"kind\", getString(\"kind\"), new Model<>());\n         kind.setChoices(Arrays.asList(SchemaType.values()));\n         kind.setOutputMarkupId(true);\n "},{"sha":"d75c4837f02a0f9da80f4ff30793c8c5d304c311","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SecurityQuestionDetailsPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionDetailsPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -44,7 +44,7 @@ public SecurityQuestionDetailsPanel(final String id, final SecurityQuestionTO se\n         container.add(form);\n \n         final AjaxTextFieldPanel content = new AjaxTextFieldPanel(\n-                \"content\", getString(\"content\"), new PropertyModel<String>(securityQuestionTO, \"content\"));\n+                \"content\", getString(\"content\"), new PropertyModel<>(securityQuestionTO, \"content\"));\n         content.addRequiredLabel();\n         form.add(content);\n     }"},{"sha":"3a12a826106128188d911a00f99b3b488f3c296e","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SecurityQuestionsPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -126,9 +126,9 @@ protected Collection<ActionLink.ActionType> getBulkActions() {\n     protected List<IColumn<SecurityQuestionTO, String>> getColumns() {\n         List<IColumn<SecurityQuestionTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<SecurityQuestionTO>(\n+        columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(\"key\", this), \"key\"));\n-        columns.add(new PropertyColumn<SecurityQuestionTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"content\", this), \"content\", \"content\"));\n \n         return columns;"},{"sha":"818ef7d10d2d39529a44232af5c9be4e7c350f87","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/TypeExtensionDirectoryPanel.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -24,6 +24,7 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -125,9 +126,9 @@ protected String paginatorRowsKey() {\n     protected List<IColumn<TypeExtensionTO, String>> getColumns() {\n         List<IColumn<TypeExtensionTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new PropertyColumn<TypeExtensionTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 Model.of(\"Any Type\"), \"anyType\", \"anyType\"));\n-        columns.add(new PropertyColumn<TypeExtensionTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"auxClasses\", this), \"auxClasses\", \"auxClasses\"));\n \n         return columns;\n@@ -154,9 +155,11 @@ public void onClick(final AjaxRequestTarget target, final TypeExtensionTO ignore\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final TypeExtensionTO ignore) {\n-                groupTO.getTypeExtensions().remove(\n-                        groupTO.getTypeExtension(typeExtension.getAnyType()));\n-                target.add(container);\n+                Optional<TypeExtensionTO> typeExt = groupTO.getTypeExtension(typeExtension.getAnyType());\n+                if (typeExt.isPresent()) {\n+                    groupTO.getTypeExtensions().remove(typeExt.get());\n+                    target.add(container);\n+                }\n             }\n         }, ActionLink.ActionType.DELETE, StringUtils.EMPTY, true);\n         return panel;"},{"sha":"1a0e26a863bf86c3c7d03f199c8eec95044de90c","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/WorkflowDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FWorkflowDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FWorkflowDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FWorkflowDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -154,9 +154,9 @@ protected String paginatorRowsKey() {\n     protected List<IColumn<WorkflowDefinitionTO, String>> getColumns() {\n         List<IColumn<WorkflowDefinitionTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<WorkflowDefinitionTO>(new ResourceModel(\"key\"), \"key\"));\n-        columns.add(new PropertyColumn<WorkflowDefinitionTO, String>(new ResourceModel(\"name\"), \"name\", \"name\"));\n-        columns.add(new BooleanPropertyColumn<WorkflowDefinitionTO>(new ResourceModel(\"main\"), null, \"main\"));\n+        columns.add(new KeyPropertyColumn<>(new ResourceModel(\"key\"), \"key\"));\n+        columns.add(new PropertyColumn<>(new ResourceModel(\"name\"), \"name\", \"name\"));\n+        columns.add(new BooleanPropertyColumn<>(new ResourceModel(\"main\"), null, \"main\"));\n \n         return columns;\n     }"},{"sha":"a2535d9b12d7a1c41d578d8bfc88df3ce8e35270","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/AccountPolicyDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -53,13 +53,13 @@ public AccountPolicyDirectoryPanel(final String id, final PageReference pageRef)\n \n     @Override\n     protected void addCustomColumnFields(final List<IColumn<AccountPolicyTO, String>> columns) {\n-        columns.add(new CollectionPropertyColumn<AccountPolicyTO>(new StringResourceModel(\n+        columns.add(new CollectionPropertyColumn<>(new StringResourceModel(\n                 \"passthroughResources\", this), \"passthroughResources\"));\n \n-        columns.add(new PropertyColumn<AccountPolicyTO, String>(new StringResourceModel(\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\n                 \"maxAuthenticationAttempts\", this), \"maxAuthenticationAttempts\", \"maxAuthenticationAttempts\"));\n \n-        columns.add(new BooleanPropertyColumn<AccountPolicyTO>(new StringResourceModel(\n+        columns.add(new BooleanPropertyColumn<>(new StringResourceModel(\n                 \"propagateSuspension\", this), \"propagateSuspension\", \"propagateSuspension\"));\n     }\n "},{"sha":"8e3663d38dc6e37073e595325d8c3c5468d5917a","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PasswordPolicyDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPasswordPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPasswordPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPasswordPolicyDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -53,10 +53,10 @@ public PasswordPolicyDirectoryPanel(final String id, final PageReference pageRef\n \n     @Override\n     protected void addCustomColumnFields(final List<IColumn<PasswordPolicyTO, String>> columns) {\n-        columns.add(new PropertyColumn<PasswordPolicyTO, String>(new StringResourceModel(\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\n                 \"historyLength\", this), \"historyLength\", \"historyLength\"));\n \n-        columns.add(new BooleanPropertyColumn<PasswordPolicyTO>(new StringResourceModel(\n+        columns.add(new BooleanPropertyColumn<>(new StringResourceModel(\n                 \"allowNullPassword\", this), \"allowNullPassword\", \"allowNullPassword\"));\n     }\n "},{"sha":"22fccf72ab1c8a4337b3130ccb41c9655820b9b5","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -109,21 +109,21 @@ public void onClose(final AjaxRequestTarget target) {\n         setFooterVisibility(true);\n         modal.addSubmitButton();\n         modal.size(Modal.Size.Large);\n-        \n+\n         disableCheckBoxes();\n     }\n \n     @Override\n     protected List<IColumn<T, String>> getColumns() {\n         final List<IColumn<T, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<T>(\n+        columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(\"key\", this), \"key\"));\n-        columns.add(new PropertyColumn<T, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"description\", this), \"description\", \"description\"));\n-        columns.add(new CollectionPropertyColumn<T>(\n+        columns.add(new CollectionPropertyColumn<>(\n                 new StringResourceModel(\"usedByResources\", this), \"usedByResources\"));\n-        columns.add(new CollectionPropertyColumn<T>(\n+        columns.add(new CollectionPropertyColumn<>(\n                 new StringResourceModel(\"usedByRealms\", this), \"usedByRealms\"));\n \n         addCustomColumnFields(columns);"},{"sha":"4d1c1c2d0f06394eb0576f1917fc020ad30acdb6","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportDirectoryPanel.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -84,27 +84,25 @@ protected ReportDirectoryPanel(final MultilevelPanel multiLevelPanelRef, final P\n     protected List<IColumn<ReportTO, String>> getColumns() {\n         final List<IColumn<ReportTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<ReportTO>(new StringResourceModel(\n-                \"key\", this), \"key\"));\n-        columns.add(new PropertyColumn<ReportTO, String>(new StringResourceModel(\n-                \"name\", this), \"name\", \"name\"));\n+        columns.add(new KeyPropertyColumn<>(new StringResourceModel(\"key\", this), \"key\"));\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\"name\", this), \"name\", \"name\"));\n \n-        columns.add(new DatePropertyColumn<ReportTO>(\n+        columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"lastExec\", this), \"lastExec\", \"lastExec\"));\n \n-        columns.add(new DatePropertyColumn<ReportTO>(\n+        columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"nextExec\", this), \"nextExec\", \"nextExec\"));\n \n-        columns.add(new DatePropertyColumn<ReportTO>(\n+        columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"start\", this), \"start\", \"start\"));\n \n-        columns.add(new DatePropertyColumn<ReportTO>(\n+        columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"end\", this), \"end\", \"end\"));\n \n-        columns.add(new PropertyColumn<ReportTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"latestExecStatus\", this), \"latestExecStatus\", \"latestExecStatus\"));\n \n-        columns.add(new BooleanPropertyColumn<ReportTO>(\n+        columns.add(new BooleanPropertyColumn<>(\n                 new StringResourceModel(\"active\", this), \"active\", \"active\"));\n \n         return columns;"},{"sha":"6aa57d3f8d8823cdffea36fcd684b83b1892291f","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportTemplateDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -112,7 +112,7 @@ public WizardModalPanel<ReportTemplateTO> build(\n     @Override\n     protected List<IColumn<ReportTemplateTO, String>> getColumns() {\n         List<IColumn<ReportTemplateTO, String>> columns = new ArrayList<>();\n-        columns.add(new PropertyColumn<ReportTemplateTO, String>(new StringResourceModel(\"key\", this), \"key\", \"key\"));\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\"key\", this), \"key\", \"key\"));\n         return columns;\n     }\n "},{"sha":"124a3c46fd85ebf9116d8c9459b73befde766c7f","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusDirectoryPanel.java","status":"modified","additions":17,"deletions":15,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -43,7 +43,6 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -137,7 +136,7 @@ protected void onComponentTag(final ComponentTag tag) {\n             }\n         });\n \n-        columns.add(new PropertyColumn<StatusBean, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"connObjectLink\", this), \"connObjectLink\", \"connObjectLink\"));\n \n         columns.add(new AbstractColumn<StatusBean, String>(new StringResourceModel(\"status\", this)) {\n@@ -233,23 +232,23 @@ public List<StatusBean> getStatusBeans() {\n             final AnyTO actual = restClient.read(anyTO.getKey());\n \n             final List<String> resources = new ArrayList<>();\n-            for (ResourceTO resourceTO : new ResourceRestClient().list()) {\n+            new ResourceRestClient().list().forEach(resourceTO -> {\n                 resources.add(resourceTO.getKey());\n-            }\n+            });\n \n             final List<ConnObjectWrapper> connObjects = statusUtils.getConnectorObjects(actual);\n \n             final List<StatusBean> statusBeans = new ArrayList<>(connObjects.size() + 1);\n \n-            for (ConnObjectWrapper entry : connObjects) {\n+            connObjects.forEach(entry -> {\n                 final StatusBean statusBean = statusUtils.getStatusBean(actual,\n                         entry.getResourceName(),\n                         entry.getConnObjectTO(),\n                         actual instanceof GroupTO);\n \n                 statusBeans.add(statusBean);\n                 resources.remove(entry.getResourceName());\n-            }\n+            });\n \n             if (statusOnly) {\n                 final StatusBean syncope = new StatusBean(actual, \"Syncope\");\n@@ -268,15 +267,18 @@ public List<StatusBean> getStatusBeans() {\n \n                 statusBeans.add(syncope);\n             } else {\n-                for (String resource : resources) {\n-                    final StatusBean statusBean = statusUtils.getStatusBean(actual,\n-                            resource,\n-                            null,\n-                            actual instanceof GroupTO);\n-\n-                    statusBean.setLinked(false);\n-                    statusBeans.add(statusBean);\n-                }\n+                resources.stream().\n+                        map(resource -> statusUtils.getStatusBean(actual,\n+                        resource,\n+                        null,\n+                        actual instanceof GroupTO)).\n+                        map(statusBean -> {\n+                            statusBean.setLinked(false);\n+                            return statusBean;\n+                        }).\n+                        forEachOrdered(statusBean -> {\n+                            statusBeans.add(statusBean);\n+                        });\n             }\n \n             return statusBeans;"},{"sha":"43d9282d922091cc423cb00d4a6c3181fc9218d4","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/ChangePasswordModal.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -63,7 +63,7 @@ public ChangePasswordModal(\n         passwordPanel.setOutputMarkupId(true);\n         add(passwordPanel);\n \n-        statusModel = new ListModel<>(new ArrayList<StatusBean>());\n+        statusModel = new ListModel<>(new ArrayList<>());\n         StatusPanel statusPanel = new StatusPanel(\"status\", wrapper.getInnerObject(), statusModel, pageReference);\n         statusPanel.setCheckAvailability(ListViewPanel.CheckAvailability.AVAILABLE);\n         add(statusPanel.setRenderBodyOnly(true));\n@@ -77,7 +77,7 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n             if (StringUtils.isBlank(inner.getPassword()) || statusModel.getObject().isEmpty()) {\n                 SyncopeConsoleSession.get().error(getString(Constants.OPERATION_ERROR));\n             } else {\n-                final List<String> resources = new ArrayList<String>();\n+                final List<String> resources = new ArrayList<>();\n                 boolean isOnSyncope = false;\n                 for (StatusBean sb : statusModel.getObject()) {\n                     if (sb.getResource().equals(Constants.SYNCOPE)) {"},{"sha":"3d50d634bd536bd4eef75e55ef9256587bb23eec","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -89,10 +89,10 @@ protected void resultTableCustomChanges(final AjaxDataTablePanel.Builder<StatusB\n     protected List<IColumn<StatusBean, String>> getColumns() {\n         final List<IColumn<StatusBean, String>> columns = new ArrayList<>();\n \n-        columns.add(new PropertyColumn<StatusBean, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"key\", this), \"key\", \"key\"));\n \n-        columns.add(new PropertyColumn<StatusBean, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"connObjectLink\", this), \"connObjectLink\", \"connObjectLink\"));\n \n         columns.add(new AbstractColumn<StatusBean, String>(new StringResourceModel(\"status\", this)) {"},{"sha":"a44b6de27e6c2fb9e821651c4b659dac4df643ec","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCrontabPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCrontabPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCrontabPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -62,8 +62,8 @@ public CrontabPanel(final String id, final PropertyModel<String> cronExpressionM\n             new SelectOption(getString(\"selOpt6\"), \"0 0 0 ? * 2\")\n         };\n \n-        final AjaxDropDownChoicePanel<SelectOption> cronTemplateChooser = new AjaxDropDownChoicePanel<SelectOption>(\n-                \"cronTemplateChooser\", \"cronTemplateChooser\", new Model<SelectOption>());\n+        final AjaxDropDownChoicePanel<SelectOption> cronTemplateChooser = new AjaxDropDownChoicePanel<>(\n+                \"cronTemplateChooser\", \"cronTemplateChooser\", new Model<>());\n \n         cronTemplateChooser.setNullValid(false);\n         cronTemplateChooser.setPlaceholder(\"chooseForTemplate\");\n@@ -97,7 +97,7 @@ public void detach() {\n             }\n         });\n         cronTemplateChooser.setChoices(Arrays.asList(cronTemplates));\n-        cronTemplateChooser.setChoiceRenderer(new SelectChoiceRenderer<SelectOption>());\n+        cronTemplateChooser.setChoiceRenderer(new SelectChoiceRenderer<>());\n         add(cronTemplateChooser);\n \n         seconds = new AjaxTextFieldPanel(\"seconds\", \"seconds\", new Model<>(getCronField(cronExpression, 0)));"},{"sha":"3e265141580be70c8f5ba48784cbf1244f7bb2d2","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -97,13 +97,13 @@ protected void resultTableCustomChanges(final AjaxDataTablePanel.Builder<ExecTO,\n     protected List<IColumn<ExecTO, String>> getColumns() {\n         final List<IColumn<ExecTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<ExecTO>(new StringResourceModel(\"key\", this), \"key\", \"key\"));\n+        columns.add(new KeyPropertyColumn<>(new StringResourceModel(\"key\", this), \"key\", \"key\"));\n \n-        columns.add(new DatePropertyColumn<ExecTO>(new StringResourceModel(\"start\", this), \"start\", \"start\"));\n+        columns.add(new DatePropertyColumn<>(new StringResourceModel(\"start\", this), \"start\", \"start\"));\n \n-        columns.add(new DatePropertyColumn<ExecTO>(new StringResourceModel(\"end\", this), \"end\", \"end\"));\n+        columns.add(new DatePropertyColumn<>(new StringResourceModel(\"end\", this), \"end\", \"end\"));\n \n-        columns.add(new PropertyColumn<ExecTO, String>(new StringResourceModel(\"status\", this), \"status\", \"status\"));\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\"status\", this), \"status\", \"status\"));\n         return columns;\n     }\n "},{"sha":"fd73ab0ca4d65e891fe1ef7dfa7a7354076129cb","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -80,25 +80,25 @@ protected NotificationTaskDirectoryPanel(\n     protected List<IColumn<NotificationTaskTO, String>> getColumns() {\n         final List<IColumn<NotificationTaskTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<NotificationTaskTO>(\n+        columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(\"key\", this), \"key\"));\n \n-        columns.add(new PropertyColumn<NotificationTaskTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"sender\", this), \"sender\", \"sender\"));\n \n-        columns.add(new PropertyColumn<NotificationTaskTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"subject\", this), \"subject\", \"subject\"));\n \n-        columns.add(new CollectionPropertyColumn<NotificationTaskTO>(\n+        columns.add(new CollectionPropertyColumn<>(\n                 new StringResourceModel(\"recipients\", this), \"recipients\"));\n \n-        columns.add(new DatePropertyColumn<NotificationTaskTO>(\n+        columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"start\", this), \"start\", \"start\"));\n \n-        columns.add(new DatePropertyColumn<NotificationTaskTO>(\n+        columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"end\", this), \"end\", \"end\"));\n \n-        columns.add(new PropertyColumn<NotificationTaskTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"latestExecStatus\", this), \"latestExecStatus\", \"latestExecStatus\"));\n         return columns;\n     }"},{"sha":"5d37b793c3c7353f0d2a5f46dd84d9a2a9b09f0d","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/PropagationTaskDirectoryPanel.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -70,14 +70,14 @@ protected PropagationTaskDirectoryPanel(\n     protected List<IColumn<PropagationTaskTO, String>> getColumns() {\n         final List<IColumn<PropagationTaskTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<PropagationTaskTO>(\n+        columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(\"key\", this), \"key\"));\n \n-        columns.add(new PropertyColumn<PropagationTaskTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"operation\", this), \"operation\", \"operation\"));\n \n         if (resource == null) {\n-            columns.add(new PropertyColumn<PropagationTaskTO, String>(\n+            columns.add(new PropertyColumn<>(\n                     new StringResourceModel(\"resource\", this), \"resource\", \"resource\"));\n         } else {\n             columns.add(new PropertyColumn<PropagationTaskTO, String>(\n@@ -96,19 +96,19 @@ public IModel<?> getDataModel(final IModel<PropagationTaskTO> rowModel) {\n             });\n         }\n \n-        columns.add(new PropertyColumn<PropagationTaskTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"entityKey\", this), \"entityKey\", \"entityKey\"));\n \n-        columns.add(new PropertyColumn<PropagationTaskTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"connObjectKey\", this), \"connObjectKey\", \"connObjectKey\"));\n \n-        columns.add(new DatePropertyColumn<PropagationTaskTO>(\n+        columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"start\", this), \"start\", \"start\"));\n \n-        columns.add(new DatePropertyColumn<PropagationTaskTO>(\n+        columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"end\", this), \"end\", \"end\"));\n \n-        columns.add(new PropertyColumn<PropagationTaskTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"latestExecStatus\", this), \"latestExecStatus\", \"latestExecStatus\"));\n         return columns;\n     }"},{"sha":"2ce98871b65189e934febe85f8694241140c8fe6","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/ProvisioningTaskDirectoryPanel.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -72,33 +72,33 @@ protected void initResultTable() {\n     protected List<IColumn<T, String>> getFieldColumns() {\n         List<IColumn<T, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<T>(\n+        columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(\"key\", this), \"key\"));\n \n-        columns.add(new PropertyColumn<T, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"name\", this), \"name\", \"name\"));\n \n-        columns.add(new PropertyColumn<T, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"description\", this), \"description\", \"description\"));\n \n         if (reference == PullTaskTO.class) {\n-            columns.add(new PropertyColumn<T, String>(\n+            columns.add(new PropertyColumn<>(\n                     new StringResourceModel(\"destinationRealm\", this), \"destinationRealm\", \"destinationRealm\"));\n         } else if (reference == PushTaskTO.class) {\n-            columns.add(new PropertyColumn<T, String>(\n+            columns.add(new PropertyColumn<>(\n                     new StringResourceModel(\"sourceRealm\", this), \"sourceRealm\", \"sourceRealm\"));\n         }\n \n-        columns.add(new DatePropertyColumn<T>(\n+        columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"lastExec\", this), \"lastExec\", \"lastExec\"));\n \n-        columns.add(new DatePropertyColumn<T>(\n+        columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"nextExec\", this), \"nextExec\", \"nextExec\"));\n \n-        columns.add(new PropertyColumn<T, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"latestExecStatus\", this), \"latestExecStatus\", \"latestExecStatus\"));\n \n-        columns.add(new BooleanPropertyColumn<T>(\n+        columns.add(new BooleanPropertyColumn<>(\n                 new StringResourceModel(\"active\", this), \"active\", \"active\"));\n \n         return columns;"},{"sha":"5feba57ddf737fe7e9caed8636808da0d3a667f9","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/PushTaskFilters.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskFilters.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskFilters.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskFilters.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -23,7 +23,6 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.panels.search.AnyObjectSearchPanel;\n import org.apache.syncope.client.console.panels.search.MapOfListModel;\n-import org.apache.syncope.client.console.panels.search.SearchClause;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n@@ -70,7 +69,7 @@ protected void populateItem(final ListItem<AnyTypeTO> item) {\n                     @Override\n                     public Panel getPanel(final String panelId) {\n                         return new AnyObjectSearchPanel.Builder(\n-                                key, new MapOfListModel<SearchClause>(pushTaskWrapper, \"filterClauses\", key)).\n+                                key, new MapOfListModel<>(pushTaskWrapper, \"filterClauses\", key)).\n                                 required(false).build(panelId);\n                     }\n                 }), Model.of(StringUtils.isBlank(pushTaskWrapper.getFilters().get(key)) ? -1 : 0))"},{"sha":"ca540b6f689e4b3063a37db4d8257c9daaf2b653","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -129,10 +129,10 @@ protected Serializable onApplyInternal(\n     protected List<IColumn<T, String>> getFieldColumns() {\n         final List<IColumn<T, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<T>(\n+        columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(\"key\", this), \"key\"));\n \n-        columns.add(new PropertyColumn<T, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"name\", this), \"name\", \"name\"));\n \n         columns.add(new PropertyColumn<T, String>(new StringResourceModel(\n@@ -158,16 +158,16 @@ public void populateItem(\n \n         });\n \n-        columns.add(new DatePropertyColumn<T>(\n+        columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"lastExec\", this), \"lastExec\", \"lastExec\"));\n \n-        columns.add(new DatePropertyColumn<T>(\n+        columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"nextExec\", this), \"nextExec\", \"nextExec\"));\n \n-        columns.add(new PropertyColumn<T, String>(\n+        columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"latestExecStatus\", this), \"latestExecStatus\", \"latestExecStatus\"));\n \n-        columns.add(new BooleanPropertyColumn<T>(\n+        columns.add(new BooleanPropertyColumn<>(\n                 new StringResourceModel(\"active\", this), \"active\", \"active\"));\n \n         return columns;"},{"sha":"e707611e30208fdc6be7496509f9e6aba2b5025e","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":31,"deletions":35,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -105,7 +105,7 @@ protected List<ResourceTO> load() {\n         protected Map<String, List<ConnInstanceTO>> load() {\n             final Map<String, List<ConnInstanceTO>> res = new HashMap<>();\n \n-            for (ConnInstanceTO conn : connectorRestClient.getAllConnectors()) {\n+            connectorRestClient.getAllConnectors().forEach(conn -> {\n                 final List<ConnInstanceTO> conns;\n                 if (res.containsKey(conn.getLocation())) {\n                     conns = res.get(conn.getLocation());\n@@ -114,7 +114,7 @@ protected Map<String, List<ConnInstanceTO>> load() {\n                     res.put(conn.getLocation(), conns);\n                 }\n                 conns.add(conn);\n-            }\n+            });\n \n             return res;\n         }\n@@ -130,13 +130,13 @@ protected Pair<List<URI>, List<URI>> load() {\n             final List<URI> connectorServers = new ArrayList<>();\n             final List<URI> filePaths = new ArrayList<>();\n \n-            for (String location : SyncopeConsoleSession.get().getPlatformInfo().getConnIdLocations()) {\n+            SyncopeConsoleSession.get().getPlatformInfo().getConnIdLocations().forEach(location -> {\n                 if (location.startsWith(CONNECTOR_SERVER_LOCATION_PREFIX)) {\n                     connectorServers.add(URI.create(location));\n                 } else {\n                     filePaths.add(URI.create(location));\n                 }\n-            }\n+            });\n \n             return Pair.of(connectorServers, filePaths);\n         }\n@@ -248,7 +248,7 @@ protected void populateItem(final ListItem<URI> item) {\n                 item.add(topologyNodePanel(\"cs\", topologynode));\n \n                 syncopeConnections.put(url, topologynode);\n-                connections.put(url, new HashMap<Serializable, TopologyNode>());\n+                connections.put(url, new HashMap<>());\n             }\n         };\n \n@@ -287,7 +287,7 @@ protected void populateItem(final ListItem<URI> item) {\n                 item.add(topologyNodePanel(\"fp\", topologynode));\n \n                 syncopeConnections.put(url, topologynode);\n-                connections.put(url, new HashMap<Serializable, TopologyNode>());\n+                connections.put(url, new HashMap<>());\n             }\n         };\n \n@@ -371,32 +371,28 @@ protected void populateItem(final ListItem<ConnInstanceTO> item) {\n         // Add Resources\n         // -----------------------------------------\n         final Collection<String> administrableConns = new HashSet<>();\n-        for (List<ConnInstanceTO> connInstances : connModel.getObject().values()) {\n+        connModel.getObject().values().forEach(connInstances -> {\n             administrableConns.addAll(connInstances.stream().map(EntityTO::getKey).collect(Collectors.toList()));\n-        }\n+        });\n \n         final List<String> connToBeProcessed = new ArrayList<>();\n-        for (final ResourceTO resourceTO : resModel.getObject()) {\n-            if (administrableConns.contains(resourceTO.getConnector())) {\n-                final TopologyNode topologynode = new TopologyNode(\n-                        resourceTO.getKey(), resourceTO.getKey(), TopologyNode.Kind.RESOURCE);\n-\n-                final Map<Serializable, TopologyNode> remoteConnections;\n-\n-                if (connections.containsKey(resourceTO.getConnector())) {\n-                    remoteConnections = connections.get(resourceTO.getConnector());\n-                } else {\n-                    remoteConnections = new HashMap<>();\n-                    connections.put(resourceTO.getConnector(), remoteConnections);\n-                }\n-\n-                remoteConnections.put(topologynode.getKey(), topologynode);\n-\n-                if (!connToBeProcessed.contains(resourceTO.getConnector())) {\n-                    connToBeProcessed.add(resourceTO.getConnector());\n-                }\n-            }\n-        }\n+        resModel.getObject().stream().\n+                filter((resourceTO) -> (administrableConns.contains(resourceTO.getConnector()))).\n+                forEachOrdered(resourceTO -> {\n+                    final TopologyNode topologynode = new TopologyNode(\n+                            resourceTO.getKey(), resourceTO.getKey(), TopologyNode.Kind.RESOURCE);\n+                    final Map<Serializable, TopologyNode> remoteConnections;\n+                    if (connections.containsKey(resourceTO.getConnector())) {\n+                        remoteConnections = connections.get(resourceTO.getConnector());\n+                    } else {\n+                        remoteConnections = new HashMap<>();\n+                        connections.put(resourceTO.getConnector(), remoteConnections);\n+                    }\n+                    remoteConnections.put(topologynode.getKey(), topologynode);\n+                    if (!connToBeProcessed.contains(resourceTO.getConnector())) {\n+                        connToBeProcessed.add(resourceTO.getConnector());\n+                    }\n+                });\n \n         final ListView<String> resources = new ListView<String>(\"resources\", connToBeProcessed) {\n \n@@ -466,9 +462,9 @@ public void renderHead(final Component component, final IHeaderResponse response\n                 final StringBuilder jsPlumbConf = new StringBuilder();\n                 jsPlumbConf.append(String.format(Locale.US, \"activate(%.2f);\", 0.68f));\n \n-                for (String str : createConnections(connections)) {\n+                createConnections(connections).forEach(str -> {\n                     jsPlumbConf.append(str);\n-                }\n+                });\n \n                 response.render(OnDomReadyHeaderItem.forScript(jsPlumbConf.toString()));\n             }\n@@ -521,14 +517,14 @@ protected void populateItem(final ListItem<TopologyNode> item) {\n     private List<String> createConnections(final Map<Serializable, Map<Serializable, TopologyNode>> targets) {\n         List<String> list = new ArrayList<>();\n \n-        for (Map.Entry<Serializable, Map<Serializable, TopologyNode>> source : targets.entrySet()) {\n-            for (Map.Entry<Serializable, TopologyNode> target : source.getValue().entrySet()) {\n+        targets.entrySet().forEach(source -> {\n+            source.getValue().entrySet().forEach(target -> {\n                 list.add(String.format(\"connect('%s','%s','%s');\",\n                         source.getKey(),\n                         target.getKey(),\n                         target.getValue().getKind()));\n-            }\n-        }\n+            });\n+        });\n         return list;\n     }\n "},{"sha":"9cfa76904c3773b51774b78de251317a1d736822","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/AjaxFallbackDataTable.java","status":"modified","additions":8,"deletions":21,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAjaxFallbackDataTable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAjaxFallbackDataTable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAjaxFallbackDataTable.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -43,8 +43,6 @@\n import org.apache.wicket.markup.repeater.OddEvenItem;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n-import org.apache.wicket.util.visit.IVisit;\n-import org.apache.wicket.util.visit.IVisitor;\n \n public class AjaxFallbackDataTable<T extends Serializable, S> extends DataTable<T, S> {\n \n@@ -142,29 +140,18 @@ protected void onEvent(final AjaxRequestTarget target) {\n                             final AjaxDataTablePanel<?, ?> parent = findParent(AjaxDataTablePanel.class);\n                             final Model<Boolean> isCheck = Model.<Boolean>of(Boolean.FALSE);\n \n-                            parent.visitChildren(CheckGroupSelector.class,\n-                                    new IVisitor<CheckGroupSelector, List<CheckGroupSelector>>() {\n-\n-                                @Override\n-                                public void component(\n-                                        final CheckGroupSelector t,\n-                                        final IVisit<List<CheckGroupSelector>> ivisit) {\n-                                    if (t.getMarkupId().equalsIgnoreCase(lastFocussedElementId)) {\n-                                        isCheck.setObject(Boolean.TRUE);\n-                                        ivisit.stop();\n-                                    }\n+                            parent.visitChildren(CheckGroupSelector.class, (selector, ivisit) -> {\n+                                if (selector.getMarkupId().equalsIgnoreCase(lastFocussedElementId)) {\n+                                    isCheck.setObject(Boolean.TRUE);\n+                                    ivisit.stop();\n                                 }\n                             });\n \n                             if (!isCheck.getObject()) {\n-                                parent.visitChildren(Check.class, new IVisitor<Check<?>, List<Check<?>>>() {\n-\n-                                    @Override\n-                                    public void component(final Check<?> t, final IVisit<List<Check<?>>> ivisit) {\n-                                        if (t.getMarkupId().equalsIgnoreCase(lastFocussedElementId)) {\n-                                            isCheck.setObject(Boolean.TRUE);\n-                                            ivisit.stop();\n-                                        }\n+                                parent.visitChildren(Check.class, (check, ivisit) -> {\n+                                    if (check.getMarkupId().equalsIgnoreCase(lastFocussedElementId)) {\n+                                        isCheck.setObject(Boolean.TRUE);\n+                                        ivisit.stop();\n                                     }\n                                 });\n                             }"},{"sha":"8020b70560e5256ade71cdd69044f34f4e703bf0","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxDateFieldPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDateFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDateFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDateFieldPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -37,7 +37,7 @@ public AjaxDateFieldPanel(final String id, final String name, final IModel<Date>\n \n     @Override\n     public FieldPanel<Date> clone() {\n-        final FieldPanel<Date> panel = new AjaxDateFieldPanel(getId(), name, new Model<Date>(), fmt.getPattern());\n+        FieldPanel<Date> panel = new AjaxDateFieldPanel(getId(), name, new Model<>(), fmt.getPattern());\n         panel.setRequired(isRequired());\n         panel.setReadOnly(isReadOnly());\n         panel.setTitle(title);"},{"sha":"723dd009b3ec6d8d8985aa4243e83d7198ce7d4b","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxDateTimeFieldPanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDateTimeFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDateTimeFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDateTimeFieldPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -38,9 +38,7 @@ public AjaxDateTimeFieldPanel(\n \n     @Override\n     public FieldPanel<Date> clone() {\n-        final FieldPanel<Date> panel =\n-                new AjaxDateTimeFieldPanel(getId(), name, new Model<Date>(null), fmt.getPattern());\n-\n+        FieldPanel<Date> panel = new AjaxDateTimeFieldPanel(getId(), name, new Model<>(null), fmt.getPattern());\n         panel.setRequired(isRequired());\n         panel.setReadOnly(isReadOnly());\n         panel.setTitle(title);"},{"sha":"659140f6c8d1f8085508bd0a4f1eabe1f9a717c5","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -165,7 +165,7 @@ public void onClick(final AjaxRequestTarget target) {\n         config.showRemove(false);\n         config.showPreview(false);\n \n-        fileUpload = new BootstrapFileInputField(\"fileUpload\", new ListModel<>(new ArrayList<FileUpload>()), config);\n+        fileUpload = new BootstrapFileInputField(\"fileUpload\", new ListModel<>(new ArrayList<>()), config);\n         fileUpload.setOutputMarkupId(true);\n \n         fileUpload.add(new AjaxFormSubmitBehavior(Constants.ON_CHANGE) {"},{"sha":"9df9c011e00351f2a83d06e9d3796d92434427ab","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/FieldPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -69,7 +69,7 @@ public FieldPanel<T> setTitle(final String title, final boolean html) {\n                 Model.<String>of(),\n                 title == null ? Model.<String>of() : Model.of(title),\n                 new PopoverConfig().withHtml(html).withHoverTrigger().withPlacement(\n-                index.getObject() != null && index.getObject() == 0\n+                        index.getObject() != null && index.getObject() == 0\n                         ? TooltipConfig.Placement.bottom\n                         : this instanceof AjaxCheckBoxPanel\n                                 ? TooltipConfig.Placement.right\n@@ -121,7 +121,7 @@ public T getModelObject() {\n     }\n \n     public FieldPanel<T> setNewModel(final IModel<T> model) {\n-        field.setModel(model == null ? new Model<T>() : model);\n+        field.setModel(model == null ? new Model<>() : model);\n         return this;\n     }\n "},{"sha":"931d67974817d969979809601fc537f284dc814f","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/IndicatingOnConfirmAjaxLink.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FIndicatingOnConfirmAjaxLink.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FIndicatingOnConfirmAjaxLink.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FIndicatingOnConfirmAjaxLink.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -69,7 +69,7 @@ public void renderHead(final IHeaderResponse response) {\n                             + \"  })\"\n                             + \"} else {\"\n                             + \"  proceed = false;\"\n-                            + \"};\", new ArrayList<CharSequence>()\n+                            + \"};\", new ArrayList<>()\n                     )).asDomReadyScript());\n         }\n     }"},{"sha":"bc4ef018cd8d78c25181a2d8bc603f0f30fe0d4c","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/list/ConnConfPropertyListView.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -82,7 +82,7 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n                 || Constants.GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())\n                 || Constants.GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {\n \n-            field = new AjaxPasswordFieldPanel(\"panel\", label, new Model<String>(), false);\n+            field = new AjaxPasswordFieldPanel(\"panel\", label, new Model<>(), false);\n             ((PasswordTextField) field.getField()).setResetPassword(false);\n \n             required = property.getSchema().isRequired();\n@@ -101,12 +101,12 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n             if (ClassUtils.isAssignable(Number.class, propertySchemaClass)) {\n                 @SuppressWarnings(\"unchecked\")\n                 Class<Number> numberClass = (Class<Number>) propertySchemaClass;\n-                field = new AjaxSpinnerFieldPanel.Builder<>().build(\"panel\", label, numberClass, new Model<Number>());\n+                field = new AjaxSpinnerFieldPanel.Builder<>().build(\"panel\", label, numberClass, new Model<>());\n                 required = property.getSchema().isRequired();\n             } else if (ClassUtils.isAssignable(Boolean.class, propertySchemaClass)) {\n-                field = new AjaxCheckBoxPanel(\"panel\", label, new Model<Boolean>());\n+                field = new AjaxCheckBoxPanel(\"panel\", label, new Model<>());\n             } else {\n-                field = new AjaxTextFieldPanel(\"panel\", label, new Model<String>());\n+                field = new AjaxTextFieldPanel(\"panel\", label, new Model<>());\n                 required = property.getSchema().isRequired();\n             }\n \n@@ -121,8 +121,7 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n         final AbstractFieldPanel<? extends Serializable> fieldPanel;\n         if (isArray) {\n             final MultiFieldPanel multiFieldPanel = new MultiFieldPanel.Builder(\n-                    new PropertyModel<List<String>>(property, \"values\")).setEventTemplate(true).build(\n-                    \"panel\", label, field);\n+                    new PropertyModel<>(property, \"values\")).setEventTemplate(true).build(\"panel\", label, field);\n             item.add(multiFieldPanel);\n             fieldPanel = multiFieldPanel;\n         } else {"},{"sha":"99d0cd2213760d70fdac78cb07e2c448f3589bc5","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -334,11 +334,11 @@ protected Collection<ActionLink.ActionType> getBulkActions() {\n         protected List<IColumn<JobTO, String>> getColumns() {\n             List<IColumn<JobTO, String>> columns = new ArrayList<>();\n \n-            columns.add(new PropertyColumn<JobTO, String>(new ResourceModel(\"refDesc\"), \"refDesc\", \"refDesc\"));\n+            columns.add(new PropertyColumn<>(new ResourceModel(\"refDesc\"), \"refDesc\", \"refDesc\"));\n \n-            columns.add(new BooleanPropertyColumn<JobTO>(new ResourceModel(\"scheduled\"), \"scheduled\", \"scheduled\"));\n+            columns.add(new BooleanPropertyColumn<>(new ResourceModel(\"scheduled\"), \"scheduled\", \"scheduled\"));\n \n-            columns.add(new DatePropertyColumn<JobTO>(new ResourceModel(\"start\"), \"start\", \"start\"));\n+            columns.add(new DatePropertyColumn<>(new ResourceModel(\"start\"), \"start\", \"start\"));\n \n             columns.add(new AbstractColumn<JobTO, String>(new Model<>(\"\"), \"running\") {\n \n@@ -351,8 +351,8 @@ public void populateItem(\n                         final IModel<JobTO> rowModel) {\n \n                     JobTO jobTO = rowModel.getObject();\n-                    JobActionPanel panel\n-                            = new JobActionPanel(componentId, jobTO, JobWidget.this, pageRef);\n+                    JobActionPanel panel =\n+                            new JobActionPanel(componentId, jobTO, JobWidget.this, pageRef);\n                     MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n                             String.format(\"%s,%s%s,%s\",\n                                     StandardEntitlement.TASK_EXECUTE,\n@@ -407,8 +407,8 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                             SchedTaskTO schedTaskTO = new TaskRestClient().\n                                     readSchedTask(SchedTaskTO.class, jobTO.getRefKey());\n \n-                            SchedTaskWizardBuilder<SchedTaskTO> swb\n-                                    = new SchedTaskWizardBuilder<>(schedTaskTO, pageRef);\n+                            SchedTaskWizardBuilder<SchedTaskTO> swb =\n+                                    new SchedTaskWizardBuilder<>(schedTaskTO, pageRef);\n                             swb.setEventSink(AvailableJobsPanel.this);\n \n                             target.add(jobModal.setContent(swb.build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT)));\n@@ -567,13 +567,13 @@ protected Collection<ActionLink.ActionType> getBulkActions() {\n         protected List<IColumn<ExecTO, String>> getColumns() {\n             List<IColumn<ExecTO, String>> columns = new ArrayList<>();\n \n-            columns.add(new PropertyColumn<ExecTO, String>(new ResourceModel(\"refDesc\"), \"refDesc\", \"refDesc\"));\n+            columns.add(new PropertyColumn<>(new ResourceModel(\"refDesc\"), \"refDesc\", \"refDesc\"));\n \n-            columns.add(new DatePropertyColumn<ExecTO>(new ResourceModel(\"start\"), \"start\", \"start\"));\n+            columns.add(new DatePropertyColumn<>(new ResourceModel(\"start\"), \"start\", \"start\"));\n \n-            columns.add(new DatePropertyColumn<ExecTO>(new ResourceModel(\"end\"), \"end\", \"end\"));\n+            columns.add(new DatePropertyColumn<>(new ResourceModel(\"end\"), \"end\", \"end\"));\n \n-            columns.add(new PropertyColumn<ExecTO, String>(new ResourceModel(\"status\"), \"status\", \"status\"));\n+            columns.add(new PropertyColumn<>(new ResourceModel(\"status\"), \"status\", \"status\"));\n \n             return columns;\n         }"},{"sha":"15accd33a8e725ff179d9791b0b5f51ab6e71461","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/ReconciliationDetailsModalPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationDetailsModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationDetailsModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationDetailsModalPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -110,7 +110,7 @@ protected Collection<ActionLink.ActionType> getBulkActions() {\n         protected List<IColumn<Misaligned, String>> getColumns() {\n             List<IColumn<Misaligned, String>> columns = new ArrayList<>();\n \n-            columns.add(new PropertyColumn<Misaligned, String>(new ResourceModel(\"key\"), \"name\", \"name\"));\n+            columns.add(new PropertyColumn<>(new ResourceModel(\"key\"), \"name\", \"name\"));\n \n             columns.add(new AbstractColumn<Misaligned, String>(Model.of(\"Syncope\")) {\n "},{"sha":"f344917e25e13d5c2cfb3197e3e048c8c0ba3032","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/AbstractMappingPanel.java","status":"modified","additions":44,"deletions":49,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -27,7 +27,6 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -86,7 +85,7 @@ public abstract class AbstractMappingPanel extends Panel {\n     private static void initFieldNames(final Class<?> entityClass, final Set<String> keys) {\n         List<Class<?>> classes = ClassUtils.getAllSuperclasses(entityClass);\n         classes.add(entityClass);\n-        for (Class<?> clazz : classes) {\n+        classes.forEach(clazz -> {\n             for (Field field : clazz.getDeclaredFields()) {\n                 if (!Modifier.isStatic(field.getModifiers())\n                         && !Collection.class.isAssignableFrom(field.getType())\n@@ -95,7 +94,7 @@ private static void initFieldNames(final Class<?> entityClass, final Set<String>\n                     keys.add(field.getName());\n                 }\n             }\n-        }\n+        });\n     }\n \n     /**\n@@ -169,47 +168,43 @@ protected String createRelAttribute() {\n \n         mappingContainer.add(Constants.getJEXLPopover(this, TooltipConfig.Placement.bottom));\n \n-        Collections.sort(model.getObject(), new Comparator<ItemTO>() {\n-\n-            @Override\n-            public int compare(final ItemTO left, final ItemTO right) {\n-                int compared;\n-                if (left == null && right == null) {\n-                    compared = 0;\n-                } else if (left == null) {\n-                    compared = 1;\n-                } else if (right == null) {\n-                    compared = -1;\n-                } else if (left.isConnObjectKey()) {\n-                    compared = -1;\n-                } else if (right.isConnObjectKey()) {\n-                    compared = 1;\n-                } else if (left.isPassword()) {\n-                    compared = -1;\n-                } else if (right.isPassword()) {\n-                    compared = 1;\n-                } else if (left.getPurpose() == MappingPurpose.BOTH && right.getPurpose() != MappingPurpose.BOTH) {\n-                    compared = -1;\n-                } else if (left.getPurpose() != MappingPurpose.BOTH && right.getPurpose() == MappingPurpose.BOTH) {\n-                    compared = 1;\n-                } else if (left.getPurpose() == MappingPurpose.PROPAGATION\n-                        && (right.getPurpose() == MappingPurpose.PULL\n-                        || right.getPurpose() == MappingPurpose.NONE)) {\n-                    compared = -1;\n-                } else if (left.getPurpose() == MappingPurpose.PULL\n-                        && right.getPurpose() == MappingPurpose.PROPAGATION) {\n-                    compared = 1;\n-                } else if (left.getPurpose() == MappingPurpose.PULL\n-                        && right.getPurpose() == MappingPurpose.NONE) {\n-                    compared = -1;\n-                } else if (left.getPurpose() == MappingPurpose.NONE\n-                        && right.getPurpose() != MappingPurpose.NONE) {\n-                    compared = 1;\n-                } else {\n-                    compared = left.getIntAttrName().compareTo(right.getIntAttrName());\n-                }\n-                return compared;\n+        Collections.sort(model.getObject(), (left, right) -> {\n+            int compared;\n+            if (left == null && right == null) {\n+                compared = 0;\n+            } else if (left == null) {\n+                compared = 1;\n+            } else if (right == null) {\n+                compared = -1;\n+            } else if (left.isConnObjectKey()) {\n+                compared = -1;\n+            } else if (right.isConnObjectKey()) {\n+                compared = 1;\n+            } else if (left.isPassword()) {\n+                compared = -1;\n+            } else if (right.isPassword()) {\n+                compared = 1;\n+            } else if (left.getPurpose() == MappingPurpose.BOTH && right.getPurpose() != MappingPurpose.BOTH) {\n+                compared = -1;\n+            } else if (left.getPurpose() != MappingPurpose.BOTH && right.getPurpose() == MappingPurpose.BOTH) {\n+                compared = 1;\n+            } else if (left.getPurpose() == MappingPurpose.PROPAGATION\n+                    && (right.getPurpose() == MappingPurpose.PULL\n+                    || right.getPurpose() == MappingPurpose.NONE)) {\n+                compared = -1;\n+            } else if (left.getPurpose() == MappingPurpose.PULL\n+                    && right.getPurpose() == MappingPurpose.PROPAGATION) {\n+                compared = 1;\n+            } else if (left.getPurpose() == MappingPurpose.PULL\n+                    && right.getPurpose() == MappingPurpose.NONE) {\n+                compared = -1;\n+            } else if (left.getPurpose() == MappingPurpose.NONE\n+                    && right.getPurpose() != MappingPurpose.NONE) {\n+                compared = 1;\n+            } else {\n+                compared = left.getIntAttrName().compareTo(right.getIntAttrName());\n             }\n+            return compared;\n         });\n \n         mappings = new ListView<ItemTO>(\"mappings\", model) {\n@@ -229,7 +224,7 @@ protected void populateItem(final ListItem<ItemTO> item) {\n                 AjaxTextFieldPanel intAttrName = new AjaxTextFieldPanel(\n                         \"intAttrName\",\n                         getString(\"intAttrName\"),\n-                        new PropertyModel<String>(itemTO, \"intAttrName\"),\n+                        new PropertyModel<>(itemTO, \"intAttrName\"),\n                         false);\n                 intAttrName.setChoices(Collections.<String>emptyList());\n                 intAttrName.setRequired(true).hideLabel();\n@@ -242,7 +237,7 @@ protected void populateItem(final ListItem<ItemTO> item) {\n                 final AjaxTextFieldPanel extAttrName = new AjaxTextFieldPanel(\n                         \"extAttrName\",\n                         getString(\"extAttrName\"),\n-                        new PropertyModel<String>(itemTO, \"extAttrName\"));\n+                        new PropertyModel<>(itemTO, \"extAttrName\"));\n                 extAttrName.setChoices(getExtAttrNames().getObject());\n \n                 boolean required = !itemTO.isPassword();\n@@ -271,7 +266,7 @@ protected void populateItem(final ListItem<ItemTO> item) {\n                 final AjaxTextFieldPanel mandatory = new AjaxTextFieldPanel(\n                         \"mandatoryCondition\",\n                         new ResourceModel(\"mandatoryCondition\", \"mandatoryCondition\").getObject(),\n-                        new PropertyModel<String>(itemTO, \"mandatoryCondition\"));\n+                        new PropertyModel<>(itemTO, \"mandatoryCondition\"));\n                 mandatory.hideLabel();\n                 mandatory.setChoices(Arrays.asList(new String[] { \"true\", \"false\" }));\n                 mandatory.setEnabled(!itemTO.isConnObjectKey());\n@@ -284,7 +279,7 @@ protected void populateItem(final ListItem<ItemTO> item) {\n                 final AjaxCheckBoxPanel connObjectKey = new AjaxCheckBoxPanel(\n                         \"connObjectKey\",\n                         new ResourceModel(\"connObjectKey\", \"connObjectKey\").getObject(),\n-                        new PropertyModel<Boolean>(itemTO, \"connObjectKey\"), false);\n+                        new PropertyModel<>(itemTO, \"connObjectKey\"), false);\n                 connObjectKey.hideLabel();\n                 item.add(connObjectKey);\n                 // -------------------------------\n@@ -295,7 +290,7 @@ protected void populateItem(final ListItem<ItemTO> item) {\n                 final AjaxCheckBoxPanel password = new AjaxCheckBoxPanel(\n                         \"password\",\n                         new ResourceModel(\"password\", \"password\").getObject(),\n-                        new PropertyModel<Boolean>(itemTO, \"password\"), false);\n+                        new PropertyModel<>(itemTO, \"password\"), false);\n                 item.add(password.hideLabel());\n                 // -------------------------------\n \n@@ -306,7 +301,7 @@ protected void populateItem(final ListItem<ItemTO> item) {\n                 purpose.setOutputMarkupId(true);\n \n                 final MappingPurposePanel purposeActions = new MappingPurposePanel(\n-                        \"purposeActions\", new PropertyModel<MappingPurpose>(itemTO, \"purpose\"), purpose);\n+                        \"purposeActions\", new PropertyModel<>(itemTO, \"purpose\"), purpose);\n                 purpose.add(purposeActions.setRenderBodyOnly(true));\n                 item.add(purpose);\n                 // -------------------------------"},{"sha":"5dff819f792e5c4700f9f42d74988380926f8e78","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectDetails.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -37,8 +37,8 @@ public AnyObjectDetails(\n \n         AnyObjectTO anyObjectTO = wrapper.getInnerObject();\n \n-        AjaxTextFieldPanel name = new AjaxTextFieldPanel(\"name\", \"name\",\n-                new PropertyModel<String>(anyObjectTO, \"name\"), false);\n+        AjaxTextFieldPanel name =\n+                new AjaxTextFieldPanel(\"name\", \"name\", new PropertyModel<>(anyObjectTO, \"name\"), false);\n         if (templateMode) {\n             name.enableJexlHelp();\n         } else {"},{"sha":"249f4cfe86177902a5ed662dcf6875df1a4fce9e","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupDetails.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -37,8 +37,7 @@ public GroupDetails(\n \n         GroupTO groupTO = GroupWrapper.class.cast(wrapper).getInnerObject();\n \n-        AjaxTextFieldPanel name = new AjaxTextFieldPanel(\"name\", \"name\",\n-                new PropertyModel<String>(groupTO, \"name\"), false);\n+        AjaxTextFieldPanel name = new AjaxTextFieldPanel(\"name\", \"name\", new PropertyModel<>(groupTO, \"name\"), false);\n         if (templateMode) {\n             name.enableJexlHelp();\n         } else {"},{"sha":"62820614774a36b911eeac19741bfd6ab60a26be","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Ownership.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.client.console.panels.search.AnySelectionDirectoryPanel;\n import org.apache.syncope.client.console.panels.search.GroupSearchPanel;\n import org.apache.syncope.client.console.panels.search.GroupSelectionDirectoryPanel;\n-import org.apache.syncope.client.console.panels.search.SearchClause;\n import org.apache.syncope.client.console.panels.search.SearchClausePanel;\n import org.apache.syncope.client.console.panels.search.SearchUtils;\n import org.apache.syncope.client.console.panels.search.UserSearchPanel;\n@@ -171,7 +170,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n         groupSearchFragment = new Fragment(\"search\", \"groupSearchFragment\", this);\n         groupSearchPanel = new GroupSearchPanel.Builder(\n-                new ListModel<>(new ArrayList<SearchClause>())).required(false).enableSearch(Ownership.this).\n+                new ListModel<>(new ArrayList<>())).required(false).enableSearch(Ownership.this).\n                 build(\"groupsearch\");\n         groupSearchFragment.add(groupSearchPanel.setRenderBodyOnly(true));\n \n@@ -186,7 +185,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n         userSearchFragment = new Fragment(\"search\", \"userSearchFragment\", this);\n         userSearchPanel = UserSearchPanel.class.cast(new UserSearchPanel.Builder(\n-                new ListModel<>(new ArrayList<SearchClause>())).required(false).enableSearch(Ownership.this).\n+                new ListModel<>(new ArrayList<>())).required(false).enableSearch(Ownership.this).\n                 build(\"usersearch\"));\n         userSearchFragment.add(userSearchPanel.setRenderBodyOnly(true));\n \n@@ -247,8 +246,7 @@ public void setObject(final String object) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                send(Ownership.this, Broadcast.EXACT,\n-                        new GroupSelectionDirectoryPanel.ItemSelection<GroupTO>(target, null));\n+                send(Ownership.this, Broadcast.EXACT, new GroupSelectionDirectoryPanel.ItemSelection<>(target, null));\n             }\n \n             @Override\n@@ -301,8 +299,7 @@ public void setObject(final String object) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                send(Ownership.this, Broadcast.EXACT,\n-                        new GroupSelectionDirectoryPanel.ItemSelection<GroupTO>(target, null));\n+                send(Ownership.this, Broadcast.EXACT, new GroupSelectionDirectoryPanel.ItemSelection<>(target, null));\n             }\n \n             @Override"},{"sha":"a54c6caf965d61774b45bec06b1a964be51ddbdf","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PasswordPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPasswordPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPasswordPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPasswordPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -46,7 +46,7 @@ public PasswordPanel(\n         add(form);\n \n         FieldPanel<String> confirmPasswordField = new AjaxPasswordFieldPanel(\n-                \"confirmPassword\", \"confirmPassword\", new Model<String>(), false);\n+                \"confirmPassword\", \"confirmPassword\", new Model<>(), false);\n \n         confirmPasswordField.setMarkupId(\"confirmPassword\");\n         confirmPasswordField.setPlaceholder(\"confirmPassword\");\n@@ -58,15 +58,15 @@ public PasswordPanel(\n             confirmPasswordField.setVisible(false);\n \n             AjaxTextFieldPanel passwordField = new AjaxTextFieldPanel(\n-                    \"password\", \"password\", new PropertyModel<String>(wrapper.getInnerObject(), \"password\"), false);\n+                    \"password\", \"password\", new PropertyModel<>(wrapper.getInnerObject(), \"password\"), false);\n             passwordField.setRequired(true);\n             passwordField.setMarkupId(\"password\");\n             passwordField.setPlaceholder(\"password\");\n             form.add(passwordField);\n             passwordField.enableJexlHelp();\n         } else {\n             AjaxPasswordFieldPanel passwordField = new AjaxPasswordFieldPanel(\n-                    \"password\", \"password\", new PropertyModel<String>(wrapper.getInnerObject(), \"password\"), false);\n+                    \"password\", \"password\", new PropertyModel<>(wrapper.getInnerObject(), \"password\"), false);\n             passwordField.setRequired(true);\n             passwordField.setMarkupId(\"password\");\n             passwordField.setPlaceholder(\"password\");\n@@ -76,7 +76,7 @@ public PasswordPanel(\n         }\n \n         AjaxCheckBoxPanel storePasswordInSyncope = new AjaxCheckBoxPanel(\"storePasswordInSyncope\",\n-                \"storePasswordInSyncope\", new PropertyModel<Boolean>(wrapper, \"storePasswordInSyncope\"));\n+                \"storePasswordInSyncope\", new PropertyModel<>(wrapper, \"storePasswordInSyncope\"));\n         storePasswordInSyncope.getField().setLabel(new ResourceModel(\"storePasswordInSyncope\"));\n         storePasswordInSyncope.setOutputMarkupId(true);\n         storePasswordInSyncope.setOutputMarkupPlaceholderTag(true);"},{"sha":"e2c549523cb441cd05341ebea3526b22676f1aef","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/UserDetails.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserDetails.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -59,8 +59,7 @@ public UserDetails(\n         // ------------------------\n         // Username\n         // ------------------------\n-        username = new AjaxTextFieldPanel(\n-                \"username\", \"username\", new PropertyModel<String>(userTO, \"username\"), false);\n+        username = new AjaxTextFieldPanel(\"username\", \"username\", new PropertyModel<>(userTO, \"username\"), false);\n \n         if (wrapper.getPreviousUserTO() != null && StringUtils.\n                 compare(wrapper.getPreviousUserTO().getUsername(), wrapper.getInnerObject().getUsername()) != 0) {"},{"sha":"d3d4a82d435677f09b1fd0f2b397119fdf2e2298","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/VirAttrs.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -126,17 +126,18 @@ protected void setAttrs() {\n \n         Map<String, AttrTO> attrMap = EntityTOUtils.buildAttrMap(anyTO.getVirAttrs());\n \n-        for (VirSchemaTO schema : schemas.values()) {\n+        schemas.values().stream().map(schema -> {\n             AttrTO attrTO = new AttrTO();\n             attrTO.setSchema(schema.getKey());\n             if (attrMap.containsKey(schema.getKey())) {\n                 attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n             } else {\n                 attrTO.getValues().add(StringUtils.EMPTY);\n             }\n-\n+            return attrTO;\n+        }).forEachOrdered(attrTO -> {\n             attrs.add(attrTO);\n-        }\n+        });\n \n         anyTO.getVirAttrs().clear();\n         anyTO.getVirAttrs().addAll(attrs);\n@@ -148,17 +149,18 @@ protected void setAttrs(final MembershipTO membershipTO) {\n \n         Map<String, AttrTO> attrMap = EntityTOUtils.buildAttrMap(anyTO.getVirAttrs());\n \n-        for (VirSchemaTO schema : membershipSchemas.get(membershipTO.getGroupKey()).values()) {\n+        membershipSchemas.get(membershipTO.getGroupKey()).values().stream().map(schema -> {\n             AttrTO attrTO = new AttrTO();\n             attrTO.setSchema(schema.getKey());\n             if (attrMap.containsKey(schema.getKey())) {\n                 attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n             } else {\n                 attrTO.getValues().add(StringUtils.EMPTY);\n             }\n-\n+            return attrTO;\n+        }).forEachOrdered(attrTO -> {\n             attrs.add(attrTO);\n-        }\n+        });\n \n         membershipTO.getVirAttrs().clear();\n         membershipTO.getVirAttrs().addAll(attrs);\n@@ -180,8 +182,8 @@ public VirSchemas(final String id, final IModel<List<AttrTO>> attrTOs) {\n                 protected void populateItem(final ListItem<AttrTO> item) {\n                     AttrTO attrTO = item.getModelObject();\n \n-                    AbstractFieldPanel<?> panel\n-                            = new AjaxTextFieldPanel(\"panel\", attrTO.getSchema(), new Model<String>(), false);\n+                    AbstractFieldPanel<?> panel =\n+                            new AjaxTextFieldPanel(\"panel\", attrTO.getSchema(), new Model<>(), false);\n \n                     boolean readonly = attrTO.getSchemaInfo() == null\n                             ? false"},{"sha":"6a85d96983a0f2ec46b44c55fa27bd1fb919cb31","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/JEXLTransformersTogglePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FJEXLTransformersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FJEXLTransformersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FJEXLTransformersTogglePanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -70,8 +70,8 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n     }\n \n     public JEXLTransformersTogglePanel setItem(final AjaxRequestTarget target, final ItemTO item) {\n-        this.propagationJEXLTransformer.setNewModel(new PropertyModel<String>(item, \"propagationJEXLTransformer\"));\n-        this.pullJEXLTransformer.setNewModel(new PropertyModel<String>(item, \"pullJEXLTransformer\"));\n+        this.propagationJEXLTransformer.setNewModel(new PropertyModel<>(item, \"propagationJEXLTransformer\"));\n+        this.pullJEXLTransformer.setNewModel(new PropertyModel<>(item, \"pullJEXLTransformer\"));\n         setHeader(target, StringUtils.EMPTY);\n         return this;\n     }"},{"sha":"6268984511779139705829d58d9296e8a919e7db","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceConnCapabilitiesPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnCapabilitiesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnCapabilitiesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnCapabilitiesPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.wizards.resources;\n \n-import java.util.List;\n import java.util.Set;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n@@ -44,14 +43,14 @@ public ResourceConnCapabilitiesPanel(\n         }\n \n         final CapabilitiesPanel connCapabilitiesPanel = new CapabilitiesPanel(\n-                new PropertyModel<List<ConnectorCapability>>(resourceTO, \"capabilitiesOverride\"));\n+                new PropertyModel<>(resourceTO, \"capabilitiesOverride\"));\n         connCapabilitiesPanel.setEnabled(resourceTO.isOverrideCapabilities());\n         add(connCapabilitiesPanel);\n \n         final AjaxCheckBoxPanel overrideCapabilities = new AjaxCheckBoxPanel(\n                 \"overrideCapabilities\",\n                 new ResourceModel(\"overrideCapabilities\", \"overrideCapabilities\").getObject(),\n-                new PropertyModel<Boolean>(resourceTO, \"overrideCapabilities\"));\n+                new PropertyModel<>(resourceTO, \"overrideCapabilities\"));\n         overrideCapabilities.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;"},{"sha":"8a3aa5ff40d84e4fb3846a49de4ac1ec99923f94","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceConnConfPanel.java","status":"modified","additions":12,"deletions":17,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnConfPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -61,15 +60,11 @@ public List<ConnConfProperty> getObject() {\n                         List<ConnConfProperty> res = new ArrayList<>(super.getObject());\n \n                         // re-order properties\n-                        Collections.sort(res, new Comparator<ConnConfProperty>() {\n-\n-                            @Override\n-                            public int compare(final ConnConfProperty left, final ConnConfProperty right) {\n-                                if (left == null) {\n-                                    return -1;\n-                                } else {\n-                                    return left.compareTo(right);\n-                                }\n+                        Collections.sort(res, (left, right) -> {\n+                            if (left == null) {\n+                                return -1;\n+                            } else {\n+                                return left.compareTo(right);\n                             }\n                         });\n \n@@ -96,19 +91,19 @@ protected final List<ConnConfProperty> getConnProperties(final ResourceTO resour\n         List<ConnConfProperty> props = new ArrayList<>();\n \n         if (resourceTO.getConnector() != null) {\n-            for (ConnConfProperty property : restClient.read(resourceTO.getConnector()).getConf()) {\n-                if (property.isOverridable()) {\n-                    props.add(property);\n-                }\n-            }\n+            restClient.read(resourceTO.getConnector()).getConf().stream().\n+                    filter(property -> (property.isOverridable())).\n+                    forEachOrdered(property -> {\n+                        props.add(property);\n+                    });\n         }\n         if (createFlag || resourceTO.getConfOverride().isEmpty()) {\n             resourceTO.getConfOverride().clear();\n         } else {\n             Map<String, ConnConfProperty> valuedProps = new HashMap<>();\n-            for (ConnConfProperty prop : resourceTO.getConfOverride()) {\n+            resourceTO.getConfOverride().forEach(prop -> {\n                 valuedProps.put(prop.getSchema().getName(), prop);\n-            }\n+            });\n \n             for (int i = 0; i < props.size(); i++) {\n                 if (valuedProps.containsKey(props.get(i).getSchema().getName())) {"},{"sha":"d5a84808d444d848eaed0c4ed3d3f1afa66bddbf","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceDetailsPanel.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -64,14 +64,14 @@ public ResourceDetailsPanel(final ResourceTO resourceTO, final boolean createFla\n         container.add(new AjaxTextFieldPanel(\n                 \"key\",\n                 new ResourceModel(\"key\", \"key\").\n-                getObject(),\n-                new PropertyModel<String>(resourceTO, \"key\"),\n+                        getObject(),\n+                new PropertyModel<>(resourceTO, \"key\"),\n                 false).addRequiredLabel().setEnabled(createFlag));\n \n         container.add(new AjaxCheckBoxPanel(\n                 \"enforceMandatoryCondition\",\n                 new ResourceModel(\"enforceMandatoryCondition\", \"enforceMandatoryCondition\").getObject(),\n-                new PropertyModel<Boolean>(resourceTO, \"enforceMandatoryCondition\"),\n+                new PropertyModel<>(resourceTO, \"enforceMandatoryCondition\"),\n                 false));\n \n         container.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n@@ -82,7 +82,7 @@ public ResourceDetailsPanel(final ResourceTO resourceTO, final boolean createFla\n \n         container.add(new AjaxCheckBoxPanel(\"randomPwdIfNotProvided\",\n                 new ResourceModel(\"randomPwdIfNotProvided\", \"randomPwdIfNotProvided\").getObject(),\n-                new PropertyModel<Boolean>(resourceTO, \"randomPwdIfNotProvided\"),\n+                new PropertyModel<>(resourceTO, \"randomPwdIfNotProvided\"),\n                 false));\n \n         container.add(new AjaxPalettePanel.Builder<String>().\n@@ -95,28 +95,28 @@ public ResourceDetailsPanel(final ResourceTO resourceTO, final boolean createFla\n         container.add(new AjaxDropDownChoicePanel<>(\n                 \"createTraceLevel\",\n                 new ResourceModel(\"createTraceLevel\", \"createTraceLevel\").getObject(),\n-                new PropertyModel<TraceLevel>(resourceTO, \"createTraceLevel\"),\n+                new PropertyModel<>(resourceTO, \"createTraceLevel\"),\n                 false).\n                 setChoices(Arrays.asList(TraceLevel.values())).setNullValid(false));\n \n         container.add(new AjaxDropDownChoicePanel<>(\n                 \"updateTraceLevel\",\n                 new ResourceModel(\"updateTraceLevel\", \"updateTraceLevel\").getObject(),\n-                new PropertyModel<TraceLevel>(resourceTO, \"updateTraceLevel\"),\n+                new PropertyModel<>(resourceTO, \"updateTraceLevel\"),\n                 false).\n                 setChoices(Arrays.asList(TraceLevel.values())).setNullValid(false));\n \n         container.add(new AjaxDropDownChoicePanel<>(\n                 \"deleteTraceLevel\",\n                 new ResourceModel(\"deleteTraceLevel\", \"deleteTraceLevel\").getObject(),\n-                new PropertyModel<TraceLevel>(resourceTO, \"deleteTraceLevel\"),\n+                new PropertyModel<>(resourceTO, \"deleteTraceLevel\"),\n                 false).\n                 setChoices(Arrays.asList(TraceLevel.values())).setNullValid(false));\n \n         container.add(new AjaxDropDownChoicePanel<>(\n                 \"provisioningTraceLevel\",\n                 new ResourceModel(\"provisioningTraceLevel\", \"provisioningTraceLevel\").getObject(),\n-                new PropertyModel<TraceLevel>(resourceTO, \"provisioningTraceLevel\"),\n+                new PropertyModel<>(resourceTO, \"provisioningTraceLevel\"),\n                 false).\n                 setChoices(Arrays.asList(TraceLevel.values())).setNullValid(false));\n "},{"sha":"aeace2d3a789f4a57205802f19e2a2b2f6b1e7e0","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceSecurityPanel.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -24,7 +24,6 @@\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.PolicyRenderer;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.extensions.wizard.WizardStep;\n@@ -48,9 +47,9 @@ public class ResourceSecurityPanel extends WizardStep {\n         @Override\n         protected Map<String, String> load() {\n             Map<String, String> res = new HashMap<>();\n-            for (AbstractPolicyTO policyTO : policyRestClient.getPolicies(PolicyType.PASSWORD)) {\n+            policyRestClient.getPolicies(PolicyType.PASSWORD).forEach(policyTO -> {\n                 res.put(policyTO.getKey(), policyTO.getDescription());\n-            }\n+            });\n             return res;\n         }\n     };\n@@ -62,9 +61,9 @@ protected Map<String, String> load() {\n         @Override\n         protected Map<String, String> load() {\n             Map<String, String> res = new HashMap<>();\n-            for (AbstractPolicyTO policyTO : policyRestClient.getPolicies(PolicyType.ACCOUNT)) {\n+            policyRestClient.getPolicies(PolicyType.ACCOUNT).forEach(policyTO -> {\n                 res.put(policyTO.getKey(), policyTO.getDescription());\n-            }\n+            });\n             return res;\n         }\n     };\n@@ -76,9 +75,9 @@ protected Map<String, String> load() {\n         @Override\n         protected Map<String, String> load() {\n             Map<String, String> res = new HashMap<>();\n-            for (AbstractPolicyTO policyTO : policyRestClient.getPolicies(PolicyType.PULL)) {\n+            policyRestClient.getPolicies(PolicyType.PULL).forEach(policyTO -> {\n                 res.put(policyTO.getKey(), policyTO.getDescription());\n-            }\n+            });\n             return res;\n         }\n     };\n@@ -98,7 +97,7 @@ public ResourceSecurityPanel(final ResourceTO resourceTO) {\n         AjaxDropDownChoicePanel<String> passwordPolicy = new AjaxDropDownChoicePanel<>(\n                 \"passwordPolicy\",\n                 new ResourceModel(\"passwordPolicy\", \"passwordPolicy\").getObject(),\n-                new PropertyModel<String>(resourceTO, \"passwordPolicy\"),\n+                new PropertyModel<>(resourceTO, \"passwordPolicy\"),\n                 false);\n         passwordPolicy.setChoiceRenderer(new PolicyRenderer(passwordPolicies));\n         passwordPolicy.setChoices(new ArrayList<>(passwordPolicies.getObject().keySet()));\n@@ -112,7 +111,7 @@ public ResourceSecurityPanel(final ResourceTO resourceTO) {\n         AjaxDropDownChoicePanel<String> accountPolicy = new AjaxDropDownChoicePanel<>(\n                 \"accountPolicy\",\n                 new ResourceModel(\"accountPolicy\", \"accountPolicy\").getObject(),\n-                new PropertyModel<String>(resourceTO, \"accountPolicy\"),\n+                new PropertyModel<>(resourceTO, \"accountPolicy\"),\n                 false);\n         accountPolicy.setChoiceRenderer(new PolicyRenderer(accountPolicies));\n         accountPolicy.setChoices(new ArrayList<>(accountPolicies.getObject().keySet()));\n@@ -126,7 +125,7 @@ public ResourceSecurityPanel(final ResourceTO resourceTO) {\n         AjaxDropDownChoicePanel<String> pullPolicy = new AjaxDropDownChoicePanel<>(\n                 \"pullPolicy\",\n                 new ResourceModel(\"pullPolicy\", \"pullPolicy\").getObject(),\n-                new PropertyModel<String>(resourceTO, \"pullPolicy\"),\n+                new PropertyModel<>(resourceTO, \"pullPolicy\"),\n                 false);\n         pullPolicy.setChoiceRenderer(new PolicyRenderer(pullPolicies));\n         pullPolicy.setChoices(new ArrayList<>(pullPolicies.getObject().keySet()));"},{"sha":"587184286bae42278e1b11fce18148a285cd88c0","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserApplication.java","status":"modified","additions":3,"deletions":15,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -21,7 +21,6 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.File;\n-import java.io.FileFilter;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.Serializable;\n@@ -142,21 +141,10 @@ protected void init() {\n                 }\n             }\n             FileAlterationObserver observer = existsEnduserDir\n-                    ? new FileAlterationObserver(enduserDir, new FileFilter() {\n-\n-                        @Override\n-                        public boolean accept(final File pathname) {\n-                            return StringUtils.contains(pathname.getPath(), CUSTOM_FORM_FILE);\n-                        }\n-                    })\n+                    ? new FileAlterationObserver(enduserDir,\n+                            pathname -> StringUtils.contains(pathname.getPath(), CUSTOM_FORM_FILE))\n                     : new FileAlterationObserver(getClass().getResource(\"/\" + CUSTOM_FORM_FILE).getFile(),\n-                            new FileFilter() {\n-\n-                        @Override\n-                        public boolean accept(final File pathname) {\n-                            return StringUtils.contains(pathname.getPath(), CUSTOM_FORM_FILE);\n-                        }\n-                    });\n+                            pathname -> StringUtils.contains(pathname.getPath(), CUSTOM_FORM_FILE));\n \n             FileAlterationMonitor monitor = new FileAlterationMonitor(5000);\n "},{"sha":"c7b70cc3935d95f29b87a2e707dbd4a30243c286","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -22,10 +22,9 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.MediaType;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n@@ -85,13 +84,8 @@ public SyncopeEnduserSession(final Request request) {\n \n         datePlainSchemas = anonymousClient.getService(SchemaService.class).\n                 list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n-        CollectionUtils.filter(datePlainSchemas, new Predicate<PlainSchemaTO>() {\n-\n-            @Override\n-            public boolean evaluate(final PlainSchemaTO object) {\n-                return object.getType() == AttrSchemaType.Date;\n-            }\n-        });\n+        datePlainSchemas.removeAll(datePlainSchemas.stream().\n+                filter(object -> object.getType() != AttrSchemaType.Date).collect(Collectors.toSet()));\n     }\n \n     private void afterAuthentication() {"},{"sha":"10da85b09883060ad51a04f21230844a9e076eb9","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/BaseUserSelfResource.java","status":"modified","additions":17,"deletions":25,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -21,9 +21,8 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.text.ParseException;\n+import java.util.ListIterator;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n@@ -34,45 +33,38 @@ public abstract class BaseUserSelfResource extends BaseResource {\n \n     protected void dateToMillis(final Set<AttrTO> attrs, final PlainSchemaTO plainSchema)\n             throws ParseException {\n-        final FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n-\n-        for (AttrTO attr : attrs) {\n-            if (attr.getSchema().equals(plainSchema.getKey())) {\n-                CollectionUtils.transform(attr.getValues(), new Transformer<String, String>() {\n \n-                    @Override\n-                    public String transform(final String input) {\n+        final FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n+        attrs.stream().\n+                filter(attr -> (attr.getSchema().equals(plainSchema.getKey()))).\n+                forEachOrdered(attr -> {\n+                    for (ListIterator<String> itor = attr.getValues().listIterator(); itor.hasNext();) {\n+                        String value = itor.next();\n                         try {\n-                            return String.valueOf(fmt.parse(input).getTime());\n+                            itor.set(String.valueOf(fmt.parse(value).getTime()));\n                         } catch (ParseException ex) {\n-                            LOG.error(\"Unable to parse date {}\", input);\n-                            return input;\n+                            LOG.error(\"Unable to parse date {}\", value);\n                         }\n                     }\n                 });\n-            }\n-        }\n     }\n \n     protected void millisToDate(final Set<AttrTO> attrs, final PlainSchemaTO plainSchema)\n             throws IllegalArgumentException {\n-        final FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n-        for (AttrTO attr : attrs) {\n-            if (attr.getSchema().equals(plainSchema.getKey())) {\n-                CollectionUtils.transform(attr.getValues(), new Transformer<String, String>() {\n \n-                    @Override\n-                    public String transform(final String input) {\n+        final FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n+        attrs.stream().\n+                filter(attr -> (attr.getSchema().equals(plainSchema.getKey()))).\n+                forEachOrdered(attr -> {\n+                    for (ListIterator<String> itor = attr.getValues().listIterator(); itor.hasNext();) {\n+                        String value = itor.next();\n                         try {\n-                            return fmt.format(Long.valueOf(input));\n+                            itor.set(fmt.format(Long.valueOf(value)));\n                         } catch (NumberFormatException ex) {\n-                            LOG.error(\"Invalid format value for {}\", input);\n-                            return input;\n+                            LOG.error(\"Invalid format value for {}\", value);\n                         }\n                     }\n                 });\n-            }\n-        }\n     }\n \n     protected void buildResponse(final ResourceResponse response, final int statusCode, final String message) {"},{"sha":"58bd2381a2a5e30c156f5985c825fce552acbeea","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/InfoResource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -67,7 +67,7 @@ public void writeData(final IResource.Attributes attributes) throws IOException\n                                     PlatformInfoAdapter.toPlatformInfoRequest(\n                                             SyncopeEnduserSession.get().getPlatformInfo(),\n                                             customForm == null\n-                                                    ? new HashMap<String, CustomAttributesInfo>()\n+                                                    ? new HashMap<>()\n                                                     : customForm)));\n                 }\n             });"},{"sha":"80ec8d10ea18633c59f07c2e535073fc85490e26","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java","status":"modified","additions":24,"deletions":32,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -22,14 +22,12 @@\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserApplication;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n@@ -125,15 +123,15 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n                     : Collections.<AbstractSchemaTO>emptyList();\n \n             if (group != null) {\n-                for (AbstractSchemaTO schema : plainSchemas) {\n+                plainSchemas.forEach(schema -> {\n                     schema.setKey(compositeSchemaKey(group, schema.getKey()));\n-                }\n-                for (AbstractSchemaTO schema : derSchemas) {\n+                });\n+                derSchemas.forEach(schema -> {\n                     schema.setKey(compositeSchemaKey(group, schema.getKey()));\n-                }\n-                for (AbstractSchemaTO schema : virSchemas) {\n+                });\n+                virSchemas.forEach(schema -> {\n                     schema.setKey(compositeSchemaKey(group, schema.getKey()));\n-                }\n+                });\n             }\n \n             response.setTextEncoding(StandardCharsets.UTF_8.name());\n@@ -160,36 +158,30 @@ public void writeData(final IResource.Attributes attributes) throws IOException\n         return response;\n     }\n \n-    private List<AbstractSchemaTO> customizeSchemas(final List<AbstractSchemaTO> schemaTOs, final String groupParam,\n+    private List<AbstractSchemaTO> customizeSchemas(\n+            final List<AbstractSchemaTO> schemaTOs,\n+            final String groupParam,\n             final Map<String, CustomAttribute> customForm) {\n \n         if (customForm.isEmpty()) {\n             return schemaTOs;\n         }\n         final boolean isGroupBlank = StringUtils.isBlank(groupParam);\n \n-        CollectionUtils.filter(schemaTOs, new Predicate<AbstractSchemaTO>() {\n-\n-            @Override\n-            public boolean evaluate(final AbstractSchemaTO object) {\n-                return customForm.containsKey(isGroupBlank\n-                        ? object.getKey()\n-                        : compositeSchemaKey(groupParam, object.getKey()));\n-            }\n-        });\n-\n-        Collections.sort(schemaTOs, new Comparator<AbstractSchemaTO>() {\n-\n-            @Override\n-            public int compare(final AbstractSchemaTO schemaTO1, final AbstractSchemaTO schemaTO2) {\n-                List<String> order = new ArrayList<>(customForm.keySet());\n-                return order.indexOf(isGroupBlank\n-                        ? schemaTO1.getKey()\n-                        : compositeSchemaKey(groupParam, schemaTO1.getKey()))\n-                        - order.indexOf(isGroupBlank\n-                                ? schemaTO2.getKey()\n-                                : compositeSchemaKey(groupParam, schemaTO2.getKey()));\n-            }\n+        schemaTOs.removeAll(schemaTOs.stream().\n+                filter(schema -> !customForm.containsKey(isGroupBlank\n+                ? schema.getKey()\n+                : compositeSchemaKey(groupParam, schema.getKey()))).\n+                collect(Collectors.toSet()));\n+\n+        Collections.sort(schemaTOs, (schemaTO1, schemaTO2) -> {\n+            List<String> order = new ArrayList<>(customForm.keySet());\n+            return order.indexOf(isGroupBlank\n+                    ? schemaTO1.getKey()\n+                    : compositeSchemaKey(groupParam, schemaTO1.getKey()))\n+                    - order.indexOf(isGroupBlank\n+                            ? schemaTO2.getKey()\n+                            : compositeSchemaKey(groupParam, schemaTO2.getKey()));\n         });\n \n         return schemaTOs;"},{"sha":"9d8d7d50669b40979d2c4ec0eeb6479f2ad508d1","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java","status":"modified","additions":57,"deletions":71,"changes":128,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -23,8 +23,6 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserApplication;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n@@ -34,7 +32,6 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n-import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n \n@@ -88,89 +85,79 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n \n                     // 1. membership attributes management\n                     Set<AttrTO> membAttrs = new HashSet<>();\n-                    for (AttrTO attr : userTO.getPlainAttrs()) {\n-                        if (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR)) {\n-                            final String[] simpleAttrs = attr.getSchema().split(\n-                                    SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n-                            MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n-                                    new Predicate<MembershipTO>() {\n-\n-                                @Override\n-                                public boolean evaluate(final MembershipTO item) {\n-                                    return simpleAttrs[0].equals(item.getGroupName());\n+                    userTO.getPlainAttrs().stream().\n+                            filter(attr -> (attr.getSchema().\n+                            contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR))).\n+                            forEachOrdered(attr -> {\n+                                String[] simpleAttrs = attr.getSchema().split(\n+                                        SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n+                                MembershipTO membership = userTO.getMemberships().stream().\n+                                        filter(memb -> simpleAttrs[0].equals(memb.getGroupName())).\n+                                        findFirst().orElse(null);\n+                                if (membership == null) {\n+                                    membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                    userTO.getMemberships().add(membership);\n                                 }\n+\n+                                AttrTO clone = SerializationUtils.clone(attr);\n+                                clone.setSchema(simpleAttrs[1]);\n+                                membership.getPlainAttrs().add(clone);\n+                                membAttrs.add(attr);\n                             });\n-                            if (membership == null) {\n-                                membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n-                                userTO.getMemberships().add(membership);\n-                            }\n-\n-                            AttrTO clone = SerializationUtils.clone(attr);\n-                            clone.setSchema(simpleAttrs[1]);\n-                            membership.getPlainAttrs().add(clone);\n-                            membAttrs.add(attr);\n-                        }\n-                    }\n                     userTO.getPlainAttrs().removeAll(membAttrs);\n \n                     // 2. millis -> Date conversion for PLAIN attributes of USER and its MEMBERSHIPS\n-                    for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n+                    SyncopeEnduserSession.get().getDatePlainSchemas().stream().map(plainSchema -> {\n                         millisToDate(userTO.getPlainAttrs(), plainSchema);\n-                        for (MembershipTO membership : userTO.getMemberships()) {\n+                        return plainSchema;\n+                    }).forEachOrdered(plainSchema -> {\n+                        userTO.getMemberships().forEach(membership -> {\n                             millisToDate(membership.getPlainAttrs(), plainSchema);\n-                        }\n-                    }\n+                        });\n+                    });\n \n                     membAttrs.clear();\n-                    for (AttrTO attr : userTO.getDerAttrs()) {\n-                        if (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR)) {\n-                            final String[] simpleAttrs = attr.getSchema().split(\n-                                    SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n-                            MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n-                                    new Predicate<MembershipTO>() {\n-\n-                                @Override\n-                                public boolean evaluate(final MembershipTO item) {\n-                                    return simpleAttrs[0].equals(item.getGroupName());\n+                    userTO.getDerAttrs().stream().\n+                            filter(attr -> (attr.getSchema().\n+                            contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR))).\n+                            forEachOrdered(attr -> {\n+                                String[] simpleAttrs = attr.getSchema().split(\n+                                        SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n+                                MembershipTO membership = userTO.getMemberships().stream().\n+                                        filter(memb -> simpleAttrs[0].equals(memb.getGroupName())).\n+                                        findFirst().orElse(null);\n+                                if (membership == null) {\n+                                    membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                    userTO.getMemberships().add(membership);\n                                 }\n+\n+                                AttrTO clone = SerializationUtils.clone(attr);\n+                                clone.setSchema(simpleAttrs[1]);\n+                                membership.getDerAttrs().add(clone);\n+                                membAttrs.add(attr);\n                             });\n-                            if (membership == null) {\n-                                membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n-                                userTO.getMemberships().add(membership);\n-                            }\n-\n-                            AttrTO clone = SerializationUtils.clone(attr);\n-                            clone.setSchema(simpleAttrs[1]);\n-                            membership.getDerAttrs().add(clone);\n-                            membAttrs.add(attr);\n-                        }\n-                    }\n                     userTO.getDerAttrs().removeAll(membAttrs);\n \n                     membAttrs.clear();\n-                    for (AttrTO attr : userTO.getVirAttrs()) {\n-                        if (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR)) {\n-                            final String[] simpleAttrs = attr.getSchema().split(\n-                                    SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n-                            MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n-                                    new Predicate<MembershipTO>() {\n-\n-                                @Override\n-                                public boolean evaluate(final MembershipTO item) {\n-                                    return simpleAttrs[0].equals(item.getGroupName());\n+                    userTO.getVirAttrs().stream().\n+                            filter(attr -> (attr.getSchema().\n+                            contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR))).\n+                            forEachOrdered(attr -> {\n+                                String[] simpleAttrs = attr.getSchema().split(\n+                                        SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n+                                MembershipTO membership = userTO.getMemberships().stream().\n+                                        filter(memb -> simpleAttrs[0].equals(memb.getGroupName())).\n+                                        findFirst().orElse(null);\n+                                if (membership == null) {\n+                                    membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                    userTO.getMemberships().add(membership);\n                                 }\n+\n+                                AttrTO clone = SerializationUtils.clone(attr);\n+                                clone.setSchema(simpleAttrs[1]);\n+                                membership.getVirAttrs().add(clone);\n+                                membAttrs.add(attr);\n                             });\n-                            if (membership == null) {\n-                                membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n-                                userTO.getMemberships().add(membership);\n-                            }\n-\n-                            AttrTO clone = SerializationUtils.clone(attr);\n-                            clone.setSchema(simpleAttrs[1]);\n-                            membership.getVirAttrs().add(clone);\n-                            membAttrs.add(attr);\n-                        }\n-                    }\n                     userTO.getVirAttrs().removeAll(membAttrs);\n \n                     LOG.debug(\"Received user self registration request for user: [{}]\", userTO.getUsername());\n@@ -197,7 +184,6 @@ public boolean evaluate(final MembershipTO item) {\n                         ? \"Request received is not valid }}\"\n                         : \"Self registration not allowed }}\").toString());\n             }\n-\n         } catch (Exception e) {\n             LOG.error(\"Unable to create userTO\", e);\n             response.setError(Response.Status.BAD_REQUEST.getStatusCode(),"},{"sha":"255449aa6aed01cda22829655f0bd63c2912b9c1","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java","status":"modified","additions":22,"deletions":22,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -22,11 +22,10 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserApplication;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n@@ -72,23 +71,29 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n             // 2. membership attributes management\n             for (MembershipTO membership : userTO.getMemberships()) {\n                 String groupName = membership.getGroupName();\n-                for (AttrTO attr : membership.getPlainAttrs()) {\n-                    attr.setSchema(groupName.concat(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR).concat(attr.\n-                            getSchema()));\n+                membership.getPlainAttrs().stream().map(attr -> {\n+                    attr.setSchema(groupName.concat(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR).\n+                            concat(attr.getSchema()));\n+                    return attr;\n+                }).forEachOrdered(attr -> {\n                     userTO.getPlainAttrs().add(attr);\n-                }\n+                });\n                 membership.getPlainAttrs().clear();\n-                for (AttrTO attr : membership.getDerAttrs()) {\n-                    attr.setSchema(groupName.concat(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR).concat(attr.\n-                            getSchema()));\n+                membership.getDerAttrs().stream().map(attr -> {\n+                    attr.setSchema(groupName.concat(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR).\n+                            concat(attr.getSchema()));\n+                    return attr;\n+                }).forEachOrdered(attr -> {\n                     userTO.getDerAttrs().add(attr);\n-                }\n+                });\n                 membership.getDerAttrs().clear();\n-                for (AttrTO attr : membership.getVirAttrs()) {\n-                    attr.setSchema(groupName.concat(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR).concat(attr.\n-                            getSchema()));\n+                membership.getVirAttrs().stream().map((attr) -> {\n+                    attr.setSchema(groupName.concat(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR).\n+                            concat(attr.getSchema()));\n+                    return attr;\n+                }).forEachOrdered(attr -> {\n                     userTO.getVirAttrs().add(attr);\n-                }\n+                });\n                 membership.getVirAttrs().clear();\n             }\n             // USER from customization, if empty or null ignore it, use it to filter attributes otherwise\n@@ -138,14 +143,9 @@ private void customizeAttrTOs(final Set<AttrTO> attrs, final CustomAttributesInf\n                 && customAttributesInfo.isShow()\n                 && !customAttributesInfo.getAttributes().isEmpty()) {\n \n-            CollectionUtils.filter(attrs, new Predicate<AttrTO>() {\n-\n-                @Override\n-                public boolean evaluate(final AttrTO attr) {\n-                    return customAttributesInfo.getAttributes().containsKey(attr.getSchema());\n-                }\n-            });\n-\n+            attrs.removeAll(attrs.stream().\n+                    filter(attr -> !customAttributesInfo.getAttributes().containsKey(attr.getSchema())).\n+                    collect(Collectors.toList()));\n         } else if (customAttributesInfo != null && !customAttributesInfo.isShow()) {\n             attrs.clear();\n         }"},{"sha":"dcc6c79aff1805940c998b1ef8962c0003d0f23e","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":68,"deletions":86,"changes":154,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -20,12 +20,11 @@\n \n import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserApplication;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n@@ -38,7 +37,6 @@\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n-import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.wicket.request.resource.AbstractResource;\n@@ -75,87 +73,75 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n             if (UserRequestValidator.compliant(userTO, customForm, false)) {\n                 // 1. membership attributes management\n                 Set<AttrTO> membAttrs = new HashSet<>();\n-                for (AttrTO attr : userTO.getPlainAttrs()) {\n-                    if (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR)) {\n-                        final String[] compositeSchemaKey = attr.getSchema().split(\n-                                SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n-                        MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n-                                new Predicate<MembershipTO>() {\n-\n-                            @Override\n-                            public boolean evaluate(final MembershipTO item) {\n-                                return compositeSchemaKey[0].equals(item.getGroupName());\n+                userTO.getPlainAttrs().stream().\n+                        filter(attr -> (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR))).\n+                        forEachOrdered((attr) -> {\n+                            String[] simpleAttrs = attr.getSchema().split(\n+                                    SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n+                            MembershipTO membership = userTO.getMemberships().stream().\n+                                    filter(item -> simpleAttrs[0].equals(item.getGroupName())).\n+                                    findFirst().orElse(null);\n+                            if (membership == null) {\n+                                membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                userTO.getMemberships().add(membership);\n                             }\n+                            AttrTO clone = SerializationUtils.clone(attr);\n+                            clone.setSchema(simpleAttrs[1]);\n+                            membership.getPlainAttrs().add(clone);\n+                            membAttrs.add(attr);\n                         });\n-                        if (membership == null) {\n-                            membership = new MembershipTO.Builder().group(null, compositeSchemaKey[0]).build();\n-                            userTO.getMemberships().add(membership);\n-                        }\n-                        AttrTO clone = SerializationUtils.clone(attr);\n-                        clone.setSchema(compositeSchemaKey[1]);\n-                        membership.getPlainAttrs().add(clone);\n-                        membAttrs.add(attr);\n-                    }\n-                }\n                 userTO.getPlainAttrs().removeAll(membAttrs);\n \n                 // 2. millis -> Date conversion for PLAIN attributes of USER and its MEMBERSHIPS\n-                for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n-                    millisToDate(userTO.getPlainAttrs(), plainSchema);\n-                    for (MembershipTO membership : userTO.getMemberships()) {\n+                SyncopeEnduserSession.get().getDatePlainSchemas().stream().\n+                        map(plainSchema -> {\n+                            millisToDate(userTO.getPlainAttrs(), plainSchema);\n+                            return plainSchema;\n+                        }).forEachOrdered(plainSchema -> {\n+                    userTO.getMemberships().forEach(membership -> {\n                         millisToDate(membership.getPlainAttrs(), plainSchema);\n-                    }\n-                }\n+                    });\n+                });\n \n                 membAttrs.clear();\n-                for (AttrTO attr : userTO.getDerAttrs()) {\n-                    if (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR)) {\n-                        final String[] simpleAttrs = attr.getSchema().split(\n-                                SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n-                        MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n-                                new Predicate<MembershipTO>() {\n-\n-                            @Override\n-                            public boolean evaluate(final MembershipTO item) {\n-                                return simpleAttrs[0].equals(item.getGroupName());\n+                userTO.getDerAttrs().stream().\n+                        filter(attr -> (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR))).\n+                        forEachOrdered(attr -> {\n+                            String[] simpleAttrs = attr.getSchema().split(\n+                                    SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n+                            MembershipTO membership = userTO.getMemberships().stream().\n+                                    filter(item -> simpleAttrs[0].equals(item.getGroupName())).\n+                                    findFirst().orElse(null);\n+                            if (membership == null) {\n+                                membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                userTO.getMemberships().add(membership);\n                             }\n+                            AttrTO clone = SerializationUtils.clone(attr);\n+                            clone.setSchema(simpleAttrs[1]);\n+                            membership.getDerAttrs().add(clone);\n+                            membAttrs.add(attr);\n                         });\n-                        if (membership == null) {\n-                            membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n-                            userTO.getMemberships().add(membership);\n-                        }\n-                        AttrTO clone = SerializationUtils.clone(attr);\n-                        clone.setSchema(simpleAttrs[1]);\n-                        membership.getDerAttrs().add(clone);\n-                        membAttrs.add(attr);\n-                    }\n-                }\n                 userTO.getDerAttrs().removeAll(membAttrs);\n \n                 membAttrs.clear();\n-                for (AttrTO attr : userTO.getVirAttrs()) {\n-                    if (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR)) {\n-                        final String[] simpleAttrs = attr.getSchema().split(\n-                                SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n-                        MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n-                                new Predicate<MembershipTO>() {\n-\n-                            @Override\n-                            public boolean evaluate(final MembershipTO item) {\n-                                return simpleAttrs[0].equals(item.getGroupName());\n+                userTO.getVirAttrs().stream().\n+                        filter(attr -> (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR))).\n+                        forEachOrdered((attr) -> {\n+                            String[] simpleAttrs = attr.getSchema().split(\n+                                    SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n+                            MembershipTO membership = userTO.getMemberships().stream().\n+                                    filter(item -> simpleAttrs[0].equals(item.getGroupName())).\n+                                    findFirst().orElse(null);\n+                            if (membership == null) {\n+                                membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                userTO.getMemberships().add(membership);\n+\n                             }\n+                            AttrTO clone = SerializationUtils.clone(attr);\n+                            clone.setSchema(simpleAttrs[1]);\n+                            membership.getVirAttrs().add(clone);\n+                            membAttrs.add(attr);\n                         });\n-                        if (membership == null) {\n-                            membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n-                            userTO.getMemberships().add(membership);\n-\n-                        }\n-                        AttrTO clone = SerializationUtils.clone(attr);\n-                        clone.setSchema(simpleAttrs[1]);\n-                        membership.getVirAttrs().add(clone);\n-                        membAttrs.add(attr);\n-                    }\n-                }\n                 userTO.getVirAttrs().removeAll(membAttrs);\n \n                 // get old user object from session\n@@ -195,23 +181,19 @@ public boolean evaluate(final MembershipTO item) {\n \n     private void completeUserObject(final UserTO userTO, final UserTO selfTO) {\n         // memberships plain and virtual attrs\n-        for (final MembershipTO updatedTOMemb : userTO.getMemberships()) {\n-            MembershipTO oldTOMatchedMemb = IterableUtils.find(selfTO.getMemberships(), new Predicate<MembershipTO>() {\n-\n-                @Override\n-                public boolean evaluate(final MembershipTO oldTOMemb) {\n-                    return updatedTOMemb.getGroupKey().equals(oldTOMemb.getGroupKey());\n-                }\n-            });\n-            if (oldTOMatchedMemb != null) {\n+        userTO.getMemberships().forEach(updatedTOMemb -> {\n+            Optional<MembershipTO> oldTOMatchedMemb = selfTO.getMemberships().stream().\n+                    filter(oldTOMemb -> updatedTOMemb.getGroupKey().equals(oldTOMemb.getGroupKey())).\n+                    findFirst();\n+            if (oldTOMatchedMemb.isPresent()) {\n                 if (!updatedTOMemb.getPlainAttrs().isEmpty()) {\n-                    completeAttrs(updatedTOMemb.getPlainAttrs(), oldTOMatchedMemb.getPlainAttrs());\n+                    completeAttrs(updatedTOMemb.getPlainAttrs(), oldTOMatchedMemb.get().getPlainAttrs());\n                 }\n                 if (!updatedTOMemb.getVirAttrs().isEmpty()) {\n-                    completeAttrs(updatedTOMemb.getVirAttrs(), oldTOMatchedMemb.getVirAttrs());\n+                    completeAttrs(updatedTOMemb.getVirAttrs(), oldTOMatchedMemb.get().getVirAttrs());\n                 }\n             }\n-        }\n+        });\n         // plain attrs\n         completeAttrs(userTO.getPlainAttrs(), selfTO.getPlainAttrs());\n         // virtual attrs\n@@ -221,11 +203,11 @@ public boolean evaluate(final MembershipTO oldTOMemb) {\n     private void completeAttrs(final Set<AttrTO> userTOAttrs, final Set<AttrTO> selfTOAttrs) {\n         Map<String, AttrTO> userTOAttrsMap =\n                 EntityTOUtils.buildAttrMap(userTOAttrs);\n-        for (AttrTO selfTOAttr : selfTOAttrs) {\n-            if (!userTOAttrsMap.containsKey(selfTOAttr.getSchema())) {\n-                userTOAttrs.add(selfTOAttr);\n-            }\n-        }\n+        selfTOAttrs.stream().\n+                filter(selfTOAttr -> (!userTOAttrsMap.containsKey(selfTOAttr.getSchema()))).\n+                forEachOrdered(selfTOAttr -> {\n+                    userTOAttrs.add(selfTOAttr);\n+                });\n     }\n \n }"},{"sha":"c5d348b4bf43fd7b99989234f5eece71fcd1be57","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/util/UserRequestValidator.java","status":"modified","additions":10,"deletions":22,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidator.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.client.enduser.util;\n \n import java.util.Map;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.enduser.model.CustomAttribute;\n import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n import org.apache.syncope.common.lib.EntityTOUtils;\n@@ -57,33 +55,23 @@ private static boolean validateAttributes(final Map<String, AttrTO> attrMap,\n \n         return customAttrInfo == null\n                 || (customAttrInfo.getAttributes().isEmpty() && customAttrInfo.isShow())\n-                || IterableUtils.matchesAll(attrMap.entrySet(), new Predicate<Map.Entry<String, AttrTO>>() {\n-\n-                    @Override\n-                    public boolean evaluate(final Map.Entry<String, AttrTO> entry) {\n-                        String schemaKey = entry.getKey();\n-                        AttrTO attrTO = entry.getValue();\n-                        CustomAttribute customAttr = customAttrInfo.getAttributes().get(schemaKey);\n-                        boolean compliant = customAttr != null && (!checkDefaultValues || isValid(attrTO, customAttr));\n-                        if (!compliant) {\n-                            LOG.trace(\"Attribute [{}] or its values [{}] are not allowed by form customization rules\",\n-                                    attrTO.getSchema(), attrTO.getValues());\n-                        }\n-                        return compliant;\n+                || attrMap.entrySet().stream().allMatch(entry -> {\n+                    String schemaKey = entry.getKey();\n+                    AttrTO attrTO = entry.getValue();\n+                    CustomAttribute customAttr = customAttrInfo.getAttributes().get(schemaKey);\n+                    boolean compliant = customAttr != null && (!checkDefaultValues || isValid(attrTO, customAttr));\n+                    if (!compliant) {\n+                        LOG.trace(\"Attribute [{}] or its values [{}] are not allowed by form customization rules\",\n+                                attrTO.getSchema(), attrTO.getValues());\n                     }\n+                    return compliant;\n                 });\n \n     }\n \n     private static boolean isValid(final AttrTO attrTO, final CustomAttribute customAttribute) {\n         return customAttribute.isReadonly()\n-                ? IterableUtils.matchesAll(attrTO.getValues(), new Predicate<String>() {\n-\n-                    @Override\n-                    public boolean evaluate(final String object) {\n-                        return customAttribute.getDefaultValues().contains(object);\n-                    }\n-                })\n+                ? attrTO.getValues().stream().allMatch(value -> customAttribute.getDefaultValues().contains(value))\n                 : true;\n     }\n "},{"sha":"16d0e66b299a37dd09672c73cd0a3d73b43b5f4a","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ConnObjectTOListQuery.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOListQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOListQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOListQuery.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -68,9 +68,9 @@ public ConnObjectTOListQuery build() {\n \n     public Integer getSize() {\n         return size == null\n-                ? Integer.valueOf(25)\n+                ? 25\n                 : size > MAX_SIZE\n-                        ? Integer.valueOf(MAX_SIZE)\n+                        ? MAX_SIZE\n                         : size;\n     }\n "},{"sha":"3b26c39f5448b95bb45498a43eecfc55fef38b97","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/SchemaQuery.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -43,17 +43,17 @@ public Builder type(final SchemaType type) {\n \n         public Builder anyTypeClass(final String anyTypeClass) {\n             if (instance.getAnyTypeClasses() == null) {\n-                instance.setAnyTypeClasses(new ArrayList<String>());\n+                instance.setAnyTypeClasses(new ArrayList<>());\n             }\n             instance.getAnyTypeClasses().add(anyTypeClass);\n \n             return this;\n         }\n \n         public Builder anyTypeClasses(final Collection<String> anyTypeClasses) {\n-            for (String anyTypeClass : anyTypeClasses) {\n+            anyTypeClasses.forEach(anyTypeClass -> {\n                 anyTypeClass(anyTypeClass);\n-            }\n+            });\n             return this;\n         }\n "},{"sha":"a9100cc513402fa52c290add754ca6373342bba8","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -21,7 +21,6 @@\n import java.lang.reflect.Method;\n import java.util.List;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -72,8 +71,8 @@ public UserTO executeWorkflowTask(final UserTO userTO, final String taskId) {\n         userPatch.setKey(userTO.getKey());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                new WorkflowResult<Pair<UserPatch, Boolean>>(\n-                        new ImmutablePair<UserPatch, Boolean>(userPatch, null),\n+                new WorkflowResult<>(\n+                        new ImmutablePair<>(userPatch, null),\n                         updated.getPropByRes(), updated.getPerformedTasks()));\n \n         taskExecutor.execute(tasks, false);\n@@ -106,7 +105,7 @@ public UserTO submitForm(final WorkflowFormTO form) {\n                 && updated.getPropByRes() != null && !updated.getPropByRes().isEmpty()) {\n \n             List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                    new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                    new WorkflowResult<>(\n                             new ImmutablePair<>((UserPatch) updated.getResult(), Boolean.TRUE),\n                             updated.getPropByRes(),\n                             updated.getPerformedTasks()));"},{"sha":"85787aeff33b2b062a0e531acfcc97c8610cc0ea","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/cocoon/XSLTTransformer.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -111,9 +111,9 @@ private void load(final Source source, final String localCacheKey, final Map<Str\n             transformerFactory = TRAX_FACTORY;\n         } else {\n             transformerFactory = createNewSAXTransformerFactory();\n-            for (Map.Entry<String, Object> attribute : attributes.entrySet()) {\n+            attributes.entrySet().forEach(attribute -> {\n                 transformerFactory.setAttribute(attribute.getKey(), attribute.getValue());\n-            }\n+            });\n         }\n \n         try {\n@@ -132,7 +132,7 @@ public void setParameters(final Map<String, ? extends Object> parameters) {\n         if (parameters == null) {\n             this.parameters = null;\n         } else {\n-            this.parameters = new HashMap<String, Object>(parameters);\n+            this.parameters = new HashMap<>(parameters);\n         }\n     }\n \n@@ -151,14 +151,13 @@ protected void setSAXConsumer(final SAXConsumer consumer) {\n         if (this.parameters != null) {\n             final Transformer transformer = transformerHandler.getTransformer();\n \n-            for (Map.Entry<String, Object> entry : this.parameters.entrySet()) {\n+            this.parameters.entrySet().forEach(entry -> {\n                 final String name = entry.getKey();\n-\n                 // is valid XSLT parameter name\n                 if (XSLT_PARAMETER_NAME_PATTERN.matcher(name).matches()) {\n                     transformer.setParameter(name, entry.getValue());\n                 }\n-            }\n+            });\n         }\n \n         final SAXResult result = new SAXResult();"},{"sha":"6ca7df1ed9b7b3080f2abbb8ebf32c9eaa0ee762","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/EntitlementLoader.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementLoader.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -47,13 +47,9 @@ public void load() {\n         EntitlementsHolder.getInstance().init(StandardEntitlement.values());\n \n         for (Map.Entry<String, DataSource> entry : domainsHolder.getDomains().entrySet()) {\n-            AuthContextUtils.execWithAuthContext(entry.getKey(), new AuthContextUtils.Executable<Void>() {\n-\n-                @Override\n-                public Void exec() {\n-                    entitlementAccessor.addEntitlementsForAnyTypes();\n-                    return null;\n-                }\n+            AuthContextUtils.execWithAuthContext(entry.getKey(), () -> {\n+                entitlementAccessor.addEntitlementsForAnyTypes();\n+                return null;\n             });\n         }\n     }"},{"sha":"7c4145f4f16539943779e6dca24ce5863285d345","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java","status":"modified","additions":27,"deletions":30,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -72,11 +72,11 @@ public Integer getPriority() {\n     public void load() {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n \n-        for (Map.Entry<String, Appender> entry : ctx.getConfiguration().getAppenders().entrySet()) {\n-            if (entry.getValue() instanceof MemoryAppender) {\n-                memoryAppenders.put(entry.getKey(), (MemoryAppender) entry.getValue());\n-            }\n-        }\n+        ctx.getConfiguration().getAppenders().entrySet().stream().\n+                filter(entry -> (entry.getValue() instanceof MemoryAppender)).\n+                forEachOrdered(entry -> {\n+                    memoryAppenders.put(entry.getKey(), (MemoryAppender) entry.getValue());\n+                });\n \n         // Audit table and DataSource for each configured domain\n         ColumnConfig[] columnConfigs = {\n@@ -116,30 +116,25 @@ public void load() {\n             ctx.getConfiguration().addLogger(AuditLoggerName.getAuditLoggerName(entry.getKey()), logConf);\n \n             // SYNCOPE-1144 For each custom audit appender class add related appenders to log4j logger\n-            for (AuditAppender auditAppender : auditAppenders(entry.getKey())) {\n-                for (AuditLoggerName event : auditAppender.getEvents()) {\n-                    String domainAuditLoggerName =\n-                            AuditLoggerName.getAuditEventLoggerName(entry.getKey(), event.toLoggerName());\n-                    LoggerConfig eventLogConf = ctx.getConfiguration().getLoggerConfig(domainAuditLoggerName);\n-\n-                    if (LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName())) {\n-                        eventLogConf = new LoggerConfig(domainAuditLoggerName, null, false);\n-                    }\n-                    addAppenderToContext(ctx, auditAppender, eventLogConf);\n-                    eventLogConf.setLevel(Level.DEBUG);\n-                    if (LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName())) {\n-                        ctx.getConfiguration().addLogger(domainAuditLoggerName, eventLogConf);\n-                    }\n-                }\n-            }\n-\n-            AuthContextUtils.execWithAuthContext(entry.getKey(), new AuthContextUtils.Executable<Void>() {\n+            auditAppenders(entry.getKey()).forEach(auditAppender -> {\n+                auditAppender.getEvents().stream().\n+                        map(event -> AuditLoggerName.getAuditEventLoggerName(entry.getKey(), event.toLoggerName())).\n+                        forEachOrdered(domainAuditLoggerName -> {\n+                            LoggerConfig eventLogConf = ctx.getConfiguration().getLoggerConfig(domainAuditLoggerName);\n+                            if (LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName())) {\n+                                eventLogConf = new LoggerConfig(domainAuditLoggerName, null, false);\n+                            }\n+                            addAppenderToContext(ctx, auditAppender, eventLogConf);\n+                            eventLogConf.setLevel(Level.DEBUG);\n+                            if (LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName())) {\n+                                ctx.getConfiguration().addLogger(domainAuditLoggerName, eventLogConf);\n+                            }\n+                        });\n+            });\n \n-                @Override\n-                public Void exec() {\n-                    loggerAccessor.synchronizeLog4J(ctx);\n-                    return null;\n-                }\n+            AuthContextUtils.execWithAuthContext(entry.getKey(), () -> {\n+                loggerAccessor.synchronizeLog4J(ctx);\n+                return null;\n             });\n         }\n \n@@ -152,7 +147,7 @@ public Map<String, MemoryAppender> getMemoryAppenders() {\n \n     public List<AuditAppender> auditAppenders(final String domain) throws BeansException {\n         List<AuditAppender> auditAppenders = new ArrayList<>();\n-        for (Class<?> clazz : implementationLookup.getAuditAppenderClasses()) {\n+        implementationLookup.getAuditAppenderClasses().stream().map(clazz -> {\n             AuditAppender auditAppender;\n             if (ApplicationContextProvider.getBeanFactory().containsSingleton(clazz.getName())) {\n                 auditAppender = (AuditAppender) ApplicationContextProvider.getBeanFactory().\n@@ -163,8 +158,10 @@ public List<AuditAppender> auditAppenders(final String domain) throws BeansExcep\n                 auditAppender.setDomainName(domain);\n                 auditAppender.init();\n             }\n+            return auditAppender;\n+        }).forEachOrdered(auditAppender -> {\n             auditAppenders.add(auditAppender);\n-        }\n+        });\n         return auditAppenders;\n     }\n "},{"sha":"3e1b1c91c8a7efb8103759386e94cb4bdc7ff1f2","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LogicInitializer.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLogicInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLogicInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLogicInitializer.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n@@ -54,21 +53,17 @@ public void afterPropertiesSet() throws Exception {\n         Map<String, SyncopeLoader> loaderMap = beanFactory.getBeansOfType(SyncopeLoader.class);\n \n         List<SyncopeLoader> loaders = new ArrayList<>(loaderMap.values());\n-        Collections.sort(loaders, new Comparator<SyncopeLoader>() {\n-\n-            @Override\n-            public int compare(final SyncopeLoader o1, final SyncopeLoader o2) {\n-                return o1.getPriority().compareTo(o2.getPriority());\n-            }\n-        });\n+        Collections.sort(loaders, (o1, o2) -> o1.getPriority().compareTo(o2.getPriority()));\n \n         ApplicationContextProvider.setBeanFactory(beanFactory);\n \n         LOG.debug(\"Starting initialization...\");\n-        for (SyncopeLoader loader : loaders) {\n+        loaders.stream().map(loader -> {\n             LOG.debug(\"Invoking {} with priority {}\", AopUtils.getTargetClass(loader).getName(), loader.getPriority());\n+            return loader;\n+        }).forEachOrdered(loader -> {\n             loader.load();\n-        }\n+        });\n         LOG.debug(\"Initialization completed\");\n     }\n }"},{"sha":"2af6f25317e3cc8e5345e251e7a19d61ae5dc86b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -68,6 +68,7 @@ private AttributeCond createAttributeCond(final String schema) {\n         return attributeCond;\n     }\n \n+    @SuppressWarnings(\"ConvertToStringSwitch\")\n     private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n         String name = getRealPropertyName(sc.getStatement().getProperty());\n         Optional<SpecialAttr> specialAttrName = SpecialAttr.fromString(name);"},{"sha":"6d810eab5718d40fc9e5631d056a830c43404d64","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/EntitlementsHolder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FEntitlementsHolder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FEntitlementsHolder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FEntitlementsHolder.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -40,7 +40,7 @@ public static EntitlementsHolder getInstance() {\n         return INSTANCE;\n     }\n \n-    private final Set<String> values = Collections.synchronizedSet(new HashSet<String>());\n+    private final Set<String> values = Collections.synchronizedSet(new HashSet<>());\n \n     private EntitlementsHolder() {\n         // private constructor for singleton"},{"sha":"79fbd23799af828f1404285d3fe0c40350a56669","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AsyncConnectorFacade.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -28,7 +28,6 @@\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n-import org.identityconnectors.framework.common.objects.ResultsHandler;\n import org.identityconnectors.framework.common.objects.SyncToken;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n@@ -103,14 +102,10 @@ public Future<ConnectorObject> getObject(\n             final Attribute connObjectKey,\n             final OperationOptions options) {\n \n-        final ConnectorObject[] objects = new ConnectorObject[1];\n-        connector.search(objectClass, FilterBuilder.equalTo(connObjectKey), new ResultsHandler() {\n-\n-            @Override\n-            public boolean handle(final ConnectorObject connectorObject) {\n-                objects[0] = connectorObject;\n-                return false;\n-            }\n+        ConnectorObject[] objects = new ConnectorObject[1];\n+        connector.search(objectClass, FilterBuilder.equalTo(connObjectKey), connectorObject -> {\n+            objects[0] = connectorObject;\n+            return false;\n         }, options);\n \n         return new AsyncResult<>(objects[0]);"},{"sha":"43e54aff2bef0a6b3a3a5edea8b85de1aefd1784","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnIdBundleManagerImpl.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -63,8 +63,7 @@ public class ConnIdBundleManagerImpl implements ConnIdBundleManager {\n     /**\n      * ConnectorInfoManager instances.\n      */\n-    private final Map<URI, ConnectorInfoManager> connInfoManagers =\n-            Collections.synchronizedMap(new LinkedHashMap<URI, ConnectorInfoManager>());\n+    private final Map<URI, ConnectorInfoManager> connInfoManagers = Collections.synchronizedMap(new LinkedHashMap<>());\n \n     @Override\n     public List<URI> getLocations() {\n@@ -195,7 +194,7 @@ public Map<URI, ConnectorInfoManager> getConnManagers() {\n         init();\n \n         if (connInfoManagers.isEmpty()) {\n-            for (URI location : locations) {\n+            locations.forEach(location -> {\n                 try {\n                     if (\"file\".equals(location.getScheme())) {\n                         LOG.debug(\"Local initialization: {}\", location);\n@@ -209,16 +208,18 @@ public Map<URI, ConnectorInfoManager> getConnManagers() {\n                 } catch (Exception e) {\n                     LOG.error(\"Could not process {}\", location, e);\n                 }\n-            }\n+            });\n         }\n \n         if (LOG.isDebugEnabled()) {\n-            for (Map.Entry<URI, ConnectorInfoManager> entry : connInfoManagers.entrySet()) {\n+            connInfoManagers.entrySet().stream().map(entry -> {\n                 LOG.debug(\"Connector bundles found at {}\", entry.getKey());\n-                for (ConnectorInfo connInfo : entry.getValue().getConnectorInfos()) {\n+                return entry;\n+            }).forEachOrdered(entry -> {\n+                entry.getValue().getConnectorInfos().forEach(connInfo -> {\n                     LOG.debug(\"\\t{}\", connInfo.getConnectorDisplayName());\n-                }\n-            }\n+                });\n+            });\n         }\n \n         return connInfoManagers;\n@@ -277,12 +278,12 @@ public ConfigurationProperties getConfigurationProperties(final ConnectorInfo in\n         }\n \n         if (LOG.isDebugEnabled()) {\n-            for (String propName : properties.getPropertyNames()) {\n+            properties.getPropertyNames().forEach(propName -> {\n                 LOG.debug(\"Property Name: {}\"\n                         + \"\\nProperty Type: {}\",\n                         properties.getProperty(propName).getName(),\n                         properties.getProperty(propName).getType());\n-            }\n+            });\n         }\n \n         return properties;"},{"sha":"10f2e033d48a27912b9c6e87412cb50a5b8a6b50","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -318,19 +318,13 @@ public void filteredReconciliation(\n             final SyncResultsHandler handler,\n             final OperationOptions options) {\n \n-        search(objectClass, filterBuilder == null ? null : filterBuilder.build(), new ResultsHandler() {\n-\n-            @Transactional\n-            @Override\n-            public boolean handle(final ConnectorObject obj) {\n-                return handler.handle(new SyncDeltaBuilder().\n-                        setObject(obj).\n-                        setUid(obj.getUid()).\n+        search(objectClass, filterBuilder == null ? null : filterBuilder.build(), object\n+                -> handler.handle(new SyncDeltaBuilder().\n+                        setObject(object).\n+                        setUid(object.getUid()).\n                         setDeltaType(SyncDeltaType.CREATE_OR_UPDATE).\n                         setToken(new SyncToken(\"\")).\n-                        build());\n-            }\n-        }, options);\n+                        build()), options);\n     }\n \n     @Override"},{"sha":"468f88e3cca02a286dcb6a6bb0547b5898ca065f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -286,7 +286,7 @@ public void internalSuspend(final String key) {\n             userPatch.setKey(updated.getLeft().getResult());\n \n             List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                    new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                    new WorkflowResult<>(\n                             Pair.of(userPatch, Boolean.FALSE),\n                             updated.getLeft().getPropByRes(), updated.getLeft().getPerformedTasks()));\n             taskExecutor.execute(tasks, false);"},{"sha":"6547284cca458da17a0b095e660874e12e603a67","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -86,17 +86,13 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n \n         try {\n             AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),\n-                    new AuthContextUtils.Executable<Void>() {\n-\n-                @Override\n-                public Void exec() {\n-                    notificationManager.createTasks(\n-                            (AfterHandlingEvent) context.getMergedJobDataMap().get(AfterHandlingEvent.JOBMAP_KEY));\n-                    auditManager.audit(\n-                            (AfterHandlingEvent) context.getMergedJobDataMap().get(AfterHandlingEvent.JOBMAP_KEY));\n-                    return null;\n-                }\n-            });\n+                    () -> {\n+                        notificationManager.createTasks(\n+                                (AfterHandlingEvent) context.getMergedJobDataMap().get(AfterHandlingEvent.JOBMAP_KEY));\n+                        auditManager.audit(\n+                                (AfterHandlingEvent) context.getMergedJobDataMap().get(AfterHandlingEvent.JOBMAP_KEY));\n+                        return null;\n+                    });\n         } catch (RuntimeException e) {\n             throw new JobExecutionException(\"While handling notification / audit events\", e);\n         }"},{"sha":"23b21be3f3aa153a671c11dcf94a32329705b627","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SetUMembershipsJob.java","status":"modified","additions":26,"deletions":28,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -51,37 +51,35 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n \n         try {\n             AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),\n-                    new AuthContextUtils.Executable<Void>() {\n+                    () -> {\n+                        @SuppressWarnings(\"unchecked\")\n+                        Map<String, Set<String>> memberships =\n+                        (Map<String, Set<String>>) context.getMergedJobDataMap().get(MEMBERSHIPS_KEY);\n \n-                @Override\n-                public Void exec() {\n-                    @SuppressWarnings(\"unchecked\")\n-                    Map<String, Set<String>> memberships =\n-                            (Map<String, Set<String>>) context.getMergedJobDataMap().get(MEMBERSHIPS_KEY);\n+                        LOG.debug(\"About to set memberships (User -> Groups) {}\", memberships);\n \n-                    LOG.debug(\"About to set memberships (User -> Groups) {}\", memberships);\n+                        memberships.entrySet().stream().map(membership -> {\n+                            UserPatch userPatch = new UserPatch();\n+                            userPatch.setKey(membership.getKey());\n+                            membership.getValue().forEach(groupKey -> {\n+                                userPatch.getMemberships().add(\n+                                        new MembershipPatch.Builder().\n+                                                operation(PatchOperation.ADD_REPLACE).\n+                                                group(groupKey).\n+                                                build());\n+                            });\n+                            return userPatch;\n+                        }).filter(userPatch -> (!userPatch.isEmpty())).\n+                                map((userPatch) -> {\n+                                    LOG.debug(\"About to update User {}\", userPatch.getKey());\n+                                    return userPatch;\n+                                }).\n+                                forEachOrdered((userPatch) -> {\n+                                    userProvisioningManager.update(userPatch, true);\n+                                });\n \n-                    for (Map.Entry<String, Set<String>> membership : memberships.entrySet()) {\n-                        UserPatch userPatch = new UserPatch();\n-                        userPatch.setKey(membership.getKey());\n-\n-                        for (String groupKey : membership.getValue()) {\n-                            userPatch.getMemberships().add(\n-                                    new MembershipPatch.Builder().\n-                                    operation(PatchOperation.ADD_REPLACE).\n-                                    group(groupKey).\n-                                    build());\n-                        }\n-\n-                        if (!userPatch.isEmpty()) {\n-                            LOG.debug(\"About to update User {}\", userPatch.getKey());\n-                            userProvisioningManager.update(userPatch, true);\n-                        }\n-                    }\n-\n-                    return null;\n-                }\n-            });\n+                        return null;\n+                    });\n         } catch (RuntimeException e) {\n             LOG.error(\"While setting memberships\", e);\n             throw new JobExecutionException(\"While executing memberships\", e);"},{"sha":"1b320b7b880d51a1b80c7f593ac94324f4619b06","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -67,27 +67,23 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n \n         try {\n             AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),\n-                    new AuthContextUtils.Executable<Void>() {\n+                    () -> {\n+                        try {\n+                            Class<?> delegateClass =\n+                            ClassUtils.getClass(context.getMergedJobDataMap().getString(DELEGATE_CLASS_KEY));\n \n-                @Override\n-                public Void exec() {\n-                    try {\n-                        Class<?> delegateClass =\n-                                ClassUtils.getClass(context.getMergedJobDataMap().getString(DELEGATE_CLASS_KEY));\n+                            ((SchedTaskJobDelegate) ApplicationContextProvider.getBeanFactory().\n+                                    createBean(delegateClass, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false)).\n+                                    execute(taskKey,\n+                                            context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY),\n+                                            context);\n+                        } catch (Exception e) {\n+                            LOG.error(\"While executing task {}\", taskKey, e);\n+                            throw new RuntimeException(e);\n+                        }\n \n-                        ((SchedTaskJobDelegate) ApplicationContextProvider.getBeanFactory().\n-                                createBean(delegateClass, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false)).\n-                                execute(taskKey,\n-                                        context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY),\n-                                        context);\n-                    } catch (Exception e) {\n-                        LOG.error(\"While executing task {}\", taskKey, e);\n-                        throw new RuntimeException(e);\n-                    }\n-\n-                    return null;\n-                }\n-            });\n+                        return null;\n+                    });\n         } catch (RuntimeException e) {\n             LOG.error(\"While executing task {}\", taskKey, e);\n             throw new JobExecutionException(\"While executing task \" + taskKey, e);"},{"sha":"13d45b0f9380247ab4fc6410be387f2f49cc3328","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/NotificationJob.java","status":"modified","additions":8,"deletions":12,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -61,19 +61,15 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n \n         for (String domain : domainsHolder.getDomains().keySet()) {\n             try {\n-                AuthContextUtils.execWithAuthContext(domain, new AuthContextUtils.Executable<Void>() {\n-\n-                    @Override\n-                    public Void exec() {\n-                        try {\n-                            delegate.execute();\n-                        } catch (Exception e) {\n-                            LOG.error(\"While sending out notifications\", e);\n-                            throw new RuntimeException(e);\n-                        }\n-\n-                        return null;\n+                AuthContextUtils.execWithAuthContext(domain, () -> {\n+                    try {\n+                        delegate.execute();\n+                    } catch (Exception e) {\n+                        LOG.error(\"While sending out notifications\", e);\n+                        throw new RuntimeException(e);\n                     }\n+\n+                    return null;\n                 });\n             } catch (RuntimeException e) {\n                 LOG.error(\"While sending out notifications\", e);"},{"sha":"b05c507debaf7d79cce8c83d435565aa8374fcb3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReportJob.java","status":"modified","additions":9,"deletions":13,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJob.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -57,20 +57,16 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n \n         try {\n             AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),\n-                    new AuthContextUtils.Executable<Void>() {\n+                    () -> {\n+                        try {\n+                            delegate.execute(reportKey);\n+                        } catch (Exception e) {\n+                            LOG.error(\"While executing report {}\", reportKey, e);\n+                            throw new RuntimeException(e);\n+                        }\n \n-                @Override\n-                public Void exec() {\n-                    try {\n-                        delegate.execute(reportKey);\n-                    } catch (Exception e) {\n-                        LOG.error(\"While executing report {}\", reportKey, e);\n-                        throw new RuntimeException(e);\n-                    }\n-\n-                    return null;\n-                }\n-            });\n+                        return null;\n+                    });\n         } catch (RuntimeException e) {\n             LOG.error(\"While executing report {}\", reportKey, e);\n             throw new JobExecutionException(\"While executing report \" + reportKey, e);"},{"sha":"3f4a488ccf0cdb419c5583cb505e2be5ef3936f6","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationProvider.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -41,16 +41,11 @@ public class JWTAuthenticationProvider implements AuthenticationProvider {\n     public Authentication authenticate(final Authentication authentication) throws AuthenticationException {\n         final JWTAuthentication jwtAuthentication = (JWTAuthentication) authentication;\n \n-        AuthContextUtils.execWithAuthContext(\n-                jwtAuthentication.getDetails().getDomain(), new AuthContextUtils.Executable<Void>() {\n-\n-            @Override\n-            public Void exec() {\n-                Pair<String, Set<SyncopeGrantedAuthority>> authenticated = dataAccessor.authenticate(jwtAuthentication);\n-                jwtAuthentication.setUsername(authenticated.getLeft());\n-                jwtAuthentication.getAuthorities().addAll(authenticated.getRight());\n-                return null;\n-            }\n+        AuthContextUtils.execWithAuthContext(jwtAuthentication.getDetails().getDomain(), () -> {\n+            Pair<String, Set<SyncopeGrantedAuthority>> authenticated = dataAccessor.authenticate(jwtAuthentication);\n+            jwtAuthentication.setUsername(authenticated.getLeft());\n+            jwtAuthentication.getAuthorities().addAll(authenticated.getRight());\n+            return null;\n         });\n \n         JwtClaims claims = jwtAuthentication.getClaims();"},{"sha":"b76de110715dd297356f73936c6f01582cdf0db2","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SecureRandomUtils.java","status":"modified","additions":7,"deletions":18,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -18,21 +18,14 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n-import org.apache.commons.text.CharacterPredicate;\n import org.apache.commons.text.RandomStringGenerator;\n import org.apache.syncope.common.lib.SecureTextRandomProvider;\n \n public final class SecureRandomUtils {\n \n     private static final RandomStringGenerator FOR_PASSWORD = new RandomStringGenerator.Builder().\n             usingRandom(new SecureTextRandomProvider()).\n-            filteredBy(new CharacterPredicate() {\n-\n-                @Override\n-                public boolean test(final int codePoint) {\n-                    return (codePoint >= 'a' && codePoint <= 'z') || (codePoint >= '0' && codePoint <= '9');\n-                }\n-            }).\n+            filteredBy(codePoint -> (codePoint >= 'a' && codePoint <= 'z') || (codePoint >= '0' && codePoint <= '9')).\n             build();\n \n     private static final RandomStringGenerator FOR_LETTERS = new RandomStringGenerator.Builder().\n@@ -60,17 +53,13 @@ public static String generateRandomNumber() {\n     public static String generateRandomSpecialCharacter(final char[] characters) {\n         return new RandomStringGenerator.Builder().\n                 usingRandom(new SecureTextRandomProvider()).\n-                filteredBy(new CharacterPredicate() {\n-\n-                    @Override\n-                    public boolean test(final int codePoint) {\n-                        boolean found = false;\n-                        for (int i = 0; i < characters.length && !found; i++) {\n-                            found = codePoint == Character.codePointAt(characters, i);\n-                        }\n-\n-                        return found;\n+                filteredBy(codePoint -> {\n+                    boolean found = false;\n+                    for (int i = 0; i < characters.length && !found; i++) {\n+                        found = codePoint == Character.codePointAt(characters, i);\n                     }\n+\n+                    return found;\n                 }).build().generate(1);\n     }\n "},{"sha":"7b8d0c8af07b809c7dad296b579b35ddea74ab87","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/UsernamePasswordAuthenticationProvider.java","status":"modified","additions":34,"deletions":64,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -24,7 +24,6 @@\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.core.spring.security.AuthContextUtils.Executable;\n import org.apache.syncope.core.persistence.api.entity.Domain;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n@@ -110,41 +109,26 @@ public Authentication authenticate(final Authentication authentication) {\n                         adminPassword);\n             } else {\n                 final String domainToFind = domainKey;\n-                authenticated = AuthContextUtils.execWithAuthContext(\n-                        SyncopeConstants.MASTER_DOMAIN, new Executable<Boolean>() {\n-\n-                    @Override\n-                    public Boolean exec() {\n-                        Domain domain = dataAccessor.findDomain(domainToFind);\n-\n-                        return ENCRYPTOR.verify(\n-                                authentication.getCredentials().toString(),\n-                                domain.getAdminCipherAlgorithm(),\n-                                domain.getAdminPwd());\n-                    }\n+                authenticated = AuthContextUtils.execWithAuthContext(SyncopeConstants.MASTER_DOMAIN, () -> {\n+                    Domain domain = dataAccessor.findDomain(domainToFind);\n+\n+                    return ENCRYPTOR.verify(\n+                            authentication.getCredentials().toString(),\n+                            domain.getAdminCipherAlgorithm(),\n+                            domain.getAdminPwd());\n                 });\n             }\n         } else {\n             final Pair<User, Boolean> authResult =\n-                    AuthContextUtils.execWithAuthContext(domainKey, new Executable<Pair<User, Boolean>>() {\n-\n-                        @Override\n-                        public Pair<User, Boolean> exec() {\n-                            return dataAccessor.authenticate(authentication);\n-                        }\n-                    });\n+                    AuthContextUtils.execWithAuthContext(domainKey, () -> dataAccessor.authenticate(authentication));\n             authenticated = authResult.getValue();\n             if (authResult.getLeft() != null && authResult.getRight() != null) {\n                 username[0] = authResult.getLeft().getUsername();\n \n                 if (!authResult.getRight()) {\n-                    AuthContextUtils.execWithAuthContext(domainKey, new Executable<Void>() {\n-\n-                        @Override\n-                        public Void exec() {\n-                            provisioningManager.internalSuspend(authResult.getLeft().getKey());\n-                            return null;\n-                        }\n+                    AuthContextUtils.execWithAuthContext(domainKey, () -> {\n+                        provisioningManager.internalSuspend(authResult.getLeft().getKey());\n+                        return null;\n                     });\n                 }\n             }\n@@ -156,48 +140,34 @@ public Void exec() {\n         final boolean isAuthenticated = authenticated != null && authenticated;\n         UsernamePasswordAuthenticationToken token;\n         if (isAuthenticated) {\n-            token = AuthContextUtils.execWithAuthContext(\n-                    domainKey, new Executable<UsernamePasswordAuthenticationToken>() {\n-\n-                @Override\n-                public UsernamePasswordAuthenticationToken exec() {\n-                    UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(\n-                            username[0],\n-                            null,\n-                            dataAccessor.getAuthorities(username[0]));\n-                    token.setDetails(authentication.getDetails());\n-\n-                    dataAccessor.audit(AuditElements.EventCategoryType.LOGIC,\n-                            AuditElements.AUTHENTICATION_CATEGORY,\n-                            null,\n-                            AuditElements.LOGIN_EVENT,\n-                            Result.SUCCESS,\n-                            null,\n-                            isAuthenticated,\n-                            authentication,\n-                            \"Successfully authenticated, with entitlements: \" + token.getAuthorities());\n-                    return token;\n-                }\n+            token = AuthContextUtils.execWithAuthContext(domainKey, () -> {\n+                UsernamePasswordAuthenticationToken token1 =\n+                        new UsernamePasswordAuthenticationToken(\n+                                username[0],\n+                                null,\n+                                dataAccessor.getAuthorities(username[0]));\n+                token1.setDetails(authentication.getDetails());\n+                dataAccessor.audit(AuditElements.EventCategoryType.LOGIC,\n+                        AuditElements.AUTHENTICATION_CATEGORY, null,\n+                        AuditElements.LOGIN_EVENT, Result.SUCCESS, null, isAuthenticated, authentication,\n+                        \"Successfully authenticated, with entitlements: \" + token1.getAuthorities());\n+                return token1;\n             });\n \n             LOG.debug(\"User {} successfully authenticated, with entitlements {}\",\n                     username[0], token.getAuthorities());\n         } else {\n-            AuthContextUtils.execWithAuthContext(domainKey, new Executable<Void>() {\n-\n-                @Override\n-                public Void exec() {\n-                    dataAccessor.audit(AuditElements.EventCategoryType.LOGIC,\n-                            AuditElements.AUTHENTICATION_CATEGORY,\n-                            null,\n-                            AuditElements.LOGIN_EVENT,\n-                            Result.FAILURE,\n-                            null,\n-                            isAuthenticated,\n-                            authentication,\n-                            \"User \" + username[0] + \" not authenticated\");\n-                    return null;\n-                }\n+            AuthContextUtils.execWithAuthContext(domainKey, () -> {\n+                dataAccessor.audit(AuditElements.EventCategoryType.LOGIC,\n+                        AuditElements.AUTHENTICATION_CATEGORY,\n+                        null,\n+                        AuditElements.LOGIN_EVENT,\n+                        Result.FAILURE,\n+                        null,\n+                        isAuthenticated,\n+                        authentication,\n+                        \"User \" + username[0] + \" not authenticated\");\n+                return null;\n             });\n \n             LOG.debug(\"User {} not authenticated\", username[0]);"},{"sha":"007dda86473b7591fe8db26e5259957818635bec","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/panels/CamelRoutesDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -101,7 +101,7 @@ protected Collection<ActionLink.ActionType> getBulkActions() {\n     @Override\n     protected List<IColumn<CamelRouteTO, String>> getColumns() {\n         final List<IColumn<CamelRouteTO, String>> columns = new ArrayList<>();\n-        columns.add(new PropertyColumn<CamelRouteTO, String>(new ResourceModel(\"key\"), \"key\", \"key\"));\n+        columns.add(new PropertyColumn<>(new ResourceModel(\"key\"), \"key\", \"key\"));\n         return columns;\n     }\n "},{"sha":"ce1e461156798416ef66fb91d76108a9811d02e6","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/widgets/CamelMetricsWidget.java","status":"modified","additions":5,"deletions":17,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -24,8 +24,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.annotations.ExtWidget;\n import org.apache.syncope.client.console.rest.CamelRoutesRestClient;\n import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n@@ -94,22 +93,11 @@ private Bar build(final List<CamelMetrics.MeanRate> meanRates) {\n         bar.getOptions().setResponsive(true);\n         bar.getOptions().setMaintainAspectRatio(true);\n \n-        bar.getData().setLabels(CollectionUtils.collect(meanRates, new Transformer<CamelMetrics.MeanRate, String>() {\n+        bar.getData().setLabels(\n+                meanRates.stream().map(input -> input.getRouteId()).collect(Collectors.toList()));\n \n-            @Override\n-            public String transform(final CamelMetrics.MeanRate input) {\n-                return input.getRouteId();\n-            }\n-        }, new ArrayList<String>()));\n-\n-        BarDataSet dataset = new BarDataSet(CollectionUtils.collect(meanRates,\n-                new Transformer<CamelMetrics.MeanRate, Double>() {\n-\n-            @Override\n-            public Double transform(final CamelMetrics.MeanRate input) {\n-                return input.getValue();\n-            }\n-        }, new ArrayList<Double>()));\n+        BarDataSet dataset = new BarDataSet(\n+                meanRates.stream().map(input -> input.getValue()).collect(Collectors.toList()));\n         dataset.setFillColor(\"blue\");\n         bar.getData().setDatasets(Collections.singletonList(dataset));\n "},{"sha":"0969e1322ade9f97214830c8c54c5869041195c6","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/CamelRouteLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -19,14 +19,12 @@\n package org.apache.syncope.core.logic;\n \n import com.codahale.metrics.MetricRegistry;\n-import com.codahale.metrics.Timer;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n import org.apache.camel.component.metrics.routepolicy.MetricsRegistryService;\n-import java.util.Map;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.CamelMetrics;\n@@ -61,9 +59,9 @@ public class CamelRouteLogic extends AbstractTransactionalLogic<CamelRouteTO> {\n     public List<CamelRouteTO> list(final AnyTypeKind anyTypeKind) {\n         List<CamelRouteTO> routes = new ArrayList<>();\n \n-        for (CamelRoute route : routeDAO.find(anyTypeKind)) {\n+        routeDAO.find(anyTypeKind).forEach(route -> {\n             routes.add(binder.getRouteTO(route));\n-        }\n+        });\n         return routes;\n     }\n \n@@ -114,12 +112,14 @@ public CamelMetrics metrics() {\n             LOG.warn(\"Camel metrics not available\");\n         } else {\n             MetricRegistry registry = registryService.getMetricsRegistry();\n-            for (Map.Entry<String, Timer> entry : registry.getTimers().entrySet()) {\n+            registry.getTimers().entrySet().stream().map(entry -> {\n                 CamelMetrics.MeanRate meanRate = new CamelMetrics.MeanRate();\n                 meanRate.setRouteId(StringUtils.substringBetween(entry.getKey(), \".\", \".\"));\n                 meanRate.setValue(entry.getValue().getMeanRate());\n+                return meanRate;\n+            }).forEachOrdered(meanRate -> {\n                 metrics.getResponseMeanRates().add(meanRate);\n-            }\n+            });\n \n             Collections.sort(metrics.getResponseMeanRates(),\n                     (o1, o2) -> Collections.reverseOrder(Comparator.<Double>naturalOrder())."},{"sha":"781362a27caa0d9be8496b512321d959c1d39fc1","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -345,9 +345,9 @@ public Pair<String, List<PropagationStatus>> update(\n             result.setStatus(ProvisioningReport.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to pull status anyway (if configured)\\n\" + ex.getMessage());\n \n-            WorkflowResult<Pair<UserPatch, Boolean>> updated = new WorkflowResult<Pair<UserPatch, Boolean>>(\n+            WorkflowResult<Pair<UserPatch, Boolean>> updated = new WorkflowResult<>(\n                     new ImmutablePair<>(userPatch, false), new PropagationByResource(),\n-                    new HashSet<String>());\n+                    new HashSet<>());\n             sendMessage(\"direct:userInPull\", updated, props);\n             exchange = pollingConsumer.receive();\n         }"},{"sha":"1f541df0b5573ec42ba1dac8b2011ab35ebdc5a2","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -48,7 +48,7 @@ public void process(final Exchange exchange) throws Exception {\n                 userPatch.setKey(updated.getKey().getResult());\n \n                 List<PropagationTask> tasks = getPropagationManager().getUserUpdateTasks(\n-                        new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                        new WorkflowResult<>(\n                                 new ImmutablePair<>(userPatch, Boolean.FALSE),\n                                 updated.getKey().getPropByRes(), updated.getKey().getPerformedTasks()));\n                 getPropagationTaskExecutor().execute(tasks, false);"},{"sha":"857948be92c5adef03c80ea81dce9870faea32ee","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/panels/ImportMetadata.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImportMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImportMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImportMetadata.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -60,7 +60,7 @@ public ImportMetadata(final String id, final WebMarkupContainer container, final\n         config.showRemove(false);\n         config.showPreview(false);\n         final BootstrapFileInputField fileUpload =\n-                new BootstrapFileInputField(\"fileUpload\", new ListModel<>(new ArrayList<FileUpload>()), config);\n+                new BootstrapFileInputField(\"fileUpload\", new ListModel<>(new ArrayList<>()), config);\n         fileUpload.setOutputMarkupId(true);\n         fileUpload.add(new AjaxFormSubmitBehavior(Constants.ON_CHANGE) {\n "},{"sha":"45bdef3cbfe4189a8fd28510707ec38fde156089","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -187,14 +187,14 @@ protected Collection<ActionLink.ActionType> getBulkActions() {\n     protected List<IColumn<SAML2IdPTO, String>> getColumns() {\n         List<IColumn<SAML2IdPTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<SAML2IdPTO>(new ResourceModel(\"key\"), \"key\", \"key\"));\n-        columns.add(new PropertyColumn<SAML2IdPTO, String>(new ResourceModel(\"name\"), \"name\", \"name\"));\n-        columns.add(new PropertyColumn<SAML2IdPTO, String>(new ResourceModel(\"entityID\"), \"entityID\", \"entityID\"));\n-        columns.add(new BooleanPropertyColumn<SAML2IdPTO>(\n+        columns.add(new KeyPropertyColumn<>(new ResourceModel(\"key\"), \"key\", \"key\"));\n+        columns.add(new PropertyColumn<>(new ResourceModel(\"name\"), \"name\", \"name\"));\n+        columns.add(new PropertyColumn<>(new ResourceModel(\"entityID\"), \"entityID\", \"entityID\"));\n+        columns.add(new BooleanPropertyColumn<>(\n                 new ResourceModel(\"useDeflateEncoding\"), \"useDeflateEncoding\", \"useDeflateEncoding\"));\n-        columns.add(new PropertyColumn<SAML2IdPTO, String>(\n+        columns.add(new PropertyColumn<>(\n                 new ResourceModel(\"bindingType\"), \"bindingType\", \"bindingType\"));\n-        columns.add(new BooleanPropertyColumn<SAML2IdPTO>(\n+        columns.add(new BooleanPropertyColumn<>(\n                 new ResourceModel(\"logoutSupported\"), \"logoutSupported\", \"logoutSupported\"));\n \n         return columns;"},{"sha":"8bd7a1e7d14aa7b36946360e381f8169b2b176e8","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/panels/SAMLSSOLoginFormPanel.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAMLSSOLoginFormPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAMLSSOLoginFormPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAMLSSOLoginFormPanel.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -21,8 +21,6 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n import java.util.List;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n@@ -71,13 +69,8 @@ public String getIdValue(final SAML2IdPTO object, final int index) {\n \n             @Override\n             public SAML2IdPTO getObject(final String id, final IModel<? extends List<? extends SAML2IdPTO>> choices) {\n-                return IterableUtils.find(choices.getObject(), new Predicate<SAML2IdPTO>() {\n-\n-                    @Override\n-                    public boolean evaluate(final SAML2IdPTO object) {\n-                        return object.getEntityID().equals(id);\n-                    }\n-                });\n+                return choices.getObject().stream().\n+                        filter(idp -> idp.getEntityID().equals(id)).findFirst().orElse(null);\n             }\n         });\n         idps.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {"},{"sha":"5cafb9b15c200a9cae032c751ed26997ae7b08fb","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java","status":"modified","additions":6,"deletions":14,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -22,8 +22,6 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.panels.SAML2IdPsDirectoryPanel;\n import org.apache.syncope.client.console.rest.SAML2IdPsRestClient;\n@@ -103,25 +101,25 @@ private final class IdP extends WizardStep {\n             List<Component> fields = new ArrayList<>();\n \n             FieldPanel<String> name = new AjaxTextFieldPanel(\n-                    \"field\", \"name\", new PropertyModel<String>(idpTO, \"name\"), false);\n+                    \"field\", \"name\", new PropertyModel<>(idpTO, \"name\"), false);\n             name.setRequired(true);\n             fields.add(name);\n \n             AjaxCheckBoxPanel createUnmatching = new AjaxCheckBoxPanel(\n-                    \"field\", \"createUnmatching\", new PropertyModel<Boolean>(idpTO, \"createUnmatching\"), false);\n+                    \"field\", \"createUnmatching\", new PropertyModel<>(idpTO, \"createUnmatching\"), false);\n             fields.add(createUnmatching);\n \n             AjaxCheckBoxPanel updateMatching = new AjaxCheckBoxPanel(\n-                    \"field\", \"updateMatching\", new PropertyModel<Boolean>(idpTO, \"updateMatching\"), false);\n+                    \"field\", \"updateMatching\", new PropertyModel<>(idpTO, \"updateMatching\"), false);\n             fields.add(updateMatching);\n \n             AjaxCheckBoxPanel useDeflateEncoding = new AjaxCheckBoxPanel(\n-                    \"field\", \"useDeflateEncoding\", new PropertyModel<Boolean>(idpTO, \"useDeflateEncoding\"), false);\n+                    \"field\", \"useDeflateEncoding\", new PropertyModel<>(idpTO, \"useDeflateEncoding\"), false);\n             fields.add(useDeflateEncoding);\n \n             AjaxDropDownChoicePanel<SAML2BindingType> bindingType =\n                     new AjaxDropDownChoicePanel<>(\"field\", \"bindingType\",\n-                            new PropertyModel<SAML2BindingType>(idpTO, \"bindingType\"), false);\n+                            new PropertyModel<>(idpTO, \"bindingType\"), false);\n             bindingType.setChoices(Arrays.asList(SAML2BindingType.values()));\n             fields.add(bindingType);\n \n@@ -162,13 +160,7 @@ private static final class Mapping extends WizardStep {\n \n     @Override\n     protected Serializable onApplyInternal(final SAML2IdPTO modelObject) {\n-        long connObjectKeyCount = IterableUtils.countMatches(modelObject.getItems(), new Predicate<ItemTO>() {\n-\n-            @Override\n-            public boolean evaluate(final ItemTO item) {\n-                return item.isConnObjectKey();\n-            }\n-        });\n+        long connObjectKeyCount = modelObject.getItems().stream().filter(ItemTO::isConnObjectKey).count();\n         if (connObjectKeyCount != 1) {\n             throw new IllegalArgumentException(\n                     new StringResourceModel(\"connObjectKeyValidation\", directoryPanel).getString());"},{"sha":"933392375336e6f6d84db9518957fe7dc7505109","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPCache.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -46,8 +46,7 @@\n @Component\n public class SAML2IdPCache {\n \n-    private final Map<String, SAML2IdPEntity> cache =\n-            Collections.synchronizedMap(new HashMap<String, SAML2IdPEntity>());\n+    private final Map<String, SAML2IdPEntity> cache = Collections.synchronizedMap(new HashMap<>());\n \n     @Autowired\n     private SAML2SPLoader loader;"},{"sha":"65261f299c1ed961ad1f883c36ae4c6ebeae57a6","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/ServiceTimeoutServlet.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FServiceTimeoutServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FServiceTimeoutServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FServiceTimeoutServlet.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -53,11 +53,8 @@ protected void processRequest(final HttpServletRequest request, final HttpServle\n             // ignore\n         }\n \n-        final PrintWriter out = response.getWriter();\n-        try {\n+        try (PrintWriter out = response.getWriter()) {\n             out.println(\"OK\");\n-        } finally {\n-            out.close();\n         }\n     }\n "},{"sha":"0a4f99602d44150f51f7da104e9a69671392226d","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/cxf/ProvisioningImpl.java","status":"modified","additions":82,"deletions":93,"changes":175,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FProvisioningImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FProvisioningImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FProvisioningImpl.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -64,16 +64,14 @@ public String delete(final String accountid) throws ProvisioningException {\n         try {\n             conn = DataSourceUtils.getConnection(dataSource);\n \n-            PreparedStatement statement =\n-                conn.prepareStatement(\"DELETE FROM user WHERE userId=?\");\n-            statement.setString(1, accountid);\n-\n-            String query = \"DELETE FROM user WHERE userId='\" + accountid + \"';\";\n-            LOG.debug(\"Execute query: \" + query);\n+            try (PreparedStatement statement = conn.prepareStatement(\"DELETE FROM user WHERE userId=?\")) {\n+                statement.setString(1, accountid);\n \n-            statement.executeUpdate();\n+                String query = \"DELETE FROM user WHERE userId='\" + accountid + \"';\";\n+                LOG.debug(\"Execute query: \" + query);\n \n-            statement.close();\n+                statement.executeUpdate();\n+            }\n \n             return accountid;\n         } catch (SQLException e) {\n@@ -108,9 +106,9 @@ public String update(final String accountid, final List<WSAttributeValue> data)\n \n         List<WSAttribute> schema = schema();\n         Set<String> schemaNames = new HashSet<>();\n-        for (WSAttribute attr : schema) {\n+        schema.forEach(attr -> {\n             schemaNames.add(attr.getName());\n-        }\n+        });\n         schemaNames.add(\"__NAME__\");\n         schemaNames.add(\"__PASSWORD__\");\n \n@@ -159,14 +157,14 @@ public String update(final String accountid, final List<WSAttributeValue> data)\n             }\n \n             if (set.length() > 0) {\n-                PreparedStatement statement =\n-                    conn.prepareStatement(\"UPDATE user SET \" + set.toString() + \" WHERE userId=?\");\n-                statement.setString(1, accountid);\n-                String query = \"UPDATE user SET \" + set.toString() + \" WHERE userId='\" + accountid + \"';\";\n-                LOG.debug(\"Execute query: \" + query);\n+                try (PreparedStatement statement =\n+                        conn.prepareStatement(\"UPDATE user SET \" + set.toString() + \" WHERE userId=?\")) {\n+                    statement.setString(1, accountid);\n+                    String query = \"UPDATE user SET \" + set.toString() + \" WHERE userId='\" + accountid + \"';\";\n+                    LOG.debug(\"Execute query: \" + query);\n \n-                statement.executeUpdate();\n-                statement.close();\n+                    statement.executeUpdate();\n+                }\n             }\n \n             return accountid;\n@@ -200,36 +198,32 @@ public List<WSUser> query(final Operand query) {\n             }\n \n             conn = DataSourceUtils.getConnection(dataSource);\n-            Statement statement = conn.createStatement();\n-\n-            ResultSet rs = statement.executeQuery(queryString);\n-\n-            ResultSetMetaData metaData = rs.getMetaData();\n-            LOG.debug(\"Metadata: {}\", metaData);\n-\n-            while (rs.next()) {\n-                WSUser user = new WSUser();\n+            try (Statement statement = conn.createStatement(); ResultSet rs = statement.executeQuery(queryString)) {\n+                ResultSetMetaData metaData = rs.getMetaData();\n+                LOG.debug(\"Metadata: {}\", metaData);\n+\n+                while (rs.next()) {\n+                    WSUser user = new WSUser();\n+\n+                    for (int i = 0; i < metaData.getColumnCount(); i++) {\n+                        WSAttributeValue attr = new WSAttributeValue();\n+                        attr.setName(metaData.getColumnLabel(i + 1));\n+                        if (StringUtil.isNotBlank(rs.getString(i + 1))) {\n+                            attr.addValue(rs.getString(i + 1));\n+                        }\n+                        if (\"userId\".equalsIgnoreCase(metaData.getColumnName(i + 1))) {\n+                            attr.setKey(true);\n+                            user.setAccountid(rs.getString(i + 1));\n+                        }\n \n-                for (int i = 0; i < metaData.getColumnCount(); i++) {\n-                    WSAttributeValue attr = new WSAttributeValue();\n-                    attr.setName(metaData.getColumnLabel(i + 1));\n-                    if (StringUtil.isNotBlank(rs.getString(i + 1))) {\n-                        attr.addValue(rs.getString(i + 1));\n-                    }\n-                    if (\"userId\".equalsIgnoreCase(metaData.getColumnName(i + 1))) {\n-                        attr.setKey(true);\n-                        user.setAccountid(rs.getString(i + 1));\n+                        user.addAttribute(attr);\n                     }\n \n-                    user.addAttribute(attr);\n+                    results.add(user);\n                 }\n \n-                results.add(user);\n+                LOG.debug(\"Retrieved users: {}\", results);\n             }\n-\n-            LOG.debug(\"Retrieved users: {}\", results);\n-            rs.close();\n-            statement.close();\n         } catch (SQLException e) {\n             LOG.error(\"Search operation failed\", e);\n         } finally {\n@@ -245,75 +239,70 @@ public String create(final List<WSAttributeValue> data) throws ProvisioningExcep\n \n         final List<WSAttribute> schema = schema();\n         final Set<String> schemaNames = new HashSet<>();\n-        for (WSAttribute attr : schema) {\n+        schema.forEach(attr -> {\n             schemaNames.add(attr.getName());\n-        }\n+        });\n         schemaNames.add(\"__NAME__\");\n         schemaNames.add(\"__PASSWORD__\");\n \n         Connection conn = null;\n         String query = null;\n         try {\n             conn = DataSourceUtils.getConnection(dataSource);\n-            final Statement statement = conn.createStatement();\n-\n-            final StringBuilder keys = new StringBuilder();\n-            final StringBuilder values = new StringBuilder();\n-\n-            String accountid = null;\n-            String value;\n-            for (WSAttributeValue attr : data) {\n-                if (schemaNames.contains(attr.getName())) {\n-                    LOG.debug(\"Bind attribute: {}\", attr);\n-\n-                    if (attr.getValues() == null || attr.getValues().isEmpty()) {\n-                        value = null;\n-                    } else if (attr.getValues().size() == 1) {\n-                        value = attr.getValues().get(0).toString();\n-                    } else {\n-                        value = attr.getValues().toString();\n-                    }\n+            String accountid;\n+            try (Statement statement = conn.createStatement()) {\n+                final StringBuilder keys = new StringBuilder();\n+                final StringBuilder values = new StringBuilder();\n+                accountid = null;\n+                String value;\n+                for (WSAttributeValue attr : data) {\n+                    if (schemaNames.contains(attr.getName())) {\n+                        LOG.debug(\"Bind attribute: {}\", attr);\n+\n+                        if (attr.getValues() == null || attr.getValues().isEmpty()) {\n+                            value = null;\n+                        } else if (attr.getValues().size() == 1) {\n+                            value = attr.getValues().get(0).toString();\n+                        } else {\n+                            value = attr.getValues().toString();\n+                        }\n \n-                    if (keys.length() > 0) {\n-                        keys.append(\",\");\n-                    }\n+                        if (keys.length() > 0) {\n+                            keys.append(\",\");\n+                        }\n \n-                    if (null == attr.getName()) {\n-                        keys.append(attr.getName());\n-                    } else {\n-                        switch (attr.getName()) {\n-                            case \"__NAME__\":\n-                                keys.append(\"userId\");\n-                                break;\n-                            case \"__PASSWORD__\":\n-                                keys.append(\"password\");\n-                                break;\n-                            default:\n-                                keys.append(attr.getName());\n-                                break;\n+                        if (null == attr.getName()) {\n+                            keys.append(attr.getName());\n+                        } else {\n+                            switch (attr.getName()) {\n+                                case \"__NAME__\":\n+                                    keys.append(\"userId\");\n+                                    break;\n+                                case \"__PASSWORD__\":\n+                                    keys.append(\"password\");\n+                                    break;\n+                                default:\n+                                    keys.append(attr.getName());\n+                                    break;\n+                            }\n                         }\n-                    }\n \n-                    if (values.length() > 0) {\n-                        values.append(\",\");\n-                    }\n+                        if (values.length() > 0) {\n+                            values.append(\",\");\n+                        }\n \n-                    values.append(value == null ? null : \"'\" + value + \"'\");\n+                        values.append(value == null ? null : \"'\" + value + \"'\");\n \n-                    if (attr.isKey() && !attr.getValues().isEmpty()) {\n-                        accountid = attr.getValues().get(0).toString();\n+                        if (attr.isKey() && !attr.getValues().isEmpty()) {\n+                            accountid = attr.getValues().get(0).toString();\n+                        }\n                     }\n                 }\n+                query = \"INSERT INTO user (\" + keys.toString() + \") VALUES (\" + values.toString() + \")\";\n+                LOG.debug(\"Execute query: \" + query);\n+                statement.executeUpdate(query);\n             }\n \n-            query = \"INSERT INTO user (\" + keys.toString() + \") VALUES (\" + values.toString() + \")\";\n-\n-            LOG.debug(\"Execute query: \" + query);\n-\n-            statement.executeUpdate(query);\n-\n-            statement.close();\n-\n             return accountid;\n         } catch (SQLException e) {\n             LOG.error(\"Creation failed:\\n\" + query, e);\n@@ -352,7 +341,7 @@ public String resolve(final String username) throws ProvisioningException {\n         try {\n             conn = DataSourceUtils.getConnection(dataSource);\n             PreparedStatement statement =\n-                conn.prepareStatement(\"SELECT userId FROM user WHERE userId=?\");\n+                    conn.prepareStatement(\"SELECT userId FROM user WHERE userId=?\");\n             statement.setString(1, username);\n \n             final String query = \"SELECT userId FROM user WHERE userId='\" + username + \"';\";"},{"sha":"6e8e170bbc692d5b19ad55f314cf3f82d77e84b0","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":8,"deletions":12,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -205,20 +205,16 @@ public void load() {\n         // in case the Elasticsearch extension is enabled, reinit a clean index for all available domains\n         if (AopUtils.getTargetClass(anySearchDAO).getName().contains(\"Elasticsearch\")) {\n             for (Map.Entry<String, DataSource> entry : domainsHolder.getDomains().entrySet()) {\n-                AuthContextUtils.execWithAuthContext(entry.getKey(), new AuthContextUtils.Executable<Void>() {\n+                AuthContextUtils.execWithAuthContext(entry.getKey(), () -> {\n+                    SchedTaskTO task = new SchedTaskTO();\n+                    task.setJobDelegateClassName(\n+                            \"org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex\");\n+                    task.setName(\"Elasticsearch Reindex\");\n+                    task = taskLogic.createSchedTask(task);\n \n-                    @Override\n-                    public Void exec() {\n-                        SchedTaskTO task = new SchedTaskTO();\n-                        task.setJobDelegateClassName(\n-                                \"org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex\");\n-                        task.setName(\"Elasticsearch Reindex\");\n-                        task = taskLogic.createSchedTask(task);\n+                    taskLogic.execute(task.getKey(), null, false);\n \n-                        taskLogic.execute(task.getKey(), null, false);\n-\n-                        return null;\n-                    }\n+                    return null;\n                 });\n             }\n         }"},{"sha":"5ba0f70220487bf4eb5ccf705d2c78d34b3203a4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AbstractConsoleITCase.java","status":"modified","additions":15,"deletions":25,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -26,13 +26,11 @@\n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n import org.apache.wicket.behavior.AbstractAjaxBehavior;\n-import org.apache.wicket.behavior.Behavior;\n import org.apache.wicket.core.util.lang.PropertyResolver;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.util.tester.FormTester;\n import org.apache.wicket.util.tester.WicketTester;\n import org.apache.wicket.util.visit.IVisit;\n-import org.apache.wicket.util.visit.IVisitor;\n import org.junit.BeforeClass;\n import org.junit.FixMethodOrder;\n import org.junit.runners.MethodSorters;\n@@ -82,41 +80,33 @@ protected <V extends Serializable> Component findComponentByProp(\n \n         Component component = TESTER.getComponentFromLastRenderedPage(searchPath);\n         return (component instanceof MarkupContainer ? MarkupContainer.class.cast(component) : component.getPage()).\n-                visitChildren(ListItem.class, new IVisitor<ListItem<?>, Component>() {\n-\n-                    @Override\n-                    public void component(final ListItem<?> object, final IVisit<Component> visit) {\n-                        try {\n-                            Method getter = PropertyResolver.getPropertyGetter(property, object.getModelObject());\n-                            if (getter != null && getter.invoke(object.getModelObject()).equals(key)) {\n-                                visit.stop(object);\n-                            }\n-                        } catch (Exception e) {\n-                            LOG.error(\"Error invoke method\", e);\n+                visitChildren(ListItem.class, (final ListItem<?> object, final IVisit<Component> visit) -> {\n+                    try {\n+                        Method getter = PropertyResolver.getPropertyGetter(property, object.getModelObject());\n+                        if (getter != null && getter.invoke(object.getModelObject()).equals(key)) {\n+                            visit.stop(object);\n                         }\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error invoke method\", e);\n                     }\n                 });\n     }\n \n     protected Component findComponentById(final String searchPath, final String id) {\n         Component component = TESTER.getComponentFromLastRenderedPage(searchPath);\n         return (component instanceof MarkupContainer ? MarkupContainer.class.cast(component) : component.getPage()).\n-                visitChildren(Component.class, new IVisitor<Component, Component>() {\n-\n-                    @Override\n-                    public void component(final Component object, final IVisit<Component> visit) {\n-                        if (object.getId().equals(id)) {\n-                            visit.stop(object);\n-                        }\n+                visitChildren(Component.class, (final Component object, final IVisit<Component> visit) -> {\n+                    if (object.getId().equals(id)) {\n+                        visit.stop(object);\n                     }\n                 });\n     }\n \n     protected void closeCallBack(final Component modal) {\n-        for (Behavior behavior : modal.getBehaviors()) {\n-            if (behavior instanceof AbstractAjaxBehavior) {\n-                TESTER.executeBehavior((AbstractAjaxBehavior) behavior);\n-            }\n-        }\n+        modal.getBehaviors().stream().\n+                filter(behavior -> (behavior instanceof AbstractAjaxBehavior)).\n+                forEachOrdered(behavior -> {\n+                    TESTER.executeBehavior((AbstractAjaxBehavior) behavior);\n+                });\n     }\n }"},{"sha":"904afab9ed03ae713e7f285a6c01441d8067687b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/LogsITCase.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -30,7 +30,6 @@\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.util.visit.IVisit;\n-import org.apache.wicket.util.visit.IVisitor;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -98,18 +97,14 @@ private Component searchLog(final String property, final String searchPath, fina\n         Component component = TESTER.getComponentFromLastRenderedPage(searchPath);\n \n         Component result = component.getPage().\n-                visitChildren(ListItem.class, new IVisitor<ListItem<LoggerTO>, Component>() {\n-\n-                    @Override\n-                    public void component(final ListItem<LoggerTO> object, final IVisit<Component> visit) {\n-                        try {\n-                            if (object.getModelObject() instanceof LoggerTO && PropertyResolver.getPropertyGetter(\n-                                    property, object.getModelObject()).invoke(object.getModelObject()).equals(key)) {\n-                                visit.stop(object);\n-                            }\n-                        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {\n-                            LOG.error(\"Error invoke method\", ex);\n+                visitChildren(ListItem.class, (final ListItem<LoggerTO> object, final IVisit<Component> visit) -> {\n+                    try {\n+                        if (object.getModelObject() instanceof LoggerTO && PropertyResolver.getPropertyGetter(\n+                                property, object.getModelObject()).invoke(object.getModelObject()).equals(key)) {\n+                            visit.stop(object);\n                         }\n+                    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {\n+                        LOG.error(\"Error invoke method\", ex);\n                     }\n                 });\n         return result;"},{"sha":"dfc17d9de80a4b26094de530406e46641bfc81e8","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/HttpUtils.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5be24a033334a8a15b0c12dfaef1e5326d813ced/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FHttpUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5be24a033334a8a15b0c12dfaef1e5326d813ced/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FHttpUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FHttpUtils.java?ref=5be24a033334a8a15b0c12dfaef1e5326d813ced","patch":"@@ -141,13 +141,12 @@ public int postWithStringEntity(final String url, final String stringEntity) {\n         try {\n             final HttpPost httPost = httpPost(url, new StringEntity(stringEntity));\n             httPost.addHeader(\"Content-Type\", ContentType.APPLICATION_JSON.getMimeType());\n-            final CloseableHttpResponse response = httpClient.execute(\n-                    targetHost, httPost, setAuth(targetHost, new DigestScheme()));\n-            status = response.getStatusLine().getStatusCode();\n-            handler.logOutput(\"Http status: \" + status, true);\n-            InstallLog.getInstance().info(\"Http status: \" + status);\n-\n-            response.close();\n+            try (CloseableHttpResponse response =\n+                    httpClient.execute(targetHost, httPost, setAuth(targetHost, new DigestScheme()))) {\n+                status = response.getStatusLine().getStatusCode();\n+                handler.logOutput(\"Http status: \" + status, true);\n+                InstallLog.getInstance().info(\"Http status: \" + status);\n+            }\n         } catch (final IOException ioe) {\n             final String messageError = \"Error calling \" + url + \": \" + ioe.getMessage();\n             handler.emitError(messageError, messageError);"}]}