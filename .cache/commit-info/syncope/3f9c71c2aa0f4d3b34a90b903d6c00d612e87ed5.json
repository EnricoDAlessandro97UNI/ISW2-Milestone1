{"sha":"3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNmOWM3MWMyYWEwZjRkM2IzNGE5MGI5MDNkNmMwMGQ2MTJlODdlZDU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-24T15:38:30Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-24T15:38:30Z"},"message":"[SYNCOPE-938] Base64 encoder preferred over MIME encoder, where applicable","tree":{"sha":"224e442f412f4c8cb932a008d33769dec5ca7099","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/224e442f412f4c8cb932a008d33769dec5ca7099"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"871acf07e20cce83edba217ddb7f7778f31e98eb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/871acf07e20cce83edba217ddb7f7778f31e98eb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/871acf07e20cce83edba217ddb7f7778f31e98eb"}],"stats":{"total":39,"additions":18,"deletions":21},"files":[{"sha":"b471690a029a88afd0bbf6ebfb59963e5f72150d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java?ref=3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","patch":"@@ -188,7 +188,7 @@ public void parseValue(final PlainSchema schema, final String value) {\n                 break;\n \n             case Binary:\n-                this.setBinaryValue(Base64.getMimeDecoder().decode(value));\n+                this.setBinaryValue(Base64.getDecoder().decode(value));\n                 break;\n \n             case String:\n@@ -261,7 +261,7 @@ public String getValueAsString(final AttrSchemaType type) {\n                 break;\n \n             case Binary:\n-                result = Base64.getMimeEncoder().encodeToString(getBinaryValue());\n+                result = Base64.getEncoder().encodeToString(getBinaryValue());\n                 break;\n \n             case String:"},{"sha":"0844c7a71a573957617c054a921d87f0703e6e8c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainAttrTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java?ref=3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","patch":"@@ -206,7 +206,7 @@ public void saveWithBinary() throws UnsupportedEncodingException {\n \n         byte[] bytes = new byte[20];\n         new Random().nextBytes(bytes);\n-        String photoB64Value = Base64.getMimeEncoder().encodeToString(bytes);\n+        String photoB64Value = Base64.getEncoder().encodeToString(bytes);\n \n         UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n         attr.setOwner(user);"},{"sha":"2144080fc92d4b1370476c23c109608dd2effe16","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/AttributeDeserializer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializer.java?ref=3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","patch":"@@ -63,7 +63,7 @@ public Attribute deserialize(final JsonParser jp, final DeserializationContext c\n                 if (text.startsWith(AttributeSerializer.BYTE_ARRAY_PREFIX)\n                         && text.endsWith(AttributeSerializer.BYTE_ARRAY_SUFFIX)) {\n \n-                    values.add(Base64.getMimeDecoder().decode(StringUtils.substringBetween(\n+                    values.add(Base64.getDecoder().decode(StringUtils.substringBetween(\n                             text, AttributeSerializer.BYTE_ARRAY_PREFIX, AttributeSerializer.BYTE_ARRAY_SUFFIX)));\n                 } else {\n                     values.add(text);"},{"sha":"10d0d2ddcbff82738a8970211292c30c983720ac","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/AttributeSerializer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializer.java?ref=3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","patch":"@@ -61,7 +61,7 @@ public void serialize(final Attribute source, final JsonGenerator jgen, final Se\n                 } else if (value instanceof byte[]) {\n                     jgen.writeString(\n                             BYTE_ARRAY_PREFIX\n-                            + Base64.getMimeEncoder().encodeToString((byte[]) value)\n+                            + Base64.getEncoder().encodeToString((byte[]) value)\n                             + BYTE_ARRAY_SUFFIX);\n                 } else {\n                     jgen.writeString(value.toString());"},{"sha":"af4378a52316b7ce8a7dcb4dbada92bde9b9834d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/GuardedStringDeserializer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringDeserializer.java?ref=3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","patch":"@@ -50,7 +50,7 @@ public GuardedString deserialize(final JsonParser jp, final DeserializationConte\n         }\n         byte[] encryptedBytes = null;\n         if (tree.has(\"encryptedBytes\")) {\n-            encryptedBytes = Base64.getMimeDecoder().decode(tree.get(\"encryptedBytes\").asText());\n+            encryptedBytes = Base64.getDecoder().decode(tree.get(\"encryptedBytes\").asText());\n         }\n         String base64SHA1Hash = null;\n         if (tree.has(\"base64SHA1Hash\")) {"},{"sha":"26eec0a0302b576db550ba64a25dedce14547fe9","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/GuardedStringSerializer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringSerializer.java?ref=3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","patch":"@@ -62,7 +62,7 @@ public void serialize(final GuardedString source, final JsonGenerator jgen, fina\n \n         byte[] encryptedBytes =\n                 EncryptorFactory.getInstance().getDefaultEncryptor().encrypt(SecurityUtil.decrypt(source).getBytes());\n-        jgen.writeStringField(\"encryptedBytes\", Base64.getMimeEncoder().encodeToString(encryptedBytes));\n+        jgen.writeStringField(\"encryptedBytes\", Base64.getEncoder().encodeToString(encryptedBytes));\n \n         String base64SHA1Hash = null;\n         try {"},{"sha":"e2a2e2d17a8dc51badb576531c1dc81b65b8ef7d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/SyncTokenDeserializer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenDeserializer.java?ref=3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","patch":"@@ -53,7 +53,7 @@ public SyncToken deserialize(final JsonParser jp, final DeserializationContext c\n             if (value instanceof String) {\n                 String base64 = (String) value;\n                 try {\n-                    value = Base64.getMimeDecoder().decode(base64);\n+                    value = Base64.getDecoder().decode(base64);\n                 } catch (RuntimeException e) {\n                     value = base64;\n                 }"},{"sha":"b96c6d26b507b28d99c0e47861f219ead261d615","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/SyncTokenSerializer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenSerializer.java?ref=3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","patch":"@@ -46,7 +46,7 @@ public void serialize(final SyncToken source, final JsonGenerator jgen, final Se\n         } else if (source.getValue() instanceof Integer) {\n             jgen.writeNumber((Integer) source.getValue());\n         } else if (source.getValue() instanceof byte[]) {\n-            jgen.writeString(Base64.getMimeEncoder().encodeToString((byte[]) source.getValue()));\n+            jgen.writeString(Base64.getEncoder().encodeToString((byte[]) source.getValue()));\n         } else {\n             jgen.writeString(source.getValue().toString());\n         }"},{"sha":"9b5f6eb39fe51545e0c2c7c89f917404762aa564","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java?ref=3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","patch":"@@ -264,7 +264,7 @@ private Set<Object> getValues(final Attribute attr) {\n         } else if (attr.getValue().get(0) instanceof byte[]) {\n             values = new HashSet<>(attr.getValue().size());\n             attr.getValue().forEach(single -> {\n-                values.add(Base64.getMimeEncoder().encode((byte[]) single));\n+                values.add(Base64.getEncoder().encode((byte[]) single));\n             });\n         } else {\n             values = new HashSet<>(attr.getValue());"},{"sha":"08d4c7a3cbe470ddcdabd0ab8579b41172660cfb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java?ref=3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","patch":"@@ -72,7 +72,7 @@ && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgori\n \n                     String password = user.getPassword().toLowerCase();\n                     byte[] decodedPassword = DatatypeConverter.parseHexBinary(password);\n-                    String base64EncodedPassword = Base64.getMimeEncoder().encodeToString(decodedPassword);\n+                    String base64EncodedPassword = Base64.getEncoder().encodeToString(decodedPassword);\n \n                     String cipherPlusPassword = (\"{\" + cipherAlgorithm.toLowerCase() + \"}\" + base64EncodedPassword);\n "},{"sha":"0761e09e4e4f4791fc984c5df0c3eac4ee65a48c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java?ref=3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","patch":"@@ -112,7 +112,7 @@ public void after(\n         if (entity instanceof UserTO && encodedPassword != null && cipher != null) {\n             User user = userDAO.find(entity.getKey());\n             if (user != null) {\n-                byte[] encodedPasswordBytes = Base64.getMimeDecoder().decode(encodedPassword.getBytes());\n+                byte[] encodedPasswordBytes = Base64.getDecoder().decode(encodedPassword.getBytes());\n                 String encodedHexStr = DatatypeConverter.printHexBinary(encodedPasswordBytes).toUpperCase();\n \n                 user.setEncodedPassword(encodedHexStr, cipher);"},{"sha":"e47d62eaa5472425d3e2a51cbcf8ad53690beeda","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/Encryptor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptor.java?ref=3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","patch":"@@ -180,7 +180,7 @@ public String encode(final String value, final CipherAlgorithm cipherAlgorithm)\n                 final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n                 cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n \n-                encodedValue = new String(Base64.getMimeEncoder().encode(cipher.doFinal(cleartext)));\n+                encodedValue = new String(Base64.getEncoder().encode(cipher.doFinal(cleartext)));\n             } else if (cipherAlgorithm == CipherAlgorithm.BCRYPT) {\n                 encodedValue = BCrypt.hashpw(value, BCrypt.gensalt());\n             } else {\n@@ -223,7 +223,7 @@ public String decode(final String encodedValue, final CipherAlgorithm cipherAlgo\n             final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n             cipher.init(Cipher.DECRYPT_MODE, keySpec);\n \n-            value = new String(cipher.doFinal(Base64.getMimeDecoder().decode(encoded)), StandardCharsets.UTF_8);\n+            value = new String(cipher.doFinal(Base64.getDecoder().decode(encoded)), StandardCharsets.UTF_8);\n         }\n \n         return value;"},{"sha":"4188ea7301fdda27156ca2f74bf25f0ceaaa5e10","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractUserWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java?ref=3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","patch":"@@ -53,12 +53,12 @@ public abstract class AbstractUserWorkflowAdapter implements UserWorkflowAdapter\n \n     protected String encrypt(final String clear) {\n         byte[] encrypted = EncryptorFactory.getInstance().getDefaultEncryptor().encrypt(clear.getBytes());\n-        return Base64.getMimeEncoder().encodeToString(encrypted);\n+        return Base64.getEncoder().encodeToString(encrypted);\n     }\n \n     protected String decrypt(final String crypted) {\n         byte[] decrypted = EncryptorFactory.getInstance().getDefaultEncryptor().\n-                decrypt(Base64.getMimeDecoder().decode(crypted));\n+                decrypt(Base64.getDecoder().decode(crypted));\n         return new String(decrypted);\n     }\n "},{"sha":"e89d410e295c35dbd6b3f2c6923e191c5fba4dff","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=3f9c71c2aa0f4d3b34a90b903d6c00d612e87ed5","patch":"@@ -681,7 +681,7 @@ public void issueSYNCOPE357() throws IOException {\n         // 2. create user with membership of the above group\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope357@syncope.apache.org\");\n         userTO.getPlainAttrs().add(attrTO(\"obscure\", \"valueToBeObscured\"));\n-        userTO.getPlainAttrs().add(attrTO(\"photo\", Base64.getMimeEncoder().encodeToString(\n+        userTO.getPlainAttrs().add(attrTO(\"photo\", Base64.getEncoder().encodeToString(\n                 IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/favicon.jpg\")))));\n         userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n \n@@ -699,10 +699,7 @@ public void issueSYNCOPE357() throws IOException {\n         assertEquals(userTO.getPlainAttr(\"obscure\").get().getValues(), registeredAddress.getValues());\n         Optional<AttrTO> jpegPhoto = connObj.getAttr(\"jpegPhoto\");\n         assertTrue(jpegPhoto.isPresent());\n-        // difference between java.util.Base64 encoding and ConnId's\n-        assertEquals(\n-                userTO.getPlainAttr(\"photo\").get().getValues().get(0).replace(\"\\n\", \"\").replace(\"\\r\", \"\"),\n-                jpegPhoto.get().getValues().get(0));\n+        assertEquals(userTO.getPlainAttr(\"photo\").get().getValues().get(0), jpegPhoto.get().getValues().get(0));\n \n         // 4. remove group\n         groupService.delete(groupTO.getKey());"}]}