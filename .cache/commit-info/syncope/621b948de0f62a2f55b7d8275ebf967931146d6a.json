{"sha":"621b948de0f62a2f55b7d8275ebf967931146d6a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjYyMWI5NDhkZTBmNjJhMmY1NWI3ZDgyNzVlYmY5Njc5MzExNDZkNmE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-03-05T15:34:56Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-03-05T15:34:56Z"},"message":"[SYNCOPE-328] Widespread check of non-null deref of global policies\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1452852 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d8fc0bab15c8528af797f8e703f4fad1e020df80","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d8fc0bab15c8528af797f8e703f4fad1e020df80"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/621b948de0f62a2f55b7d8275ebf967931146d6a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/621b948de0f62a2f55b7d8275ebf967931146d6a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/621b948de0f62a2f55b7d8275ebf967931146d6a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/621b948de0f62a2f55b7d8275ebf967931146d6a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"edfb9edcaf52be6d5e2f1d616a861f85eb05d415","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/edfb9edcaf52be6d5e2f1d616a861f85eb05d415","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/edfb9edcaf52be6d5e2f1d616a861f85eb05d415"}],"stats":{"total":282,"additions":137,"deletions":145},"files":[{"sha":"43f559265327ffee95fca861cd81b66379bc53c0","filename":"core/src/main/java/org/apache/syncope/core/connid/ConnObjectUtil.java","status":"modified","additions":20,"deletions":13,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java?ref=621b948de0f62a2f55b7d8275ebf967931146d6a","patch":"@@ -44,6 +44,7 @@\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n@@ -133,7 +134,7 @@ public ObjectClass fromAttributable(final AbstractAttributable attributable) {\n     }\n \n     /**\n-     * Build an UserTO out of connector object attributes and schema mapping.\n+     * Build a UserTO / RoleTO out of connector object attributes and schema mapping.\n      *\n      * @param obj connector object\n      * @param syncTask synchronization task\n@@ -147,37 +148,44 @@ public <T extends AbstractAttributableTO> T getAttributableTO(final ConnectorObj\n \n         T subjectTO = getAttributableTOFromConnObject(obj, syncTask, attrUtil);\n \n-        // if password was not set above, generate\n-        if (AttributableType.USER == attrUtil.getType() && StringUtils.isBlank(((UserTO) subjectTO).getPassword())) {\n+        // (for users) if password was not set above, generate\n+        if (subjectTO instanceof UserTO && StringUtils.isBlank(((UserTO) subjectTO).getPassword())) {\n+            final UserTO userTO = (UserTO) subjectTO;\n+\n             List<PasswordPolicySpec> ppSpecs = new ArrayList<PasswordPolicySpec>();\n-            ppSpecs.add((PasswordPolicySpec) policyDAO.getGlobalPasswordPolicy().getSpecification());\n \n-            for (MembershipTO memb : ((UserTO) subjectTO).getMemberships()) {\n+            PasswordPolicy globalPP = policyDAO.getGlobalPasswordPolicy();\n+            if (globalPP != null && globalPP.getSpecification() != null) {\n+                ppSpecs.add(globalPP.<PasswordPolicySpec>getSpecification());\n+            }\n+\n+            for (MembershipTO memb : userTO.getMemberships()) {\n                 SyncopeRole role = roleDAO.find(memb.getRoleId());\n                 if (role != null && role.getPasswordPolicy() != null\n                         && role.getPasswordPolicy().getSpecification() != null) {\n \n-                    ppSpecs.add((PasswordPolicySpec) role.getPasswordPolicy().getSpecification());\n+                    ppSpecs.add(role.getPasswordPolicy().<PasswordPolicySpec>getSpecification());\n                 }\n             }\n-            for (String resName : subjectTO.getResources()) {\n+\n+            for (String resName : userTO.getResources()) {\n                 ExternalResource resource = resourceDAO.find(resName);\n                 if (resource != null && resource.getPasswordPolicy() != null\n                         && resource.getPasswordPolicy().getSpecification() != null) {\n \n-                    ppSpecs.add((PasswordPolicySpec) resource.getPasswordPolicy().getSpecification());\n+                    ppSpecs.add(resource.getPasswordPolicy().<PasswordPolicySpec>getSpecification());\n                 }\n             }\n \n             String password;\n             try {\n-                password = pwdGen.generatePasswordFromPwdSpec(ppSpecs);\n+                password = pwdGen.generate(ppSpecs);\n             } catch (InvalidPasswordPolicySpecException e) {\n-                LOG.error(\"Could not generate policy-compliant random password for {}\", subjectTO, e);\n+                LOG.error(\"Could not generate policy-compliant random password for {}\", userTO, e);\n \n                 password = RandomStringUtils.randomAlphanumeric(16);\n             }\n-            ((UserTO) subjectTO).setPassword(password);\n+            userTO.setPassword(password);\n         }\n \n         return subjectTO;\n@@ -236,8 +244,7 @@ private <T extends AbstractAttributableTO> T getAttributableTOFromConnObject(fin\n         final T attributableTO = attrUtil.newAttributableTO();\n \n         // 1. fill with data from connector object\n-        for (AbstractMappingItem item :\n-                attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)) {\n+        for (AbstractMappingItem item : attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)) {\n             Attribute attribute = obj.getAttributeByName(item.getExtAttrName());\n \n             AttributeTO attributeTO;"},{"sha":"5b77444b9f3851b346d35e5238a128832cec6c0e","filename":"core/src/main/java/org/apache/syncope/core/connid/PasswordGenerator.java","status":"modified","additions":38,"deletions":43,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java?ref=621b948de0f62a2f55b7d8275ebf967931146d6a","patch":"@@ -19,84 +19,76 @@\n package org.apache.syncope.core.connid;\n \n import java.util.ArrayList;\n-import java.util.Iterator;\n import java.util.List;\n import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.types.PasswordPolicySpec;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.apache.syncope.core.policy.PolicyPattern;\n import org.apache.syncope.core.util.InvalidPasswordPolicySpecException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n+/**\n+ * Generate random passwords according to given policies.\n+ *\n+ * @see PasswordPolicy\n+ */\n @Component\n public class PasswordGenerator {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(PasswordGenerator.class);\n-\n-    private static final String[] SPECIAL_CHAR = {\"\", \"!\", \"£\", \"%\", \"&\", \"(\", \")\", \"?\", \"#\", \"_\", \"$\"};\n+    private static final String[] SPECIAL_CHARS = {\"\", \"!\", \"£\", \"%\", \"&\", \"(\", \")\", \"?\", \"#\", \"_\", \"$\"};\n \n     @Autowired\n     private PolicyDAO policyDAO;\n \n-    public String generatePasswordFromPwdSpec(final List<PasswordPolicySpec> passwordPolicySpecs)\n+    public String generate(final List<PasswordPolicySpec> ppSpecs)\n             throws InvalidPasswordPolicySpecException {\n \n-        PasswordPolicySpec policySpec = mergePolicySpecs(passwordPolicySpecs);\n+        PasswordPolicySpec policySpec = merge(ppSpecs);\n \n-        evaluateFinalPolicySpec(policySpec);\n+        check(policySpec);\n \n-        return generatePassword(policySpec);\n+        return generate(policySpec);\n     }\n \n-    public String generateUserPassword(final SyncopeUser user)\n+    public String generate(final SyncopeUser user)\n             throws InvalidPasswordPolicySpecException {\n \n-        List<PasswordPolicySpec> userPasswordPolicies = new ArrayList<PasswordPolicySpec>();\n-        PasswordPolicySpec passwordPolicySpec = policyDAO.getGlobalPasswordPolicy().getSpecification();\n+        List<PasswordPolicySpec> ppSpecs = new ArrayList<PasswordPolicySpec>();\n \n-        userPasswordPolicies.add(passwordPolicySpec);\n+        PasswordPolicy globalPP = policyDAO.getGlobalPasswordPolicy();\n+        if (globalPP != null && globalPP.getSpecification() != null) {\n+            ppSpecs.add(globalPP.<PasswordPolicySpec>getSpecification());\n+        }\n \n-        PasswordPolicySpec rolePasswordPolicySpec;\n-        if ((user.getRoles() != null) || (!user.getRoles().isEmpty())) {\n-            for (Iterator<SyncopeRole> rolesIterator = user.getRoles().iterator(); rolesIterator.hasNext();) {\n-                SyncopeRole syncopeRole = rolesIterator.next();\n-                rolePasswordPolicySpec = syncopeRole.getPasswordPolicy().getSpecification();\n-                userPasswordPolicies.add(rolePasswordPolicySpec);\n+        for (SyncopeRole role : user.getRoles()) {\n+            if (role.getPasswordPolicy() != null && role.getPasswordPolicy().getSpecification() != null) {\n+                ppSpecs.add(role.getPasswordPolicy().<PasswordPolicySpec>getSpecification());\n             }\n         }\n \n-        PasswordPolicySpec resourcePasswordPolicySpec;\n-\n-        if ((user.getResources() != null) || (!user.getResources().isEmpty())) {\n-            for (Iterator<ExternalResource> resourcesIterator = user.getResources().iterator();\n-                    resourcesIterator.hasNext();) {\n-                ExternalResource externalResource = resourcesIterator.next();\n-                if (externalResource.getPasswordPolicy() != null) {\n-                    resourcePasswordPolicySpec = externalResource.getPasswordPolicy().getSpecification();\n-                    userPasswordPolicies.add(resourcePasswordPolicySpec);\n-                }\n+        for (ExternalResource resource : user.getResources()) {\n+            if (resource.getPasswordPolicy() != null && resource.getPasswordPolicy().getSpecification() != null) {\n+                ppSpecs.add(resource.getPasswordPolicy().<PasswordPolicySpec>getSpecification());\n             }\n         }\n \n-        PasswordPolicySpec policySpec = mergePolicySpecs(userPasswordPolicies);\n-        evaluateFinalPolicySpec(policySpec);\n-        return generatePassword(policySpec);\n+        PasswordPolicySpec policySpec = merge(ppSpecs);\n+        check(policySpec);\n+        return generate(policySpec);\n     }\n \n-    private PasswordPolicySpec mergePolicySpecs(final List<PasswordPolicySpec> userPasswordPolicies) {\n+    private PasswordPolicySpec merge(final List<PasswordPolicySpec> ppSpecs) {\n         PasswordPolicySpec fpps = new PasswordPolicySpec();\n         fpps.setMinLength(0);\n         fpps.setMaxLength(1000);\n \n-        for (Iterator<PasswordPolicySpec> it = userPasswordPolicies.iterator(); it.hasNext();) {\n-            PasswordPolicySpec policySpec = it.next();\n+        for (PasswordPolicySpec policySpec : ppSpecs) {\n             if (policySpec.getMinLength() > fpps.getMinLength()) {\n                 fpps.setMinLength(policySpec.getMinLength());\n             }\n@@ -164,7 +156,7 @@ private PasswordPolicySpec mergePolicySpecs(final List<PasswordPolicySpec> userP\n         return fpps;\n     }\n \n-    private void evaluateFinalPolicySpec(final PasswordPolicySpec policySpec)\n+    private void check(final PasswordPolicySpec policySpec)\n             throws InvalidPasswordPolicySpecException {\n \n         if (policySpec.getMinLength() == 0) {\n@@ -208,7 +200,7 @@ private void evaluateFinalPolicySpec(final PasswordPolicySpec policySpec)\n         }\n     }\n \n-    private String generatePassword(final PasswordPolicySpec policySpec) {\n+    private String generate(final PasswordPolicySpec policySpec) {\n         String[] generatedPassword = new String[policySpec.getMinLength()];\n \n         for (int i = 0; i < generatedPassword.length; i++) {\n@@ -289,35 +281,38 @@ private int firstEmptyChar(final String[] generatedPStrings) {\n     private void checkRequired(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n         if (policySpec.isDigitRequired()\n                 && !PolicyPattern.DIGIT.matcher(StringUtils.join(generatedPassword)).matches()) {\n+\n             generatedPassword[firstEmptyChar(generatedPassword)] = RandomStringUtils.randomNumeric(1);\n         }\n \n         if (policySpec.isUppercaseRequired()\n                 && !PolicyPattern.ALPHA_UPPERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n+\n             generatedPassword[firstEmptyChar(generatedPassword)] = RandomStringUtils.randomAlphabetic(1).toUpperCase();\n         }\n \n         if (policySpec.isLowercaseRequired()\n                 && !PolicyPattern.ALPHA_LOWERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n+\n             generatedPassword[firstEmptyChar(generatedPassword)] = RandomStringUtils.randomAlphabetic(1).toLowerCase();\n         }\n \n         if (policySpec.isNonAlphanumericRequired()\n                 && !PolicyPattern.NON_ALPHANUMERIC.matcher(StringUtils.join(generatedPassword)).matches()) {\n-            generatedPassword[firstEmptyChar(generatedPassword)] = SPECIAL_CHAR[randomNumber(SPECIAL_CHAR.length - 1)];\n+\n+            generatedPassword[firstEmptyChar(generatedPassword)] =\n+                    SPECIAL_CHARS[randomNumber(SPECIAL_CHARS.length - 1)];\n         }\n     }\n \n     private void checkPrefixAndSuffix(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n-        for (Iterator<String> it = policySpec.getPrefixesNotPermitted().iterator(); it.hasNext();) {\n-            String prefix = it.next();\n+        for (String prefix : policySpec.getPrefixesNotPermitted()) {\n             if (StringUtils.join(generatedPassword).startsWith(prefix)) {\n                 checkStartChar(generatedPassword, policySpec);\n             }\n         }\n \n-        for (Iterator<String> it = policySpec.getSuffixesNotPermitted().iterator(); it.hasNext();) {\n-            String suffix = it.next();\n+        for (String suffix : policySpec.getSuffixesNotPermitted()) {\n             if (StringUtils.join(generatedPassword).endsWith(suffix)) {\n                 checkEndChar(generatedPassword, policySpec);\n             }"},{"sha":"1dd9afc0b6d90918dee864da1f15af8cd0e7fdf9","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/PolicyDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java?ref=621b948de0f62a2f55b7d8275ebf967931146d6a","patch":"@@ -30,10 +30,10 @@ public interface PolicyDAO extends DAO {\n \n     Policy find(Long id);\n \n-    PasswordPolicy getGlobalPasswordPolicy();\n-\n     List<? extends Policy> find(PolicyType type);\n \n+    PasswordPolicy getGlobalPasswordPolicy();\n+\n     AccountPolicy getGlobalAccountPolicy();\n \n     SyncPolicy getGlobalSyncPolicy();"},{"sha":"3de082191da5dff42830c337fcebc32b7998a3aa","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/PolicyValidator.java","status":"modified","additions":5,"deletions":12,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=621b948de0f62a2f55b7d8275ebf967931146d6a","patch":"@@ -43,29 +43,26 @@ public void initialize(final PolicyCheck constraintAnnotation) {\n \n     @Override\n     public boolean isValid(final Policy object, final ConstraintValidatorContext context) {\n-\n         context.disableDefaultConstraintViolation();\n \n         if (object.getSpecification() != null\n                 && ((object instanceof PasswordPolicy && !(object.getSpecification() instanceof PasswordPolicySpec))\n-                        || ((object instanceof AccountPolicy && !(object.getSpecification() instanceof AccountPolicySpec))) || ((object instanceof SyncPolicy && !(object\n-                        .getSpecification() instanceof SyncPolicySpec))))) {\n+                || ((object instanceof AccountPolicy && !(object.getSpecification() instanceof AccountPolicySpec)))\n+                || ((object instanceof SyncPolicy && !(object.getSpecification() instanceof SyncPolicySpec))))) {\n \n-            context.buildConstraintViolationWithTemplate(\"Invalid policy specification\").addNode(\n-                    EntityViolationType.valueOf(\"Invalid\" + object.getClass().getSimpleName()).name())\n-                    .addConstraintViolation();\n+            context.buildConstraintViolationWithTemplate(\"Invalid policy specification\").\n+                    addNode(EntityViolationType.valueOf(\"Invalid\" + object.getClass().getSimpleName()).name()).\n+                    addConstraintViolation();\n \n             return false;\n         }\n \n         switch (object.getType()) {\n             case GLOBAL_PASSWORD:\n-\n                 // just one GLOBAL_PASSWORD policy\n                 final PasswordPolicy passwordPolicy = policyDAO.getGlobalPasswordPolicy();\n \n                 if (passwordPolicy != null && !passwordPolicy.getId().equals(object.getId())) {\n-\n                     context.buildConstraintViolationWithTemplate(\"Password policy already exists\").addNode(\n                             EntityViolationType.InvalidPasswordPolicy.name()).addConstraintViolation();\n \n@@ -74,12 +71,10 @@ public boolean isValid(final Policy object, final ConstraintValidatorContext con\n                 break;\n \n             case GLOBAL_ACCOUNT:\n-\n                 // just one GLOBAL_ACCOUNT policy\n                 final AccountPolicy accountPolicy = policyDAO.getGlobalAccountPolicy();\n \n                 if (accountPolicy != null && !accountPolicy.getId().equals(object.getId())) {\n-\n                     context.buildConstraintViolationWithTemplate(\"Global Account policy already exists\").addNode(\n                             EntityViolationType.InvalidAccountPolicy.name()).addConstraintViolation();\n \n@@ -88,12 +83,10 @@ public boolean isValid(final Policy object, final ConstraintValidatorContext con\n                 break;\n \n             case GLOBAL_SYNC:\n-\n                 // just one GLOBAL_SYNC policy\n                 final SyncPolicy syncPolicy = policyDAO.getGlobalSyncPolicy();\n \n                 if (syncPolicy != null && !syncPolicy.getId().equals(object.getId())) {\n-\n                     context.buildConstraintViolationWithTemplate(\"Global Sync policy already exists\").addNode(\n                             EntityViolationType.InvalidSyncPolicy.name()).addConstraintViolation();\n "},{"sha":"206fe05a3303b3aa4da3be7301d040a652e62bc1","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":26,"deletions":45,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=621b948de0f62a2f55b7d8275ebf967931146d6a","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.Policy;\n+import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.membership.MAttr;\n import org.apache.syncope.core.persistence.beans.membership.MDerAttr;\n import org.apache.syncope.core.persistence.beans.membership.MVirAttr;\n@@ -136,10 +136,8 @@ public SyncopeUser getUserFromUsername(final String username) {\n      * Get predefined password cipher algorithm from SyncopeConf.\n      *\n      * @return cipher algorithm.\n-     * @throws NotFoundException in case of algorithm not included into <code>CipherAlgorithm</code>.\n      */\n     private CipherAlgorithm getPredefinedCipherAlgoritm() {\n-\n         final String algorithm = confDAO.find(\"password.cipher.algorithm\", \"AES\").getValue();\n \n         try {\n@@ -149,6 +147,27 @@ private CipherAlgorithm getPredefinedCipherAlgoritm() {\n         }\n     }\n \n+    private void setPassword(final SyncopeUser user, final String password,\n+            final SyncopeClientCompositeErrorException scce) {\n+\n+        int passwordHistorySize = 0;\n+        PasswordPolicy policy = policyDAO.getGlobalPasswordPolicy();\n+        if (policy != null && policy.getSpecification() != null) {\n+            passwordHistorySize = policy.<PasswordPolicySpec>getSpecification().getHistoryLength();\n+        }\n+\n+        try {\n+            user.setPassword(password, getPredefinedCipherAlgoritm(), passwordHistorySize);\n+        } catch (NotFoundException e) {\n+            final SyncopeClientException invalidCiperAlgorithm =\n+                    new SyncopeClientException(SyncopeClientExceptionType.NotFound);\n+            invalidCiperAlgorithm.addElement(e.getMessage());\n+            scce.addException(invalidCiperAlgorithm);\n+\n+            throw scce;\n+        }\n+    }\n+\n     public void create(final SyncopeUser user, final UserTO userTO) {\n         SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n@@ -184,29 +203,10 @@ public void create(final SyncopeUser user, final UserTO userTO) {\n         fill(user, userTO, AttributableUtil.getInstance(AttributableType.USER), scce);\n \n         // set password\n-        int passwordHistorySize = 0;\n-\n-        try {\n-            Policy policy = policyDAO.getGlobalPasswordPolicy();\n-            PasswordPolicySpec passwordPolicy = policy.getSpecification();\n-            passwordHistorySize = passwordPolicy.getHistoryLength();\n-        } catch (Exception ignore) {\n-            // ignore exceptions\n-        }\n-\n-        if (userTO.getPassword() == null || userTO.getPassword().isEmpty()) {\n+        if (StringUtils.isBlank(userTO.getPassword())) {\n             LOG.error(\"No password provided\");\n         } else {\n-            try {\n-                user.setPassword(userTO.getPassword(), getPredefinedCipherAlgoritm(), passwordHistorySize);\n-            } catch (NotFoundException e) {\n-                final SyncopeClientException invalidAlgorith =\n-                        new SyncopeClientException(SyncopeClientExceptionType.NotFound);\n-                invalidAlgorith.addElement(e.getMessage());\n-                scce.addException(invalidAlgorith);\n-\n-                throw scce;\n-            }\n+            setPassword(user, userTO.getPassword(), scce);\n         }\n \n         // set username\n@@ -222,7 +222,6 @@ public void create(final SyncopeUser user, final UserTO userTO) {\n      * @param user to be updated\n      * @param userMod bean containing update request\n      * @return updated user + propagation by resource\n-     * @throws SyncopeClientCompositeErrorException if anything goes wrong\n      * @see PropagationByResource\n      */\n     public PropagationByResource update(final SyncopeUser user, final UserMod userMod) {\n@@ -236,26 +235,8 @@ public PropagationByResource update(final SyncopeUser user, final UserMod userMo\n         Set<String> currentResources = user.getResourceNames();\n \n         // password\n-        if (userMod.getPassword() != null) {\n-            int passwordHistorySize = 0;\n-            try {\n-                Policy policy = policyDAO.getGlobalPasswordPolicy();\n-                PasswordPolicySpec passwordPolicy = policy.getSpecification();\n-                passwordHistorySize = passwordPolicy.getHistoryLength();\n-            } catch (Exception ignore) {\n-                // ignore exceptions\n-            }\n-\n-            try {\n-                user.setPassword(userMod.getPassword(), getPredefinedCipherAlgoritm(), passwordHistorySize);\n-            } catch (NotFoundException e) {\n-                final SyncopeClientException invalidAlgorith =\n-                        new SyncopeClientException(SyncopeClientExceptionType.NotFound);\n-                invalidAlgorith.addElement(e.getMessage());\n-                scce.addException(invalidAlgorith);\n-\n-                throw scce;\n-            }\n+        if (StringUtils.isNotBlank(userMod.getPassword())) {\n+            setPassword(user, userMod.getPassword(), scce);\n \n             user.setChangePwdDate(new Date());\n "},{"sha":"c24e0e187d9ed2205aa676e4235fd469b2310fef","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":39,"deletions":23,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=621b948de0f62a2f55b7d8275ebf967931146d6a","patch":"@@ -50,12 +50,14 @@\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.SyncPolicy;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.AttributableSearchDAO;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n@@ -98,6 +100,12 @@ public class SyncopeSyncResultHandler implements SyncResultsHandler {\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(SyncopeSyncResultHandler.class);\n \n+    /**\n+     * Policy DAO.\n+     */\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n     /**\n      * Entitlement DAO.\n      */\n@@ -420,18 +428,25 @@ private List<Long> search(final NodeCond searchCond, final AttributableUtil attr\n      * @param attrUtil attributable util\n      * @return list of matching users / roles\n      */\n-    public List<Long> findExisting(final String uid, final ConnectorObject connObj, final AttributableUtil attrUtil) {\n-        SyncPolicySpec policySpec = null;\n-        if (syncTask.getResource().getSyncPolicy() != null) {\n-            policySpec = (SyncPolicySpec) syncTask.getResource().getSyncPolicy().getSpecification();\n+    protected List<Long> findExisting(final String uid, final ConnectorObject connObj,\n+            final AttributableUtil attrUtil) {\n+\n+        SyncPolicySpec syncPolicySpec = null;\n+        if (syncTask.getResource().getSyncPolicy() == null) {\n+            SyncPolicy globalSP = policyDAO.getGlobalSyncPolicy();\n+            if (globalSP != null) {\n+                syncPolicySpec = globalSP.<SyncPolicySpec>getSpecification();\n+            }\n+        } else {\n+            syncPolicySpec = syncTask.getResource().getSyncPolicy().<SyncPolicySpec>getSpecification();\n         }\n \n         SyncRule syncRule = null;\n         List<String> altSearchSchemas = null;\n \n-        if (policySpec != null) {\n-            syncRule = attrUtil.getCorrelationRule(policySpec);\n-            altSearchSchemas = attrUtil.getAltSearchSchemas(policySpec);\n+        if (syncPolicySpec != null) {\n+            syncRule = attrUtil.getCorrelationRule(syncPolicySpec);\n+            altSearchSchemas = attrUtil.getAltSearchSchemas(syncPolicySpec);\n         }\n \n         return syncRule == null ? altSearchSchemas == null\n@@ -809,30 +824,30 @@ protected final List<SyncResult> doHandle(final SyncDelta delta)\n         final String uid = delta.getPreviousUid() == null\n                 ? delta.getUid().getUidValue()\n                 : delta.getPreviousUid().getUidValue();\n-        final List<Long> subjects = findExisting(uid, delta.getObject(), attrUtil);\n+        final List<Long> subjectIds = findExisting(uid, delta.getObject(), attrUtil);\n \n         if (SyncDeltaType.CREATE_OR_UPDATE == delta.getDeltaType()) {\n-            if (subjects.isEmpty()) {\n+            if (subjectIds.isEmpty()) {\n                 results.addAll(create(delta, attrUtil, dryRun));\n-            } else if (subjects.size() == 1) {\n-                results.addAll(update(delta, subjects.subList(0, 1), attrUtil, dryRun));\n+            } else if (subjectIds.size() == 1) {\n+                results.addAll(update(delta, subjectIds.subList(0, 1), attrUtil, dryRun));\n             } else {\n                 switch (resAct) {\n                     case IGNORE:\n-                        LOG.error(\"More than one match {}\", subjects);\n+                        LOG.error(\"More than one match {}\", subjectIds);\n                         break;\n \n                     case FIRSTMATCH:\n-                        results.addAll(update(delta, subjects.subList(0, 1), attrUtil, dryRun));\n+                        results.addAll(update(delta, subjectIds.subList(0, 1), attrUtil, dryRun));\n                         break;\n \n                     case LASTMATCH:\n-                        results.addAll(update(delta, subjects.subList(subjects.size() - 1, subjects.size()), attrUtil,\n-                                dryRun));\n+                        results.addAll(update(delta, subjectIds.subList(subjectIds.size() - 1, subjectIds.size()),\n+                                attrUtil, dryRun));\n                         break;\n \n                     case ALL:\n-                        results.addAll(update(delta, subjects, attrUtil, dryRun));\n+                        results.addAll(update(delta, subjectIds, attrUtil, dryRun));\n                         break;\n \n                     default:\n@@ -841,27 +856,28 @@ protected final List<SyncResult> doHandle(final SyncDelta delta)\n         }\n \n         if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n-            if (subjects.isEmpty()) {\n+            if (subjectIds.isEmpty()) {\n                 LOG.debug(\"No match found for deletion\");\n-            } else if (subjects.size() == 1) {\n-                results.addAll(delete(delta, subjects, attrUtil, dryRun));\n+            } else if (subjectIds.size() == 1) {\n+                results.addAll(delete(delta, subjectIds, attrUtil, dryRun));\n             } else {\n                 switch (resAct) {\n                     case IGNORE:\n-                        LOG.error(\"More than one match {}\", subjects);\n+                        LOG.error(\"More than one match {}\", subjectIds);\n                         break;\n \n                     case FIRSTMATCH:\n-                        results.addAll(delete(delta, subjects.subList(0, 1), attrUtil, dryRun));\n+                        results.addAll(delete(delta, subjectIds.subList(0, 1), attrUtil, dryRun));\n                         break;\n \n                     case LASTMATCH:\n-                        results.addAll(delete(delta, subjects.subList(subjects.size() - 1, subjects.size()), attrUtil,\n+                        results.addAll(delete(delta, subjectIds.subList(subjectIds.size() - 1, subjectIds.size()),\n+                                attrUtil,\n                                 dryRun));\n                         break;\n \n                     case ALL:\n-                        results.addAll(delete(delta, subjects, attrUtil, dryRun));\n+                        results.addAll(delete(delta, subjectIds, attrUtil, dryRun));\n                         break;\n \n                     default:"},{"sha":"5be7ab6a95e37a85d9d46485bfd889c31f6e12e8","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=621b948de0f62a2f55b7d8275ebf967931146d6a","patch":"@@ -219,7 +219,7 @@ public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prep\n                     }\n                 } else if (resource.isRandomPwdIfNotProvided()) {\n                     try {\n-                        passwordAttrValue = passwordGenerator.generateUserPassword(user);\n+                        passwordAttrValue = passwordGenerator.generate(user);\n                     } catch (InvalidPasswordPolicySpecException e) {\n                         LOG.error(\"Could not generate policy-compliant random password for {}\", user, e);\n "},{"sha":"6e4cb2908deacc74228eee8ff7f15cd2cea54a19","filename":"core/src/test/java/org/apache/syncope/core/connid/PasswordGeneratorTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/621b948de0f62a2f55b7d8275ebf967931146d6a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java?ref=621b948de0f62a2f55b7d8275ebf967931146d6a","patch":"@@ -49,7 +49,7 @@ public void issueSYNCOPE226() {\n         SyncopeUser user = userDAO.find(5L);\n         String password = \"\";\n         try {\n-            password = passwordGenerator.generateUserPassword(user);\n+            password = passwordGenerator.generate(user);\n         } catch (InvalidPasswordPolicySpecException ex) {\n             fail(ex.getMessage());\n         }\n@@ -67,7 +67,7 @@ public void testPasswordGenerator() {\n \n         String password = \"\";\n         try {\n-            password = passwordGenerator.generateUserPassword(user);\n+            password = passwordGenerator.generate(user);\n \n         } catch (InvalidPasswordPolicySpecException ex) {\n             fail(ex.getMessage());\n@@ -89,7 +89,7 @@ public void startEndWithDigit()\n         List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<PasswordPolicySpec>();\n         passwordPolicySpecs.add(passwordPolicySpec);\n         passwordPolicySpecs.add(passwordPolicySpec2);\n-        String generatedPassword = passwordGenerator.generatePasswordFromPwdSpec(passwordPolicySpecs);\n+        String generatedPassword = passwordGenerator.generate(passwordPolicySpecs);\n         assertTrue(Character.isDigit(generatedPassword.charAt(0)));\n         assertTrue(Character.isDigit(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n@@ -106,7 +106,7 @@ public void startWithDigitAndWithAlpha()\n         List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<PasswordPolicySpec>();\n         passwordPolicySpecs.add(passwordPolicySpec);\n         passwordPolicySpecs.add(passwordPolicySpec2);\n-        String generatedPassword = passwordGenerator.generatePasswordFromPwdSpec(passwordPolicySpecs);\n+        String generatedPassword = passwordGenerator.generate(passwordPolicySpecs);\n         assertTrue(Character.isDigit(generatedPassword.charAt(0)));\n         assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n@@ -123,7 +123,7 @@ public void passwordWithNonAlpha()\n         List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<PasswordPolicySpec>();\n         passwordPolicySpecs.add(passwordPolicySpec);\n         passwordPolicySpecs.add(passwordPolicySpec2);\n-        String generatedPassword = passwordGenerator.generatePasswordFromPwdSpec(passwordPolicySpecs);\n+        String generatedPassword = passwordGenerator.generate(passwordPolicySpecs);\n         assertTrue(PolicyPattern.NON_ALPHANUMERIC.matcher(generatedPassword).matches());\n         assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n@@ -141,7 +141,7 @@ public void incopatiblePolicies()\n         List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<PasswordPolicySpec>();\n         passwordPolicySpecs.add(passwordPolicySpec);\n         passwordPolicySpecs.add(passwordPolicySpec2);\n-        passwordGenerator.generatePasswordFromPwdSpec(passwordPolicySpecs);\n+        passwordGenerator.generate(passwordPolicySpecs);\n     }\n \n     private PasswordPolicySpec createBasePasswordPolicySpec() {"}]}