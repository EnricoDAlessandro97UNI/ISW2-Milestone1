{"sha":"ec7612419c3ed3f2bd582c67fd5cb5e617fd898f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmVjNzYxMjQxOWMzZWQzZjJiZDU4MmM2N2ZkNWNiNWU2MTdmZDg5OGY=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2017-12-19T15:43:51Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2017-12-19T15:43:51Z"},"message":"implements paged searchs to retrieve members of dynamic group in order to avoid trobles with memory usage","tree":{"sha":"74d9dd8bcb3f9c87e660122b74621cd944e6a700","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/74d9dd8bcb3f9c87e660122b74621cd944e6a700"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ec7612419c3ed3f2bd582c67fd5cb5e617fd898f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ec7612419c3ed3f2bd582c67fd5cb5e617fd898f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ec7612419c3ed3f2bd582c67fd5cb5e617fd898f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ec7612419c3ed3f2bd582c67fd5cb5e617fd898f/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"d701a03fbaa84c079f8442608e279c5c60981160","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d701a03fbaa84c079f8442608e279c5c60981160","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d701a03fbaa84c079f8442608e279c5c60981160"}],"stats":{"total":77,"additions":46,"deletions":31},"files":[{"sha":"658a32b5ca088bf4d5d351fd94d15465246b280b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ec7612419c3ed3f2bd582c67fd5cb5e617fd898f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ec7612419c3ed3f2bd582c67fd5cb5e617fd898f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=ec7612419c3ed3f2bd582c67fd5cb5e617fd898f","patch":"@@ -29,7 +29,7 @@\n \n public interface AnyDAO<A extends Any<?>> extends DAO<A> {\n \n-    int DEFAULT_PAGE_SIZE = 10;\n+    int DEFAULT_PAGE_SIZE = 500;\n \n     String findKey(String name);\n "},{"sha":"f0ca2da06951ba1d539b94a4cb09c4ff5e3c27b9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":45,"deletions":30,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ec7612419c3ed3f2bd582c67fd5cb5e617fd898f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ec7612419c3ed3f2bd582c67fd5cb5e617fd898f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=ec7612419c3ed3f2bd582c67fd5cb5e617fd898f","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -47,6 +48,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -285,37 +287,50 @@ public Group save(final Group group) {\n \n         // refresh dynamic memberships\n         if (merged.getUDynMembership() != null) {\n-            List<User> matching = searchDAO().search(\n-                    buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm()),\n-                    AnyTypeKind.USER);\n-\n-            clearUDynMembers(merged);\n-\n-            matching.forEach(user -> {\n-                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + UDYNMEMB_TABLE + \" VALUES(?, ?)\");\n-                insert.setParameter(1, user.getKey());\n-                insert.setParameter(2, merged.getKey());\n-                insert.executeUpdate();\n-\n-                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user, AuthContextUtils.getDomain()));\n-            });\n+            for (int page = 1; page <= (countUDynMembers(group) / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                List<User> matching = searchDAO().search(\n+                        Collections.<String>singleton(merged.getRealm().getFullPath()),\n+                        buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm()),\n+                        page,\n+                        AnyDAO.DEFAULT_PAGE_SIZE,\n+                        Collections.<OrderByClause>emptyList(),\n+                        AnyTypeKind.USER);\n+\n+                clearUDynMembers(merged);\n+\n+                matching.forEach(user -> {\n+                    Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + UDYNMEMB_TABLE + \" VALUES(?, ?)\");\n+                    insert.setParameter(1, user.getKey());\n+                    insert.setParameter(2, merged.getKey());\n+                    insert.executeUpdate();\n+\n+                    publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user, AuthContextUtils.getDomain()));\n+                });\n+            }\n         }\n-        merged.getADynMemberships().stream().map(memb -> searchDAO().search(\n-                buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm()),\n-                AnyTypeKind.ANY_OBJECT)).forEachOrdered(matching -> {\n-            clearADynMembers(merged);\n-\n-            matching.forEach(anyObject -> {\n-                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + ADYNMEMB_TABLE\n-                        + \" VALUES(?, ?, ?)\");\n-                insert.setParameter(1, anyObject.getType().getKey());\n-                insert.setParameter(2, anyObject.getKey());\n-                insert.setParameter(3, merged.getKey());\n-                insert.executeUpdate();\n-\n-                publisher.publishEvent(\n-                        new AnyCreatedUpdatedEvent<>(this, anyObject, AuthContextUtils.getDomain()));\n-            });\n+        merged.getADynMemberships().stream().forEach(memb -> {\n+            for (int page = 1; page <= (countUDynMembers(group) / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                List<AnyObject> matching = searchDAO().search(\n+                        Collections.<String>singleton(merged.getRealm().getFullPath()),\n+                        buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm()),\n+                        page,\n+                        AnyDAO.DEFAULT_PAGE_SIZE,\n+                        Collections.<OrderByClause>emptyList(),\n+                        AnyTypeKind.ANY_OBJECT);\n+\n+                clearADynMembers(merged);\n+\n+                matching.forEach(anyObject -> {\n+                    Query insert = entityManager().createNativeQuery(\n+                            \"INSERT INTO \" + ADYNMEMB_TABLE + \" VALUES(?, ?, ?)\");\n+                    insert.setParameter(1, anyObject.getType().getKey());\n+                    insert.setParameter(2, anyObject.getKey());\n+                    insert.setParameter(3, merged.getKey());\n+                    insert.executeUpdate();\n+\n+                    publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, anyObject, AuthContextUtils.getDomain()));\n+                });\n+            }\n         });\n \n         dynRealmDAO().refreshDynMemberships(merged);"}]}