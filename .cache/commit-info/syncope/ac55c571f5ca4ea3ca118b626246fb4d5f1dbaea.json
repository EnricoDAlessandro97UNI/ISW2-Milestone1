{"sha":"ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","node_id":"C_kwDOJfYA1toAKGFjNTVjNTcxZjVjYTRlYTNjYTExOGI2MjYyNDZmYjRkNWYxZGJhZWE","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-05-18T14:53:08Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-05-18T14:53:08Z"},"message":"Improving Realms page extendability","tree":{"sha":"7798f72e9075dfee0ebb7cb5757da77d653ee6dd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7798f72e9075dfee0ebb7cb5757da77d653ee6dd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"09d2adb4e669cc80cea1f489456b65a265cfef18","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/09d2adb4e669cc80cea1f489456b65a265cfef18","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/09d2adb4e669cc80cea1f489456b65a265cfef18"}],"stats":{"total":738,"additions":396,"deletions":342},"files":[{"sha":"e0f1c3ecc3aa25978a057e16f9b7b1ad9362ede8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -292,9 +292,13 @@ public List<String> getSearchableRealms() {\n                 : roots.stream().sorted().collect(Collectors.toList());\n     }\n \n-    public Optional<String> getRootRealm() {\n-        List<String> roots = getSearchableRealms();\n-        return roots.isEmpty() ? Optional.empty() : roots.stream().findFirst();\n+    public Optional<String> getRootRealm(final String initial) {\n+        List<String> searchable = getSearchableRealms();\n+        return searchable.isEmpty()\n+                ? Optional.empty()\n+                : initial != null && searchable.stream().anyMatch(initial::startsWith)\n+                ? Optional.of(initial)\n+                : searchable.stream().findFirst();\n     }\n \n     public boolean owns(final String entitlements, final String... realms) {"},{"sha":"1553337c367164ad0b4f807e5b7716b8bba875d1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/RealmsUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRealmsUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRealmsUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRealmsUtils.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -48,7 +48,7 @@ public static boolean isSearchEnabled() {\n     public static boolean isSearchEnabled(final List<String> realms) {\n         return realms.isEmpty()\n                 ? false\n-                : new RealmRestClient().search(\n+                : RealmRestClient.search(\n                         new RealmQuery.Builder().keyword(\n                                 realms.contains(SyncopeConstants.ROOT_REALM)\n                                 ? SyncopeConstants.ROOT_REALM"},{"sha":"706fd73d6274e5caafd41ed1e8492c7887a4bfab","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Realms.java","status":"modified","additions":99,"deletions":81,"changes":180,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -20,6 +20,7 @@\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import java.io.Serializable;\n+import java.util.List;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.panels.Realm;\n import org.apache.syncope.client.console.panels.RealmChoicePanel;\n@@ -30,13 +31,16 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.console.wizards.any.ResultPage;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n+import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.TemplatableTO;\n+import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.Broadcast;\n import org.apache.wicket.event.IEvent;\n@@ -51,15 +55,19 @@ public class Realms extends BasePage {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n-    private final TemplatesTogglePanel templates;\n+    public static final String SELECTED_INDEX = \"selectedIndex\";\n \n-    private final RealmChoicePanel realmChoicePanel;\n+    public static final String INITIAL_REALM = \"initialRealm\";\n \n-    private final WebMarkupContainer content;\n+    protected final TemplatesTogglePanel templates;\n \n-    private final BaseModal<RealmTO> modal;\n+    protected final RealmChoicePanel realmChoicePanel;\n \n-    private final BaseModal<Serializable> templateModal;\n+    protected final WebMarkupContainer content;\n+\n+    protected final BaseModal<RealmTO> modal;\n+\n+    protected final BaseModal<Serializable> templateModal;\n \n     public Realms(final PageParameters parameters) {\n         super(parameters);\n@@ -82,8 +90,7 @@ protected Serializable onApplyInternal(\n \n         content = new WebMarkupContainer(\"content\");\n \n-        realmChoicePanel = new RealmChoicePanel(\"realmChoicePanel\", getPageReference());\n-        realmChoicePanel.setOutputMarkupId(true);\n+        realmChoicePanel = buildRealmChoicePanel(parameters.get(INITIAL_REALM).toOptionalString(), getPageReference());\n         content.add(realmChoicePanel);\n \n         content.add(new Label(\"body\", \"Root realm\"));\n@@ -120,7 +127,17 @@ protected void onConfigure() {\n             templateModal.show(false);\n         });\n \n-        updateRealmContent(realmChoicePanel.getCurrentRealm(), parameters.get(\"selectedIndex\").toInt(0));\n+        updateRealmContent(realmChoicePanel.getCurrentRealm(), parameters.get(SELECTED_INDEX).toInt(0));\n+    }\n+\n+    protected RealmChoicePanel buildRealmChoicePanel(final String initialRealm, final PageReference pageRef) {\n+        RealmChoicePanel panel = new RealmChoicePanel(\"realmChoicePanel\", initialRealm, pageRef);\n+        panel.setOutputMarkupId(true);\n+        return panel;\n+    }\n+\n+    public RealmChoicePanel getRealmChoicePanel() {\n+        return realmChoicePanel;\n     }\n \n     @Override\n@@ -156,88 +173,89 @@ public void onEvent(final IEvent<?> event) {\n         }\n     }\n \n-    private WebMarkupContainer updateRealmContent(final RealmTO realmTO, final int selectedIndex) {\n-        if (realmTO == null) {\n-            return content;\n+    protected WebMarkupContainer updateRealmContent(final RealmTO realmTO, final int selectedIndex) {\n+        if (realmTO != null) {\n+            content.addOrReplace(new Content(realmTO, AnyTypeRestClient.listAnyTypes(), selectedIndex));\n         }\n-        content.addOrReplace(new Realm(\"body\", realmTO, Realms.this.getPageReference(), selectedIndex) {\n+        return content;\n+    }\n \n-            private static final long serialVersionUID = 8221398624379357183L;\n+    protected class Content extends Realm {\n \n-            @Override\n-            protected void onClickTemplate(final AjaxRequestTarget target) {\n-                templates.setTargetObject(realmTO);\n-                templates.toggle(target, true);\n-            }\n+        private static final long serialVersionUID = 8221398624379357183L;\n \n-            @Override\n-            protected void setWindowClosedReloadCallback(final BaseModal<?> modal) {\n-                modal.setWindowClosedCallback(target -> {\n-                    if (modal.getContent() instanceof ResultPage) {\n-                        Serializable result = ResultPage.class.cast(modal.getContent()).getResult();\n-\n-                        RealmTO newRealmTO = RealmTO.class.cast(ProvisioningResult.class.cast(result).getEntity());\n-                        // reload realmChoicePanel label too - SYNCOPE-1151\n-                        target.add(realmChoicePanel.reloadRealmTree(target, Model.of(newRealmTO)));\n-                        realmChoicePanel.setCurrentRealm(newRealmTO);\n-                        send(Realms.this, Broadcast.DEPTH, new ChosenRealm<>(newRealmTO, target));\n-                    } else {\n-                        target.add(realmChoicePanel.reloadRealmTree(target));\n-                    }\n-                    target.add(content);\n-                    modal.show(false);\n-                });\n-            }\n-\n-            @Override\n-            protected void onClickCreate(final AjaxRequestTarget target) {\n-                this.wizardBuilder.setParentPath(realmChoicePanel.getCurrentRealm().getFullPath());\n-                send(this, Broadcast.EXACT, new AjaxWizard.NewItemActionEvent<RealmTO>(new RealmTO(), target) {\n-\n-                    @Override\n-                    public String getEventDescription() {\n-                        return \"realm.new\";\n-                    }\n-                });\n-            }\n+        protected Content(final RealmTO realmTO, final List<AnyTypeTO> anyTypes, final int selectedIndex) {\n+            super(\"body\", realmTO, anyTypes, selectedIndex, Realms.this.getPageReference());\n+        }\n \n-            @Override\n-            protected void onClickEdit(final AjaxRequestTarget target, final RealmTO realmTO) {\n-                this.wizardBuilder.setParentPath(realmTO.getFullPath());\n-                send(this, Broadcast.EXACT, new AjaxWizard.EditItemActionEvent<RealmTO>(realmTO, target) {\n-\n-                    @Override\n-                    public String getEventDescription() {\n-                        return \"realm.edit\";\n-                    }\n-                });\n-            }\n+        @Override\n+        protected void onClickTemplate(final AjaxRequestTarget target) {\n+            templates.setTargetObject(realmTO);\n+            templates.toggle(target, true);\n+        }\n \n-            @Override\n-            protected void onClickDelete(final AjaxRequestTarget target, final RealmTO realmTO) {\n-                try {\n-                    if (realmTO.getKey() == null) {\n-                        throw new Exception(\"Root realm cannot be deleted\");\n-                    }\n-                    RealmRestClient.delete(realmTO.getFullPath());\n-                    RealmTO parent = realmChoicePanel.moveToParentRealm(realmTO.getKey());\n+        @Override\n+        protected void setWindowClosedReloadCallback(final BaseModal<?> modal) {\n+            modal.setWindowClosedCallback(target -> {\n+                if (modal.getContent() instanceof ResultPage) {\n+                    Serializable result = ResultPage.class.cast(modal.getContent()).getResult();\n+\n+                    RealmTO newRealmTO = RealmTO.class.cast(ProvisioningResult.class.cast(result).getEntity());\n+                    // reload realmChoicePanel label too - SYNCOPE-1151\n+                    target.add(realmChoicePanel.reloadRealmTree(target, Model.of(newRealmTO)));\n+                    realmChoicePanel.setCurrentRealm(newRealmTO);\n+                    send(Realms.this, Broadcast.DEPTH, new ChosenRealm<>(newRealmTO, target));\n+                } else {\n                     target.add(realmChoicePanel.reloadRealmTree(target));\n+                }\n+                target.add(content);\n+                modal.show(false);\n+            });\n+        }\n \n-                    SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n-                    updateRealmContent(parent, selectedIndex);\n-                    target.add(content);\n-                } catch (Exception e) {\n-                    LOG.error(\"While deleting realm\", e);\n-                    // Escape line breaks\n-                    SyncopeConsoleSession.get().error(e.getMessage().replace(\"\\n\", \" \"));\n+        @Override\n+        protected void onClickCreate(final AjaxRequestTarget target) {\n+            this.wizardBuilder.setParentPath(realmChoicePanel.getCurrentRealm().getFullPath());\n+            send(this, Broadcast.EXACT, new AjaxWizard.NewItemActionEvent<RealmTO>(new RealmTO(), target) {\n+\n+                @Override\n+                public String getEventDescription() {\n+                    return \"realm.new\";\n                 }\n-                ((BaseWebPage) Realms.this.getPage()).getNotificationPanel().refresh(target);\n-            }\n-        });\n-        return content;\n-    }\n+            });\n+        }\n \n-    public RealmChoicePanel getRealmChoicePanel() {\n-        return realmChoicePanel;\n+        @Override\n+        protected void onClickEdit(final AjaxRequestTarget target, final RealmTO realmTO) {\n+            this.wizardBuilder.setParentPath(realmTO.getFullPath());\n+            send(this, Broadcast.EXACT, new AjaxWizard.EditItemActionEvent<RealmTO>(realmTO, target) {\n+\n+                @Override\n+                public String getEventDescription() {\n+                    return \"realm.edit\";\n+                }\n+            });\n+        }\n+\n+        @Override\n+        protected void onClickDelete(final AjaxRequestTarget target, final RealmTO realmTO) {\n+            try {\n+                if (realmTO.getKey() == null) {\n+                    throw new Exception(\"Root realm cannot be deleted\");\n+                }\n+                RealmRestClient.delete(realmTO.getFullPath());\n+                RealmTO parent = realmChoicePanel.moveToParentRealm(realmTO.getKey());\n+                target.add(realmChoicePanel.reloadRealmTree(target));\n+\n+                SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+                updateRealmContent(parent, selectedIndex);\n+                target.add(content);\n+            } catch (Exception e) {\n+                LOG.error(\"While deleting realm\", e);\n+                // Escape line breaks\n+                SyncopeConsoleSession.get().error(e.getMessage().replace(\"\\n\", \" \"));\n+            }\n+            ((BaseWebPage) Realms.this.getPage()).getNotificationPanel().refresh(target);\n+        }\n     }\n }"},{"sha":"ec9590ab6a38eb3ddc140ca6244619a6d5405a18","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -83,7 +83,7 @@ Panel supply(\n                 PageReference pageRef);\n     }\n \n-    protected static DirectoryPanelSupplier DEFAULT_DIRECTORYPANEL_SUPPLIER =\n+    protected static final DirectoryPanelSupplier DEFAULT_DIRECTORYPANEL_SUPPLIER =\n             (id, anyTypeTO, realmTO, anyLayout, pageRef) -> {\n \n                 Panel panel;"},{"sha":"8ce77699149a75776c0b2a7c41629c44e5dbe619","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java","status":"modified","additions":115,"deletions":96,"changes":211,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -33,15 +33,13 @@\n import org.apache.syncope.client.ui.commons.status.StatusUtils;\n import org.apache.syncope.client.console.layout.AnyLayout;\n import org.apache.syncope.client.console.layout.AnyLayoutUtils;\n-import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.client.console.wizards.any.ConnObjectPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n@@ -55,7 +53,6 @@\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -66,24 +63,32 @@ public abstract class Realm extends WizardMgtPanel<RealmTO> {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(Realm.class);\n \n-    private final RealmTO realmTO;\n+    protected final RealmTO realmTO;\n \n-    private final List<AnyTypeTO> anyTypes;\n+    protected final List<AnyTypeTO> anyTypes;\n+\n+    protected final int selectedIndex;\n \n     protected final RealmWizardBuilder wizardBuilder;\n \n-    public Realm(final String id, final RealmTO realmTO, final PageReference pageRef, final int selectedIndex) {\n+    public Realm(\n+            final String id,\n+            final RealmTO realmTO,\n+            final List<AnyTypeTO> anyTypes,\n+            final int selectedIndex,\n+            final PageReference pageRef) {\n+\n         super(id, true);\n         this.realmTO = realmTO;\n-        this.anyTypes = AnyTypeRestClient.listAnyTypes();\n+        this.anyTypes = anyTypes;\n+        this.selectedIndex = selectedIndex;\n \n         setPageRef(pageRef);\n \n-        AjaxBootstrapTabbedPanel<ITab> tabbedPanel =\n-                new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList(pageRef));\n-        tabbedPanel.setSelectedTab(selectedIndex);\n-        addInnerObject(tabbedPanel);\n-        this.wizardBuilder = new RealmWizardBuilder(pageRef);\n+        addInnerObject(new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList(pageRef)).\n+                setSelectedTab(selectedIndex));\n+\n+        this.wizardBuilder = buildNewItemPanelBuilder(pageRef);\n         addNewItemPanelBuilder(this.wizardBuilder, false);\n \n         setShowResultPage(true);\n@@ -92,81 +97,25 @@ public Realm(final String id, final RealmTO realmTO, final PageReference pageRef\n         setWindowClosedReloadCallback(modal);\n     }\n \n+    protected RealmWizardBuilder buildNewItemPanelBuilder(final PageReference pageRef) {\n+        return new RealmWizardBuilder(pageRef);\n+    }\n+\n     public RealmTO getRealmTO() {\n         return realmTO;\n     }\n \n-    private List<ITab> buildTabList(final PageReference pageRef) {\n+    protected List<ITab> buildTabList(final PageReference pageRef) {\n         List<ITab> tabs = new ArrayList<>();\n \n-        tabs.add(new ITabComponent(new Model<>(\"DETAILS\"),\n-                IdRepoEntitlement.REALM_CREATE, IdRepoEntitlement.REALM_UPDATE, IdRepoEntitlement.REALM_DELETE) {\n-\n-            private static final long serialVersionUID = -5861786415855103549L;\n-\n-            @Override\n-            public Panel getPanel(final String panelId) {\n-                final ActionsPanel<RealmTO> actionPanel = new ActionsPanel<>(\"actions\", null);\n-\n-                if (StringUtils.startsWith(realmTO.getFullPath(), SyncopeConstants.ROOT_REALM)) {\n-                    actionPanel.add(new ActionLink<>(realmTO) {\n-\n-                        private static final long serialVersionUID = 2802988981431379827L;\n-\n-                        @Override\n-                        public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n-                            onClickCreate(target);\n-                        }\n-                    }, ActionLink.ActionType.CREATE, IdRepoEntitlement.REALM_CREATE).hideLabel();\n-\n-                    actionPanel.add(new ActionLink<>(realmTO) {\n-\n-                        private static final long serialVersionUID = 2802988981431379828L;\n-\n-                        @Override\n-                        public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n-                            onClickEdit(target, realmTO);\n-                        }\n-                    }, ActionLink.ActionType.EDIT, IdRepoEntitlement.REALM_UPDATE).hideLabel();\n-\n-                    actionPanel.add(new ActionLink<>(realmTO) {\n-\n-                        private static final long serialVersionUID = 2802988981431379827L;\n-\n-                        @Override\n-                        public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n-                            onClickTemplate(target);\n-                        }\n-                    }, ActionLink.ActionType.TEMPLATE, IdRepoEntitlement.REALM_UPDATE).hideLabel();\n-\n-                    actionPanel.add(new ActionLink<>(realmTO) {\n-\n-                        private static final long serialVersionUID = 2802988981431379829L;\n-\n-                        @Override\n-                        public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n-                            onClickDelete(target, realmTO);\n-                        }\n-                    }, ActionLink.ActionType.DELETE, IdRepoEntitlement.REALM_DELETE, true).hideLabel();\n-                }\n-\n-                RealmDetails panel = new RealmDetails(panelId, realmTO, actionPanel, false);\n-                panel.setContentEnabled(false);\n-                actionPanel.setEnabled(true);\n-                return panel;\n-            }\n-\n-            @Override\n-            public boolean isVisible() {\n-                return SyncopeWebApplication.get().getSecuritySettings().getAuthorizationStrategy().\n-                        isActionAuthorized(this, RENDER);\n-            }\n-        });\n+        tabs.add(new RealmDetailsTabPanel());\n \n         AnyLayout anyLayout = AnyLayoutUtils.fetch(\n-                anyTypes.stream().map(EntityTO::getKey).collect(Collectors.toList()));\n+                anyTypes.stream().map(AnyTypeTO::getKey).collect(Collectors.toList()));\n         for (AnyTypeTO anyType : anyTypes) {\n-            tabs.add(new ITabComponent(new Model<>(anyType.getKey()), String.format(\"%s_SEARCH\", anyType.getKey())) {\n+            tabs.add(new ITabComponent(\n+                    new ResourceModel(\"anyType.\" + anyType.getKey(), anyType.getKey()),\n+                    String.format(\"%s_SEARCH\", anyType.getKey())) {\n \n                 private static final long serialVersionUID = 1169585538404171118L;\n \n@@ -194,19 +143,19 @@ protected Panel customResultBody(final String panelId, final RealmTO item, final\n             throw new IllegalStateException(\"Unsupported result type\");\n         }\n \n-        final MultilevelPanel mlp = new MultilevelPanel(panelId);\n+        MultilevelPanel mlp = new MultilevelPanel(panelId);\n         add(mlp);\n \n-        final PropagationStatus syncope = new PropagationStatus();\n+        PropagationStatus syncope = new PropagationStatus();\n         syncope.setStatus(ExecStatus.SUCCESS);\n         syncope.setResource(Constants.SYNCOPE);\n \n         List<PropagationStatus> propagations = new ArrayList<>();\n         propagations.add(syncope);\n         propagations.addAll(((ProvisioningResult) result).getPropagationStatuses());\n \n-        ListViewPanel.Builder<PropagationStatus> builder = new ListViewPanel.Builder<>(\n-            PropagationStatus.class, pageRef) {\n+        ListViewPanel.Builder<PropagationStatus> builder =\n+                new ListViewPanel.Builder<>(PropagationStatus.class, pageRef) {\n \n             private static final long serialVersionUID = -6809736686861678498L;\n \n@@ -215,19 +164,21 @@ protected Component getValueComponent(final String key, final PropagationStatus\n                 if (\"afterObj\".equalsIgnoreCase(key)) {\n                     ConnObjectTO afterObj = bean.getAfterObj();\n                     String remoteId = afterObj == null\n-                        || afterObj.getAttrs().isEmpty()\n-                        || afterObj.getAttr(ConnIdSpecialName.NAME).isEmpty()\n-                        || afterObj.getAttr(ConnIdSpecialName.NAME).get().getValues() == null\n-                        || afterObj.getAttr(ConnIdSpecialName.NAME).get().getValues().isEmpty()\n-                        ? StringUtils.EMPTY\n-                        : afterObj.getAttr(ConnIdSpecialName.NAME).get().getValues().get(0);\n+                            || afterObj.getAttrs().isEmpty()\n+                            || afterObj.getAttr(ConnIdSpecialName.NAME).isEmpty()\n+                            || afterObj.getAttr(ConnIdSpecialName.NAME).get().getValues() == null\n+                            || afterObj.getAttr(ConnIdSpecialName.NAME).get().getValues().isEmpty()\n+                            ? StringUtils.EMPTY\n+                            : afterObj.getAttr(ConnIdSpecialName.NAME).get().getValues().get(0);\n \n                     return new Label(\"field\", remoteId);\n-                } else if (\"status\".equalsIgnoreCase(key)) {\n+                }\n+\n+                if (\"status\".equalsIgnoreCase(key)) {\n                     return StatusUtils.getStatusImagePanel(\"field\", bean.getStatus());\n-                } else {\n-                    return super.getValueComponent(key, bean);\n                 }\n+\n+                return super.getValueComponent(key, bean);\n             }\n         };\n \n@@ -244,8 +195,8 @@ protected Component getValueComponent(final String key, final PropagationStatus\n             @Override\n             protected boolean statusCondition(final PropagationStatus bean) {\n                 return !Constants.SYNCOPE.equals(bean.getResource())\n-                    && (ExecStatus.CREATED == bean.getStatus()\n-                    || ExecStatus.SUCCESS == bean.getStatus());\n+                        && (ExecStatus.CREATED == bean.getStatus()\n+                        || ExecStatus.SUCCESS == bean.getStatus());\n             }\n \n             @Override\n@@ -282,13 +233,13 @@ public void onClick(final AjaxRequestTarget target, final PropagationStatus stat\n \n     protected abstract void onClickDelete(AjaxRequestTarget target, RealmTO realmTO);\n \n-    static class RemoteRealmPanel extends RemoteObjectPanel {\n+    protected static class RemoteRealmPanel extends RemoteObjectPanel {\n \n         private static final long serialVersionUID = 4303365227411467563L;\n \n-        private final PropagationStatus bean;\n+        protected final PropagationStatus bean;\n \n-        RemoteRealmPanel(final PropagationStatus bean) {\n+        protected RemoteRealmPanel(final PropagationStatus bean) {\n             this.bean = bean;\n             add(new ConnObjectPanel(\n                     REMOTE_OBJECT_PANEL_ID,\n@@ -302,4 +253,72 @@ protected final Pair<ConnObjectTO, ConnObjectTO> getConnObjectTOs() {\n             return Pair.of(bean.getBeforeObj(), bean.getAfterObj());\n         }\n     }\n+\n+    protected class RealmDetailsTabPanel extends ITabComponent {\n+\n+        private static final long serialVersionUID = -5861786415855103549L;\n+\n+        protected RealmDetailsTabPanel() {\n+            super(new ResourceModel(\"realm.details\", \"DETAILS\"),\n+                    IdRepoEntitlement.REALM_CREATE, IdRepoEntitlement.REALM_UPDATE, IdRepoEntitlement.REALM_DELETE);\n+        }\n+\n+        @Override\n+        public Panel getPanel(final String panelId) {\n+            ActionsPanel<RealmTO> actionPanel = new ActionsPanel<>(\"actions\", null);\n+\n+            if (StringUtils.startsWith(realmTO.getFullPath(), SyncopeConstants.ROOT_REALM)) {\n+                actionPanel.add(new ActionLink<>(realmTO) {\n+\n+                    private static final long serialVersionUID = 2802988981431379827L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n+                        onClickCreate(target);\n+                    }\n+                }, ActionLink.ActionType.CREATE, IdRepoEntitlement.REALM_CREATE).hideLabel();\n+\n+                actionPanel.add(new ActionLink<>(realmTO) {\n+\n+                    private static final long serialVersionUID = 2802988981431379828L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n+                        onClickEdit(target, realmTO);\n+                    }\n+                }, ActionLink.ActionType.EDIT, IdRepoEntitlement.REALM_UPDATE).hideLabel();\n+\n+                actionPanel.add(new ActionLink<>(realmTO) {\n+\n+                    private static final long serialVersionUID = 2802988981431379827L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n+                        onClickTemplate(target);\n+                    }\n+                }, ActionLink.ActionType.TEMPLATE, IdRepoEntitlement.REALM_UPDATE).hideLabel();\n+\n+                actionPanel.add(new ActionLink<>(realmTO) {\n+\n+                    private static final long serialVersionUID = 2802988981431379829L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n+                        onClickDelete(target, realmTO);\n+                    }\n+                }, ActionLink.ActionType.DELETE, IdRepoEntitlement.REALM_DELETE, true).hideLabel();\n+            }\n+\n+            RealmDetails panel = new RealmDetails(panelId, realmTO, actionPanel, false);\n+            panel.setContentEnabled(false);\n+            actionPanel.setEnabled(true);\n+            return panel;\n+        }\n+\n+        @Override\n+        public boolean isVisible() {\n+            return SyncopeWebApplication.get().getSecuritySettings().getAuthorizationStrategy().\n+                    isActionAuthorized(this, RENDER);\n+        }\n+    }\n }"},{"sha":"da1cbe86368d59c131e80c507d852ac5ed52db41","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":137,"deletions":140,"changes":277,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -59,6 +59,7 @@\n import org.apache.wicket.markup.html.link.AbstractLink;\n import org.apache.wicket.markup.html.panel.Fragment;\n import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n@@ -68,34 +69,36 @@ public class RealmChoicePanel extends Panel {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n-    private static final String SEARCH_REALMS = \"searchRealms\";\n+    protected static final String SEARCH_REALMS = \"searchRealms\";\n \n-    private final PageReference pageRef;\n+    protected final PageReference pageRef;\n \n-    private final LoadableDetachableModel<List<Pair<String, RealmTO>>> realmTree;\n+    protected final LoadableDetachableModel<List<Pair<String, RealmTO>>> realmTree;\n \n-    private final LoadableDetachableModel<List<DynRealmTO>> dynRealmTree;\n+    protected final LoadableDetachableModel<List<DynRealmTO>> dynRealmTree;\n \n-    private final WebMarkupContainerNoVeil container;\n+    protected final WebMarkupContainerNoVeil container;\n \n-    private Model<RealmTO> model;\n+    protected Model<RealmTO> model;\n \n-    private final Collection<String> availableRealms;\n+    protected final Map<String, Pair<RealmTO, List<RealmTO>>> tree;\n \n-    private final Map<String, Pair<RealmTO, List<RealmTO>>> tree;\n+    protected final List<AbstractLink> links = new ArrayList<>();\n \n-    private final List<AbstractLink> links = new ArrayList<>();\n+    protected String searchQuery;\n \n-    private String searchQuery;\n+    protected List<RealmTO> realmsChoices;\n \n-    private List<RealmTO> realmsChoices;\n+    protected final boolean isSearchEnabled;\n \n-    private final boolean isSearchEnabled;\n+    protected final Label realmDisplayKey;\n \n-    public RealmChoicePanel(final String id, final PageReference pageRef) {\n+    protected final Label realmDisplayValue;\n+\n+    public RealmChoicePanel(final String id, final String initialRealm, final PageReference pageRef) {\n         super(id);\n         this.pageRef = pageRef;\n-        availableRealms = SyncopeConsoleSession.get().getSearchableRealms();\n+\n         tree = new HashMap<>();\n         isSearchEnabled = RealmsUtils.isSearchEnabled(SyncopeConsoleSession.get().getSearchableRealms());\n \n@@ -106,23 +109,18 @@ public RealmChoicePanel(final String id, final PageReference pageRef) {\n             @Override\n             protected List<Pair<String, RealmTO>> load() {\n                 Map<String, Pair<RealmTO, List<RealmTO>>> map = reloadRealmParentMap();\n-                List<Pair<String, RealmTO>> full;\n+                Stream<Pair<String, RealmTO>> full;\n                 if (isSearchEnabled) {\n-                    full = map.entrySet().stream().map(el -> Pair.of(\n-                        el.getKey(),\n-                        el.getValue().getLeft())).\n-                        collect(Collectors.toList());\n+                    full = map.entrySet().stream().\n+                            map(el -> Pair.of(el.getKey(), el.getValue().getLeft()));\n                 } else {\n                     full = map.entrySet().stream().\n-                        map(el -> Pair.of(\n-                            el.getValue().getLeft().getFullPath(),\n-                            el.getValue().getKey())).\n-                        sorted(Comparator.comparing(Pair::getLeft)).\n-                        collect(Collectors.toList());\n+                            map(el -> Pair.of(el.getValue().getLeft().getFullPath(), el.getValue().getKey())).\n+                            sorted(Comparator.comparing(Pair::getLeft));\n                 }\n-                return full.stream().filter(realm -> availableRealms.stream().anyMatch(\n-                    availableRealm -> realm.getValue().getFullPath().startsWith(availableRealm))).\n-                    collect(Collectors.toList());\n+                return full.filter(realm -> SyncopeConsoleSession.get().getSearchableRealms().stream().anyMatch(\n+                        availableRealm -> realm.getValue().getFullPath().startsWith(availableRealm))).\n+                        collect(Collectors.toList());\n             }\n         };\n \n@@ -132,30 +130,31 @@ protected List<Pair<String, RealmTO>> load() {\n \n             @Override\n             protected List<DynRealmTO> load() {\n-                List<DynRealmTO> dynRealms = RealmRestClient.listDynReams();\n+                List<DynRealmTO> dynRealms = RealmRestClient.listDynRealms();\n                 dynRealms.sort((left, right) -> {\n                     if (left == null) {\n                         return -1;\n-                    } else if (right == null) {\n+                    }\n+                    if (right == null) {\n                         return 1;\n-                    } else {\n-                        return left.getKey().compareTo(right.getKey());\n                     }\n+                    return left.getKey().compareTo(right.getKey());\n                 });\n-                return dynRealms.stream().filter(dynRealm -> availableRealms.stream().\n-                    anyMatch(availableRealm -> SyncopeConstants.ROOT_REALM.equals(availableRealm)\n+                return dynRealms.stream().filter(dynRealm -> SyncopeConsoleSession.get().getSearchableRealms().stream().\n+                        anyMatch(availableRealm -> SyncopeConstants.ROOT_REALM.equals(availableRealm)\n                         || dynRealm.getKey().equals(availableRealm))).collect(Collectors.toList());\n             }\n         };\n \n-        RealmTO realmTO = SyncopeConsoleSession.get().getRootRealm().map(rootRealm -> {\n+        RealmTO realm = SyncopeConsoleSession.get().getRootRealm(initialRealm).map(rootRealm -> {\n             String rootRealmName = StringUtils.substringAfterLast(rootRealm, \"/\");\n \n             List<RealmTO> realmTOs = RealmRestClient.search(\n                     RealmsUtils.buildQuery(SyncopeConstants.ROOT_REALM.equals(rootRealm)\n                             ? SyncopeConstants.ROOT_REALM : rootRealmName)).getResult();\n \n-            return realmTOs.stream().filter(realm -> rootRealm.equals(realm.getFullPath())).findFirst().\n+            return realmTOs.stream().\n+                    filter(r -> rootRealm.equals(r.getFullPath())).findFirst().\n                     orElseGet(() -> {\n                         RealmTO placeholder = new RealmTO();\n                         placeholder.setName(rootRealmName);\n@@ -164,90 +163,98 @@ protected List<DynRealmTO> load() {\n                     });\n         }).orElseGet(RealmTO::new);\n \n-        model = Model.of(realmTO);\n-        searchQuery = realmTO.getName();\n+        model = Model.of(realm);\n+        searchQuery = realm.getName();\n+\n         container = new WebMarkupContainerNoVeil(\"container\", realmTree);\n-        container.setOutputMarkupId(true);\n-        add(container);\n+        add(container.setOutputMarkupId(true));\n+\n+        realmDisplayKey = new Label(\"realmDisplayKey\", realmDisplayKeyModel(null));\n+        container.addOrReplace(realmDisplayKey.setOutputMarkupId(true).setOutputMarkupPlaceholderTag(true));\n+        realmDisplayValue = new Label(\"realmDisplayValue\", realmDisplayValueText());\n+        container.addOrReplace(realmDisplayValue.setOutputMarkupId(true).setOutputMarkupPlaceholderTag(true));\n+\n         reloadRealmTree();\n     }\n \n-    public final void reloadRealmTree() {\n-        Label realmLabel = new Label(\"realmLabel\", new Model<>());\n-        realmLabel.setOutputMarkupId(true);\n-\n-        container.addOrReplace(realmLabel);\n+    protected IModel<String> realmDisplayKeyModel(final Boolean dynamic) {\n+        return dynamic == null\n+                ? model.getObject().getFullPath().startsWith(SyncopeConstants.ROOT_REALM)\n+                ? new ResourceModel(\"realmDisplayKey\", \"Realm\")\n+                : new ResourceModel(\"dynRealmLabel\", \"Dynamic Realm\")\n+                : dynamic\n+                        ? new ResourceModel(\"dynRealmLabel\", \"Dynamic Realm\")\n+                        : new ResourceModel(\"realmDisplayKey\", \"Realm\");\n+    }\n \n-        if (StringUtils.startsWith(model.getObject().getFullPath(), SyncopeConstants.ROOT_REALM)) {\n-            realmLabel.setDefaultModel(new ResourceModel(\"realmLabel\", \"Realm\"));\n-        } else {\n-            realmLabel.setDefaultModel(new ResourceModel(\"dynRealmLabel\", \"Dynamic Realm\"));\n-        }\n+    protected String realmDisplayValueText() {\n+        return RealmsUtils.getFullPath(model.getObject().getFullPath());\n+    }\n \n-        Label label = new Label(\"realm\", RealmsUtils.getFullPath(model.getObject().getFullPath()));\n-        label.setOutputMarkupId(true);\n-        container.addOrReplace(label);\n+    protected void chooseRealm(final RealmTO realm, final AjaxRequestTarget target) {\n+        model.setObject(realm);\n+        realmDisplayValue.setDefaultModelObject(realmDisplayValueText());\n+        realmDisplayKey.setDefaultModel(realmDisplayKeyModel(false));\n+        target.add(realmDisplayValue);\n+        send(pageRef.getPage(), Broadcast.EXACT, new ChosenRealm<>(realm, target));\n+    }\n \n+    public void reloadRealmTree() {\n         if (isSearchEnabled) {\n             realmsChoices = buildRealmChoices();\n-            final AutoCompleteSettings settings = new AutoCompleteSettings();\n+            AutoCompleteSettings settings = new AutoCompleteSettings();\n             settings.setShowCompleteListOnFocusGain(false);\n             settings.setShowListOnEmptyInput(false);\n \n-            final AutoCompleteTextField<String> searchRealms =\n-                new AutoCompleteTextField<>(SEARCH_REALMS, new Model<>(), settings) {\n+            AutoCompleteTextField<String> searchRealms =\n+                    new AutoCompleteTextField<>(SEARCH_REALMS, new Model<>(), settings) {\n \n-                    private static final long serialVersionUID = -6635259975264955783L;\n+                private static final long serialVersionUID = -6635259975264955783L;\n \n-                    @Override\n-                    protected Iterator<String> getChoices(final String input) {\n-                        searchQuery = input;\n-                        realmsChoices = RealmsUtils.checkInput(input)\n+                @Override\n+                protected Iterator<String> getChoices(final String input) {\n+                    searchQuery = input;\n+                    realmsChoices = RealmsUtils.checkInput(input)\n                             ? buildRealmChoices()\n                             : List.of();\n-                        return realmsChoices.stream().\n-                            map(RealmTO::getFullPath).sorted().collect(Collectors.toList()).iterator();\n-                    }\n+                    return realmsChoices.stream().map(RealmTO::getFullPath).sorted().iterator();\n+                }\n \n-                    @Override\n-                    protected AutoCompleteBehavior<String> newAutoCompleteBehavior(\n+                @Override\n+                protected AutoCompleteBehavior<String> newAutoCompleteBehavior(\n                         final IAutoCompleteRenderer<String> renderer,\n                         final AutoCompleteSettings settings) {\n-                        return super.newAutoCompleteBehavior(new AbstractAutoCompleteRenderer<>() {\n \n-                            private static final long serialVersionUID = -4789925973199139157L;\n+                    return super.newAutoCompleteBehavior(new AbstractAutoCompleteRenderer<>() {\n+\n+                        private static final long serialVersionUID = -4789925973199139157L;\n \n-                            @Override\n-                            protected void renderChoice(\n+                        @Override\n+                        protected void renderChoice(\n                                 final String object,\n                                 final Response response,\n                                 final String criteria) {\n-                                response.write(object);\n-                            }\n-\n-                            @Override\n-                            protected String getTextValue(final String object) {\n-                                return object;\n-                            }\n-                        }, settings);\n-                    }\n-                };\n+\n+                            response.write(object);\n+                        }\n+\n+                        @Override\n+                        protected String getTextValue(final String object) {\n+                            return object;\n+                        }\n+                    }, settings);\n+                }\n+            };\n \n             searchRealms.add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n                 private static final long serialVersionUID = -6139318907146065915L;\n \n                 @Override\n                 protected void onUpdate(final AjaxRequestTarget target) {\n-                    realmsChoices.stream().filter(\n-                            item -> item.getFullPath().equals(searchRealms.getModelObject())).\n-                            findFirst().ifPresent(realm -> {\n-                                model.setObject(realm);\n-                                label.setDefaultModelObject(model.getObject().getFullPath());\n-                                realmLabel.setDefaultModel(new ResourceModel(\"realmLabel\", \"Realm\"));\n-                                target.add(label);\n-                                send(pageRef.getPage(), Broadcast.EXACT, new ChosenRealm<>(realm, target));\n-                            });\n+                    realmsChoices.stream().\n+                            filter(item -> item.getFullPath().equals(searchRealms.getModelObject())).\n+                            findFirst().ifPresent(realm -> chooseRealm(realm, target));\n                 }\n             });\n \n@@ -262,7 +269,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n                 @Override\n                 protected List<AbstractLink> newSubMenuButtons(final String buttonMarkupId) {\n-                    buildRealmLinks(label, realmLabel);\n+                    buildRealmLinks();\n                     return RealmChoicePanel.this.links;\n                 }\n             };\n@@ -277,13 +284,13 @@ protected List<AbstractLink> newSubMenuButtons(final String buttonMarkupId) {\n         }\n     }\n \n-    private void buildRealmLinks(final Label label, final Label realmLabel) {\n+    protected void buildRealmLinks() {\n         RealmChoicePanel.this.links.clear();\n         RealmChoicePanel.this.links.add(new BootstrapAjaxLink<>(\n-            ButtonList.getButtonMarkupId(),\n-            new Model<>(),\n-            Buttons.Type.Link,\n-            new ResourceModel(\"realms\", \"Realms\")) {\n+                ButtonList.getButtonMarkupId(),\n+                new Model<>(),\n+                Buttons.Type.Link,\n+                new ResourceModel(\"realms\", \"Realms\")) {\n \n             private static final long serialVersionUID = -7978723352517770744L;\n \n@@ -304,36 +311,31 @@ protected void onComponentTag(final ComponentTag tag) {\n \n         realmTree.getObject().forEach(link -> {\n             RealmChoicePanel.this.links.add(new BootstrapAjaxLink<>(\n-                ButtonList.getButtonMarkupId(),\n-                Model.of(link.getRight()),\n-                Buttons.Type.Link,\n-                new Model<>(link.getLeft())) {\n+                    ButtonList.getButtonMarkupId(),\n+                    Model.of(link.getRight()),\n+                    Buttons.Type.Link,\n+                    new Model<>(link.getLeft())) {\n \n                 private static final long serialVersionUID = -7978723352517770644L;\n \n                 @Override\n                 public void onClick(final AjaxRequestTarget target) {\n-                    model.setObject(link.getRight());\n-                    label.setDefaultModelObject(model.getObject().getFullPath());\n-                    realmLabel.setDefaultModel(new ResourceModel(\"realmLabel\", \"Realm\"));\n-                    target.add(label);\n-                    send(pageRef.getPage(), Broadcast.EXACT, new ChosenRealm<>(link.getRight(), target));\n+                    chooseRealm(link.getRight(), target);\n                 }\n             });\n         });\n \n         if (!dynRealmTree.getObject().isEmpty()) {\n             RealmChoicePanel.this.links.add(new BootstrapAjaxLink<>(\n-                ButtonList.getButtonMarkupId(),\n-                new Model<>(),\n-                Buttons.Type.Link,\n-                new ResourceModel(\"dynrealms\", \"Dynamic Realms\")) {\n+                    ButtonList.getButtonMarkupId(),\n+                    new Model<>(),\n+                    Buttons.Type.Link,\n+                    new ResourceModel(\"dynrealms\", \"Dynamic Realms\")) {\n \n                 private static final long serialVersionUID = -7978723352517770744L;\n \n                 @Override\n                 public void onClick(final AjaxRequestTarget target) {\n-\n                 }\n \n                 @Override\n@@ -348,34 +350,44 @@ protected void onComponentTag(final ComponentTag tag) {\n             });\n \n             dynRealmTree.getObject().forEach(dynRealmTO -> {\n-                final RealmTO realmTO = new RealmTO();\n-                realmTO.setKey(dynRealmTO.getKey());\n-                realmTO.setName(dynRealmTO.getKey());\n-                realmTO.setFullPath(dynRealmTO.getKey());\n+                RealmTO realm = new RealmTO();\n+                realm.setKey(dynRealmTO.getKey());\n+                realm.setName(dynRealmTO.getKey());\n+                realm.setFullPath(dynRealmTO.getKey());\n \n                 RealmChoicePanel.this.links.add(new BootstrapAjaxLink<>(\n-                    ButtonList.getButtonMarkupId(),\n-                    new Model<>(),\n-                    Buttons.Type.Link,\n-                    new Model<>(realmTO.getKey())) {\n+                        ButtonList.getButtonMarkupId(),\n+                        new Model<>(),\n+                        Buttons.Type.Link,\n+                        new Model<>(realm.getKey())) {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n-                        model.setObject(realmTO);\n-                        label.setDefaultModelObject(realmTO.getKey());\n-                        realmLabel.setDefaultModel(new ResourceModel(\"dynRealmLabel\", \"Dynamic Realm\"));\n-                        target.add(label);\n-                        send(pageRef.getPage(), Broadcast.EXACT, new ChosenRealm<>(realmTO, target));\n+                        chooseRealm(realm, target);\n                     }\n                 });\n             });\n         }\n     }\n \n+    protected List<RealmTO> buildRealmChoices() {\n+        return Stream.of(\n+                realmTree.getObject().stream().map(Pair::getValue).collect(Collectors.toList()),\n+                dynRealmTree.getObject().stream().map(item -> {\n+                    RealmTO realm = new RealmTO();\n+                    realm.setKey(item.getKey());\n+                    realm.setName(item.getKey());\n+                    realm.setFullPath(item.getKey());\n+                    return realm;\n+                }).collect(Collectors.toList())).flatMap(Collection::stream).\n+                collect(Collectors.toList());\n+    }\n+\n     public final RealmChoicePanel reloadRealmTree(final AjaxRequestTarget target) {\n         reloadRealmTree();\n+        chooseRealm(model.getObject(), target);\n         target.add(container);\n         return this;\n     }\n@@ -386,7 +398,7 @@ public final RealmChoicePanel reloadRealmTree(final AjaxRequestTarget target, fi\n         return this;\n     }\n \n-    private Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap() {\n+    protected Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap() {\n         List<RealmTO> realmsToList = isSearchEnabled\n                 ? RealmRestClient.search(RealmsUtils.buildQuery(searchQuery)).getResult()\n                 : RealmRestClient.list();\n@@ -396,7 +408,7 @@ private Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap() {\n                 collect(Collectors.toList()));\n     }\n \n-    private Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap(final List<RealmTO> realms) {\n+    protected Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap(final List<RealmTO> realms) {\n         tree.clear();\n \n         Map<String, List<RealmTO>> cache = new HashMap<>();\n@@ -421,20 +433,6 @@ private Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap(final Lis\n         return tree;\n     }\n \n-    private List<RealmTO> buildRealmChoices() {\n-        return Stream.of(\n-                realmTree.getObject().stream().map(Pair::getValue).collect(Collectors.toList()),\n-                dynRealmTree.getObject().stream().map(\n-                        item -> {\n-                            final RealmTO realmTO = new RealmTO();\n-                            realmTO.setKey(item.getKey());\n-                            realmTO.setName(item.getKey());\n-                            realmTO.setFullPath(item.getKey());\n-                            return realmTO;\n-                        }).collect(Collectors.toList())).flatMap(Collection::stream).\n-                collect(Collectors.toList());\n-    }\n-\n     /**\n      * Gets current selected realm.\n      *\n@@ -458,14 +456,13 @@ public RealmTO moveToParentRealm(final String key) {\n             }\n         }\n         return null;\n-\n     }\n \n     public static class ChosenRealm<T> {\n \n-        private final AjaxRequestTarget target;\n+        protected final AjaxRequestTarget target;\n \n-        private final T obj;\n+        protected final T obj;\n \n         public ChosenRealm(final T obj, final AjaxRequestTarget target) {\n             this.obj = obj;"},{"sha":"ccdbe6138852a76c1a24de57364806bed9537260","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmDetails.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -57,7 +57,7 @@ public class RealmDetails extends Panel {\n         @Override\n         protected List<String> load() {\n             return ImplementationRestClient.list(IdRepoImplementationType.LOGIC_ACTIONS).stream().\n-                map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n \n@@ -71,6 +71,8 @@ protected List<String> load() {\n         }\n     };\n \n+    private final ActionsPanel<RealmTO> actionsPanel;\n+\n     @SpringBean\n     private RealmPolicyProvider realmPolicyProvider;\n \n@@ -83,11 +85,13 @@ public RealmDetails(final String id, final RealmTO realmTO) {\n     public RealmDetails(\n             final String id,\n             final RealmTO realmTO,\n-            final ActionsPanel<?> actionsPanel,\n+            final ActionsPanel<RealmTO> actionsPanel,\n             final boolean unwrapped) {\n \n         super(id);\n \n+        this.actionsPanel = actionsPanel;\n+\n         container = new WebMarkupContainer(\"container\");\n         container.setOutputMarkupId(true);\n         container.setRenderBodyOnly(unwrapped);\n@@ -139,4 +143,8 @@ public RealmDetails setContentEnabled(final boolean enable) {\n         container.setEnabled(enable);\n         return this;\n     }\n+\n+    public ActionsPanel<RealmTO> getActionsPanel() {\n+        return actionsPanel;\n+    }\n }"},{"sha":"edefc3e4d812970dea22c2e28259577a6b86d7ce","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmWizardBuilder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmWizardBuilder.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -32,7 +32,7 @@ public class RealmWizardBuilder extends BaseAjaxWizardBuilder<RealmTO> {\n \n     private static final long serialVersionUID = 5945391813567245081L;\n \n-    private String parentPath;\n+    protected String parentPath;\n \n     /**\n      * Construct.\n@@ -69,7 +69,6 @@ public Realm(final RealmTO modelObject) {\n             realmDetail.add(new AttributeAppender(\"style\", \"overflow-x:hidden;\"));\n             add(realmDetail);\n         }\n-\n     }\n \n     public void setParentPath(final String parentPath) {"},{"sha":"46d5ca820da8ea0d3f4a8d40013438d86fd4d43c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/RealmRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -45,11 +45,11 @@ public static List<RealmTO> list() {\n         return getService(RealmService.class).list(SyncopeConstants.ROOT_REALM);\n     }\n \n-    public static List<DynRealmTO> listDynReams() {\n+    public static List<DynRealmTO> listDynRealms() {\n         return getService(DynRealmService.class).list();\n     }\n \n-    public static DynRealmTO readDynReams(final String key) {\n+    public static DynRealmTO readDynRealm(final String key) {\n         return getService(DynRealmService.class).read(key);\n     }\n "},{"sha":"a3979b3fa71041e91fa15da4a12fc38fb28b4f0e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/Action.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAction.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -69,7 +69,7 @@ public Action(final ActionLink<T> link, final ActionLink.ActionType type) {\n     }\n \n     public String[] getRealms() {\n-        return realms.toArray(new String[realms.size()]);\n+        return realms.toArray(String[]::new);\n     }\n \n     public void setRealm(final String realm) {"},{"sha":"3d598a515142867d2663db2b084656977b9bd43e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionsPanel.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionsPanel.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -82,6 +82,16 @@ public Action<T> add(final Action<T> action) {\n         return action;\n     }\n \n+    public Action<T> add(final int index, final Action<T> action) {\n+        actions.add(index, action);\n+        return action;\n+    }\n+\n+    public Action<T> set(final int index, final Action<T> action) {\n+        actions.set(index, action);\n+        return action;\n+    }\n+\n     public List<Action<T>> getActions() {\n         return actions;\n     }"},{"sha":"1f720a6f3282109e0e4901b8f9ee35fd1be91c05","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/NumberWidget.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -54,13 +54,13 @@ public NumberWidget(final String id, final String bg, final Number number, final\n         List<String> anyTypes = AnyTypeRestClient.list();\n         switch (id) {\n             case \"totalUsers\":\n-                pageParameters.add(\"selectedIndex\", 1);\n+                pageParameters.add(Realms.SELECTED_INDEX, 1);\n                 responsePage = Realms.class;\n                 isAuthorized = SyncopeConsoleSession.get().owns(IdRepoEntitlement.USER_SEARCH);\n                 break;\n \n             case \"totalGroups\":\n-                pageParameters.add(\"selectedIndex\", 2);\n+                pageParameters.add(Realms.SELECTED_INDEX, 2);\n                 responsePage = Realms.class;\n                 isAuthorized = SyncopeConsoleSession.get().owns(IdRepoEntitlement.GROUP_SEARCH);\n                 break;\n@@ -71,7 +71,7 @@ public NumberWidget(final String id, final String bg, final Number number, final\n                     for (int i = 0; i < anyTypes.size() && selectedIndex == null; i++) {\n                         if (anyTypes.get(i).equals(label)) {\n                             selectedIndex = i + 1;\n-                            pageParameters.add(\"selectedIndex\", selectedIndex);\n+                            pageParameters.add(Realms.SELECTED_INDEX, selectedIndex);\n                         }\n                     }\n                     responsePage = Realms.class;\n@@ -87,15 +87,15 @@ public NumberWidget(final String id, final String bg, final Number number, final\n                 for (int i = 0; i < anyTypes.size() && selectedIndex == null; i++) {\n                     if (anyTypes.get(i).equals(label)) {\n                         selectedIndex = i + 1;\n-                        pageParameters.add(\"selectedIndex\", selectedIndex);\n+                        pageParameters.add(Realms.SELECTED_INDEX, selectedIndex);\n                     }\n                 }\n                 responsePage = Realms.class;\n                 isAuthorized = SyncopeConsoleSession.get().owns(label + \"_SEARCH\");\n                 break;\n \n             default:\n-                pageParameters.add(\"selectedIndex\", 0);\n+                pageParameters.add(Realms.SELECTED_INDEX, 0);\n                 responsePage = Realms.class;\n         }\n "},{"sha":"06913899023f06ba2b3d43e8ad9d52ad637c87c5","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/RealmChoicePanel.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.html?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -20,7 +20,7 @@\n   <wicket:panel>\n     <div wicket:id=\"container\" class=\"realm-header\">\n       <div class=\"realm-label\">\n-        <label wicket:id=\"realmLabel\"/>: <label wicket:id=\"realm\"/> \n+        <label wicket:id=\"realmDisplayKey\"/>: <label wicket:id=\"realmDisplayValue\"/>\n       </div>\n       <span wicket:id=\"realmsFragment\"></span>\n "},{"sha":"ef3deee89b2c175d3dea690a4b57b265d095cea5","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -627,7 +627,7 @@ public List<ProvisioningReport> push(\n                 csvSchema(spec),\n                 null,\n                 os,\n-                columns.toArray(new String[columns.size()]))) {\n+                columns.toArray(String[]::new))) {\n \n             SyncopeStreamPushExecutor executor =\n                     (SyncopeStreamPushExecutor) ApplicationContextProvider.getBeanFactory()."},{"sha":"df5593da375c231ea5ebcf0c3cbcbc44fd935d03","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -310,8 +310,7 @@ public RealmTO getRealmTO(final Realm realm, final boolean admin) {\n         if (admin) {\n             realmTO.setAccountPolicy(realm.getAccountPolicy() == null ? null : realm.getAccountPolicy().getKey());\n             realmTO.setPasswordPolicy(realm.getPasswordPolicy() == null ? null : realm.getPasswordPolicy().getKey());\n-            realmTO.setAuthPolicy(\n-                    realm.getAuthPolicy() == null ? null : realm.getAuthPolicy().getKey());\n+            realmTO.setAuthPolicy(realm.getAuthPolicy() == null ? null : realm.getAuthPolicy().getKey());\n             realmTO.setAccessPolicy(realm.getAccessPolicy() == null ? null : realm.getAccessPolicy().getKey());\n             realmTO.setAttrReleasePolicy(\n                     realm.getAttrReleasePolicy() == null ? null : realm.getAttrReleasePolicy().getKey());"},{"sha":"47ee9853ab2b67b4f5718c23e0b87b310f083a23","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/RealmsITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java?ref=ac55c571f5ca4ea3ca118b626246fb4d5f1dbaea","patch":"@@ -73,7 +73,7 @@ public void create() {\n                 \"body:content:realmChoicePanel:container:realmsFragment:realms:dropdown-menu:buttons:5:button\",\n                 Constants.ON_CLICK);\n \n-        TESTER.assertLabel(\"body:content:realmChoicePanel:container:realm\", \"/testRealm\");\n+        TESTER.assertLabel(\"body:content:realmChoicePanel:container:realmDisplayValue\", \"/testRealm\");\n \n         TESTER.getRequest().addParameter(\"confirm\", \"true\");\n         TESTER.clickLink(\n@@ -86,7 +86,7 @@ public void create() {\n                 \"body:content:body:container:content:tabbedPanel:panel:container:policies:1:field-label\",\n                 \"Account Policy\");\n \n-        TESTER.assertLabel(\"body:content:realmChoicePanel:container:realm\", \"/\");\n+        TESTER.assertLabel(\"body:content:realmChoicePanel:container:realmDisplayValue\", \"/\");\n     }\n \n     @Test\n@@ -116,7 +116,7 @@ public void addUserTemplate() {\n                 \"body:content:realmChoicePanel:container:realmsFragment:realms:dropdown-menu:buttons:4:button\",\n                 Constants.ON_CLICK);\n \n-        TESTER.assertLabel(\"body:content:realmChoicePanel:container:realm\", \"/odd\");\n+        TESTER.assertLabel(\"body:content:realmChoicePanel:container:realmDisplayValue\", \"/odd\");\n \n         TESTER.clickLink(\n                 \"body:content:body:container:content:tabbedPanel:panel:actions:actions:actionRepeater:2:action:action\");\n@@ -136,7 +136,7 @@ public void addUserTemplate() {\n         assertSuccessMessage();\n         TESTER.cleanupFeedbackMessages();\n \n-        TESTER.assertLabel(\"body:content:realmChoicePanel:container:realm\", \"/odd\");\n+        TESTER.assertLabel(\"body:content:realmChoicePanel:container:realmDisplayValue\", \"/odd\");\n \n         TESTER.clickLink(\n                 \"body:content:body:container:content:tabbedPanel:panel:actions:actions:actionRepeater:2:action:action\");"}]}