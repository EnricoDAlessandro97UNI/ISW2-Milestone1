{"sha":"ce9d79d9907448298b7809fe41f7746a890c0b19","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNlOWQ3OWQ5OTA3NDQ4Mjk4Yjc4MDlmZTQxZjc3NDZhODkwYzBiMTk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-03-29T15:46:30Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-03-29T15:46:30Z"},"message":"[SYNCOPE-1410] Manage implementation types as Entitlements, e.g. allow for custom","tree":{"sha":"6082eec30bf863f6b7e27d65e3477bd4d88ae551","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6082eec30bf863f6b7e27d65e3477bd4d88ae551"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ce9d79d9907448298b7809fe41f7746a890c0b19","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ce9d79d9907448298b7809fe41f7746a890c0b19","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ce9d79d9907448298b7809fe41f7746a890c0b19","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ce9d79d9907448298b7809fe41f7746a890c0b19/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5f13c73f2132fd0413c84aed0855da49711eee7d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5f13c73f2132fd0413c84aed0855da49711eee7d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5f13c73f2132fd0413c84aed0855da49711eee7d"}],"stats":{"total":2633,"additions":1634,"deletions":999},"files":[{"sha":"4873fdfbfd4e92e4e704efbd01bf061ab96e7e20","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMImplementationInfoProvider.java","status":"added","additions":172,"deletions":0,"changes":172,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+\n+public class IdMImplementationInfoProvider extends IdRepoImplementationInfoProvider {\n+\n+    private static final long serialVersionUID = -5385695412826366167L;\n+\n+    public IdMImplementationInfoProvider(final ClassPathScanImplementationLookup lookup) {\n+        super(lookup);\n+    }\n+\n+    @Override\n+    public ViewMode getViewMode(final ImplementationTO implementation) {\n+        return IdMImplementationType.PULL_CORRELATION_RULE.equals(implementation.getType())\n+                || IdMImplementationType.PUSH_CORRELATION_RULE.equals(implementation.getType())\n+                ? ViewMode.JSON_BODY\n+                : super.getViewMode(implementation);\n+    }\n+\n+    @Override\n+    public List<String> getClasses(final ImplementationTO implementation, final ViewMode viewMode) {\n+        List<String> classes = Collections.emptyList();\n+        if (viewMode == ViewMode.JSON_BODY) {\n+            switch (implementation.getType()) {\n+                case IdMImplementationType.PULL_CORRELATION_RULE:\n+                    classes = lookup.getPullCorrelationRuleConfs().keySet().stream().\n+                            collect(Collectors.toList());\n+                    break;\n+\n+                case IdMImplementationType.PUSH_CORRELATION_RULE:\n+                    classes = lookup.getPushCorrelationRuleConfs().keySet().stream().\n+                            collect(Collectors.toList());\n+                    break;\n+\n+                default:\n+            }\n+            Collections.sort(classes);\n+        } else {\n+            classes = super.getClasses(implementation, viewMode);\n+        }\n+\n+        return classes;\n+    }\n+\n+    @Override\n+    public String getGroovyTemplateClassName(final String implementationType) {\n+        String templateClassName = null;\n+\n+        switch (implementationType) {\n+            case IdMImplementationType.ITEM_TRANSFORMER:\n+                templateClassName = \"MyItemTransformer\";\n+                break;\n+\n+            case IdMImplementationType.RECON_FILTER_BUILDER:\n+                templateClassName = \"MyReconFilterBuilder\";\n+                break;\n+\n+            case IdMImplementationType.PROPAGATION_ACTIONS:\n+                templateClassName = \"MyPropagationActions\";\n+                break;\n+\n+            case IdMImplementationType.PULL_ACTIONS:\n+                templateClassName = \"MyPullActions\";\n+                break;\n+\n+            case IdMImplementationType.PUSH_ACTIONS:\n+                templateClassName = \"MyPushActions\";\n+                break;\n+\n+            case IdMImplementationType.PULL_CORRELATION_RULE:\n+                templateClassName = \"MyPullCorrelationRule\";\n+                break;\n+\n+            case IdMImplementationType.PUSH_CORRELATION_RULE:\n+                templateClassName = \"MyPushCorrelationRule\";\n+                break;\n+\n+            default:\n+                templateClassName = super.getGroovyTemplateClassName(implementationType);\n+        }\n+\n+        return templateClassName;\n+    }\n+\n+    @Override\n+    public Class<?> getClass(final String implementationType, final String name) {\n+        Class<?> clazz = null;\n+        switch (implementationType) {\n+            case IdMImplementationType.PULL_CORRELATION_RULE:\n+                clazz = lookup.getPullCorrelationRuleConfs().get(name);\n+                break;\n+\n+            case IdMImplementationType.PUSH_CORRELATION_RULE:\n+                clazz = lookup.getPushCorrelationRuleConfs().get(name);\n+                break;\n+\n+            default:\n+                clazz = super.getClass(implementationType, name);\n+        }\n+\n+        return clazz;\n+    }\n+\n+    @Override\n+    public IModel<List<String>> getReconFilterBuilders() {\n+        return new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return implRestClient.list(IdMImplementationType.RECON_FILTER_BUILDER).stream().\n+                        map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public IModel<List<String>> getPullActions() {\n+        return new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return implRestClient.list(IdMImplementationType.PULL_ACTIONS).stream().\n+                        map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public IModel<List<String>> getPushActions() {\n+        return new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return implRestClient.list(IdMImplementationType.PUSH_ACTIONS).stream().\n+                        map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+            }\n+        };\n+    }\n+}"},{"sha":"d3b1630e8ffa947e845645c180af964a9959f636","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMPolicyTabProvider.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMPolicyTabProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMPolicyTabProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMPolicyTabProvider.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.policies.PullPolicyDirectoryPanel;\n+import org.apache.syncope.client.console.policies.PushPolicyDirectoryPanel;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.ResourceModel;\n+\n+public class IdMPolicyTabProvider extends IdRepoPolicyTabProvider {\n+\n+    private static final long serialVersionUID = 2822554006571803418L;\n+\n+    @Override\n+    public List<ITab> buildTabList(final PageReference pageRef) {\n+        List<ITab> tabs = super.buildTabList(pageRef);\n+\n+        tabs.add(new AbstractTab(new ResourceModel(\"policy.pull\")) {\n+\n+            private static final long serialVersionUID = -6815067322125799251L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new PullPolicyDirectoryPanel(panelId, pageRef);\n+            }\n+        });\n+\n+        tabs.add(new AbstractTab(new ResourceModel(\"policy.push\")) {\n+\n+            private static final long serialVersionUID = -6815067322125799251L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new PushPolicyDirectoryPanel(panelId, pageRef);\n+            }\n+        });\n+\n+        return tabs;\n+    }\n+}"},{"sha":"0f114ceacbb359815e747ece225479769392e5db","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -49,8 +49,8 @@\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.PageReference;\n@@ -74,7 +74,7 @@ public class ProvisioningPolicyModalPanel extends AbstractModalPanel<Provisionin\n \n     private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n \n-    private final LoadableDetachableModel<Map<String, ImplementationTO>> implementations;\n+    private final IModel<Map<String, ImplementationTO>> implementations;\n \n     private final IModel<List<CorrelationRule>> model;\n \n@@ -94,8 +94,8 @@ public ProvisioningPolicyModalPanel(\n             @Override\n             protected Map<String, ImplementationTO> load() {\n                 return implRestClient.list(policyTO instanceof PullPolicyTO\n-                        ? ImplementationType.PULL_CORRELATION_RULE\n-                        : ImplementationType.PUSH_CORRELATION_RULE).stream().\n+                        ? IdMImplementationType.PULL_CORRELATION_RULE\n+                        : IdMImplementationType.PUSH_CORRELATION_RULE).stream().\n                         collect(Collectors.toMap(EntityTO::getKey, Function.identity()));\n             }\n         };","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.java"},{"sha":"78618911491d05eaadd910645000692fc3b889a7","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java"},{"sha":"fa5001439338d3879b0e6fad64ca8b9131f420e0","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/PushPolicyDirectoryPanel.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPushPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPushPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPushPolicyDirectoryPanel.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PushPolicyDirectoryPanel.java"},{"sha":"8cf501018790ef43a1c906be962dcb0d5a54e406","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ReconTaskPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.wicket.PageReference;\n@@ -67,7 +67,7 @@ public class ReconTaskPanel extends MultilevelPanel.SecondLevel {\n \n         @Override\n         protected List<String> load() {\n-            return implRestClient.list(ImplementationType.PULL_ACTIONS).stream().\n+            return implRestClient.list(IdMImplementationType.PULL_ACTIONS).stream().\n                     map(EntityTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n@@ -78,7 +78,7 @@ protected List<String> load() {\n \n         @Override\n         protected List<String> load() {\n-            return implRestClient.list(ImplementationType.PUSH_ACTIONS).stream().\n+            return implRestClient.list(IdMImplementationType.PUSH_ACTIONS).stream().\n                     map(EntityTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };"},{"sha":"dfd00fbee62110db2a51f6ab0c9eec3ebbc4f199","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ItemTransformersTogglePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n@@ -66,7 +66,7 @@ protected List<String> load() {\n         Form<?> form = new Form<>(\"form\");\n         addInnerObject(form);\n \n-        List<String> choices = implRestClient.list(ImplementationType.ITEM_TRANSFORMER).stream().\n+        List<String> choices = implRestClient.list(IdMImplementationType.ITEM_TRANSFORMER).stream().\n                 map(EntityTO::getKey).sorted().collect(Collectors.toList());\n \n         form.add(new AjaxPalettePanel.Builder<String>().setAllowOrder(true).setRenderer(new IChoiceRenderer<String>() {"},{"sha":"6d2d686e5d6fa89c43b0fe42a25ca50ae7017ab7","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceDetailsPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -52,7 +52,7 @@ public class ResourceDetailsPanel extends WizardStep {\n \n         @Override\n         protected List<String> load() {\n-            return implRestClient.list(ImplementationType.PROPAGATION_ACTIONS).stream().\n+            return implRestClient.list(IdMImplementationType.PROPAGATION_ACTIONS).stream().\n                     map(EntityTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };"},{"sha":"987016dc8060012c853bd7939ae38e420926e9b7","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel$CorrelationRulePanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel%24CorrelationRulePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel%24CorrelationRulePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel%24CorrelationRulePanel.html?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel$CorrelationRulePanel.html"},{"sha":"5ade68c39851211f33185cf482e674000446f8da","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.html?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.html"},{"sha":"dcd9917072dc530a93b3d0a6e1bbc31339efeaa3","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.properties?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.properties"},{"sha":"fe183bf1766038ef3a494aba04c8fdeaf1db3072","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel_it.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_it.properties?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel_it.properties"},{"sha":"a52a0109c93efd05bcd59107ba0292095cff63f3","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel_ja.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_ja.properties?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel_ja.properties"},{"sha":"f39a8680ea60ce97c7a60b8b916c6dcbdf1e019e","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel_pt_BR.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_pt_BR.properties?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel_pt_BR.properties"},{"sha":"966749ee052508df36ad63c341f11c0d625f1f73","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel_ru.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel_ru.properties?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel_ru.properties"},{"sha":"ecf17d0c01f30db31580f6e50cb7b1338a36c07b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeWebApplication.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -69,6 +69,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.syncope.client.console.commons.ExternalResourceProvider;\n+import org.apache.syncope.client.console.commons.ImplementationInfoProvider;\n+import org.apache.syncope.client.console.commons.PolicyTabProvider;\n import org.apache.syncope.client.console.commons.StatusProvider;\n import org.apache.syncope.client.console.commons.VirSchemaDetailsPanelProvider;\n import org.apache.syncope.client.ui.commons.SyncopeUIRequestCycleListener;\n@@ -138,6 +140,10 @@ public static SyncopeWebApplication get() {\n \n     private AnyDirectoryPanelAditionalActionLinksProvider anyDirectoryPanelAditionalActionLinksProvider;\n \n+    private ImplementationInfoProvider implementationInfoProvider;\n+\n+    private PolicyTabProvider policyTabProvider;\n+\n     private Map<String, Class<? extends BasePage>> pageClasses;\n \n     @SuppressWarnings(\"unchecked\")\n@@ -225,6 +231,9 @@ protected void init() {\n         statusProvider = lookup.getStatusProvider();\n         virSchemaDetailsPanelProvider = lookup.getVirSchemaDetailsPanelProvider();\n         anyDirectoryPanelAditionalActionLinksProvider = lookup.getAnyDirectoryPanelAditionalActionLinksProvider();\n+        implementationInfoProvider = lookup.getImplementationInfoProvider();\n+        policyTabProvider = lookup.getPolicyTabProvider();\n+\n         lookup.getPageClasses().\n                 forEach(cls -> MetaDataRoleAuthorizationStrategy.authorize(cls, Constants.ROLE_AUTHENTICATED));\n \n@@ -397,4 +406,12 @@ public VirSchemaDetailsPanelProvider getVirSchemaDetailsPanelProvider() {\n     public AnyDirectoryPanelAditionalActionLinksProvider getAnyDirectoryPanelAditionalActionLinksProvider() {\n         return anyDirectoryPanelAditionalActionLinksProvider;\n     }\n+\n+    public ImplementationInfoProvider getImplementationInfoProvider() {\n+        return implementationInfoProvider;\n+    }\n+\n+    public PolicyTabProvider getPolicyTabProvider() {\n+        return policyTabProvider;\n+    }\n }"},{"sha":"5ac63af4d2014b18d3901a378701ff6bf21b4ab2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoImplementationInfoProvider.java","status":"added","additions":207,"deletions":0,"changes":207,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n+import org.apache.syncope.client.console.rest.ImplementationRestClient;\n+import org.apache.syncope.common.lib.info.JavaImplInfo;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+\n+public class IdRepoImplementationInfoProvider implements ImplementationInfoProvider {\n+\n+    private static final long serialVersionUID = -6620368595630782392L;\n+\n+    protected final ClassPathScanImplementationLookup lookup;\n+\n+    protected final ImplementationRestClient implRestClient = new ImplementationRestClient();\n+\n+    public IdRepoImplementationInfoProvider(final ClassPathScanImplementationLookup lookup) {\n+        this.lookup = lookup;\n+    }\n+\n+    @Override\n+    public ViewMode getViewMode(final ImplementationTO implementation) {\n+        return implementation.getEngine() == ImplementationEngine.GROOVY\n+                ? ViewMode.GROOVY_BODY\n+                : IdRepoImplementationType.REPORTLET.equals(implementation.getType())\n+                || IdRepoImplementationType.ACCOUNT_RULE.equals(implementation.getType())\n+                || IdRepoImplementationType.PASSWORD_RULE.equals(implementation.getType())\n+                ? ViewMode.JSON_BODY\n+                : ViewMode.JAVA_CLASS;\n+    }\n+\n+    @Override\n+    public List<String> getClasses(final ImplementationTO implementation, final ViewMode viewMode) {\n+        List<String> classes = Collections.emptyList();\n+        if (viewMode == ViewMode.JAVA_CLASS) {\n+            Optional<JavaImplInfo> javaClasses = SyncopeConsoleSession.get().getPlatformInfo().\n+                    getJavaImplInfo(implementation.getType());\n+            classes = javaClasses.isPresent()\n+                    ? new ArrayList<>(javaClasses.get().getClasses())\n+                    : new ArrayList<>();\n+        } else if (viewMode == ViewMode.JSON_BODY) {\n+            switch (implementation.getType()) {\n+                case IdRepoImplementationType.REPORTLET:\n+                    classes = lookup.getReportletConfs().keySet().stream().\n+                            collect(Collectors.toList());\n+                    break;\n+\n+                case IdRepoImplementationType.ACCOUNT_RULE:\n+                    classes = lookup.getAccountRuleConfs().keySet().stream().\n+                            collect(Collectors.toList());\n+                    break;\n+\n+                case IdRepoImplementationType.PASSWORD_RULE:\n+                    classes = lookup.getPasswordRuleConfs().keySet().stream().\n+                            collect(Collectors.toList());\n+                    break;\n+\n+                default:\n+            }\n+        }\n+        Collections.sort(classes);\n+\n+        return classes;\n+    }\n+\n+    @Override\n+    public String getGroovyTemplateClassName(final String implementationType) {\n+        String templateClassName = null;\n+\n+        switch (implementationType) {\n+            case IdRepoImplementationType.REPORTLET:\n+                templateClassName = \"MyReportlet\";\n+                break;\n+\n+            case IdRepoImplementationType.ACCOUNT_RULE:\n+                templateClassName = \"MyAccountRule\";\n+                break;\n+\n+            case IdRepoImplementationType.PASSWORD_RULE:\n+                templateClassName = \"MyPasswordRule\";\n+                break;\n+\n+            case IdRepoImplementationType.TASKJOB_DELEGATE:\n+                templateClassName = \"MySchedTaskJobDelegate\";\n+                break;\n+\n+            case IdRepoImplementationType.LOGIC_ACTIONS:\n+                templateClassName = \"MyLogicActions\";\n+                break;\n+\n+            case IdRepoImplementationType.VALIDATOR:\n+                templateClassName = \"MyValidator\";\n+                break;\n+\n+            case IdRepoImplementationType.RECIPIENTS_PROVIDER:\n+                templateClassName = \"MyRecipientsProvider\";\n+                break;\n+\n+            default:\n+        }\n+\n+        return templateClassName;\n+    }\n+\n+    @Override\n+    public Class<?> getClass(final String implementationType, final String name) {\n+        Class<?> clazz = null;\n+        switch (implementationType) {\n+            case IdRepoImplementationType.REPORTLET:\n+                clazz = lookup.getReportletConfs().get(name);\n+                break;\n+\n+            case IdRepoImplementationType.ACCOUNT_RULE:\n+                clazz = lookup.getAccountRuleConfs().get(name);\n+                break;\n+\n+            case IdRepoImplementationType.PASSWORD_RULE:\n+                clazz = lookup.getPasswordRuleConfs().get(name);\n+                break;\n+\n+            default:\n+        }\n+\n+        return clazz;\n+    }\n+\n+    @Override\n+    public IModel<List<String>> getTaskJobDelegates() {\n+        return new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return implRestClient.list(IdRepoImplementationType.TASKJOB_DELEGATE).stream().\n+                        map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public IModel<List<String>> getReconFilterBuilders() {\n+        return new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return Collections.emptyList();\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public IModel<List<String>> getPullActions() {\n+        return new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return Collections.emptyList();\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public IModel<List<String>> getPushActions() {\n+        return new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return Collections.emptyList();\n+            }\n+        };\n+    }\n+}"},{"sha":"e22d10104e6355e023ea89c51a950a8e9c2ce5c0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoPolicyTabProvider.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoPolicyTabProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoPolicyTabProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoPolicyTabProvider.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.client.console.policies.AccountPolicyDirectoryPanel;\n+import org.apache.syncope.client.console.policies.PasswordPolicyDirectoryPanel;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.ResourceModel;\n+\n+public class IdRepoPolicyTabProvider implements PolicyTabProvider {\n+\n+    private static final long serialVersionUID = 5017230231088263303L;\n+\n+    @Override\n+    public List<ITab> buildTabList(final PageReference pageRef) {\n+        List<ITab> tabs = new ArrayList<>();\n+\n+        tabs.add(new AbstractTab(new ResourceModel(\"policy.account\")) {\n+\n+            private static final long serialVersionUID = -6815067322125799251L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new AccountPolicyDirectoryPanel(panelId, pageRef);\n+            }\n+        });\n+\n+        tabs.add(new AbstractTab(new ResourceModel(\"policy.password\")) {\n+\n+            private static final long serialVersionUID = -6815067322125799251L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new PasswordPolicyDirectoryPanel(panelId, pageRef);\n+            }\n+        });\n+\n+        return tabs;\n+    }\n+}"},{"sha":"b1cdbe85d43d776a853ec63c3a4fb10256967718","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/ImplementationInfoProvider.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FImplementationInfoProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FImplementationInfoProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FImplementationInfoProvider.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.wicket.model.IModel;\n+\n+public interface ImplementationInfoProvider extends Serializable {\n+\n+    enum ViewMode {\n+        JAVA_CLASS,\n+        JSON_BODY,\n+        GROOVY_BODY\n+\n+    }\n+\n+    ViewMode getViewMode(ImplementationTO implementation);\n+\n+    List<String> getClasses(ImplementationTO implementation, ViewMode viewMode);\n+\n+    String getGroovyTemplateClassName(String implementationType);\n+\n+    Class<?> getClass(String implementationType, String name);\n+\n+    IModel<List<String>> getTaskJobDelegates();\n+\n+    IModel<List<String>> getReconFilterBuilders();\n+\n+    IModel<List<String>> getPullActions();\n+\n+    IModel<List<String>> getPushActions();\n+}"},{"sha":"c36944da6415b3bb3a3117122bcb421c2f7f154d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/PolicyTabProvider.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPolicyTabProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPolicyTabProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPolicyTabProvider.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+\n+public interface PolicyTabProvider extends Serializable {\n+\n+    List<ITab> buildTabList(PageReference pageRef);\n+}"},{"sha":"15bd621449c7c885a139bc6ccdf624d272307461","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java","status":"modified","additions":65,"deletions":20,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -63,6 +63,10 @@\n import org.springframework.core.type.filter.AssignableTypeFilter;\n import org.springframework.util.ClassUtils;\n import org.apache.syncope.client.console.commons.ExternalResourceProvider;\n+import org.apache.syncope.client.console.commons.IdRepoImplementationInfoProvider;\n+import org.apache.syncope.client.console.commons.IdRepoPolicyTabProvider;\n+import org.apache.syncope.client.console.commons.ImplementationInfoProvider;\n+import org.apache.syncope.client.console.commons.PolicyTabProvider;\n import org.apache.syncope.client.console.commons.StatusProvider;\n import org.apache.syncope.client.console.commons.VirSchemaDetailsPanelProvider;\n \n@@ -111,6 +115,10 @@ private static void initFieldNames(final Class<?> entityClass, final Set<String>\n     private AnyDirectoryPanelAditionalActionLinksProvider anyDirectoryPanelAditionalActionLinksProvider =\n             new EmptyAnyDirectoryPanelAditionalActionLinksProvider();\n \n+    private ImplementationInfoProvider implementationInfoProvider = new IdRepoImplementationInfoProvider(this);\n+\n+    private PolicyTabProvider policyTabProvider = new IdRepoPolicyTabProvider();\n+\n     private List<Class<? extends BasePage>> pages;\n \n     private List<Class<? extends AbstractBinaryPreviewer>> previewers;\n@@ -180,6 +188,8 @@ public void load() {\n         scanner.addIncludeFilter(new AssignableTypeFilter(StatusProvider.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(VirSchemaDetailsPanelProvider.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(AnyDirectoryPanelAditionalActionLinksProvider.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(ImplementationInfoProvider.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(PolicyTabProvider.class));\n \n         scanner.findCandidateComponents(getBasePackage()).forEach(bd -> {\n             try {\n@@ -272,6 +282,24 @@ public void load() {\n                                     (AnyDirectoryPanelAditionalActionLinksProvider) clazz.\n                                             getConstructor().newInstance();\n \n+                        }\n+                    } else if (ImplementationInfoProvider.class.isAssignableFrom(clazz)) {\n+                        if (!clazz.equals(IdRepoImplementationInfoProvider.class)\n+                                && !clazz.isInstance(implementationInfoProvider)) {\n+\n+                            implementationInfoProvider =\n+                                    (ImplementationInfoProvider) clazz.\n+                                            getConstructor(ClassPathScanImplementationLookup.class).newInstance(this);\n+\n+                        }\n+                    } else if (PolicyTabProvider.class.isAssignableFrom(clazz)) {\n+                        if (!clazz.equals(IdRepoPolicyTabProvider.class)\n+                                && !clazz.isInstance(policyTabProvider)) {\n+\n+                            policyTabProvider =\n+                                    (PolicyTabProvider) clazz.\n+                                            getConstructor().newInstance();\n+\n                         }\n                     }\n                 }\n@@ -323,12 +351,21 @@ public void load() {\n         LOG.debug(\"Pull Correlation Rule configurations found: {}\", pullCorrelationRuleConfs);\n         LOG.debug(\"Push Correlation Rule configurations found: {}\", pushCorrelationRuleConfs);\n         LOG.debug(\"Wicket Resources found: {}\", resources);\n+\n         LOG.debug(\"{}: {}\", ExternalResourceProvider.class.getSimpleName(),\n                 resourceProvider.getClass().getSimpleName());\n         LOG.debug(\"{}: {}\", AnyWizardBuilderAdditionalSteps.class.getSimpleName(),\n                 anyWizardBuilderAdditionalSteps.getClass().getSimpleName());\n         LOG.debug(\"{}: {}\", StatusProvider.class.getSimpleName(),\n                 statusProvider.getClass().getSimpleName());\n+        LOG.debug(\"{}: {}\", VirSchemaDetailsPanelProvider.class.getSimpleName(),\n+                virSchemaDetailsPanelProvider.getClass().getSimpleName());\n+        LOG.debug(\"{}: {}\", AnyDirectoryPanelAditionalActionLinksProvider.class.getSimpleName(),\n+                anyDirectoryPanelAditionalActionLinksProvider.getClass().getSimpleName());\n+        LOG.debug(\"{}: {}\", ImplementationInfoProvider.class.getSimpleName(),\n+                implementationInfoProvider.getClass().getSimpleName());\n+        LOG.debug(\"{}: {}\", PolicyTabProvider.class.getSimpleName(),\n+                policyTabProvider.getClass().getSimpleName());\n     }\n \n     public Class<? extends AbstractBinaryPreviewer> getPreviewerClass(final String mimeType) {\n@@ -345,26 +382,6 @@ public Class<? extends AbstractBinaryPreviewer> getPreviewerClass(final String m\n         return previewer;\n     }\n \n-    public ExternalResourceProvider getResourceProvider() {\n-        return resourceProvider;\n-    }\n-\n-    public AnyWizardBuilderAdditionalSteps getAnyWizardBuilderAdditionalSteps() {\n-        return anyWizardBuilderAdditionalSteps;\n-    }\n-\n-    public StatusProvider getStatusProvider() {\n-        return statusProvider;\n-    }\n-\n-    public VirSchemaDetailsPanelProvider getVirSchemaDetailsPanelProvider() {\n-        return virSchemaDetailsPanelProvider;\n-    }\n-\n-    public AnyDirectoryPanelAditionalActionLinksProvider getAnyDirectoryPanelAditionalActionLinksProvider() {\n-        return anyDirectoryPanelAditionalActionLinksProvider;\n-    }\n-\n     public List<Class<? extends BasePage>> getPageClasses() {\n         return pages;\n     }\n@@ -412,4 +429,32 @@ public Map<String, Class<? extends PushCorrelationRuleConf>> getPushCorrelationR\n     public List<Class<? extends AbstractResource>> getResources() {\n         return resources;\n     }\n+\n+    public ExternalResourceProvider getResourceProvider() {\n+        return resourceProvider;\n+    }\n+\n+    public AnyWizardBuilderAdditionalSteps getAnyWizardBuilderAdditionalSteps() {\n+        return anyWizardBuilderAdditionalSteps;\n+    }\n+\n+    public StatusProvider getStatusProvider() {\n+        return statusProvider;\n+    }\n+\n+    public VirSchemaDetailsPanelProvider getVirSchemaDetailsPanelProvider() {\n+        return virSchemaDetailsPanelProvider;\n+    }\n+\n+    public AnyDirectoryPanelAditionalActionLinksProvider getAnyDirectoryPanelAditionalActionLinksProvider() {\n+        return anyDirectoryPanelAditionalActionLinksProvider;\n+    }\n+\n+    public ImplementationInfoProvider getImplementationInfoProvider() {\n+        return implementationInfoProvider;\n+    }\n+\n+    public PolicyTabProvider getPolicyTabProvider() {\n+        return policyTabProvider;\n+    }\n }"},{"sha":"f4698a3158096e4a97e41b3925b89ae3b0f7424c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -52,7 +52,7 @@\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.wicket.PageReference;\n@@ -341,7 +341,7 @@ public class Recipients extends WizardStep {\n \n             @Override\n             protected List<String> load() {\n-                return implRestClient.list(ImplementationType.RECIPIENTS_PROVIDER).stream().\n+                return implRestClient.list(IdRepoImplementationType.RECIPIENTS_PROVIDER).stream().\n                         map(EntityTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };"},{"sha":"591bb3a23ca198271748b528935f9cc6941652f1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Implementations.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FImplementations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FImplementations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FImplementations.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -19,13 +19,12 @@\n package org.apache.syncope.client.console.pages;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n-import java.util.Arrays;\n-import java.util.Comparator;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.panels.ImplementationDirectoryPanel;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -49,11 +48,11 @@ public Implementations(final PageParameters parameters) {\n     }\n \n     private List<ITab> buildTabList() {\n-        return Arrays.stream(ImplementationType.values()).\n-                filter(type -> type != ImplementationType.JWT_SSO_PROVIDER\n-                && type != ImplementationType.AUDIT_APPENDER).\n-                sorted(Comparator.comparing(ImplementationType::name)).\n-                map(type -> new AbstractTab(Model.of(type.name())) {\n+        return SyncopeConsoleSession.get().getPlatformInfo().getImplementationTypes().stream().\n+                filter(type -> !IdRepoImplementationType.JWT_SSO_PROVIDER.equals(type)\n+                && !IdRepoImplementationType.AUDIT_APPENDER.equals(type)).\n+                sorted().\n+                map(type -> new AbstractTab(Model.of(type)) {\n \n             private static final long serialVersionUID = -5861786415855103549L;\n "},{"sha":"bdb772aed8353e3ad64cd487c6c51bc1e65d8618","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Policies.java","status":"modified","additions":3,"deletions":57,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -19,18 +19,9 @@\n package org.apache.syncope.client.console.pages;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n-import java.util.ArrayList;\n-import java.util.List;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n-import org.apache.syncope.client.console.policies.AccountPolicyDirectoryPanel;\n-import org.apache.syncope.client.console.policies.PasswordPolicyDirectoryPanel;\n-import org.apache.syncope.client.console.policies.PullPolicyDirectoryPanel;\n-import org.apache.syncope.client.console.policies.PushPolicyDirectoryPanel;\n-import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n-import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n public class Policies extends BasePage {\n@@ -45,53 +36,8 @@ public Policies(final PageParameters parameters) {\n         WebMarkupContainer content = new WebMarkupContainer(\"content\");\n         content.setOutputMarkupId(true);\n         content.setMarkupId(\"policies\");\n-        content.add(new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList()));\n+        content.add(new AjaxBootstrapTabbedPanel<>(\n+                \"tabbedPanel\", SyncopeWebApplication.get().getPolicyTabProvider().buildTabList(getPageReference())));\n         body.add(content);\n     }\n-\n-    private List<ITab> buildTabList() {\n-        final List<ITab> tabs = new ArrayList<>();\n-\n-        tabs.add(new AbstractTab(new ResourceModel(\"policy.account\")) {\n-\n-            private static final long serialVersionUID = -6815067322125799251L;\n-\n-            @Override\n-            public Panel getPanel(final String panelId) {\n-                return new AccountPolicyDirectoryPanel(panelId, getPageReference());\n-            }\n-        });\n-\n-        tabs.add(new AbstractTab(new ResourceModel(\"policy.password\")) {\n-\n-            private static final long serialVersionUID = -6815067322125799251L;\n-\n-            @Override\n-            public Panel getPanel(final String panelId) {\n-                return new PasswordPolicyDirectoryPanel(panelId, getPageReference());\n-            }\n-        });\n-\n-        tabs.add(new AbstractTab(new ResourceModel(\"policy.pull\")) {\n-\n-            private static final long serialVersionUID = -6815067322125799251L;\n-\n-            @Override\n-            public Panel getPanel(final String panelId) {\n-                return new PullPolicyDirectoryPanel(panelId, getPageReference());\n-            }\n-        });\n-\n-        tabs.add(new AbstractTab(new ResourceModel(\"policy.push\")) {\n-\n-            private static final long serialVersionUID = -6815067322125799251L;\n-\n-            @Override\n-            public Panel getPanel(final String panelId) {\n-                return new PushPolicyDirectoryPanel(panelId, getPageReference());\n-            }\n-        });\n-\n-        return tabs;\n-    }\n }"},{"sha":"1de9c3a170bcb8cfdc877aef8e91f7e60f143f3d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationDirectoryPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -59,9 +58,9 @@ public class ImplementationDirectoryPanel extends DirectoryPanel<\n \n     private static final long serialVersionUID = 1868839768348072635L;\n \n-    private final ImplementationType type;\n+    private final String type;\n \n-    public ImplementationDirectoryPanel(final String id, final ImplementationType type, final PageReference pageRef) {\n+    public ImplementationDirectoryPanel(final String id, final String type, final PageReference pageRef) {\n         super(id, pageRef, true);\n         this.type = type;\n "},{"sha":"4290600f520a9c0a53d57b52c596ea2d0adb36a0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationModalPanel.java","status":"modified","additions":9,"deletions":152,"changes":161,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -21,24 +21,19 @@\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n+import org.apache.syncope.client.console.commons.ImplementationInfoProvider.ViewMode;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.rest.ImplementationRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxEventBehavior;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -48,25 +43,14 @@\n import org.apache.wicket.markup.html.form.TextArea;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.apache.wicket.util.io.IOUtils;\n \n public class ImplementationModalPanel extends AbstractModalPanel<ImplementationTO> {\n \n     private static final long serialVersionUID = 5283548960927517342L;\n \n-    private enum ViewMode {\n-        JAVA_CLASS,\n-        JSON_BODY,\n-        GROOVY_BODY\n-\n-    }\n-\n     private static final ObjectMapper MAPPER = new ObjectMapper();\n \n-    @SpringBean\n-    private ClassPathScanImplementationLookup lookup;\n-\n     private final ImplementationRestClient restClient = new ImplementationRestClient();\n \n     private final ImplementationTO implementation;\n@@ -82,59 +66,15 @@ public ImplementationModalPanel(\n \n         super(modal, pageRef);\n         this.implementation = implementation;\n-        this.viewMode = implementation.getEngine() == ImplementationEngine.GROOVY\n-                ? ViewMode.GROOVY_BODY\n-                : implementation.getType() == ImplementationType.REPORTLET\n-                || implementation.getType() == ImplementationType.ACCOUNT_RULE\n-                || implementation.getType() == ImplementationType.PASSWORD_RULE\n-                || implementation.getType() == ImplementationType.PULL_CORRELATION_RULE\n-                || implementation.getType() == ImplementationType.PUSH_CORRELATION_RULE\n-                ? ViewMode.JSON_BODY\n-                : ViewMode.JAVA_CLASS;\n+        this.viewMode = SyncopeWebApplication.get().getImplementationInfoProvider().getViewMode(implementation);\n         this.create = implementation.getKey() == null;\n \n         add(new AjaxTextFieldPanel(\n                 \"key\", \"key\", new PropertyModel<>(implementation, \"key\"), false).\n                 addRequiredLabel().setEnabled(create));\n \n-        List<String> classes = Collections.emptyList();\n-        if (viewMode == ViewMode.JAVA_CLASS) {\n-            Optional<JavaImplInfo> javaClasses = SyncopeConsoleSession.get().getPlatformInfo().\n-                    getJavaImplInfo(implementation.getType());\n-            classes = javaClasses.isPresent()\n-                    ? new ArrayList<>(javaClasses.get().getClasses())\n-                    : new ArrayList<>();\n-        } else if (viewMode == ViewMode.JSON_BODY) {\n-            switch (implementation.getType()) {\n-                case REPORTLET:\n-                    classes = lookup.getReportletConfs().keySet().stream().\n-                            collect(Collectors.toList());\n-                    break;\n-\n-                case ACCOUNT_RULE:\n-                    classes = lookup.getAccountRuleConfs().keySet().stream().\n-                            collect(Collectors.toList());\n-                    break;\n-\n-                case PASSWORD_RULE:\n-                    classes = lookup.getPasswordRuleConfs().keySet().stream().\n-                            collect(Collectors.toList());\n-                    break;\n-\n-                case PULL_CORRELATION_RULE:\n-                    classes = lookup.getPullCorrelationRuleConfs().keySet().stream().\n-                            collect(Collectors.toList());\n-                    break;\n-\n-                case PUSH_CORRELATION_RULE:\n-                    classes = lookup.getPushCorrelationRuleConfs().keySet().stream().\n-                            collect(Collectors.toList());\n-                    break;\n-\n-                default:\n-            }\n-        }\n-        Collections.sort(classes);\n+        List<String> classes = SyncopeWebApplication.get().getImplementationInfoProvider().\n+                getClasses(implementation, viewMode);\n \n         AjaxDropDownChoicePanel<String> javaClass = new AjaxDropDownChoicePanel<>(\n                 \"javaClass\", \"Class\", new PropertyModel<>(implementation, \"body\"));\n@@ -173,68 +113,8 @@ public ImplementationModalPanel(\n         if (StringUtils.isBlank(implementation.getBody())\n                 && implementation.getEngine() == ImplementationEngine.GROOVY) {\n \n-            String templateClassName = null;\n-\n-            switch (implementation.getType()) {\n-                case REPORTLET:\n-                    templateClassName = \"MyReportlet\";\n-                    break;\n-\n-                case ACCOUNT_RULE:\n-                    templateClassName = \"MyAccountRule\";\n-                    break;\n-\n-                case PASSWORD_RULE:\n-                    templateClassName = \"MyPasswordRule\";\n-                    break;\n-\n-                case ITEM_TRANSFORMER:\n-                    templateClassName = \"MyItemTransformer\";\n-                    break;\n-\n-                case TASKJOB_DELEGATE:\n-                    templateClassName = \"MySchedTaskJobDelegate\";\n-                    break;\n-\n-                case RECON_FILTER_BUILDER:\n-                    templateClassName = \"MyReconFilterBuilder\";\n-                    break;\n-\n-                case LOGIC_ACTIONS:\n-                    templateClassName = \"MyLogicActions\";\n-                    break;\n-\n-                case PROPAGATION_ACTIONS:\n-                    templateClassName = \"MyPropagationActions\";\n-                    break;\n-\n-                case PULL_ACTIONS:\n-                    templateClassName = \"MyPullActions\";\n-                    break;\n-\n-                case PUSH_ACTIONS:\n-                    templateClassName = \"MyPushActions\";\n-                    break;\n-\n-                case PULL_CORRELATION_RULE:\n-                    templateClassName = \"MyPullCorrelationRule\";\n-                    break;\n-\n-                case PUSH_CORRELATION_RULE:\n-                    templateClassName = \"MyPushCorrelationRule\";\n-                    break;\n-\n-                case VALIDATOR:\n-                    templateClassName = \"MyValidator\";\n-                    break;\n-\n-                case RECIPIENTS_PROVIDER:\n-                    templateClassName = \"MyRecipientsProvider\";\n-                    break;\n-\n-                default:\n-            }\n-\n+            String templateClassName = SyncopeWebApplication.get().getImplementationInfoProvider().\n+                    getGroovyTemplateClassName(implementation.getType());\n             if (templateClassName != null) {\n                 try {\n                     implementation.setBody(StringUtils.substringAfter(IOUtils.toString(getClass().\n@@ -261,31 +141,8 @@ public ImplementationModalPanel(\n \n             @Override\n             protected void onEvent(final AjaxRequestTarget target) {\n-                Class<?> clazz = null;\n-                switch (implementation.getType()) {\n-                    case REPORTLET:\n-                        clazz = lookup.getReportletConfs().get(jsonClass.getModelObject());\n-                        break;\n-\n-                    case ACCOUNT_RULE:\n-                        clazz = lookup.getAccountRuleConfs().get(jsonClass.getModelObject());\n-                        break;\n-\n-                    case PASSWORD_RULE:\n-                        clazz = lookup.getPasswordRuleConfs().get(jsonClass.getModelObject());\n-                        break;\n-\n-                    case PULL_CORRELATION_RULE:\n-                        clazz = lookup.getPullCorrelationRuleConfs().get(jsonClass.getModelObject());\n-                        break;\n-\n-                    case PUSH_CORRELATION_RULE:\n-                        clazz = lookup.getPushCorrelationRuleConfs().get(jsonClass.getModelObject());\n-                        break;\n-\n-                    default:\n-                }\n-\n+                Class<?> clazz = SyncopeWebApplication.get().getImplementationInfoProvider().\n+                        getClass(implementation.getType(), jsonClass.getModelObject());\n                 if (clazz != null) {\n                     try {\n                         target.appendJavaScript(\"editor.getDoc().setValue('\""},{"sha":"de7fa2df0e15f5a16e5f8062ff13877004e12561","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ParametersCreateWizardSchemaStep.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardSchemaStep.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -233,7 +233,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n             @Override\n             protected List<String> load() {\n-                return implRestClient.list(ImplementationType.VALIDATOR).stream().\n+                return implRestClient.list(IdRepoImplementationType.VALIDATOR).stream().\n                         map(EntityTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };"},{"sha":"4f319edb3903f19e27cedbf598ff04ac4e352d57","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PlainSchemaDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -238,7 +238,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n             @Override\n             protected List<String> load() {\n-                return implRestClient.list(ImplementationType.VALIDATOR).stream().\n+                return implRestClient.list(IdRepoImplementationType.VALIDATOR).stream().\n                         map(EntityTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };"},{"sha":"e601ca66c4d7e893a65e4b6d265831bf3bc83dfe","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n@@ -86,7 +86,7 @@ protected Map<String, String> load() {\n \n         @Override\n         protected List<String> load() {\n-            return implRestClient.list(ImplementationType.LOGIC_ACTIONS).stream().\n+            return implRestClient.list(IdRepoImplementationType.LOGIC_ACTIONS).stream().\n                     map(EntityTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };"},{"sha":"ecd249f79f0c2a8fe00752b77ef37fc0b2f445c0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -47,8 +47,8 @@\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.policy.RuleConf;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -83,7 +83,7 @@\n \n     private final PolicyType type;\n \n-    private final ImplementationType implementationType;\n+    private final String implementationType;\n \n     private final String policy;\n \n@@ -96,8 +96,8 @@ protected PolicyRuleDirectoryPanel(\n         this.baseModal = baseModal;\n         this.type = type;\n         this.implementationType = type == PolicyType.ACCOUNT\n-                ? ImplementationType.ACCOUNT_RULE\n-                : ImplementationType.PASSWORD_RULE;\n+                ? IdRepoImplementationType.ACCOUNT_RULE\n+                : IdRepoImplementationType.PASSWORD_RULE;\n         this.policy = policy;\n         this.restClient = new PolicyRestClient();\n "},{"sha":"7ef78a8153e21cd52a6ff200ca2d6362c0350228","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -34,8 +34,8 @@\n import org.apache.syncope.common.lib.policy.RuleConf;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxEventBehavior;\n@@ -59,7 +59,7 @@ public class PolicyRuleWizardBuilder extends BaseAjaxWizardBuilder<PolicyRuleWra\n \n     private final PolicyType type;\n \n-    private final ImplementationType implementationType;\n+    private final String implementationType;\n \n     public PolicyRuleWizardBuilder(\n             final String policy,\n@@ -72,8 +72,8 @@ public PolicyRuleWizardBuilder(\n         this.policy = policy;\n         this.type = type;\n         this.implementationType = type == PolicyType.ACCOUNT\n-                ? ImplementationType.ACCOUNT_RULE\n-                : ImplementationType.PASSWORD_RULE;\n+                ? IdRepoImplementationType.ACCOUNT_RULE\n+                : IdRepoImplementationType.PASSWORD_RULE;\n     }\n \n     @Override\n@@ -127,12 +127,12 @@ public Profile(final PolicyRuleWrapper rule) {\n             List<String> choices;\n             switch (type) {\n                 case ACCOUNT:\n-                    choices = implementationClient.list(ImplementationType.ACCOUNT_RULE).stream().\n+                    choices = implementationClient.list(IdRepoImplementationType.ACCOUNT_RULE).stream().\n                             map(EntityTO::getKey).sorted().collect(Collectors.toList());\n                     break;\n \n                 case PASSWORD:\n-                    choices = implementationClient.list(ImplementationType.PASSWORD_RULE).stream().\n+                    choices = implementationClient.list(IdRepoImplementationType.PASSWORD_RULE).stream().\n                             map(EntityTO::getKey).sorted().collect(Collectors.toList());\n                     break;\n "},{"sha":"f72c8b6d330c913a2bec328433339ff3e60b76f9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -46,8 +46,8 @@\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -223,7 +223,7 @@ public ReportDataProvider(final int paginatorRows) {\n \n         private List<ReportletWrapper> getReportletWrappers(final ReportTO reportTO) {\n             return reportTO.getReportlets().stream().map(reportlet -> {\n-                ImplementationTO impl = implementationClient.read(ImplementationType.REPORTLET, reportlet);\n+                ImplementationTO impl = implementationClient.read(IdRepoImplementationType.REPORTLET, reportlet);\n \n                 ReportletWrapper wrapper = new ReportletWrapper(false).\n                         setImplementationKey(impl.getKey())."},{"sha":"54ac4f3b7ec9b54551c9cc0aba2ce8df20396196","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletWizardBuilder.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -31,8 +31,8 @@\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxEventBehavior;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -65,7 +65,7 @@ public ReportletWizardBuilder(\n     protected Serializable onApplyInternal(final ReportletWrapper modelObject) {\n         if (modelObject.getImplementationEngine() == ImplementationEngine.JAVA) {\n             ImplementationTO reportlet = implementationClient.read(\n-                    ImplementationType.REPORTLET, modelObject.getImplementationKey());\n+                    IdRepoImplementationType.REPORTLET, modelObject.getImplementationKey());\n             try {\n                 reportlet.setBody(MAPPER.writeValueAsString(modelObject.getConf()));\n                 implementationClient.update(reportlet);\n@@ -97,9 +97,9 @@ public class Profile extends WizardStep {\n \n         public Profile(final ReportletWrapper reportlet) {\n             final AjaxDropDownChoicePanel<String> conf = new AjaxDropDownChoicePanel<>(\n-                    \"reportlet\", getString(\"reportlet\"), new PropertyModel<String>(reportlet, \"implementationKey\"));\n+                    \"reportlet\", getString(\"reportlet\"), new PropertyModel<>(reportlet, \"implementationKey\"));\n \n-            conf.setChoices(implementationClient.list(ImplementationType.REPORTLET).stream().\n+            conf.setChoices(implementationClient.list(IdRepoImplementationType.REPORTLET).stream().\n                     map(EntityTO::getKey).sorted().collect(Collectors.toList()));\n             conf.addRequiredLabel();\n             conf.setNullValid(false);\n@@ -111,7 +111,7 @@ public Profile(final ReportletWrapper reportlet) {\n                 @Override\n                 protected void onEvent(final AjaxRequestTarget target) {\n                     ImplementationTO impl = implementationClient.read(\n-                            ImplementationType.REPORTLET, conf.getModelObject());\n+                            IdRepoImplementationType.REPORTLET, conf.getModelObject());\n                     reportlet.setImplementationEngine(impl.getEngine());\n                     if (impl.getEngine() == ImplementationEngine.JAVA) {\n                         try {"},{"sha":"73d0b1aceecc544ead6e996f53460a79fb574c9c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/ImplementationRestClient.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -20,18 +20,17 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.rest.api.service.ImplementationService;\n \n public class ImplementationRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -4111950555473526287L;\n \n-    public List<ImplementationTO> list(final ImplementationType type) {\n+    public List<ImplementationTO> list(final String type) {\n         return getService(ImplementationService.class).list(type);\n     }\n \n-    public ImplementationTO read(final ImplementationType type, final String key) {\n+    public ImplementationTO read(final String type, final String key) {\n         return getService(ImplementationService.class).read(type, key);\n     }\n \n@@ -43,7 +42,7 @@ public void update(final ImplementationTO implementation) {\n         getService(ImplementationService.class).update(implementation);\n     }\n \n-    public void delete(final ImplementationType type, final String key) {\n+    public void delete(final String type, final String key) {\n         getService(ImplementationService.class).delete(type, key);\n     }\n }"},{"sha":"165d035123c497225deedb97f4823d9ce3fbadda","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder.java","status":"modified","additions":12,"deletions":48,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -23,8 +23,8 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.stream.Collectors;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.rest.ImplementationRestClient;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n import org.apache.syncope.client.console.rest.TaskRestClient;\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n@@ -33,13 +33,11 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -58,9 +56,7 @@\n \n     private static final long serialVersionUID = 5945391813567245081L;\n \n-    private final TaskRestClient taskRestClient = new TaskRestClient();\n-\n-    private final ImplementationRestClient implRestClient = new ImplementationRestClient();\n+    private final TaskRestClient restClient = new TaskRestClient();\n \n     private final TaskType type;\n \n@@ -95,9 +91,9 @@ protected Serializable onApplyInternal(final SchedTaskTO modelObject) {\n \n         modelObject.setCronExpression(crontabPanel.getCronExpression());\n         if (modelObject.getKey() == null) {\n-            taskRestClient.create(type, modelObject);\n+            restClient.create(type, modelObject);\n         } else {\n-            taskRestClient.update(type, modelObject);\n+            restClient.update(type, modelObject);\n         }\n         return modelObject;\n     }\n@@ -117,49 +113,17 @@ public class Profile extends WizardStep {\n \n         private static final long serialVersionUID = -3043839139187792810L;\n \n-        private final IModel<List<String>> taskJobDelegates = new LoadableDetachableModel<List<String>>() {\n-\n-            private static final long serialVersionUID = 5275935387613157437L;\n-\n-            @Override\n-            protected List<String> load() {\n-                return implRestClient.list(ImplementationType.TASKJOB_DELEGATE).stream().\n-                        map(EntityTO::getKey).sorted().collect(Collectors.toList());\n-            }\n-        };\n+        private final IModel<List<String>> taskJobDelegates = SyncopeWebApplication.get().\n+                getImplementationInfoProvider().getTaskJobDelegates();\n \n-        private final IModel<List<String>> reconFilterBuilders = new LoadableDetachableModel<List<String>>() {\n-\n-            private static final long serialVersionUID = 5275935387613157437L;\n-\n-            @Override\n-            protected List<String> load() {\n-                return implRestClient.list(ImplementationType.RECON_FILTER_BUILDER).stream().\n-                        map(EntityTO::getKey).sorted().collect(Collectors.toList());\n-            }\n-        };\n+        private final IModel<List<String>> reconFilterBuilders = SyncopeWebApplication.get().\n+                getImplementationInfoProvider().getReconFilterBuilders();\n \n-        private final IModel<List<String>> pullActions = new LoadableDetachableModel<List<String>>() {\n+        private final IModel<List<String>> pullActions = SyncopeWebApplication.get().\n+                getImplementationInfoProvider().getPullActions();\n \n-            private static final long serialVersionUID = 5275935387613157437L;\n-\n-            @Override\n-            protected List<String> load() {\n-                return implRestClient.list(ImplementationType.PULL_ACTIONS).stream().\n-                        map(EntityTO::getKey).sorted().collect(Collectors.toList());\n-            }\n-        };\n-\n-        private final IModel<List<String>> pushActions = new LoadableDetachableModel<List<String>>() {\n-\n-            private static final long serialVersionUID = 5275935387613157437L;\n-\n-            @Override\n-            protected List<String> load() {\n-                return implRestClient.list(ImplementationType.PUSH_ACTIONS).stream().\n-                        map(EntityTO::getKey).sorted().collect(Collectors.toList());\n-            }\n-        };\n+        private final IModel<List<String>> pushActions = SyncopeWebApplication.get().\n+                getImplementationInfoProvider().getPushActions();\n \n         public Profile(final SchedTaskTO taskTO) {\n             AjaxTextFieldPanel name = new AjaxTextFieldPanel(\"name\", \"name\", new PropertyModel<>(taskTO, \"name\"),"},{"sha":"7413a165822fa2ad11eef416537d71fe2840a89b","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/types/IdMImplementationType.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdMImplementationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdMImplementationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdMImplementationType.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+public final class IdMImplementationType {\n+\n+    public static final String ITEM_TRANSFORMER = \"ITEM_TRANSFORMER\";\n+\n+    public static final String RECON_FILTER_BUILDER = \"RECON_FILTER_BUILDER\";\n+\n+    public static final String PROPAGATION_ACTIONS = \"PROPAGATION_ACTIONS\";\n+\n+    public static final String PULL_ACTIONS = \"PULL_ACTIONS\";\n+\n+    public static final String PUSH_ACTIONS = \"PUSH_ACTIONS\";\n+\n+    public static final String PULL_CORRELATION_RULE = \"PULL_CORRELATION_RULE\";\n+\n+    public static final String PUSH_CORRELATION_RULE = \"PUSH_CORRELATION_RULE\";\n+\n+    private static final Set<String> VALUES;\n+\n+    static {\n+        Set<String> values = new TreeSet<>();\n+        for (Field field : IdMImplementationType.class.getDeclaredFields()) {\n+            if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {\n+                values.add(field.getName());\n+            }\n+        }\n+        VALUES = Collections.unmodifiableSet(values);\n+    }\n+\n+    public static Set<String> values() {\n+        return VALUES;\n+    }\n+\n+    private IdMImplementationType() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"df5579a4ac0134d2333e45ec31bb5e3a941829d6","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/info/JavaImplInfo.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FJavaImplInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FJavaImplInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FJavaImplInfo.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -26,23 +26,22 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n \n @XmlRootElement(name = \"javaImplInfo\")\n @XmlType\n public class JavaImplInfo implements Serializable {\n \n     private static final long serialVersionUID = 4036793959111794959L;\n \n-    private ImplementationType type;\n+    private String type;\n \n     private final Set<String> classes = new HashSet<>();\n \n-    public ImplementationType getType() {\n+    public String getType() {\n         return type;\n     }\n \n-    public void setType(final ImplementationType type) {\n+    public void setType(final String type) {\n         this.type = type;\n     }\n "},{"sha":"5c0d1381e5336e96c92da77c4df82cfc0701a021","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/info/PlatformInfo.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -30,7 +30,6 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n \n @XmlRootElement(name = \"platformInfo\")\n @XmlType\n@@ -279,6 +278,8 @@ public void setConfDAO(final String confDAO) {\n \n     private final Set<String> entitlements = new HashSet<>();\n \n+    private final Set<String> implementationTypes = new HashSet<>();\n+\n     private final Set<JavaImplInfo> javaImplInfos = new HashSet<>();\n \n     public String getVersion() {\n@@ -363,9 +364,16 @@ public Set<String> getEntitlements() {\n         return entitlements;\n     }\n \n+    @XmlElementWrapper(name = \"implementationTypes\")\n+    @XmlElement(name = \"implementationType\")\n+    @JsonProperty(\"implementationTypes\")\n+    public Set<String> getImplementationTypes() {\n+        return implementationTypes;\n+    }\n+\n     @JsonIgnore\n-    public Optional<JavaImplInfo> getJavaImplInfo(final ImplementationType type) {\n-        return javaImplInfos.stream().filter(javaImplInfo -> javaImplInfo.getType() == type).findFirst();\n+    public Optional<JavaImplInfo> getJavaImplInfo(final String type) {\n+        return javaImplInfos.stream().filter(javaImplInfo -> javaImplInfo.getType().equals(type)).findFirst();\n     }\n \n     @XmlElementWrapper(name = \"javaImplInfos\")"},{"sha":"c68bf5cc942891a815e28a45f3aa7e83b0111e46","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/ImplementationTO.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FImplementationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FImplementationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FImplementationTO.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -24,7 +24,6 @@\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n \n @XmlRootElement(name = \"implementation\")\n @XmlType\n@@ -36,7 +35,7 @@ public class ImplementationTO implements EntityTO {\n \n     private ImplementationEngine engine;\n \n-    private ImplementationType type;\n+    private String type;\n \n     private String body;\n \n@@ -59,12 +58,12 @@ public void setEngine(final ImplementationEngine engine) {\n         this.engine = engine;\n     }\n \n-    public ImplementationType getType() {\n+    public String getType() {\n         return type;\n     }\n \n     @PathParam(\"type\")\n-    public void setType(final ImplementationType type) {\n+    public void setType(final String type) {\n         this.type = type;\n     }\n "},{"sha":"271d7a1602487103166136ec57e6f8a184d6426e","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -33,6 +33,7 @@ public enum ClientExceptionType {\n     HasChildren(Response.Status.BAD_REQUEST),\n     InvalidPrivilege(Response.Status.BAD_REQUEST),\n     InvalidImplementation(Response.Status.BAD_REQUEST),\n+    InvalidImplementationType(Response.Status.NOT_FOUND),\n     InvalidSecurityAnswer(Response.Status.BAD_REQUEST),\n     InvalidEntity(Response.Status.BAD_REQUEST),\n     InvalidLogger(Response.Status.BAD_REQUEST),"},{"sha":"067629d149ae9560956d9e1efa632a85484efc75","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/EntitlementsHolder.java","status":"renamed","additions":2,"deletions":16,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlementsHolder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlementsHolder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlementsHolder.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -16,16 +16,12 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.api;\n+package org.apache.syncope.common.lib.types;\n \n-import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n \n-import org.apache.syncope.common.lib.types.AnyEntitlement;\n-\n-public final class EntitlementsHolder {\n+public final class EntitlementsHolder extends ValueHolder<String> {\n \n     private static final Object MONITOR = new Object();\n \n@@ -40,16 +36,10 @@ public static EntitlementsHolder getInstance() {\n         return INSTANCE;\n     }\n \n-    private final Set<String> values = Collections.synchronizedSet(new HashSet<>());\n-\n     private EntitlementsHolder() {\n         // private constructor for singleton\n     }\n \n-    public void init(final Collection<String> values) {\n-        this.values.addAll(values);\n-    }\n-\n     public Set<String> addFor(final String anyType) {\n         Set<String> added = new HashSet<>();\n \n@@ -71,8 +61,4 @@ public Set<String> removeFor(final String anyType) {\n \n         return removed;\n     }\n-\n-    public Set<String> getValues() {\n-        return Collections.unmodifiableSet(values);\n-    }\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/EntitlementsHolder.java"},{"sha":"9145e6d196f0caa5068afbe7c5380d5c7650581e","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/IdRepoImplementationType.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoImplementationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoImplementationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoImplementationType.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+public final class IdRepoImplementationType {\n+\n+    public static final String JWT_SSO_PROVIDER = \"JWT_SSO_PROVIDER\";\n+\n+    public static final String REPORTLET = \"REPORTLET\";\n+\n+    public static final String ACCOUNT_RULE = \"ACCOUNT_RULE\";\n+\n+    public static final String PASSWORD_RULE = \"PASSWORD_RULE\";\n+\n+    public static final String TASKJOB_DELEGATE = \"TASKJOB_DELEGATE\";\n+\n+    public static final String LOGIC_ACTIONS = \"LOGIC_ACTIONS\";\n+\n+    public static final String VALIDATOR = \"VALIDATOR\";\n+\n+    public static final String RECIPIENTS_PROVIDER = \"RECIPIENTS_PROVIDER\";\n+\n+    public static final String AUDIT_APPENDER = \"AUDIT_APPENDER\";\n+\n+    private static final Set<String> VALUES;\n+\n+    static {\n+        Set<String> values = new TreeSet<>();\n+        for (Field field : IdRepoImplementationType.class.getDeclaredFields()) {\n+            if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {\n+                values.add(field.getName());\n+            }\n+        }\n+        VALUES = Collections.unmodifiableSet(values);\n+    }\n+\n+    public static Set<String> values() {\n+        return VALUES;\n+    }\n+\n+    private IdRepoImplementationType() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"196035227187e2fe3753e0019645da02dc0c62fd","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/ImplementationTypesHolder.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationTypesHolder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationTypesHolder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationTypesHolder.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+public final class ImplementationTypesHolder extends ValueHolder<String> {\n+\n+    private static final Object MONITOR = new Object();\n+\n+    private static ImplementationTypesHolder INSTANCE;\n+\n+    public static ImplementationTypesHolder getInstance() {\n+        synchronized (MONITOR) {\n+            if (INSTANCE == null) {\n+                INSTANCE = new ImplementationTypesHolder();\n+            }\n+        }\n+        return INSTANCE;\n+    }\n+\n+    private ImplementationTypesHolder() {\n+        // private constructor for singleton\n+    }\n+}"},{"sha":"8c514cb7989fc0675525d98abce4733ab48da4d1","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/ValueHolder.java","status":"renamed","additions":13,"deletions":19,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FValueHolder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FValueHolder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FValueHolder.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -18,26 +18,20 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n-import javax.xml.bind.annotation.XmlEnum;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n \n-@XmlEnum\n-public enum ImplementationType {\n+abstract class ValueHolder<T> {\n \n-    JWT_SSO_PROVIDER,\n-    REPORTLET,\n-    ACCOUNT_RULE,\n-    PASSWORD_RULE,\n-    ITEM_TRANSFORMER,\n-    TASKJOB_DELEGATE,\n-    RECON_FILTER_BUILDER,\n-    LOGIC_ACTIONS,\n-    PROPAGATION_ACTIONS,\n-    PULL_ACTIONS,\n-    PUSH_ACTIONS,\n-    PULL_CORRELATION_RULE,\n-    PUSH_CORRELATION_RULE,\n-    VALIDATOR,\n-    RECIPIENTS_PROVIDER,\n-    AUDIT_APPENDER;\n+    protected final Set<T> values = Collections.synchronizedSet(new HashSet<>());\n \n+    public void addAll(final Collection<T> values) {\n+        this.values.addAll(values);\n+    }\n+\n+    public Set<T> getValues() {\n+        return Collections.unmodifiableSet(values);\n+    }\n }","previous_filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/ImplementationType.java"},{"sha":"af8590f0de26914afd6712a97f5f9f2f9ed4cd8c","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java","status":"modified","additions":15,"deletions":7,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -37,7 +37,6 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n@@ -56,10 +55,12 @@ public interface ImplementationService extends JAXRSService {\n      * @param type implementation type\n      * @return list of all implementations.\n      */\n+    @Parameter(name = \"type\", description = \"Implementation's type\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n     @GET\n     @Path(\"{type}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<ImplementationTO> list(@NotNull @PathParam(\"type\") ImplementationType type);\n+    List<ImplementationTO> list(@NotNull @PathParam(\"type\") String type);\n \n     /**\n      * Returns implementation with matching type and key.\n@@ -68,10 +69,14 @@ public interface ImplementationService extends JAXRSService {\n      * @param key key of implementation to be read\n      * @return implementation with matching key\n      */\n+    @Parameter(name = \"type\", description = \"Implementation's type\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n+    @Parameter(name = \"key\", description = \"Implementation's key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n     @GET\n     @Path(\"{type}/{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    ImplementationTO read(@NotNull @PathParam(\"type\") ImplementationType type, @NotNull @PathParam(\"key\") String key);\n+    ImplementationTO read(@NotNull @PathParam(\"type\") String type, @NotNull @PathParam(\"key\") String key);\n \n     /**\n      * Creates a new implementation.\n@@ -80,7 +85,7 @@ public interface ImplementationService extends JAXRSService {\n      * @return Response object featuring Location header of created implementation\n      */\n     @Parameter(name = \"type\", description = \"Implementation's type\", in = ParameterIn.PATH, schema =\n-            @Schema(implementation = ImplementationType.class))\n+            @Schema(type = \"string\"))\n     @Parameter(name = \"key\", description = \"Implementation's key\", in = ParameterIn.PATH, schema =\n             @Schema(type = \"string\"))\n     @POST\n@@ -96,7 +101,7 @@ public interface ImplementationService extends JAXRSService {\n      * @return an empty response if operation was successful\n      */\n     @Parameter(name = \"type\", description = \"Implementation's type\", in = ParameterIn.PATH, schema =\n-            @Schema(implementation = ImplementationType.class))\n+            @Schema(type = \"string\"))\n     @Parameter(name = \"key\", description = \"Implementation's key\", in = ParameterIn.PATH, schema =\n             @Schema(type = \"string\"))\n     @PUT\n@@ -112,9 +117,12 @@ public interface ImplementationService extends JAXRSService {\n      * @param key key for implementation to be deleted\n      * @return an empty response if operation was successful\n      */\n+    @Parameter(name = \"type\", description = \"Implementation's type\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n+    @Parameter(name = \"key\", description = \"Implementation's key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n     @DELETE\n     @Path(\"{type}/{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response delete(@NotNull @PathParam(\"type\") ImplementationType type, @NotNull @PathParam(\"key\") String key);\n-\n+    Response delete(@NotNull @PathParam(\"type\") String type, @NotNull @PathParam(\"key\") String key);\n }"},{"sha":"34a85ca295349c6f41f138b24f6464e122d08755","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/init/IdMImplementationTypeLoader.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMImplementationTypeLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMImplementationTypeLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMImplementationTypeLoader.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n+import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class IdMImplementationTypeLoader implements SyncopeCoreLoader {\n+\n+    @Override\n+    public int getOrder() {\n+        return Integer.MIN_VALUE;\n+    }\n+\n+    @Override\n+    public void load() {\n+        ImplementationTypesHolder.getInstance().addAll(IdMImplementationType.values());\n+    }\n+}"},{"sha":"b33165f8069ab4eb747c5410d7bf751b78a1940d","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -43,8 +43,8 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ProvisionAction;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -390,13 +390,13 @@ public ExecTO provisionMembers(final String key, final ProvisionAction action) {\n             throw new NotFoundException(\"Group \" + key);\n         }\n \n-        Implementation jobDelegate = implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).stream().\n+        Implementation jobDelegate = implementationDAO.findByType(IdRepoImplementationType.TASKJOB_DELEGATE).stream().\n                 filter(impl -> GroupMemberProvisionTaskJobDelegate.class.getName().equals(impl.getBody())).\n                 findFirst().orElseGet(() -> {\n                     Implementation caz = entityFactory.newEntity(Implementation.class);\n                     caz.setKey(GroupMemberProvisionTaskJobDelegate.class.getSimpleName());\n                     caz.setEngine(ImplementationEngine.JAVA);\n-                    caz.setType(ImplementationType.TASKJOB_DELEGATE);\n+                    caz.setType(IdRepoImplementationType.TASKJOB_DELEGATE);\n                     caz.setBody(GroupMemberProvisionTaskJobDelegate.class.getName());\n                     caz = implementationDAO.save(caz);\n                     return caz;"},{"sha":"1a53cf4491fbd90ef47288f6bd27b6fcd0d7de51","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java","status":"modified","additions":40,"deletions":22,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -26,7 +26,9 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n+import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -75,23 +77,36 @@ public class ImplementationLogic extends AbstractTransactionalLogic<Implementati\n     @Autowired\n     private NotificationDAO notificationDAO;\n \n+    private void checkType(final String type) {\n+        if (!ImplementationTypesHolder.getInstance().getValues().contains(type)) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidImplementationType);\n+            sce.getElements().add(\"Implementation type not found: \");\n+            throw sce;\n+        }\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_LIST + \"')\")\n     @Transactional(readOnly = true)\n-    public List<ImplementationTO> list(final ImplementationType type) {\n-        return implementationDAO.find(type).stream().map(binder::getImplementationTO).collect(Collectors.toList());\n+    public List<ImplementationTO> list(final String type) {\n+        checkType(type);\n+\n+        return implementationDAO.findByType(type).stream().\n+                map(binder::getImplementationTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_READ + \"')\")\n     @Transactional(readOnly = true)\n-    public ImplementationTO read(final ImplementationType type, final String key) {\n+    public ImplementationTO read(final String type, final String key) {\n+        checkType(type);\n+\n         Implementation implementation = implementationDAO.find(key);\n         if (implementation == null) {\n             LOG.error(\"Could not find implementation '\" + key + \"'\");\n \n             throw new NotFoundException(key);\n         }\n \n-        if (implementation.getType() != type) {\n+        if (!implementation.getType().equals(type)) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n             sce.getElements().add(\"Found \" + type + \", expected \" + implementation.getType());\n             throw sce;\n@@ -108,6 +123,8 @@ public ImplementationTO create(final ImplementationTO implementationTO) {\n             throw sce;\n         }\n \n+        checkType(implementationTO.getType());\n+\n         Implementation implementation = implementationDAO.find(implementationTO.getKey());\n         if (implementation != null) {\n             throw new DuplicateException(implementationTO.getKey());\n@@ -125,82 +142,84 @@ public ImplementationTO update(final ImplementationTO implementationTO) {\n             throw new NotFoundException(implementationTO.getKey());\n         }\n \n+        checkType(implementationTO.getType());\n+\n         binder.update(implementation, implementationTO);\n         implementation = implementationDAO.save(implementation);\n \n         return binder.getImplementationTO(implementation);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_DELETE + \"')\")\n-    public void delete(final ImplementationType type, final String key) {\n+    public void delete(final String type, final String key) {\n         Implementation implementation = implementationDAO.find(key);\n         if (implementation == null) {\n             LOG.error(\"Could not find implementation '\" + key + \"'\");\n \n             throw new NotFoundException(key);\n         }\n \n-        if (implementation.getType() != type) {\n+        if (!implementation.getType().equals(type)) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n             sce.getElements().add(\"Found \" + type + \", expected \" + implementation.getType());\n             throw sce;\n         }\n \n         boolean inUse = false;\n         switch (implementation.getType()) {\n-            case REPORTLET:\n+            case IdRepoImplementationType.REPORTLET:\n                 inUse = !reportDAO.findByReportlet(implementation).isEmpty();\n                 break;\n \n-            case ACCOUNT_RULE:\n+            case IdRepoImplementationType.ACCOUNT_RULE:\n                 inUse = !policyDAO.findByAccountRule(implementation).isEmpty();\n                 break;\n \n-            case PASSWORD_RULE:\n+            case IdRepoImplementationType.PASSWORD_RULE:\n                 inUse = !policyDAO.findByPasswordRule(implementation).isEmpty();\n                 break;\n \n-            case ITEM_TRANSFORMER:\n+            case IdMImplementationType.ITEM_TRANSFORMER:\n                 inUse = !resourceDAO.findByTransformer(implementation).isEmpty();\n                 break;\n \n-            case TASKJOB_DELEGATE:\n+            case IdRepoImplementationType.TASKJOB_DELEGATE:\n                 inUse = !taskDAO.findByDelegate(implementation).isEmpty();\n                 break;\n \n-            case RECON_FILTER_BUILDER:\n+            case IdMImplementationType.RECON_FILTER_BUILDER:\n                 inUse = !taskDAO.findByReconFilterBuilder(implementation).isEmpty();\n                 break;\n \n-            case LOGIC_ACTIONS:\n+            case IdRepoImplementationType.LOGIC_ACTIONS:\n                 inUse = !realmDAO.findByLogicActions(implementation).isEmpty();\n                 break;\n \n-            case PROPAGATION_ACTIONS:\n+            case IdMImplementationType.PROPAGATION_ACTIONS:\n                 inUse = !resourceDAO.findByPropagationActions(implementation).isEmpty();\n                 break;\n \n-            case PULL_ACTIONS:\n+            case IdMImplementationType.PULL_ACTIONS:\n                 inUse = !taskDAO.findByPullActions(implementation).isEmpty();\n                 break;\n \n-            case PUSH_ACTIONS:\n+            case IdMImplementationType.PUSH_ACTIONS:\n                 inUse = !taskDAO.findByPushActions(implementation).isEmpty();\n                 break;\n \n-            case PULL_CORRELATION_RULE:\n+            case IdMImplementationType.PULL_CORRELATION_RULE:\n                 inUse = !policyDAO.findByPullCorrelationRule(implementation).isEmpty();\n                 break;\n \n-            case PUSH_CORRELATION_RULE:\n+            case IdMImplementationType.PUSH_CORRELATION_RULE:\n                 inUse = !policyDAO.findByPushCorrelationRule(implementation).isEmpty();\n                 break;\n \n-            case VALIDATOR:\n+            case IdRepoImplementationType.VALIDATOR:\n                 inUse = !plainSchemaDAO.findByValidator(implementation).isEmpty();\n                 break;\n \n-            case RECIPIENTS_PROVIDER:\n+            case IdRepoImplementationType.RECIPIENTS_PROVIDER:\n                 inUse = !notificationDAO.findByRecipientsProvider(implementation).isEmpty();\n                 break;\n \n@@ -243,5 +262,4 @@ protected ImplementationTO resolveReference(final Method method, final Object...\n \n         throw new UnresolvedReferenceException();\n     }\n-\n }"},{"sha":"20749b44f3ab8eb580ee1d6ed74ff98982a69a57","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -25,7 +25,6 @@\n import java.net.InetAddress;\n import java.net.URI;\n import java.net.UnknownHostException;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n@@ -44,7 +43,8 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n@@ -81,7 +81,6 @@\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n@@ -283,14 +282,13 @@ public PlatformInfo platform() {\n                 PLATFORM_INFO.getPersistenceInfo().\n                         setConfDAO(AopUtils.getTargetClass(confDAO).getName());\n \n-                Arrays.stream(ImplementationType.values()).\n-                        forEach(type -> {\n-                            JavaImplInfo javaImplInfo = new JavaImplInfo();\n-                            javaImplInfo.setType(type);\n-                            javaImplInfo.getClasses().addAll(implLookup.getClassNames(type));\n+                ImplementationTypesHolder.getInstance().getValues().forEach(type -> {\n+                    JavaImplInfo javaImplInfo = new JavaImplInfo();\n+                    javaImplInfo.setType(type);\n+                    javaImplInfo.getClasses().addAll(implLookup.getClassNames(type));\n \n-                            PLATFORM_INFO.getJavaImplInfos().add(javaImplInfo);\n-                        });\n+                    PLATFORM_INFO.getJavaImplInfos().add(javaImplInfo);\n+                });\n             }\n \n             PLATFORM_INFO.setSelfRegAllowed(isSelfRegAllowed());\n@@ -300,6 +298,9 @@ public PlatformInfo platform() {\n             PLATFORM_INFO.getEntitlements().clear();\n             PLATFORM_INFO.getEntitlements().addAll(EntitlementsHolder.getInstance().getValues());\n \n+            PLATFORM_INFO.getImplementationTypes().clear();\n+            PLATFORM_INFO.getImplementationTypes().addAll(ImplementationTypesHolder.getInstance().getValues());\n+\n             AuthContextUtils.execWithAuthContext(AuthContextUtils.getDomain(), () -> {\n                 PLATFORM_INFO.getAnyTypes().clear();\n                 PLATFORM_INFO.getAnyTypes().addAll(anyTypeDAO.findAll().stream()."},{"sha":"db296da4a182e6635ef1fc766af07bb191ded4ba","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":25,"deletions":25,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -20,7 +20,6 @@\n \n import java.lang.reflect.Modifier;\n import java.util.Collections;\n-import java.util.EnumMap;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -30,7 +29,9 @@\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n+import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n import org.apache.syncope.core.logic.audit.AuditAppender;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n@@ -72,7 +73,7 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {\n \n     private static final String DEFAULT_BASE_PACKAGE = \"org.apache.syncope.core\";\n \n-    private Map<ImplementationType, Set<String>> classNames;\n+    private Map<String, Set<String>> classNames;\n \n     private Set<Class<?>> jwtSSOProviderClasses;\n \n@@ -90,7 +91,7 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {\n \n     @Override\n     public int getOrder() {\n-        return Integer.MIN_VALUE;\n+        return Integer.MAX_VALUE;\n     }\n \n     /**\n@@ -105,10 +106,9 @@ protected String getBasePackage() {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public void load() {\n-        classNames = new EnumMap<>(ImplementationType.class);\n-        for (ImplementationType type : ImplementationType.values()) {\n-            classNames.put(type, new HashSet<>());\n-        }\n+        classNames = new HashMap<>();\n+        ImplementationTypesHolder.getInstance().getValues().\n+                forEach(type -> classNames.put(type, new HashSet<>()));\n \n         jwtSSOProviderClasses = new HashSet<>();\n         reportletClasses = new HashMap<>();\n@@ -143,7 +143,7 @@ public void load() {\n                 boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n \n                 if (JWTSSOProvider.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(ImplementationType.JWT_SSO_PROVIDER).add(clazz.getName());\n+                    classNames.get(IdRepoImplementationType.JWT_SSO_PROVIDER).add(clazz.getName());\n                     jwtSSOProviderClasses.add(clazz);\n                 }\n \n@@ -152,7 +152,7 @@ public void load() {\n                     if (annotation == null) {\n                         LOG.warn(\"Found Reportlet {} without declared configuration\", clazz.getName());\n                     } else {\n-                        classNames.get(ImplementationType.REPORTLET).add(clazz.getName());\n+                        classNames.get(IdRepoImplementationType.REPORTLET).add(clazz.getName());\n                         reportletClasses.put(annotation.value(), (Class<? extends Reportlet>) clazz);\n                     }\n                 }\n@@ -162,7 +162,7 @@ public void load() {\n                     if (annotation == null) {\n                         LOG.warn(\"Found account policy rule {} without declared configuration\", clazz.getName());\n                     } else {\n-                        classNames.get(ImplementationType.ACCOUNT_RULE).add(clazz.getName());\n+                        classNames.get(IdRepoImplementationType.ACCOUNT_RULE).add(clazz.getName());\n                         accountRuleClasses.put(annotation.value(), (Class<? extends AccountRule>) clazz);\n                     }\n                 }\n@@ -172,7 +172,7 @@ public void load() {\n                     if (annotation == null) {\n                         LOG.warn(\"Found password policy rule {} without declared configuration\", clazz.getName());\n                     } else {\n-                        classNames.get(ImplementationType.PASSWORD_RULE).add(clazz.getName());\n+                        classNames.get(IdRepoImplementationType.PASSWORD_RULE).add(clazz.getName());\n                         passwordRuleClasses.put(annotation.value(), (Class<? extends PasswordRule>) clazz);\n                     }\n                 }\n@@ -182,7 +182,7 @@ public void load() {\n                     if (annotation == null) {\n                         LOG.warn(\"Found pull correlation rule {} without declared configuration\", clazz.getName());\n                     } else {\n-                        classNames.get(ImplementationType.PULL_CORRELATION_RULE).add(clazz.getName());\n+                        classNames.get(IdMImplementationType.PULL_CORRELATION_RULE).add(clazz.getName());\n                         pullCRClasses.put(annotation.value(), (Class<? extends PullCorrelationRule>) clazz);\n                     }\n                 }\n@@ -192,55 +192,55 @@ public void load() {\n                     if (annotation == null) {\n                         LOG.warn(\"Found push correlation rule {} without declared configuration\", clazz.getName());\n                     } else {\n-                        classNames.get(ImplementationType.PUSH_CORRELATION_RULE).add(clazz.getName());\n+                        classNames.get(IdMImplementationType.PUSH_CORRELATION_RULE).add(clazz.getName());\n                         pushCRClasses.put(annotation.value(), (Class<? extends PushCorrelationRule>) clazz);\n                     }\n                 }\n \n                 if (ItemTransformer.class.isAssignableFrom(clazz) && !isAbstractClazz\n                         && !clazz.equals(JEXLItemTransformerImpl.class)) {\n \n-                    classNames.get(ImplementationType.ITEM_TRANSFORMER).add(clazz.getName());\n+                    classNames.get(IdMImplementationType.ITEM_TRANSFORMER).add(clazz.getName());\n                 }\n \n                 if (SchedTaskJobDelegate.class.isAssignableFrom(clazz) && !isAbstractClazz\n                         && !PullJobDelegate.class.isAssignableFrom(clazz)\n                         && !PushJobDelegate.class.isAssignableFrom(clazz)\n                         && !GroupMemberProvisionTaskJobDelegate.class.isAssignableFrom(clazz)) {\n \n-                    classNames.get(ImplementationType.TASKJOB_DELEGATE).add(bd.getBeanClassName());\n+                    classNames.get(IdRepoImplementationType.TASKJOB_DELEGATE).add(bd.getBeanClassName());\n                 }\n \n                 if (ReconFilterBuilder.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(ImplementationType.RECON_FILTER_BUILDER).add(bd.getBeanClassName());\n+                    classNames.get(IdMImplementationType.RECON_FILTER_BUILDER).add(bd.getBeanClassName());\n                 }\n \n                 if (LogicActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(ImplementationType.LOGIC_ACTIONS).add(bd.getBeanClassName());\n+                    classNames.get(IdRepoImplementationType.LOGIC_ACTIONS).add(bd.getBeanClassName());\n                 }\n \n                 if (PropagationActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(ImplementationType.PROPAGATION_ACTIONS).add(bd.getBeanClassName());\n+                    classNames.get(IdMImplementationType.PROPAGATION_ACTIONS).add(bd.getBeanClassName());\n                 }\n \n                 if (PullActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(ImplementationType.PULL_ACTIONS).add(bd.getBeanClassName());\n+                    classNames.get(IdMImplementationType.PULL_ACTIONS).add(bd.getBeanClassName());\n                 }\n \n                 if (PushActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(ImplementationType.PUSH_ACTIONS).add(bd.getBeanClassName());\n+                    classNames.get(IdMImplementationType.PUSH_ACTIONS).add(bd.getBeanClassName());\n                 }\n \n                 if (Validator.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(ImplementationType.VALIDATOR).add(bd.getBeanClassName());\n+                    classNames.get(IdRepoImplementationType.VALIDATOR).add(bd.getBeanClassName());\n                 }\n \n                 if (RecipientsProvider.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(ImplementationType.RECIPIENTS_PROVIDER).add(bd.getBeanClassName());\n+                    classNames.get(IdRepoImplementationType.RECIPIENTS_PROVIDER).add(bd.getBeanClassName());\n                 }\n \n                 if (AuditAppender.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    classNames.get(ImplementationType.AUDIT_APPENDER).add(clazz.getName());\n+                    classNames.get(IdRepoImplementationType.AUDIT_APPENDER).add(clazz.getName());\n                     auditAppenderClasses.add(clazz);\n                 }\n             } catch (Throwable t) {\n@@ -261,7 +261,7 @@ public void load() {\n     }\n \n     @Override\n-    public Set<String> getClassNames(final ImplementationType type) {\n+    public Set<String> getClassNames(final String type) {\n         return classNames.get(type);\n     }\n "},{"sha":"dfae712b9cb7472c8bfa20dae179c863cdff085f","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/EntitlementAccessor.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementAccessor.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -18,9 +18,8 @@\n  */\n package org.apache.syncope.core.logic.init;\n \n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -38,10 +37,8 @@ public class EntitlementAccessor {\n \n     @Transactional(readOnly = true)\n     public void addEntitlementsForAnyTypes() {\n-        for (AnyType anyType : anyTypeDAO.findAll()) {\n-            if (anyType != anyTypeDAO.findUser() && anyType != anyTypeDAO.findGroup()) {\n-                EntitlementsHolder.getInstance().addFor(anyType.getKey());\n-            }\n-        }\n+        anyTypeDAO.findAll().stream().\n+                filter(anyType -> anyType != anyTypeDAO.findUser() && anyType != anyTypeDAO.findGroup()).\n+                forEach(anyType -> EntitlementsHolder.getInstance().addFor(anyType.getKey()));\n     }\n }"},{"sha":"7fbbad36d07ed28f430610606bb324263a5081cb","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/EntitlementLoader.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementLoader.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.core.logic.init;\n \n import javax.sql.DataSource;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n@@ -39,7 +39,7 @@ public int getOrder() {\n \n     @Override\n     public void load() {\n-        EntitlementsHolder.getInstance().init(StandardEntitlement.values());\n+        EntitlementsHolder.getInstance().addAll(StandardEntitlement.values());\n     }\n \n     @Override"},{"sha":"aef14bef302c03d01c93c890ec17d533539b38db","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/IdRepoImplementationTypeLoader.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoImplementationTypeLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoImplementationTypeLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoImplementationTypeLoader.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n+import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n+import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class IdRepoImplementationTypeLoader implements SyncopeCoreLoader {\n+\n+    @Override\n+    public int getOrder() {\n+        return Integer.MIN_VALUE;\n+    }\n+\n+    @Override\n+    public void load() {\n+        ImplementationTypesHolder.getInstance().addAll(IdRepoImplementationType.values());\n+    }\n+}"},{"sha":"d4db74dab74e3debc186b62d35c8bd6c0e529763","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ImplementationServiceImpl.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FImplementationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FImplementationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FImplementationServiceImpl.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -22,7 +22,6 @@\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.core.logic.ImplementationLogic;\n@@ -36,12 +35,12 @@ public class ImplementationServiceImpl extends AbstractServiceImpl implements Im\n     private ImplementationLogic logic;\n \n     @Override\n-    public List<ImplementationTO> list(final ImplementationType type) {\n+    public List<ImplementationTO> list(final String type) {\n         return logic.list(type);\n     }\n \n     @Override\n-    public ImplementationTO read(final ImplementationType type, final String key) {\n+    public ImplementationTO read(final String type, final String key) {\n         return logic.read(type, key);\n     }\n \n@@ -61,9 +60,8 @@ public Response update(final ImplementationTO implementationTO) {\n     }\n \n     @Override\n-    public Response delete(final ImplementationType type, final String key) {\n+    public Response delete(final String type, final String key) {\n         logic.delete(type, key);\n         return Response.noContent().build();\n     }\n-\n }"},{"sha":"0fea24cc55978e04e620319fc5d52b97b98f5061","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -24,7 +24,6 @@\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n@@ -33,7 +32,7 @@\n \n public interface ImplementationLookup extends SyncopeCoreLoader {\n \n-    Set<String> getClassNames(ImplementationType type);\n+    Set<String> getClassNames(String type);\n \n     Set<Class<?>> getJWTSSOProviderClasses();\n "},{"sha":"44b19e9b70bd26bff0260c21813b036f441a19c2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ImplementationDAO.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FImplementationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FImplementationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FImplementationDAO.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -19,19 +19,17 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n \n public interface ImplementationDAO extends DAO<Implementation> {\n \n     Implementation find(String key);\n \n-    List<Implementation> find(ImplementationType type);\n+    List<Implementation> findByType(String type);\n \n     List<Implementation> findAll();\n \n     Implementation save(Implementation implementation);\n \n     void delete(String key);\n-\n }"},{"sha":"481a2861d90f8af2f2763743586e4c05097d713f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Implementation.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FImplementation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FImplementation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FImplementation.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -19,17 +19,16 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n \n public interface Implementation extends ProvidedKeyEntity {\n \n     ImplementationEngine getEngine();\n \n     void setEngine(ImplementationEngine engine);\n \n-    ImplementationType getType();\n+    String getType();\n \n-    void setType(ImplementationType type);\n+    void setType(String type);\n \n     String getBody();\n "},{"sha":"85e561340190aba4e0232c22336ddf938777ff2e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n@@ -38,7 +37,7 @@ public Implementation find(final String key) {\n     }\n \n     @Override\n-    public List<Implementation> find(final ImplementationType type) {\n+    public List<Implementation> findByType(final String type) {\n         TypedQuery<Implementation> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAImplementation.class.getSimpleName() + \" e WHERE e.type=:type\",\n                 Implementation.class);"},{"sha":"1dd570d7953a7971bb5cbcac9acad6cee0e7b4e6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractEntity.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.Objects;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.slf4j.Logger;\n@@ -37,8 +36,8 @@ protected void checkType(final Object object, final Class<?> clazz) {\n         }\n     }\n \n-    protected void checkImplementationType(final Implementation object, final ImplementationType expected) {\n-        if (object != null && object.getType() != expected) {\n+    protected void checkImplementationType(final Implementation object, final String expected) {\n+        if (object != null && !object.getType().equals(expected)) {\n             throw new ClassCastException(\"Expected \" + expected + \", got \" + object.getType());\n         }\n     }"},{"sha":"008f52142054ef42f11bc112778bd8c8c6fee672","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAImplementation.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAImplementation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAImplementation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAImplementation.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -26,7 +26,6 @@\n import javax.persistence.Lob;\n import javax.persistence.Table;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.jpa.validation.entity.ImplementationCheck;\n \n@@ -45,8 +44,7 @@ public class JPAImplementation extends AbstractProvidedKeyEntity implements Impl\n     private ImplementationEngine engine;\n \n     @Column(nullable = false)\n-    @Enumerated(EnumType.STRING)\n-    private ImplementationType type;\n+    private String type;\n \n     @Lob\n     private String body;\n@@ -62,12 +60,12 @@ public void setEngine(final ImplementationEngine engine) {\n     }\n \n     @Override\n-    public ImplementationType getType() {\n+    public String getType() {\n         return type;\n     }\n \n     @Override\n-    public void setType(final ImplementationType type) {\n+    public void setType(final String type) {\n         this.type = type;\n     }\n \n@@ -80,5 +78,4 @@ public String getBody() {\n     public void setBody(final String body) {\n         this.body = body;\n     }\n-\n }"},{"sha":"087375e628056f42cf9f79963186b541c41db7d4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -34,7 +34,7 @@\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -123,7 +123,7 @@ public Implementation getRecipientsProvider() {\n     @Override\n     public void setRecipientsProvider(final Implementation recipientsProvider) {\n         checkType(recipientsProvider, JPAImplementation.class);\n-        checkImplementationType(recipientsProvider, ImplementationType.RECIPIENTS_PROVIDER);\n+        checkImplementationType(recipientsProvider, IdRepoImplementationType.RECIPIENTS_PROVIDER);\n         this.recipientsProvider = (JPAImplementation) recipientsProvider;\n     }\n "},{"sha":"e795177db0ca4a7c372062da102244f6fe84db0f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -31,7 +31,7 @@\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -183,7 +183,7 @@ public Implementation getValidator() {\n     @Override\n     public void setValidator(final Implementation validator) {\n         checkType(validator, JPAImplementation.class);\n-        checkImplementationType(validator, ImplementationType.VALIDATOR);\n+        checkImplementationType(validator, IdRepoImplementationType.VALIDATOR);\n         this.validator = (JPAImplementation) validator;\n     }\n "},{"sha":"3e0fecaa590db6b64e1e3c905726561865f5d1eb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -36,7 +36,7 @@\n import javax.validation.constraints.Size;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -143,7 +143,7 @@ public void setPasswordPolicy(final PasswordPolicy passwordPolicy) {\n     @Override\n     public boolean add(final Implementation action) {\n         checkType(action, JPAImplementation.class);\n-        checkImplementationType(action, ImplementationType.LOGIC_ACTIONS);\n+        checkImplementationType(action, IdRepoImplementationType.LOGIC_ACTIONS);\n         return actions.contains((JPAImplementation) action) || actions.add((JPAImplementation) action);\n     }\n "},{"sha":"334f511c066079fb1691cd7a7f6700d45d004c2a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAReport.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -31,7 +31,7 @@\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n@@ -94,7 +94,7 @@ public List<? extends ReportExec> getExecs() {\n     @Override\n     public boolean add(final Implementation reportlet) {\n         checkType(reportlet, JPAImplementation.class);\n-        checkImplementationType(reportlet, ImplementationType.REPORTLET);\n+        checkImplementationType(reportlet, IdRepoImplementationType.REPORTLET);\n         return reportlets.contains((JPAImplementation) reportlet) || reportlets.add((JPAImplementation) reportlet);\n     }\n "},{"sha":"96046490ec11dee4a1a4a61f51c7f12392b111dd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/AbstractCorrelationRuleEntity.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractCorrelationRuleEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractCorrelationRuleEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractCorrelationRuleEntity.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -20,7 +20,6 @@\n \n import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRuleEntity;\n@@ -55,7 +54,7 @@ public Implementation getImplementation() {\n         return implementation;\n     }\n \n-    protected abstract ImplementationType getImplementationType();\n+    protected abstract String getImplementationType();\n \n     @Override\n     public void setImplementation(final Implementation implementation) {"},{"sha":"af2cfb4e4164edf775879e8adb88fd3159607f92","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccountPolicy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -29,7 +29,7 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -90,7 +90,7 @@ public void setMaxAuthenticationAttempts(final int maxAuthenticationAttempts) {\n     @Override\n     public boolean add(final Implementation rule) {\n         checkType(rule, JPAImplementation.class);\n-        checkImplementationType(rule, ImplementationType.ACCOUNT_RULE);\n+        checkImplementationType(rule, IdRepoImplementationType.ACCOUNT_RULE);\n         return rules.contains((JPAImplementation) rule) || rules.add((JPAImplementation) rule);\n     }\n "},{"sha":"aa1dc1a17d34426907c32a6679a68107c6e4fe75","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPasswordPolicy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -27,7 +27,7 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n@@ -76,7 +76,7 @@ public void setHistoryLength(final int historyLength) {\n     @Override\n     public boolean add(final Implementation rule) {\n         checkType(rule, JPAImplementation.class);\n-        checkImplementationType(rule, ImplementationType.PASSWORD_RULE);\n+        checkImplementationType(rule, IdRepoImplementationType.PASSWORD_RULE);\n         return rules.contains((JPAImplementation) rule) || rules.add((JPAImplementation) rule);\n     }\n "},{"sha":"b3135c10f5ad4e6edbaacf6afc3d3b643a701810","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPullCorrelationRuleEntity.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullCorrelationRuleEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullCorrelationRuleEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullCorrelationRuleEntity.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -22,7 +22,7 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n \n@@ -39,8 +39,8 @@ public class JPAPullCorrelationRuleEntity extends AbstractCorrelationRuleEntity\n     private JPAPullPolicy pullPolicy;\n \n     @Override\n-    protected ImplementationType getImplementationType() {\n-        return ImplementationType.PULL_CORRELATION_RULE;\n+    protected String getImplementationType() {\n+        return IdMImplementationType.PULL_CORRELATION_RULE;\n     }\n \n     @Override"},{"sha":"aad1473a2820698f7d445c46e8b09e809d63be86","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPushCorrelationRuleEntity.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushCorrelationRuleEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushCorrelationRuleEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushCorrelationRuleEntity.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -22,7 +22,7 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n \n@@ -39,8 +39,8 @@ public class JPAPushCorrelationRuleEntity extends AbstractCorrelationRuleEntity\n     private JPAPushPolicy pushPolicy;\n \n     @Override\n-    protected ImplementationType getImplementationType() {\n-        return ImplementationType.PUSH_CORRELATION_RULE;\n+    protected String getImplementationType() {\n+        return IdMImplementationType.PUSH_CORRELATION_RULE;\n     }\n \n     @Override"},{"sha":"054b7f1035e6ca60c76da888ba33d85f8ca89b9e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -45,7 +45,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n@@ -361,7 +361,7 @@ public Set<ConnectorCapability> getCapabilitiesOverride() {\n     @Override\n     public boolean add(final Implementation propagationAction) {\n         checkType(propagationAction, JPAImplementation.class);\n-        checkImplementationType(propagationAction, ImplementationType.PROPAGATION_ACTIONS);\n+        checkImplementationType(propagationAction, IdMImplementationType.PROPAGATION_ACTIONS);\n         return propagationActions.contains((JPAImplementation) propagationAction)\n                 || propagationActions.add((JPAImplementation) propagationAction);\n     }"},{"sha":"63d329233eb86ef4f3af952d0c600be3f55c10da","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMappingItem.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -28,7 +28,7 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -68,7 +68,7 @@ public void setMapping(final Mapping mapping) {\n     @Override\n     public boolean add(final Implementation transformer) {\n         checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, ImplementationType.ITEM_TRANSFORMER);\n+        checkImplementationType(transformer, IdMImplementationType.ITEM_TRANSFORMER);\n         return transformers.contains((JPAImplementation) transformer)\n                 || transformers.add((JPAImplementation) transformer);\n     }\n@@ -77,5 +77,4 @@ public boolean add(final Implementation transformer) {\n     public List<? extends Implementation> getTransformers() {\n         return transformers;\n     }\n-\n }"},{"sha":"bde929a34affe2ef7a4d80ee5198b29501f78f59","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAOrgUnitItem.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -28,7 +28,7 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n@@ -73,7 +73,7 @@ public boolean isPassword() {\n     @Override\n     public boolean add(final Implementation transformer) {\n         checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, ImplementationType.ITEM_TRANSFORMER);\n+        checkImplementationType(transformer, IdMImplementationType.ITEM_TRANSFORMER);\n         return transformers.contains((JPAImplementation) transformer)\n                 || transformers.add((JPAImplementation) transformer);\n     }"},{"sha":"df20f1ac2da201dd5fd4dbb5556ca39be78c5258","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPullTask.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -34,7 +34,7 @@\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -92,7 +92,7 @@ public Implementation getReconFilterBuilder() {\n     @Override\n     public void setReconFilterBuilder(final Implementation reconFilterBuilder) {\n         checkType(reconFilterBuilder, JPAImplementation.class);\n-        checkImplementationType(reconFilterBuilder, ImplementationType.RECON_FILTER_BUILDER);\n+        checkImplementationType(reconFilterBuilder, IdMImplementationType.RECON_FILTER_BUILDER);\n         this.reconFilterBuilder = (JPAImplementation) reconFilterBuilder;\n     }\n \n@@ -110,7 +110,7 @@ public void setDestinationRealm(final Realm destinationRealm) {\n     @Override\n     public boolean add(final Implementation action) {\n         checkType(action, JPAImplementation.class);\n-        checkImplementationType(action, ImplementationType.PULL_ACTIONS);\n+        checkImplementationType(action, IdMImplementationType.PULL_ACTIONS);\n         return actions.contains((JPAImplementation) action) || actions.add((JPAImplementation) action);\n     }\n "},{"sha":"45e762572c33bd6f35074216a405a8502820e624","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -30,7 +30,7 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -73,7 +73,7 @@ public void setSourceRealm(final Realm sourceRealm) {\n     @Override\n     public boolean add(final Implementation action) {\n         checkType(action, JPAImplementation.class);\n-        checkImplementationType(action, ImplementationType.PUSH_ACTIONS);\n+        checkImplementationType(action, IdMImplementationType.PUSH_ACTIONS);\n         return actions.contains((JPAImplementation) action) || actions.add((JPAImplementation) action);\n     }\n "},{"sha":"e2c722f53db35a096d7e5b5d7f5b5d92662cbe24","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASchedTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -25,7 +25,7 @@\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n@@ -89,7 +89,7 @@ public Implementation getJobDelegate() {\n     @Override\n     public void setJobDelegate(final Implementation jobDelegate) {\n         checkType(jobDelegate, JPAImplementation.class);\n-        checkImplementationType(jobDelegate, ImplementationType.TASKJOB_DELEGATE);\n+        checkImplementationType(jobDelegate, IdRepoImplementationType.TASKJOB_DELEGATE);\n         this.jobDelegate = (JPAImplementation) jobDelegate;\n     }\n "},{"sha":"f4492379bc7ada9d020361526019a8e008a8d4da","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyImplementationLookup.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -25,7 +25,6 @@\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n@@ -47,7 +46,7 @@ public int getOrder() {\n     }\n \n     @Override\n-    public Set<String> getClassNames(final ImplementationType type) {\n+    public Set<String> getClassNames(final String type) {\n         return Collections.emptySet();\n     }\n "},{"sha":"21297d0c2bc0f5610d0339d1a46aa350f8b95ed8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ImplementationTest.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -23,8 +23,9 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n@@ -45,31 +46,31 @@ public void findAll() {\n \n         assertEquals(18, implementations.size());\n \n-        implementations = implementationDAO.find(ImplementationType.PULL_ACTIONS);\n+        implementations = implementationDAO.findByType(IdMImplementationType.PULL_ACTIONS);\n         assertEquals(1, implementations.size());\n \n-        implementations = implementationDAO.find(ImplementationType.PROPAGATION_ACTIONS);\n+        implementations = implementationDAO.findByType(IdMImplementationType.PROPAGATION_ACTIONS);\n         assertEquals(1, implementations.size());\n \n-        implementations = implementationDAO.find(ImplementationType.TASKJOB_DELEGATE);\n+        implementations = implementationDAO.findByType(IdRepoImplementationType.TASKJOB_DELEGATE);\n         assertEquals(5, implementations.size());\n \n-        implementations = implementationDAO.find(ImplementationType.REPORTLET);\n+        implementations = implementationDAO.findByType(IdRepoImplementationType.REPORTLET);\n         assertEquals(2, implementations.size());\n \n-        implementations = implementationDAO.find(ImplementationType.ACCOUNT_RULE);\n+        implementations = implementationDAO.findByType(IdRepoImplementationType.ACCOUNT_RULE);\n         assertEquals(2, implementations.size());\n \n-        implementations = implementationDAO.find(ImplementationType.PASSWORD_RULE);\n+        implementations = implementationDAO.findByType(IdRepoImplementationType.PASSWORD_RULE);\n         assertEquals(3, implementations.size());\n \n-        implementations = implementationDAO.find(ImplementationType.VALIDATOR);\n+        implementations = implementationDAO.findByType(IdRepoImplementationType.VALIDATOR);\n         assertEquals(2, implementations.size());\n \n-        implementations = implementationDAO.find(ImplementationType.PULL_CORRELATION_RULE);\n+        implementations = implementationDAO.findByType(IdMImplementationType.PULL_CORRELATION_RULE);\n         assertEquals(1, implementations.size());\n \n-        implementations = implementationDAO.find(ImplementationType.PUSH_CORRELATION_RULE);\n+        implementations = implementationDAO.findByType(IdMImplementationType.PUSH_CORRELATION_RULE);\n         assertEquals(1, implementations.size());\n     }\n \n@@ -78,7 +79,7 @@ public void create() {\n         Implementation impl = entityFactory.newEntity(Implementation.class);\n         impl.setKey(\"new\");\n         impl.setEngine(ImplementationEngine.GROOVY);\n-        impl.setType(ImplementationType.VALIDATOR);\n+        impl.setType(IdRepoImplementationType.VALIDATOR);\n         impl.setBody(\"\");\n \n         Implementation actual = implementationDAO.save(impl);"},{"sha":"0b2ed8f11dc57745b5fef85eba32824efe954082","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -30,8 +30,9 @@\n import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n@@ -113,7 +114,7 @@ public void create() {\n         Implementation impl1 = entityFactory.newEntity(Implementation.class);\n         impl1.setKey(pullURuleName);\n         impl1.setEngine(ImplementationEngine.JAVA);\n-        impl1.setType(ImplementationType.PULL_CORRELATION_RULE);\n+        impl1.setType(IdMImplementationType.PULL_CORRELATION_RULE);\n         impl1.setBody(PullCorrelationRule.class.getName());\n         impl1 = implementationDAO.save(impl1);\n \n@@ -126,7 +127,7 @@ public void create() {\n         Implementation impl2 = entityFactory.newEntity(Implementation.class);\n         impl2.setKey(pullGRuleName);\n         impl2.setEngine(ImplementationEngine.JAVA);\n-        impl2.setType(ImplementationType.PULL_CORRELATION_RULE);\n+        impl2.setType(IdMImplementationType.PULL_CORRELATION_RULE);\n         impl2.setBody(PullCorrelationRule.class.getName());\n         impl2 = implementationDAO.save(impl2);\n \n@@ -158,7 +159,7 @@ public void update() {\n         Implementation rule = entityFactory.newEntity(Implementation.class);\n         rule.setKey(\"PasswordRule\" + UUID.randomUUID().toString());\n         rule.setEngine(ImplementationEngine.JAVA);\n-        rule.setType(ImplementationType.PASSWORD_RULE);\n+        rule.setType(IdRepoImplementationType.PASSWORD_RULE);\n         rule.setBody(POJOHelper.serialize(ruleConf));\n         rule = implementationDAO.save(rule);\n "},{"sha":"204e6bfc575dfd62108ffa02eb73354a56b4b89e","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ReportTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -25,8 +25,8 @@\n import java.util.List;\n import java.util.UUID;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n@@ -71,14 +71,14 @@ public void save() {\n         Implementation reportlet1 = entityFactory.newEntity(Implementation.class);\n         reportlet1.setKey(\"UserReportlet\" + UUID.randomUUID().toString());\n         reportlet1.setEngine(ImplementationEngine.JAVA);\n-        reportlet1.setType(ImplementationType.REPORTLET);\n+        reportlet1.setType(IdRepoImplementationType.REPORTLET);\n         reportlet1.setBody(POJOHelper.serialize(new UserReportletConf(\"first\")));\n         reportlet1 = implementationDAO.save(reportlet1);\n \n         Implementation reportlet2 = entityFactory.newEntity(Implementation.class);\n         reportlet2.setKey(\"UserReportlet\" + UUID.randomUUID().toString());\n         reportlet2.setEngine(ImplementationEngine.JAVA);\n-        reportlet2.setType(ImplementationType.REPORTLET);\n+        reportlet2.setType(IdRepoImplementationType.REPORTLET);\n         reportlet2.setBody(POJOHelper.serialize(new UserReportletConf(\"second\")));\n         reportlet2 = implementationDAO.save(reportlet2);\n "},{"sha":"beabab36bcebb73609c46e9ab4497057ffae29f5","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -34,9 +34,9 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -276,7 +276,7 @@ public void savePullTask() {\n         Implementation pullActions = entityFactory.newEntity(Implementation.class);\n         pullActions.setKey(\"PullActions\" + UUID.randomUUID().toString());\n         pullActions.setEngine(ImplementationEngine.JAVA);\n-        pullActions.setType(ImplementationType.PULL_ACTIONS);\n+        pullActions.setType(IdMImplementationType.PULL_ACTIONS);\n         pullActions.setBody(PullActions.class.getName());\n         pullActions = implementationDAO.save(pullActions);\n \n@@ -298,7 +298,7 @@ public void issueSYNCOPE144() {\n         Implementation pullActions = entityFactory.newEntity(Implementation.class);\n         pullActions.setKey(\"syncope144\");\n         pullActions.setEngine(ImplementationEngine.JAVA);\n-        pullActions.setType(ImplementationType.PULL_ACTIONS);\n+        pullActions.setType(IdMImplementationType.PULL_ACTIONS);\n         pullActions.setBody(PullActions.class.getName());\n         pullActions = implementationDAO.save(pullActions);\n "},{"sha":"3fa5f1b6cfe66c17cfb74052f18d5e9bfcabc92a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import org.apache.syncope.core.provisioning.api.data.AnyTypeDataBinder;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.spring.security.AuthContextUtils;"},{"sha":"1b530a34475d39971d148451eb01b0aaf0b326ca","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java","status":"modified","additions":57,"deletions":51,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -25,8 +25,9 @@\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n@@ -69,7 +70,7 @@ public Implementation create(final ImplementationTO implementationTO) {\n     public void update(final Implementation implementation, final ImplementationTO implementationTO) {\n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidImplementation);\n \n-        if (implementation.getType() != null && implementation.getType() != implementationTO.getType()) {\n+        if (implementation.getType() != null && !implementation.getType().equals(implementationTO.getType())) {\n             sce.getElements().add(\"ImplementationType cannot be changed\");\n             throw sce;\n         }\n@@ -87,59 +88,59 @@ public void update(final Implementation implementation, final ImplementationTO i\n         if (implementation.getEngine() == ImplementationEngine.JAVA) {\n             Class<?> base = null;\n             switch (implementation.getType()) {\n-                case REPORTLET:\n+                case IdRepoImplementationType.REPORTLET:\n                     base = Reportlet.class;\n                     break;\n \n-                case ACCOUNT_RULE:\n+                case IdRepoImplementationType.ACCOUNT_RULE:\n                     base = AccountRule.class;\n                     break;\n \n-                case PASSWORD_RULE:\n+                case IdRepoImplementationType.PASSWORD_RULE:\n                     base = PasswordRule.class;\n                     break;\n \n-                case ITEM_TRANSFORMER:\n+                case IdMImplementationType.ITEM_TRANSFORMER:\n                     base = ItemTransformer.class;\n                     break;\n \n-                case TASKJOB_DELEGATE:\n+                case IdRepoImplementationType.TASKJOB_DELEGATE:\n                     base = SchedTaskJobDelegate.class;\n                     break;\n \n-                case RECON_FILTER_BUILDER:\n+                case IdMImplementationType.RECON_FILTER_BUILDER:\n                     base = ReconFilterBuilder.class;\n                     break;\n \n-                case LOGIC_ACTIONS:\n+                case IdRepoImplementationType.LOGIC_ACTIONS:\n                     base = LogicActions.class;\n                     break;\n \n-                case PROPAGATION_ACTIONS:\n+                case IdMImplementationType.PROPAGATION_ACTIONS:\n                     base = PropagationActions.class;\n                     break;\n \n-                case PULL_ACTIONS:\n+                case IdMImplementationType.PULL_ACTIONS:\n                     base = PullActions.class;\n                     break;\n \n-                case PUSH_ACTIONS:\n+                case IdMImplementationType.PUSH_ACTIONS:\n                     base = PushActions.class;\n                     break;\n \n-                case PULL_CORRELATION_RULE:\n+                case IdMImplementationType.PULL_CORRELATION_RULE:\n                     base = PullCorrelationRule.class;\n                     break;\n \n-                case PUSH_CORRELATION_RULE:\n+                case IdMImplementationType.PUSH_CORRELATION_RULE:\n                     base = PushCorrelationRule.class;\n                     break;\n \n-                case VALIDATOR:\n+                case IdRepoImplementationType.VALIDATOR:\n                     base = Validator.class;\n                     break;\n \n-                case RECIPIENTS_PROVIDER:\n+                case IdRepoImplementationType.RECIPIENTS_PROVIDER:\n                     base = RecipientsProvider.class;\n                     break;\n \n@@ -151,41 +152,46 @@ public void update(final Implementation implementation, final ImplementationTO i\n                 throw sce;\n             }\n \n-            if (implementation.getType() == ImplementationType.REPORTLET) {\n-                ReportletConf reportlet = POJOHelper.deserialize(implementation.getBody(), ReportletConf.class);\n-                if (reportlet == null) {\n-                    sce.getElements().add(\"Could not deserialize as ReportletConf\");\n-                    throw sce;\n-                }\n-            } else if (implementation.getType() == ImplementationType.ACCOUNT_RULE\n-                    || implementation.getType() == ImplementationType.PASSWORD_RULE\n-                    || implementation.getType() == ImplementationType.PULL_CORRELATION_RULE\n-                    || implementation.getType() == ImplementationType.PUSH_CORRELATION_RULE) {\n-\n-                RuleConf rule = POJOHelper.deserialize(implementation.getBody(), RuleConf.class);\n-                if (rule == null) {\n-                    sce.getElements().add(\"Could not deserialize as neither \"\n-                            + \"Account, Password, Pull nor Push Correlation RuleConf\");\n-                    throw sce;\n-                }\n-            } else {\n-                Class<?> clazz = null;\n-                try {\n-                    clazz = Class.forName(implementation.getBody());\n-                } catch (Exception e) {\n-                    LOG.error(\"Class '{}' not found\", implementation.getBody(), e);\n-                    sce.getElements().add(\"No Java class found: \" + implementation.getBody());\n-                    throw sce;\n-                }\n-                if (!base.isAssignableFrom(clazz)) {\n-                    sce.getElements().add(\n-                            \"Java class \" + implementation.getBody() + \" must comply with \" + base.getName());\n-                    throw sce;\n-                }\n-                if (Modifier.isAbstract(clazz.getModifiers())) {\n-                    sce.getElements().add(\"Java class \" + implementation.getBody() + \" is abstract\");\n-                    throw sce;\n-                }\n+            switch (implementation.getType()) {\n+                case IdRepoImplementationType.REPORTLET:\n+                    ReportletConf reportlet = POJOHelper.deserialize(implementation.getBody(), ReportletConf.class);\n+                    if (reportlet == null) {\n+                        sce.getElements().add(\"Could not deserialize as ReportletConf\");\n+                        throw sce;\n+                    }\n+                    break;\n+\n+                case IdRepoImplementationType.ACCOUNT_RULE:\n+                case IdRepoImplementationType.PASSWORD_RULE:\n+                case IdMImplementationType.PULL_CORRELATION_RULE:\n+                case IdMImplementationType.PUSH_CORRELATION_RULE:\n+                    RuleConf rule = POJOHelper.deserialize(implementation.getBody(), RuleConf.class);\n+                    if (rule == null) {\n+                        sce.getElements().add(\"Could not deserialize as neither \"\n+                                + \"Account, Password, Pull nor Push Correlation RuleConf\");\n+                        throw sce;\n+                    }\n+                    break;\n+\n+                default:\n+                    Class<?> clazz = null;\n+                    try {\n+                        clazz = Class.forName(implementation.getBody());\n+                    } catch (Exception e) {\n+                        LOG.error(\"Class '{}' not found\", implementation.getBody(), e);\n+                        sce.getElements().add(\"No Java class found: \" + implementation.getBody());\n+                        throw sce;\n+                    }\n+                    if (!base.isAssignableFrom(clazz)) {\n+                        sce.getElements().add(\n+                                \"Java class \" + implementation.getBody() + \" must comply with \" + base.getName());\n+                        throw sce;\n+                    }\n+                    if (Modifier.isAbstract(clazz.getModifiers())) {\n+                        sce.getElements().add(\"Java class \" + implementation.getBody() + \" is abstract\");\n+                        throw sce;\n+                    }\n+                    break;\n             }\n         }\n     }"},{"sha":"7f0296373d928aecda3c4bbd52f6624971892926","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -32,8 +32,8 @@\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -113,15 +113,15 @@ private void fill(final ProvisioningTask provisioningTask, final ProvisioningTas\n             PushTaskTO pushTaskTO = (PushTaskTO) provisioningTaskTO;\n \n             Implementation jobDelegate = pushTaskTO.getJobDelegate() == null\n-                    ? implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).stream().\n+                    ? implementationDAO.findByType(IdRepoImplementationType.TASKJOB_DELEGATE).stream().\n                             filter(impl -> PushJobDelegate.class.getName().equals(impl.getBody())).\n                             findFirst().orElse(null)\n                     : implementationDAO.find(pushTaskTO.getJobDelegate());\n             if (jobDelegate == null) {\n                 jobDelegate = entityFactory.newEntity(Implementation.class);\n                 jobDelegate.setKey(PushJobDelegate.class.getSimpleName());\n                 jobDelegate.setEngine(ImplementationEngine.JAVA);\n-                jobDelegate.setType(ImplementationType.TASKJOB_DELEGATE);\n+                jobDelegate.setType(IdRepoImplementationType.TASKJOB_DELEGATE);\n                 jobDelegate.setBody(PushJobDelegate.class.getName());\n                 jobDelegate = implementationDAO.save(jobDelegate);\n             }\n@@ -157,15 +157,15 @@ private void fill(final ProvisioningTask provisioningTask, final ProvisioningTas\n             PullTaskTO pullTaskTO = (PullTaskTO) provisioningTaskTO;\n \n             Implementation jobDelegate = pullTaskTO.getJobDelegate() == null\n-                    ? implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).stream().\n+                    ? implementationDAO.findByType(IdRepoImplementationType.TASKJOB_DELEGATE).stream().\n                             filter(impl -> PullJobDelegate.class.getName().equals(impl.getBody())).\n                             findFirst().orElse(null)\n                     : implementationDAO.find(pullTaskTO.getJobDelegate());\n             if (jobDelegate == null) {\n                 jobDelegate = entityFactory.newEntity(Implementation.class);\n                 jobDelegate.setKey(PullJobDelegate.class.getSimpleName());\n                 jobDelegate.setEngine(ImplementationEngine.JAVA);\n-                jobDelegate.setType(ImplementationType.TASKJOB_DELEGATE);\n+                jobDelegate.setType(IdRepoImplementationType.TASKJOB_DELEGATE);\n                 jobDelegate.setBody(PullJobDelegate.class.getName());\n                 jobDelegate = implementationDAO.save(jobDelegate);\n             }"},{"sha":"8d9fc730b543e5aa8efddae10b03d12c725b5298","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -34,7 +34,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -227,11 +227,11 @@ public Map<String, Object> register(final SchedTask task, final Date startAt, fi\n \n         Implementation jobDelegate = task.getJobDelegate() == null\n                 ? task instanceof PullTask\n-                        ? implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).stream().\n+                        ? implementationDAO.findByType(IdRepoImplementationType.TASKJOB_DELEGATE).stream().\n                                 filter(impl -> PullJobDelegate.class.getName().equals(impl.getBody())).\n                                 findFirst().orElse(null)\n                         : task instanceof PushTask\n-                                ? implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).stream().\n+                                ? implementationDAO.findByType(IdRepoImplementationType.TASKJOB_DELEGATE).stream().\n                                         filter(impl -> PushJobDelegate.class.getName().equals(impl.getBody())).\n                                         findFirst().orElse(null)\n                                 : null"},{"sha":"0a8e0294802213a4cb7c36c4f558e1a73b670cbd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePullJobDelegate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n@@ -82,7 +82,7 @@ public List<ProvisioningReport> pull(\n         List<PullActions> actions = new ArrayList<>();\n         pullTaskTO.getActions().forEach(key -> {\n             Implementation impl = implementationDAO.find(key);\n-            if (impl == null || impl.getType() != ImplementationType.PULL_ACTIONS) {\n+            if (impl == null || !IdMImplementationType.PULL_ACTIONS.equals(impl.getType())) {\n                 LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", key);\n             } else {\n                 try {"},{"sha":"2911fd8b1b376e641a8ccb4a40abb4f23f16b4a5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePushJobDelegate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -23,7 +23,7 @@\n import java.util.List;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n@@ -60,7 +60,7 @@ public List<ProvisioningReport> push(\n         List<PushActions> actions = new ArrayList<>();\n         pushTaskTO.getActions().forEach(key -> {\n             Implementation impl = implementationDAO.find(key);\n-            if (impl == null || impl.getType() != ImplementationType.PUSH_ACTIONS) {\n+            if (impl == null || !IdMImplementationType.PUSH_ACTIONS.equals(impl.getType())) {\n                 LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", key);\n             } else {\n                 try {"},{"sha":"821b30ef544b547761414d6b482397781d69411e","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyImplementationLookup.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -25,7 +25,6 @@\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n@@ -47,7 +46,7 @@ public int getOrder() {\n     }\n \n     @Override\n-    public Set<String> getClassNames(final ImplementationType type) {\n+    public Set<String> getClassNames(final String type) {\n         return Collections.emptySet();\n     }\n "},{"sha":"f505d09c2583f165f89850731b350f0064fe0c11","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthContextUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -18,14 +18,14 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"4487f08c77092ea70bfa139afc5abf7f9948d2e6","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n@@ -56,7 +57,6 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.identityconnectors.framework.common.objects.Uid;"},{"sha":"6c7061b4c83268b4072f40795adcb09fb56fd46b","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/DummyImplementationLookup.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -25,7 +25,6 @@\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n@@ -41,7 +40,7 @@ public int getOrder() {\n     }\n \n     @Override\n-    public Set<String> getClassNames(final ImplementationType type) {\n+    public Set<String> getClassNames(final String type) {\n         return Collections.emptySet();\n     }\n "},{"sha":"5b4db33ce72d6dc608a340ba53b43546defcd00a","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/TestImplementation.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestImplementation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestImplementation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestImplementation.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n \n public class TestImplementation implements Implementation {\n@@ -49,12 +49,12 @@ public void setEngine(ImplementationEngine engine) {\n     }\n \n     @Override\n-    public ImplementationType getType() {\n-        return ImplementationType.PASSWORD_RULE;\n+    public String getType() {\n+        return IdRepoImplementationType.PASSWORD_RULE;\n     }\n \n     @Override\n-    public void setType(ImplementationType type) {\n+    public void setType(String type) {\n         // nothing to do\n     }\n "},{"sha":"baaad3719db0e7c6da8e1f677b719daa13b792f4","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/init/CamelRouteLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -31,7 +31,7 @@\n import org.apache.cxf.staxutils.StaxUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CamelEntitlement;\n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import org.apache.syncope.core.spring.ResourceWithFallbackLoader;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n@@ -89,7 +89,7 @@ public int getOrder() {\n \n     @Override\n     public void load() {\n-        EntitlementsHolder.getInstance().init(CamelEntitlement.values());\n+        EntitlementsHolder.getInstance().addAll(CamelEntitlement.values());\n     }\n \n     @Override"},{"sha":"333c91df1cb5fdb159bbc6111b0b355583fbaf43","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/init/FlowableLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FFlowableLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FFlowableLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FFlowableLoader.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -25,12 +25,12 @@\n import javax.annotation.Resource;\n import javax.sql.DataSource;\n import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import org.apache.syncope.common.lib.types.FlowableEntitlement;\n import org.apache.syncope.core.flowable.impl.FlowableDeployUtils;\n import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;\n import org.apache.syncope.core.flowable.support.DomainProcessEngine;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.spring.ResourceWithFallbackLoader;\n import org.flowable.engine.ProcessEngine;\n import org.flowable.engine.impl.db.DbIdGenerator;\n@@ -58,7 +58,7 @@ public int getOrder() {\n \n     @Override\n     public void load() {\n-        EntitlementsHolder.getInstance().init(FlowableEntitlement.values());\n+        EntitlementsHolder.getInstance().addAll(FlowableEntitlement.values());\n     }\n \n     @Override"},{"sha":"53a038627d62232c2a23e02fc2c6250925244371","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/init/OIDCClientLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientLoader.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.logic.init;\n \n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import org.apache.syncope.common.lib.types.OIDCClientEntitlement;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -33,6 +33,6 @@ public int getOrder() {\n \n     @Override\n     public void load() {\n-        EntitlementsHolder.getInstance().init(OIDCClientEntitlement.values());\n+        EntitlementsHolder.getInstance().addAll(OIDCClientEntitlement.values());\n     }\n }"},{"sha":"b0c397faacab46446545e4191d5140f21b19647d","filename":"ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCProviderItem.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProviderItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProviderItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProviderItem.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -28,7 +28,7 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n@@ -68,7 +68,7 @@ public void setOP(final OIDCProvider op) {\n     @Override\n     public boolean add(final Implementation transformer) {\n         checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, ImplementationType.ITEM_TRANSFORMER);\n+        checkImplementationType(transformer, IdMImplementationType.ITEM_TRANSFORMER);\n         return this.transformers.add((JPAImplementation) transformer);\n     }\n "},{"sha":"5e5030e0564c9ebe4c9cc18b292ec4316ecb2ad4","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -27,7 +27,7 @@\n import net.shibboleth.utilities.java.support.resolver.CriteriaSet;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.PropertyUtils;\n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import org.apache.syncope.common.lib.types.SAML2SPEntitlement;\n import org.apache.syncope.core.logic.saml2.SAML2IdPCache;\n import org.apache.syncope.core.logic.saml2.SAML2ReaderWriter;\n@@ -89,7 +89,7 @@ public int getOrder() {\n \n     @Override\n     public void load() {\n-        EntitlementsHolder.getInstance().init(SAML2SPEntitlement.values());\n+        EntitlementsHolder.getInstance().addAll(SAML2SPEntitlement.values());\n \n         Properties props = PropertyUtils.read(getClass(), SAML2SP_LOGIC_PROPERTIES, \"conf.directory\");\n         String confDirectory = props.getProperty(\"conf.directory\");"},{"sha":"98b576063050615df85c7ed3178c50358d9a691c","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdPItem.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -28,7 +28,7 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n@@ -68,7 +68,7 @@ public void setIdP(final SAML2IdP idp) {\n     @Override\n     public boolean add(final Implementation transformer) {\n         checkType(transformer, JPAImplementation.class);\n-        checkImplementationType(transformer, ImplementationType.ITEM_TRANSFORMER);\n+        checkImplementationType(transformer, IdMImplementationType.ITEM_TRANSFORMER);\n         return this.transformers.add((JPAImplementation) transformer);\n     }\n "},{"sha":"758ce00f2f226a387e70c3330a79c89d162efb5e","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/init/SCIMLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSCIMLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSCIMLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSCIMLoader.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.logic.init;\n \n import org.apache.syncope.common.lib.scim.types.SCIMEntitlement;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -33,6 +33,6 @@ public int getOrder() {\n \n     @Override\n     public void load() {\n-        EntitlementsHolder.getInstance().init(SCIMEntitlement.values());\n+        EntitlementsHolder.getInstance().addAll(SCIMEntitlement.values());\n     }\n }"},{"sha":"4a9f0d4ede7857f19d157818b7ffffb48d749085","filename":"fit/core-reference/src/main/java/org/apache/syncope/core/logic/init/ElasticsearchInit.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FElasticsearchInit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FElasticsearchInit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FElasticsearchInit.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.logic.init;\n \n import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.logic.TaskLogic;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n@@ -46,7 +46,7 @@ public class ElasticsearchInit {\n \n     @Transactional\n     public void init() {\n-        Implementation reindex = implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).\n+        Implementation reindex = implementationDAO.findByType(IdRepoImplementationType.TASKJOB_DELEGATE).\n                 stream().\n                 filter(impl -> impl.getEngine() == ImplementationEngine.JAVA\n                 && ES_REINDEX.equals(impl.getBody())).\n@@ -55,7 +55,7 @@ public void init() {\n             reindex = entityFactory.newEntity(Implementation.class);\n             reindex.setKey(ES_REINDEX);\n             reindex.setEngine(ImplementationEngine.JAVA);\n-            reindex.setType(ImplementationType.TASKJOB_DELEGATE);\n+            reindex.setType(IdRepoImplementationType.TASKJOB_DELEGATE);\n             reindex.setBody(ES_REINDEX);\n             reindex = implementationDAO.save(reindex);\n         }"},{"sha":"08b2cd9217292de8fdf8deabc853558abf3fcc09","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -40,7 +40,8 @@\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.report.StaticReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.logic.init.ElasticsearchInit;\n import org.apache.syncope.core.logic.init.EnableFlowableForTestUsers;\n import org.apache.syncope.core.provisioning.java.job.report.AuditReportlet;\n@@ -150,87 +151,86 @@ public class ITImplementationLookup implements ImplementationLookup {\n     private static final Set<Class<?>> AUDITAPPENDER_CLASSES = new HashSet<>(\n             Arrays.asList(TestFileAuditAppender.class, TestFileRewriteAuditAppender.class));\n \n-    private static final Map<ImplementationType, Set<String>> CLASS_NAMES =\n-            new HashMap<ImplementationType, Set<String>>() {\n+    private static final Map<String, Set<String>> CLASS_NAMES = new HashMap<String, Set<String>>() {\n \n         private static final long serialVersionUID = 3109256773218160485L;\n \n         {\n             Set<String> classNames = ITImplementationLookup.JWTSSOPROVIDER_CLASSES.stream().\n                     map(Class::getName).collect(Collectors.toSet());\n-            put(ImplementationType.JWT_SSO_PROVIDER, classNames);\n+            put(IdRepoImplementationType.JWT_SSO_PROVIDER, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(ReconciliationReportletConf.class.getName());\n             classNames.add(UserReportletConf.class.getName());\n             classNames.add(GroupReportletConf.class.getName());\n             classNames.add(AuditReportletConf.class.getName());\n             classNames.add(StaticReportletConf.class.getName());\n-            put(ImplementationType.REPORTLET, classNames);\n+            put(IdRepoImplementationType.REPORTLET, classNames);\n \n             classNames = ITImplementationLookup.ACCOUNT_RULE_CLASSES.values().stream().\n                     map(Class::getName).collect(Collectors.toSet());\n-            put(ImplementationType.ACCOUNT_RULE, classNames);\n+            put(IdRepoImplementationType.ACCOUNT_RULE, classNames);\n \n             classNames = ITImplementationLookup.PASSWORD_RULE_CLASSES.values().stream().\n                     map(Class::getName).collect(Collectors.toSet());\n-            put(ImplementationType.PASSWORD_RULE, classNames);\n+            put(IdRepoImplementationType.PASSWORD_RULE, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(DateToDateItemTransformer.class.getName());\n             classNames.add(DateToLongItemTransformer.class.getName());\n-            put(ImplementationType.ITEM_TRANSFORMER, classNames);\n+            put(IdMImplementationType.ITEM_TRANSFORMER, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(TestSampleJobDelegate.class.getName());\n-            put(ImplementationType.TASKJOB_DELEGATE, classNames);\n+            put(IdRepoImplementationType.TASKJOB_DELEGATE, classNames);\n \n             classNames = new HashSet<>();\n-            put(ImplementationType.RECON_FILTER_BUILDER, classNames);\n+            put(IdMImplementationType.RECON_FILTER_BUILDER, classNames);\n \n             classNames = new HashSet<>();\n-            put(ImplementationType.LOGIC_ACTIONS, classNames);\n+            put(IdRepoImplementationType.LOGIC_ACTIONS, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(LDAPMembershipPropagationActions.class.getName());\n             classNames.add(LDAPPasswordPropagationActions.class.getName());\n             classNames.add(DBPasswordPropagationActions.class.getName());\n             classNames.add(AzurePropagationActions.class.getName());\n             classNames.add(GoogleAppsPropagationActions.class.getName());\n-            put(ImplementationType.PROPAGATION_ACTIONS, classNames);\n+            put(IdMImplementationType.PROPAGATION_ACTIONS, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(LDAPPasswordPullActions.class.getName());\n             classNames.add(TestPullActions.class.getName());\n             classNames.add(LDAPMembershipPullActions.class.getName());\n             classNames.add(DBPasswordPullActions.class.getName());\n-            put(ImplementationType.PULL_ACTIONS, classNames);\n+            put(IdMImplementationType.PULL_ACTIONS, classNames);\n \n             classNames = new HashSet<>();\n-            put(ImplementationType.PUSH_ACTIONS, classNames);\n+            put(IdMImplementationType.PUSH_ACTIONS, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(DummyPullCorrelationRule.class.getName());\n-            put(ImplementationType.PULL_CORRELATION_RULE, classNames);\n+            put(IdMImplementationType.PULL_CORRELATION_RULE, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(DummyPushCorrelationRule.class.getName());\n-            put(ImplementationType.PUSH_CORRELATION_RULE, classNames);\n+            put(IdMImplementationType.PUSH_CORRELATION_RULE, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(BasicValidator.class.getName());\n             classNames.add(EmailAddressValidator.class.getName());\n             classNames.add(AlwaysTrueValidator.class.getName());\n             classNames.add(BinaryValidator.class.getName());\n-            put(ImplementationType.VALIDATOR, classNames);\n+            put(IdRepoImplementationType.VALIDATOR, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(TestNotificationRecipientsProvider.class.getName());\n-            put(ImplementationType.RECIPIENTS_PROVIDER, classNames);\n+            put(IdRepoImplementationType.RECIPIENTS_PROVIDER, classNames);\n \n             classNames = ITImplementationLookup.AUDITAPPENDER_CLASSES.stream().\n                     map(Class::getName).collect(Collectors.toSet());\n-            put(ImplementationType.AUDIT_APPENDER, classNames);\n+            put(IdRepoImplementationType.AUDIT_APPENDER, classNames);\n         }\n     };\n \n@@ -255,10 +255,10 @@ public int getOrder() {\n     public void load(final String domain, final DataSource datasource) {\n         // in case the Flowable extension is enabled, enable modifications for test users\n         if (enableFlowableForTestUsers != null && AopUtils.getTargetClass(uwf).getName().contains(\"Flowable\")) {\n-                AuthContextUtils.execWithAuthContext(domain, () -> {\n-                    enableFlowableForTestUsers.init(datasource);\n-                    return null;\n-                });\n+            AuthContextUtils.execWithAuthContext(domain, () -> {\n+                enableFlowableForTestUsers.init(datasource);\n+                return null;\n+            });\n         }\n \n         // in case the Elasticsearch extension is enabled, reinit a clean index for all available domains\n@@ -271,7 +271,7 @@ public void load(final String domain, final DataSource datasource) {\n     }\n \n     @Override\n-    public Set<String> getClassNames(final ImplementationType type) {\n+    public Set<String> getClassNames(final String type) {\n         return CLASS_NAMES.get(type);\n     }\n "},{"sha":"db8ef45afd00d329bc79f61e6d0cbd682be23516","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ImplementationITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FImplementationITCase.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -28,8 +28,8 @@\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -43,7 +43,7 @@ public void create() {\n         ImplementationTO implementationTO = new ImplementationTO();\n         implementationTO.setKey(UUID.randomUUID().toString());\n         implementationTO.setEngine(ImplementationEngine.JAVA);\n-        implementationTO.setType(ImplementationType.PUSH_ACTIONS);\n+        implementationTO.setType(IdMImplementationType.PUSH_ACTIONS);\n         implementationTO.setBody(TestPullActions.class.getName());\n \n         // fail because type is wrong\n@@ -53,7 +53,7 @@ public void create() {\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidImplementation, e.getType());\n         }\n-        implementationTO.setType(ImplementationType.PULL_ACTIONS);\n+        implementationTO.setType(IdMImplementationType.PULL_ACTIONS);\n \n         Response response = implementationService.create(implementationTO);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n@@ -74,7 +74,7 @@ public void delete() {\n         ImplementationTO implementationTO = new ImplementationTO();\n         implementationTO.setKey(UUID.randomUUID().toString());\n         implementationTO.setEngine(ImplementationEngine.JAVA);\n-        implementationTO.setType(ImplementationType.PULL_ACTIONS);\n+        implementationTO.setType(IdMImplementationType.PULL_ACTIONS);\n         implementationTO.setBody(TestPullActions.class.getName());\n \n         implementationService.create(implementationTO);"},{"sha":"cf88cbe6ebcb0349aa48b80416ec44db3ffbe985","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -37,8 +37,8 @@\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -232,7 +232,7 @@ public void issueSYNCOPE446() throws Exception {\n         ImplementationTO recipientsProvider = new ImplementationTO();\n         recipientsProvider.setKey(TestNotificationRecipientsProvider.class.getSimpleName());\n         recipientsProvider.setEngine(ImplementationEngine.JAVA);\n-        recipientsProvider.setType(ImplementationType.RECIPIENTS_PROVIDER);\n+        recipientsProvider.setType(IdRepoImplementationType.RECIPIENTS_PROVIDER);\n         recipientsProvider.setBody(TestNotificationRecipientsProvider.class.getName());\n         Response response = implementationService.create(recipientsProvider);\n         recipientsProvider = implementationService.read("},{"sha":"4ee3e8ab3da5395ad3986eac75d9ce550bde884c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -43,8 +43,9 @@\n import org.apache.syncope.common.lib.policy.PushPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -57,13 +58,13 @@ public class PolicyITCase extends AbstractITCase {\n     private PullPolicyTO buildPullPolicyTO() throws IOException {\n         ImplementationTO corrRule = null;\n         try {\n-            corrRule = implementationService.read(ImplementationType.PULL_CORRELATION_RULE, \"TestPullRule\");\n+            corrRule = implementationService.read(IdMImplementationType.PULL_CORRELATION_RULE, \"TestPullRule\");\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 corrRule = new ImplementationTO();\n                 corrRule.setKey(\"TestPullRule\");\n                 corrRule.setEngine(ImplementationEngine.GROOVY);\n-                corrRule.setType(ImplementationType.PULL_CORRELATION_RULE);\n+                corrRule.setType(IdMImplementationType.PULL_CORRELATION_RULE);\n                 corrRule.setBody(IOUtils.toString(\n                         getClass().getResourceAsStream(\"/TestPullRule.groovy\"), StandardCharsets.UTF_8));\n                 Response response = implementationService.create(corrRule);\n@@ -84,13 +85,13 @@ private PullPolicyTO buildPullPolicyTO() throws IOException {\n     private PushPolicyTO buildPushPolicyTO() throws IOException {\n         ImplementationTO corrRule = null;\n         try {\n-            corrRule = implementationService.read(ImplementationType.PUSH_CORRELATION_RULE, \"TestPushRule\");\n+            corrRule = implementationService.read(IdMImplementationType.PUSH_CORRELATION_RULE, \"TestPushRule\");\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 corrRule = new ImplementationTO();\n                 corrRule.setKey(\"TestPushRule\");\n                 corrRule.setEngine(ImplementationEngine.GROOVY);\n-                corrRule.setType(ImplementationType.PUSH_CORRELATION_RULE);\n+                corrRule.setType(IdMImplementationType.PUSH_CORRELATION_RULE);\n                 corrRule.setBody(IOUtils.toString(\n                         getClass().getResourceAsStream(\"/TestPushRule.groovy\"), StandardCharsets.UTF_8));\n                 Response response = implementationService.create(corrRule);\n@@ -165,7 +166,8 @@ public void update() {\n         assertNotNull(policy);\n         assertNotEquals(\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\", policy.getKey());\n \n-        ImplementationTO rule = implementationService.read(ImplementationType.PASSWORD_RULE, policy.getRules().get(0));\n+        ImplementationTO rule = implementationService.read(\n+                IdRepoImplementationType.PASSWORD_RULE, policy.getRules().get(0));\n         assertNotNull(rule);\n \n         DefaultPasswordRuleConf ruleConf = POJOHelper.deserialize(rule.getBody(), DefaultPasswordRuleConf.class);\n@@ -202,15 +204,15 @@ public void delete() throws IOException {\n     @Test\n     public void getPullCorrelationRuleJavaClasses() {\n         Set<String> classes = syncopeService.platform().\n-                getJavaImplInfo(ImplementationType.PULL_CORRELATION_RULE).get().getClasses();\n+                getJavaImplInfo(IdMImplementationType.PULL_CORRELATION_RULE).get().getClasses();\n         assertEquals(1, classes.size());\n         assertEquals(DummyPullCorrelationRule.class.getName(), classes.iterator().next());\n     }\n \n     @Test\n     public void getPushCorrelationRuleJavaClasses() {\n         Set<String> classes = syncopeService.platform().\n-                getJavaImplInfo(ImplementationType.PUSH_CORRELATION_RULE).get().getClasses();\n+                getJavaImplInfo(IdMImplementationType.PUSH_CORRELATION_RULE).get().getClasses();\n         assertEquals(1, classes.size());\n         assertEquals(DummyPushCorrelationRule.class.getName(), classes.iterator().next());\n     }\n@@ -227,7 +229,7 @@ public void issueSYNCOPE553() {\n         ImplementationTO rule = new ImplementationTO();\n         rule.setKey(\"DefaultAccountRuleConf\" + getUUIDString());\n         rule.setEngine(ImplementationEngine.JAVA);\n-        rule.setType(ImplementationType.ACCOUNT_RULE);\n+        rule.setType(IdRepoImplementationType.ACCOUNT_RULE);\n         rule.setBody(POJOHelper.serialize(ruleConf));\n         Response response = implementationService.create(rule);\n         rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n@@ -251,7 +253,7 @@ public void issueSYNCOPE682() {\n         ImplementationTO rule = new ImplementationTO();\n         rule.setKey(\"DefaultAccountRuleConf\" + getUUIDString());\n         rule.setEngine(ImplementationEngine.JAVA);\n-        rule.setType(ImplementationType.ACCOUNT_RULE);\n+        rule.setType(IdRepoImplementationType.ACCOUNT_RULE);\n         rule.setBody(POJOHelper.serialize(ruleConf));\n         Response response = implementationService.create(rule);\n         rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));"},{"sha":"458e09f76dc1dd2fa01190ac7a5b6503aa9a84e4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -57,8 +57,8 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -83,15 +83,15 @@ public static void testItemTransformersSetup() {\n         ImplementationTO dateToDate = null;\n         try {\n             dateToLong = implementationService.read(\n-                    ImplementationType.ITEM_TRANSFORMER, DateToLongItemTransformer.class.getSimpleName());\n+                    IdMImplementationType.ITEM_TRANSFORMER, DateToLongItemTransformer.class.getSimpleName());\n             dateToDate = implementationService.read(\n-                    ImplementationType.ITEM_TRANSFORMER, DateToDateItemTransformer.class.getSimpleName());\n+                    IdMImplementationType.ITEM_TRANSFORMER, DateToDateItemTransformer.class.getSimpleName());\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 dateToLong = new ImplementationTO();\n                 dateToLong.setKey(DateToLongItemTransformer.class.getSimpleName());\n                 dateToLong.setEngine(ImplementationEngine.JAVA);\n-                dateToLong.setType(ImplementationType.ITEM_TRANSFORMER);\n+                dateToLong.setType(IdMImplementationType.ITEM_TRANSFORMER);\n                 dateToLong.setBody(DateToLongItemTransformer.class.getName());\n                 Response response = implementationService.create(dateToLong);\n                 dateToLong = implementationService.read(\n@@ -101,7 +101,7 @@ public static void testItemTransformersSetup() {\n                 dateToDate = new ImplementationTO();\n                 dateToDate.setKey(DateToDateItemTransformer.class.getSimpleName());\n                 dateToDate.setEngine(ImplementationEngine.JAVA);\n-                dateToDate.setType(ImplementationType.ITEM_TRANSFORMER);\n+                dateToDate.setType(IdMImplementationType.ITEM_TRANSFORMER);\n                 dateToDate.setBody(DateToDateItemTransformer.class.getName());\n                 response = implementationService.create(dateToDate);\n                 dateToDate = implementationService.read("},{"sha":"73b296cd61b5ff54fbd22f0d029d1e2656bd5291","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -79,9 +79,9 @@\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -92,7 +92,6 @@\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.TaskService;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.apache.syncope.core.provisioning.java.pushpull.DBPasswordPullActions;\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPPasswordPullActions;\n import org.apache.syncope.core.spring.security.Encryptor;\n@@ -116,13 +115,13 @@ public static void testPullActionsSetup() {\n         ImplementationTO pullActions = null;\n         try {\n             pullActions = implementationService.read(\n-                    ImplementationType.PULL_ACTIONS, TestPullActions.class.getSimpleName());\n+                    IdMImplementationType.PULL_ACTIONS, TestPullActions.class.getSimpleName());\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 pullActions = new ImplementationTO();\n                 pullActions.setKey(TestPullActions.class.getSimpleName());\n                 pullActions.setEngine(ImplementationEngine.JAVA);\n-                pullActions.setType(ImplementationType.PULL_ACTIONS);\n+                pullActions.setType(IdMImplementationType.PULL_ACTIONS);\n                 pullActions.setBody(TestPullActions.class.getName());\n                 Response response = implementationService.create(pullActions);\n                 pullActions = implementationService.read(\n@@ -140,7 +139,7 @@ public static void testPullActionsSetup() {\n     @Test\n     public void getPullActionsClasses() {\n         Set<String> actions = syncopeService.platform().\n-                getJavaImplInfo(ImplementationType.PULL_ACTIONS).get().getClasses();\n+                getJavaImplInfo(IdMImplementationType.PULL_ACTIONS).get().getClasses();\n         assertNotNull(actions);\n         assertFalse(actions.isEmpty());\n     }\n@@ -499,7 +498,7 @@ public void reconcileFromScriptedSQL() throws IOException {\n         ImplementationTO transformer = new ImplementationTO();\n         transformer.setKey(\"PrefixItemTransformer\");\n         transformer.setEngine(ImplementationEngine.GROOVY);\n-        transformer.setType(ImplementationType.ITEM_TRANSFORMER);\n+        transformer.setType(IdMImplementationType.ITEM_TRANSFORMER);\n         transformer.setBody(IOUtils.toString(\n                 getClass().getResourceAsStream(\"/PrefixItemTransformer.groovy\"), StandardCharsets.UTF_8));\n         Response response = implementationService.create(transformer);\n@@ -589,7 +588,7 @@ public void filteredReconciliation() throws IOException {\n             ImplementationTO reconFilterBuilder = new ImplementationTO();\n             reconFilterBuilder.setKey(\"TestReconFilterBuilder\");\n             reconFilterBuilder.setEngine(ImplementationEngine.GROOVY);\n-            reconFilterBuilder.setType(ImplementationType.RECON_FILTER_BUILDER);\n+            reconFilterBuilder.setType(IdMImplementationType.RECON_FILTER_BUILDER);\n             reconFilterBuilder.setBody(IOUtils.toString(\n                     getClass().getResourceAsStream(\"/TestReconFilterBuilder.groovy\"), StandardCharsets.UTF_8));\n             Response response = implementationService.create(reconFilterBuilder);\n@@ -907,13 +906,13 @@ public void issueSYNCOPE258() throws IOException {\n         // -----------------------------\n         ImplementationTO corrRule = null;\n         try {\n-            corrRule = implementationService.read(ImplementationType.PULL_CORRELATION_RULE, \"TestPullRule\");\n+            corrRule = implementationService.read(IdMImplementationType.PULL_CORRELATION_RULE, \"TestPullRule\");\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 corrRule = new ImplementationTO();\n                 corrRule.setKey(\"TestPullRule\");\n                 corrRule.setEngine(ImplementationEngine.GROOVY);\n-                corrRule.setType(ImplementationType.PULL_CORRELATION_RULE);\n+                corrRule.setType(IdMImplementationType.PULL_CORRELATION_RULE);\n                 corrRule.setBody(IOUtils.toString(\n                         getClass().getResourceAsStream(\"/TestPullRule.groovy\"), StandardCharsets.UTF_8));\n                 Response response = implementationService.create(corrRule);\n@@ -1069,7 +1068,7 @@ public void issueSYNCOPE313DB() throws Exception {\n         ImplementationTO pullActions = new ImplementationTO();\n         pullActions.setKey(DBPasswordPullActions.class.getSimpleName());\n         pullActions.setEngine(ImplementationEngine.JAVA);\n-        pullActions.setType(ImplementationType.PULL_ACTIONS);\n+        pullActions.setType(IdMImplementationType.PULL_ACTIONS);\n         pullActions.setBody(DBPasswordPullActions.class.getName());\n         Response response = implementationService.create(pullActions);\n         pullActions = implementationService.read(\n@@ -1159,7 +1158,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n             ImplementationTO pullActions = new ImplementationTO();\n             pullActions.setKey(LDAPPasswordPullActions.class.getSimpleName());\n             pullActions.setEngine(ImplementationEngine.JAVA);\n-            pullActions.setType(ImplementationType.PULL_ACTIONS);\n+            pullActions.setType(IdMImplementationType.PULL_ACTIONS);\n             pullActions.setBody(LDAPPasswordPullActions.class.getName());\n             Response response = implementationService.create(pullActions);\n             pullActions = implementationService.read("},{"sha":"b52e44d687787d5ce88f8ffd00b7417c4fe4be46","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -49,10 +49,10 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n@@ -76,7 +76,7 @@ public class PushTaskITCase extends AbstractTaskITCase {\n     @Test\n     public void getPushActionsClasses() {\n         Set<String> actions = syncopeService.platform().\n-                getJavaImplInfo(ImplementationType.PUSH_ACTIONS).get().getClasses();\n+                getJavaImplInfo(IdMImplementationType.PUSH_ACTIONS).get().getClasses();\n         assertNotNull(actions);\n     }\n "},{"sha":"4d5f7c790d5bb8ea66e3f11d9fd2f9a06b115a27","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -39,9 +39,9 @@\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -136,7 +136,7 @@ public void deletingAccountPolicy() {\n         ImplementationTO rule = new ImplementationTO();\n         rule.setKey(\"DefaultAccountRuleConf\" + UUID.randomUUID().toString());\n         rule.setEngine(ImplementationEngine.JAVA);\n-        rule.setType(ImplementationType.ACCOUNT_RULE);\n+        rule.setType(IdRepoImplementationType.ACCOUNT_RULE);\n         rule.setBody(POJOHelper.serialize(ruleConf));\n         Response response = implementationService.create(rule);\n         rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));"},{"sha":"2dcaeb45844548be4f648f45b20f61737a05bbd4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -43,8 +43,8 @@\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n@@ -96,7 +96,7 @@ protected static String execReport(final String reportKey) {\n     @Test\n     public void getReportletConfs() {\n         Set<String> reportletConfs = syncopeService.platform().\n-                getJavaImplInfo(ImplementationType.REPORTLET).get().getClasses();\n+                getJavaImplInfo(IdRepoImplementationType.REPORTLET).get().getClasses();\n         assertNotNull(reportletConfs);\n         assertFalse(reportletConfs.isEmpty());\n         assertTrue(reportletConfs.contains(UserReportletConf.class.getName()));\n@@ -126,15 +126,15 @@ public void create() {\n         ImplementationTO reportlet1 = new ImplementationTO();\n         reportlet1.setKey(\"UserReportletConf\" + getUUIDString());\n         reportlet1.setEngine(ImplementationEngine.JAVA);\n-        reportlet1.setType(ImplementationType.REPORTLET);\n+        reportlet1.setType(IdRepoImplementationType.REPORTLET);\n         reportlet1.setBody(POJOHelper.serialize(new UserReportletConf(\"first\")));\n         Response response = implementationService.create(reportlet1);\n         reportlet1.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n \n         ImplementationTO reportlet2 = new ImplementationTO();\n         reportlet2.setKey(\"UserReportletConf\" + getUUIDString());\n         reportlet2.setEngine(ImplementationEngine.JAVA);\n-        reportlet2.setType(ImplementationType.REPORTLET);\n+        reportlet2.setType(IdRepoImplementationType.REPORTLET);\n         reportlet2.setBody(POJOHelper.serialize(new UserReportletConf(\"second\")));\n         response = implementationService.create(reportlet2);\n         reportlet2.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n@@ -159,15 +159,15 @@ public void update() {\n         ImplementationTO reportlet1 = new ImplementationTO();\n         reportlet1.setKey(\"UserReportletConf\" + getUUIDString());\n         reportlet1.setEngine(ImplementationEngine.JAVA);\n-        reportlet1.setType(ImplementationType.REPORTLET);\n+        reportlet1.setType(IdRepoImplementationType.REPORTLET);\n         reportlet1.setBody(POJOHelper.serialize(new UserReportletConf(\"first\")));\n         Response response = implementationService.create(reportlet1);\n         reportlet1.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n \n         ImplementationTO reportlet2 = new ImplementationTO();\n         reportlet2.setKey(\"UserReportletConf\" + getUUIDString());\n         reportlet2.setEngine(ImplementationEngine.JAVA);\n-        reportlet2.setType(ImplementationType.REPORTLET);\n+        reportlet2.setType(IdRepoImplementationType.REPORTLET);\n         reportlet2.setBody(POJOHelper.serialize(new UserReportletConf(\"second\")));\n         response = implementationService.create(reportlet2);\n         reportlet2.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n@@ -185,7 +185,7 @@ public void update() {\n         ImplementationTO reportlet3 = new ImplementationTO();\n         reportlet3.setKey(\"UserReportletConf\" + getUUIDString());\n         reportlet3.setEngine(ImplementationEngine.JAVA);\n-        reportlet3.setType(ImplementationType.REPORTLET);\n+        reportlet3.setType(IdRepoImplementationType.REPORTLET);\n         reportlet3.setBody(POJOHelper.serialize(new UserReportletConf(\"last\")));\n         response = implementationService.create(reportlet3);\n         reportlet3.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n@@ -203,15 +203,15 @@ public void delete() {\n         ImplementationTO reportlet1 = new ImplementationTO();\n         reportlet1.setKey(\"UserReportletConf\" + getUUIDString());\n         reportlet1.setEngine(ImplementationEngine.JAVA);\n-        reportlet1.setType(ImplementationType.REPORTLET);\n+        reportlet1.setType(IdRepoImplementationType.REPORTLET);\n         reportlet1.setBody(POJOHelper.serialize(new UserReportletConf(\"first\")));\n         Response response = implementationService.create(reportlet1);\n         reportlet1.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n \n         ImplementationTO reportlet2 = new ImplementationTO();\n         reportlet2.setKey(\"UserReportletConf\" + getUUIDString());\n         reportlet2.setEngine(ImplementationEngine.JAVA);\n-        reportlet2.setType(ImplementationType.REPORTLET);\n+        reportlet2.setType(IdRepoImplementationType.REPORTLET);\n         reportlet2.setBody(POJOHelper.serialize(new UserReportletConf(\"second\")));\n         response = implementationService.create(reportlet2);\n         reportlet2.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n@@ -328,7 +328,7 @@ public void auditReport() throws IOException {\n             ImplementationTO auditReportlet = new ImplementationTO();\n             auditReportlet.setKey(\"UserReportletConf\" + getUUIDString());\n             auditReportlet.setEngine(ImplementationEngine.JAVA);\n-            auditReportlet.setType(ImplementationType.REPORTLET);\n+            auditReportlet.setType(IdRepoImplementationType.REPORTLET);\n             auditReportlet.setBody(POJOHelper.serialize(new AuditReportletConf(\"auditReportlet\" + getUUIDString())));\n             Response response = implementationService.create(auditReportlet);\n             auditReportlet.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));"},{"sha":"3ce7f840d674ddcdc58ee17080d668c2fb2891b6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -56,7 +56,7 @@\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n@@ -106,7 +106,7 @@ private ResourceTO buildResourceTO(final String resourceKey) {\n     @Test\n     public void getPropagationActionsClasses() {\n         Set<String> actions = syncopeService.platform().\n-                getJavaImplInfo(ImplementationType.PROPAGATION_ACTIONS).get().getClasses();\n+                getJavaImplInfo(IdMImplementationType.PROPAGATION_ACTIONS).get().getClasses();\n         assertNotNull(actions);\n         assertFalse(actions.isEmpty());\n     }"},{"sha":"d68c2792f745dc1b35649113204bb9f5396e0b39","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n@@ -53,7 +53,7 @@ public class SchedTaskITCase extends AbstractTaskITCase {\n     @Test\n     public void getJobClasses() {\n         Set<String> jobClasses = syncopeService.platform().\n-                getJavaImplInfo(ImplementationType.TASKJOB_DELEGATE).get().getClasses();\n+                getJavaImplInfo(IdRepoImplementationType.TASKJOB_DELEGATE).get().getClasses();\n         assertNotNull(jobClasses);\n         assertFalse(jobClasses.isEmpty());\n     }\n@@ -90,7 +90,7 @@ public void update() {\n     @Test\n     public void deferred() {\n         ImplementationTO taskJobDelegate = implementationService.read(\n-                ImplementationType.TASKJOB_DELEGATE, TestSampleJobDelegate.class.getSimpleName());\n+                IdRepoImplementationType.TASKJOB_DELEGATE, TestSampleJobDelegate.class.getSimpleName());\n         assertNotNull(taskJobDelegate);\n \n         SchedTaskTO task = new SchedTaskTO();\n@@ -136,7 +136,7 @@ public void deferred() {\n     @Test\n     public void issueSYNCOPE144() {\n         ImplementationTO taskJobDelegate = implementationService.read(\n-                ImplementationType.TASKJOB_DELEGATE, TestSampleJobDelegate.class.getSimpleName());\n+                IdRepoImplementationType.TASKJOB_DELEGATE, TestSampleJobDelegate.class.getSimpleName());\n         assertNotNull(taskJobDelegate);\n \n         SchedTaskTO task = new SchedTaskTO();\n@@ -171,7 +171,7 @@ public void issueSYNCOPE660() {\n         int old_size = jobs.size();\n \n         ImplementationTO taskJobDelegate = implementationService.read(\n-                ImplementationType.TASKJOB_DELEGATE, TestSampleJobDelegate.class.getSimpleName());\n+                IdRepoImplementationType.TASKJOB_DELEGATE, TestSampleJobDelegate.class.getSimpleName());\n         assertNotNull(taskJobDelegate);\n \n         SchedTaskTO task = new SchedTaskTO();"},{"sha":"dbe70f53278e4da7c4be44809b1172a12ee52bd0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -75,8 +75,8 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n@@ -939,7 +939,7 @@ public void customPolicyRules() {\n         ImplementationTO implementationTO = new ImplementationTO();\n         implementationTO.setKey(\"TestAccountRuleConf\" + UUID.randomUUID().toString());\n         implementationTO.setEngine(ImplementationEngine.JAVA);\n-        implementationTO.setType(ImplementationType.ACCOUNT_RULE);\n+        implementationTO.setType(IdRepoImplementationType.ACCOUNT_RULE);\n         implementationTO.setBody(POJOHelper.serialize(new TestAccountRuleConf()));\n         Response response = implementationService.create(implementationTO);\n         implementationTO.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n@@ -953,7 +953,7 @@ public void customPolicyRules() {\n         implementationTO = new ImplementationTO();\n         implementationTO.setKey(\"TestPasswordRuleConf\" + UUID.randomUUID().toString());\n         implementationTO.setEngine(ImplementationEngine.JAVA);\n-        implementationTO.setType(ImplementationType.PASSWORD_RULE);\n+        implementationTO.setType(IdRepoImplementationType.PASSWORD_RULE);\n         implementationTO.setBody(POJOHelper.serialize(new TestPasswordRuleConf()));\n         response = implementationService.create(implementationTO);\n         implementationTO.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n@@ -1359,7 +1359,7 @@ public void haveIBeenPwned() {\n         ImplementationTO rule = new ImplementationTO();\n         rule.setKey(\"HaveIBeenPwnedPasswordRuleConf\" + getUUIDString());\n         rule.setEngine(ImplementationEngine.JAVA);\n-        rule.setType(ImplementationType.PASSWORD_RULE);\n+        rule.setType(IdRepoImplementationType.PASSWORD_RULE);\n         rule.setBody(POJOHelper.serialize(new HaveIBeenPwnedPasswordRuleConf()));\n         Response response = implementationService.create(rule);\n         rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));"},{"sha":"88eea921d0f31ed0b1c572022e4927b5f635d925","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -71,11 +71,12 @@\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.java.propagation.DBPasswordPropagationActions;\n@@ -799,12 +800,13 @@ public void issueSYNCOPE402() {\n     public void issueSYNCOPE420() throws IOException {\n         ImplementationTO logicActions;\n         try {\n-            logicActions = implementationService.read(ImplementationType.LOGIC_ACTIONS, \"DoubleValueLogicActions\");\n+            logicActions = implementationService.read(\n+                    IdRepoImplementationType.LOGIC_ACTIONS, \"DoubleValueLogicActions\");\n         } catch (SyncopeClientException e) {\n             logicActions = new ImplementationTO();\n             logicActions.setKey(\"DoubleValueLogicActions\");\n             logicActions.setEngine(ImplementationEngine.GROOVY);\n-            logicActions.setType(ImplementationType.LOGIC_ACTIONS);\n+            logicActions.setType(IdRepoImplementationType.LOGIC_ACTIONS);\n             logicActions.setBody(org.apache.commons.io.IOUtils.toString(\n                     getClass().getResourceAsStream(\"/DoubleValueLogicActions.groovy\"), StandardCharsets.UTF_8));\n             Response response = implementationService.create(logicActions);\n@@ -989,7 +991,7 @@ public void issueSYNCOPE505DB() throws Exception {\n         ImplementationTO propagationActions = new ImplementationTO();\n         propagationActions.setKey(DBPasswordPropagationActions.class.getSimpleName());\n         propagationActions.setEngine(ImplementationEngine.JAVA);\n-        propagationActions.setType(ImplementationType.PROPAGATION_ACTIONS);\n+        propagationActions.setType(IdMImplementationType.PROPAGATION_ACTIONS);\n         propagationActions.setBody(DBPasswordPropagationActions.class.getName());\n         Response response = implementationService.create(propagationActions);\n         propagationActions = implementationService.read(\n@@ -1039,7 +1041,7 @@ public void issueSYNCOPE505LDAP() throws Exception {\n         ImplementationTO propagationActions = new ImplementationTO();\n         propagationActions.setKey(LDAPPasswordPropagationActions.class.getSimpleName());\n         propagationActions.setEngine(ImplementationEngine.JAVA);\n-        propagationActions.setType(ImplementationType.PROPAGATION_ACTIONS);\n+        propagationActions.setType(IdMImplementationType.PROPAGATION_ACTIONS);\n         propagationActions.setBody(LDAPPasswordPropagationActions.class.getName());\n         Response response = implementationService.create(propagationActions);\n         propagationActions = implementationService.read(\n@@ -1231,7 +1233,7 @@ public void issueSYNCOPE626() {\n         ImplementationTO rule = new ImplementationTO();\n         rule.setKey(\"DefaultPasswordRuleConf\" + getUUIDString());\n         rule.setEngine(ImplementationEngine.JAVA);\n-        rule.setType(ImplementationType.PASSWORD_RULE);\n+        rule.setType(IdRepoImplementationType.PASSWORD_RULE);\n         rule.setBody(POJOHelper.serialize(ruleConf));\n         Response response = implementationService.create(rule);\n         rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));"},{"sha":"fe47dbfd2e2a422fd2d8513a7a06c10cfc9c9029","filename":"ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/ResourceConnector.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2FResourceConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2FResourceConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2FResourceConnector.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -24,17 +24,22 @@\n import org.apache.syncope.ide.netbeans.service.MailTemplateManagerService;\n import org.apache.syncope.ide.netbeans.service.ReportTemplateManagerService;\n import org.apache.syncope.ide.netbeans.service.ImplementationManagerService;\n+import org.apache.syncope.ide.netbeans.service.SyncopeManagerService;\n import org.apache.syncope.ide.netbeans.view.ResourceExplorerTopComponent;\n import org.openide.util.NbPreferences;\n \n public final class ResourceConnector {\n \n+    private static SyncopeManagerService SYNCOPE_MANAGER_SERVICE;\n+\n     private static MailTemplateManagerService MAIL_TEMPLATE_MANAGER_SERVICE;\n \n     private static ReportTemplateManagerService REPORT_TEMPLATE_MANAGER_SERVICE;\n \n     private static ImplementationManagerService IMPLEMENTATION_MANAGER_SERVICE;\n \n+    private static final Object SYNCOPE_MONITOR = new Object();\n+\n     private static final Object MAIL_TEMPLATE_MONITOR = new Object();\n \n     private static final Object REPORT_TEMPLATE_MONITOR = new Object();\n@@ -44,6 +49,17 @@ public final class ResourceConnector {\n     private ResourceConnector() {\n     }\n \n+    public static SyncopeManagerService getSyncopeManagerService() {\n+        synchronized (SYNCOPE_MONITOR) {\n+            ConnectionParams connParams = getConnectionParams();\n+            SYNCOPE_MANAGER_SERVICE = new SyncopeManagerService(\n+                    connParams.getUrl(),\n+                    connParams.getUsername(),\n+                    connParams.getPassword());\n+        }\n+        return SYNCOPE_MANAGER_SERVICE;\n+    }\n+\n     public static MailTemplateManagerService getMailTemplateManagerService() throws IOException {\n         synchronized (MAIL_TEMPLATE_MONITOR) {\n             ConnectionParams connParams = getConnectionParams();"},{"sha":"96d8517b37664a971548718a6962bcce9769d4c4","filename":"ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/service/ImplementationManagerService.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fservice%2FImplementationManagerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fservice%2FImplementationManagerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fservice%2FImplementationManagerService.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -23,7 +23,6 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.rest.api.service.ImplementationService;\n \n public class ImplementationManagerService {\n@@ -35,19 +34,19 @@ public ImplementationManagerService(final String url, final String userName, fin\n         service = syncopeClient.getService(ImplementationService.class);\n     }\n \n-    public List<ImplementationTO> list(final ImplementationType type) {\n+    public List<ImplementationTO> list(final String type) {\n         return service.list(type);\n     }\n \n-    public ImplementationTO read(final ImplementationType type, final String key) {\n+    public ImplementationTO read(final String type, final String key) {\n         return service.read(type, key);\n     }\n \n     public boolean create(final ImplementationTO implementationTO) {\n         return Response.Status.CREATED.getStatusCode() == service.create(implementationTO).getStatus();\n     }\n \n-    public boolean delete(final ImplementationType type, final String key) {\n+    public boolean delete(final String type, final String key) {\n         return Response.Status.NO_CONTENT.getStatusCode() == service.delete(type, key).getStatus();\n     }\n "},{"sha":"4e8697a4360e16bae73c02e87ef822000304ae0b","filename":"ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/service/SyncopeManagerService.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fservice%2FSyncopeManagerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fservice%2FSyncopeManagerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fservice%2FSyncopeManagerService.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ide.netbeans.service;\n+\n+import java.util.Set;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n+\n+public class SyncopeManagerService {\n+\n+    private final SyncopeService service;\n+\n+    public SyncopeManagerService(final String url, final String userName, final String password) {\n+        SyncopeClient syncopeClient = new SyncopeClientFactoryBean().setAddress(url).create(userName, password);\n+        service = syncopeClient.getService(SyncopeService.class);\n+    }\n+\n+    public Set<String> getImplementationTypes() {\n+        return service.platform().getImplementationTypes();\n+    }\n+}"},{"sha":"4f5bccd62a8c34388cded9aa475bf2c1c08a00f6","filename":"ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/view/ResourceExplorerTopComponent.java","status":"modified","additions":213,"deletions":285,"changes":498,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce9d79d9907448298b7809fe41f7746a890c0b19/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce9d79d9907448298b7809fe41f7746a890c0b19/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java?ref=ce9d79d9907448298b7809fe41f7746a890c0b19","patch":"@@ -20,15 +20,13 @@\n \n import java.awt.Image;\n import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n import java.awt.event.MouseEvent;\n-import java.beans.PropertyChangeEvent;\n-import java.beans.PropertyChangeListener;\n import java.io.File;\n import java.io.FileWriter;\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.List;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -48,15 +46,17 @@\n import org.apache.syncope.common.lib.to.MailTemplateTO;\n import org.apache.syncope.common.lib.to.ReportTemplateTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.MailTemplateFormat;\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n-import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.ide.netbeans.PluginConstants;\n import org.apache.syncope.ide.netbeans.ResourceConnector;\n import org.apache.syncope.ide.netbeans.service.MailTemplateManagerService;\n import org.apache.syncope.ide.netbeans.service.ReportTemplateManagerService;\n import org.apache.syncope.ide.netbeans.service.ImplementationManagerService;\n+import org.apache.syncope.ide.netbeans.service.SyncopeManagerService;\n import org.netbeans.api.editor.EditorRegistry;\n import org.netbeans.api.progress.ProgressHandle;\n import org.netbeans.api.settings.ConvertAsProperties;\n@@ -66,7 +66,6 @@\n import org.openide.filesystems.FileObject;\n import org.openide.filesystems.FileUtil;\n import org.openide.loaders.DataObject;\n-import org.openide.util.Cancellable;\n import org.openide.util.Exceptions;\n import org.openide.util.NbPreferences;\n import org.openide.util.RequestProcessor;\n@@ -111,6 +110,8 @@ public final class ResourceExplorerTopComponent extends TopComponent {\n \n     private final DefaultMutableTreeNode groovyScripts;\n \n+    private SyncopeManagerService syncopeManagerService;\n+\n     private MailTemplateManagerService mailTemplateManagerService;\n \n     private ReportTemplateManagerService reportTemplateManagerService;\n@@ -243,42 +244,32 @@ public void componentOpened() {\n                 || StringUtils.isBlank(prefs.get(\"port\", null))\n                 || StringUtils.isBlank(prefs.get(\"username\", null))\n                 || StringUtils.isBlank(prefs.get(\"password\", null))) {\n+\n             new ServerDetailsView(null, true).setVisible(true);\n         }\n         try {\n+            syncopeManagerService = ResourceConnector.getSyncopeManagerService();\n             mailTemplateManagerService = ResourceConnector.getMailTemplateManagerService();\n             reportTemplateManagerService = ResourceConnector.getReportTemplateManagerService();\n             implementationManagerService = ResourceConnector.getImplementationManagerService();\n             // init tree, because on close it is reset\n             initTemplatesTree();\n             // Load templates\n             LOG.info(\"Loading Apache Syncope templates...\");\n-            Runnable tsk = new Runnable() {\n-\n-                @Override\n-                public void run() {\n-\n-                    final ProgressHandle progr = ProgressHandle.createHandle(\"Loading Templates\", new Cancellable() {\n-\n-                        @Override\n-                        public boolean cancel() {\n-                            return true;\n-                        }\n-                    });\n-\n-                    progr.start();\n-                    progr.progress(\"Loading Templates.\");\n-                    addMailTemplates();\n-                    addReportXslts();\n-                    addGroovyScripts();\n-                    progr.finish();\n-                }\n-\n+            Runnable tsk = () -> {\n+                final ProgressHandle progr = ProgressHandle.createHandle(\"Loading Templates\", () -> true);\n+\n+                progr.start();\n+                progr.progress(\"Loading Templates.\");\n+                addMailTemplates();\n+                addReportXslts();\n+                addGroovyScripts();\n+                progr.finish();\n             };\n             REQUEST_PROCESSOR.post(tsk);\n         } catch (IOException e) {\n             JOptionPane.showMessageDialog(null, e.getMessage(), \"Generic Error\", JOptionPane.ERROR_MESSAGE);\n-            ServerDetailsView serverDetails = getRefreshServerDetails();\n+            getRefreshServerDetails();\n         } catch (Exception ex) {\n             getRefreshServerDetails().setVisible(true);\n         }\n@@ -304,38 +295,33 @@ void readProperties(final java.util.Properties p) {\n \n     private void addMailTemplates() {\n         List<MailTemplateTO> mailTemplateList = mailTemplateManagerService.list();\n-        for (MailTemplateTO mailTemplate : mailTemplateList) {\n-            this.mailTemplates.add(new DefaultMutableTreeNode(\n-                    mailTemplate.getKey()));\n-        }\n+        mailTemplateList.forEach(mailTemplate -> {\n+            this.mailTemplates.add(new DefaultMutableTreeNode(mailTemplate.getKey()));\n+        });\n         treeModel.reload();\n     }\n \n     private void addReportXslts() {\n         List<ReportTemplateTO> reportTemplates = reportTemplateManagerService.list();\n-        for (ReportTemplateTO reportTemplate : reportTemplates) {\n-            reportXslts.add(new DefaultMutableTreeNode(\n-                    reportTemplate.getKey()));\n-        }\n+        reportTemplates.forEach(reportTemplate -> {\n+            reportXslts.add(new DefaultMutableTreeNode(reportTemplate.getKey()));\n+        });\n         treeModel.reload();\n     }\n \n     private void addGroovyScripts() {\n-        for (ImplementationType type : ImplementationType.values()) {\n-            String implType = type.toString();\n-            DefaultMutableTreeNode tempNode = new DefaultMutableTreeNode(implType.toString());\n-            if (implType.equals(\"JWT_SSO_PROVIDER\") || implType.equals(\"AUDIT_APPENDER\")) {\n-                continue;\n-            }\n-            List<ImplementationTO> scripts = implementationManagerService.list(type);\n-            for (ImplementationTO script : scripts) {\n-                if (script.getEngine() == ImplementationEngine.GROOVY) {\n-                    tempNode.add(new DefaultMutableTreeNode(\n-                            script.getKey()));\n-                }\n-            }\n-            groovyScripts.add(tempNode);\n-        }\n+        syncopeManagerService.getImplementationTypes().stream().\n+                filter(type -> !IdRepoImplementationType.JWT_SSO_PROVIDER.equals(type)\n+                && !IdRepoImplementationType.AUDIT_APPENDER.equals(type)).\n+                forEach(type -> {\n+\n+                    DefaultMutableTreeNode tempNode = new DefaultMutableTreeNode(type);\n+                    List<ImplementationTO> scripts = implementationManagerService.list(type);\n+                    scripts.stream().\n+                            filter((script) -> (script.getEngine() == ImplementationEngine.GROOVY)).\n+                            forEach(script -> tempNode.add(new DefaultMutableTreeNode(script.getKey())));\n+                    groovyScripts.add(tempNode);\n+                });\n \n         treeModel.reload();\n     }\n@@ -347,176 +333,154 @@ private void rootRightClickAction(final MouseEvent evt) {\n         menu.add(refreshItem);\n         menu.add(resetConnectionItem);\n \n-        refreshItem.addActionListener(new ActionListener() {\n-\n-            @Override\n-            public void actionPerformed(final ActionEvent e) {\n-                // simulate close and open to refresh the tree\n-                componentClosed();\n-                componentOpened();\n-            }\n+        refreshItem.addActionListener(event -> {\n+            // simulate close and open to refresh the tree\n+            componentClosed();\n+            componentOpened();\n         });\n \n-        resetConnectionItem.addActionListener(new ActionListener() {\n-\n-            @Override\n-            public void actionPerformed(final ActionEvent evt) {\n-                ServerDetailsView serverDetails = getRefreshServerDetails();\n-                // set previous preferences\n-                Preferences prefs = NbPreferences.forModule(ResourceExplorerTopComponent.class);\n-                serverDetails.setDetails(prefs.get(\"scheme\", \"http\"),\n-                        prefs.get(\"host\", \"localhost\"),\n-                        prefs.get(\"port\", \"8080\"),\n-                        prefs.get(\"username\", StringUtils.EMPTY),\n-                        prefs.get(\"password\", StringUtils.EMPTY));\n-                // reset connection preferences\n-                prefs.remove(\"scheme\");\n-                prefs.remove(\"host\");\n-                prefs.remove(\"port\");\n-                prefs.remove(\"username\");\n-                prefs.remove(\"password\");\n-                serverDetails.setVisible(true);\n-            }\n+        resetConnectionItem.addActionListener(event -> {\n+            ServerDetailsView serverDetails = getRefreshServerDetails();\n+            // set previous preferences\n+            Preferences prefs = NbPreferences.forModule(ResourceExplorerTopComponent.class);\n+            serverDetails.setDetails(prefs.get(\"scheme\", \"http\"),\n+                    prefs.get(\"host\", \"localhost\"),\n+                    prefs.get(\"port\", \"8080\"),\n+                    prefs.get(\"username\", StringUtils.EMPTY),\n+                    prefs.get(\"password\", StringUtils.EMPTY));\n+            // reset connection preferences\n+            prefs.remove(\"scheme\");\n+            prefs.remove(\"host\");\n+            prefs.remove(\"port\");\n+            prefs.remove(\"username\");\n+            prefs.remove(\"password\");\n+            serverDetails.setVisible(true);\n         });\n \n         menu.show(evt.getComponent(), evt.getX(), evt.getY());\n     }\n \n-    private void folderRightClickAction(final MouseEvent evt,\n-            final DefaultMutableTreeNode node) {\n+    private void folderRightClickAction(final MouseEvent evt, final DefaultMutableTreeNode node) {\n         JPopupMenu menu = new JPopupMenu();\n         JMenuItem addItem = new JMenuItem(\"New\");\n         menu.add(addItem);\n \n-        addItem.addActionListener(new ActionListener() {\n-\n-            @Override\n-            public void actionPerformed(final ActionEvent event) {\n-                try {\n-                    String name = JOptionPane.showInputDialog(\"Enter Name\");\n-                    if (StringUtils.isBlank(name)) {\n-                        return;\n-                    }\n-\n-                    DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();\n-                    boolean added = false;\n-\n-                    if (!\"exit\".equals(event.getActionCommand())) {\n-                        if (PluginConstants.MAIL_TEMPLATES.equals(node.getUserObject())) {\n-\n-                            MailTemplateTO mailTemplate = new MailTemplateTO();\n-                            mailTemplate.setKey(name);\n-                            added = mailTemplateManagerService.create(mailTemplate);\n-                            mailTemplateManagerService.setFormat(name,\n-                                    MailTemplateFormat.HTML,\n-                                    IOUtils.toInputStream(\"//Enter Content here\", encodingPattern));\n-                            mailTemplateManagerService.setFormat(name,\n-                                    MailTemplateFormat.TEXT,\n-                                    IOUtils.toInputStream(\"//Enter Content here\", encodingPattern));\n-                            openMailEditor(name);\n-                        } else if (PluginConstants.GROOVY_SCRIPTS.equals(parent.getUserObject())) {\n-                            ImplementationTO newNode = new ImplementationTO();\n-                            ImplementationType type = getType((String) node.getUserObject());\n-                            newNode.setKey(name);\n-                            newNode.setEngine(ImplementationEngine.GROOVY);\n-                            newNode.setType(type);\n-                            String templateClassName = null;\n-                            switch (type) {\n-                                case REPORTLET:\n-                                    templateClassName = \"MyReportlet\";\n-                                    break;\n-\n-                                case ACCOUNT_RULE:\n-                                    templateClassName = \"MyAccountRule\";\n-                                    break;\n-\n-                                case PASSWORD_RULE:\n-                                    templateClassName = \"MyPasswordRule\";\n-                                    break;\n-\n-                                case ITEM_TRANSFORMER:\n-                                    templateClassName = \"MyItemTransformer\";\n-                                    break;\n-\n-                                case TASKJOB_DELEGATE:\n-                                    templateClassName = \"MySchedTaskJobDelegate\";\n-                                    break;\n-\n-                                case RECON_FILTER_BUILDER:\n-                                    templateClassName = \"MyReconFilterBuilder\";\n-                                    break;\n-\n-                                case LOGIC_ACTIONS:\n-                                    templateClassName = \"MyLogicActions\";\n-                                    break;\n-\n-                                case PROPAGATION_ACTIONS:\n-                                    templateClassName = \"MyPropagationActions\";\n-                                    break;\n-\n-                                case PULL_ACTIONS:\n-                                    templateClassName = \"MyPullActions\";\n-                                    break;\n-\n-                                case PUSH_ACTIONS:\n-                                    templateClassName = \"MyPushActions\";\n-                                    break;\n-\n-                                case PULL_CORRELATION_RULE:\n-                                    templateClassName = \"MyPullCorrelationRule\";\n-                                    break;\n-\n-                                case PUSH_CORRELATION_RULE:\n-                                    templateClassName = \"MyPushCorrelationRule\";\n-                                    break;\n-\n-                                case VALIDATOR:\n-                                    templateClassName = \"MyValidator\";\n-                                    break;\n-\n-                                case RECIPIENTS_PROVIDER:\n-                                    templateClassName = \"MyRecipientsProvider\";\n-                                    break;\n-\n-                                default:\n-                            }\n-                            newNode.setBody(IOUtils.toString(\n-                                    getClass().getResourceAsStream(\"/org/apache/syncope/ide/netbeans/implementations/\"\n-                                            + templateClassName + \".groovy\")));\n-                            added = implementationManagerService.create(newNode);\n-                            openScriptEditor(name, (String) node.getUserObject());\n-                        } else {\n-                            ReportTemplateTO reportTemplate = new ReportTemplateTO();\n-                            reportTemplate.setKey(name);\n-                            added = reportTemplateManagerService.create(reportTemplate);\n-                            reportTemplateManagerService.setFormat(name,\n-                                    ReportTemplateFormat.FO,\n-                                    IOUtils.toInputStream(\"//Enter content here\", encodingPattern));\n-                            reportTemplateManagerService.setFormat(name,\n-                                    ReportTemplateFormat.CSV,\n-                                    IOUtils.toInputStream(\"//Enter content here\", encodingPattern));\n-                            reportTemplateManagerService.setFormat(name,\n-                                    ReportTemplateFormat.HTML,\n-                                    IOUtils.toInputStream(\"//Enter content here\", encodingPattern));\n-                            openReportEditor(name);\n-                        }\n-\n-                        if (added) {\n-                            node.add(new DefaultMutableTreeNode(name));\n-                            treeModel.reload(node);\n-                        } else {\n-                            JOptionPane.showMessageDialog(\n-                                    null, \"Error while creating new element\", \"Error\", JOptionPane.ERROR_MESSAGE);\n+        addItem.addActionListener(event -> {\n+            try {\n+                String name1 = JOptionPane.showInputDialog(\"Enter Name\");\n+                if (StringUtils.isBlank(name1)) {\n+                    return;\n+                }\n+                DefaultMutableTreeNode parent1 = (DefaultMutableTreeNode) node.getParent();\n+                if (!\"exit\".equals(event.getActionCommand())) {\n+                    boolean added;\n+                    if (PluginConstants.MAIL_TEMPLATES.equals(node.getUserObject())) {\n+                        MailTemplateTO mailTemplate = new MailTemplateTO();\n+                        mailTemplate.setKey(name1);\n+                        added = mailTemplateManagerService.create(mailTemplate);\n+                        mailTemplateManagerService.setFormat(name1, MailTemplateFormat.HTML,\n+                                IOUtils.toInputStream(\"//Enter Content here\", encodingPattern));\n+                        mailTemplateManagerService.setFormat(name1, MailTemplateFormat.TEXT,\n+                                IOUtils.toInputStream(\"//Enter Content here\", encodingPattern));\n+                        openMailEditor(name1);\n+                    } else if (PluginConstants.GROOVY_SCRIPTS.equals(parent1.getUserObject())) {\n+                        ImplementationTO newNode = new ImplementationTO();\n+                        String type = (String) node.getUserObject();\n+                        newNode.setKey(name1);\n+                        newNode.setEngine(ImplementationEngine.GROOVY);\n+                        newNode.setType(type);\n+                        String templateClassName = null;\n+                        switch (type) {\n+                            case IdRepoImplementationType.REPORTLET:\n+                                templateClassName = \"MyReportlet\";\n+                                break;\n+\n+                            case IdRepoImplementationType.ACCOUNT_RULE:\n+                                templateClassName = \"MyAccountRule\";\n+                                break;\n+\n+                            case IdRepoImplementationType.PASSWORD_RULE:\n+                                templateClassName = \"MyPasswordRule\";\n+                                break;\n+\n+                            case IdMImplementationType.ITEM_TRANSFORMER:\n+                                templateClassName = \"MyItemTransformer\";\n+                                break;\n+\n+                            case IdRepoImplementationType.TASKJOB_DELEGATE:\n+                                templateClassName = \"MySchedTaskJobDelegate\";\n+                                break;\n+\n+                            case IdMImplementationType.RECON_FILTER_BUILDER:\n+                                templateClassName = \"MyReconFilterBuilder\";\n+                                break;\n+\n+                            case IdRepoImplementationType.LOGIC_ACTIONS:\n+                                templateClassName = \"MyLogicActions\";\n+                                break;\n+\n+                            case IdMImplementationType.PROPAGATION_ACTIONS:\n+                                templateClassName = \"MyPropagationActions\";\n+                                break;\n+\n+                            case IdMImplementationType.PULL_ACTIONS:\n+                                templateClassName = \"MyPullActions\";\n+                                break;\n+\n+                            case IdMImplementationType.PUSH_ACTIONS:\n+                                templateClassName = \"MyPushActions\";\n+                                break;\n+\n+                            case IdMImplementationType.PULL_CORRELATION_RULE:\n+                                templateClassName = \"MyPullCorrelationRule\";\n+                                break;\n+\n+                            case IdMImplementationType.PUSH_CORRELATION_RULE:\n+                                templateClassName = \"MyPushCorrelationRule\";\n+                                break;\n+\n+                            case IdRepoImplementationType.VALIDATOR:\n+                                templateClassName = \"MyValidator\";\n+                                break;\n+\n+                            case IdRepoImplementationType.RECIPIENTS_PROVIDER:\n+                                templateClassName = \"MyRecipientsProvider\";\n+                                break;\n+\n+                            default:\n                         }\n+                        newNode.setBody(IOUtils.toString(getClass().getResourceAsStream(\n+                                \"/org/apache/syncope/ide/netbeans/implementations/\" + templateClassName + \".groovy\"),\n+                                StandardCharsets.UTF_8));\n+                        added = implementationManagerService.create(newNode);\n+                        openScriptEditor(name1, (String) node.getUserObject());\n+                    } else {\n+                        ReportTemplateTO reportTemplate = new ReportTemplateTO();\n+                        reportTemplate.setKey(name1);\n+                        added = reportTemplateManagerService.create(reportTemplate);\n+                        reportTemplateManagerService.setFormat(name1, ReportTemplateFormat.FO,\n+                                IOUtils.toInputStream(\"//Enter content here\", encodingPattern));\n+                        reportTemplateManagerService.setFormat(name1, ReportTemplateFormat.CSV,\n+                                IOUtils.toInputStream(\"//Enter content here\", encodingPattern));\n+                        reportTemplateManagerService.setFormat(name1, ReportTemplateFormat.HTML,\n+                                IOUtils.toInputStream(\"//Enter content here\", encodingPattern));\n+                        openReportEditor(name1);\n+                    }\n+                    if (added) {\n+                        node.add(new DefaultMutableTreeNode(name1));\n+                        treeModel.reload(node);\n+                    } else {\n+                        JOptionPane.showMessageDialog(\n+                                null, \"Error while creating new element\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                     }\n-                } catch (SyncopeClientException excp) {\n-                    JOptionPane.showMessageDialog(null, excp.getMessage(), \"Syncope Error\", JOptionPane.ERROR_MESSAGE);\n-                } catch (IOException ex) {\n-                    JOptionPane.showMessageDialog(null, ex.getMessage(), \"Error\", JOptionPane.ERROR_MESSAGE);\n-                } catch (Exception exc) {\n-                    LOG.log(Level.WARNING, \"Refreshing after exception\");\n-                    getRefreshServerDetails().setVisible(true);\n                 }\n+            } catch (SyncopeClientException sce) {\n+                JOptionPane.showMessageDialog(null, sce.getMessage(), \"Syncope Error\", JOptionPane.ERROR_MESSAGE);\n+            } catch (IOException ioe) {\n+                JOptionPane.showMessageDialog(null, ioe.getMessage(), \"Error\", JOptionPane.ERROR_MESSAGE);\n+            } catch (Exception e) {\n+                LOG.log(Level.WARNING, \"Refreshing after exception\", e);\n+                getRefreshServerDetails().setVisible(true);\n             }\n         });\n \n@@ -529,37 +493,33 @@ private void leafRightClickAction(final MouseEvent evt,\n         JMenuItem deleteItem = new JMenuItem(\"Delete\");\n         menu.add(deleteItem);\n \n-        deleteItem.addActionListener(new ActionListener() {\n-\n-            @Override\n-            public void actionPerformed(final ActionEvent e) {\n-                int result = JOptionPane.showConfirmDialog(null, \"Are you sure to delete the item?\");\n-                if (result == JOptionPane.OK_OPTION) {\n-                    DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();\n-                    String nodeName = (String) node.getUserObject();\n-                    boolean deleted = false;\n-                    try {\n-                        if (PluginConstants.MAIL_TEMPLATES.equals(parent.getUserObject())) {\n-                            deleted = mailTemplateManagerService.delete(nodeName);\n-                        } else if (PluginConstants.REPORT_XSLTS.equals(parent.getUserObject())) {\n-                            deleted = reportTemplateManagerService.delete(nodeName);\n-                        } else {\n-                            ImplementationType type = getType((String) parent.getUserObject());\n-                            deleted = implementationManagerService.delete(type, nodeName);\n-                        }\n-                        if (deleted) {\n-                            node.removeFromParent();\n-                            treeModel.reload(parent);\n-                        } else {\n-                            JOptionPane.showMessageDialog(\n-                                    null, \"Error while deleting new element\", \"Error\", JOptionPane.ERROR_MESSAGE);\n-                        }\n-                    } catch (SyncopeClientException exc) {\n+        deleteItem.addActionListener(event -> {\n+            int result = JOptionPane.showConfirmDialog(null, \"Are you sure to delete the item?\");\n+            if (result == JOptionPane.OK_OPTION) {\n+                DefaultMutableTreeNode parent1 = (DefaultMutableTreeNode) node.getParent();\n+                String nodeName1 = (String) node.getUserObject();\n+                try {\n+                    boolean deleted;\n+                    if (PluginConstants.MAIL_TEMPLATES.equals(parent1.getUserObject())) {\n+                        deleted = mailTemplateManagerService.delete(nodeName1);\n+                    } else if (PluginConstants.REPORT_XSLTS.equals(parent1.getUserObject())) {\n+                        deleted = reportTemplateManagerService.delete(nodeName1);\n+                    } else {\n+                        String type = (String) parent1.getUserObject();\n+                        deleted = implementationManagerService.delete(type, nodeName1);\n+                    }\n+                    if (deleted) {\n+                        node.removeFromParent();\n+                        treeModel.reload(parent1);\n+                    } else {\n                         JOptionPane.showMessageDialog(\n-                                null, exc.getMessage(), \"Syncope Error\", JOptionPane.ERROR_MESSAGE);\n-                    } catch (Exception ex) {\n-                        getRefreshServerDetails().setVisible(true);\n+                                null, \"Error while deleting new element\", \"Error\", JOptionPane.ERROR_MESSAGE);\n                     }\n+                } catch (SyncopeClientException exc) {\n+                    JOptionPane.showMessageDialog(\n+                            null, exc.getMessage(), \"Syncope Error\", JOptionPane.ERROR_MESSAGE);\n+                } catch (Exception ex) {\n+                    getRefreshServerDetails().setVisible(true);\n                 }\n             }\n         });\n@@ -605,24 +565,19 @@ private void openMailEditor(final String name) throws IOException {\n             fob.setAttribute(\"description\", \"TEXT\");\n             DataObject data = DataObject.find(fob);\n             data.getLookup().lookup(OpenCookie.class).open();\n-            data.addPropertyChangeListener(new PropertyChangeListener() {\n-\n-                @Override\n-                public void propertyChange(final PropertyChangeEvent evt) {\n-                    if (DataObject.PROP_MODIFIED.equals(evt.getPropertyName())) {\n-                        //save item remotely\n-                        LOG.info(String.format(\"Saving Mail template [%s]\", name));\n-                        saveContent();\n-                    }\n+            data.addPropertyChangeListener(event -> {\n+                if (DataObject.PROP_MODIFIED.equals(event.getPropertyName())) {\n+                    //save item remotely\n+                    LOG.info(String.format(\"Saving Mail template [%s]\", name));\n+                    saveContent();\n                 }\n             });\n         }\n     }\n \n     private void openScriptEditor(final String name, final String type) throws IOException {\n-        ImplementationTO node = implementationManagerService.read(getType(type), name);\n-        String groovyScriptsDirName = System.getProperty(\"java.io.tmpdir\") + \"/Groovy/\"\n-                + node.getType().toString() + \"/\";\n+        ImplementationTO node = implementationManagerService.read(type, name);\n+        String groovyScriptsDirName = System.getProperty(\"java.io.tmpdir\") + \"/Groovy/\" + node.getType() + \"/\";\n         File groovyScriptsDir = new File(groovyScriptsDirName);\n         if (!groovyScriptsDir.exists()) {\n             groovyScriptsDir.mkdirs();\n@@ -634,18 +589,13 @@ private void openScriptEditor(final String name, final String type) throws IOExc\n         FileObject fob = FileUtil.toFileObject(file.getAbsoluteFile());\n         DataObject data = DataObject.find(fob);\n         data.getLookup().lookup(OpenCookie.class).open();\n-        data.addPropertyChangeListener(new PropertyChangeListener() {\n-\n-            @Override\n-            public void propertyChange(final PropertyChangeEvent evt) {\n-                if (DataObject.PROP_MODIFIED.equals(evt.getPropertyName())) {\n-                    //save item remotely\n-                    LOG.info(String.format(\"Saving Groovy template [%s]\", name));\n-                    saveContent();\n-                }\n+        data.addPropertyChangeListener(event -> {\n+            if (DataObject.PROP_MODIFIED.equals(event.getPropertyName())) {\n+                //save item remotely\n+                LOG.info(String.format(\"Saving Groovy template [%s]\", name));\n+                saveContent();\n             }\n         });\n-\n     }\n \n     private void openReportEditor(final String name) throws IOException {\n@@ -685,15 +635,11 @@ private void openReportEditor(final String name) throws IOException {\n             FileObject fob = FileUtil.toFileObject(file.getAbsoluteFile());\n             DataObject data = DataObject.find(fob);\n             data.getLookup().lookup(OpenCookie.class).open();\n-            data.addPropertyChangeListener(new PropertyChangeListener() {\n-\n-                @Override\n-                public void propertyChange(final PropertyChangeEvent evt) {\n-                    if (DataObject.PROP_MODIFIED.equals(evt.getPropertyName())) {\n-                        //save item remotely\n-                        LOG.info(String.format(\"Saving Report template [%s]\", name));\n-                        saveContent();\n-                    }\n+            data.addPropertyChangeListener(event -> {\n+                if (DataObject.PROP_MODIFIED.equals(event.getPropertyName())) {\n+                    //save item remotely\n+                    LOG.info(String.format(\"Saving Report template [%s]\", name));\n+                    saveContent();\n                 }\n             });\n         }\n@@ -736,7 +682,7 @@ private void saveContent() {\n                         ReportTemplateFormat.CSV,\n                         IOUtils.toInputStream(content, encodingPattern));\n             } else if (\"Groovy\".equals(fileName)) {\n-                ImplementationTO node = implementationManagerService.read(getType(templateType), key);\n+                ImplementationTO node = implementationManagerService.read(templateType, key);\n                 node.setBody(content);\n                 implementationManagerService.update(node);\n             }\n@@ -747,24 +693,6 @@ private void saveContent() {\n         }\n     }\n \n-    private ImplementationType getType(final String typeName) {\n-        ImplementationType type = null;\n-        for (ImplementationType implType : ImplementationType.values()) {\n-            if (implType.toString().equals(typeName)) {\n-                type = implType;\n-            }\n-\n-        }\n-        return (type);\n-    }\n-\n-    private void closeComponent() {\n-        boolean isClosed = this.close();\n-        if (!isClosed) {\n-            LOG.log(Level.SEVERE, \"Unable to close {0}\", getClass().getSimpleName());\n-        }\n-    }\n-\n     private void initTemplatesTree() {\n         visibleRoot.add(mailTemplates);\n         visibleRoot.add(reportXslts);"}]}