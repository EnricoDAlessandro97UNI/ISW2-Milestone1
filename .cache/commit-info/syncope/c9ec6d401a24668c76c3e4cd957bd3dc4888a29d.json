{"sha":"c9ec6d401a24668c76c3e4cd957bd3dc4888a29d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM5ZWM2ZDQwMWEyNDY2OGM3NmMzZTRjZDk1N2JkM2RjNDg4OGEyOWQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-05-09T14:56:13Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-05-09T14:56:13Z"},"message":"[SYNCOPE-156] Painless plain user access to admin console","tree":{"sha":"d56d7618e8f84634273c47a4e85719f063577ab1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d56d7618e8f84634273c47a4e85719f063577ab1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c9ec6d401a24668c76c3e4cd957bd3dc4888a29d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c9ec6d401a24668c76c3e4cd957bd3dc4888a29d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c9ec6d401a24668c76c3e4cd957bd3dc4888a29d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c9ec6d401a24668c76c3e4cd957bd3dc4888a29d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a4df24e34e703bf74a2bdaa38472e7c661f6ae44","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a4df24e34e703bf74a2bdaa38472e7c661f6ae44","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a4df24e34e703bf74a2bdaa38472e7c661f6ae44"}],"stats":{"total":98,"additions":65,"deletions":33},"files":[{"sha":"e38b26a08eac3d519e7a963c548c94ad840e1d58","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/DashboardControlPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9ec6d401a24668c76c3e4cd957bd3dc4888a29d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardControlPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9ec6d401a24668c76c3e4cd957bd3dc4888a29d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardControlPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardControlPanel.java?ref=c9ec6d401a24668c76c3e4cd957bd3dc4888a29d","patch":"@@ -21,9 +21,9 @@\n import org.apache.syncope.client.console.widgets.JobWidget;\n import org.apache.syncope.client.console.widgets.ReconciliationWidget;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n-import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.markup.html.panel.Panel;\n \n public class DashboardControlPanel extends Panel {\n@@ -34,15 +34,15 @@ public DashboardControlPanel(final String id, final PageReference pageRef) {\n         super(id);\n \n         JobWidget job = new JobWidget(\"job\", pageRef);\n-        MetaDataRoleAuthorizationStrategy.authorize(job, WebPage.ENABLE,\n+        MetaDataRoleAuthorizationStrategy.authorize(job, Component.RENDER,\n                 String.format(\"%s,%s,%s\",\n                         StandardEntitlement.NOTIFICATION_LIST,\n                         StandardEntitlement.TASK_LIST,\n                         StandardEntitlement.REPORT_LIST));\n         add(job);\n \n         ReconciliationWidget reconciliation = new ReconciliationWidget(\"reconciliation\", pageRef);\n-        MetaDataRoleAuthorizationStrategy.authorize(job, WebPage.ENABLE,\n+        MetaDataRoleAuthorizationStrategy.authorize(job, Component.RENDER,\n                 String.format(\"%s,%s,%s\",\n                         StandardEntitlement.REPORT_EXECUTE,\n                         StandardEntitlement.REPORT_READ,"},{"sha":"ce549f4069ac44450b044eef43989a18ce2f6d80","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/AnyByRealmWidget.java","status":"modified","additions":21,"deletions":10,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9ec6d401a24668c76c3e4cd957bd3dc4888a29d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAnyByRealmWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9ec6d401a24668c76c3e4cd957bd3dc4888a29d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAnyByRealmWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAnyByRealmWidget.java?ref=c9ec6d401a24668c76c3e4cd957bd3dc4888a29d","patch":"@@ -22,10 +22,12 @@\n import com.pingunaut.wicket.chartjs.core.panel.BarChartPanel;\n import com.pingunaut.wicket.chartjs.data.sets.BarDataSet;\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import org.apache.syncope.client.console.rest.RealmRestClient;\n-import org.apache.syncope.common.lib.to.RealmTO;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.wicket.model.Model;\n \n public class AnyByRealmWidget extends BaseWidget {\n@@ -87,19 +89,28 @@ private Bar build(\n         List<Integer> any1Values = new ArrayList<>();\n         List<Integer> any2Values = new ArrayList<>();\n \n-        List<RealmTO> realms = new RealmRestClient().list();\n-        for (int i = 0; i < realms.size() && i < MAX_REALMS; i++) {\n-            RealmTO realm = realms.get(i);\n+        Set<String> realmSet = new HashSet<>();\n+        realmSet.addAll(usersByRealm.keySet());\n+        realmSet.addAll(groupsByRealm.keySet());\n+        if (any1ByRealm != null) {\n+            realmSet.addAll(any1ByRealm.keySet());\n+        }\n+        if (any2ByRealm != null) {\n+            realmSet.addAll(any2ByRealm.keySet());\n+        }\n+        List<String> realms = new ArrayList<>(realmSet);\n+        Collections.sort(realms);\n \n-            labels.add(realm.getName());\n+        for (int i = 0; i < realms.size() && i < MAX_REALMS; i++) {\n+            labels.add(StringUtils.prependIfMissing(StringUtils.substringAfterLast(realms.get(i), \"/\"), \"/\"));\n \n-            userValues.add(usersByRealm.get(realm.getFullPath()));\n-            groupValues.add(groupsByRealm.get(realm.getFullPath()));\n+            userValues.add(usersByRealm.get(realms.get(i)));\n+            groupValues.add(groupsByRealm.get(realms.get(i)));\n             if (any1ByRealm != null) {\n-                any1Values.add(any1ByRealm.get(realm.getFullPath()));\n+                any1Values.add(any1ByRealm.get(realms.get(i)));\n             }\n             if (any2ByRealm != null) {\n-                any2Values.add(any2ByRealm.get(realm.getFullPath()));\n+                any2Values.add(any2ByRealm.get(realms.get(i)));\n             }\n         }\n "},{"sha":"99f928e63bd02d268a4b92c248fda6253ef0c78f","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":19,"deletions":7,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9ec6d401a24668c76c3e4cd957bd3dc4888a29d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9ec6d401a24668c76c3e4cd957bd3dc4888a29d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=c9ec6d401a24668c76c3e4cd957bd3dc4888a29d","patch":"@@ -79,20 +79,32 @@ public class JobWidget extends BaseWidget {\n \n     private static List<JobTO> getAvailable(final SyncopeConsoleSession session) {\n         List<JobTO> available = new ArrayList<>();\n-        JobTO notificationJob = session.getService(NotificationService.class).getJob();\n-        if (notificationJob != null) {\n-            available.add(notificationJob);\n+\n+        if (session.owns(StandardEntitlement.NOTIFICATION_LIST)) {\n+            JobTO notificationJob = session.getService(NotificationService.class).getJob();\n+            if (notificationJob != null) {\n+                available.add(notificationJob);\n+            }\n+        }\n+        if (session.owns(StandardEntitlement.TASK_LIST)) {\n+            available.addAll(session.getService(TaskService.class).listJobs());\n+        }\n+        if (session.owns(StandardEntitlement.REPORT_LIST)) {\n+            available.addAll(session.getService(ReportService.class).listJobs());\n         }\n-        available.addAll(session.getService(TaskService.class).listJobs());\n-        available.addAll(session.getService(ReportService.class).listJobs());\n \n         return available;\n     }\n \n     private static List<ExecTO> getRecent(final SyncopeConsoleSession session) {\n         List<ExecTO> recent = new ArrayList<>();\n-        recent.addAll(session.getService(ReportService.class).listRecentExecutions(10));\n-        recent.addAll(session.getService(TaskService.class).listRecentExecutions(10));\n+\n+        if (session.owns(StandardEntitlement.TASK_LIST)) {\n+            recent.addAll(session.getService(ReportService.class).listRecentExecutions(10));\n+        }\n+        if (session.owns(StandardEntitlement.REPORT_LIST)) {\n+            recent.addAll(session.getService(TaskService.class).listRecentExecutions(10));\n+        }\n \n         return recent;\n     }"},{"sha":"c372941cc4d69915c51409fc2f5f9e50460f5c09","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/ReconciliationWidget.java","status":"modified","additions":22,"deletions":13,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c9ec6d401a24668c76c3e4cd957bd3dc4888a29d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c9ec6d401a24668c76c3e4cd957bd3dc4888a29d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java?ref=c9ec6d401a24668c76c3e4cd957bd3dc4888a29d","patch":"@@ -60,13 +60,15 @@\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.wicket.Application;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ThreadContext;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n@@ -124,11 +126,13 @@ public ReconciliationWidget(final String id, final PageReference pageRef) {\n         this.reconciliationReportKey = SyncopeConsoleApplication.get().getReconciliationReportKey();\n \n         ReportTO reconciliationReport = null;\n-        try {\n-            reconciliationReport = restClient.read(reconciliationReportKey);\n-        } catch (Exception e) {\n-            LOG.error(\"Could not fetch the expected reconciliation report with key {}, aborting\",\n-                    reconciliationReportKey, e);\n+        if (SyncopeConsoleSession.get().owns(StandardEntitlement.REPORT_READ)) {\n+            try {\n+                reconciliationReport = restClient.read(reconciliationReportKey);\n+            } catch (Exception e) {\n+                LOG.error(\"Could not fetch the expected reconciliation report with key {}, aborting\",\n+                        reconciliationReportKey, e);\n+            }\n         }\n \n         Fragment reportResult = reconciliationReport == null || reconciliationReport.getExecutions().isEmpty()\n@@ -137,7 +141,7 @@ public ReconciliationWidget(final String id, final PageReference pageRef) {\n         reportResult.setOutputMarkupId(true);\n         add(reportResult);\n \n-        add(new IndicatorAjaxLink<Void>(\"refresh\") {\n+        IndicatorAjaxLink<Void> refresh = new IndicatorAjaxLink<Void>(\"refresh\") {\n \n             private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -158,7 +162,9 @@ public void onClick(final AjaxRequestTarget target) {\n                 }\n                 SyncopeConsoleSession.get().getNotificationPanel().refresh(target);\n             }\n-        });\n+        };\n+        MetaDataRoleAuthorizationStrategy.authorize(refresh, Component.RENDER, StandardEntitlement.REPORT_EXECUTE);\n+        add(refresh);\n     }\n \n     private Fragment buildExecFragment() {\n@@ -224,13 +230,16 @@ private Pair<List<ProgressBean>, ReconciliationReport> parseReconciliationReport\n         List<ProgressBean> beans = Collections.emptyList();\n         ReconciliationReport report = null;\n \n-        ExecTO exec = IterableUtils.find(restClient.listRecentExecutions(ROWS), new Predicate<ExecTO>() {\n+        ExecTO exec = null;\n+        if (SyncopeConsoleSession.get().owns(StandardEntitlement.REPORT_LIST)) {\n+            exec = IterableUtils.find(restClient.listRecentExecutions(ROWS), new Predicate<ExecTO>() {\n \n-            @Override\n-            public boolean evaluate(final ExecTO exec) {\n-                return reconciliationReportKey.equals(exec.getRefKey());\n-            }\n-        });\n+                @Override\n+                public boolean evaluate(final ExecTO exec) {\n+                    return reconciliationReportKey.equals(exec.getRefKey());\n+                }\n+            });\n+        }\n         if (exec == null) {\n             LOG.error(\"Could not find the last execution of reconciliation report\");\n         } else {"}]}