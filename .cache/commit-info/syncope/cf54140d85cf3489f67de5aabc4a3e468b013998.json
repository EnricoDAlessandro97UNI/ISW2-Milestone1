{"sha":"cf54140d85cf3489f67de5aabc4a3e468b013998","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNmNTQxNDBkODVjZjM0ODlmNjdkZTVhYWJjNGEzZTQ2OGIwMTM5OTg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-06-23T12:20:47Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-06-23T12:20:47Z"},"message":"[SYNCOPE-1455] Cleaning up + more tests + some useful Filters","tree":{"sha":"4e75498d2b4944524b277d4ce3196f128ff87a75","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4e75498d2b4944524b277d4ce3196f128ff87a75"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cf54140d85cf3489f67de5aabc4a3e468b013998","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cf54140d85cf3489f67de5aabc4a3e468b013998","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cf54140d85cf3489f67de5aabc4a3e468b013998","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cf54140d85cf3489f67de5aabc4a3e468b013998/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7311d478a8898e2dc451b0f0c41582db29c142dc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7311d478a8898e2dc451b0f0c41582db29c142dc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7311d478a8898e2dc451b0f0c41582db29c142dc"}],"stats":{"total":2014,"additions":1611,"deletions":403},"files":[{"sha":"df95baaf8a87d16200e85d2f4283df7a4f8ef4c9","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/GatewayRoutePredicatePanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRoutePredicatePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRoutePredicatePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRoutePredicatePanel.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.common.lib.types.PredicateCond;\n+import org.apache.syncope.common.lib.types.GatewayRoutePredicateCond;\n import org.apache.syncope.common.lib.types.PredicateFactory;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n@@ -89,9 +89,9 @@ protected void populateItem(final ListItem<GatewayRoutePredicate> item) {\n                         new AjaxTextFieldPanel(\"args\", \"args\", new PropertyModel<>(predicate, \"args\"));\n                 item.add(args.hideLabel());\n \n-                AjaxDropDownChoicePanel<PredicateCond> cond =\n+                AjaxDropDownChoicePanel<GatewayRoutePredicateCond> cond =\n                         new AjaxDropDownChoicePanel<>(\"cond\", \"cond\", new PropertyModel<>(predicate, \"cond\"));\n-                cond.setChoices(List.of(PredicateCond.values()));\n+                cond.setChoices(List.of(GatewayRoutePredicateCond.values()));\n                 item.add(cond.hideLabel());\n \n                 ActionsPanel<Serializable> actions = new ActionsPanel<>(\"actions\", null);"},{"sha":"e4dce5e851f82d4dfc5646be1e22e1677757bd87","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/GatewayRouteWizardBuilder.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteWizardBuilder.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -20,15 +20,11 @@\n \n import java.io.Serializable;\n import java.net.URI;\n-import java.util.List;\n-\n import org.apache.syncope.client.console.rest.GatewayRouteRestClient;\n import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.GatewayRouteTO;\n-import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardModel;\n import org.apache.wicket.extensions.wizard.WizardStep;\n@@ -100,10 +96,6 @@ public void setObject(final String object) {\n             target.addRequiredLabel().setEnabled(true);\n             target.getField().add(new UrlValidator(new String[] { \"http\", \"https\" }));\n             add(target);\n-\n-            add(new AjaxDropDownChoicePanel<>(\n-                    \"status\", \"status\", new PropertyModel<>(route, \"status\")).\n-                    setChoices(List.of((Serializable[]) GatewayRouteStatus.values())));\n         }\n     }\n "},{"sha":"85e69681e463216d347f798883e66d6f8ab67924","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRouteWizardBuilder$Profile.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteWizardBuilder%24Profile.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteWizardBuilder%24Profile.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteWizardBuilder%24Profile.html?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -21,6 +21,5 @@\n     <div class=\"form-group\"><span wicket:id=\"name\">[name]</span></div>\n     <div class=\"form-group\"><span wicket:id=\"order\">[order]</span></div>\n     <div class=\"form-group\"><span wicket:id=\"target\">[target]</span></div>\n-    <div class=\"form-group\"><span wicket:id=\"status\">[status]</span></div>\n   </wicket:panel>\n </html>"},{"sha":"8249c87b68fc064da391bef52dab0f0c552abcaf","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/GatewayRouteTO.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGatewayRouteTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGatewayRouteTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGatewayRouteTO.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -26,7 +26,6 @@\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n \n public class GatewayRouteTO implements NamedEntityTO {\n \n@@ -44,8 +43,6 @@ public class GatewayRouteTO implements NamedEntityTO {\n \n     private final List<GatewayRoutePredicate> predicates = new ArrayList<>();\n \n-    private GatewayRouteStatus status;\n-\n     @Override\n     public String getKey() {\n         return key;\n@@ -91,14 +88,6 @@ public List<GatewayRoutePredicate> getPredicates() {\n         return predicates;\n     }\n \n-    public GatewayRouteStatus getStatus() {\n-        return status;\n-    }\n-\n-    public void setStatus(final GatewayRouteStatus status) {\n-        this.status = status;\n-    }\n-\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().\n@@ -107,7 +96,6 @@ public int hashCode() {\n                 append(target).\n                 append(filters).\n                 append(predicates).\n-                append(status).\n                 build();\n     }\n \n@@ -129,7 +117,6 @@ public boolean equals(final Object obj) {\n                 append(target, other.target).\n                 append(filters, other.filters).\n                 append(predicates, other.predicates).\n-                append(status, other.status).\n                 build();\n     }\n }"},{"sha":"e7d14032b9422c62c72d2bc68db88b8c0828a5b3","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/FilterFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FFilterFactory.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -42,6 +42,9 @@ public enum FilterFactory {\n     STRIP_PREFIX,\n     REQUEST_HEADER_TO_REQUEST_URI,\n     SET_REQUEST_SIZE,\n+    LINK_REWRITE,\n+    CLIENT_CERTS_TO_REQUEST_HEADER,\n+    QUERY_PARAM_TO_REQUEST_HEADER,\n     CUSTOM\n \n }"},{"sha":"2a19a5ff3da243fff11bb20b9c3891a9aec28955","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GatewayRoutePredicate.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRoutePredicate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRoutePredicate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRoutePredicate.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -35,7 +35,7 @@ public Builder negate() {\n             return this;\n         }\n \n-        public Builder cond(final PredicateCond cond) {\n+        public Builder cond(final GatewayRoutePredicateCond cond) {\n             instance.setCond(cond);\n             return this;\n         }\n@@ -57,7 +57,7 @@ public GatewayRoutePredicate build() {\n \n     private boolean negate;\n \n-    private PredicateCond cond;\n+    private GatewayRoutePredicateCond cond;\n \n     private PredicateFactory factory;\n \n@@ -71,11 +71,11 @@ public void setNegate(final boolean negate) {\n         this.negate = negate;\n     }\n \n-    public PredicateCond getCond() {\n+    public GatewayRoutePredicateCond getCond() {\n         return cond;\n     }\n \n-    public void setCond(final PredicateCond cond) {\n+    public void setCond(final GatewayRoutePredicateCond cond) {\n         this.cond = cond;\n     }\n "},{"sha":"843659d607d59db829633d1c7792f665536bf45a","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GatewayRoutePredicateCond.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRoutePredicateCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRoutePredicateCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRoutePredicateCond.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n-public enum PredicateCond {\n+public enum GatewayRoutePredicateCond {\n     AND,\n     OR\n ","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/PredicateCond.java"},{"sha":"cf04b4e2010a698e5d38f6cad5c0c99a3e7780e3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/GatewayRoute.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGatewayRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGatewayRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGatewayRoute.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -22,7 +22,6 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n \n public interface GatewayRoute extends Entity {\n \n@@ -45,8 +44,4 @@ public interface GatewayRoute extends Entity {\n     List<GatewayRoutePredicate> getPredicates();\n \n     void setPredicates(List<GatewayRoutePredicate> predicates);\n-\n-    GatewayRouteStatus getStatus();\n-\n-    void setStatus(GatewayRouteStatus status);\n }"},{"sha":"ca04393c20e4421be22e2f57eff9f1b0ad206b0c","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -2378,8 +2378,7 @@ $$ }&#10;\n \n   <SecurityQuestion id=\"887028ea-66fc-41e7-b397-620d7ea6dfbb\" content=\"What's your mother's maiden name?\"/>\n \n-  <GatewayRoute id=\"ec7bada2-3dd6-460c-8441-65521d005ffa\" name=\"basic1\" target=\"http://httpbin.org:80\" status=\"PUBLISHED\"\n-                predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n+  <GatewayRoute id=\"ec7bada2-3dd6-460c-8441-65521d005ffa\" name=\"basic1\" target=\"http://httpbin.org:80\" predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n \n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n "},{"sha":"9970ff3f6b0f9bc3bb07d1a3011ef35f7c704735","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAGatewayRoute.java","status":"modified","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -24,14 +24,11 @@\n \n import javax.persistence.Column;\n import javax.persistence.Entity;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n import org.apache.syncope.core.persistence.jpa.validation.entity.GatewayRouteCheck;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -59,10 +56,6 @@ public class JPAGatewayRoute extends AbstractGeneratedKeyEntity implements Gatew\n     @Lob\n     private String filters;\n \n-    @NotNull\n-    @Enumerated(EnumType.STRING)\n-    private GatewayRouteStatus status;\n-\n     @Override\n     public String getName() {\n         return name;\n@@ -116,14 +109,4 @@ public List<GatewayRoutePredicate> getPredicates() {\n     public void setPredicates(final List<GatewayRoutePredicate> predicates) {\n         this.predicates = POJOHelper.serialize(predicates);\n     }\n-\n-    @Override\n-    public GatewayRouteStatus getStatus() {\n-        return status;\n-    }\n-\n-    @Override\n-    public void setStatus(final GatewayRouteStatus status) {\n-        this.status = status;\n-    }\n }"},{"sha":"36b7b09aebfc1f8e33d8cbd1e9794b3feaa74f64","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/GatewayRouteTest.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGatewayRouteTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGatewayRouteTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGatewayRouteTest.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.common.lib.types.FilterFactory;\n import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n import org.apache.syncope.common.lib.types.PredicateFactory;\n import org.apache.syncope.core.persistence.api.dao.GatewayRouteDAO;\n import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n@@ -48,7 +47,6 @@ public class GatewayRouteTest extends AbstractTest {\n     public void find() {\n         GatewayRoute route = routeDAO.find(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n         assertNotNull(route);\n-        assertEquals(GatewayRouteStatus.PUBLISHED, route.getStatus());\n         assertEquals(1, route.getPredicates().size());\n \n         route = routeDAO.find(UUID.randomUUID().toString());\n@@ -71,7 +69,6 @@ public void save() {\n                 factory(PredicateFactory.METHOD).args(HttpMethod.GET).build()));\n         route.setFilters(List.of(new GatewayRouteFilter.Builder().\n                 factory(FilterFactory.ADD_REQUEST_HEADER).args(\"X-Request-Foo, Bar\").build()));\n-        route.setStatus(GatewayRouteStatus.DRAFT);\n \n         int beforeCount = routeDAO.findAll().size();\n "},{"sha":"34a8718ac4fec44dd4f6a48f71661b918046aeaf","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -2465,7 +2465,7 @@ $$ }&#10;\n   \n   <SecurityQuestion id=\"887028ea-66fc-41e7-b397-620d7ea6dfbb\" content=\"What's your mother's maiden name?\"/>\n \n-  <GatewayRoute id=\"ec7bada2-3dd6-460c-8441-65521d005ffa\" name=\"basic1\" target=\"http://httpbin.org:80\" status=\"PUBLISHED\"                predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n+  <GatewayRoute id=\"ec7bada2-3dd6-460c-8441-65521d005ffa\" name=\"basic1\" target=\"http://httpbin.org:80\" predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n \n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n "},{"sha":"a086cfb7f75d3a9ed8873d7d542b1521b1fbe213","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GatewayRouteDataBinderImpl.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGatewayRouteDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGatewayRouteDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGatewayRouteDataBinderImpl.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -22,7 +22,6 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.GatewayRouteTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n import org.apache.syncope.core.provisioning.api.data.GatewayRouteDataBinder;\n import org.springframework.stereotype.Component;\n@@ -48,7 +47,6 @@ public void getGatewayRoute(final GatewayRoute route, final GatewayRouteTO route\n         route.setTarget(routeTO.getTarget());\n         route.setFilters(routeTO.getFilters());\n         route.setPredicates(routeTO.getPredicates());\n-        route.setStatus(routeTO.getStatus() == null ? GatewayRouteStatus.DRAFT : routeTO.getStatus());\n     }\n \n     @Override\n@@ -60,7 +58,6 @@ public GatewayRouteTO getGatewayRouteTO(final GatewayRoute route) {\n         routeTO.setTarget(route.getTarget());\n         routeTO.getFilters().addAll(route.getFilters());\n         routeTO.getPredicates().addAll(route.getPredicates());\n-        routeTO.setStatus(route.getStatus());\n \n         return routeTO;\n     }"},{"sha":"76ac2be57a397deb2c53b57bb0e95e2ca17785ef","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GatewayRouteITCase.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGatewayRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGatewayRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGatewayRouteITCase.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -34,7 +34,6 @@\n import org.apache.syncope.common.lib.types.FilterFactory;\n import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n import org.apache.syncope.common.lib.types.PredicateFactory;\n import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -46,7 +45,6 @@ public class GatewayRouteITCase extends AbstractITCase {\n     public void read() {\n         GatewayRouteTO route = gatewayRouteService.read(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n         assertNotNull(route);\n-        assertEquals(GatewayRouteStatus.PUBLISHED, route.getStatus());\n         assertEquals(1, route.getPredicates().size());\n \n         try {\n@@ -73,7 +71,6 @@ public void createUpdateDelete() {\n                 factory(PredicateFactory.METHOD).args(HttpMethod.GET).build());\n         route.getFilters().add(new GatewayRouteFilter.Builder().\n                 factory(FilterFactory.ADD_REQUEST_HEADER).args(\"X-Request-Foo, Bar\").build());\n-        route.setStatus(GatewayRouteStatus.DRAFT);\n \n         int beforeCount = gatewayRouteService.list().size();\n \n@@ -86,11 +83,6 @@ public void createUpdateDelete() {\n         int afterCount = gatewayRouteService.list().size();\n         assertEquals(afterCount, beforeCount + 1);\n \n-        route.setStatus(GatewayRouteStatus.STAGING);\n-        gatewayRouteService.update(route);\n-        route = gatewayRouteService.read(route.getKey());\n-        assertEquals(GatewayRouteStatus.STAGING, route.getStatus());\n-\n         gatewayRouteService.delete(route.getKey());\n \n         try {"},{"sha":"3104a455b0a8e95da7bc28dd16eb358baf290655","filename":"pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -1993,6 +1993,12 @@ under the License.\n         <version>8.19</version>\n       </dependency>\n \n+      <dependency>\n+        <groupId>org.jsoup</groupId>\n+        <artifactId>jsoup</artifactId>\n+        <version>1.13.1</version>\n+      </dependency>\n+\n       <!-- TEST -->\n       <dependency>\n         <groupId>org.apache.curator</groupId>"},{"sha":"53275d4858cea711fbb1696d72478fac70a72562","filename":"sra/pom.xml","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fpom.xml?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -76,6 +76,11 @@ under the License.\n       <artifactId>micrometer-registry-prometheus</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.jsoup</groupId>\n+      <artifactId>jsoup</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.syncope.common.keymaster</groupId>\n       <artifactId>syncope-common-keymaster-client-api</artifactId>\n@@ -180,6 +185,18 @@ under the License.\n       <testResource>\n         <directory>${basedir}/src/test/resources</directory>\n         <filtering>true</filtering>\n+        <excludes>\n+          <exclude>*.p12</exclude>\n+          <exclude>*.jks</exclude>\n+        </excludes>\n+      </testResource>\n+      <testResource>\n+        <directory>${basedir}/src/test/resources</directory>\n+        <filtering>false</filtering>\n+        <includes>\n+          <include>*.p12</include>\n+          <include>*.jks</include>\n+        </includes>\n       </testResource>\n     </testResources>\n   </build>"},{"sha":"e042b2663fd504179d18097ce7134413c5d3b521","filename":"sra/src/main/java/org/apache/syncope/sra/ApplicationContextUtils.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FApplicationContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FApplicationContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FApplicationContextUtils.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n+import org.springframework.beans.factory.support.RootBeanDefinition;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+public final class ApplicationContextUtils {\n+\n+    public static <T> T getOrCreateBean(\n+            final ConfigurableApplicationContext ctx,\n+            final String actualClazz,\n+            final Class<T> type) throws ClassNotFoundException {\n+\n+        T bean;\n+        if (ctx.getBeanFactory().containsSingleton(actualClazz)) {\n+            bean = type.cast(ctx.getBeanFactory().getSingleton(actualClazz));\n+        } else {\n+            if (ApplicationListener.class.isAssignableFrom(type)) {\n+                RootBeanDefinition bd = new RootBeanDefinition(\n+                        Class.forName(actualClazz), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                bd.setScope(BeanDefinition.SCOPE_SINGLETON);\n+                ((BeanDefinitionRegistry) ctx.getBeanFactory()).registerBeanDefinition(actualClazz, bd);\n+                bean = ctx.getBean(type);\n+            } else {\n+                bean = type.cast(ctx.getBeanFactory().\n+                        createBean(Class.forName(actualClazz), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false));\n+                ctx.getBeanFactory().registerSingleton(actualClazz, bean);\n+            }\n+        }\n+        return bean;\n+    }\n+\n+    private ApplicationContextUtils() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"00c1ac869fbb234ef9fb9d362f2744e96a43065c","filename":"sra/src/main/java/org/apache/syncope/sra/RouteProvider.java","status":"modified","additions":63,"deletions":35,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.sra;\n \n import java.time.ZonedDateTime;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Objects;\n+import java.util.function.Consumer;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.BooleanUtils;\n@@ -33,13 +35,16 @@\n import org.apache.syncope.common.lib.to.GatewayRouteTO;\n import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n+import org.apache.syncope.sra.filters.ClientCertsToRequestHeaderFilterFactory;\n+import org.apache.syncope.sra.filters.CustomGatewayFilterFactory;\n+import org.apache.syncope.sra.filters.LinkRewriteGatewayFilterFactory;\n+import org.apache.syncope.sra.filters.QueryParamToRequestHeaderFilterFactory;\n+import org.apache.syncope.sra.predicates.CustomRoutePredicateFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.cloud.gateway.filter.GatewayFilter;\n import org.springframework.cloud.gateway.filter.OrderedGatewayFilter;\n import org.springframework.cloud.gateway.filter.factory.AddRequestHeaderGatewayFilterFactory;\n@@ -110,7 +115,7 @@ public class RouteProvider {\n     private SyncopeClient client;\n \n     @SuppressWarnings(\"unchecked\")\n-    private GatewayFilter toFilter(final String routeId, final GatewayRouteFilter gwfilter)\n+    private GatewayFilter toFilter(final GatewayRouteTO route, final GatewayRouteFilter gwfilter)\n             throws ClassNotFoundException {\n \n         GatewayFilter filter;\n@@ -140,7 +145,7 @@ private GatewayFilter toFilter(final String routeId, final GatewayRouteFilter gw\n             case HYSTRIX:\n                 String[] hystrixArgs = gwfilter.getArgs().split(\",\");\n                 filter = ctx.getBean(HystrixGatewayFilterFactory.class).\n-                        apply(routeId, c -> {\n+                        apply(route.getKey(), c -> {\n                             if (StringUtils.isNotBlank(hystrixArgs[0])) {\n                                 c.setName(hystrixArgs[0].trim());\n                             }\n@@ -285,17 +290,43 @@ private GatewayFilter toFilter(final String routeId, final GatewayRouteFilter gw\n                         apply(c -> c.setMaxSize(DataSize.ofBytes(Long.valueOf(gwfilter.getArgs().trim()))));\n                 break;\n \n+            case LINK_REWRITE:\n+                filter = ApplicationContextUtils.getOrCreateBean(\n+                        ctx,\n+                        LinkRewriteGatewayFilterFactory.class.getName(),\n+                        LinkRewriteGatewayFilterFactory.class).\n+                        apply(c -> c.setData(route.getTarget().toASCIIString() + \",\" + gwfilter.getArgs().trim()));\n+                break;\n+\n+            case CLIENT_CERTS_TO_REQUEST_HEADER:\n+                String header = StringUtils.isBlank(gwfilter.getArgs()) ? \"X-Client-Certificate\" : gwfilter.getArgs();\n+                filter = ApplicationContextUtils.getOrCreateBean(\n+                        ctx,\n+                        ClientCertsToRequestHeaderFilterFactory.class.getName(),\n+                        ClientCertsToRequestHeaderFilterFactory.class).\n+                        apply(c -> c.setName(header.trim()));\n+                break;\n+\n+            case QUERY_PARAM_TO_REQUEST_HEADER:\n+                filter = ApplicationContextUtils.getOrCreateBean(\n+                        ctx,\n+                        QueryParamToRequestHeaderFilterFactory.class.getName(),\n+                        QueryParamToRequestHeaderFilterFactory.class).\n+                        apply(c -> c.setName(gwfilter.getArgs().trim()));\n+                break;\n+\n             case CUSTOM:\n                 String[] customArgs = gwfilter.getArgs().split(\";\");\n-                CustomGatewayFilterFactory factory;\n-                if (ctx.getBeanFactory().containsSingleton(customArgs[0])) {\n-                    factory = (CustomGatewayFilterFactory) ctx.getBeanFactory().getSingleton(customArgs[0]);\n-                } else {\n-                    factory = (CustomGatewayFilterFactory) ctx.getBeanFactory().\n-                            createBean(Class.forName(customArgs[0]), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                    ctx.getBeanFactory().registerSingleton(customArgs[0], factory);\n-                }\n-                filter = factory.apply(c -> c.setData(customArgs[1]));\n+                Consumer<CustomGatewayFilterFactory.Config> customConsumer = customArgs.length > 1\n+                        ? c -> c.setData(customArgs[1])\n+                        : c -> c.setData(null);\n+                CustomGatewayFilterFactory factory = ApplicationContextUtils.getOrCreateBean(\n+                        ctx,\n+                        customArgs[0],\n+                        CustomGatewayFilterFactory.class);\n+                filter = factory.getOrder().\n+                        map(order -> (GatewayFilter) new OrderedGatewayFilter(factory.apply(customConsumer), order)).\n+                        orElseGet(() -> factory.apply(customConsumer));\n                 break;\n \n             default:\n@@ -339,14 +370,16 @@ private AsyncPredicate<ServerWebExchange> toPredicate(final GatewayRoutePredicat\n                 break;\n \n             case HEADER:\n+                String[] headerArgs = gwpredicate.getArgs().split(\",\");\n                 predicate = ctx.getBean(HeaderRoutePredicateFactory.class).\n-                        applyAsync(c -> c.setHeader(gwpredicate.getArgs().trim()));\n+                        applyAsync(c -> c.setHeader(headerArgs[0].trim()).\n+                        setRegexp(headerArgs[1].trim()));\n                 break;\n \n             case HOST:\n                 String[] hostArgs = gwpredicate.getArgs().split(\",\");\n                 predicate = ctx.getBean(HostRoutePredicateFactory.class).\n-                        applyAsync(c -> c.setPatterns(List.of(hostArgs)));\n+                        applyAsync(c -> c.setPatterns(Arrays.asList(hostArgs)));\n                 break;\n \n             case METHOD:\n@@ -359,47 +392,43 @@ private AsyncPredicate<ServerWebExchange> toPredicate(final GatewayRoutePredicat\n             case PATH:\n                 String[] pathArgs = gwpredicate.getArgs().split(\",\");\n                 predicate = ctx.getBean(PathRoutePredicateFactory.class).\n-                        applyAsync(c -> c.setPatterns(List.of(pathArgs)));\n+                        applyAsync(c -> c.setPatterns(Arrays.asList(pathArgs)));\n                 break;\n \n             case QUERY:\n                 String[] queryArgs = gwpredicate.getArgs().split(\",\");\n+                Consumer<QueryRoutePredicateFactory.Config> queryConsumer =\n+                        queryArgs.length > 1\n+                                ? c -> c.setParam(queryArgs[0].trim()).setRegexp(queryArgs[1].trim())\n+                                : c -> c.setParam(queryArgs[0].trim());\n                 predicate = ctx.getBean(QueryRoutePredicateFactory.class).\n-                        applyAsync(c -> c.setParam(queryArgs[0].trim()).\n-                        setRegexp(queryArgs[1].trim()));\n+                        applyAsync(queryConsumer);\n                 break;\n \n             case REMOTE_ADDR:\n                 String[] remoteAddrArgs = gwpredicate.getArgs().split(\",\");\n                 predicate = ctx.getBean(RemoteAddrRoutePredicateFactory.class).\n-                        applyAsync(c -> c.setSources(List.of(remoteAddrArgs)));\n+                        applyAsync(c -> c.setSources(Arrays.asList(remoteAddrArgs)));\n                 break;\n \n             case CUSTOM:\n                 String[] customArgs = gwpredicate.getArgs().split(\";\");\n-                CustomRoutePredicateFactory factory;\n-                if (ctx.getBeanFactory().containsSingleton(customArgs[0])) {\n-                    factory = (CustomRoutePredicateFactory) ctx.getBeanFactory().getSingleton(customArgs[0]);\n-                } else {\n-                    factory = (CustomRoutePredicateFactory) ctx.getBeanFactory().\n-                            createBean(Class.forName(customArgs[0]), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                    ctx.getBeanFactory().registerSingleton(customArgs[0], factory);\n-                }\n-                predicate = factory.applyAsync(c -> c.setData(customArgs[1]));\n+                predicate = ApplicationContextUtils.getOrCreateBean(\n+                        ctx,\n+                        customArgs[0],\n+                        CustomRoutePredicateFactory.class).\n+                        applyAsync(c -> c.setData(customArgs[1]));\n                 break;\n \n             default:\n                 predicate = null;\n         }\n \n         if (predicate == null) {\n-            throw new IllegalArgumentException(\"Could not translate \" + gwpredicate);\n+            throw new IllegalArgumentException(\"Could not translate predicate \" + gwpredicate);\n         }\n \n-        if (negate) {\n-            predicate.negate();\n-        }\n-        return predicate;\n+        return negate ? predicate.negate() : predicate;\n     }\n \n     private Route.AsyncBuilder toRoute(final GatewayRouteTO gwroute) {\n@@ -438,7 +467,7 @@ private Route.AsyncBuilder toRoute(final GatewayRouteTO gwroute) {\n             builder.filters(gwroute.getFilters().stream().\n                     map(gwfilter -> {\n                         try {\n-                            return toFilter(gwroute.getKey(), gwfilter);\n+                            return toFilter(gwroute, gwfilter);\n                         } catch (Exception e) {\n                             LOG.error(\"Could not translate {}, skipping\", gwfilter, e);\n                             return null;\n@@ -467,7 +496,6 @@ public List<Route.AsyncBuilder> fetch() {\n         }\n \n         return client.getService(GatewayRouteService.class).list().stream().\n-                filter(gwroute -> gwroute.getStatus() == GatewayRouteStatus.PUBLISHED).\n                 map(this::toRoute).\n                 collect(Collectors.toList());\n     }"},{"sha":"b11a7aca1c5484f465c0f8920097635e085d9515","filename":"sra/src/main/java/org/apache/syncope/sra/SecurityConfig.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import java.util.Objects;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.actuate.autoconfigure.security.reactive.EndpointRequest;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\n+import org.springframework.security.config.web.server.ServerHttpSecurity;\n+import org.springframework.security.core.userdetails.MapReactiveUserDetailsService;\n+import org.springframework.security.core.userdetails.User;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.web.server.SecurityWebFilterChain;\n+import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+\n+@EnableWebFluxSecurity\n+@Configuration\n+public class SecurityConfig {\n+\n+    @Autowired\n+    private Environment env;\n+\n+    @Bean\n+    public SecurityWebFilterChain actuatorSecurityFilterChain(final ServerHttpSecurity http) {\n+        ServerWebExchangeMatcher actuatorMatcher = EndpointRequest.toAnyEndpoint();\n+        return http.securityMatcher(actuatorMatcher).\n+                authorizeExchange().anyExchange().authenticated().\n+                and().httpBasic().\n+                and().csrf().requireCsrfProtectionMatcher(new NegatedServerWebExchangeMatcher(actuatorMatcher)).\n+                and().build();\n+    }\n+\n+    @Bean\n+    public MapReactiveUserDetailsService userDetailsService() {\n+        UserDetails user = User.builder().\n+                username(Objects.requireNonNull(env.getProperty(\"anonymousUser\"))).\n+                password(\"{noop}\" + env.getProperty(\"anonymousKey\")).\n+                roles(IdRepoEntitlement.ANONYMOUS).\n+                build();\n+        return new MapReactiveUserDetailsService(user);\n+    }\n+}"},{"sha":"10785b1d644f011d9cb59d201deacffdd9e12167","filename":"sra/src/main/java/org/apache/syncope/sra/SyncopeSRAApplication.java","status":"modified","additions":4,"deletions":45,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -18,37 +18,23 @@\n  */\n package org.apache.syncope.sra;\n \n-import java.util.Objects;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n-import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.actuate.autoconfigure.security.reactive.EndpointRequest;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.cloud.gateway.route.Route;\n import org.springframework.cloud.gateway.route.RouteLocator;\n import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;\n-import org.springframework.context.EnvironmentAware;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.PropertySource;\n-import org.springframework.core.env.Environment;\n-import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\n-import org.springframework.security.config.web.server.ServerHttpSecurity;\n-import org.springframework.security.core.userdetails.MapReactiveUserDetailsService;\n-import org.springframework.security.core.userdetails.User;\n-import org.springframework.security.core.userdetails.UserDetails;\n-import org.springframework.security.web.server.SecurityWebFilterChain;\n-import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher;\n-import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n import reactor.core.publisher.Flux;\n \n @PropertySource(\"classpath:sra.properties\")\n @PropertySource(value = \"file:${conf.directory}/sra.properties\", ignoreResourceNotFound = true)\n-@EnableWebFluxSecurity\n @SpringBootApplication\n-public class SyncopeSRAApplication implements EnvironmentAware {\n+public class SyncopeSRAApplication {\n \n     public static void main(final String[] args) {\n         SpringApplication.run(SyncopeSRAApplication.class, args);\n@@ -57,11 +43,9 @@ public static void main(final String[] args) {\n     @Autowired\n     private RouteProvider provider;\n \n-    private Environment env;\n-\n-    @Override\n-    public void setEnvironment(final Environment env) {\n-        this.env = env;\n+    @Bean\n+    public RouteLocator routes(final RouteLocatorBuilder builder) {\n+        return () -> Flux.fromIterable(provider.fetch()).map(Route.AbstractBuilder::build);\n     }\n \n     @Bean\n@@ -73,29 +57,4 @@ public KeymasterStart keymasterStart() {\n     public KeymasterStop keymasterStop() {\n         return new KeymasterStop(NetworkService.Type.SRA);\n     }\n-\n-    @Bean\n-    public RouteLocator routes(final RouteLocatorBuilder builder) {\n-        return () -> Flux.fromIterable(provider.fetch()).map(Route.AbstractBuilder::build);\n-    }\n-\n-    @Bean\n-    public SecurityWebFilterChain actuatorSecurityFilterChain(final ServerHttpSecurity http) {\n-        ServerWebExchangeMatcher actuatorMatcher = EndpointRequest.toAnyEndpoint();\n-        return http.securityMatcher(actuatorMatcher).\n-                authorizeExchange().anyExchange().authenticated().\n-                and().httpBasic().\n-                and().csrf().requireCsrfProtectionMatcher(new NegatedServerWebExchangeMatcher(actuatorMatcher)).\n-                and().build();\n-    }\n-\n-    @Bean\n-    public MapReactiveUserDetailsService userDetailsService() {\n-        UserDetails user = User.builder().\n-                username(Objects.requireNonNull(env.getProperty(\"anonymousUser\"))).\n-                password(\"{noop}\" + env.getProperty(\"anonymousKey\")).\n-                roles(IdRepoEntitlement.ANONYMOUS).\n-                build();\n-        return new MapReactiveUserDetailsService(user);\n-    }\n }"},{"sha":"c8fa789156af34ff9b0cfa4d30339c7703d14f47","filename":"sra/src/main/java/org/apache/syncope/sra/filters/AddRefererFilterFactory.java","status":"renamed","additions":12,"deletions":6,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FAddRefererFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FAddRefererFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FAddRefererFilterFactory.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -16,12 +16,18 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.types;\n+package org.apache.syncope.sra.filters;\n \n-public enum GatewayRouteStatus {\n-    DRAFT,\n-    STAGING,\n-    PUBLISHED,\n-    DEPRECATED\n+import org.springframework.cloud.gateway.filter.GatewayFilter;\n+import org.springframework.http.HttpHeaders;\n \n+public class AddRefererFilterFactory extends CustomGatewayFilterFactory {\n+\n+    @Override\n+    public GatewayFilter apply(final Config config) {\n+        return (exchange, chain) -> chain.filter(exchange.mutate().request(\n+                exchange.getRequest().mutate().headers(headers -> headers.add(\n+                HttpHeaders.REFERER, exchange.getRequest().getURI().toASCIIString())).build()).\n+                build());\n+    }\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GatewayRouteStatus.java"},{"sha":"259535b76fb4a237bb4ec94d0ce57a8ce797ad9b","filename":"sra/src/main/java/org/apache/syncope/sra/filters/ClientCertsToRequestHeaderFilterFactory.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FClientCertsToRequestHeaderFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FClientCertsToRequestHeaderFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FClientCertsToRequestHeaderFilterFactory.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.filters;\n+\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.cloud.gateway.filter.GatewayFilter;\n+import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory.NameConfig;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+\n+public class ClientCertsToRequestHeaderFilterFactory extends AbstractGatewayFilterFactory<NameConfig> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ClientCertsToRequestHeaderFilterFactory.class);\n+\n+    public ClientCertsToRequestHeaderFilterFactory() {\n+        super(NameConfig.class);\n+    }\n+\n+    @Override\n+    public GatewayFilter apply(final NameConfig config) {\n+        return (exchange, chain) -> {\n+            ServerHttpRequest originalRequest = exchange.getRequest();\n+\n+            ServerHttpRequest mutatedRequest;\n+            if (originalRequest.getSslInfo() != null\n+                    && ArrayUtils.isNotEmpty(originalRequest.getSslInfo().getPeerCertificates())) {\n+\n+                LOG.debug(\"Client certificates found in original request: {}\",\n+                        originalRequest.getSslInfo().getPeerCertificates().length);\n+\n+                List<String> certs = new ArrayList<>();\n+                for (X509Certificate cert : originalRequest.getSslInfo().getPeerCertificates()) {\n+                    try {\n+                        certs.add(Base64.getEncoder().encodeToString(cert.getEncoded()));\n+                    } catch (CertificateEncodingException e) {\n+                        LOG.error(\"Could not encode one of client certificates\", e);\n+                    }\n+                }\n+\n+                mutatedRequest = originalRequest.mutate().\n+                        headers(headers -> headers.addAll(config.getName(), certs)).\n+                        sslInfo(null).\n+                        build();\n+            } else {\n+                mutatedRequest = originalRequest;\n+            }\n+\n+            return chain.filter(exchange.mutate().request(mutatedRequest).build());\n+        };\n+    }\n+}"},{"sha":"d15bc418077d41b5b4fb28c95fcb8393b14e3413","filename":"sra/src/main/java/org/apache/syncope/sra/filters/CustomGatewayFilterFactory.java","status":"renamed","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FCustomGatewayFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FCustomGatewayFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FCustomGatewayFilterFactory.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -16,8 +16,9 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.sra;\n+package org.apache.syncope.sra.filters;\n \n+import java.util.Optional;\n import org.springframework.cloud.gateway.filter.GatewayFilter;\n import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;\n \n@@ -27,7 +28,7 @@\n public abstract class CustomGatewayFilterFactory\n         extends AbstractGatewayFilterFactory<CustomGatewayFilterFactory.Config> {\n \n-    public static class Config {\n+    public static final class Config {\n \n         private String data;\n \n@@ -44,6 +45,10 @@ public CustomGatewayFilterFactory() {\n         super(CustomGatewayFilterFactory.Config.class);\n     }\n \n+    public Optional<Integer> getOrder() {\n+        return Optional.empty();\n+    }\n+\n     @Override\n     public abstract GatewayFilter apply(Config config);\n }","previous_filename":"sra/src/main/java/org/apache/syncope/sra/CustomGatewayFilterFactory.java"},{"sha":"8120b0b784ca8be38980fb89d9b12c98d9408503","filename":"sra/src/main/java/org/apache/syncope/sra/filters/LinkRewriteGatewayFilterFactory.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FLinkRewriteGatewayFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FLinkRewriteGatewayFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FLinkRewriteGatewayFilterFactory.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.filters;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.springframework.http.server.reactive.ServerHttpResponseDecorator;\n+import org.springframework.web.server.ServerWebExchange;\n+\n+public class LinkRewriteGatewayFilterFactory extends ModifyResponseGatewayFilterFactory {\n+\n+    @Override\n+    protected boolean skipCond(final ServerHttpResponseDecorator decorator) {\n+        return decorator.getHeaders().getContentType() == null\n+                || !StringUtils.containsIgnoreCase(decorator.getHeaders().getContentType().toString(), \"html\");\n+    }\n+\n+    private Charset getCharset(final ServerHttpResponseDecorator decorator) {\n+        return decorator.getHeaders().getContentType() != null\n+                && decorator.getHeaders().getContentType().getCharset() != null\n+                ? decorator.getHeaders().getContentType().getCharset()\n+                : StandardCharsets.UTF_8;\n+    }\n+\n+    private void replace(final Document doc, final String element, final String attr, final String prefix) {\n+        doc.select(element).forEach(link -> {\n+            String attrValue = link.attributes().get(attr);\n+            if (attrValue.startsWith(\"/\") && !attrValue.startsWith(\"//\")) {\n+                link.attr(attr, attrValue.replace(attrValue, prefix + attrValue));\n+            }\n+        });\n+    }\n+\n+    @Override\n+    protected byte[] modifyResponse(\n+            final InputStream responseBody,\n+            final Config config,\n+            final ServerHttpResponseDecorator decorator,\n+            final ServerWebExchange exchange)\n+            throws IOException {\n+\n+        String[] keyValue = config.getData().split(\",\");\n+\n+        String oldBase = StringUtils.appendIfMissing(keyValue[0], \"/\");\n+        String newBase = StringUtils.appendIfMissing(keyValue[1], \"/\");\n+        String newBaseAsPrefix = StringUtils.removeEnd(keyValue[1], \"/\");\n+\n+        boolean rewriterRootAttrs = true;\n+        if (keyValue.length == 3) {\n+            rewriterRootAttrs = BooleanUtils.toBoolean(keyValue[2]);\n+        }\n+\n+        Document doc = Jsoup.parse(\n+                responseBody, getCharset(decorator).name(), exchange.getRequest().getURI().toASCIIString());\n+\n+        if (rewriterRootAttrs) {\n+            replace(doc, \"a\", \"href\", newBaseAsPrefix);\n+            replace(doc, \"link\", \"href\", newBaseAsPrefix);\n+            replace(doc, \"img\", \"src\", newBaseAsPrefix);\n+            replace(doc, \"script\", \"src\", newBaseAsPrefix);\n+            replace(doc, \"object\", \"data\", newBaseAsPrefix);\n+        }\n+\n+        return doc.toString().replace(oldBase, newBase).getBytes();\n+    }\n+}"},{"sha":"36f3d00f8dcc6a02832d3120ec74aed7ece64d31","filename":"sra/src/main/java/org/apache/syncope/sra/filters/ModifyResponseGatewayFilterFactory.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FModifyResponseGatewayFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FModifyResponseGatewayFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FModifyResponseGatewayFilterFactory.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.filters;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.cloud.gateway.filter.GatewayFilter;\n+import org.springframework.cloud.gateway.filter.GatewayFilterChain;\n+import org.springframework.cloud.gateway.filter.NettyWriteResponseFilter;\n+import org.springframework.cloud.gateway.support.ServerWebExchangeUtils;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.io.buffer.DataBuffer;\n+import org.springframework.core.io.buffer.DataBufferUtils;\n+import org.springframework.core.io.buffer.PooledDataBuffer;\n+import org.springframework.http.server.reactive.ServerHttpResponse;\n+import org.springframework.http.server.reactive.ServerHttpResponseDecorator;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Inspired by {@link org.springframework.cloud.gateway.filter.factory.rewrite.ModifyResponseBodyGatewayFilterFactory}.\n+ */\n+public abstract class ModifyResponseGatewayFilterFactory extends CustomGatewayFilterFactory {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(ModifyResponseGatewayFilterFactory.class);\n+\n+    @Override\n+    public GatewayFilter apply(final Config config) {\n+        return new InternalModifyResponseGatewayFilter(config);\n+    }\n+\n+    protected abstract byte[] modifyResponse(\n+            InputStream responseBody,\n+            Config config,\n+            ServerHttpResponseDecorator decorator,\n+            ServerWebExchange exchange)\n+            throws IOException;\n+\n+    protected boolean skipCond(final ServerHttpResponseDecorator decorator) {\n+        LOG.debug(\"Decorator: {}\", decorator);\n+        return false;\n+    }\n+\n+    protected class InternalModifyResponseGatewayFilter implements GatewayFilter, Ordered {\n+\n+        private final Config config;\n+\n+        public InternalModifyResponseGatewayFilter(final Config config) {\n+            this.config = config;\n+        }\n+\n+        @Override\n+        public Mono<Void> filter(final ServerWebExchange exchange, final GatewayFilterChain chain) {\n+            return chain.filter(exchange.mutate().response(decorate(exchange)).build());\n+        }\n+\n+        @SuppressWarnings(\"squid:S3776\")\n+        private ServerHttpResponse decorate(final ServerWebExchange exchange) {\n+            return new ServerHttpResponseDecorator(exchange.getResponse()) {\n+\n+                @SuppressWarnings(\"squid:S3358\")\n+                @Override\n+                public Mono<Void> writeWith(final Publisher<? extends DataBuffer> body) {\n+                    return skipCond(this)\n+                            ? super.writeWith(body)\n+                            : super.writeWith(Flux.from(body).\n+                                    collectList().\n+                                    filter(list -> !list.isEmpty()).\n+                                    map(list -> list.get(0).factory().join(list)).\n+                                    doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release).\n+                                    map(dataBuffer -> {\n+                                        if (dataBuffer.readableByteCount() > 0) {\n+                                            LOG.trace(\"Retaining body in exchange attribute\");\n+                                            exchange.getAttributes().put(\n+                                                    ServerWebExchangeUtils.CACHED_REQUEST_BODY_ATTR, dataBuffer);\n+                                        }\n+\n+                                        boolean inputCompressed = false;\n+                                        if (dataBuffer.readableByteCount() >= 2) {\n+                                            byte[] first2 = new byte[2];\n+                                            dataBuffer.read(first2, 0, 2);\n+                                            dataBuffer.readPosition(0);\n+\n+                                            inputCompressed = ((first2[0] == (byte) (GZIPInputStream.GZIP_MAGIC))\n+                                                    && (first2[1] == (byte) (GZIPInputStream.GZIP_MAGIC >> 8)));\n+                                        }\n+\n+                                        boolean outputCompressed = false;\n+                                        byte[] output;\n+                                        try (InputStream is = inputCompressed\n+                                                ? new GZIPInputStream(dataBuffer.asInputStream())\n+                                                : dataBuffer.asInputStream()) {\n+\n+                                            outputCompressed = is instanceof GZIPInputStream;\n+\n+                                            output = modifyResponse(is, config, this, exchange);\n+                                        } catch (IOException e) {\n+                                            LOG.error(\"While modifying response\", e);\n+\n+                                            output = new byte[dataBuffer.readableByteCount()];\n+                                            dataBuffer.read(output);\n+                                        }\n+\n+                                        if (outputCompressed) {\n+                                            try (ByteArrayOutputStream baos = new ByteArrayOutputStream(output.length);\n+                                                    GZIPOutputStream gzipos = new GZIPOutputStream(baos)) {\n+\n+                                                gzipos.write(output);\n+                                                gzipos.finish();\n+                                                output = baos.toByteArray();\n+                                            } catch (IOException e) {\n+                                                LOG.error(\"While GZIP-encoding output\", e);\n+                                            }\n+                                        }\n+\n+                                        return exchange.getResponse().bufferFactory().wrap(output);\n+                                    }));\n+                }\n+\n+                @Override\n+                public Mono<Void> writeAndFlushWith(final Publisher<? extends Publisher<? extends DataBuffer>> body) {\n+                    return writeWith(Flux.from(body).flatMapSequential(p -> p));\n+                }\n+            };\n+        }\n+\n+        @Override\n+        public int getOrder() {\n+            return NettyWriteResponseFilter.WRITE_RESPONSE_FILTER_ORDER - 1;\n+        }\n+    }\n+}"},{"sha":"85975f3197b2c22250396ede6b24b1107f3d1e7a","filename":"sra/src/main/java/org/apache/syncope/sra/filters/QueryParamToRequestHeaderFilterFactory.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FQueryParamToRequestHeaderFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FQueryParamToRequestHeaderFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FQueryParamToRequestHeaderFilterFactory.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.filters;\n+\n+import java.net.URI;\n+import org.springframework.cloud.gateway.filter.GatewayFilter;\n+import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory.NameConfig;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.web.util.UriComponentsBuilder;\n+\n+public class QueryParamToRequestHeaderFilterFactory extends AbstractGatewayFilterFactory<NameConfig> {\n+\n+    public QueryParamToRequestHeaderFilterFactory() {\n+        super(NameConfig.class);\n+    }\n+\n+    @Override\n+    public GatewayFilter apply(final NameConfig config) {\n+        return (exchange, chain) -> {\n+            ServerHttpRequest originalRequest = exchange.getRequest();\n+\n+            ServerHttpRequest mutatedRequest;\n+            if (originalRequest.getQueryParams().isEmpty()) {\n+                mutatedRequest = originalRequest;\n+            } else {\n+                URI newUri = UriComponentsBuilder.fromUri(originalRequest.getURI()).\n+                        replaceQueryParam(config.getName()).build().toUri();\n+\n+                mutatedRequest = exchange.getRequest().mutate().\n+                        uri(newUri).\n+                        headers(headers -> headers.addAll(\n+                        config.getName(), originalRequest.getQueryParams().get(config.getName()))).\n+                        build();\n+            }\n+\n+            return chain.filter(exchange.mutate().request(mutatedRequest).build());\n+        };\n+    }\n+}"},{"sha":"992eab891b76206d318e7b3fd157dd3683be3843","filename":"sra/src/main/java/org/apache/syncope/sra/predicates/CustomRoutePredicateFactory.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fpredicates%2FCustomRoutePredicateFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fpredicates%2FCustomRoutePredicateFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fpredicates%2FCustomRoutePredicateFactory.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.sra;\n+package org.apache.syncope.sra.predicates;\n \n import java.util.function.Predicate;\n import org.springframework.cloud.gateway.handler.AsyncPredicate;","previous_filename":"sra/src/main/java/org/apache/syncope/sra/CustomRoutePredicateFactory.java"},{"sha":"c6a3ee2f8feff2cf556a32932c9055ba1cfe7101","filename":"sra/src/test/java/org/apache/syncope/sra/AbstractTest.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FAbstractTest.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.util.Base64;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.cloud.contract.wiremock.AutoConfigureWireMock;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ContextConfiguration(initializers = ZookeeperTestingServer.class)\n+@AutoConfigureWireMock(port = 0)\n+public abstract class AbstractTest {\n+\n+    protected static final ObjectMapper MAPPER = new ObjectMapper().registerModule(new JavaTimeModule());\n+\n+    public static boolean available(int port) {\n+        try (Socket ignored = new Socket(\"localhost\", port)) {\n+            return false;\n+        } catch (IOException ignored) {\n+            return true;\n+        }\n+    }\n+\n+    @Autowired\n+    protected RouteRefresher routeRefresher;\n+\n+    @Value(\"${local.server.port}\")\n+    protected int gatewayPort;\n+\n+    @Value(\"${wiremock.server.port}\")\n+    protected int wiremockPort;\n+\n+    @Value(\"${anonymousUser}\")\n+    private String anonymousUser;\n+\n+    @Value(\"${anonymousKey}\")\n+    private String anonymousKey;\n+\n+    protected String basicAuthHeader() {\n+        return \"Basic \" + Base64.getEncoder().encodeToString((anonymousUser + \":\" + anonymousKey).getBytes());\n+    }\n+}"},{"sha":"72a8432f7277e7bffc9f7af711d9f9dc6d4a1c8d","filename":"sra/src/test/java/org/apache/syncope/sra/ActuatorTest.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FActuatorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FActuatorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FActuatorTest.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import javax.net.ssl.SSLException;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.actuate.endpoint.http.ActuatorMediaType;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+\n+public class ActuatorTest extends AbstractTest {\n+\n+    @Autowired\n+    private WebTestClient webClient;\n+\n+    @Test\n+    public void health() throws SSLException {\n+        webClient.get().uri(\"/actuator/health\").\n+                exchange().expectStatus().isUnauthorized();\n+\n+        webClient.get().uri(\"/actuator/health\").\n+                header(HttpHeaders.AUTHORIZATION, basicAuthHeader()).\n+                exchange().\n+                expectStatus().isOk().\n+                expectHeader().valueEquals(HttpHeaders.CONTENT_TYPE, ActuatorMediaType.V3_JSON);\n+    }\n+\n+    @Test\n+    public void routes() throws SSLException {\n+        webClient.get().uri(\"/actuator/gateway/routes\").\n+                exchange().expectStatus().isUnauthorized();\n+\n+        webClient.get().uri(\"/actuator/gateway/routes\").\n+                header(HttpHeaders.AUTHORIZATION, basicAuthHeader()).\n+                exchange().expectStatus().isOk();\n+    }\n+\n+    @Test\n+    public void requests() throws SSLException {\n+        webClient.get().uri(\"/actuator/metrics/gateway.requests\").\n+                exchange().expectStatus().isUnauthorized();\n+\n+        webClient.get().uri(\"/actuator/metrics/gateway.requests\").\n+                header(HttpHeaders.AUTHORIZATION, basicAuthHeader()).\n+                exchange().expectStatus().isNotFound();\n+    }\n+}"},{"sha":"4c778ee4dae24b999d73da9914da2a2655811bb2","filename":"sra/src/test/java/org/apache/syncope/sra/RouteProviderTest.java","status":"added","additions":647,"deletions":0,"changes":647,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProviderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProviderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProviderTest.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -0,0 +1,647 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.time.ZonedDateTime;\n+import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.lib.types.FilterFactory;\n+import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n+import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n+import org.apache.syncope.common.lib.types.GatewayRoutePredicateCond;\n+import org.apache.syncope.common.lib.types.PredicateFactory;\n+import org.apache.syncope.sra.filters.BodyPropertyAddingGatewayFilterFactory;\n+import org.apache.syncope.sra.predicates.BodyPropertyMatchingRoutePredicateFactory;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+import org.springframework.web.reactive.function.BodyInserters;\n+\n+public class RouteProviderTest extends AbstractTest {\n+\n+    @Autowired\n+    private WebTestClient webClient;\n+\n+    @BeforeEach\n+    public void clearRoutes() {\n+        SyncopeCoreTestingServer.ROUTES.clear();\n+    }\n+\n+    @Test\n+    public void root() {\n+        webClient.get().exchange().expectStatus().isNotFound();\n+    }\n+\n+    @Test\n+    public void addResponseHeader() {\n+        // 1. no mapping for URL\n+        webClient.get().uri(\"/addResponseHeader\").exchange().expectStatus().isNotFound();\n+\n+        // 2. stub for proxied URL\n+        stubFor(get(urlEqualTo(\"/addResponseHeader\")).willReturn(aResponse()));\n+\n+        // 3. create route configuration\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"addResponseHeader\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.METHOD).args(\"GET\").build());\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.PATH).args(\"/addResponseHeader\").cond(GatewayRoutePredicateCond.AND).build());\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.ADD_RESPONSE_HEADER).args(\"Hello,World\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        // 4. now mapping works for URL\n+        webClient.get().uri(\"/addResponseHeader\").exchange().\n+                expectStatus().isOk().\n+                expectHeader().valueEquals(\"Hello\", \"World\");\n+\n+        // 5. update route configuration\n+        route.getFilters().clear();\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.ADD_RESPONSE_HEADER).args(\"Hello,WorldZ\").build());\n+\n+        routeRefresher.refresh();\n+\n+        // 6. mapping for URL is updated too\n+        webClient.get().uri(\"/addResponseHeader\").exchange().\n+                expectStatus().isOk().\n+                expectHeader().valueEquals(\"Hello\", \"WorldZ\");\n+\n+        // 7. update route configuration again\n+        route.getFilters().clear();\n+\n+        routeRefresher.refresh();\n+\n+        // 8. mapping for URL is updated again\n+        webClient.get().uri(\"/addResponseHeader\").exchange().\n+                expectStatus().isOk().\n+                expectHeader().doesNotExist(\"Hello\");\n+    }\n+\n+    @Test\n+    public void addRequestHeader() {\n+        webClient.get().uri(\"/requestHeader\").exchange().expectStatus().isNotFound();\n+\n+        stubFor(get(urlEqualTo(\"/requestHeader\")).withHeader(\"Hello\", equalTo(\"World\")).willReturn(aResponse()));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"requestHeader\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.REMOTE_ADDR).args(\"localhost\").build());\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.ADD_REQUEST_HEADER).args(\"Hello,World\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/requestHeader\").exchange().expectStatus().isOk();\n+\n+        route.getFilters().clear();\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.ADD_REQUEST_HEADER).args(\"Hello,Mondo\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/requestHeader\").exchange().expectStatus().isNotFound();\n+\n+        route.getFilters().clear();\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.REMOVE_REQUEST_HEADER).args(\"Hello\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/requestHeader\").header(\"Hello\", \"World\").exchange().expectStatus().isNotFound();\n+\n+        route.getFilters().clear();\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.SET_REQUEST_HEADER).args(\"Hello, World\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/requestHeader\").header(\"Hello\", \"Mondo\").exchange().expectStatus().isOk();\n+    }\n+\n+    @Test\n+    public void hystrix() {\n+        webClient.get().uri(\"/fallback\").exchange().\n+                expectStatus().isOk().\n+                expectBody().\n+                consumeWith(response -> assertThat(response.getResponseBody()).isEqualTo(\"fallback\".getBytes()));\n+\n+        stubFor(get(urlEqualTo(\"/delay/3\")).\n+                willReturn(aResponse().\n+                        withBody(\"no fallback\").\n+                        withFixedDelay(3000)));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"hystrix\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.HOST).args(\"*.hystrix.com\").build());\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.HYSTRIX).args(\"fallbackcmd,forward:/fallback\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/delay/3\").\n+                header(HttpHeaders.HOST, \"www.hystrix.com\").\n+                exchange().\n+                expectStatus().isOk().\n+                expectBody().\n+                consumeWith(response -> assertThat(response.getResponseBody()).isEqualTo(\"fallback\".getBytes()));\n+    }\n+\n+    @Test\n+    public void requestHeaderToRequestUri() {\n+        webClient.get().uri(\"/requestHeaderToRequestUri\").exchange().expectStatus().isNotFound();\n+\n+        stubFor(get(urlEqualTo(\"/requestHeaderToRequestUri\")).willReturn(aResponse()));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"requestHeaderToRequestUri\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.REQUEST_HEADER_TO_REQUEST_URI).args(\"NewUri\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/requestHeaderToRequestUri\").\n+                header(\"NewUri\", \"http://localhost:\" + wiremockPort + \"/requestHeaderToRequestUri\").\n+                exchange().expectStatus().isOk();\n+    }\n+\n+    @Test\n+    public void responseHeader() {\n+        webClient.get().uri(\"/responseHeader\").exchange().expectStatus().isNotFound();\n+\n+        stubFor(get(urlEqualTo(\"/responseHeader\")).willReturn(aResponse().withHeader(\"Hello\", \"World\")));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"responseHeader\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.REMOVE_RESPONSE_HEADER).args(\"Hello\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/responseHeader\").exchange().\n+                expectStatus().isOk().\n+                expectHeader().doesNotExist(\"Hello\");\n+\n+        route.getFilters().clear();\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/responseHeader\").exchange().\n+                expectStatus().isOk().\n+                expectHeader().valueEquals(\"Hello\", \"World\");\n+\n+        route.getFilters().clear();\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.REWRITE_RESPONSE_HEADER).args(\"Hello,World,Mondo\").build());\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/responseHeader\").exchange().\n+                expectStatus().isOk().\n+                expectHeader().valueEquals(\"Hello\", \"Mondo\");\n+\n+        route.getFilters().clear();\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.SET_RESPONSE_HEADER).args(\"Hello,Mondo\").build());\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/responseHeader\").exchange().\n+                expectStatus().isOk().\n+                expectHeader().valueEquals(\"Hello\", \"Mondo\");\n+    }\n+\n+    @Test\n+    public void addRequestParameter() {\n+        webClient.get().uri(\"/addRequestParameter?Hello=World\").exchange().expectStatus().isNotFound();\n+\n+        stubFor(get(urlEqualTo(\"/addRequestParameter?Hello=World\")).withQueryParam(\"Hello\", equalTo(\"World\")).\n+                willReturn(aResponse()));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"addRequestParameter\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.ADD_REQUEST_PARAMETER).args(\"Hello,World\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/addRequestParameter\").exchange().expectStatus().isOk();\n+\n+        route.getFilters().clear();\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.ADD_REQUEST_PARAMETER).args(\"Hello,Mondo\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/addRequestParameter\").exchange().expectStatus().isNotFound();\n+    }\n+\n+    @Test\n+    public void rewritePath() {\n+        webClient.get().uri(\"/rewrite\").exchange().expectStatus().isNotFound();\n+\n+        stubFor(get(urlEqualTo(\"/rewrite\")).willReturn(aResponse()));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"rewrite\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.REWRITE_PATH).args(\"/remove/(?<segment>.*), /${segment}\").build());\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.SECURE_HEADERS).build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/remove/rewrite\").exchange().\n+                expectStatus().isOk().\n+                expectHeader().valueEquals(\"X-XSS-Protection\", \"1 ; mode=block\");\n+\n+        route.getFilters().clear();\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/remove/rewrite\").exchange().\n+                expectStatus().isNotFound();\n+\n+        route.getFilters().clear();\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/rewrite\").exchange().\n+                expectStatus().isOk().\n+                expectHeader().doesNotExist(\"X-XSS-Protection\");\n+\n+        route.getFilters().clear();\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.PATH).args(\"/remove/{segment}\").build());\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.SET_PATH).args(\"/{segment}\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/remove/rewrite\").exchange().\n+                expectStatus().isOk();\n+\n+        route.getFilters().clear();\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.STRIP_PREFIX).args(\"1\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/remove/rewrite\").exchange().expectStatus().isOk();\n+    }\n+\n+    @Test\n+    public void redirect() {\n+        webClient.get().uri(\"/redirect\").exchange().expectStatus().isNotFound();\n+\n+        stubFor(get(urlEqualTo(\"/redirect\")).willReturn(aResponse()));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"redirect\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.REDIRECT).args(\"307,http://127.0.0.1:\" + wiremockPort).build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/redirect\").exchange().expectStatus().isTemporaryRedirect();\n+\n+        route.getFilters().clear();\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/redirect\").exchange().expectStatus().isOk();\n+\n+        route.getFilters().clear();\n+        route.getFilters().add(new GatewayRouteFilter.Builder().factory(FilterFactory.SET_STATUS).args(\"404\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/redirect\").exchange().expectStatus().isNotFound();\n+    }\n+\n+    @Test\n+    public void datetime() {\n+        webClient.get().uri(\"/prefix/datetime\").exchange().expectStatus().isNotFound();\n+\n+        stubFor(get(urlEqualTo(\"/prefix/datetime\")).willReturn(aResponse()));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"datetime\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.AFTER).args(ZonedDateTime.now().minusYears(1).toString()).build());\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.BEFORE).args(ZonedDateTime.now().plusYears(1).toString()).\n+                cond(GatewayRoutePredicateCond.AND).build());\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.BETWEEN).args(ZonedDateTime.now().minusYears(1).toString() + \",\"\n+                + ZonedDateTime.now().plusYears(1).toString()).\n+                cond(GatewayRoutePredicateCond.AND).build());\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.PREFIX_PATH).args(\"/prefix\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/datetime\").exchange().\n+                expectStatus().isOk();\n+\n+        route.getPredicates().clear();\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.AFTER).args(ZonedDateTime.now().plusYears(1).toString()).build());\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.BEFORE).args(ZonedDateTime.now().minusYears(1).toString()).\n+                cond(GatewayRoutePredicateCond.OR).build());\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.BETWEEN).args(ZonedDateTime.now().plusYears(1).toString() + \",\"\n+                + ZonedDateTime.now().minusYears(1).toString()).cond(GatewayRoutePredicateCond.OR).build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/datetime\").exchange().expectStatus().isNotFound();\n+\n+        route.getPredicates().clear();\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.BEFORE).negate().args(ZonedDateTime.now().minusYears(1).toString()).build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/datetime\").exchange().expectStatus().isOk();\n+    }\n+\n+    @Test\n+    public void header() {\n+        webClient.get().uri(\"/header\").exchange().expectStatus().isNotFound();\n+\n+        stubFor(get(urlEqualTo(\"/header\")).willReturn(aResponse()));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"header\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.COOKIE).args(\"Hello,World\").build());\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.HOST).args(\"host\").cond(GatewayRoutePredicateCond.AND).build());\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.HEADER).args(\"Hello,World\").cond(GatewayRoutePredicateCond.AND).build());\n+        route.getFilters().add(new GatewayRouteFilter.Builder().factory(FilterFactory.PRESERVE_HOST_HEADER).build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/header\").cookie(\"Hello\", \"World\").header(\"Host\", \"host\").header(\"Hello\", \"World\").\n+                exchange().expectStatus().isOk();\n+\n+        webClient.get().uri(\"/header\").cookie(\"Hello\", \"Mondo\").header(\"Host\", \"host\").header(\"Hello\", \"World\").\n+                exchange().expectStatus().isNotFound();\n+\n+        webClient.get().uri(\"/header\").cookie(\"Hello\", \"World\").header(\"Host\", \"anotherHost\").header(\"Hello\", \"World\").\n+                exchange().expectStatus().isNotFound();\n+\n+        webClient.get().uri(\"/header\").cookie(\"Hello\", \"World\").header(\"Host\", \"host\").header(\"Hello\", \"Mondo\").\n+                exchange().expectStatus().isNotFound();\n+    }\n+\n+    @Test\n+    public void query() {\n+        stubFor(get(urlEqualTo(\"/query?name=value\")).willReturn(aResponse()));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"query\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.QUERY).args(\"name,value\").build());\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.SAVE_SESSION).build());\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.SET_REQUEST_SIZE).args(\"5000\").build());\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.RETRY).args(\"3\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/query?name=value\").exchange().expectStatus().isOk();\n+\n+        route.getPredicates().clear();\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.QUERY).args(\"name,anotherValue\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/query?name=value\").exchange().expectStatus().isNotFound();\n+    }\n+\n+    @Test\n+    public void path() {\n+        stubFor(get(urlEqualTo(\"/pathMatcher/1\")).willReturn(aResponse()));\n+        stubFor(get(urlEqualTo(\"/pathMatcher/2\")).willReturn(aResponse()));\n+        stubFor(get(urlEqualTo(\"/pathMatcher/2/3\")).willReturn(aResponse()));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"pathMatcher\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.PATH).args(\"/pathMatcher/**\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/pathMatcher/1\").exchange().expectStatus().isOk();\n+        webClient.get().uri(\"/pathMatcher/2\").exchange().expectStatus().isOk();\n+        webClient.get().uri(\"/pathMatcher/2/3\").exchange().expectStatus().isOk();\n+        webClient.get().uri(\"/pathMatcher/4\").exchange().expectStatus().isNotFound();\n+    }\n+\n+    @Test\n+    public void linkRewrite() {\n+        stubFor(get(urlEqualTo(\"/linkRewrite\")).willReturn(aResponse().\n+                withHeader(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_VALUE).\n+                withBody(\"<html><head></head><body><a href=\\\"/absolute\\\">absolute link</a></body></html>\")));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"linkRewrite\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getFilters().add(new GatewayRouteFilter.Builder().factory(FilterFactory.LINK_REWRITE).\n+                args(\"http://localhost:\" + gatewayPort).build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/linkRewrite\").exchange().\n+                expectStatus().isOk().\n+                expectBody().consumeWith(exchange -> {\n+                    assertTrue(new String(exchange.getResponseBody()).\n+                            contains(\"<a href=\\\"http://localhost:\" + gatewayPort + \"/absolute\\\">\"));\n+                });\n+\n+        route.getFilters().clear();\n+        route.getFilters().add(new GatewayRouteFilter.Builder().factory(FilterFactory.LINK_REWRITE).\n+                args(\"http://localhost:\" + gatewayPort + \",true\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/linkRewrite\").exchange().\n+                expectStatus().isOk().\n+                expectBody().consumeWith(exchange -> {\n+                    assertTrue(new String(exchange.getResponseBody()).\n+                            contains(\"<a href=\\\"http://localhost:\" + gatewayPort + \"/absolute\\\">\"));\n+                });\n+    }\n+\n+    @Test\n+    public void clientCertToRequestHeader() {\n+        stubFor(get(urlEqualTo(\"/clientCert\")).willReturn(aResponse().\n+                withHeader(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_VALUE)));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"clientCert\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.CLIENT_CERTS_TO_REQUEST_HEADER).build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/clientCert\").exchange().\n+                expectStatus().isOk().\n+                expectHeader().doesNotExist(\"X-Client-Certificate\");\n+    }\n+\n+    @Test\n+    public void queryParamToRequestHeader() {\n+        stubFor(get(urlEqualTo(\"/queryParamToRequestHeader\")).\n+                withHeader(\"Hello\", equalTo(\"World\")).willReturn(aResponse()));\n+\n+        stubFor(get(urlEqualTo(\"/queryParamToRequestHeader?Header=Test&Header=Test1\")).\n+                withHeader(\"Hello\", equalTo(\"World\")).willReturn(aResponse()));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"queryParamToRequestHeader\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.QUERY_PARAM_TO_REQUEST_HEADER).args(\"Hello\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/queryParamToRequestHeader\").exchange().\n+                expectStatus().isNotFound();\n+\n+        webClient.get().uri(\"/queryParamToRequestHeader?Hello=World\").exchange().\n+                expectStatus().isOk();\n+\n+        webClient.get().uri(\"/queryParamToRequestHeader?Header=Test&Hello=World&Header=Test1\").exchange().\n+                expectStatus().isOk();\n+    }\n+\n+    @Test\n+    public void custom() {\n+        stubFor(post(urlEqualTo(\"/custom\")).\n+                willReturn(aResponse().\n+                        withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE).\n+                        withBody(\"{\\\"data\\\": \\\"data\\\"}\")));\n+\n+        GatewayRouteTO routeTO = new GatewayRouteTO();\n+        routeTO.setKey(\"custom\");\n+        routeTO.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        routeTO.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.CUSTOM).\n+                args(BodyPropertyMatchingRoutePredicateFactory.class.getName() + \";cool\").build());\n+        routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.ADD_RESPONSE_HEADER).args(\"Custom,matched\").build());\n+        routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.CUSTOM).\n+                args(BodyPropertyAddingGatewayFilterFactory.class.getName() + \";customized=true\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(routeTO.getKey(), routeTO);\n+        routeRefresher.refresh();\n+\n+        webClient.post().uri(\"/custom\").\n+                body(BodyInserters.fromValue(MAPPER.createObjectNode().put(\"other\", true))).\n+                exchange().\n+                expectStatus().isNotFound();\n+\n+        webClient.post().uri(\"/custom\").\n+                body(BodyInserters.fromValue(MAPPER.createObjectNode().put(\"cool\", true))).\n+                exchange().\n+                expectStatus().isOk().\n+                expectHeader().valueEquals(\"Custom\", \"matched\").\n+                expectBody().\n+                consumeWith(response -> {\n+                    try {\n+                        JsonNode body = MAPPER.readTree(response.getResponseBody());\n+                        assertTrue(body.has(\"customized\"));\n+                        assertTrue(body.get(\"customized\").asBoolean());\n+                    } catch (IOException e) {\n+                        fail(e.getMessage(), e);\n+                    }\n+                });\n+    }\n+}"},{"sha":"a90217b1f9d1f77a4dc752d940268e9cd7fabd3f","filename":"sra/src/test/java/org/apache/syncope/sra/SyncopeCoreTestingServer.java","status":"modified","additions":17,"deletions":15,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeCoreTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeCoreTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeCoreTestingServer.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -53,21 +53,23 @@ public class SyncopeCoreTestingServer implements ApplicationListener<ContextRefr\n \n     @Override\n     public void onApplicationEvent(final ContextRefreshedEvent event) {\n-        // 1. start (mocked) Core as embedded CXF\n-        JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean();\n-        sf.setAddress(ADDRESS);\n-        sf.setResourceClasses(GatewayRouteService.class);\n-        sf.setResourceProvider(\n-                GatewayRouteService.class,\n-                new SingletonResourceProvider(new StubGatewayRouteService(), true));\n-        sf.setProviders(List.of(new JacksonJsonProvider()));\n-        sf.create();\n-\n-        // 2. register Core in Keymaster\n-        NetworkService core = new NetworkService();\n-        core.setType(NetworkService.Type.CORE);\n-        core.setAddress(ADDRESS);\n-        serviceOps.register(core);\n+        if (AbstractTest.available(9080)) {\n+            // 1. start (mocked) Core as embedded CXF\n+            JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean();\n+            sf.setAddress(ADDRESS);\n+            sf.setResourceClasses(GatewayRouteService.class);\n+            sf.setResourceProvider(\n+                    GatewayRouteService.class,\n+                    new SingletonResourceProvider(new StubGatewayRouteService(), true));\n+            sf.setProviders(List.of(new JacksonJsonProvider()));\n+            sf.create();\n+\n+            // 2. register Core in Keymaster\n+            NetworkService core = new NetworkService();\n+            core.setType(NetworkService.Type.CORE);\n+            core.setAddress(ADDRESS);\n+            serviceOps.register(core);\n+        }\n     }\n \n     public class StubGatewayRouteService implements GatewayRouteService {"},{"sha":"e5caef81c44ae31c25b8fc244c83fcb36861a8df","filename":"sra/src/test/java/org/apache/syncope/sra/SyncopeSRATest.java","status":"removed","additions":0,"deletions":209,"changes":209,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7311d478a8898e2dc451b0f0c41582db29c142dc/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7311d478a8898e2dc451b0f0c41582db29c142dc/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATest.java?ref=7311d478a8898e2dc451b0f0c41582db29c142dc","patch":"@@ -1,209 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.sra;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n-import static com.github.tomakehurst.wiremock.client.WireMock.get;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n-import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.fail;\n-\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import java.io.IOException;\n-import java.net.URI;\n-import org.apache.syncope.common.lib.to.GatewayRouteTO;\n-import org.apache.syncope.common.lib.types.FilterFactory;\n-import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n-import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n-import org.apache.syncope.common.lib.types.PredicateCond;\n-import org.apache.syncope.common.lib.types.PredicateFactory;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.cloud.contract.wiremock.AutoConfigureWireMock;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.MediaType;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.web.reactive.server.WebTestClient;\n-import org.springframework.web.reactive.function.BodyInserters;\n-\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n-@ContextConfiguration(initializers = ZookeeperTestingServer.class)\n-@AutoConfigureWireMock(port = 0)\n-public class SyncopeSRATest {\n-\n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n-\n-    @Autowired\n-    private WebTestClient webClient;\n-\n-    @Autowired\n-    private RouteRefresher routeRefresher;\n-\n-    @Value(\"${wiremock.server.port}\")\n-    private int wiremockPort;\n-\n-    @BeforeEach\n-    public void clearRoutes() {\n-        SyncopeCoreTestingServer.ROUTES.clear();\n-    }\n-\n-    @Test\n-    public void root() {\n-        webClient.get().exchange().expectStatus().isNotFound();\n-    }\n-\n-    @Test\n-    public void getAddResponseHeader() {\n-        // 1. no mapping for URL\n-        webClient.get().uri(\"/getAddResponseHeader\").exchange().expectStatus().isNotFound();\n-\n-        // 2. stub for proxied URL\n-        stubFor(get(urlEqualTo(\"/getAddResponseHeader\")).willReturn(aResponse()));\n-\n-        // 3. create route configuration\n-        GatewayRouteTO routeTO = new GatewayRouteTO();\n-        routeTO.setKey(\"getAddResponseHeader\");\n-        routeTO.setStatus(GatewayRouteStatus.PUBLISHED);\n-        routeTO.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        routeTO.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.METHOD).args(\"GET\").build());\n-        routeTO.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.PATH).args(\"/getAddResponseHeader\").cond(PredicateCond.AND).build());\n-        routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.ADD_RESPONSE_HEADER).args(\"Hello,World\").build());\n-\n-        SyncopeCoreTestingServer.ROUTES.put(routeTO.getKey(), routeTO);\n-\n-        routeRefresher.refresh();\n-\n-        // 4. now mapping works for URL\n-        webClient.get().uri(\"/getAddResponseHeader\").exchange().\n-                expectStatus().isOk().\n-                expectHeader().valueEquals(\"Hello\", \"World\");\n-\n-        // 5. update route configuration\n-        routeTO.getFilters().clear();\n-        routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.ADD_RESPONSE_HEADER).args(\"Hello,WorldZ\").build());\n-\n-        routeRefresher.refresh();\n-\n-        // 6. mapping for URL is updated too\n-        webClient.get().uri(\"/getAddResponseHeader\").exchange().\n-                expectStatus().isOk().\n-                expectHeader().valueEquals(\"Hello\", \"WorldZ\");\n-\n-        // 7. update route configuration again\n-        routeTO.getFilters().clear();\n-\n-        routeRefresher.refresh();\n-\n-        // 8. mapping for URL is updated again\n-        webClient.get().uri(\"/getAddResponseHeader\").exchange().\n-                expectStatus().isOk().\n-                expectHeader().doesNotExist(\"Hello\");\n-    }\n-\n-    @Test\n-    public void hystrix() {\n-        webClient.get().uri(\"/fallback\").exchange().\n-                expectStatus().isOk().\n-                expectBody().\n-                consumeWith(response -> assertThat(response.getResponseBody()).isEqualTo(\"fallback\".getBytes()));\n-\n-        stubFor(get(urlEqualTo(\"/delay/3\")).\n-                willReturn(aResponse().\n-                        withBody(\"no fallback\").\n-                        withFixedDelay(3000)));\n-\n-        GatewayRouteTO routeTO = new GatewayRouteTO();\n-        routeTO.setKey(\"hystrix\");\n-        routeTO.setStatus(GatewayRouteStatus.PUBLISHED);\n-        routeTO.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        routeTO.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.HOST).args(\"*.hystrix.com\").build());\n-        routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.HYSTRIX).args(\"fallbackcmd,forward:/fallback\").build());\n-\n-        SyncopeCoreTestingServer.ROUTES.put(routeTO.getKey(), routeTO);\n-\n-        routeRefresher.refresh();\n-\n-        webClient.get().uri(\"/delay/3\").\n-                header(HttpHeaders.HOST, \"www.hystrix.com\").\n-                exchange().\n-                expectStatus().isOk().\n-                expectBody().\n-                consumeWith(response -> assertThat(response.getResponseBody()).isEqualTo(\"fallback\".getBytes()));\n-    }\n-\n-    @Test\n-    public void custom() {\n-        stubFor(post(urlEqualTo(\"/custom\")).\n-                willReturn(aResponse().\n-                        withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE).\n-                        withBody(\"{\\\"data\\\": \\\"data\\\"}\")));\n-\n-        GatewayRouteTO routeTO = new GatewayRouteTO();\n-        routeTO.setKey(\"custom\");\n-        routeTO.setStatus(GatewayRouteStatus.PUBLISHED);\n-        routeTO.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        routeTO.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.CUSTOM).\n-                args(BodyPropertyMatchingRoutePredicateFactory.class.getName() + \";cool\").build());\n-        routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.ADD_RESPONSE_HEADER).args(\"Custom,matched\").build());\n-        routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.CUSTOM).\n-                args(BodyPropertyAddingGatewayFilterFactory.class.getName() + \";customized=true\").build());\n-\n-        SyncopeCoreTestingServer.ROUTES.put(routeTO.getKey(), routeTO);\n-\n-        routeRefresher.refresh();\n-\n-        webClient.post().uri(\"/custom\").\n-                body(BodyInserters.fromValue(MAPPER.createObjectNode().put(\"other\", true))).\n-                exchange().\n-                expectStatus().isNotFound();\n-\n-        webClient.post().uri(\"/custom\").\n-                body(BodyInserters.fromValue(MAPPER.createObjectNode().put(\"cool\", true))).\n-                exchange().\n-                expectStatus().isOk().\n-                expectHeader().valueEquals(\"Custom\", \"matched\").\n-                expectBody().\n-                consumeWith(response -> {\n-                    try {\n-                        JsonNode body = MAPPER.readTree(response.getResponseBody());\n-                        assertTrue(body.has(\"customized\"));\n-                        assertTrue(body.get(\"customized\").asBoolean());\n-                    } catch (IOException e) {\n-                        fail(e.getMessage(), e);\n-                    }\n-                });\n-    }\n-}"},{"sha":"8401abe4958f28e3d3ffc6b7dd5bbd4d626cd4e5","filename":"sra/src/test/java/org/apache/syncope/sra/TLSRouteProviderTest.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FTLSRouteProviderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FTLSRouteProviderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FTLSRouteProviderTest.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n+\n+import com.github.tomakehurst.wiremock.matching.AnythingPattern;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLException;\n+import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.lib.types.FilterFactory;\n+import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n+import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n+import org.apache.syncope.common.lib.types.GatewayRoutePredicateCond;\n+import org.apache.syncope.common.lib.types.PredicateFactory;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.http.client.reactive.ClientHttpConnector;\n+import org.springframework.http.client.reactive.ReactorClientHttpConnector;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+import reactor.netty.http.client.HttpClient;\n+\n+@ActiveProfiles({ \"tls\" })\n+public class TLSRouteProviderTest extends AbstractTest {\n+\n+    private WebTestClient webClient() throws SSLException {\n+        SslContext sslContext = SslContextBuilder.forClient().\n+                trustManager(InsecureTrustManagerFactory.INSTANCE).\n+                build();\n+        return webClient(sslContext);\n+    }\n+\n+    private WebTestClient webClient(final SslContext sslContext) throws SSLException {\n+        HttpClient httpClient = HttpClient.create().\n+                secure(sslContextSpec -> sslContextSpec.sslContext(sslContext));\n+        ClientHttpConnector connector = new ReactorClientHttpConnector(httpClient);\n+        return WebTestClient.bindToServer(connector).baseUrl(\"https://localhost:\" + gatewayPort).build();\n+    }\n+\n+    @BeforeEach\n+    public void clearRoutes() {\n+        SyncopeCoreTestingServer.ROUTES.clear();\n+    }\n+\n+    @Test\n+    public void root() throws SSLException {\n+        webClient().get().exchange().expectStatus().isNotFound();\n+    }\n+\n+    @Test\n+    public void clientAuth() throws SSLException, KeyStoreException, IOException, NoSuchAlgorithmException,\n+            CertificateException, UnrecoverableKeyException, KeyManagementException {\n+\n+        KeyStore store = KeyStore.getInstance(\"PKCS12\");\n+        store.load(getClass().getResourceAsStream(\"/client_pavel.p12\"), \"password\".toCharArray());\n+\n+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+        kmf.init(store, \"password\".toCharArray());\n+\n+        SslContext sslContext = SslContextBuilder.forClient().\n+                trustManager(InsecureTrustManagerFactory.INSTANCE).\n+                keyManager(kmf).\n+                build();\n+        WebTestClient webClient = webClient(sslContext);\n+\n+        stubFor(get(urlEqualTo(\"/getWithClientAuth\")).willReturn(aResponse()));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"getWithClientAuth\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.METHOD).args(\"GET\").build());\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.PATH).args(\"/getWithClientAuth\").cond(GatewayRoutePredicateCond.AND).build());\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.CLIENT_CERTS_TO_REQUEST_HEADER).build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/getWithClientAuth\").exchange().expectStatus().isOk();\n+\n+        verify(getRequestedFor(urlEqualTo(\"/getWithClientAuth\")).\n+                withHeader(\"X-Client-Certificate\", new AnythingPattern()));\n+    }\n+\n+    @Test\n+    public void withoutClientCert() throws SSLException, KeyStoreException, IOException, NoSuchAlgorithmException,\n+            CertificateException, UnrecoverableKeyException, KeyManagementException {\n+\n+        SslContext sslContext = SslContextBuilder.forClient().\n+                trustManager(InsecureTrustManagerFactory.INSTANCE).\n+                build();\n+        WebTestClient webClient = webClient(sslContext);\n+\n+        stubFor(get(urlEqualTo(\"/withoutClientCert\")).willReturn(aResponse()));\n+\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setKey(\"withoutClientCert\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.METHOD).args(\"GET\").build());\n+        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n+                factory(PredicateFactory.PATH).args(\"/withoutClientCert\").cond(GatewayRoutePredicateCond.AND).build());\n+        route.getFilters().add(new GatewayRouteFilter.Builder().\n+                factory(FilterFactory.CLIENT_CERTS_TO_REQUEST_HEADER).build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/withoutClientCert\").exchange().\n+                expectStatus().isOk().\n+                expectHeader().doesNotExist(\"X-Client-Certificate\");\n+    }\n+}"},{"sha":"b9c8762e3f3d71effc35e31832c03a3a5659b148","filename":"sra/src/test/java/org/apache/syncope/sra/ZookeeperTestingServer.java","status":"modified","additions":21,"deletions":19,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FZookeeperTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FZookeeperTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FZookeeperTestingServer.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -53,29 +53,31 @@ public void initialize(final ConfigurableApplicationContext ctx) {\n             throw new IllegalStateException(\"Could not load /keymaster.properties\", e);\n         }\n \n-        Configuration.setConfiguration(new Configuration() {\n+        if (AbstractTest.available(port.get())) {\n+            Configuration.setConfiguration(new Configuration() {\n \n-            private final AppConfigurationEntry[] entries = {\n-                new AppConfigurationEntry(\n-                DigestLoginModule.class.getName(),\n-                AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,\n-                Map.of(\"user_\" + username.get(), password.get()))\n-            };\n+                private final AppConfigurationEntry[] entries = {\n+                    new AppConfigurationEntry(\n+                    DigestLoginModule.class.getName(),\n+                    AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,\n+                    Map.of(\"user_\" + username.get(), password.get()))\n+                };\n \n-            @Override\n-            public AppConfigurationEntry[] getAppConfigurationEntry(final String name) {\n-                return entries;\n-            }\n-        });\n+                @Override\n+                public AppConfigurationEntry[] getAppConfigurationEntry(final String name) {\n+                    return entries;\n+                }\n+            });\n \n-        Map<String, Object> customProperties = new HashMap<>();\n-        customProperties.put(\"authProvider.1\", SASLAuthenticationProvider.class.getName());\n-        InstanceSpec spec = new InstanceSpec(null, port.get(), -1, -1, true, 1, -1, -1, customProperties);\n+            Map<String, Object> customProperties = new HashMap<>();\n+            customProperties.put(\"authProvider.1\", SASLAuthenticationProvider.class.getName());\n+            InstanceSpec spec = new InstanceSpec(null, port.get(), -1, -1, true, 1, -1, -1, customProperties);\n \n-        try {\n-            new TestingServer(spec, true);\n-        } catch (Exception e) {\n-            fail(e);\n+            try {\n+                new TestingServer(spec, true);\n+            } catch (Exception e) {\n+                fail(e);\n+            }\n         }\n     }\n }"},{"sha":"853c92b1feb64de9a7a996e4f45e3c6e21c53642","filename":"sra/src/test/java/org/apache/syncope/sra/filters/BodyPropertyAddingGatewayFilterFactory.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FBodyPropertyAddingGatewayFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FBodyPropertyAddingGatewayFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FBodyPropertyAddingGatewayFilterFactory.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.sra;\n+package org.apache.syncope.sra.filters;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;","previous_filename":"sra/src/test/java/org/apache/syncope/sra/BodyPropertyAddingGatewayFilterFactory.java"},{"sha":"cdbd3fde8e0386c3fe67b8e80cb85e60634796ad","filename":"sra/src/test/java/org/apache/syncope/sra/predicates/BodyPropertyMatchingRoutePredicateFactory.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fpredicates%2FBodyPropertyMatchingRoutePredicateFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fpredicates%2FBodyPropertyMatchingRoutePredicateFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fpredicates%2FBodyPropertyMatchingRoutePredicateFactory.java?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.sra;\n+package org.apache.syncope.sra.predicates;\n \n import com.fasterxml.jackson.databind.JsonNode;\n import java.util.List;","previous_filename":"sra/src/test/java/org/apache/syncope/sra/BodyPropertyMatchingRoutePredicateFactory.java"},{"sha":"5aa6f2029a4c5c71e5fc180a11731c84fca24aa8","filename":"sra/src/test/resources/application-tls.properties","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fresources%2Fapplication-tls.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fresources%2Fapplication-tls.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fresources%2Fapplication-tls.properties?ref=cf54140d85cf3489f67de5aabc4a3e468b013998","patch":"@@ -0,0 +1,31 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+server.ssl.enabled=true\n+\n+server.ssl.key-store-type=PKCS12\n+server.ssl.key-store=classpath:keyStore.p12\n+server.ssl.key-store-password=password\n+\n+server.ssl.trust-store=classpath:trustStore.jks\n+server.ssl.trust-store-password=password\n+server.ssl.trust-store-type=JKS\n+\n+server.ssl.client-auth=want\n+\n+server.port=8443\n+security.require-ssl=true\n+service.discovery.address=http://localhost:8443"},{"sha":"b7958f2b1cefc697cbf511751c56d2338e0d887d","filename":"sra/src/test/resources/client_pavel.p12","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fresources%2Fclient_pavel.p12","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fresources%2Fclient_pavel.p12","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fresources%2Fclient_pavel.p12?ref=cf54140d85cf3489f67de5aabc4a3e468b013998"},{"sha":"85505b9ec41db5b643ddcbcf753588e3cae1a8b8","filename":"sra/src/test/resources/keyStore.p12","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fresources%2FkeyStore.p12","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fresources%2FkeyStore.p12","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fresources%2FkeyStore.p12?ref=cf54140d85cf3489f67de5aabc4a3e468b013998"},{"sha":"6000a0652899fbb1c255865ed4a37718e608baea","filename":"sra/src/test/resources/trustStore.jks","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fresources%2FtrustStore.jks","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cf54140d85cf3489f67de5aabc4a3e468b013998/sra%2Fsrc%2Ftest%2Fresources%2FtrustStore.jks","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fresources%2FtrustStore.jks?ref=cf54140d85cf3489f67de5aabc4a3e468b013998"}]}