{"sha":"51c60a7a134f7680b7f604f34b1a9c4acc5ddab6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUxYzYwYTdhMTM0Zjc2ODBiN2Y2MDRmMzRiMWE5YzRhY2M1ZGRhYjY=","commit":{"author":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-04-05T13:59:48Z"},"committer":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-04-05T14:39:18Z"},"message":"[SYNCOPE-1288] Task lists are now correctly sortable","tree":{"sha":"28e0e46c0d3f4a3cff17d770ee3d7e8b763f2b37","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/28e0e46c0d3f4a3cff17d770ee3d7e8b763f2b37"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"parents":[{"sha":"a8ae113d902e33ba27e03dd5d250187868f45c41","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a8ae113d902e33ba27e03dd5d250187868f45c41","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a8ae113d902e33ba27e03dd5d250187868f45c41"}],"stats":{"total":351,"additions":306,"deletions":45},"files":[{"sha":"5109da3410018d908532d5a2e48863d46fc48874","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java?ref=51c60a7a134f7680b7f604f34b1a9c4acc5ddab6","patch":"@@ -108,11 +108,11 @@ protected List<IColumn<ReportTO, String>> getColumns() {\n         columns.add(new PropertyColumn<>(new StringResourceModel(\"name\", this), \"name\", \"name\"));\n \n         columns.add(new DatePropertyColumn<>(\n-                new StringResourceModel(\"lastExec\", this), \"lastExec\", \"lastExec\"));\n+                new StringResourceModel(\"lastExec\", this), null, \"lastExec\"));\n \n         columns.add(new DatePropertyColumn<>(\n-                new StringResourceModel(\"nextExec\", this), \"nextExec\", \"nextExec\"));\n-\n+                new StringResourceModel(\"nextExec\", this), null, \"nextExec\"));\n+        \n         columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"start\", this), \"start\", \"start\"));\n "},{"sha":"504e76775c8579c9d3694c3ee9a3b3423816d53b","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/ProvisioningTaskDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java?ref=51c60a7a134f7680b7f604f34b1a9c4acc5ddab6","patch":"@@ -117,10 +117,10 @@ protected List<IColumn<T, String>> getFieldColumns() {\n         }\n \n         columns.add(new DatePropertyColumn<>(\n-                new StringResourceModel(\"lastExec\", this), \"lastExec\", \"lastExec\"));\n+                new StringResourceModel(\"lastExec\", this), null, \"lastExec\"));\n \n         columns.add(new DatePropertyColumn<>(\n-                new StringResourceModel(\"nextExec\", this), \"nextExec\", \"nextExec\"));\n+                new StringResourceModel(\"nextExec\", this), null, \"nextExec\"));\n \n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"latestExecStatus\", this), \"latestExecStatus\", \"latestExecStatus\"));"},{"sha":"bfc7eb6b6df03725cc0210dd8b142e84e9733945","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java?ref=51c60a7a134f7680b7f604f34b1a9c4acc5ddab6","patch":"@@ -161,10 +161,10 @@ public void populateItem(\n         });\n \n         columns.add(new DatePropertyColumn<>(\n-                new StringResourceModel(\"lastExec\", this), \"lastExec\", \"lastExec\"));\n+                new StringResourceModel(\"lastExec\", this), null, \"lastExec\"));\n \n         columns.add(new DatePropertyColumn<>(\n-                new StringResourceModel(\"nextExec\", this), \"nextExec\", \"nextExec\"));\n+                new StringResourceModel(\"nextExec\", this), null, \"nextExec\"));\n \n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"latestExecStatus\", this), \"latestExecStatus\", \"latestExecStatus\"));"},{"sha":"dd78ec3e3fb364a84262d0b97044a30706d38641","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":205,"deletions":38,"changes":243,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=51c60a7a134f7680b7f604f34b1a9c4acc5ddab6","patch":"@@ -18,8 +18,14 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.function.Predicate;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.commons.lang3.StringUtils;\n@@ -42,6 +48,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.task.JPASchedTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPullTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.AbstractTask;\n+import org.apache.syncope.core.persistence.jpa.entity.task.JPATaskExec;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n@@ -84,6 +91,36 @@ public Class<? extends Task> getEntityReference(final TaskType type) {\n         return result;\n     }\n \n+    private String getEntityTableName(final TaskType type) {\n+        String result = null;\n+\n+        switch (type) {\n+            case NOTIFICATION:\n+                result = JPANotificationTask.class.getAnnotation(DiscriminatorValue.class).value();\n+                break;\n+\n+            case PROPAGATION:\n+                result = JPAPropagationTask.class.getAnnotation(DiscriminatorValue.class).value();\n+                break;\n+\n+            case PUSH:\n+                result = JPAPushTask.class.getAnnotation(DiscriminatorValue.class).value();\n+                break;\n+\n+            case SCHEDULED:\n+                result = JPASchedTask.class.getAnnotation(DiscriminatorValue.class).value();\n+                break;\n+\n+            case PULL:\n+                result = JPAPullTask.class.getAnnotation(DiscriminatorValue.class).value();\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n     @Transactional(readOnly = true)\n     @SuppressWarnings(\"unchecked\")\n     @Override\n@@ -131,7 +168,7 @@ public List<PushTask> findByPushActions(final Implementation pushActions) {\n         return query.getResultList();\n     }\n \n-    private <T extends Task> StringBuilder buildFindAllQuery(final TaskType type) {\n+    private <T extends Task> StringBuilder buildFindAllQueryJPA(final TaskType type) {\n         StringBuilder builder = new StringBuilder(\"SELECT t FROM \").\n                 append(getEntityReference(type).getSimpleName()).\n                 append(\" t WHERE \");\n@@ -151,7 +188,7 @@ private <T extends Task> StringBuilder buildFindAllQuery(final TaskType type) {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T extends Task> List<T> findToExec(final TaskType type) {\n-        StringBuilder queryString = buildFindAllQuery(type).append(\"AND \");\n+        StringBuilder queryString = buildFindAllQueryJPA(type).append(\"AND \");\n \n         if (type == TaskType.NOTIFICATION) {\n             queryString.append(\"t.executed = 0 \");\n@@ -175,7 +212,9 @@ private StringBuilder buildFindAllQuery(\n             final ExternalResource resource,\n             final Notification notification,\n             final AnyTypeKind anyTypeKind,\n-            final String entityKey) {\n+            final String entityKey,\n+            final boolean orderByTaskExecInfo,\n+            final List<Object> queryParameters) {\n \n         if (resource != null\n                 && type != TaskType.PROPAGATION && type != TaskType.PUSH && type != TaskType.PULL) {\n@@ -193,38 +232,135 @@ private StringBuilder buildFindAllQuery(\n             throw new IllegalArgumentException(type + \" is not related to notifications\");\n         }\n \n-        StringBuilder queryString = buildFindAllQuery(type);\n+        StringBuilder queryString = new StringBuilder(\"SELECT \").\n+                append(AbstractTask.TABLE).\n+                append(\".id FROM \").\n+                append(AbstractTask.TABLE);\n+        if (orderByTaskExecInfo) {\n+            queryString.append(\" LEFT OUTER JOIN \").\n+                    append(JPATaskExec.TABLE).\n+                    append(\" ON \").\n+                    append(AbstractTask.TABLE).\n+                    append(\".id = \").\n+                    append(JPATaskExec.TABLE).\n+                    append(\".task_id\");\n+        }\n+        queryString.append(\" WHERE \").\n+                append(AbstractTask.TABLE).\n+                append(\".DTYPE = ?1\");\n+        queryParameters.add(getEntityTableName(type));\n+        if (type == TaskType.SCHEDULED) {\n+            queryString.append(\" AND \").\n+                    append(AbstractTask.TABLE).\n+                    append(\".id NOT IN (SELECT \").append(AbstractTask.TABLE).append(\".id FROM \").\n+                    append(AbstractTask.TABLE).append(\" WHERE \").\n+                    append(AbstractTask.TABLE).append(\".DTYPE = ?2)\").\n+                    append(\" AND \").\n+                    append(AbstractTask.TABLE).\n+                    append(\".id NOT IN (SELECT id FROM \").\n+                    append(AbstractTask.TABLE).append(\" WHERE \").\n+                    append(AbstractTask.TABLE).append(\".DTYPE = ?3)\");\n+\n+            queryParameters.add(JPAPushTask.class.getAnnotation(DiscriminatorValue.class).value());\n+            queryParameters.add(JPAPullTask.class.getAnnotation(DiscriminatorValue.class).value());\n+        }\n+        queryString.append(' ');\n \n         if (resource != null) {\n-            queryString.append(\"AND t.resource=:resource \");\n+            queryParameters.add(resource.getKey());\n+\n+            queryString.append(\"AND \").\n+                    append(AbstractTask.TABLE).\n+                    append(\".resource_id=?\").append(queryParameters.size());\n         }\n         if (notification != null) {\n-            queryString.append(\"AND t.notification=:notification \");\n+            queryParameters.add(notification.getKey());\n+\n+            queryString.append(\"AND \").\n+                    append(AbstractTask.TABLE).\n+                    append(\".notification_id=?\").append(queryParameters.size());\n         }\n         if (anyTypeKind != null && entityKey != null) {\n-            queryString.append(\"AND t.anyTypeKind=:anyTypeKind AND t.entityKey=:entityKey \");\n+            queryParameters.add(anyTypeKind.name());\n+            queryParameters.add(entityKey);\n+\n+            queryString.append(\"AND \").\n+                    append(AbstractTask.TABLE).\n+                    append(\".anyTypeKind=?\").append(queryParameters.size() - 1).\n+                    append(\" AND \").\n+                    append(AbstractTask.TABLE).\n+                    append(\".entityKey=?\").append(queryParameters.size());\n         }\n \n         return queryString;\n     }\n \n     private String toOrderByStatement(\n-            final Class<? extends Task> beanClass, final List<OrderByClause> orderByClauses) {\n+            final Class<? extends Task> beanClass,\n+            final List<OrderByClause> orderByClauses,\n+            final boolean orderByTaskExecInfo) {\n \n         StringBuilder statement = new StringBuilder();\n \n+        if (orderByTaskExecInfo) {\n+            statement.append(\" AND (\").\n+                    append(JPATaskExec.TABLE).\n+                    append(\".startDate IS NULL OR \").\n+                    append(JPATaskExec.TABLE).\n+                    append(\".startDate = (SELECT MAX(\").\n+                    append(JPATaskExec.TABLE).\n+                    append(\".startDate) FROM \").\n+                    append(JPATaskExec.TABLE).\n+                    append(\" WHERE \").\n+                    append(AbstractTask.TABLE).\n+                    append(\".id = \").\n+                    append(JPATaskExec.TABLE).\n+                    append(\".task_id))\");\n+        }\n+        statement.append(\" ORDER BY \");\n+\n+        StringBuilder subStatement = new StringBuilder();\n         orderByClauses.forEach(clause -> {\n             String field = clause.getField().trim();\n-            if (ReflectionUtils.findField(beanClass, field) != null) {\n-                statement.append(\"t.\").append(field).append(' ').append(clause.getDirection().name());\n+            String table = JPATaskExec.TABLE;\n+            switch (field) {\n+                case \"latestExecStatus\":\n+                    field = \"status\";\n+                    break;\n+\n+                case \"start\":\n+                    field = \"startDate\";\n+                    break;\n+\n+                case \"end\":\n+                    field = \"endDate\";\n+                    break;\n+\n+                default:\n+                    Field beanField = ReflectionUtils.findField(beanClass, field);\n+                    if (beanField != null\n+                            && (beanField.getAnnotation(ManyToOne.class) != null\n+                            || beanField.getAnnotation(OneToMany.class) != null)) {\n+                        field += \"_id\";\n+                    }\n+                    table = AbstractTask.TABLE;\n             }\n+            subStatement.append(table).\n+                    append(\".\").\n+                    append(field).\n+                    append(' ').\n+                    append(clause.getDirection().name()).\n+                    append(',');\n         });\n \n-        if (statement.length() == 0) {\n-            statement.append(\"ORDER BY t.id DESC\");\n+        if (subStatement.length() == 0) {\n+            statement.append(AbstractTask.TABLE).\n+                    append(\".id DESC\");\n         } else {\n-            statement.insert(0, \"ORDER BY \");\n+            subStatement.deleteCharAt(subStatement.length() - 1);\n+            statement.append(subStatement);\n         }\n+\n         return statement.toString();\n     }\n \n@@ -240,19 +376,31 @@ public <T extends Task> List<T> findAll(\n             final int itemsPerPage,\n             final List<OrderByClause> orderByClauses) {\n \n-        StringBuilder queryString = buildFindAllQuery(type, resource, notification, anyTypeKind, entityKey).\n-                append(toOrderByStatement(getEntityReference(type), orderByClauses));\n+        List<Object> queryParameters = new ArrayList<>();\n \n-        Query query = entityManager().createQuery(queryString.toString());\n-        if (resource != null) {\n-            query.setParameter(\"resource\", resource);\n-        }\n-        if (notification != null) {\n-            query.setParameter(\"notification\", notification);\n-        }\n-        if (anyTypeKind != null && entityKey != null) {\n-            query.setParameter(\"anyTypeKind\", anyTypeKind);\n-            query.setParameter(\"entityKey\", entityKey);\n+        boolean orderByTaskExecInfo = orderByClauses.stream().anyMatch(new Predicate<OrderByClause>() {\n+\n+            @Override\n+            public boolean test(final OrderByClause t) {\n+                return t.getField().equals(\"start\")\n+                        || t.getField().equals(\"end\")\n+                        || t.getField().equals(\"latestExecStatus\")\n+                        || t.getField().equals(\"status\");\n+            }\n+        });\n+        StringBuilder queryString = buildFindAllQuery(type,\n+                resource,\n+                notification,\n+                anyTypeKind,\n+                entityKey,\n+                orderByTaskExecInfo,\n+                queryParameters).\n+                append(toOrderByStatement(getEntityReference(type), orderByClauses, orderByTaskExecInfo));\n+\n+        Query query = entityManager().createNativeQuery(queryString.toString());\n+\n+        for (int i = 1; i <= queryParameters.size(); i++) {\n+            query.setParameter(i, queryParameters.get(i - 1));\n         }\n \n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n@@ -261,7 +409,7 @@ public <T extends Task> List<T> findAll(\n             query.setMaxResults(itemsPerPage);\n         }\n \n-        return query.getResultList();\n+        return buildResult(query.getResultList());\n     }\n \n     @Override\n@@ -272,19 +420,18 @@ public int count(\n             final AnyTypeKind anyTypeKind,\n             final String entityKey) {\n \n-        StringBuilder queryString = buildFindAllQuery(type, resource, notification, anyTypeKind, entityKey);\n+        List<Object> queryParameters = new ArrayList<>();\n \n-        Query query = entityManager().createQuery(StringUtils.replaceOnce(\n-                queryString.toString(), \"SELECT t\", \"SELECT COUNT(t)\"));\n-        if (resource != null) {\n-            query.setParameter(\"resource\", resource);\n-        }\n-        if (notification != null) {\n-            query.setParameter(\"notification\", notification);\n-        }\n-        if (anyTypeKind != null && entityKey != null) {\n-            query.setParameter(\"anyTypeKind\", anyTypeKind);\n-            query.setParameter(\"entityKey\", entityKey);\n+        StringBuilder queryString =\n+                buildFindAllQuery(type, resource, notification, anyTypeKind, entityKey, false, queryParameters);\n+\n+        Query query = entityManager().createNativeQuery(StringUtils.replaceOnce(\n+                queryString.toString(),\n+                \"SELECT \" + AbstractTask.TABLE + \".id\",\n+                \"SELECT COUNT(\" + AbstractTask.TABLE + \".id)\"));\n+\n+        for (int i = 1; i <= queryParameters.size(); i++) {\n+            query.setParameter(i, queryParameters.get(i - 1));\n         }\n \n         return ((Number) query.getSingleResult()).intValue();\n@@ -322,4 +469,24 @@ public void deleteAll(final ExternalResource resource, final TaskType type) {\n         findAll(type, resource, null, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n                 stream().map(Entity::getKey).forEach(task -> delete(task));\n     }\n+\n+    private <T extends Task> List<T> buildResult(final List<Object> raw) {\n+        List<T> result = new ArrayList<>();\n+\n+        for (Object anyKey : raw) {\n+            String actualKey = anyKey instanceof Object[]\n+                    ? (String) ((Object[]) anyKey)[0]\n+                    : ((String) anyKey);\n+\n+            @SuppressWarnings(\"unchecked\")\n+            T any = find(actualKey);\n+            if (any == null) {\n+                LOG.error(\"Could not find task with id {}, even if returned by native query\", actualKey);\n+            } else if (!result.contains(any)) {\n+                result.add(any);\n+            }\n+        }\n+\n+        return result;\n+    }\n }"},{"sha":"0da3e392dd2f786f2669d7e0c9a9f6377c2ec7d1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=51c60a7a134f7680b7f604f34b1a9c4acc5ddab6","patch":"@@ -24,9 +24,11 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import java.util.UUID;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -90,6 +92,21 @@ public void read() {\n         assertEquals(1, task.getExecs().size());\n     }\n \n+    @Test\n+    public void readMultipleOrderBy() {\n+        List<OrderByClause> orderByClauses = new ArrayList<>();\n+        OrderByClause clause1 = new OrderByClause();\n+        clause1.setField(\"start\");\n+        OrderByClause clause2 = new OrderByClause();\n+        clause2.setField(\"latestExecStatus\");\n+        OrderByClause clause3 = new OrderByClause();\n+        clause3.setField(\"connObjectKey\");\n+        orderByClauses.add(clause1);\n+        orderByClauses.add(clause2);\n+        orderByClauses.add(clause3);\n+        assertFalse(taskDAO.findAll(TaskType.PROPAGATION, null, null, null, null, -1, -1, orderByClauses).isEmpty());\n+    }\n+\n     @Test\n     public void save() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");"},{"sha":"5c9944d6a966567ba89bfad31ae31793bbece9e5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51c60a7a134f7680b7f604f34b1a9c4acc5ddab6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=51c60a7a134f7680b7f604f34b1a9c4acc5ddab6","patch":"@@ -24,9 +24,13 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.List;\n import java.util.Optional;\n import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -42,6 +46,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecQuery;\n@@ -225,4 +230,76 @@ public void issueSYNCOPE741() {\n                 page(1).size(2).build());\n         assertTrue(execs.getTotalCount() >= execs.getResult().size());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1288() {\n+        // create a new user\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"xxxyyy@xxx.xxx\");\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+\n+        // generate some PropagationTasks\n+        for (int i = 0; i < 9; i++) {\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(userTO.getKey());\n+            userPatch.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+                    attrTO(new AttrTO.Builder().schema(\"userId\").value(\n+                            \"test\" + getUUIDString() + i + \"@test.com\").build()).\n+                    build());\n+\n+            userService.update(userPatch);\n+        }\n+\n+        // ASC order\n+        PagedResult<TaskTO> unorderedTasks = taskService.search(\n+                new TaskQuery.Builder(TaskType.PROPAGATION).\n+                        resource(RESOURCE_NAME_LDAP).\n+                        entityKey(userTO.getKey()).\n+                        anyTypeKind(AnyTypeKind.USER).\n+                        page(1).\n+                        size(10).\n+                        build());\n+        Collections.sort(unorderedTasks.getResult(), new Comparator<TaskTO>() {\n+\n+            @Override\n+            public int compare(final TaskTO o1, final TaskTO o2) {\n+                return o1.getStart().compareTo(o2.getStart());\n+            }\n+        });\n+        assertNotNull(unorderedTasks);\n+        assertFalse(unorderedTasks.getResult().isEmpty());\n+        assertEquals(10, unorderedTasks.getResult().size());\n+\n+        PagedResult<TaskTO> orderedTasks = taskService.search(\n+                new TaskQuery.Builder(TaskType.PROPAGATION).\n+                        resource(RESOURCE_NAME_LDAP).\n+                        entityKey(userTO.getKey()).\n+                        anyTypeKind(AnyTypeKind.USER).\n+                        page(1).\n+                        size(10).\n+                        orderBy(\"start\").\n+                        build());\n+        assertNotNull(orderedTasks);\n+        assertFalse(orderedTasks.getResult().isEmpty());\n+        assertEquals(10, orderedTasks.getResult().size());\n+\n+        assertTrue(orderedTasks.getResult().equals(unorderedTasks.getResult()));\n+\n+        // DESC order\n+        Collections.reverse(unorderedTasks.getResult());\n+        orderedTasks = taskService.search(\n+                new TaskQuery.Builder(TaskType.PROPAGATION).\n+                        resource(RESOURCE_NAME_LDAP).\n+                        entityKey(userTO.getKey()).\n+                        anyTypeKind(AnyTypeKind.USER).\n+                        page(1).\n+                        size(10).\n+                        orderBy(\"start DESC\").\n+                        build());\n+\n+        assertTrue(orderedTasks.getResult().equals(unorderedTasks.getResult()));\n+    }\n+\n }"}]}