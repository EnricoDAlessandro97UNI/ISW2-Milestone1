{"sha":"d314cc4fa3df1884f14c1542807950c05570686d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQzMTRjYzRmYTNkZjE4ODRmMTRjMTU0MjgwNzk1MGMwNTU3MDY4NmQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-05-25T15:52:15Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-05-25T15:52:15Z"},"message":"Fixes issue 66\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246966 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ec620fc9e070d4c443989ca25b4530d0c19e4d99","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ec620fc9e070d4c443989ca25b4530d0c19e4d99"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d314cc4fa3df1884f14c1542807950c05570686d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d314cc4fa3df1884f14c1542807950c05570686d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d314cc4fa3df1884f14c1542807950c05570686d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d314cc4fa3df1884f14c1542807950c05570686d/comments","author":null,"committer":null,"parents":[{"sha":"a272484e2e32b9e817caacf55b82c6aa6c39040c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a272484e2e32b9e817caacf55b82c6aa6c39040c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a272484e2e32b9e817caacf55b82c6aa6c39040c"}],"stats":{"total":826,"additions":578,"deletions":248},"files":[{"sha":"e0d67af09222dc3075f15d8e0e55dc47189e8d3c","filename":"client/src/main/java/org/syncope/client/to/SchemaTO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -25,6 +25,8 @@ public class SchemaTO extends AbstractBaseBean {\n \n     private String mandatoryCondition;\n \n+    private String enumerationValues;\n+\n     private boolean multivalue;\n \n     private boolean uniqueConstraint;\n@@ -46,6 +48,7 @@ public String getConversionPattern() {\n     public void setConversionPattern(String conversionPattern) {\n         this.conversionPattern = conversionPattern;\n     }\n+\n     public String getMandatoryCondition() {\n         return mandatoryCondition;\n     }\n@@ -54,6 +57,14 @@ public void setMandatoryCondition(String mandatoryCondition) {\n         this.mandatoryCondition = mandatoryCondition;\n     }\n \n+    public String getEnumerationValues() {\n+        return enumerationValues;\n+    }\n+\n+    public void setEnumerationValues(String enumerationValues) {\n+        this.enumerationValues = enumerationValues;\n+    }\n+\n     public boolean isMultivalue() {\n         return multivalue;\n     }"},{"sha":"b1b51c5ed33ee98c873a3f80a8171d9cdc015139","filename":"client/src/main/java/org/syncope/types/EntityViolationType.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -25,6 +25,8 @@ public enum EntityViolationType {\n     \"org.syncope.core.validation.attrvalue.moreThanOneNonNull\"),\n     InvalidSchema(\n     \"org.syncope.core.validation.attrvalue.invalidSchema\"),\n+    InvalidSchemaTypeSpecification(\n+    \"org.syncope.core.validation.attrvalue.invalidSchemaTypeSpecification\"),\n     InvalidValueList(\n     \"org.syncope.core.validation.attr.invalidValueList\"),\n     InvalidEntitlementName("},{"sha":"d6ca0d0aa1bf2133c98e009c4fd5f1c4eeaa637e","filename":"client/src/main/java/org/syncope/types/SchemaType.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -20,7 +20,8 @@ public enum SchemaType {\n     Long(\"java.lang.Long\"),\n     Double(\"java.lang.Double\"),\n     Boolean(\"java.lang.Boolean\"),\n-    Date(\"java.util.Date\");\n+    Date(\"java.util.Date\"),\n+    Enum(\"java.lang.Enum\");\n \n     final private String className;\n "},{"sha":"054340d9fdf29335c423d7182e2a22c85e603ed2","filename":"console/src/main/java/org/syncope/console/SchemaModalPageFactory.java","status":"renamed","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSchemaModalPageFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSchemaModalPageFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSchemaModalPageFactory.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -14,9 +14,14 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.syncope.console.pages;\n+package org.syncope.console;\n \n import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.syncope.console.pages.AbstractSchemaModalPage;\n+import org.syncope.console.pages.BaseModalPage;\n+import org.syncope.console.pages.DerivedSchemaModalPage;\n+import org.syncope.console.pages.SchemaModalPage;\n+import org.syncope.console.pages.VirtualSchemaModalPage;\n import org.syncope.console.rest.SchemaRestClient;\n \n /**","previous_filename":"console/src/main/java/org/syncope/console/pages/SchemaModalPageFactory.java"},{"sha":"d5c125e2747610746a922a8cba3b6763b13bfbcb","filename":"console/src/main/java/org/syncope/console/pages/MembershipModalPage.java","status":"modified","additions":94,"deletions":66,"changes":160,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FMembershipModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FMembershipModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FMembershipModalPage.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -20,6 +20,7 @@\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n import org.apache.wicket.Page;\n@@ -32,6 +33,7 @@\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.ChoiceRenderer;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.TextField;\n@@ -51,6 +53,7 @@\n import org.syncope.console.rest.SchemaRestClient;\n import org.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.syncope.console.wicket.markup.html.form.AjaxDecoratedCheckbox;\n+import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.syncope.console.wicket.markup.html.form.DateFieldPanel;\n import org.syncope.console.wicket.markup.html.form.DerivedAttributesForm;\n@@ -125,75 +128,100 @@ protected void populateItem(final ListItem item) {\n                             required = true;\n                         }\n \n-                        if (schemaTO.getType() == SchemaType.String) {\n-                            panel = new AjaxTextFieldPanel(\"panel\",\n-                                    schemaTO.getName(), new Model() {\n-\n-                                @Override\n-                                public Serializable getObject() {\n-                                    return (String) item.getModelObject();\n-                                }\n-\n-                                @Override\n-                                public void setObject(Serializable object) {\n-                                    item.setModelObject((String) object);\n-                                }\n-                            }, required);\n-                        } else if (schemaTO.getType() == SchemaType.Boolean) {\n-                            panel = new AjaxCheckBoxPanel(\"panel\", schemaTO.getName(), new Model() {\n-\n-                                @Override\n-                                public Serializable getObject() {\n-                                    //return (String) item.getModelObject();\n-                                    return \"false\";\n-                                }\n-\n-                                @Override\n-                                public void setObject(Serializable object) {\n-                                    Boolean val = (Boolean) object;\n-                                    item.setModelObject(val.toString());\n-                                }\n-                            }, required);\n-\n-                        } else if (schemaTO.getType() == SchemaType.Date) {\n-                            panel = new DateFieldPanel(\"panel\",\n-                                    schemaTO.getName(), new Model() {\n-\n-                                @Override\n-                                public Serializable getObject() {\n-                                    DateFormat formatter =\n-                                            new SimpleDateFormat(schemaTO.getConversionPattern());\n-                                    Date date = new Date();\n-                                    try {\n-                                        String dateValue = (String) item.getModelObject();\n-                                        formatter = new SimpleDateFormat(\n-                                                schemaTO.getConversionPattern());\n+                        switch (schemaTO.getType()) {\n+                            case Boolean:\n+                                panel = new AjaxCheckBoxPanel(\"panel\",\n+                                        schemaTO.getName(), new Model() {\n+\n+                                    @Override\n+                                    public Serializable getObject() {\n+                                        return \"false\";\n+                                    }\n \n-                                        if (!dateValue.equals(\"\")) {\n-                                            date = formatter.parse(\n-                                                    dateValue);\n-                                        } else {\n-                                            date = null;\n+                                    @Override\n+                                    public void setObject(Serializable object) {\n+                                        Boolean val = (Boolean) object;\n+                                        item.setModelObject(val.toString());\n+                                    }\n+                                }, required);\n+                                break;\n+                            case Date:\n+                                panel = new DateFieldPanel(\"panel\",\n+                                        schemaTO.getName(), new Model() {\n+\n+                                    @Override\n+                                    public Serializable getObject() {\n+                                        DateFormat formatter =\n+                                                new SimpleDateFormat(\n+                                                schemaTO.getConversionPattern());\n+                                        Date date = new Date();\n+                                        try {\n+                                            String dateValue = (String) item.getModelObject();\n+                                            formatter = new SimpleDateFormat(\n+                                                    schemaTO.getConversionPattern());\n+\n+                                            if (!dateValue.equals(\"\")) {\n+                                                date = formatter.parse(\n+                                                        dateValue);\n+                                            } else {\n+                                                date = null;\n+                                            }\n+                                        } catch (ParseException e) {\n+                                            LOG.error(\n+                                                    \"While parsing a date\",\n+                                                    e);\n                                         }\n-                                    } catch (ParseException e) {\n-                                        LOG.error(\n-                                                \"While parsing a date\",\n-                                                e);\n+                                        return date;\n+                                    }\n+\n+                                    @Override\n+                                    public void setObject(Serializable object) {\n+                                        Date date = (Date) object;\n+                                        Format formatter = new SimpleDateFormat(\n+                                                schemaTO.getConversionPattern());\n+                                        String val = formatter.format(date);\n+                                        item.setModelObject(val);\n+                                    }\n+                                }, schemaTO.getConversionPattern(),\n+                                        required,\n+                                        schemaTO.isReadonly(), form);\n+                                break;\n+\n+                            case Enum:\n+                                panel = new AjaxDropDownChoicePanel(\n+                                        \"panel\",\n+                                        schemaTO.getName(),\n+                                        new Model() {\n+\n+                                            @Override\n+                                            public Serializable getObject() {\n+                                                return (String) item.getModelObject();\n+                                            }\n+\n+                                            @Override\n+                                            public void setObject(Serializable object) {\n+                                                item.setModelObject((String) object);\n+                                            }\n+                                        },\n+                                        Arrays.asList(schemaTO.getEnumerationValues().split(Schema.enumValuesSeparator)),\n+                                        new ChoiceRenderer(),\n+                                        required);\n+                                break;\n+                                \n+                            default:\n+                                panel = new AjaxTextFieldPanel(\"panel\",\n+                                        schemaTO.getName(), new Model() {\n+\n+                                    @Override\n+                                    public Serializable getObject() {\n+                                        return (String) item.getModelObject();\n+                                    }\n+\n+                                    @Override\n+                                    public void setObject(Serializable object) {\n+                                        item.setModelObject((String) object);\n                                     }\n-                                    return date;\n-                                }\n-\n-                                @Override\n-                                public void setObject(Serializable object) {\n-                                    Date date = (Date) object;\n-                                    Format formatter = new SimpleDateFormat(\n-                                            schemaTO.getConversionPattern());\n-                                    String val = formatter.format(date);\n-                                    item.setModelObject(val);\n-                                }\n-                            }, schemaTO.getConversionPattern(),\n-                                    required,\n-                                    schemaTO.isReadonly(), form);\n+                                }, required);\n                         }\n \n                         item.add(panel);"},{"sha":"9fd77a51bca66954028f9a0eaac3a6d8f77e5b39","filename":"console/src/main/java/org/syncope/console/pages/RoleModalPage.java","status":"modified","additions":90,"deletions":63,"changes":153,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -22,6 +22,7 @@\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n@@ -62,6 +63,7 @@\n import org.syncope.console.rest.RoleRestClient;\n import org.syncope.console.rest.SchemaRestClient;\n import org.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.syncope.console.wicket.markup.html.form.DateFieldPanel;\n import org.syncope.console.wicket.markup.html.form.DerivedAttributesForm;\n@@ -167,71 +169,96 @@ protected void populateItem(final ListItem item) {\n                             required = true;\n                         }\n \n-                        if (schemaTO.getType() == SchemaType.Boolean) {\n-                            panel = new AjaxCheckBoxPanel(\"panel\", schemaTO.getName(), new Model() {\n-\n-                                @Override\n-                                public Serializable getObject() {\n-                                    return (String) item.getModelObject();\n-                                }\n-\n-                                @Override\n-                                public void setObject(Serializable object) {\n-                                    Boolean val = (Boolean) object;\n-                                    item.setModelObject(val.toString());\n-                                }\n-                            }, required);\n-\n-                        } else if (schemaTO.getType() == SchemaType.Date) {\n-                            panel = new DateFieldPanel(\"panel\",\n-                                    schemaTO.getName(), new Model() {\n-\n-                                @Override\n-                                public Serializable getObject() {\n-                                    DateFormat formatter = new SimpleDateFormat(\n-                                            schemaTO.getConversionPattern());\n-                                    Date date = new Date();\n-                                    try {\n-                                        String dateValue = (String) item.getModelObject();\n-                                        //Default value:yyyy-MM-dd\n-                                        if (!dateValue.equals(\"\")) {\n-                                            date = formatter.parse(dateValue);\n-                                        } else {\n-                                            date = null;\n+                        switch (schemaTO.getType()) {\n+                            case Boolean:\n+                                panel = new AjaxCheckBoxPanel(\n+                                        \"panel\", schemaTO.getName(), new Model() {\n+\n+                                    @Override\n+                                    public Serializable getObject() {\n+                                        return (String) item.getModelObject();\n+                                    }\n+\n+                                    @Override\n+                                    public void setObject(Serializable object) {\n+                                        Boolean val = (Boolean) object;\n+                                        item.setModelObject(val.toString());\n+                                    }\n+                                }, required);\n+                                break;\n+\n+                            case Date:\n+                                panel = new DateFieldPanel(\"panel\",\n+                                        schemaTO.getName(), new Model() {\n+\n+                                    @Override\n+                                    public Serializable getObject() {\n+                                        DateFormat formatter = new SimpleDateFormat(\n+                                                schemaTO.getConversionPattern());\n+                                        Date date = new Date();\n+                                        try {\n+                                            String dateValue = (String) item.getModelObject();\n+                                            //Default value:yyyy-MM-dd\n+                                            if (!dateValue.equals(\"\")) {\n+                                                date = formatter.parse(dateValue);\n+                                            } else {\n+                                                date = null;\n+                                            }\n+                                        } catch (ParseException e) {\n+                                            LOG.error(\"While parsing a date\", e);\n                                         }\n-                                    } catch (ParseException e) {\n-                                        LOG.error(\"While parsing a date\", e);\n+                                        return date;\n+                                    }\n+\n+                                    @Override\n+                                    public void setObject(Serializable object) {\n+                                        Date date = (Date) object;\n+                                        Format formatter = new SimpleDateFormat(\n+                                                schemaTO.getConversionPattern());\n+                                        String val = formatter.format(date);\n+                                        item.setModelObject(val);\n+                                    }\n+                                }, schemaTO.getConversionPattern(),\n+                                        required,\n+                                        schemaTO.isReadonly(), form);\n+                                break;\n+\n+                            case Enum:\n+                                panel = new AjaxDropDownChoicePanel(\n+                                        \"panel\",\n+                                        schemaTO.getName(),\n+                                        new Model() {\n+\n+                                            @Override\n+                                            public Serializable getObject() {\n+                                                return (String) item.getModelObject();\n+                                            }\n+\n+                                            @Override\n+                                            public void setObject(Serializable object) {\n+                                                item.setModelObject((String) object);\n+                                            }\n+                                        },\n+                                        Arrays.asList(schemaTO.getEnumerationValues().split(Schema.enumValuesSeparator)),\n+                                        new ChoiceRenderer(),\n+                                        required);\n+                                break;\n+\n+                            default:\n+\n+                                panel = new AjaxTextFieldPanel(\n+                                        \"panel\", schemaTO.getName(), new Model() {\n+\n+                                    @Override\n+                                    public Serializable getObject() {\n+                                        return (String) item.getModelObject();\n+                                    }\n+\n+                                    @Override\n+                                    public void setObject(Serializable object) {\n+                                        item.setModelObject((String) object);\n                                     }\n-                                    return date;\n-                                }\n-\n-                                @Override\n-                                public void setObject(Serializable object) {\n-                                    Date date = (Date) object;\n-                                    Format formatter = new SimpleDateFormat(\n-                                            schemaTO.getConversionPattern());\n-                                    String val = formatter.format(date);\n-                                    item.setModelObject(val);\n-                                }\n-                            }, schemaTO.getConversionPattern(),\n-                                    required,\n-                                    schemaTO.isReadonly(), form);\n-                        } else {\n-                            /*Common other cases :\n-                            java.lang.String,java.lang.Double, java.lang.Long*/\n-\n-                            panel = new AjaxTextFieldPanel(\"panel\", schemaTO.getName(), new Model() {\n-\n-                                @Override\n-                                public Serializable getObject() {\n-                                    return (String) item.getModelObject();\n-                                }\n-\n-                                @Override\n-                                public void setObject(Serializable object) {\n-                                    item.setModelObject((String) object);\n-                                }\n-                            }, required);\n+                                }, required);\n                         }\n \n                         item.add(panel);"},{"sha":"313c0e2e5d351eac31eeb3edd2b6420c7ba16864","filename":"console/src/main/java/org/syncope/console/pages/Schema.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchema.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.console.pages;\n \n+import org.syncope.console.SchemaModalPageFactory;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Iterator;\n@@ -83,6 +84,8 @@ private enum SchemaVirtualType {\n \n     private static final int WIN_HEIGHT = 200;\n \n+    public static String enumValuesSeparator = \";\";\n+\n     @SpringBean\n     private SchemaRestClient restClient;\n "},{"sha":"ebd3de207fc9d896776c56b131fa918fd8290b6e","filename":"console/src/main/java/org/syncope/console/pages/SchemaModalPage.java","status":"modified","additions":62,"deletions":6,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -21,7 +21,9 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+import org.apache.wicket.Component;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n@@ -33,11 +35,11 @@\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.util.string.Strings;\n import org.syncope.client.to.SchemaTO;\n-import org.syncope.types.SchemaType;\n import org.apache.wicket.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.markup.html.form.CheckBox;\n import org.syncope.client.AbstractBaseBean;\n+import org.syncope.types.SchemaType;\n \n /**\n  * Modal window with Schema form.\n@@ -52,23 +54,26 @@ public SchemaModalPage(String kind) {\n     public void setSchemaModalPage(\n             final BasePage basePage,\n             final ModalWindow window,\n-            AbstractBaseBean schema,\n+            AbstractBaseBean schemaTO,\n             final boolean createFlag) {\n \n-        if (schema == null) {\n-            schema = new SchemaTO();\n-        }\n+        final SchemaTO schema =\n+                schemaTO == null ? new SchemaTO() : (SchemaTO) schemaTO;\n \n         final Form schemaForm = new Form(\"SchemaForm\");\n \n         schemaForm.setModel(new CompoundPropertyModel(schema));\n+        schemaForm.setOutputMarkupId(Boolean.TRUE);\n+\n \n         final TextField name = new TextField(\"name\");\n+        addEmptyBehaviour(name, \"onblur\");\n         name.setRequired(true);\n \n         name.setEnabled(createFlag);\n \n         final TextField conversionPattern = new TextField(\"conversionPattern\");\n+        addEmptyBehaviour(conversionPattern, \"onblur\");\n \n         final ArrayList<String> validatorsList = new ArrayList<String>();\n         validatorsList.add(\"org.syncope.core.persistence.validation\"\n@@ -81,10 +86,44 @@ public void setSchemaModalPage(\n                 new PropertyModel(schema, \"validatorClass\"),\n                 validatorsList);\n \n+        addEmptyBehaviour(validatorClass, \"onblur\");\n+\n         final DropDownChoice type = new DropDownChoice(\n-                \"type\", Arrays.asList(SchemaType.values()));\n+                \"type\",\n+                Arrays.asList(SchemaType.Enum.values()));\n         type.setRequired(true);\n \n+        final TextField enumerationValues = new TextField(\"enumerationValues\");\n+\n+        if (schema != null\n+                && SchemaType.Enum.equals(((SchemaTO) schema).getType())) {\n+            enumerationValues.setRequired(Boolean.TRUE);\n+            enumerationValues.setEnabled(Boolean.TRUE);\n+        } else {\n+            enumerationValues.setRequired(Boolean.FALSE);\n+            enumerationValues.setEnabled(Boolean.FALSE);\n+        }\n+\n+        type.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                if (SchemaType.Enum.ordinal()\n+                        == Integer.parseInt(type.getValue())) {\n+                    enumerationValues.setRequired(Boolean.TRUE);\n+                    enumerationValues.setEnabled(Boolean.TRUE);\n+                    enumerationValues.getModel().setObject(\n+                            ((SchemaTO) schema).getEnumerationValues());\n+                } else {\n+                    enumerationValues.setRequired(Boolean.FALSE);\n+                    enumerationValues.setEnabled(Boolean.FALSE);\n+                    enumerationValues.getModel().setObject(null);\n+                }\n+\n+                target.addComponent(schemaForm);\n+            }\n+        });\n+\n         final AutoCompleteTextField mandatoryCondition =\n                 new AutoCompleteTextField(\"mandatoryCondition\") {\n \n@@ -108,11 +147,16 @@ protected Iterator getChoices(String input) {\n                     }\n                 };\n \n+        addEmptyBehaviour(mandatoryCondition, \"onblur\");\n+\n         final CheckBox multivalue = new CheckBox(\"multivalue\");\n+        addEmptyBehaviour(multivalue, \"onchange\");\n \n         final CheckBox readonly = new CheckBox(\"readonly\");\n+        addEmptyBehaviour(readonly, \"onchange\");\n \n         final CheckBox uniqueConstraint = new CheckBox(\"uniqueConstraint\");\n+        addEmptyBehaviour(uniqueConstraint, \"onchange\");\n \n         final AjaxButton submit = new IndicatingAjaxButton(\n                 \"submit\", new Model(getString(\"submit\"))) {\n@@ -127,6 +171,8 @@ protected void onSubmit(AjaxRequestTarget target, Form form) {\n                     return;\n                 }\n \n+                LOG.error(\"aaaaaaaaaaa {}\", schemaTO);\n+\n                 if (createFlag) {\n                     restClient.createSchema(kind, schemaTO);\n                 } else {\n@@ -162,6 +208,7 @@ protected void onError(AjaxRequestTarget target, Form form) {\n         schemaForm.add(conversionPattern);\n         schemaForm.add(validatorClass);\n         schemaForm.add(type);\n+        schemaForm.add(enumerationValues);\n         schemaForm.add(mandatoryCondition);\n         schemaForm.add(multivalue);\n         schemaForm.add(readonly);\n@@ -171,4 +218,13 @@ protected void onError(AjaxRequestTarget target, Form form) {\n \n         add(schemaForm);\n     }\n+\n+    private void addEmptyBehaviour(Component component, String event) {\n+        component.add(new AjaxFormComponentUpdatingBehavior(event) {\n+\n+            @Override\n+            protected void onUpdate(AjaxRequestTarget art) {\n+            }\n+        });\n+    }\n }"},{"sha":"de6c4e3155dfac6542bdd0f3397b899f016ce81d","filename":"console/src/main/java/org/syncope/console/pages/UserModalPage.java","status":"modified","additions":91,"deletions":78,"changes":169,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -22,6 +22,7 @@\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.Date;\n import java.util.HashSet;\n@@ -79,6 +80,7 @@\n import org.syncope.console.rest.UserRestClient;\n import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n import org.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.syncope.console.wicket.markup.html.form.DateFieldPanel;\n import org.syncope.console.wicket.markup.html.form.DerivedAttributesForm;\n@@ -193,86 +195,97 @@ protected void populateItem(final ListItem item) {\n                                     required = true;\n                                 }\n \n-                                if (schemaTO.getType() == SchemaType.String) {\n-                                    panel = new AjaxTextFieldPanel(\"panel\",\n-                                            schemaTO.getName(), new Model() {\n-\n-                                        @Override\n-                                        public Serializable getObject() {\n-                                            return (String) item.getModelObject();\n-                                        }\n-\n-                                        @Override\n-                                        public void setObject(Serializable object) {\n-                                            item.setModelObject((String) object);\n-                                        }\n-                                    }, required, schemaTO.isReadonly());\n-                                } else if (schemaTO.getType() == SchemaType.Boolean) {\n-                                    panel = new AjaxCheckBoxPanel(\"panel\",\n-                                            schemaTO.getName(), new Model() {\n-\n-                                        @Override\n-                                        public Serializable getObject() {\n-                                            return (String) item.getModelObject();\n-                                        }\n-\n-                                        @Override\n-                                        public void setObject(Serializable object) {\n-                                            Boolean val = (Boolean) object;\n-                                            item.setModelObject(val.toString());\n-                                        }\n-                                    }, required, schemaTO.isReadonly());\n-\n-                                } else if (schemaTO.getType() == SchemaType.Date) {\n-                                    panel = new DateFieldPanel(\"panel\",\n-                                            schemaTO.getName(), new Model() {\n-\n-                                        @Override\n-                                        public Serializable getObject() {\n-                                            DateFormat formatter =\n-                                                    new SimpleDateFormat(\n-                                                    schemaTO.getConversionPattern());\n-                                            Date date = new Date();\n-                                            try {\n-                                                String dateValue = (String) item.getModelObject();\n-                                                //Default value:yyyy-MM-dd\n-                                                if (!dateValue.equals(\"\")) {\n-                                                    date = formatter.parse(\n-                                                            dateValue);\n-                                                } else {\n-                                                    date = null;\n+                                switch (schemaTO.getType()) {\n+                                    case Boolean:\n+                                        panel = new AjaxCheckBoxPanel(\"panel\",\n+                                                schemaTO.getName(), new Model() {\n+\n+                                            @Override\n+                                            public Serializable getObject() {\n+                                                return (String) item.getModelObject();\n+                                            }\n+\n+                                            @Override\n+                                            public void setObject(Serializable object) {\n+                                                Boolean val = (Boolean) object;\n+                                                item.setModelObject(val.toString());\n+                                            }\n+                                        }, required, schemaTO.isReadonly());\n+\n+                                        break;\n+                                    case Date:\n+                                        panel = new DateFieldPanel(\"panel\",\n+                                                schemaTO.getName(), new Model() {\n+\n+                                            @Override\n+                                            public Serializable getObject() {\n+                                                DateFormat formatter =\n+                                                        new SimpleDateFormat(\n+                                                        schemaTO.getConversionPattern());\n+                                                Date date = new Date();\n+                                                try {\n+                                                    String dateValue = (String) item.getModelObject();\n+                                                    //Default value:yyyy-MM-dd\n+                                                    if (!dateValue.equals(\"\")) {\n+                                                        date = formatter.parse(\n+                                                                dateValue);\n+                                                    } else {\n+                                                        date = null;\n+                                                    }\n+                                                } catch (ParseException e) {\n+                                                    LOG.error(\"While parsing date\", e);\n                                                 }\n-                                            } catch (ParseException e) {\n-                                                LOG.error(\"While parsing date\", e);\n+                                                return date;\n+                                            }\n+\n+                                            @Override\n+                                            public void setObject(Serializable object) {\n+                                                Date date = (Date) object;\n+                                                Format formatter = new SimpleDateFormat(\n+                                                        schemaTO.getConversionPattern());\n+                                                String val = formatter.format(date);\n+                                                item.setModelObject(val);\n+                                            }\n+                                        }, schemaTO.getConversionPattern(),\n+                                                required,\n+                                                schemaTO.isReadonly(), form);\n+                                        break;\n+\n+                                    case Enum:\n+                                        panel = new AjaxDropDownChoicePanel(\n+                                                \"panel\",\n+                                                schemaTO.getName(),\n+                                                new Model() {\n+\n+                                                    @Override\n+                                                    public Serializable getObject() {\n+                                                        return (String) item.getModelObject();\n+                                                    }\n+\n+                                                    @Override\n+                                                    public void setObject(Serializable object) {\n+                                                        item.setModelObject((String) object);\n+                                                    }\n+                                                },\n+                                                Arrays.asList(schemaTO.getEnumerationValues().split(Schema.enumValuesSeparator)),\n+                                                new ChoiceRenderer(),\n+                                                required);\n+                                        break;\n+\n+                                    default:\n+                                        panel = new AjaxTextFieldPanel(\"panel\",\n+                                                schemaTO.getName(), new Model() {\n+\n+                                            @Override\n+                                            public Serializable getObject() {\n+                                                return (String) item.getModelObject();\n+                                            }\n+\n+                                            @Override\n+                                            public void setObject(Serializable object) {\n+                                                item.setModelObject((String) object);\n                                             }\n-                                            return date;\n-                                        }\n-\n-                                        @Override\n-                                        public void setObject(Serializable object) {\n-                                            Date date = (Date) object;\n-                                            Format formatter = new SimpleDateFormat(\n-                                                    schemaTO.getConversionPattern());\n-                                            String val = formatter.format(date);\n-                                            item.setModelObject(val);\n-                                        }\n-                                    }, schemaTO.getConversionPattern(),\n-                                            required,\n-                                            schemaTO.isReadonly(), form);\n-                                } else {\n-                                    panel = new AjaxTextFieldPanel(\"panel\",\n-                                            schemaTO.getName(), new Model() {\n-\n-                                        @Override\n-                                        public Serializable getObject() {\n-                                            return (String) item.getModelObject();\n-                                        }\n-\n-                                        @Override\n-                                        public void setObject(Serializable object) {\n-                                            item.setModelObject((String) object);\n-                                        }\n-                                    }, required, schemaTO.isReadonly());\n+                                        }, required, schemaTO.isReadonly());\n                                 }\n \n                                 item.add(panel);"},{"sha":"faad3cb91323dd050b070bd25afbf9846d2bcb6b","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/DerivedAttributesForm.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDerivedAttributesForm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDerivedAttributesForm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDerivedAttributesForm.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -64,7 +64,7 @@ public <T extends AbstractAttributableTO> Form build(\n \n         final WebMarkupContainer attributesContainer =\n                 new WebMarkupContainer(\"derAttrContainer\");\n-\n+        \n         attributesContainer.setOutputMarkupId(true);\n         add(attributesContainer);\n "},{"sha":"92418a216e8758cba8879727b7b586e517eb370d","filename":"console/src/main/resources/org/syncope/console/pages/SchemaModalPage.html","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.html?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -51,6 +51,10 @@\n                 <input type=\"text\" class=\"text ui-widget-content ui-corner-all\"\n                        id=\"mandatoryCondition\" wicket:id=\"mandatoryCondition\"/>\n \n+                <label for=\"enumerationValues\"><wicket:message key=\"enumerationValues\"/></label>\n+                <input type=\"text\" class=\"text ui-widget-content ui-corner-all\"\n+                       id=\"enumerationValues\" wicket:id=\"enumerationValues\"/>\n+\n                 <label for=\"multivalue\" class=\"onerowlabel\"><wicket:message key=\"multivalue\"/></label>\n                 <input type=\"checkbox\" id=\"multivalue\" wicket:id=\"multivalue\" class=\"onerowcheckbox\"/>\n "},{"sha":"2953d379246f94b26ab0c3cd2912b480b52551be","filename":"console/src/main/resources/org/syncope/console/pages/SchemaModalPage.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.properties?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -5,6 +5,7 @@ tab4=User derived attributes\n create_attribute=Create new attribute\n required_alert=All form fields are required.\n mandatoryCondition=Mandatory condition\n+enumerationValues= Accepted values\n uniqueConstraint=Unique constraint\n multivalue=Multivalue\n multivalueAndUniqueConstr.validation='Multivalue' and 'Unique constraint' options can't be both checked"},{"sha":"40c2d2aa7e82188f524b318baba56b9667abf369","filename":"console/src/main/resources/org/syncope/console/pages/SchemaModalPage_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage_it.properties?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -5,6 +5,7 @@ tab4=Attributi utenti derivati\n create_attribute=Crea nuovo attributo\n required_alert=Tutti i campi sono richiesti\n mandatoryCondition=Vincolo d'obbligatoriet\\u00e0\n+enumerationValues= Valori ammessi\n multivalue=Multivalore\n name=Nome\n type=Tipo"},{"sha":"d4e2a5b66c2d87e9421cf98f659da7ec369b7fb6","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -41,8 +41,8 @@ public <T extends AbstractAttrValue> T addValue(final String value,\n             attrValue = (T) attributableUtil.newAttributeValue();\n         }\n \n-        attrValue = getSchema().getValidator().getValue(value, attrValue);\n         attrValue.setAttribute(this);\n+        attrValue = getSchema().getValidator().getValue(value, attrValue);\n \n         if (getSchema().isUniqueConstraint()) {\n             setUniqueValue(attrValue);"},{"sha":"eefb2e28bc2cd321cc72dfe7e7ec492c5ea383c2","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttrValue.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -105,10 +105,6 @@ public String getValueAsString() {\n \n         switch (getAttribute().getSchema().getType()) {\n \n-            case String:\n-                result = getStringValue();\n-                break;\n-\n             case Boolean:\n                 result = getBooleanValue().toString();\n                 break;\n@@ -126,8 +122,12 @@ public String getValueAsString() {\n             case Date:\n                 result = getAttribute().getSchema().getFormatter().\n                         format(getDateValue());\n+                break;\n \n             default:\n+                // applied to String and Enum SchemaType\n+                result = getStringValue();\n+                break;\n         }\n \n         return result;"},{"sha":"8c56fc75febb4d56217e2c652ef864d628c4000a","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -55,6 +55,8 @@ protected DecimalFormat initialValue() {\n                 }\n             };\n \n+    public static String enumValuesSeparator = \";\";\n+\n     @Id\n     private String name;\n \n@@ -86,6 +88,9 @@ protected DecimalFormat initialValue() {\n     @Column(nullable = true)\n     private String validatorClass;\n \n+    @Column(nullable = true)\n+    private String enumerationValues;\n+\n     @Transient\n     private AbstractValidator validator;\n \n@@ -182,6 +187,14 @@ public void setValidatorClass(String validatorClass) {\n         this.validatorClass = validatorClass;\n     }\n \n+    public String getEnumerationValues() {\n+        return enumerationValues;\n+    }\n+\n+    public void setEnumerationValues(String enumerationValues) {\n+        this.enumerationValues = enumerationValues;\n+    }\n+\n     public String getConversionPattern() {\n         if (!getType().isConversionPatternNeeded()) {\n             LOG.debug(\"Conversion pattern is not needed: {}'s type is {}\","},{"sha":"c8d0ad514ebf8d375c42926dcdca35e176b0c586","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -336,6 +336,7 @@ private String getFieldName(final SchemaType type) {\n                 break;\n \n             case String:\n+            case Enum:\n                 result = \"stringvalue\";\n                 break;\n \n@@ -419,7 +420,8 @@ private String getQuery(final AttributeCond cond,\n                 break;\n \n             case LIKE:\n-                if (schema.getType() == SchemaType.String) {\n+                if (schema.getType() == SchemaType.String\n+                        || schema.getType() == SchemaType.Enum) {\n                     query.append(\"' AND \").\n                             append(getFieldName(schema.getType()));\n                     if (not) {"},{"sha":"f6037ab7651959a7f484b48618d613b97d53765a","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/AbstractValidator.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAbstractValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAbstractValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAbstractValidator.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -17,11 +17,19 @@\n import java.text.DecimalFormat;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n public abstract class AbstractValidator implements Validator {\n \n+    /*\n+     * Logger\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(\n+            AbstractValidator.class);\n+\n     protected final AbstractSchema schema;\n \n     public AbstractValidator(final AbstractSchema schema) {\n@@ -48,6 +56,7 @@ private <T extends AbstractAttrValue> T parseValue(final String value,\n         switch (schema.getType()) {\n \n             case String:\n+            case Enum:\n                 attributeValue.setStringValue(value);\n                 break;\n "},{"sha":"e1ea2b923ebffde7350443cbad87ce42e74c52f3","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/BasicValidator.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -16,6 +16,7 @@\n \n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.syncope.types.SchemaType;\n \n public class BasicValidator extends AbstractValidator {\n \n@@ -27,5 +28,25 @@ public BasicValidator(AbstractSchema schema) {\n     @Override\n     protected void doValidate(AbstractAttrValue attributeValue)\n             throws InvalidAttrValueException {\n+\n+        if (SchemaType.Enum.equals(schema.getType())) {\n+            final String[] enumeration =\n+                    schema.getEnumerationValues().split(\n+                    AbstractSchema.enumValuesSeparator);\n+\n+            final String value = attributeValue.getValueAsString();\n+\n+            Boolean found = Boolean.FALSE;\n+\n+            for (int i = 0; i < enumeration.length && !found; i++) {\n+                if (enumeration[i].trim().equals(value)) {\n+                    found = Boolean.TRUE;\n+                }\n+            }\n+\n+            if (!found) {\n+                throw new InvalidAttrValueException(attributeValue);\n+            }\n+        }\n     }\n }"},{"sha":"30bd4823f9df3feb2c12c702f851d987c64a2c3e","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SchemaValidator.java","status":"modified","additions":38,"deletions":18,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -18,6 +18,7 @@\n import javax.validation.ConstraintValidatorContext;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.types.EntityViolationType;\n+import org.syncope.types.SchemaType;\n \n public class SchemaValidator extends AbstractValidator\n         implements ConstraintValidator<SchemaCheck, AbstractSchema> {\n@@ -31,26 +32,45 @@ public boolean isValid(final AbstractSchema object,\n             final ConstraintValidatorContext context) {\n \n         boolean isValid = false;\n+        EntityViolationType violation = null;\n \n-        if (object == null) {\n-            isValid = true;\n-        } else {\n-            isValid = object.isMultivalue()\n-                    ? !object.isUniqueConstraint() : true;\n-\n-            if (!isValid) {\n-                LOG.error(object + \" cannot be multivalue and have \"\n-                        + \"unique constraint at the same time\");\n-\n-                context.disableDefaultConstraintViolation();\n-                context.buildConstraintViolationWithTemplate(\n-                        EntityViolationType.MultivalueAndUniqueConstraint.\n-                        toString()).\n-                        addNode(object.toString()).\n-                        addConstraintViolation();\n+        try {\n+            if (object == null) {\n+                isValid = true;\n+            } else {\n+                isValid = !object.getType().equals(SchemaType.Enum)\n+                        || object.getEnumerationValues() != null;\n+\n+                if (!isValid) {\n+                    violation =\n+                            EntityViolationType.InvalidSchemaTypeSpecification;\n+\n+                    throw new Exception(object\n+                            + \" miss enumeration values\");\n+                }\n+\n+                isValid = object.isMultivalue()\n+                        ? !object.isUniqueConstraint() : true;\n+\n+                if (!isValid) {\n+                    violation =\n+                            EntityViolationType.MultivalueAndUniqueConstraint;\n+\n+                    throw new Exception(object\n+                            + \" cannot be multivalue and have \"\n+                            + \"unique constraint at the same time\");\n+                }\n             }\n-        }\n+        } catch (Exception e) {\n+            LOG.error(e.getMessage());\n \n-        return isValid;\n+            context.disableDefaultConstraintViolation();\n+            context.buildConstraintViolationWithTemplate(\n+                    violation.toString()).\n+                    addNode(object.toString()).\n+                    addConstraintViolation();\n+        } finally {\n+            return isValid;\n+        }\n     }\n }"},{"sha":"28b64cbdaf753aa372d263205824070346fbe8db","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -27,10 +27,8 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.SchemaTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.rest.data.SchemaDataBinder;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.util.AttributableUtil;\n \n@@ -41,9 +39,6 @@ public class SchemaController extends AbstractController {\n     @Autowired\n     private SchemaDAO schemaDAO;\n \n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n-\n     @Autowired\n     private SchemaDataBinder schemaDataBinder;\n "},{"sha":"32defb2f8035eb17a5ca0c2372b8273580f0882a","filename":"core/src/test/java/org/syncope/core/persistence/dao/AttrTest.java","status":"modified","additions":43,"deletions":1,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -46,7 +46,7 @@ public class AttrTest extends AbstractTest {\n     public final void findAll() {\n         List<UAttr> list = attrDAO.findAll(UAttr.class);\n         assertEquals(\"did not get expected number of attributes \",\n-                8, list.size());\n+                9, list.size());\n     }\n \n     @Test\n@@ -112,6 +112,48 @@ public final void save()\n         assertEquals(attribute, actual);\n     }\n \n+    @Test\n+    public final void checkForEnumType()\n+            throws ClassNotFoundException {\n+\n+        SyncopeUser user = userDAO.find(1L);\n+\n+        USchema gender = userSchemaDAO.find(\"gender\", USchema.class);\n+        assertNotNull(gender);\n+        assertNotNull(gender.getType());\n+        assertNotNull(gender.getEnumerationValues());\n+\n+        UAttr attribute = new UAttr();\n+        attribute.setSchema(gender);\n+        attribute.setOwner(user);\n+        user.addAttribute(attribute);\n+\n+        Exception thrown = null;\n+\n+        try {\n+            attribute.addValue(\"A\", AttributableUtil.USER);\n+        } catch (ValidationException e) {\n+            thrown = e;\n+        }\n+        assertNotNull(\"validation exception expected here \", thrown);\n+\n+        attribute.addValue(\"M\", AttributableUtil.USER);\n+\n+        InvalidEntityException iee = null;\n+        try {\n+            attribute = attrDAO.save(attribute);\n+        } catch (InvalidEntityException e) {\n+            iee = e;\n+        }\n+        assertNull(iee);\n+\n+        UAttr actual = attrDAO.find(attribute.getId(), UAttr.class);\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(attribute, actual);\n+        assertEquals(actual.getSchema(),gender);\n+        assertEquals(actual.getValues().size(),1);\n+    }\n+\n     @Test\n     public final void validateAndSave() {\n         final USchema emailSchema ="},{"sha":"ce3463ea1af4c5a59d6e3e7f2e2340e14d42ecc4","filename":"core/src/test/java/org/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -24,6 +24,7 @@\n import org.syncope.core.persistence.beans.role.RSchema;\n import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.role.RAttr;\n import org.syncope.core.util.AttributableUtil;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n@@ -38,7 +39,7 @@ public class SchemaTest extends AbstractTest {\n     @Test\n     public final void findAll() {\n         List<USchema> userList = schemaDAO.findAll(USchema.class);\n-        assertEquals(10, userList.size());\n+        assertEquals(11, userList.size());\n \n         List<RSchema> roleList = schemaDAO.findAll(RSchema.class);\n         assertEquals(4, roleList.size());\n@@ -98,6 +99,29 @@ public final void saveNonValid() {\n         schemaDAO.save(attributeSchema);\n     }\n \n+    @Test\n+    public final void checkForEnumType() {\n+        RSchema schema = new RSchema();\n+        schema.setType(SchemaType.Enum);\n+        schema.setName(\"color\");\n+\n+        Throwable ex = null;\n+        try {\n+            schemaDAO.save(schema);\n+        } catch (Throwable t) {\n+            ex = t;\n+        }\n+        assertNotNull(ex);\n+\n+        schema.setEnumerationValues(\n+                \"red\" + AbstractSchema.enumValuesSeparator + \"yellow\");\n+\n+        schemaDAO.save(schema);\n+\n+        RSchema actual = schemaDAO.find(schema.getName(), RSchema.class);\n+        assertNotNull(actual);\n+    }\n+\n     @Test\n     public final void delete() {\n         USchema schema = schemaDAO.find(\"username\", USchema.class);"},{"sha":"77f4386e063f41a98d19747b67bf0f1735576483","filename":"core/src/test/java/org/syncope/core/persistence/relationships/AttrTest.java","status":"modified","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -24,15 +24,30 @@\n import org.syncope.core.persistence.dao.AttrDAO;\n import org.syncope.core.persistence.dao.AttrValueDAO;\n import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.membership.MAttr;\n+import org.syncope.core.persistence.beans.membership.MSchema;\n+import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.dao.MembershipDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.util.AttributableUtil;\n+import org.syncope.types.SchemaType;\n \n @Transactional\n public class AttrTest extends AbstractTest {\n \n     @Autowired\n     private AttrDAO attributeDAO;\n+\n     @Autowired\n     private AttrValueDAO attributeValueDAO;\n \n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+\n+    @Autowired\n+    private MembershipDAO membershipDAO;\n+\n     @Test\n     public final void deleteAttribute() {\n         attributeDAO.delete(550L, UAttr.class);\n@@ -60,4 +75,37 @@ public final void deleteAttributeValue() {\n         assertEquals(attribute.getValues().size(),\n                 attributeValueNumber - 1);\n     }\n+\n+    @Test\n+    public final void checkForEnumType() {\n+        MSchema schema = new MSchema();\n+        schema.setType(SchemaType.Enum);\n+        schema.setName(\"color\");\n+        schema.setEnumerationValues(\n+                \"red\" + AbstractSchema.enumValuesSeparator + \"yellow\");\n+\n+        MSchema actualSchema = schemaDAO.save(schema);\n+        assertNotNull(actualSchema);\n+\n+        Membership membership = membershipDAO.find(1L);\n+        assertNotNull(membership);\n+\n+        MAttr attribute = new MAttr();\n+        attribute.setSchema(actualSchema);\n+        attribute.setOwner(membership);\n+        attribute.addValue(\"yellow\", AttributableUtil.MEMBERSHIP);\n+        membership.addAttribute(attribute);\n+\n+        MAttr actualAttribute = attributeDAO.save(attribute);\n+        assertNotNull(actualAttribute);\n+\n+        membership = membershipDAO.find(1L);\n+        assertNotNull(membership);\n+        assertNotNull(membership.getAttribute(schema.getName()));\n+        assertNotNull(membership.getAttribute(schema.getName()).getValues());\n+\n+        assertEquals(\n+                membership.getAttribute(schema.getName()).getValues().size(),\n+                1);\n+    }\n }"},{"sha":"63401b1eb6b6fa01a066cf74d2c791051b0d4b23","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -18,7 +18,6 @@\n import static org.junit.Assert.*;\n \n import java.util.List;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.client.HttpStatusCodeException;"},{"sha":"d02c4dcfe4f1b9919b723e1468e6f43ae8bea951","filename":"core/src/test/resources/content.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d314cc4fa3df1884f14c1542807950c05570686d/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=d314cc4fa3df1884f14c1542807950c05570686d","patch":"@@ -88,6 +88,9 @@\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"1\"/>\n     <USchema name=\"cool\" type=\"Boolean\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+    <USchema name=\"gender\" type=\"Enum\"\n+                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n+                enumerationValues=\"M;F\"/>\n \n     <RSchema name=\"icon\" type=\"String\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n@@ -131,6 +134,8 @@\n     <UAttrValue attribute_id=\"550\" id=\"22\" dateValue=\"2009-06-24\"/>\n     <UAttr id=\"560\" owner_id=\"4\" schema_name=\"cool\"/>\n     <UAttrValue attribute_id=\"560\" id=\"23\" booleanValue=\"1\"/>\n+    <UAttr id=\"561\" owner_id=\"4\" schema_name=\"gender\"/>\n+    <UAttrValue attribute_id=\"561\" id=\"24\" stringValue=\"M\"/>\n     \n     <RAttr id=\"600\" owner_id=\"1\" schema_name=\"icon\"/>\n     <RAttr id=\"700\" owner_id=\"2\" schema_name=\"icon\"/>"}]}