{"sha":"03fe1cd43606eb2bdaa90d241ee81017397a321f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAzZmUxY2Q0MzYwNmViMmJkYWE5MGQyNDFlZTgxMDE3Mzk3YTMyMWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-04-04T08:48:01Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-04-04T08:48:01Z"},"message":"Manually create branch 1_1_X from trunk copy\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1464359 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0c89055303e8af4553372227fd2de4fb01d0522c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0c89055303e8af4553372227fd2de4fb01d0522c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/03fe1cd43606eb2bdaa90d241ee81017397a321f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/03fe1cd43606eb2bdaa90d241ee81017397a321f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/03fe1cd43606eb2bdaa90d241ee81017397a321f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/03fe1cd43606eb2bdaa90d241ee81017397a321f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6a615b3317e18f274c04d777b922eae78c177a6a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6a615b3317e18f274c04d777b922eae78c177a6a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6a615b3317e18f274c04d777b922eae78c177a6a"},{"sha":"db4ac98b2ca1279f96c9dd818318853077216a93","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/db4ac98b2ca1279f96c9dd818318853077216a93","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/db4ac98b2ca1279f96c9dd818318853077216a93"}],"stats":{"total":126393,"additions":126393,"deletions":0},"files":[{"sha":"9d61da7af8a12766b15aaa37820ff244a89ff481","filename":".gitignore","status":"added","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/.gitignore","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/.gitignore","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.gitignore?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,7 @@\n+*.i??\n+.idea\n+.project\n+.classpath\n+.settings\n+eclipse-classes\n+target"},{"sha":"404f6355baa0738dad736dce035511c07c7c8545","filename":"CHANGES","status":"added","additions":259,"deletions":0,"changes":259,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/CHANGES","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/CHANGES","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/CHANGES?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,259 @@\n+Apache Syncope - CHANGES\n+Licensed under Apache License 2.0 - http://www.apache.org/licenses/LICENSE-2.0\n+--------------------------------------------------------------------------------\n+\n+Release Notes - Syncope - Version 1.0.7\n+================================================================================\n+** Bug\n+    * [SYNCOPE-332] - User List sorting via Derived attributes column doesn't work\n+    * [SYNCOPE-336] - Use a auto-complete textfield to chose for external attribute to be mapped during schema mapping creation\n+    * [SYNCOPE-339] - enum schema multivalue doesn't work\n+    * [SYNCOPE-341] - When deleting user schema, user list attributes head don't get updated\n+    * [SYNCOPE-342] - Console might fail to connect when core is deployed on virtual host\n+\n+** Task\n+    * [SYNCOPE-326] - Check console style (CSS) on Internet Explorer\n+\n+Release Notes - Syncope - Version 1.0.6\n+================================================================================\n+** Bug\n+    * [SYNCOPE-294] - User data not refreshed before edit\n+    * [SYNCOPE-301] - Status is not updated when synchronizing existing users\n+    * [SYNCOPE-307] - Virtual Attributes don't propagated in case of update during synchronization\n+    * [SYNCOPE-308] - When trying to update an user in status 'rejected', an error 500 is returned\n+    * [SYNCOPE-309] - Enter key not bound to user form submit\n+    * [SYNCOPE-310] - Palette elements get translated\n+    * [SYNCOPE-314] - User list sort based on username fails \n+    * [SYNCOPE-315] - \"Persistent\" feedback messages\n+    * [SYNCOPE-316] - Exception when creating connector instances with no bundles available\n+    * [SYNCOPE-325] - Stacktrace when accessing the Configuration page on JBoss\n+\n+** Improvement\n+    * [SYNCOPE-154] - Virtual attribute cache\n+    * [SYNCOPE-299] - Add \"row to display\" selector in resources\n+    * [SYNCOPE-311] - View user details during approval\n+\n+Release Notes - Syncope - Version 1.0.5\n+================================================================================\n+** Bug\n+    * [SYNCOPE-260] - Update propagation with null virtual attribute values\n+    * [SYNCOPE-267] - Possible NullPointerException into SchemaMappingUtil.getAccountIdValue()\n+    * [SYNCOPE-269] - AES encryption key defined in source code\n+    * [SYNCOPE-272] - During sync null attributes from template are considered\n+    * [SYNCOPE-273] - Role deletion inhibits notification update\n+    * [SYNCOPE-274] - Sync: during update with user template existing memberships break update\n+\n+** Improvement\n+    * [SYNCOPE-14] - Solve some warnings and verify if generated projects still work\n+    * [SYNCOPE-67] - Display all Execute Tasks (Propagation, Notification and Scheduled) and related Execution history items sortered in descending order\n+    * [SYNCOPE-201] - AbstractSchema enumerationValues and enumerationKeys too short\n+    * [SYNCOPE-255] - Hide Global Password/Account/Sync policy in security resource selections\n+    * [SYNCOPE-263] - Inject Recipient and Event variable in Velocity Email Notification Template\n+    * [SYNCOPE-264] - Email Notification Templates Documentation\n+    * [SYNCOPE-266] - Password should be provided again at resource subscription time if a \"Password\" schema mapping for that resource exists\n+    * [SYNCOPE-279] - Connector instance timeout\n+    * [SYNCOPE-283] - website edits\n+\n+Release Notes - Syncope - Version 1.0.4\n+================================================================================\n+** Bug\n+    * [SYNCOPE-232] - \"Connection is read-only\" during initialization\n+    * [SYNCOPE-233] - Authentication failure using password with special characters\n+    * [SYNCOPE-234] - Failures upgrading OpenJPA\n+    * [SYNCOPE-235] - CSVDir connector fails during check connection\n+    * [SYNCOPE-236] - Username and password not evaluated from user template during synchronization\n+    * [SYNCOPE-237] - Users with no entitlements cannot edit their own profile via console\n+    * [SYNCOPE-238] - With an high number of users, the admin console's 'TODO' tab is extremely slow\n+    * [SYNCOPE-240] - Missed CREATE status into org.apache.syncope.console.commons.StatusUtils.Status\n+\n+** Improvement\n+    * [SYNCOPE-239] - Add OSGi support for the client\n+    * [SYNCOPE-243] - Extended org.apache.rat exclude list for eclipse IDE\n+\n+Release Notes - Syncope - Version 1.0.3-incubating\n+================================================================================\n+** Bug\n+    * [SYNCOPE-214] - Error when trying to change readonly attribute\n+    * [SYNCOPE-217] - SyncopeUser.hasTokenExpired() can easily cause nullpointer exception\n+    * [SYNCOPE-220] - When running in embedded mode, CSVDir configuration shows unresolved ${urlencoded.csvdir.path} property\n+    * [SYNCOPE-224] - ActivitiWorkflowLoader called by SpringContextInitializer even when ActivitiUserWorkflowAdapter is not selected\n+    * [SYNCOPE-226] - Invalid passwords might fill up user's password history\n+    * [SYNCOPE-228] - When updating a role, assigned entitlements get lost\n+    * [SYNCOPE-230] - Sync user attributes using a long schema attribute as accountId\n+\n+Release Notes - Syncope - Version 1.0.2-incubating\n+================================================================================\n+** Bug\n+    * [SYNCOPE-193] - LDAP test connector status management does not work with synchronization\n+    * [SYNCOPE-194] - User attributes not sychronized properly from LDAP resource\n+    * [SYNCOPE-196] - Change Display Attributes button misaligned\n+    * [SYNCOPE-202] - MySQL and Oracle integration test hangs\n+    * [SYNCOPE-208] - Resources: schema mapping form shows incorrect external field names for SyncopeUserId and Password\n+    * [SYNCOPE-211] - Test org.apache.syncope.core.persistence.relationships.derAttrFromSpecialAttrs not enabled\n+\n+** Improvement\n+    * [SYNCOPE-124] - Prevent task execution request for running tasks\n+    * [SYNCOPE-195] - Make default sorting order consistent\n+    * [SYNCOPE-200] - Improve rat-plugin configuration\n+    * [SYNCOPE-207] - Clear test configuration in order to avoid AccountId/Password mapping explicitely valued\n+\n+Release Notes - Syncope - Version 1.0.1-incubating\n+================================================================================\n+** Bug\n+    * [SYNCOPE-182] - LICENSE & NOTICE: duplicated entries\n+    * [SYNCOPE-183] - 'Enforce mandatory constraints' not working\n+    * [SYNCOPE-185] - Could not delete an user with LDAP resource\n+    * [SYNCOPE-187] - When deleting an user, REST error doesn't bring error message to display\n+    * [SYNCOPE-191] - UI Error when sorting Synchronization Task executions\n+    * [SYNCOPE-192] - With trace level NONE notification tasks don't get updated\n+\n+** Improvement\n+    * [SYNCOPE-184] - LDAP test connector should provide status information\n+\n+** Task\n+    * [SYNCOPE-188] - Upgrade to Apache Wicket 1.5.8\n+\n+Release Notes - Syncope - Version 1.0.0-incubating\n+================================================================================\n+** Bug\n+    * [SYNCOPE-114] - Cannot edit an existing reportlet\n+    * [SYNCOPE-113] - Adding schema mapping to new resource requires changing connector\n+    * [SYNCOPE-115] - Spring warns about 'Ambiguous write methods found' for HttpClientParams\n+    * [SYNCOPE-118] - User list: 'propagationTOs' shouldn't be shown for display attributes\n+    * [SYNCOPE-117] - Empty default user list display attributes selection\n+    * [SYNCOPE-178] - Incomplete processing during synchronization / full reconciliation\n+    * [SYNCOPE-179] - Synchronization task executions not connected to owning task\n+    * [SYNCOPE-180] - After test execution spare files aren't all cleaned up\n+    * [SYNCOPE-181] - Missing entries in LICENSE & NOTICE for JQuery and CodeMirror\n+\n+** Improvement\n+    * [SYNCOPE-116] - Display execution date on Task and Report lists\n+\n+Release Notes - Syncope - Version 1.0.0-RC3-incubating\n+================================================================================\n+** Bug\n+    * [SYNCOPE-101] - Release process creates three source artifacts\n+    * [SYNCOPE-102] - Concurrent execution of the same report might lead to inconsistencies\n+    * [SYNCOPE-103] - Export function in console not working\n+    * [SYNCOPE-104] - UTF-8 characters do not appear in notification mails\n+    * [SYNCOPE-106] - User search based on Enum attribute doesn't work\n+    * [SYNCOPE-108] - Wrong de-provisioning in case of different role with the same externat resource\n+    * [SYNCOPE-111] - Failure during role attribute propagation\n+    * [SYNCOPE-112] - Resource test connection doesn't work fine\n+\n+** New Feature\n+    * [SYNCOPE-105] - Support Oracle WebLogic\n+\n+** Task\n+    * [SYNCOPE-109] - Support JBoss AS 7.1 with native OpenJPA\n+\n+Release Notes - Syncope - Version 1.0.0-RC2-incubating\n+================================================================================\n+** Bug\n+    * [SYNCOPE-83] - Recipients tab has all fields required when editing NotificationTask\n+    * [SYNCOPE-90] - GenerateToken class doesn't persist token to DB \n+    * [SYNCOPE-92] - Align parent POM version to latest release\n+    * [SYNCOPE-94] - When upgrading to HttpComponents Client 4.2, an Integration Test fails\n+    * [SYNCOPE-95] - Search doesn't work at all with production content.xml\n+    * [SYNCOPE-96] - Invalid authentication\n+    * [SYNCOPE-97] - Singleton RestTemplate\n+    * [SYNCOPE-99] - Problem editing notifications through console when Membership included in about\n+\n+** Improvement\n+    * [SYNCOPE-73] - Add staging site generation steps to release-process page\n+    * [SYNCOPE-74] - Make configuration params available in mail templates\n+    * [SYNCOPE-76] - Manage connector configuration property confidential\n+    * [SYNCOPE-88] - Support MS SQL Server\n+    * [SYNCOPE-89] - ReportTestITCase.executeAndExport hangs with oracle\n+    * [SYNCOPE-91] - More UserController RESTful method consistency\n+    * [SYNCOPE-98] - Method to check if token has expired\n+\n+Release Notes - Syncope - Version 1.0.0-RC1-incubating\n+================================================================================\n+\n+** Sub-task\n+    * [SYNCOPE-5] - Report configuration UI\n+    * [SYNCOPE-6] - Add Selenium test case for Report\n+\n+** Bug\n+    * [SYNCOPE-1] - ASF license headers not correct\n+    * [SYNCOPE-3] - Include NOTICE and LICENSE in all artifacts\n+    * [SYNCOPE-8] - ERROR: type \"clob\" does not exist\n+    * [SYNCOPE-10] - ConnInstance update doesn't imply related connector spring beans reloading\n+    * [SYNCOPE-11] - Editing a virtual attribute, error after submit\n+    * [SYNCOPE-12] - Error Selenium Tests\n+    * [SYNCOPE-16] - Update propagation fails in case of virtual attributes\n+    * [SYNCOPE-17] - Manage ConnID's configuration exception\n+    * [SYNCOPE-18] - Virtual attributes cannot be mapped as AccountId\n+    * [SYNCOPE-21] - ACT_HI_ACTINST:Unique index or primary key violation on non-empty database\n+    * [SYNCOPE-23] - TODO tab glitches\n+    * [SYNCOPE-27] - Reflection aware REST methods don't consider classes not explicitly implementing interfaces\n+    * [SYNCOPE-29] - Deployment on JBoss AS 7.1.0-Final does not work\n+    * [SYNCOPE-30] - Generation from archetype fails with error 'The defined artifact is not an archetype'\n+    * [SYNCOPE-31] - User status is not propagated during update\n+    * [SYNCOPE-32] - Missing SMALLINT type in ImportExport class\n+    * [SYNCOPE-33] - Virtual attribute missing during synchronization\n+    * [SYNCOPE-34] - No propagation fo virtual attributes retrieved/generated  during synchronization\n+    * [SYNCOPE-36] - User read fails in case of error during virtual attribute retrieving\n+    * [SYNCOPE-37] - Using console, create a new report feature does not work.\n+    * [SYNCOPE-39] - Notification task is not created during synchronization\n+    * [SYNCOPE-40] - Notification task error: small field size (htmlbody and txtbody)\n+    * [SYNCOPE-41] - NotificationManager: extend email.schema to derived and virtual attributes\n+    * [SYNCOPE-43] - Report does not keep a reference to its executions for a new report\n+    * [SYNCOPE-46] - Error: Search from console with LIKE condition\n+    * [SYNCOPE-47] - User resource set update fails during synchronization\n+    * [SYNCOPE-48] - Incorrect entitlement inheritance\n+    * [SYNCOPE-49] - Make utility maps returned by TO's methods read-only\n+    * [SYNCOPE-52] - Recipient search does not work\n+    * [SYNCOPE-54] - Notification e-mails can be sent forever\n+    * [SYNCOPE-58] - User request approval duplicates requests\n+    * [SYNCOPE-61] - WARNING: DB connection abandoned\n+    * [SYNCOPE-63] - PolicyBeanPanel doesn't work fine\n+    * [SYNCOPE-65] - Export/Import doesn't work with MySQL\n+    * [SYNCOPE-68] - Existing memberships removed during synchronization\n+    * [SYNCOPE-70] - Source artifacts include either 'syncope-1.0.0-RC1-incubating-source' and 'syncope-root-1.0.0-RC1-incubating-source' root dirs\n+    * [SYNCOPE-71] - Foreign key constraints missed with OpenJPA\n+    * [SYNCOPE-72] - JSP files don't contain the required ASF license header\n+    * [SYNCOPE-75] - User create fails providing more than one value for a multivalued attribute of type date\n+    * [SYNCOPE-77] - Save button not displayed in MembershipModalPage\n+    * [SYNCOPE-80] - Changin Rows to display value in Propagation Tasks does not take effect\n+    * [SYNCOPE-81] - NotificationTasks cannot be deleted\n+    * [SYNCOPE-82] - Propagation task executions don't get persisted\n+    * [SYNCOPE-84] - Projects generated with maven artifacts fail because of missing legal files\n+    * [SYNCOPE-85] - Replace dependency on openjpa-all\n+    * [SYNCOPE-86] - TaskExec instances are not associated with owning NotificationTask\n+\n+** Improvement\n+    * [SYNCOPE-14] - Solve some warnings and verify if generated projects still work\n+    * [SYNCOPE-22] - Improve virtual attribute value retrieving\n+    * [SYNCOPE-24] - Remove code replication managing resource schema mappings\n+    * [SYNCOPE-28] - SyncJobActions interface improvement\n+    * [SYNCOPE-38] - Todo icon is different compared to other icons.\n+    * [SYNCOPE-42] - Add the ability to delete a user by username via the REST API\n+    * [SYNCOPE-45] - Make all delete operations consistent in the REST API\n+    * [SYNCOPE-50] - Cache custom implementation classes\n+    * [SYNCOPE-53] - Make the whole UserTO object available in mail templates\n+    * [SYNCOPE-55] - Allow users to read roles assigned to them by membership\n+    * [SYNCOPE-60] - Display Excecutions in Synhronization Tasks with descendent order as default\n+    * [SYNCOPE-62] - Improve enum schema by giving the possibility to specify labels\n+    * [SYNCOPE-67] - Display all Execute Tasks (Propagation, Notification and Scheduled) and related Execution history items sortered in descending order\n+    * [SYNCOPE-69] - Increase compile performance\n+    * [SYNCOPE-74] - Make configuration params available in mail templates\n+\n+** New Feature\n+    * [SYNCOPE-7] - Role/Membership attributes propagation\n+\n+** Task\n+    * [SYNCOPE-2] - Fix NOTICE and LICENSE content\n+    * [SYNCOPE-4] - Report features\n+    * [SYNCOPE-9] - Update logo in console web UI\n+    * [SYNCOPE-13] - Migrate documentation from old wiki\n+    * [SYNCOPE-19] - Update Activiti to release 5.9 \n+    * [SYNCOPE-20] - Audit features\n+    * [SYNCOPE-25] - Update glassfish-it profile to latest glassfish 3.1.2\n+    * [SYNCOPE-35] - Update to Wicket 1.5.5 and verify selenium tests\n+    * [SYNCOPE-56] - Package rename\n+    * [SYNCOPE-64] - Issues fixed since last non-ASF release (0.7.1)\n+    * [SYNCOPE-66] - Add source distribution sub-module\n+\n+--------------------------------------------------------------------------------"},{"sha":"f2a19838854ec40ec281ede5caf9999ad0b3041d","filename":"LICENSE","status":"added","additions":241,"deletions":0,"changes":241,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/LICENSE","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/LICENSE","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/LICENSE?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,241 @@\n+\n+                                 Apache License\n+                           Version 2.0, January 2004\n+                        http://www.apache.org/licenses/\n+\n+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n+\n+   1. Definitions.\n+\n+      \"License\" shall mean the terms and conditions for use, reproduction,\n+      and distribution as defined by Sections 1 through 9 of this document.\n+\n+      \"Licensor\" shall mean the copyright owner or entity authorized by\n+      the copyright owner that is granting the License.\n+\n+      \"Legal Entity\" shall mean the union of the acting entity and all\n+      other entities that control, are controlled by, or are under common\n+      control with that entity. For the purposes of this definition,\n+      \"control\" means (i) the power, direct or indirect, to cause the\n+      direction or management of such entity, whether by contract or\n+      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n+      outstanding shares, or (iii) beneficial ownership of such entity.\n+\n+      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n+      exercising permissions granted by this License.\n+\n+      \"Source\" form shall mean the preferred form for making modifications,\n+      including but not limited to software source code, documentation\n+      source, and configuration files.\n+\n+      \"Object\" form shall mean any form resulting from mechanical\n+      transformation or translation of a Source form, including but\n+      not limited to compiled object code, generated documentation,\n+      and conversions to other media types.\n+\n+      \"Work\" shall mean the work of authorship, whether in Source or\n+      Object form, made available under the License, as indicated by a\n+      copyright notice that is included in or attached to the work\n+      (an example is provided in the Appendix below).\n+\n+      \"Derivative Works\" shall mean any work, whether in Source or Object\n+      form, that is based on (or derived from) the Work and for which the\n+      editorial revisions, annotations, elaborations, or other modifications\n+      represent, as a whole, an original work of authorship. For the purposes\n+      of this License, Derivative Works shall not include works that remain\n+      separable from, or merely link (or bind by name) to the interfaces of,\n+      the Work and Derivative Works thereof.\n+\n+      \"Contribution\" shall mean any work of authorship, including\n+      the original version of the Work and any modifications or additions\n+      to that Work or Derivative Works thereof, that is intentionally\n+      submitted to Licensor for inclusion in the Work by the copyright owner\n+      or by an individual or Legal Entity authorized to submit on behalf of\n+      the copyright owner. For the purposes of this definition, \"submitted\"\n+      means any form of electronic, verbal, or written communication sent\n+      to the Licensor or its representatives, including but not limited to\n+      communication on electronic mailing lists, source code control systems,\n+      and issue tracking systems that are managed by, or on behalf of, the\n+      Licensor for the purpose of discussing and improving the Work, but\n+      excluding communication that is conspicuously marked or otherwise\n+      designated in writing by the copyright owner as \"Not a Contribution.\"\n+\n+      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n+      on behalf of whom a Contribution has been received by Licensor and\n+      subsequently incorporated within the Work.\n+\n+   2. Grant of Copyright License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      copyright license to reproduce, prepare Derivative Works of,\n+      publicly display, publicly perform, sublicense, and distribute the\n+      Work and such Derivative Works in Source or Object form.\n+\n+   3. Grant of Patent License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      (except as stated in this section) patent license to make, have made,\n+      use, offer to sell, sell, import, and otherwise transfer the Work,\n+      where such license applies only to those patent claims licensable\n+      by such Contributor that are necessarily infringed by their\n+      Contribution(s) alone or by combination of their Contribution(s)\n+      with the Work to which such Contribution(s) was submitted. If You\n+      institute patent litigation against any entity (including a\n+      cross-claim or counterclaim in a lawsuit) alleging that the Work\n+      or a Contribution incorporated within the Work constitutes direct\n+      or contributory patent infringement, then any patent licenses\n+      granted to You under this License for that Work shall terminate\n+      as of the date such litigation is filed.\n+\n+   4. Redistribution. You may reproduce and distribute copies of the\n+      Work or Derivative Works thereof in any medium, with or without\n+      modifications, and in Source or Object form, provided that You\n+      meet the following conditions:\n+\n+      (a) You must give any other recipients of the Work or\n+          Derivative Works a copy of this License; and\n+\n+      (b) You must cause any modified files to carry prominent notices\n+          stating that You changed the files; and\n+\n+      (c) You must retain, in the Source form of any Derivative Works\n+          that You distribute, all copyright, patent, trademark, and\n+          attribution notices from the Source form of the Work,\n+          excluding those notices that do not pertain to any part of\n+          the Derivative Works; and\n+\n+      (d) If the Work includes a \"NOTICE\" text file as part of its\n+          distribution, then any Derivative Works that You distribute must\n+          include a readable copy of the attribution notices contained\n+          within such NOTICE file, excluding those notices that do not\n+          pertain to any part of the Derivative Works, in at least one\n+          of the following places: within a NOTICE text file distributed\n+          as part of the Derivative Works; within the Source form or\n+          documentation, if provided along with the Derivative Works; or,\n+          within a display generated by the Derivative Works, if and\n+          wherever such third-party notices normally appear. The contents\n+          of the NOTICE file are for informational purposes only and\n+          do not modify the License. You may add Your own attribution\n+          notices within Derivative Works that You distribute, alongside\n+          or as an addendum to the NOTICE text from the Work, provided\n+          that such additional attribution notices cannot be construed\n+          as modifying the License.\n+\n+      You may add Your own copyright statement to Your modifications and\n+      may provide additional or different license terms and conditions\n+      for use, reproduction, or distribution of Your modifications, or\n+      for any such Derivative Works as a whole, provided Your use,\n+      reproduction, and distribution of the Work otherwise complies with\n+      the conditions stated in this License.\n+\n+   5. Submission of Contributions. Unless You explicitly state otherwise,\n+      any Contribution intentionally submitted for inclusion in the Work\n+      by You to the Licensor shall be under the terms and conditions of\n+      this License, without any additional terms or conditions.\n+      Notwithstanding the above, nothing herein shall supersede or modify\n+      the terms of any separate license agreement you may have executed\n+      with Licensor regarding such Contributions.\n+\n+   6. Trademarks. This License does not grant permission to use the trade\n+      names, trademarks, service marks, or product names of the Licensor,\n+      except as required for reasonable and customary use in describing the\n+      origin of the Work and reproducing the content of the NOTICE file.\n+\n+   7. Disclaimer of Warranty. Unless required by applicable law or\n+      agreed to in writing, Licensor provides the Work (and each\n+      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+      implied, including, without limitation, any warranties or conditions\n+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n+      PARTICULAR PURPOSE. You are solely responsible for determining the\n+      appropriateness of using or redistributing the Work and assume any\n+      risks associated with Your exercise of permissions under this License.\n+\n+   8. Limitation of Liability. In no event and under no legal theory,\n+      whether in tort (including negligence), contract, or otherwise,\n+      unless required by applicable law (such as deliberate and grossly\n+      negligent acts) or agreed to in writing, shall any Contributor be\n+      liable to You for damages, including any direct, indirect, special,\n+      incidental, or consequential damages of any character arising as a\n+      result of this License or out of the use or inability to use the\n+      Work (including but not limited to damages for loss of goodwill,\n+      work stoppage, computer failure or malfunction, or any and all\n+      other commercial damages or losses), even if such Contributor\n+      has been advised of the possibility of such damages.\n+\n+   9. Accepting Warranty or Additional Liability. While redistributing\n+      the Work or Derivative Works thereof, You may choose to offer,\n+      and charge a fee for, acceptance of support, warranty, indemnity,\n+      or other liability obligations and/or rights consistent with this\n+      License. However, in accepting such obligations, You may act only\n+      on Your own behalf and on Your sole responsibility, not on behalf\n+      of any other Contributor, and only if You agree to indemnify,\n+      defend, and hold each Contributor harmless for any liability\n+      incurred by, or claims asserted against, such Contributor by reason\n+      of your accepting any such warranty or additional liability.\n+\n+   END OF TERMS AND CONDITIONS\n+\n+   APPENDIX: How to apply the Apache License to your work.\n+\n+      To apply the Apache License to your work, attach the following\n+      boilerplate notice, with the fields enclosed by brackets \"[]\"\n+      replaced with your own identifying information. (Don't include\n+      the brackets!)  The text should be enclosed in the appropriate\n+      comment syntax for the file format. We also recommend that a\n+      file or class name and description of purpose be included on the\n+      same \"printed page\" as the copyright notice for easier\n+      identification within third-party archives.\n+\n+   Copyright [yyyy] [name of copyright owner]\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+\n+==\n+\n+For jQuery (http://jquery.com/):\n+\n+jquery-ui.js\n+jquery-ui.css\n+\n+This is licensed under the terms of the MIT license.\n+\n+Permission is hereby granted, free of charge, to any person obtaining\n+a copy of this software and associated documentation files (the\n+\"Software\"), to deal in the Software without restriction, including\n+without limitation the rights to use, copy, modify, merge, publish,\n+distribute, sublicense, and/or sell copies of the Software, and to\n+permit persons to whom the Software is furnished to do so, subject to\n+the following conditions:\n+\n+The above copyright notice and this permission notice shall be\n+included in all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+\n+==\n+\n+For CodeMirror (http://codemirror.net/):\n+\n+codemirror.js\n+xmlpure.js\n+\n+This is licensed under the terms of the MIT license, see above.\n+\n+=="},{"sha":"705f64c34a1570a5a89611f655d379c40d7f5ab3","filename":"NOTICE","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/NOTICE","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/NOTICE","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/NOTICE?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,23 @@\n+Apache Syncope\n+Copyright 2012 The Apache Software Foundation\n+\n+This product includes software developed by:\n+The Apache Software Foundation (http://www.apache.org/).\n+\n+The following copyright notice(s) were affixed to portions of this code\n+with which this file is now or was at one time distributed.\n+\n+==\n+\n+This product includes the jQuery JavaScript Library.\n+Copyright (c) 2012 jQuery Foundation and other contributors, \n+jQuery is dually licensed under the MIT and GPL licenses, and\n+is included in this software distribution under the MIT license.\n+For details, see the jQuery web site: http://jquery.com/\n+\n+==\n+\n+This product includes the CodeMirror JavaScript component.\n+Copyright (C) 2012 by Marijn Haverbeke <marijnh@gmail.com>\n+\n+=="},{"sha":"5f319efc5e3eea3b5df340bbdb24060135bd73ac","filename":"archetype/pom.xml","status":"added","additions":186,"deletions":0,"changes":186,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fpom.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,186 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope</artifactId>\n+    <version>1.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Archetype</name>\n+  <description>Apache Syncope Archetype</description>\n+  <groupId>org.apache.syncope</groupId>\n+  <artifactId>syncope-archetype</artifactId>\n+  <packaging>maven-archetype</packaging>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>syncope.website</id>\n+      <name>Apache Syncope website</name>\n+      <url>${site.deploymentBaseUrl}/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+  \n+  <build>\n+    <extensions>\n+      <extension>\n+        <groupId>org.apache.maven.archetype</groupId>\n+        <artifactId>archetype-packaging</artifactId>\n+        <version>2.2</version>\n+      </extension>\n+    </extensions>\n+\n+    <pluginManagement>\n+      <plugins>\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-archetype-plugin</artifactId>\n+          <version>2.2</version>\n+          <extensions>true</extensions>\n+        </plugin>\n+      </plugins>\n+    </pluginManagement>\n+\n+    <plugins>\n+      <!-- Generate project's parent POM and dynamically sets Syncope version -->\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>xml-maven-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <phase>generate-resources</phase>\n+            <goals>\n+              <goal>transform</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <transformationSets>\n+            <transformationSet>\n+              <dir>${basedir}/src/main/resources</dir>\n+              <includes>\n+                <include>meta-pom.xml</include>\n+              </includes>\n+              <outputDir>${basedir}/src/main/resources/archetype-resources</outputDir>\n+              <stylesheet>${basedir}/src/main/resources/properties2pom.xsl</stylesheet>\n+              <parameters>\n+                <parameter>\n+                  <name>syncopeVersion</name>\n+                  <value>${project.version}</value>\n+                </parameter>\n+              </parameters>\n+              <outputProperties>\n+                <outputProperty>\n+                  <name>indent</name>\n+                  <value>yes</value>\n+                </outputProperty>\n+              </outputProperties>\n+              <fileMappers>\n+                <fileMapper implementation=\"org.codehaus.plexus.components.io.filemappers.RegExpFileMapper\">\n+                  <pattern>^meta-(.*)\\.xml$</pattern>\n+                  <replacement>$1.xml</replacement>\n+                </fileMapper>\n+              </fileMappers>\n+            </transformationSet>\n+          </transformationSets>\n+        </configuration>\n+      </plugin>\n+      \n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-pmd-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+\n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+      </resource>\n+      <resource>\n+        <directory>..</directory>\n+        <targetPath>META-INF</targetPath>\n+        <includes>\n+          <include>LICENSE</include>\n+          <include>NOTICE</include>\n+        </includes>\n+      </resource>\n+      \n+      <resource>\n+        <directory>../core/src/main/resources</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/core/src/main/resources</targetPath>\n+        <includes>\n+          <include>*.properties</include>\n+          <include>*.xml</include>\n+        </includes>\n+      </resource>\n+      <resource>\n+        <directory>../core/src/main/resources/META-INF</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/core/src/main/resources/META-INF</targetPath>\n+        <includes>\n+          <include>spring-persistence.xml</include>\n+        </includes>\n+      </resource>\n+      <resource>\n+        <directory>../core/src/main/webapp</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/core/src/main/webapp</targetPath>\n+        <excludes>\n+          <exclude>version.jsp</exclude>\n+        </excludes>\n+      </resource>\n+      <resource>\n+        <directory>../core/src/test/resources</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/core/src/test/resources</targetPath>\n+        <includes>\n+          <include>*.properties</include>\n+          <include>content.xml</include>\n+          <include>*.csv</include>\n+          <include>*.jsp</include>\n+        </includes>\n+      </resource>\n+\n+      <resource>\n+        <directory>../console/src/main/resources</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/console/src/main/resources</targetPath>\n+        <includes>\n+          <include>*.*</include>\n+        </includes>\n+      </resource>\n+      <resource>\n+        <directory>../console/src/main/webapp/WEB-INF</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/console/src/main/webapp/WEB-INF</targetPath>\n+      </resource>\n+      <resource>\n+        <directory>../console/src/test/resources</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/console/src/test/resources</targetPath>\n+        <includes>\n+          <include>configuration.properties</include>\n+        </includes>\n+      </resource>\n+    </resources>\n+  </build>\n+</project>"},{"sha":"3397d2d01972c65418dcc636a8595b3fab46abce","filename":"archetype/src/main/resources/META-INF/maven/archetype-metadata.xml","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fmaven%2Farchetype-metadata.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fmaven%2Farchetype-metadata.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fmaven%2Farchetype-metadata.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<archetype-descriptor xsi:schemaLocation=\"http://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.0.0 http://maven.apache.org/xsd/archetype-descriptor-1.0.0.xsd\" name=\"syncope-sample\"\n+                      xmlns=\"http://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.0.0\"\n+                      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <requiredProperties>\n+    <requiredProperty key=\"secretKey\"/>\n+  </requiredProperties>\n+  \n+  <modules>\n+    <module id=\"core\" dir=\"core\" name=\"core\">\n+      <fileSets>\n+        <fileSet filtered=\"false\" encoding=\"UTF-8\">\n+          <directory>src/main/resources</directory>\n+        </fileSet>\n+        <fileSet filtered=\"false\" encoding=\"UTF-8\">\n+          <directory>src/main/webapp</directory>\n+        </fileSet>\n+        <fileSet filtered=\"false\" encoding=\"UTF-8\">\n+          <directory>src/test/resources</directory>\n+        </fileSet>\n+      </fileSets>\n+    </module>\n+    <module id=\"console\" dir=\"console\" name=\"console\">\n+      <fileSets>\n+        <fileSet filtered=\"false\" encoding=\"UTF-8\">\n+          <directory>src/main/resources</directory>\n+        </fileSet>\n+        <fileSet filtered=\"false\" encoding=\"UTF-8\">\n+          <directory>src/main/webapp</directory>\n+        </fileSet>\n+        <fileSet filtered=\"false\" encoding=\"UTF-8\">\n+          <directory>src/test/resources</directory>\n+        </fileSet>\n+      </fileSets>\n+    </module>\n+  </modules>\n+</archetype-descriptor>"},{"sha":"ed1088b90286d679c3d7dac98c0e1b244bdc3be4","filename":"archetype/src/main/resources/archetype-resources/console/pom.xml","status":"added","additions":260,"deletions":0,"changes":260,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,260 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+Licensed to the Apache Software Foundation (ASF) under one\r\n+or more contributor license agreements.  See the NOTICE file\r\n+distributed with this work for additional information\r\n+regarding copyright ownership.  The ASF licenses this file\r\n+to you under the Apache License, Version 2.0 (the\r\n+\"License\"); you may not use this file except in compliance\r\n+with the License.  You may obtain a copy of the License at\r\n+\r\n+  http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+Unless required by applicable law or agreed to in writing,\r\n+software distributed under the License is distributed on an\r\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+KIND, either express or implied.  See the License for the\r\n+specific language governing permissions and limitations\r\n+under the License.\r\n+\r\n+-->\r\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n+\r\n+  <modelVersion>4.0.0</modelVersion>\r\n+\r\n+  <parent>\r\n+    <groupId>${groupId}</groupId>\r\n+    <artifactId>${rootArtifactId}</artifactId>\r\n+    <version>${version}</version>\r\n+  </parent>\r\n+\r\n+  <name>Apache Syncope sample project console</name>\r\n+  <groupId>${groupId}</groupId>\r\n+  <artifactId>${artifactId}</artifactId>\r\n+  <packaging>war</packaging>\r\n+\r\n+  <dependencies>\r\n+\r\n+    <dependency>\r\n+      <groupId>org.apache.wicket</groupId>\r\n+      <artifactId>wicket</artifactId>\r\n+      <type>pom</type>\r\n+    </dependency>\r\n+\r\n+    <dependency>\r\n+      <groupId>org.apache.wicket</groupId>\r\n+      <artifactId>wicket-extensions</artifactId>\r\n+    </dependency>\r\n+\r\n+    <dependency>\r\n+      <groupId>org.apache.wicket</groupId>\r\n+      <artifactId>wicket-spring</artifactId>\r\n+    </dependency>\r\n+\r\n+    <dependency>\r\n+      <groupId>org.apache.syncope</groupId>\r\n+      <artifactId>syncope-client</artifactId>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>org.apache.syncope</groupId>\r\n+      <artifactId>syncope-console</artifactId>\r\n+      <type>war</type>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>org.apache.syncope</groupId>\r\n+      <artifactId>syncope-console</artifactId>\r\n+      <classifier>classes</classifier>\r\n+    </dependency>\r\n+\r\n+    <dependency>\r\n+      <groupId>org.springframework</groupId>\r\n+      <artifactId>spring-webmvc</artifactId>\r\n+    </dependency>\r\n+\r\n+    <dependency>\r\n+      <groupId>org.apache.wicket</groupId>\r\n+      <artifactId>wicket-auth-roles</artifactId>\r\n+      <type>jar</type>\r\n+    </dependency>\r\n+\r\n+    <!-- TEST -->\r\n+    <dependency>\r\n+      <groupId>org.apache.syncope</groupId>\r\n+      <artifactId>syncope-build-tools</artifactId>\r\n+      <type>war</type>\r\n+      <scope>test</scope>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>junit</groupId>\r\n+      <artifactId>junit</artifactId>\r\n+      <scope>test</scope>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>org.seleniumhq.selenium.client-drivers</groupId>\r\n+      <artifactId>selenium-java-client-driver</artifactId>\r\n+      <scope>test</scope>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>org.springframework</groupId>\r\n+      <artifactId>spring-test</artifactId>\r\n+      <scope>test</scope>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>com.h2database</groupId>\r\n+      <artifactId>h2</artifactId>\r\n+      <scope>test</scope>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>org.connid.bundles.soap</groupId>\r\n+      <artifactId>wssample</artifactId>\r\n+      <type>war</type>\r\n+      <scope>test</scope>\r\n+    </dependency>\r\n+    <!-- /TEST -->    \r\n+  </dependencies>\r\n+\r\n+  <build>\r\n+    <finalName>syncope-console</finalName>\r\n+\r\n+    <plugins>\r\n+      \r\n+      <plugin>\r\n+        <groupId>org.apache.maven.plugins</groupId>\r\n+        <artifactId>maven-dependency-plugin</artifactId>\r\n+        <inherited>true</inherited>\r\n+        <executions>\r\n+          <execution>\r\n+            <id>set-bundles</id>\r\n+            <phase>process-test-resources</phase>\r\n+            <goals>\r\n+              <goal>copy</goal>\r\n+            </goals>\r\n+          </execution>\r\n+        </executions>\r\n+      </plugin>\r\n+            \r\n+      <plugin>\r\n+        <groupId>org.apache.maven.plugins</groupId>\r\n+        <artifactId>maven-antrun-plugin</artifactId>\r\n+        <inherited>true</inherited>\r\n+        <executions>\r\n+          <execution>\r\n+            <id>explodeSyncopeWAR</id>\r\n+            <phase>pre-integration-test</phase>\r\n+            <configuration>\r\n+              <target>\r\n+                <unzip src=\"${basedir}/../core/target/syncope.war\" dest=\"${cargo.run.dir}\"/>\r\n+                <copy file=\"${project.build.directory}/test-classes/db.jsp\" todir=\"${cargo.run.dir}\"/>\r\n+                <copy todir=\"${cargo.run.dir}/WEB-INF/classes\" includeEmptyDirs=\"false\">\r\n+                  <fileset dir=\"${project.build.directory}/test-classes\"/>\r\n+                </copy>\r\n+              </target>\r\n+            </configuration>\r\n+            <goals>\r\n+              <goal>run</goal>\r\n+            </goals>\r\n+          </execution>\r\n+          <execution>\r\n+            <id>setupCSV</id>\r\n+            <phase>pre-integration-test</phase>\r\n+            <configuration>\r\n+              <target>\r\n+                <copy file=\"${project.build.directory}/test-classes/test.csv\" todir=\"${test.csvdir.path}\" overwrite=\"true\"/>\r\n+              </target>    \r\n+            </configuration>\r\n+            <goals>\r\n+              <goal>run</goal>\r\n+            </goals>\r\n+          </execution>\r\n+        </executions>\r\n+      </plugin>\r\n+\r\n+      <plugin>\r\n+        <groupId>org.codehaus.cargo</groupId>\r\n+        <artifactId>cargo-maven2-plugin</artifactId>\r\n+        <inherited>true</inherited>\r\n+        <configuration>\r\n+          <container>\r\n+            <dependencies>\r\n+              <dependency>\r\n+                <groupId>com.h2database</groupId>\r\n+                <artifactId>h2</artifactId>\r\n+              </dependency>\r\n+            </dependencies>\r\n+            <systemProperties>\r\n+              <syncope.console.configuration>${project.build.directory}/test-classes/configuration.properties</syncope.console.configuration>\r\n+            </systemProperties>\r\n+          </container>\r\n+          <configuration>\r\n+            <type>standalone</type>\r\n+            <properties>\r\n+              <cargo.servlet.port>${cargo.servlet.port}</cargo.servlet.port>\r\n+              <cargo.jvmargs>-Xms512m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=512m</cargo.jvmargs>\r\n+            </properties>\r\n+          </configuration>\r\n+          <deployables>\r\n+            <deployable>\r\n+              <location>${cargo.run.dir}</location>\r\n+              <properties>\r\n+                <context>syncope</context>\r\n+              </properties>\r\n+            </deployable>\r\n+            <deployable>\r\n+              <location>${project.build.directory}/${project.build.finalName}.war</location>\r\n+              <properties>\r\n+                <context>syncope-console</context>\r\n+              </properties>\r\n+            </deployable>\r\n+            <deployable>\r\n+              <groupId>org.connid.bundles.soap</groupId>\r\n+              <artifactId>wssample</artifactId>\r\n+              <type>war</type>\r\n+              <properties>\r\n+                <context>wssample</context>\r\n+              </properties>\r\n+            </deployable>\r\n+            <deployable>\r\n+              <groupId>org.apache.syncope</groupId>\r\n+              <artifactId>syncope-build-tools</artifactId>\r\n+              <type>war</type>\r\n+              <properties>\r\n+                <context>syncope-build-tools</context>\r\n+              </properties>\r\n+            </deployable>\r\n+          </deployables>\r\n+        </configuration>\r\n+      </plugin>\r\n+            \r\n+    </plugins>\r\n+\r\n+    <resources>\r\n+      <resource>\r\n+        <directory>src/main/resources</directory>\r\n+        <filtering>true</filtering>\r\n+      </resource>\r\n+    </resources>\r\n+\r\n+    <testResources>\r\n+      <testResource>\r\n+        <directory>src/test/resources</directory>\r\n+        <filtering>true</filtering>\r\n+      </testResource>\r\n+      <testResource>\r\n+        <directory>../core/src/test/resources</directory>\r\n+        <filtering>true</filtering>\r\n+      </testResource>\r\n+    </testResources>\r\n+  </build>\r\n+    \r\n+  <profiles>\r\n+    <profile>\r\n+      <id>embedded</id>\r\n+      <properties>\r\n+        <skipTests>true</skipTests>\r\n+      </properties>\r\n+      <build>\r\n+        <defaultGoal>clean verify cargo:run</defaultGoal>    \r\n+      </build>\r\n+    </profile>    \r\n+  </profiles>\r\n+</project>\r"},{"sha":"64308144d5cb235a707f20442b354d5d31029efc","filename":"archetype/src/main/resources/archetype-resources/core/pom.xml","status":"added","additions":300,"deletions":0,"changes":300,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,300 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+Licensed to the Apache Software Foundation (ASF) under one\r\n+or more contributor license agreements.  See the NOTICE file\r\n+distributed with this work for additional information\r\n+regarding copyright ownership.  The ASF licenses this file\r\n+to you under the Apache License, Version 2.0 (the\r\n+\"License\"); you may not use this file except in compliance\r\n+with the License.  You may obtain a copy of the License at\r\n+\r\n+  http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+Unless required by applicable law or agreed to in writing,\r\n+software distributed under the License is distributed on an\r\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+KIND, either express or implied.  See the License for the\r\n+specific language governing permissions and limitations\r\n+under the License.\r\n+\r\n+-->\r\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n+\r\n+  <modelVersion>4.0.0</modelVersion>\r\n+\r\n+  <parent>\r\n+    <groupId>${groupId}</groupId>\r\n+    <artifactId>${rootArtifactId}</artifactId>\r\n+    <version>${version}</version>\r\n+  </parent>\r\n+\r\n+  <name>Apache Syncope sample project core</name>\r\n+  <groupId>${groupId}</groupId>\r\n+  <artifactId>${artifactId}</artifactId>\r\n+  <packaging>war</packaging>\r\n+\r\n+  <dependencies>\r\n+\r\n+    <dependency>\r\n+      <groupId>org.apache.syncope</groupId>\r\n+      <artifactId>syncope-client</artifactId>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>org.apache.syncope</groupId>\r\n+      <artifactId>syncope-core</artifactId>\r\n+      <type>war</type>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>org.apache.syncope</groupId>\r\n+      <artifactId>syncope-core</artifactId>\r\n+      <classifier>classes</classifier>\r\n+    </dependency>\r\n+\r\n+    <dependency>\r\n+      <groupId>javax.servlet</groupId>\r\n+      <artifactId>servlet-api</artifactId>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>javax.servlet.jsp</groupId>\r\n+      <artifactId>jsp-api</artifactId>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>javax.servlet</groupId>\r\n+      <artifactId>jstl</artifactId>\r\n+    </dependency>\r\n+\r\n+    <dependency>\r\n+      <groupId>org.springframework.security</groupId>\r\n+      <artifactId>spring-security-web</artifactId>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>org.springframework.security</groupId>\r\n+      <artifactId>spring-security-config</artifactId>\r\n+    </dependency>\r\n+\r\n+    <!-- TEST -->\r\n+    <dependency>\r\n+      <groupId>org.apache.syncope</groupId>\r\n+      <artifactId>syncope-build-tools</artifactId>\r\n+      <type>war</type>\r\n+      <scope>test</scope>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>org.connid.bundles.soap</groupId>\r\n+      <artifactId>wssample</artifactId>\r\n+      <type>war</type>\r\n+      <scope>test</scope>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>junit</groupId>\r\n+      <artifactId>junit</artifactId>\r\n+      <scope>test</scope>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>com.h2database</groupId>\r\n+      <artifactId>h2</artifactId>\r\n+      <scope>test</scope>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>org.apache.httpcomponents</groupId>\r\n+      <artifactId>httpclient</artifactId>\r\n+      <scope>test</scope>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>org.springframework</groupId>\r\n+      <artifactId>spring-test</artifactId>\r\n+      <scope>test</scope>\r\n+    </dependency>\r\n+    <!-- /TEST -->\r\n+  </dependencies>\r\n+\r\n+  <build>\r\n+    <finalName>syncope</finalName>\r\n+\r\n+    <plugins>\r\n+\r\n+      <plugin>\r\n+        <groupId>org.apache.maven.plugins</groupId>\r\n+        <artifactId>maven-dependency-plugin</artifactId>\r\n+        <inherited>true</inherited>\r\n+        <executions>\r\n+          <execution>\r\n+            <id>set-bundles</id>\r\n+            <phase>process-test-resources</phase>\r\n+            <goals>\r\n+              <goal>copy</goal>\r\n+            </goals>\r\n+          </execution>\r\n+        </executions>\r\n+      </plugin>\r\n+            \r\n+      <plugin>\r\n+        <groupId>org.apache.maven.plugins</groupId>\r\n+        <artifactId>maven-failsafe-plugin</artifactId>\r\n+        <inherited>true</inherited>\r\n+        <configuration>\r\n+          <redirectTestOutputToFile>true</redirectTestOutputToFile>\r\n+          <encoding>utf-8</encoding>\r\n+        </configuration>\r\n+        <executions>\r\n+          <execution>\r\n+            <id>verify</id>\r\n+            <goals>\r\n+              <goal>verify</goal>\r\n+            </goals>\r\n+          </execution>\r\n+        </executions>\r\n+      </plugin>\r\n+\r\n+      <plugin>\r\n+        <groupId>org.apache.maven.plugins</groupId>\r\n+        <artifactId>maven-antrun-plugin</artifactId>\r\n+        <inherited>true</inherited>\r\n+        <executions>\r\n+          <execution>\r\n+            <id>explodeSyncopeWAR</id>\r\n+            <phase>pre-integration-test</phase>\r\n+            <configuration>\r\n+              <target>\r\n+                <unzip src=\"${project.build.directory}/${project.build.finalName}.war\" dest=\"${cargo.run.dir}\"/>\r\n+                <copy file=\"${project.build.directory}/test-classes/db.jsp\" todir=\"${cargo.run.dir}\"/>\r\n+                <copy todir=\"${cargo.run.dir}/WEB-INF/classes\" includeEmptyDirs=\"false\">\r\n+                  <fileset dir=\"${project.build.directory}/test-classes\"/>\r\n+                </copy>\r\n+              </target>\r\n+            </configuration>\r\n+            <goals>\r\n+              <goal>run</goal>\r\n+            </goals>\r\n+          </execution>\r\n+          <execution>\r\n+            <id>setupCSV</id>\r\n+            <phase>pre-integration-test</phase>\r\n+            <configuration>\r\n+              <target>\r\n+                <copy file=\"${project.build.directory}/test-classes/test.csv\" todir=\"${test.csvdir.path}\" overwrite=\"true\"/>\r\n+              </target>    \r\n+            </configuration>\r\n+            <goals>\r\n+              <goal>run</goal>\r\n+            </goals>\r\n+          </execution>\r\n+        </executions>\r\n+      </plugin>\r\n+\r\n+      <plugin>\r\n+        <groupId>org.codehaus.cargo</groupId>\r\n+        <artifactId>cargo-maven2-plugin</artifactId>\r\n+        <inherited>true</inherited>\r\n+        <configuration>\r\n+          <container>\r\n+            <dependencies>\r\n+              <dependency>\r\n+                <groupId>com.h2database</groupId>\r\n+                <artifactId>h2</artifactId>\r\n+              </dependency>\r\n+            </dependencies>\r\n+          </container>\r\n+          <configuration>\r\n+            <type>standalone</type>\r\n+            <properties>\r\n+              <cargo.servlet.port>${cargo.servlet.port}</cargo.servlet.port>\r\n+              <!--<cargo.jvmargs>-Xdebug -Xrunjdwp:transport=dt_socket,address=9009,server=y,suspend=n</cargo.jvmargs>-->\r\n+            </properties>\r\n+          </configuration>\r\n+          <deployables>\r\n+            <deployable>\r\n+              <location>${cargo.run.dir}</location>\r\n+              <properties>\r\n+                <context>syncope</context>\r\n+              </properties>\r\n+            </deployable>\r\n+            <deployable>\r\n+              <groupId>org.connid.bundles.soap</groupId>\r\n+              <artifactId>wssample</artifactId>\r\n+              <type>war</type>\r\n+              <properties>\r\n+                <context>wssample</context>\r\n+              </properties>\r\n+            </deployable>\r\n+            <deployable>\r\n+              <groupId>org.apache.syncope</groupId>\r\n+              <artifactId>syncope-build-tools</artifactId>\r\n+              <type>war</type>\r\n+              <properties>\r\n+                <context>syncope-build-tools</context>\r\n+              </properties>\r\n+            </deployable>\r\n+          </deployables>\r\n+        </configuration>\r\n+        <executions>\r\n+          <execution>\r\n+            <id>start-container</id>\r\n+            <phase>pre-integration-test</phase>\r\n+            <goals>\r\n+              <goal>start</goal>\r\n+            </goals>\r\n+            <configuration>\r\n+              <wait>false</wait>\r\n+            </configuration>\r\n+          </execution>\r\n+          <execution>\r\n+            <id>stop-container</id>\r\n+            <phase>post-integration-test</phase>\r\n+            <goals>\r\n+              <goal>stop</goal>\r\n+            </goals>\r\n+          </execution>\r\n+        </executions>\r\n+      </plugin>\r\n+            \r\n+      <plugin>\r\n+        <groupId>org.apache.openjpa</groupId>\r\n+        <artifactId>openjpa-maven-plugin</artifactId>\r\n+        <inherited>true</inherited>\r\n+        <dependencies>\r\n+          <dependency>\r\n+            <groupId>com.h2database</groupId>\r\n+            <artifactId>h2</artifactId>\r\n+            <version>${h2.version}</version>\r\n+          </dependency>\r\n+        </dependencies>\r\n+        <configuration>\r\n+          <persistenceXmlFile>${project.basedir}/src/main/resources/META-INF/spring-persistence.xml</persistenceXmlFile>\r\n+          <includes>org/apache/syncope/core/persistence/beans/**/*.class</includes>\r\n+          <connectionDriverName>org.springframework.jdbc.datasource.DriverManagerDataSource</connectionDriverName>\r\n+          <connectionProperties>\r\n+            driverClassName=org.h2.Driver,\r\n+            url=jdbc:h2:mem:syncopedb\r\n+            username=sa,\r\n+            password=\r\n+          </connectionProperties>\r\n+        </configuration>\r\n+        <executions>\r\n+          <execution>\r\n+            <id>enhancer</id>\r\n+            <phase>process-classes</phase>\r\n+            <goals>\r\n+              <goal>enhance</goal>\r\n+            </goals>\r\n+          </execution>\r\n+        </executions>\r\n+      </plugin>\r\n+\r\n+    </plugins>\r\n+\r\n+    <resources>\r\n+      <resource>\r\n+        <directory>src/main/resources</directory>\r\n+        <filtering>true</filtering>\r\n+      </resource>\r\n+    </resources>\r\n+\r\n+    <testResources>\r\n+      <testResource>\r\n+        <directory>src/test/resources</directory>\r\n+        <filtering>true</filtering>\r\n+      </testResource>\r\n+    </testResources>\r\n+  </build>\r\n+</project>\r"},{"sha":"cd53c96610727fa3f79527093dbf89f80c3c8bbd","filename":"archetype/src/main/resources/meta-pom.xml","status":"added","additions":150,"deletions":0,"changes":150,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,150 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+Licensed to the Apache Software Foundation (ASF) under one\r\n+or more contributor license agreements.  See the NOTICE file\r\n+distributed with this work for additional information\r\n+regarding copyright ownership.  The ASF licenses this file\r\n+to you under the Apache License, Version 2.0 (the\r\n+\"License\"); you may not use this file except in compliance\r\n+with the License.  You may obtain a copy of the License at\r\n+\r\n+  http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+Unless required by applicable law or agreed to in writing,\r\n+software distributed under the License is distributed on an\r\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+KIND, either express or implied.  See the License for the\r\n+specific language governing permissions and limitations\r\n+under the License.\r\n+\r\n+-->\r\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\r\n+         http://maven.apache.org/maven-v4_0_0.xsd\">\r\n+\r\n+  <modelVersion>4.0.0</modelVersion>\r\n+\r\n+  <parent>\r\n+    <groupId>org.apache.syncope</groupId>\r\n+    <artifactId>syncope</artifactId>\r\n+    <version></version>\r\n+  </parent>\r\n+\r\n+  <properties>\r\n+    <syncope.version></syncope.version>\r\n+  </properties>\r\n+\r\n+  <name>Apache Syncope sample project</name>\r\n+  <groupId>${groupId}</groupId>\r\n+  <artifactId>${artifactId}</artifactId>\r\n+  <version>${version}</version>\r\n+  <packaging>pom</packaging>\r\n+\r\n+  <dependencyManagement>\r\n+    <dependencies>\r\n+      <dependency>\r\n+        <groupId>org.apache.syncope</groupId>\r\n+        <artifactId>syncope-client</artifactId>\r\n+        <version>${syncope.version}</version>\r\n+      </dependency> \r\n+\r\n+      <dependency>\r\n+        <groupId>org.apache.syncope</groupId>\r\n+        <artifactId>syncope-build-tools</artifactId>\r\n+        <version>${syncope.version}</version>\r\n+        <type>war</type>\r\n+        <scope>test</scope>\r\n+      </dependency> \r\n+            \r\n+      <dependency>\r\n+        <groupId>org.apache.syncope</groupId>\r\n+        <artifactId>syncope-core</artifactId>\r\n+        <version>${syncope.version}</version>\r\n+        <type>war</type>\r\n+      </dependency> \r\n+      <dependency>\r\n+        <groupId>org.apache.syncope</groupId>\r\n+        <artifactId>syncope-core</artifactId>\r\n+        <version>${syncope.version}</version>\r\n+        <classifier>classes</classifier>\r\n+        <scope>provided</scope>\r\n+      </dependency> \r\n+\r\n+      <dependency>\r\n+        <groupId>org.apache.syncope</groupId>\r\n+        <artifactId>syncope-console</artifactId>\r\n+        <version>${syncope.version}</version>\r\n+        <type>war</type>\r\n+      </dependency> \r\n+      <dependency>\r\n+        <groupId>org.apache.syncope</groupId>\r\n+        <artifactId>syncope-console</artifactId>\r\n+        <version>${syncope.version}</version>\r\n+        <classifier>classes</classifier>\r\n+        <scope>provided</scope>\r\n+      </dependency> \r\n+    </dependencies>\r\n+  </dependencyManagement>\r\n+    \r\n+  <build>\r\n+    \r\n+    <pluginManagement>\r\n+      <plugins>\r\n+        <!-- Disable LICENSE / NOTICE inclusion: see SYNCOPE-84 -->\r\n+        <plugin>\r\n+          <groupId>org.apache.maven.plugins</groupId>\r\n+          <artifactId>maven-war-plugin</artifactId>\r\n+          <inherited>false</inherited>\r\n+          <configuration>\r\n+            <webResources>\r\n+              <resource>\r\n+                <directory>src/main/webapp</directory>\r\n+                <includes>\r\n+                  <include>**/*.jsp</include>\r\n+                </includes>\r\n+                <filtering>true</filtering>\r\n+              </resource>\r\n+            </webResources>\r\n+          </configuration>\r\n+        </plugin>\r\n+      </plugins>\r\n+    </pluginManagement>\r\n+    \r\n+    <!-- Disable legal check for generated projects: see SYNCOPE-84 -->\r\n+    <plugins>\r\n+      <plugin>\r\n+        <groupId>org.codehaus.mojo</groupId>\r\n+        <artifactId>ianal-maven-plugin</artifactId>\r\n+        <inherited>true</inherited>\r\n+        <executions>\r\n+          <execution>            \r\n+            <goals>\r\n+              <goal>verify-legal-files</goal>\r\n+            </goals>\r\n+            <phase>none</phase>\r\n+          </execution>\r\n+        </executions>\r\n+      </plugin>\r\n+      <plugin>\r\n+        <groupId>org.apache.rat</groupId>\r\n+        <artifactId>apache-rat-plugin</artifactId>\r\n+        <inherited>true</inherited>\r\n+        <executions>\r\n+          <execution>\r\n+            <goals>\r\n+              <goal>check</goal>\r\n+            </goals>\r\n+            <phase>none</phase>\r\n+          </execution>\r\n+        </executions>\r\n+      </plugin>\r\n+    </plugins>\r\n+  </build>\r\n+    \r\n+  <modules>\r\n+    <module>core</module>\r\n+    <module>console</module>\r\n+  </modules>\r\n+\r\n+</project>\r"},{"sha":"41e76b47451fb7eded72320969146bc9d5297edc","filename":"archetype/src/main/resources/properties2pom.xsl","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fsrc%2Fmain%2Fresources%2Fproperties2pom.xsl","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fsrc%2Fmain%2Fresources%2Fproperties2pom.xsl","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Fproperties2pom.xsl?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+ -->\n+<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n+                xmlns:m=\"http://maven.apache.org/POM/4.0.0\"\n+                exclude-result-prefixes=\"m\"\n+                version=\"1.0\">\n+  <xsl:param name=\"syncopeVersion\"/>\n+  \n+  <xsl:template match=\"/m:project/m:parent/m:version\">\n+    <version>\n+      <xsl:value-of select=\"$syncopeVersion\"/>\n+    </version>\n+  </xsl:template>\n+\n+  <xsl:template match=\"/m:project/m:properties/m:syncope.version\">\n+    <syncope.version>\n+      <xsl:value-of select=\"$syncopeVersion\"/>\n+    </syncope.version>\n+  </xsl:template>\n+  \n+  <xsl:template match=\"node()|@*|comment()\">\n+    <xsl:copy>\n+      <xsl:apply-templates select=\"@*|node()\"/>\n+    </xsl:copy>\n+  </xsl:template>\n+\n+</xsl:stylesheet>"},{"sha":"6ef8bc71ac8e9b8e9d15b388975fa5c03ace68f8","filename":"archetype/src/test/resources/projects/default/archetype.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fsrc%2Ftest%2Fresources%2Fprojects%2Fdefault%2Farchetype.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fsrc%2Ftest%2Fresources%2Fprojects%2Fdefault%2Farchetype.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Ftest%2Fresources%2Fprojects%2Fdefault%2Farchetype.properties?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+groupId=org.apache.syncope.test\n+artifactId=syncope-test\n+version=1.0-SNAPSHOT\n+secretKey=testSecretKey"},{"sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","filename":"archetype/src/test/resources/projects/default/goal.txt","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fsrc%2Ftest%2Fresources%2Fprojects%2Fdefault%2Fgoal.txt","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/archetype%2Fsrc%2Ftest%2Fresources%2Fprojects%2Fdefault%2Fgoal.txt","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Ftest%2Fresources%2Fprojects%2Fdefault%2Fgoal.txt?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"520ee08ad35103d9895f394bad4caae7ba0dc772","filename":"build-tools/pom.xml","status":"added","additions":228,"deletions":0,"changes":228,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fpom.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,228 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope</artifactId>\n+    <version>1.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Build Tools</name>\n+  <description>Apache Syncope Build Tools</description>\n+  <groupId>org.apache.syncope</groupId>\n+  <artifactId>syncope-build-tools</artifactId>\n+  <packaging>war</packaging>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>syncope.website</id>\n+      <name>Apache Syncope website</name>\n+      <url>${site.deploymentBaseUrl}/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+  \n+  <dependencies>\n+    <dependency>\n+      <artifactId>servlet-api</artifactId>\n+      <groupId>javax.servlet</groupId>\n+      <scope>provided</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.directory.server</groupId>\n+      <artifactId>apacheds-all</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-beans</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-jdbc</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-webmvc</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.h2database</groupId>\n+      <artifactId>h2</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.connid</groupId>\n+      <artifactId>connid-framework</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.connid</groupId>\n+      <artifactId>connid-framework-internal</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.codehaus.groovy</groupId>\n+      <artifactId>groovy-all</artifactId>\n+    </dependency>\n+      \n+    <dependency>\n+      <groupId>org.connid.bundles.db</groupId>\n+      <artifactId>org.connid.bundles.db.table</artifactId>\n+      <version>${connid.db.table.version}</version>\n+      <scope>runtime</scope>\n+    </dependency>\n+      \n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+      <version>1.5.6</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-log4j12</artifactId>\n+      <version>1.5.6</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-logging</groupId>\n+      <artifactId>commons-logging</artifactId>\n+      <version>1.1.1</version>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>jcl-over-slf4j</artifactId>\n+      <version>1.5.6</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>      \n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-war-plugin</artifactId>\n+        <configuration>\n+          <archive>\n+            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n+          </archive>\n+          <webResources>\n+            <webResource>\n+              <directory>${basedir}/src/main/webapp/WEB-INF</directory>\n+              <includes>\n+                <include>web.xml</include>\n+              </includes>\n+              <targetPath>WEB-INF</targetPath>\n+              <filtering>true</filtering>\n+            </webResource>\n+          </webResources>\n+        </configuration>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.codehaus.cargo</groupId>\n+        <artifactId>cargo-maven2-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <configuration>\n+          <container>\n+            <dependencies>\n+              <dependency>\n+                <groupId>com.h2database</groupId>\n+                <artifactId>h2</artifactId>\n+              </dependency>\n+            </dependencies>\n+          </container>\n+          <configuration>\n+            <properties>\n+              <cargo.servlet.port>${cargo.servlet.port}</cargo.servlet.port>\n+            </properties>\n+          </configuration>\n+          <deployables>\n+            <deployable>\n+              <location>${basedir}/target/syncope-build-tools-${project.version}.war</location>\n+              <properties>\n+                <context>syncope-build-tools</context>\n+              </properties>\n+            </deployable>\n+          </deployables>\n+        </configuration>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.felix</groupId>\n+        <artifactId>maven-bundle-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>bundle-manifest</id>\n+            <phase>process-classes</phase>\n+            <goals>\n+              <goal>manifest</goal>\n+            </goals>\n+            <configuration>\n+              <instructions>\n+                <Bundle-Name>${project.name}</Bundle-Name>\n+                <Bundle-SymbolicName>org.apache.syncope.buildtools</Bundle-SymbolicName>\n+                <Bundle-Version>${project.version}</Bundle-Version>\n+                <Export-Package>\n+                  org.apache.syncope.buildtools*;version=${project.version};-split-package:=merge-first\n+                </Export-Package>\n+                <Import-Package>\n+                  javax.naming*,\n+                  javax.servlet*,\n+                  javax.sql,\n+                  org.springframework*;version=\"[3,4)\",\n+                  org.apache.directory*;version=\"[0.9,2)\";resolution:=optional,\n+                  org.h2.tools;version=\"[1.3,2)\";resolution:=optional,\n+                  org.slf4j;resolution:=optional\n+                </Import-Package>\n+              </instructions>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+\n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+      <resource>\n+        <directory>..</directory>\n+        <targetPath>META-INF</targetPath>\n+        <includes>\n+          <include>LICENSE</include>\n+          <include>NOTICE</include>\n+        </includes>\n+      </resource>\n+    </resources>\n+  </build>\n+\n+</project>"},{"sha":"dd06e479421f08f2f17403bb8f00276c054897fe","filename":"build-tools/src/main/java/org/apache/syncope/buildtools/ApacheDSRootDseServlet.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FApacheDSRootDseServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FApacheDSRootDseServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FApacheDSRootDseServlet.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.buildtools;\n+\n+import java.io.PrintWriter;\n+import java.util.Hashtable;\n+import javax.naming.Context;\n+import javax.naming.NamingEnumeration;\n+import javax.naming.directory.Attribute;\n+import javax.naming.directory.Attributes;\n+import javax.naming.directory.DirContext;\n+import javax.naming.directory.InitialDirContext;\n+import javax.naming.directory.SearchControls;\n+import javax.naming.directory.SearchResult;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.directory.server.core.DirectoryService;\n+import org.apache.directory.server.core.jndi.CoreContextFactory;\n+\n+public class ApacheDSRootDseServlet extends HttpServlet {\n+\n+    private static final long serialVersionUID = 1514567335969002735L;\n+\n+    @Override\n+    protected void doGet(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException {\n+\n+        try {\n+            resp.setContentType(\"text/plain\");\n+            PrintWriter out = resp.getWriter();\n+\n+            out.println(\"*** ApacheDS RootDSE ***\\n\");\n+\n+            DirContext ctx = new InitialDirContext(this.createEnv());\n+\n+            SearchControls ctls = new SearchControls();\n+            ctls.setReturningAttributes(new String[] { \"*\", \"+\" });\n+            ctls.setSearchScope(SearchControls.OBJECT_SCOPE);\n+\n+            NamingEnumeration<SearchResult> result = ctx.search(\"\", \"(objectClass=*)\", ctls);\n+            if (result.hasMore()) {\n+                SearchResult entry = result.next();\n+                Attributes as = entry.getAttributes();\n+\n+                NamingEnumeration<String> ids = as.getIDs();\n+                while (ids.hasMore()) {\n+                    String id = ids.next();\n+                    Attribute attr = as.get(id);\n+                    for (int i = 0; i < attr.size(); ++i) {\n+                        out.println(id + \": \" + attr.get(i));\n+                    }\n+                }\n+            }\n+            ctx.close();\n+\n+            out.flush();\n+        } catch (Exception e) {\n+            throw new ServletException(e);\n+        }\n+    }\n+\n+    /**\n+     * Creates an environment configuration for JNDI access.\n+     */\n+    private Hashtable<Object, Object> createEnv() {\n+        // Fetch directory service from servlet context\n+        ServletContext servletContext = this.getServletContext();\n+        DirectoryService directoryService = (DirectoryService) servletContext.getAttribute(DirectoryService.JNDI_KEY);\n+\n+        Hashtable<Object, Object> env = new Hashtable<Object, Object>();\n+        env.put(DirectoryService.JNDI_KEY, directoryService);\n+        env.put(Context.PROVIDER_URL, \"\");\n+        env.put(Context.INITIAL_CONTEXT_FACTORY, CoreContextFactory.class.getName());\n+\n+        env.put(Context.SECURITY_PRINCIPAL, \"uid=admin,ou=system\");\n+        env.put(Context.SECURITY_CREDENTIALS, \"secret\");\n+        env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n+\n+        return env;\n+    }\n+}"},{"sha":"88929762ba957494e3cc149977f2aa47a1960ddd","filename":"build-tools/src/main/java/org/apache/syncope/buildtools/ApacheDSStartStopListener.java","status":"added","additions":248,"deletions":0,"changes":248,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FApacheDSStartStopListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FApacheDSStartStopListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FApacheDSStartStopListener.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,248 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.buildtools;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import org.apache.directory.server.constants.ServerDNConstants;\n+import org.apache.directory.server.core.DefaultDirectoryService;\n+import org.apache.directory.server.core.DirectoryService;\n+import org.apache.directory.server.core.partition.Partition;\n+import org.apache.directory.server.core.partition.impl.btree.jdbm.JdbmIndex;\n+import org.apache.directory.server.core.partition.impl.btree.jdbm.JdbmPartition;\n+import org.apache.directory.server.core.partition.ldif.LdifPartition;\n+import org.apache.directory.server.core.schema.SchemaPartition;\n+import org.apache.directory.server.ldap.LdapServer;\n+import org.apache.directory.server.protocol.shared.transport.TcpTransport;\n+import org.apache.directory.server.xdbm.Index;\n+import org.apache.directory.shared.ldap.entry.Entry;\n+import org.apache.directory.shared.ldap.entry.ServerEntry;\n+import org.apache.directory.shared.ldap.name.DN;\n+import org.apache.directory.shared.ldap.schema.SchemaManager;\n+import org.apache.directory.shared.ldap.schema.ldif.extractor.SchemaLdifExtractor;\n+import org.apache.directory.shared.ldap.schema.loader.ldif.LdifSchemaLoader;\n+import org.apache.directory.shared.ldap.schema.manager.impl.DefaultSchemaManager;\n+import org.apache.directory.shared.ldap.schema.registries.SchemaLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Start and stop an embedded ApacheDS instance alongside with Servlet Context.\n+ *\n+ * @see http://svn.apache.org/repos/asf/directory/documentation/samples/trunk/embedded-sample/\n+ */\n+public class ApacheDSStartStopListener implements ServletContextListener {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(ApacheDSStartStopListener.class);\n+\n+    private DirectoryService service;\n+\n+    private LdapServer server;\n+\n+    /**\n+     * Initialize the schema manager and add the schema partition to directory service.\n+     *\n+     * @throws Exception if the schema LDIF files are not found on the classpath\n+     */\n+    private void initSchemaPartition(final ServletContext servletContext) throws Exception {\n+        final Pattern sharedLdapSchemaManagerPattern = Pattern.compile(\".*apacheds-all-.*\\\\.jar\");\n+        File found = null;\n+        for (final File jarFile : new File(servletContext.getRealPath(\"/WEB-INF/lib\")).listFiles()) {\n+            if (sharedLdapSchemaManagerPattern.matcher(jarFile.getAbsolutePath()).matches()) {\n+                found = jarFile;\n+            }\n+        }\n+        if (found == null) {\n+            throw new RuntimeException(\"No apache-ds-all JAR found under WEB-INF/lib\");\n+        }\n+\n+        final SchemaPartition schemaPartition = service.getSchemaService().getSchemaPartition();\n+\n+        // Init the LdifPartition\n+        final LdifPartition ldifPartition = new LdifPartition();\n+        final String workingDirectory = service.getWorkingDirectory().getPath();\n+        ldifPartition.setWorkingDirectory(workingDirectory + \"/schema\");\n+\n+        // Extract the schema on disk (a brand new one) and load the registries\n+        final File schemaRepository = new File(workingDirectory, \"schema\");\n+        final SchemaLdifExtractor extractor = new JarSchemaLdifExtractor(new File(workingDirectory), found);\n+        extractor.extractOrCopy(true);\n+\n+        schemaPartition.setWrappedPartition(ldifPartition);\n+\n+        final SchemaLoader loader = new LdifSchemaLoader(schemaRepository);\n+        final SchemaManager schemaManager = new DefaultSchemaManager(loader);\n+        service.setSchemaManager(schemaManager);\n+\n+        // Enable nis so that posixAccount and posixGroup are available\n+        schemaManager.enable(\"nis\");\n+        // We have to load the schema now, otherwise we won't be able\n+        // to initialize the Partitions, as we won't be able to parse \n+        // and normalize their suffix DN\n+        schemaManager.loadAllEnabled();\n+\n+        schemaPartition.setSchemaManager(schemaManager);\n+\n+        final List<Throwable> errors = schemaManager.getErrors();\n+        if (!errors.isEmpty()) {\n+            throw new RuntimeException(\"Schema load failed : \" + errors);\n+        }\n+    }\n+\n+    /**\n+     * Add a new partition to the server.\n+     *\n+     * @param partitionId The partition Id\n+     * @param partitionDn The partition DN\n+     * @return The newly added partition\n+     * @throws Exception If the partition can't be added\n+     */\n+    private Partition addPartition(final String partitionId, final String partitionDn) throws Exception {\n+        // Create a new partition named 'foo'.\n+        final JdbmPartition partition = new JdbmPartition();\n+        partition.setId(partitionId);\n+        partition.setPartitionDir(new File(service.getWorkingDirectory(), partitionId));\n+        partition.setSuffix(partitionDn);\n+        service.addPartition(partition);\n+\n+        return partition;\n+    }\n+\n+    /**\n+     * Add a new set of index on the given attributes.\n+     *\n+     * @param partition The partition on which we want to add index\n+     * @param attrs The list of attributes to index\n+     */\n+    private void addIndex(final Partition partition, final String... attrs) {\n+        // Index some attributes on the apache partition\n+        final HashSet<Index<?, ServerEntry, Long>> indexedAttributes = new HashSet<Index<?, ServerEntry, Long>>();\n+        for (String attribute : attrs) {\n+            indexedAttributes.add(new JdbmIndex<String, ServerEntry>(attribute));\n+        }\n+\n+        ((JdbmPartition) partition).setIndexedAttributes(indexedAttributes);\n+    }\n+\n+    /**\n+     * Initialize the server. It creates the partition, adds the index, and injects the context entries for the created\n+     * partitions.\n+     *\n+     * @param workDir the directory to be used for storing the data\n+     * @throws Exception if there were some problems while initializing\n+     */\n+    private void initDirectoryService(final ServletContext servletContext, final File workDir) throws Exception {\n+        // Initialize the LDAP service\n+        service = new DefaultDirectoryService();\n+        service.setWorkingDirectory(workDir);\n+\n+        // first load the schema\n+        initSchemaPartition(servletContext);\n+\n+        // then the system partition\n+        // this is a MANDATORY partition\n+        final Partition systemPartition = addPartition(\"system\", ServerDNConstants.SYSTEM_DN);\n+        service.setSystemPartition(systemPartition);\n+\n+        // Disable the ChangeLog system\n+        service.getChangeLog().setEnabled(false);\n+        service.setDenormalizeOpAttrsEnabled(true);\n+\n+        // Now we can create as many partitions as we need\n+        final Partition ispPartition = addPartition(\"isp\", \"o=isp\");\n+        addIndex(ispPartition, \"objectClass\", \"ou\", \"uid\");\n+\n+        // And start the service\n+        service.startup();\n+\n+        // Finally, load content LDIF\n+        final LdifURLLoader contentLoader = new LdifURLLoader(service.getAdminSession(),\n+                servletContext.getResource(\"/WEB-INF/classes/content.ldif\"));\n+        final int numEntries = contentLoader.execute();\n+        LOG.info(\"Successfully created {} entries\", numEntries);\n+    }\n+\n+    /**\n+     * Startup ApacheDS embedded.\n+     *\n+     * @param sce ServletContext event\n+     */\n+    @Override\n+    public void contextInitialized(final ServletContextEvent sce) {\n+        File workDir = (File) sce.getServletContext().getAttribute(\"javax.servlet.context.tempdir\");\n+        workDir = new File(workDir, \"server-work\");\n+        if (!workDir.mkdirs()) {\n+            throw new RuntimeException(\"Could not create \" + workDir.getAbsolutePath());\n+        }\n+\n+        Entry result;\n+        try {\n+            initDirectoryService(sce.getServletContext(), workDir);\n+\n+            server = new LdapServer();\n+            server.setTransports(\n+                    new TcpTransport(Integer.valueOf(sce.getServletContext().getInitParameter(\"testds.port\"))));\n+            server.setDirectoryService(service);\n+\n+            server.start();\n+\n+            // store directoryService in context to provide it to servlets etc.\n+            sce.getServletContext().setAttribute(DirectoryService.JNDI_KEY, service);\n+\n+            result = service.getAdminSession().lookup(new DN(\"o=isp\"));\n+        } catch (Exception e) {\n+            LOG.error(\"Fatal error in context init\", e);\n+            throw new RuntimeException(e);\n+        }\n+\n+        if (result == null) {\n+            throw new RuntimeException(\"Base DN not found\");\n+        } else {\n+            LOG.info(\"ApacheDS startup completed succesfully\");\n+        }\n+    }\n+\n+    /**\n+     * Shutdown ApacheDS embedded.\n+     *\n+     * @param scEvent ServletContext event\n+     */\n+    @Override\n+    public void contextDestroyed(final ServletContextEvent scEvent) {\n+        try {\n+            if (server != null) {\n+                server.stop();\n+            }\n+            if (service != null) {\n+                service.shutdown();\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Fatal error in context shutdown\", e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}"},{"sha":"9ef2d42193f78d6b54b39a86343c2067c3833907","filename":"build-tools/src/main/java/org/apache/syncope/buildtools/ConnIdStartStopListener.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FConnIdStartStopListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FConnIdStartStopListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FConnIdStartStopListener.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.buildtools;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import org.identityconnectors.common.security.SecurityUtil;\n+import org.identityconnectors.framework.impl.api.local.ThreadClassLoaderManager;\n+import org.identityconnectors.framework.server.ConnectorServer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ConnIdStartStopListener implements ServletContextListener {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(ConnIdStartStopListener.class);\n+\n+    private static final String SERVER = \"ConnIdConnectorServer\";\n+\n+    /**\n+     * Build list of URLs from bundles available under /WEB-INF/lib\n+     *\n+     * @param ctx ServletContext needed for getting ConnId jar bundles URLs\n+     */\n+    private List<URL> getBundleURLs(final ServletContext ctx) {\n+        final List<URL> bundleURLs = new ArrayList<URL>();\n+\n+        for (String bundleFile : new String[] {\n+            \"testconnectorserver.soap.bundle\",\n+            \"testconnectorserver.db.bundle\",\n+            \"testconnectorserver.csvdir.bundle\",\n+            \"testconnectorserver.ldap.bundle\"}) {\n+\n+            URL url = null;\n+            try {\n+                url = ctx.getResource(\"/WEB-INF/lib/\" + ctx.getInitParameter(bundleFile));\n+            } catch (MalformedURLException e) {\n+                // ignore\n+            }\n+            if (url != null) {\n+                bundleURLs.add(url);\n+            }\n+        }\n+\n+        LOG.info(\"ConnId bundles loaded: \" + bundleURLs);\n+\n+        return bundleURLs;\n+    }\n+\n+    @Override\n+    public void contextInitialized(final ServletContextEvent sce) {\n+        final ConnectorServer _server = ConnectorServer.newInstance();\n+\n+        try {\n+            _server.setPort(Integer.parseInt(\n+                    sce.getServletContext().getInitParameter(\"testconnectorserver.port\")));\n+\n+            _server.setBundleURLs(getBundleURLs(sce.getServletContext()));\n+\n+            _server.setKeyHash(SecurityUtil.computeBase64SHA1Hash(\n+                    sce.getServletContext().getInitParameter(\"testconnectorserver.key\").toCharArray()));\n+\n+            _server.start();\n+            LOG.info(\"ConnId connector server listening on port \" + _server.getPort());\n+        } catch (Exception e) {\n+            LOG.error(\"Could not start ConnId connector server\", e);\n+        }\n+\n+        sce.getServletContext().setAttribute(SERVER, _server);\n+    }\n+\n+    @Override\n+    public void contextDestroyed(final ServletContextEvent sce) {\n+        final ConnectorServer _server = (ConnectorServer) sce.getServletContext().getAttribute(SERVER);\n+        if (_server != null && _server.isStarted()) {\n+            _server.stop();\n+        }\n+        ThreadClassLoaderManager.clearInstance();\n+    }\n+}"},{"sha":"586fb208e45f48e9ba7763e3337357d1b53e62e2","filename":"build-tools/src/main/java/org/apache/syncope/buildtools/H2StartStopListener.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FH2StartStopListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FH2StartStopListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FH2StartStopListener.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.buildtools;\n+\n+import java.io.File;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.sql.DataSource;\n+import org.h2.tools.Server;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n+import org.springframework.web.context.WebApplicationContext;\n+import org.springframework.web.context.support.WebApplicationContextUtils;\n+\n+/**\n+ * Utility servlet context listener managing H2 test server instance (to be used as external resource).\n+ */\n+public class H2StartStopListener implements ServletContextListener {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(H2StartStopListener.class);\n+\n+    private static final String H2_TESTDB = \"h2TestDb\";\n+\n+    @Override\n+    public void contextInitialized(final ServletContextEvent sce) {\n+        final ServletContext context = sce.getServletContext();\n+\n+        final File workDir = (File) sce.getServletContext().getAttribute(\"javax.servlet.context.tempdir\");\n+        try {\n+            final Server h2TestDb = new Server();\n+            h2TestDb.runTool(\"-baseDir\", workDir.getAbsolutePath(), \"-tcp\", \"-tcpDaemon\", \"-web\", \"-webDaemon\",\n+                    \"-webPort\", sce.getServletContext().getInitParameter(\"testdb.webport\"));\n+\n+            context.setAttribute(H2_TESTDB, h2TestDb);\n+        } catch (SQLException e) {\n+            LOG.error(\"Could not start H2 test db\", e);\n+        }\n+\n+        final WebApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(context);\n+        final DataSource datasource = ctx.getBean(DataSource.class);\n+\n+        Connection conn = null;\n+        Statement stmt = null;\n+        try {\n+            conn = DataSourceUtils.getConnection(datasource);\n+            stmt = conn.createStatement();\n+            stmt.executeUpdate(\"RUNSCRIPT FROM 'classpath:/testdb.sql'\");\n+        } catch (Exception e) {\n+            LOG.error(\"While loading data into testdb\", e);\n+        } finally {\n+            if (stmt != null) {\n+                try {\n+                    stmt.close();\n+                } catch (SQLException e) {\n+                }\n+            }\n+            if (conn != null) {\n+                try {\n+                    conn.close();\n+                } catch (SQLException e) {\n+                }\n+            }\n+            DataSourceUtils.releaseConnection(conn, datasource);\n+        }\n+    }\n+\n+    @Override\n+    public void contextDestroyed(final ServletContextEvent sce) {\n+        final ServletContext context = sce.getServletContext();\n+\n+        final Server h2TestDb = (Server) context.getAttribute(H2_TESTDB);\n+        if (h2TestDb != null) {\n+            h2TestDb.shutdown();\n+        }\n+    }\n+}"},{"sha":"682954dffa517f778dd9dd92cfa8165c5303489f","filename":"build-tools/src/main/java/org/apache/syncope/buildtools/JarSchemaLdifExtractor.java","status":"added","additions":178,"deletions":0,"changes":178,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FJarSchemaLdifExtractor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FJarSchemaLdifExtractor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FJarSchemaLdifExtractor.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.buildtools;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import org.apache.directory.shared.i18n.I18n;\n+import org.apache.directory.shared.ldap.schema.ldif.extractor.SchemaLdifExtractor;\n+import org.apache.directory.shared.ldap.schema.ldif.extractor.impl.DefaultSchemaLdifExtractor;\n+\n+/**\n+ * Extracts LDIF files for the schema repository onto a destination directory,\n+ * from specified JAR.\n+ */\n+public class JarSchemaLdifExtractor implements SchemaLdifExtractor {\n+\n+    private static final String SCHEMA_SUBDIR = \"schema\";\n+\n+    private boolean extracted;\n+\n+    private final File outputDirectory;\n+\n+    private final File schemaDirectory;\n+\n+    private final File jarFile;\n+\n+    /**\n+     * Creates an extractor which deposits files into the specified output\n+     * directory.\n+     *\n+     * @param outputDirectory the directory where the schema root is extracted\n+     * @param jarFile the JAR file\n+     */\n+    public JarSchemaLdifExtractor(final File outputDirectory, final File jarFile) throws IOException {\n+\n+        this.outputDirectory = outputDirectory;\n+        this.schemaDirectory = new File(outputDirectory, SCHEMA_SUBDIR);\n+        this.jarFile = jarFile;\n+\n+        if (!outputDirectory.exists() && !outputDirectory.mkdir()) {\n+            throw new IOException(\"Failed to create outputDirectory: \" + outputDirectory);\n+        }\n+\n+        extracted = !schemaDirectory.exists();\n+    }\n+\n+    /**\n+     * Gets whether or not schema folder has been created or not.\n+     *\n+     * @return true if schema folder has already been extracted.\n+     */\n+    @Override\n+    public boolean isExtracted() {\n+        return extracted;\n+    }\n+\n+    /**\n+     * Extracts the LDIF files from a Jar file.\n+     *\n+     * @param overwrite over write extracted structure if true, false otherwise\n+     * @throws IOException if schema already extracted and on IO errors\n+     */\n+    @Override\n+    public void extractOrCopy(final boolean overwrite) throws IOException {\n+\n+        if (!outputDirectory.exists() && !outputDirectory.mkdir()) {\n+            throw new IOException(\"Could not create \" + outputDirectory.getAbsolutePath());\n+        }\n+\n+        if (!schemaDirectory.exists()) {\n+            if (!schemaDirectory.mkdir()) {\n+                throw new IOException(\"Could not create \" + schemaDirectory.getAbsolutePath());\n+            }\n+        } else if (!overwrite) {\n+            throw new IOException(I18n.err(I18n.ERR_08001, schemaDirectory.getAbsolutePath()));\n+        }\n+\n+        final Pattern pattern = Pattern.compile(\".*schema/ou=schema.*\\\\.ldif\");\n+        for (String entry : getResources(pattern)) {\n+            extractFromJar(entry);\n+        }\n+    }\n+\n+    /**\n+     * Extracts the LDIF files from a Jar file or copies exploded LDIF\n+     * resources without overwriting the resources if the schema has\n+     * already been extracted.\n+     *\n+     * @throws IOException if schema already extracted and on IO errors\n+     */\n+    @Override\n+    public void extractOrCopy() throws IOException {\n+\n+        extractOrCopy(false);\n+    }\n+\n+    private Set<String> getResources(final Pattern pattern) throws IOException {\n+\n+        final Set<String> result = new HashSet<String>();\n+\n+        final ZipFile zipFile = new ZipFile(jarFile);\n+        final Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+        while (entries.hasMoreElements()) {\n+            ZipEntry entry = entries.nextElement();\n+            if (pattern.matcher(entry.getName()).matches()) {\n+                result.add(entry.getName());\n+            }\n+        }\n+        zipFile.close();\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Extracts the LDIF schema resource from a Jar.\n+     *\n+     * @param resource the LDIF schema resource\n+     * @throws IOException if there are IO errors\n+     */\n+    private void extractFromJar(final String resource) throws IOException {\n+\n+        final InputStream in = DefaultSchemaLdifExtractor.getUniqueResourceAsStream(resource,\n+                \"LDIF file in schema repository\");\n+        try {\n+            final File destination = new File(outputDirectory, resource);\n+\n+            /*\n+             * Do not overwrite an LDIF file if it has already been extracted.\n+             */\n+            if (destination.exists()) {\n+                return;\n+            }\n+\n+            if (!destination.getParentFile().exists() && !destination.getParentFile().mkdirs()) {\n+\n+                throw new IOException(\"Could not create \" + destination.getParentFile().getAbsolutePath());\n+            }\n+\n+            final FileOutputStream out = new FileOutputStream(destination);\n+            final byte[] buf = new byte[512];\n+            try {\n+                while (in.available() > 0) {\n+                    final int readCount = in.read(buf);\n+                    out.write(buf, 0, readCount);\n+                }\n+                out.flush();\n+            } finally {\n+                out.close();\n+            }\n+        } finally {\n+            in.close();\n+        }\n+    }\n+}"},{"sha":"bb02d947591135d6c1dc79efd7fc07dcf662df14","filename":"build-tools/src/main/java/org/apache/syncope/buildtools/LdifURLLoader.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FLdifURLLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FLdifURLLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FLdifURLLoader.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,127 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *  \n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *  \n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License. \n+ *  \n+ */\n+package org.apache.syncope.buildtools;\n+\n+import java.io.FileNotFoundException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.List;\n+import javax.naming.NamingException;\n+import org.apache.directory.server.core.CoreSession;\n+import org.apache.directory.server.i18n.I18n;\n+import org.apache.directory.shared.ldap.entry.DefaultServerEntry;\n+import org.apache.directory.shared.ldap.entry.Entry;\n+import org.apache.directory.shared.ldap.entry.Modification;\n+import org.apache.directory.shared.ldap.ldif.LdifEntry;\n+import org.apache.directory.shared.ldap.ldif.LdifReader;\n+import org.apache.directory.shared.ldap.name.DN;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Support for commands to load an LDIF from an URL into a DirContext.\n+ *\n+ * @see org.apache.directory.server.protocol.shared.store.LdifFileLoader\n+ */\n+public class LdifURLLoader {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(LdifURLLoader.class);\n+\n+    /**\n+     * A handle on the top core session.\n+     */\n+    protected CoreSession coreSession;\n+\n+    /**\n+     * The LDIF URL.\n+     */\n+    protected URL ldif;\n+\n+    /**\n+     * The total count of entries loaded.\n+     */\n+    private int count;\n+\n+    public LdifURLLoader(final CoreSession coreSession, final URL ldif) {\n+        this.coreSession = coreSession;\n+        this.ldif = ldif;\n+    }\n+\n+    /**\n+     * Opens the LDIF file and loads the entries into the context.\n+     *\n+     * @return The count of entries created.\n+     */\n+    public int execute() {\n+        DN rdn = null;\n+        InputStream in = null;\n+\n+        try {\n+            in = ldif.openStream();\n+\n+            for (final LdifEntry ldifEntry : new LdifReader(in)) {\n+                final DN dn = ldifEntry.getDn();\n+\n+                if (ldifEntry.isEntry()) {\n+                    final Entry entry = ldifEntry.getEntry();\n+                    try {\n+                        coreSession.lookup(dn);\n+                        LOG.info(\"Found {}, will not create.\", rdn);\n+                    } catch (Exception e) {\n+                        try {\n+                            coreSession.add(new DefaultServerEntry(\n+                                    coreSession.getDirectoryService().getSchemaManager(), entry));\n+                            count++;\n+                            LOG.info(\"Created {}.\", rdn);\n+                        } catch (NamingException ne) {\n+                            LOG.info(\"Could not create entry {}\", entry, ne);\n+                        }\n+                    }\n+                } else {\n+                    //modify\n+                    final List<Modification> items = ldifEntry.getModificationItems();\n+                    try {\n+                        coreSession.modify(dn, items);\n+                        LOG.info(\"Modified: \" + dn + \" with modificationItems: \" + items);\n+                    } catch (NamingException e) {\n+                        LOG.info(\"Could not modify: \" + dn + \" with modificationItems: \" + items, e);\n+                    }\n+                }\n+            }\n+        } catch (FileNotFoundException fnfe) {\n+            LOG.error(I18n.err(I18n.ERR_173));\n+        } catch (Exception ioe) {\n+            LOG.error(I18n.err(I18n.ERR_174), ioe);\n+        } finally {\n+            if (in != null) {\n+                try {\n+                    in.close();\n+                } catch (Exception e) {\n+                    LOG.error(I18n.err(I18n.ERR_175), e);\n+                }\n+            }\n+        }\n+\n+        return count;\n+    }\n+}"},{"sha":"f1b690a2607fde8a063025b9fd6c92a026688f37","filename":"build-tools/src/main/java/org/apache/syncope/buildtools/ServiceTimeoutServlet.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FServiceTimeoutServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FServiceTimeoutServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FServiceTimeoutServlet.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.buildtools;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * Just used to verify a connector request timeout.\n+ */\n+public class ServiceTimeoutServlet extends HttpServlet {\n+\n+    private static final long serialVersionUID = -1467488672392710293L;\n+\n+    /**\n+     * Processes requests for both HTTP\n+     * <code>GET</code> and\n+     * <code>POST</code> methods.\n+     *\n+     * @param request servlet request\n+     * @param response servlet response\n+     * @throws ServletException if a servlet-specific error occurs\n+     * @throws IOException if an I/O error occurs\n+     */\n+    protected void processRequest(final HttpServletRequest request, final HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        response.setContentType(\"text/html;charset=UTF-8\");\n+\n+        try {\n+            Thread.sleep(60000);\n+        } catch (InterruptedException ignore) {\n+            // ignore\n+        }\n+\n+        final PrintWriter out = response.getWriter();\n+        try {\n+            out.println(\"OK\");\n+        } finally {\n+            out.close();\n+        }\n+    }\n+\n+    /**\n+     * Handles the HTTP\n+     * <code>GET</code> method.\n+     *\n+     * @param request servlet request\n+     * @param response servlet response\n+     * @throws ServletException if a servlet-specific error occurs\n+     * @throws IOException if an I/O error occurs\n+     */\n+    @Override\n+    protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        processRequest(request, response);\n+    }\n+\n+    /**\n+     * Handles the HTTP\n+     * <code>POST</code> method.\n+     *\n+     * @param request servlet request\n+     * @param response servlet response\n+     * @throws ServletException if a servlet-specific error occurs\n+     * @throws IOException if an I/O error occurs\n+     */\n+    @Override\n+    protected void doPost(final HttpServletRequest request, final HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        processRequest(request, response);\n+    }\n+\n+    /**\n+     * Returns a short description of the servlet.\n+     *\n+     * @return a String containing servlet description\n+     */\n+    @Override\n+    public String getServletInfo() {\n+        return \"Service Timeout\";\n+    }\n+}"},{"sha":"d65769b30cb0f7e0c053cd20569ddd422116b43d","filename":"build-tools/src/main/resources/applicationContext.xml","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+\n+  <bean id=\"testDataSource\"\n+          class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n+    <property name=\"driverClassName\" value=\"${testdb.driver}\"/>\n+    <property name=\"url\" value=\"${testdb.url}\"/>\n+    <property name=\"username\" value=\"${testdb.username}\"/>\n+    <property name=\"password\" value=\"${testdb.password}\"/>\n+  </bean>\n+\n+</beans>\n\\ No newline at end of file"},{"sha":"04a3413cc7b172be5895b68ef1024b96935207b7","filename":"build-tools/src/main/resources/content.ldif","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,45 @@\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+DN: o=isp\n+objectClass: organization\n+objectClass: top\n+o: isp\n+\n+DN: ou=People,o=isp\n+objectClass: organizationalUnit\n+objectClass: top\n+ou: People\n+\n+DN: ou=Groups,o=isp\n+objectClass: organizationalUnit\n+objectClass: top\n+ou: Groups\n+\n+DN: cn=testLDAPGroup,ou=Groups,o=isp\n+objectClass: groupOfUniqueNames\n+objectClass: top\n+cn: testLDAPGroup\n+uniqueMember: uid=admin,ou=system\n+uniqueMember: uid=syncFromLDAP,ou=People,o=isp\n+owner: uid=syncFromLDAP,ou=People,o=isp\n+\n+DN: uid=syncFromLDAP,ou=People,o=isp\n+objectClass: organizationalPerson\n+objectClass: person\n+objectClass: inetOrgPerson\n+objectClass: top\n+cn: Sync from LDAP\n+description: Active\n+mail: syncFromLDAP@syncope.apache.org\n+sn: Surname\n+uid: syncFromLDAP\n+userpassword:: cGFzc3dvcmQxMjM="},{"sha":"c0aec05fec3ce4c7e8400fe0ea911da27c056d75","filename":"build-tools/src/main/resources/log4j.xml","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fresources%2Flog4j.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+\n+-->\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\" >\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n+  <appender name=\"stdout\" class=\"org.apache.log4j.ConsoleAppender\">\n+    <layout class=\"org.apache.log4j.PatternLayout\">\n+      <param name=\"ConversionPattern\" value=\"%d{dd.MM.yyyy HH:mm:ss} %-5p [%C.%M():%L] %m%n\"/>\n+    </layout>\n+  </appender>\n+    \n+  <category name=\"org.apache.directory\">\n+    <level value=\"off\"/>\n+  </category>\n+    \n+  <root>\n+    <priority value=\"info\"/>\n+    <appender-ref ref=\"stdout\"/>\n+  </root>\n+</log4j:configuration>"},{"sha":"ed27f9136c2ca8fdf4dfe455df9a2fe723b8fc2d","filename":"build-tools/src/main/resources/org/apache/syncope/checkstyle.xml","status":"added","additions":215,"deletions":0,"changes":215,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fcheckstyle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fcheckstyle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fcheckstyle.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,215 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+\n+-->\n+<!DOCTYPE module PUBLIC \"-//Puppy Crawl//DTD Check Configuration 1.2//EN\"\n+\"http://www.puppycrawl.com/dtds/configuration_1_2.dtd\">\n+<!--\n+\n+  Checkstyle configuration that checks the sun coding conventions from:\n+\n+    - the Java Language Specification at\n+      http://java.sun.com/docs/books/jls/second_edition/html/index.html\n+\n+    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/\n+\n+    - the Javadoc guidelines at\n+      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html\n+\n+    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html\n+\n+    - some best practices\n+\n+  Checkstyle is very configurable. Be sure to read the documentation at\n+  http://checkstyle.sf.net (or in your downloaded distribution).\n+\n+  Most Checks are configurable, be sure to consult the documentation.\n+\n+  To completely disable a check, just comment it out or delete it from the file.\n+\n+  Finally, it is worth reading the documentation.\n+\n+-->\n+<module name=\"Checker\">\n+    <!--\n+        If you set the basedir property below, then all reported file\n+        names will be relative to the specified directory. See\n+        http://checkstyle.sourceforge.net/5.x/config.html#Checker\n+\n+        <property name=\"basedir\" value=\"${basedir}\"/>\n+    -->\n+\n+    <!-- Checks that a package-info.java file exists for each package.     -->\n+    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->\n+  <module name=\"JavadocPackage\"/>\n+\n+    <!-- Checks whether files end with a new line.                        -->\n+    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->\n+  <module name=\"NewlineAtEndOfFile\"/>\n+\n+    <!-- Checks that property files contain the same keys.         -->\n+    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->\n+  <module name=\"Translation\"/>\n+    \n+    <!-- Checks for Size Violations.                    -->\n+    <!-- See http://checkstyle.sf.net/config_sizes.html -->\n+  <module name=\"FileLength\"/>\n+    \n+    <!-- Checks for whitespace                               -->\n+    <!-- See http://checkstyle.sf.net/config_whitespace.html -->\n+  <module name=\"FileTabCharacter\"/>\n+\n+    <!-- Miscellaneous other checks.                   -->\n+    <!-- See http://checkstyle.sf.net/config_misc.html -->\n+  <module name=\"RegexpSingleline\">\n+    <property name=\"format\" value=\"\\s+$\"/>\n+    <property name=\"minimum\" value=\"0\"/>\n+    <property name=\"maximum\" value=\"2\"/>\n+    <property name=\"message\" value=\"Line has trailing spaces.\"/>\n+  </module>\n+\n+  <module name=\"TreeWalker\">\n+\n+    <property name=\"cacheFile\" value=\"target/checkstyle.cache\"/>\n+\n+        <!-- Checks for Javadoc comments.                     -->\n+        <!-- See http://checkstyle.sf.net/config_javadoc.html -->\n+    <module name=\"JavadocMethod\"/>\n+    <module name=\"JavadocType\"/>\n+    <module name=\"JavadocVariable\"/>\n+    <module name=\"JavadocStyle\"/>\n+\n+\n+        <!-- Checks for Naming Conventions.                  -->\n+        <!-- See http://checkstyle.sf.net/config_naming.html -->\n+    <module name=\"ConstantName\"/>\n+    <module name=\"LocalFinalVariableName\"/>\n+    <module name=\"LocalVariableName\"/>\n+    <module name=\"MemberName\"/>\n+    <module name=\"MethodName\"/>\n+    <module name=\"PackageName\"/>\n+    <module name=\"ParameterName\"/>\n+    <module name=\"StaticVariableName\"/>\n+    <module name=\"TypeName\"/>\n+\n+\n+        <!-- Checks for Headers                                -->\n+        <!-- See http://checkstyle.sf.net/config_header.html   -->\n+        <!-- <module name=\"Header\">                            -->\n+            <!-- The follow property value demonstrates the ability     -->\n+            <!-- to have access to ANT properties. In this case it uses -->\n+            <!-- the ${basedir} property to allow Checkstyle to be run  -->\n+            <!-- from any directory within a project. See property      -->\n+            <!-- expansion,                                             -->\n+            <!-- http://checkstyle.sf.net/config.html#properties        -->\n+            <!-- <property                                              -->\n+            <!--     name=\"headerFile\"                                  -->\n+            <!--     value=\"${basedir}/java.header\"/>                   -->\n+        <!-- </module> -->\n+\n+        <!-- Following interprets the header file as regular expressions. -->\n+        <!-- <module name=\"RegexpHeader\"/>                                -->\n+\n+\n+        <!-- Checks for imports                              -->\n+        <!-- See http://checkstyle.sf.net/config_import.html -->\n+    <module name=\"AvoidStarImport\"/>\n+    <module name=\"IllegalImport\"/> <!-- defaults to sun.* packages -->\n+    <module name=\"RedundantImport\"/>\n+    <module name=\"UnusedImports\"/>\n+\n+\n+        <!-- Checks for Size Violations.                    -->\n+        <!-- See http://checkstyle.sf.net/config_sizes.html -->\n+    <module name=\"LineLength\">\n+      <property name=\"max\" value=\"120\"/>\n+      <property name=\"ignorePattern\" value=\"^import\"/>\n+    </module>\n+    <module name=\"MethodLength\"/>\n+    <module name=\"ParameterNumber\"/>\n+\n+\n+        <!-- Checks for whitespace                               -->\n+        <!-- See http://checkstyle.sf.net/config_whitespace.html -->\n+    <module name=\"EmptyForIteratorPad\"/>\n+    <module name=\"GenericWhitespace\"/>\n+    <module name=\"MethodParamPad\"/>\n+    <!--<module name=\"NoWhitespaceAfter\"/>\n+    <module name=\"NoWhitespaceBefore\"/>-->\n+    <module name=\"OperatorWrap\"/>\n+    <module name=\"ParenPad\"/>\n+    <module name=\"TypecastParenPad\"/>\n+    <module name=\"WhitespaceAfter\"/>\n+    <module name=\"WhitespaceAround\"/>\n+\n+\n+        <!-- Modifier Checks                                    -->\n+        <!-- See http://checkstyle.sf.net/config_modifiers.html -->\n+    <module name=\"ModifierOrder\"/>\n+    <module name=\"RedundantModifier\"/>\n+\n+\n+        <!-- Checks for blocks. You know, those {}'s         -->\n+        <!-- See http://checkstyle.sf.net/config_blocks.html -->\n+    <module name=\"AvoidNestedBlocks\"/>\n+    <module name=\"EmptyBlock\"/>\n+    <module name=\"LeftCurly\"/>\n+    <module name=\"NeedBraces\"/>\n+    <module name=\"RightCurly\"/>\n+\n+\n+        <!-- Checks for common coding problems               -->\n+        <!-- See http://checkstyle.sf.net/config_coding.html -->\n+<!--        <module name=\"AvoidInlineConditionals\"/>-->\n+    <!--module name=\"DoubleCheckedLocking\"/-->    <!-- MY FAVOURITE -->\n+    <module name=\"EmptyStatement\"/>\n+    <module name=\"EqualsHashCode\"/>\n+    <module name=\"HiddenField\">\n+      <property name=\"ignoreSetter\" value=\"true\"/>\n+      <property name=\"ignoreConstructorParameter\" value=\"true\"/>\n+    </module>\n+    <module name=\"IllegalInstantiation\"/>\n+    <module name=\"InnerAssignment\"/>\n+        <!--<module name=\"MagicNumber\"/>-->\n+    <module name=\"MissingSwitchDefault\"/>\n+    <module name=\"RedundantThrows\"/>\n+    <module name=\"SimplifyBooleanExpression\"/>\n+    <module name=\"SimplifyBooleanReturn\"/>\n+\n+        <!-- Checks for class design                         -->\n+        <!-- See http://checkstyle.sf.net/config_design.html -->\n+        <!--<module name=\"DesignForExtension\"/>-->\n+    <module name=\"FinalClass\"/>\n+    <module name=\"HideUtilityClassConstructor\"/>\n+    <module name=\"InterfaceIsType\"/>\n+    <module name=\"VisibilityModifier\">\n+      <property name=\"protectedAllowed\" value=\"true\"/>\n+    </module>\n+\n+\n+        <!-- Miscellaneous other checks.                   -->\n+        <!-- See http://checkstyle.sf.net/config_misc.html -->\n+    <module name=\"ArrayTypeStyle\"/>\n+    <module name=\"FinalParameters\"/>\n+    <module name=\"TodoComment\"/>\n+    <module name=\"UpperEll\"/>\n+\n+  </module>\n+\n+</module>"},{"sha":"d491f7f80b46c3d63f26492c4c1223cb8663d3f0","filename":"build-tools/src/main/resources/org/apache/syncope/java-formatter.xml","status":"added","additions":310,"deletions":0,"changes":310,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fjava-formatter.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fjava-formatter.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fjava-formatter.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,310 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+\n+-->\n+<profiles version=\"12\">\n+  <profile kind=\"CodeFormatterProfile\" name=\"Syncope\" version=\"12\">\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.disabling_tag\" value=\"@formatter:off\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration\" value=\"end_of_line\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.blank_lines_before_field\" value=\"0\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.use_on_off_tags\" value=\"false\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line\" value=\"false\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_ellipsis\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_multiple_fields\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_conditional_expression\" value=\"49\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_binary_operator\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_array_initializer\" value=\"end_of_line\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.blank_lines_after_package\" value=\"1\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.continuation_indentation\" value=\"2\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk\" value=\"1\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_binary_operator\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.blank_lines_before_package\" value=\"0\"/>\n+    <setting id=\"org.eclipse.jdt.core.compiler.source\" value=\"1.7\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.format_line_comments\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.join_wrapped_lines\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.blank_lines_before_member_type\" value=\"1\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.align_type_members_on_columns\" value=\"false\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_unary_operator\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.indent_parameter_description\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.lineSplit\" value=\"120\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration\" value=\"0\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.indentation.size\" value=\"4\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.enabling_tag\" value=\"@formatter:on\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_assignment\" value=\"0\"/>\n+    <setting id=\"org.eclipse.jdt.core.compiler.problem.assertIdentifier\" value=\"error\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.tabulation.char\" value=\"space\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.indent_statements_compare_to_body\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.blank_lines_before_method\" value=\"1\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line\" value=\"false\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration\" value=\"end_of_line\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_method_declaration\" value=\"0\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_switch\" value=\"end_of_line\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments\" value=\"false\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.compiler.problem.enumIdentifier\" value=\"error\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_ellipsis\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_block\" value=\"end_of_line\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_method_declaration\" value=\"end_of_line\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.compact_else_if\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_enum_constant\" value=\"end_of_line\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.indent_root_tags\" value=\"false\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.tabulation.size\" value=\"4\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment\" value=\"false\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration\" value=\"32\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.indent_empty_lines\" value=\"false\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_block_in_case\" value=\"end_of_line\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve\" value=\"1\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.compiler.compliance\" value=\"1.7\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer\" value=\"2\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_unary_operator\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line\" value=\"false\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line\" value=\"false\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_binary_expression\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration\" value=\"end_of_line\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode\" value=\"enabled\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_after_label\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant\" value=\"48\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.format_javadoc_comments\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.line_length\" value=\"120\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.blank_lines_between_import_groups\" value=\"1\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_semicolon\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration\" value=\"end_of_line\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body\" value=\"0\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.wrap_before_binary_operator\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations\" value=\"1\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.indent_statements_compare_to_block\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration\" value=\"48\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.join_lines_in_comments\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_compact_if\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.blank_lines_before_imports\" value=\"1\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.format_html\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration\" value=\"32\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.format_source_code\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.compiler.codegen.targetPlatform\" value=\"1.7\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_resources_in_try\" value=\"120\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations\" value=\"false\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation\" value=\"16\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.format_header\" value=\"false\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.format_block_comments\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.alignment_for_enum_constants\" value=\"49\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_type_declaration\" value=\"end_of_line\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.blank_lines_after_imports\" value=\"1\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header\" value=\"true\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for\" value=\"insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column\" value=\"false\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments\" value=\"do not insert\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column\" value=\"false\"/>\n+    <setting id=\"org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line\" value=\"false\"/>\n+  </profile>\n+</profiles>"},{"sha":"1073dce65fa0e8a4c140c941e91b34ddb07387f8","filename":"build-tools/src/main/resources/org/apache/syncope/pmd.xml","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fpmd.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fpmd.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fpmd.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+\n+-->\n+<ruleset name=\"Syncope\"\n+         xmlns=\"http://pmd.sf.net/ruleset/1.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd\"\n+         xsi:noNamespaceSchemaLocation=\"http://pmd.sf.net/ruleset_xml_schema.xsd\">\n+        \n+  <rule ref=\"rulesets/basic.xml\"/>\n+  <rule ref=\"rulesets/naming.xml\">\n+    <exclude name=\"ShortVariable\"/>\n+    <exclude name=\"LongVariable\"/>\n+  </rule>\n+  <rule ref=\"rulesets/unusedcode.xml\"/>\n+  <rule ref=\"rulesets/design.xml\"/>\n+  <rule ref=\"rulesets/imports.xml\"/>\n+  <rule ref=\"rulesets/strings.xml\">\n+    <exclude name=\"AvoidDuplicateLiterals\"/>\n+  </rule>\n+  <rule ref=\"rulesets/codesize.xml\"/>\n+  <rule ref=\"rulesets/javabeans.xml\">\n+    <exclude name=\"BeanMembersShouldSerialize\"/>\n+  </rule>\n+  <rule ref=\"rulesets/coupling.xml\"/>\n+  <rule ref=\"rulesets/controversial.xml\">\n+    <exclude name=\"NullAssignment\"/>\n+    <exclude name=\"DataflowAnomalyAnalysis\"/>\n+  </rule>\n+  <rule ref=\"rulesets/strictexception.xml\"/>\n+  <rule ref=\"rulesets/typeresolution.xml\"/>\n+    \n+</ruleset>"},{"sha":"b9d33435ff624c50d1348410c0136e53e4729c00","filename":"build-tools/src/main/resources/testdb.sql","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fresources%2Ftestdb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fresources%2Ftestdb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fresources%2Ftestdb.sql?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,39 @@\n+-- Licensed under the Apache License, Version 2.0 (the \"License\");\n+-- you may not use this file except in compliance with the License.\n+-- You may obtain a copy of the License at\n+--\n+--       http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+ALTER USER sa SET PASSWORD '${testdb.password}';\n+\n+DROP TABLE test IF EXISTS;\n+CREATE TABLE test (\n+id VARCHAR(50) PRIMARY KEY,\n+password VARCHAR(255) NOT NULL,\n+status VARCHAR(5));\n+\n+INSERT INTO test VALUES ('testuser1', 'password', 'false');\n+\n+-- this table must be created in order to provide a specific test for issueSYNCOPE68\n+DROP TABLE test2 IF EXISTS;\n+CREATE TABLE test2 (\n+id VARCHAR(50) PRIMARY KEY,\n+password VARCHAR(255) NOT NULL,\n+status VARCHAR(5));\n+\n+INSERT INTO test2 VALUES ('testuser2', 'password321', 'false');\n+\n+-- this table is for issueSYNCOPE230\n+DROP TABLE testsync IF EXISTS;\n+CREATE TABLE TESTSYNC (\n+id NUMBER(10) PRIMARY KEY,\n+username VARCHAR(80),\n+surname VARCHAR(80),\n+email VARCHAR(80));\n+\n+INSERT INTO testsync VALUES (965, 'issuesyncope230', 'Surname', 'syncope230@syncope.apache.org');"},{"sha":"f2a433284d360a14de2da2d146395de743696a39","filename":"build-tools/src/main/webapp/WEB-INF/glassfish-web.xml","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fglassfish-web.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fglassfish-web.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fglassfish-web.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+\n+-->\n+<!DOCTYPE glassfish-web-app PUBLIC \"-//GlassFish.org//DTD \n+GlassFish Application Server 3.1 Servlet 3.0//EN\" \"http://glassfish.org/dtds/glassfish-web-app_3_0-1.dtd\">\n+<glassfish-web-app>\n+  <class-loader delegate=\"false\"/>\n+</glassfish-web-app>"},{"sha":"89aeb589c1d72bb4311c1df89e9b5b3b5a7a3b4f","filename":"build-tools/src/main/webapp/WEB-INF/web.xml","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,88 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<web-app version=\"2.5\" xmlns=\"http://java.sun.com/xml/ns/javaee\" \n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n+         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n+                             http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\">\n+  <context-param>\n+    <param-name>testds.port</param-name>\n+    <param-value>${testds.port}</param-value>\n+  </context-param>\n+  <context-param>\n+    <param-name>testdb.webport</param-name>\n+    <param-value>${testdb.webport}</param-value>\n+  </context-param>\n+  <context-param>\n+    <param-name>testconnectorserver.port</param-name>\n+    <param-value>${testconnectorserver.port}</param-value>\n+  </context-param>\n+  <context-param>\n+    <param-name>testconnectorserver.key</param-name>\n+    <param-value>${testconnectorserver.key}</param-value>\n+  </context-param>\n+  <context-param>\n+    <param-name>testconnectorserver.soap.bundle</param-name>\n+    <param-value>org.connid.bundles.soap-${connid.soap.version}.jar</param-value>\n+  </context-param>\n+  <context-param>\n+    <param-name>testconnectorserver.db.bundle</param-name>\n+    <param-value>org.connid.bundles.db.table-${connid.db.table.version}.jar</param-value>\n+  </context-param>\n+  <context-param>\n+    <param-name>testconnectorserver.csvdir.bundle</param-name>\n+    <param-value>org.connid.bundles.csvdir-${connid.csvdir.version}.jar</param-value>\n+  </context-param>\n+  <context-param>\n+    <param-name>testconnectorserver.ldap.bundle</param-name>\n+    <param-value>org.connid.bundles.ldap-${connid.ldap.version}.jar</param-value>\n+  </context-param>\n+  <context-param>\n+    <param-name>contextConfigLocation</param-name>\n+    <param-value>classpath*:/*Context.xml</param-value>\n+  </context-param>\n+  <listener>\n+    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n+  </listener>\n+  <listener>\n+    <listener-class>org.apache.syncope.buildtools.ApacheDSStartStopListener</listener-class>\n+  </listener>\n+  <listener>\n+    <listener-class>org.apache.syncope.buildtools.H2StartStopListener</listener-class>\n+  </listener>\n+  <listener>\n+    <listener-class>org.apache.syncope.buildtools.ConnIdStartStopListener</listener-class>\n+  </listener>\n+  <servlet>\n+    <servlet-name>ApacheDSRootDseServlet</servlet-name>\n+    <servlet-class>org.apache.syncope.buildtools.ApacheDSRootDseServlet</servlet-class>\n+  </servlet>\n+  <servlet>\n+    <servlet-name>ServiceTimeoutServlet</servlet-name>\n+    <servlet-class>org.apache.syncope.buildtools.ServiceTimeoutServlet</servlet-class>\n+  </servlet>\n+  <servlet-mapping>\n+    <servlet-name>ApacheDSRootDseServlet</servlet-name>\n+    <url-pattern>/apacheDS</url-pattern>\n+  </servlet-mapping>\n+  <servlet-mapping>\n+    <servlet-name>ServiceTimeoutServlet</servlet-name>\n+    <url-pattern>/services/*</url-pattern>\n+  </servlet-mapping>\n+</web-app>"},{"sha":"3d429a5b574ccdbb675e9eff909f0ed3ba1ef1d1","filename":"build-tools/src/main/webapp/WEB-INF/weblogic.xml","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweblogic.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/build-tools%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweblogic.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweblogic.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<weblogic-web-app xmlns=\"http://xmlns.oracle.com/weblogic/weblogic-web-app\" \n+                  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n+                  xsi:schemaLocation=\"http://xmlns.oracle.com/weblogic/weblogic-web-app\n+                                      http://xmlns.oracle.com/weblogic/weblogic-web-app/1.4/weblogic-web-app.xsd\">\n+\n+  <context-root>syncope-build-tools</context-root>\n+  \n+  <container-descriptor>\n+    <prefer-application-packages>\n+      <package-name>org.slf4j.*</package-name>\n+    </prefer-application-packages>\n+  </container-descriptor>\n+  \n+</weblogic-web-app>\n\\ No newline at end of file"},{"sha":"ac8f39f5449f070edf0583309f8c54774d8959eb","filename":"client/pom.xml","status":"added","additions":138,"deletions":0,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fpom.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,138 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope</artifactId>\n+    <version>1.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Client</name>\n+  <description>Apache Syncope Client</description>\n+  <groupId>org.apache.syncope</groupId>\n+  <artifactId>syncope-client</artifactId>\n+  <packaging>bundle</packaging>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>syncope.website</id>\n+      <name>Apache Syncope website</name>\n+      <url>${site.deploymentBaseUrl}/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+  \n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-common</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  \n+    <dependency>\n+      <groupId>javax.ws.rs</groupId>\n+      <artifactId>javax.ws.rs-api</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-frontend-jaxrs</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-web</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.codehaus.jackson</groupId>\n+      <artifactId>jackson-mapper-asl</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.httpcomponents</groupId>\n+      <artifactId>httpcore</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.httpcomponents</groupId>\n+      <artifactId>httpclient</artifactId>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>ch.qos.logback</groupId>\n+      <artifactId>logback-classic</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.felix</groupId>\n+        <artifactId>maven-bundle-plugin</artifactId>\n+        <extensions>true</extensions>\n+        <configuration>\n+          <instructions>\n+            <Bundle-Name>${project.name}</Bundle-Name>\n+            <Bundle-SymbolicName>org.apache.syncope.client</Bundle-SymbolicName>\n+            <Bundle-Version>${project.version}</Bundle-Version>\n+            <Export-Package>\n+              org.apache.syncope.client*;version=${project.version};-split-package:=merge-first\n+            </Export-Package>\n+            <Import-Package>\n+              org.apache.http*;version=\"[4,5)\",\n+              org.codehaus.jackson.annotate;version=\"[1.9,2)\",\n+              org.springframework*;version=\"[3,4)\",\n+              ch.qos.logback.classic;resolution:=optional,\n+              org.slf4j;resolution:=optional,\n+              *\n+            </Import-Package>\n+          </instructions>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-pmd-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+    \n+    <resources>\n+      <resource>\n+        <directory>..</directory>\n+        <targetPath>META-INF</targetPath>\n+        <includes>\n+          <include>LICENSE</include>\n+          <include>NOTICE</include>\n+        </includes>\n+      </resource>\n+    </resources>\n+  </build>\n+</project>"},{"sha":"88a65e07ca6328d91345e5229a5426392428f8b6","filename":"client/src/main/java/org/apache/syncope/client/http/HttpClientParams.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FHttpClientParams.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FHttpClientParams.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FHttpClientParams.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.http;\n+\n+import java.util.Map;\n+import org.apache.http.params.SyncBasicHttpParams;\n+\n+public class HttpClientParams extends SyncBasicHttpParams {\n+\n+    public void setParameterMap(final Map<String, Object> parameters) {\n+        clear();\n+        \n+        for (Map.Entry<String, Object> entry : parameters.entrySet()) {\n+            setParameter(entry.getKey(), entry.getValue());\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"8f4b19d2eaf225bb211f8d502a3c56bf5595a766","filename":"client/src/main/java/org/apache/syncope/client/http/PreemptiveAuthHttpRequestFactory.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FPreemptiveAuthHttpRequestFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FPreemptiveAuthHttpRequestFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FPreemptiveAuthHttpRequestFactory.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.http;\n+\n+import java.net.URI;\n+import org.apache.http.HttpHost;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.client.AuthCache;\n+import org.apache.http.client.protocol.ClientContext;\n+import org.apache.http.conn.ClientConnectionManager;\n+import org.apache.http.impl.auth.BasicScheme;\n+import org.apache.http.impl.client.BasicAuthCache;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.http.params.HttpParams;\n+import org.apache.http.protocol.BasicHttpContext;\n+import org.apache.http.protocol.HttpContext;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n+\n+/**\n+ * Factory for DefaultContextHttpClient, with preemptive BASIC authentication.\n+ *\n+ * @see DefaultContextHttpClient\n+ */\n+public class PreemptiveAuthHttpRequestFactory extends HttpComponentsClientHttpRequestFactory {\n+\n+    private final HttpHost targetHost;\n+\n+    public PreemptiveAuthHttpRequestFactory(final String host, final int port, final String scheme) {\n+\n+        super();\n+        targetHost = new HttpHost(host, port, scheme);\n+    }\n+\n+    public PreemptiveAuthHttpRequestFactory(final String host, final int port, final String scheme,\n+            final ClientConnectionManager conman, final HttpParams params) {\n+\n+        super(new DefaultHttpClient(conman, params));\n+        targetHost = new HttpHost(host, port, scheme);\n+    }\n+\n+    public AuthScope getAuthScope() {\n+        return new AuthScope(targetHost.getHostName(), targetHost.getPort());\n+    }\n+\n+    @Override\n+    protected HttpContext createHttpContext(final HttpMethod httpMethod, final URI uri) {\n+\n+        // Add AuthCache to the execution context\n+        BasicHttpContext localcontext = new BasicHttpContext();\n+\n+        // Generate BASIC scheme object and add it to the local auth cache\n+        AuthCache authCache = new BasicAuthCache();\n+        authCache.put(targetHost, new BasicScheme());\n+        localcontext.setAttribute(ClientContext.AUTH_CACHE, authCache);\n+\n+        return localcontext;\n+    }\n+}"},{"sha":"33234bee93ae24bb8c7e37569b88246d06330d7b","filename":"client/src/main/java/org/apache/syncope/client/rest/utils/RestClientExceptionMapper.java","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,135 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.rest.utils;\r\n+\r\n+import java.security.AccessControlException;\r\n+import java.util.ArrayList;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import javax.ws.rs.BadRequestException;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.ext.ExceptionMapper;\r\n+import javax.ws.rs.ext.Provider;\r\n+import javax.xml.ws.WebServiceException;\r\n+import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\r\n+import org.apache.http.HttpStatus;\r\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\r\n+import org.apache.syncope.common.validation.SyncopeClientErrorHandler;\r\n+import org.apache.syncope.common.validation.SyncopeClientException;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+@Provider\r\n+public class RestClientExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\r\n+\r\n+    private static final Logger LOG = LoggerFactory.getLogger(RestClientExceptionMapper.class);\r\n+\r\n+    @Override\r\n+    public Response toResponse(final Exception exception) {\r\n+        throw new UnsupportedOperationException(\r\n+                \"Call of toResponse() method is not expected in RestClientExceptionnMapper\");\r\n+    }\r\n+\r\n+    @Override\r\n+    public Exception fromResponse(final Response response) {\r\n+        Exception ex = null;\r\n+        final int statusCode = response.getStatus();\r\n+\r\n+        // 1. Check for composite exception in HTTP header\r\n+        SyncopeClientCompositeErrorException scce = checkCompositeException(response);\r\n+        if (scce != null) {\r\n+            ex = scce;\r\n+\r\n+            // TODO reduce SCCEE to really composite ones and use normal exception for others\r\n+            // } else if (statusCode == HttpStatus.SC_FORBIDDEN) {\r\n+            // ex = new UnauthorizedRoleException(-1L);\r\n+\r\n+            // 2. Map SC_UNAUTHORIZED\r\n+        } else if (statusCode == HttpStatus.SC_UNAUTHORIZED) {\r\n+            ex = new AccessControlException(\"Remote unauthorized exception\");\r\n+\r\n+            // 3. Map SC_BAD_REQUEST\r\n+        } else if (statusCode == HttpStatus.SC_BAD_REQUEST) {\r\n+            ex = new BadRequestException();\r\n+\r\n+        } else {\r\n+            // 4. All other codes are mapped to runtime exception with HTTP code information\r\n+            ex = new WebServiceException(String.format(\"Remote exception with status code: %s\",\r\n+                    Response.Status.fromStatusCode(statusCode).name()));\r\n+        }\r\n+        LOG.error(\"Exception thrown by REST methods: \" + ex.getMessage(), ex);\r\n+        return ex;\r\n+    }\r\n+\r\n+    private SyncopeClientCompositeErrorException checkCompositeException(final Response response) {\r\n+        final int statusCode = response.getStatus();\r\n+        List<Object> exTypesInHeaders = response.getHeaders().get(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER);\r\n+        if (exTypesInHeaders == null) {\r\n+            LOG.debug(\"No \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \" provided\");\r\n+            return null;\r\n+        }\r\n+\r\n+        final SyncopeClientCompositeErrorException compException = new SyncopeClientCompositeErrorException(\r\n+                org.springframework.http.HttpStatus.valueOf(statusCode));\r\n+\r\n+        final Set<String> handledExceptions = new HashSet<String>();\r\n+        for (Object exceptionTypeValue : exTypesInHeaders) {\r\n+            final String exTypeAsString = (String) exceptionTypeValue;\r\n+            SyncopeClientExceptionType exceptionType = null;\r\n+            try {\r\n+                exceptionType = SyncopeClientExceptionType.getFromHeaderValue(exTypeAsString);\r\n+            } catch (IllegalArgumentException e) {\r\n+                LOG.error(\"Unexpected value of \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \": \"\r\n+                        + exTypeAsString, e);\r\n+            }\r\n+            if (exceptionType != null) {\r\n+                handledExceptions.add(exTypeAsString);\r\n+\r\n+                final SyncopeClientException clientException = new SyncopeClientException();\r\n+                clientException.setType(exceptionType);\r\n+                if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null\r\n+                        && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {\r\n+                    // TODO update clientException to support list of objects\r\n+                    final List<Object> elObjectList = response.getHeaders().get(exceptionType.getElementHeaderName());\r\n+                    final List<String> elStringList = new ArrayList<String>();\r\n+                    for (Object elementObject : elObjectList) {\r\n+                        if (elementObject instanceof String) {\r\n+                            elStringList.add((String) elementObject);\r\n+                        }\r\n+                    }\r\n+                    clientException.setElements(elStringList);\r\n+                }\r\n+                compException.addException(clientException);\r\n+            }\r\n+        }\r\n+\r\n+        exTypesInHeaders.removeAll(handledExceptions);\r\n+        if (!exTypesInHeaders.isEmpty()) {\r\n+            LOG.error(\"Unmanaged exceptions: \" + exTypesInHeaders);\r\n+        }\r\n+\r\n+        if (compException.hasExceptions()) {\r\n+            return compException;\r\n+        }\r\n+\r\n+        return null;\r\n+    }\r\n+}\r"},{"sha":"80aba3ebe70cc9d3177fa2ba5192f1c68b6282f9","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ConfigurationServiceProxy.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,97 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import java.io.UnsupportedEncodingException;\r\n+import java.net.URI;\r\n+import java.net.URLEncoder;\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import javax.ws.rs.InternalServerErrorException;\r\n+import javax.ws.rs.core.Response;\r\n+import org.apache.syncope.common.SyncopeConstants;\r\n+import org.apache.syncope.common.services.ConfigurationService;\r\n+import org.apache.syncope.common.to.ConfigurationTO;\r\n+import org.apache.syncope.common.to.MailTemplateTO;\r\n+import org.apache.syncope.common.to.ValidatorTO;\r\n+import org.apache.syncope.common.util.CollectionWrapper;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class ConfigurationServiceProxy extends SpringServiceProxy implements ConfigurationService {\r\n+\r\n+    public ConfigurationServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Response create(final ConfigurationTO configurationTO) {\r\n+        ConfigurationTO created = getRestTemplate().postForObject(baseUrl + \"configuration/create\", configurationTO,\r\n+                ConfigurationTO.class);\r\n+        try {\r\n+            URI location = URI.create(baseUrl\r\n+                    + \"configuration/read/\"\r\n+                    + URLEncoder.encode(created.getKey(), SyncopeConstants.DEFAULT_ENCODING)\r\n+                    + \".json\");\r\n+            return Response.created(location)\r\n+                    .header(SyncopeConstants.REST_HEADER_ID, created.getKey())\r\n+                    .build();\r\n+        } catch (UnsupportedEncodingException e) {\r\n+            throw new InternalServerErrorException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final String key) {\r\n+        getRestTemplate().getForObject(baseUrl + \"configuration/delete/{key}.json\", ConfigurationTO.class, key);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ConfigurationTO> list() {\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"configuration/list.json\",\r\n+                ConfigurationTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConfigurationTO read(final String key) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"configuration/read/{key}.json\", ConfigurationTO.class, key);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void update(final String key, final ConfigurationTO configurationTO) {\r\n+        getRestTemplate().postForObject(baseUrl + \"configuration/update\", configurationTO, ConfigurationTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<ValidatorTO> getValidators() {\r\n+        return CollectionWrapper.wrapValidators(\r\n+                handlePossiblyEmptyStringCollection(baseUrl + \"configuration/validators.json\"));\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<MailTemplateTO> getMailTemplates() {\r\n+        return CollectionWrapper.wrapMailTemplates(\r\n+                handlePossiblyEmptyStringCollection(baseUrl + \"configuration/mailTemplates.json\"));\r\n+    }\r\n+\r\n+    @Override\r\n+    public Response dbExport() {\r\n+        return handleStream(baseUrl + \"configuration/dbexport\");\r\n+    }\r\n+}\r"},{"sha":"2a500954c5b0b0fa71ed8413b2077cdb85d46d52","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ConnectorServiceProxy.java","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,129 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import java.net.URI;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+import javax.ws.rs.core.Response;\r\n+import org.apache.syncope.common.services.ConnectorService;\r\n+import org.apache.syncope.common.to.BulkAction;\r\n+import org.apache.syncope.common.to.BulkActionRes;\r\n+import org.apache.syncope.common.to.ConnBundleTO;\r\n+import org.apache.syncope.common.to.ConnInstanceTO;\r\n+import org.apache.syncope.common.to.SchemaTO;\r\n+import org.apache.syncope.common.types.ConnConfProperty;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class ConnectorServiceProxy extends SpringServiceProxy implements ConnectorService {\r\n+\r\n+    public ConnectorServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Response create(final ConnInstanceTO connInstanceTO) {\r\n+        ConnInstanceTO response = getRestTemplate().postForObject(baseUrl + \"connector/create.json\", connInstanceTO,\r\n+                ConnInstanceTO.class);\r\n+        URI location = URI.create(baseUrl + \"connector/read/\" + response.getId() + \".json\");\r\n+        return Response.created(location).build();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void update(final Long connInstanceId, final ConnInstanceTO connInstanceTO) {\r\n+        getRestTemplate().postForObject(baseUrl + \"connector/update.json\", connInstanceTO, ConnInstanceTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final Long connInstanceId) {\r\n+        getRestTemplate().getForObject(baseUrl + \"connector/delete/{connInstanceId}.json\", ConnInstanceTO.class,\r\n+                connInstanceId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ConnInstanceTO> list(final String lang) {\r\n+        String param = (lang == null)\r\n+                ? \"\"\r\n+                : \"?lang=\" + lang;\r\n+\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"connector/list.json\" + param,\r\n+                ConnInstanceTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConnInstanceTO read(final Long connInstanceId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"connector/read/{connInstanceId}\", ConnInstanceTO.class,\r\n+                connInstanceId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ConnBundleTO> getBundles(final String lang) {\r\n+        String param = (lang == null)\r\n+                ? \"\"\r\n+                : \"?lang=\" + lang;\r\n+\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"connector/bundle/list.json\" + param,\r\n+                ConnBundleTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<SchemaTO> getSchemaNames(final Long connInstanceId, final ConnInstanceTO connInstanceTO,\r\n+            final boolean showall) {\r\n+        final String queryString = \"?showall=\" + showall;\r\n+\r\n+        List<String> response = Arrays.asList(getRestTemplate().postForObject(\r\n+                baseUrl + \"connector/schema/list\" + queryString, connInstanceTO, String[].class));\r\n+        List<SchemaTO> schemaNames = new ArrayList<SchemaTO>();\r\n+        for (String name : response) {\r\n+            SchemaTO schemaTO = new SchemaTO();\r\n+            schemaTO.setName(name);\r\n+            schemaNames.add(schemaTO);\r\n+        }\r\n+        return schemaNames;\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ConnConfProperty> getConfigurationProperties(final Long connInstanceId) {\r\n+        return Arrays.asList(getRestTemplate().getForObject(\r\n+                baseUrl + \"connector/{connInstanceId}/configurationProperty/list\", ConnConfProperty[].class,\r\n+                connInstanceId));\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean check(final ConnInstanceTO connInstanceTO) {\r\n+        return getRestTemplate().postForObject(baseUrl + \"connector/check.json\", connInstanceTO, Boolean.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConnInstanceTO readByResource(final String resourceName) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"connector/{resourceName}/readByResource\",\r\n+                ConnInstanceTO.class, resourceName);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void reload() {\r\n+        getRestTemplate().postForLocation(baseUrl + \"connector/reload\", null);\r\n+    }\r\n+\r\n+    @Override\r\n+    public BulkActionRes bulkAction(final BulkAction bulkAction) {\r\n+        return getRestTemplate().postForObject(baseUrl + \"connector/bulk\", bulkAction, BulkActionRes.class);\r\n+    }\r\n+}\r"},{"sha":"d46338ed4889544d82ddd941f2dfedfa9e4073a3","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/EntitlementServiceProxy.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FEntitlementServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+import org.apache.syncope.common.services.EntitlementService;\r\n+import org.apache.syncope.common.to.EntitlementTO;\r\n+import org.apache.syncope.common.util.CollectionWrapper;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class EntitlementServiceProxy extends SpringServiceProxy implements EntitlementService {\r\n+\r\n+    public EntitlementServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<EntitlementTO> getAllEntitlements() {\r\n+        Set<String> entitlements = new HashSet<String>(Arrays.asList(new RestTemplate().getForObject(\r\n+                baseUrl + \"auth/allentitlements.json\", String[].class)));\r\n+        return CollectionWrapper.wrap(entitlements);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<EntitlementTO> getMyEntitlements() {\r\n+        Set<String> entitlements = new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n+                baseUrl + \"auth/entitlements.json\", String[].class)));\r\n+        return CollectionWrapper.wrap(entitlements);\r\n+    }\r\n+}\r"},{"sha":"af57998ab56977962eae635b014b8c84db9d8f79","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/LoggerServiceProxy.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,107 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.BadRequestException;\r\n+import javax.ws.rs.NotFoundException;\r\n+\r\n+import org.apache.syncope.common.services.LoggerService;\r\n+import org.apache.syncope.common.to.LoggerTO;\r\n+import org.apache.syncope.common.types.AuditLoggerName;\r\n+import org.apache.syncope.common.types.LoggerType;\r\n+import org.apache.syncope.common.util.CollectionWrapper;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class LoggerServiceProxy extends SpringServiceProxy implements LoggerService {\r\n+\r\n+    public LoggerServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<LoggerTO> list(final LoggerType type) {\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"logger/log/list\", LoggerTO[].class));\r\n+\r\n+            case AUDIT:\r\n+                List<AuditLoggerName> auditNames = Arrays.asList(getRestTemplate().getForObject(\r\n+                        baseUrl + \"logger/audit/list\", AuditLoggerName[].class));\r\n+                return CollectionWrapper.unwrapLogger(auditNames);\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public LoggerTO read(final LoggerType type, final String name) {\r\n+        List<LoggerTO> logger = list(type);\r\n+        for (LoggerTO l : logger) {\r\n+            if (l.getName().equals(name)) {\r\n+                return l;\r\n+            }\r\n+        }\r\n+        throw new NotFoundException();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void update(final LoggerType type, final String name, final LoggerTO logger) {\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                getRestTemplate().postForObject(baseUrl + \"logger/log/{name}/{level}\", null, LoggerTO.class, name,\r\n+                        logger.getLevel());\r\n+                break;\r\n+\r\n+            case AUDIT:\r\n+                try {\r\n+                    getRestTemplate().put(baseUrl + \"logger/audit/enable\", AuditLoggerName.fromLoggerName(name));\r\n+                } catch (Exception e) {\r\n+                    throw new BadRequestException(e);\r\n+                }\r\n+                break;\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final LoggerType type, final String name) {\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                getRestTemplate().getForObject(baseUrl + \"logger/log/delete/{name}\", LoggerTO.class, name);\r\n+                break;\r\n+            case AUDIT:\r\n+                try {\r\n+                    getRestTemplate().put(baseUrl + \"logger/audit/disable\", AuditLoggerName.fromLoggerName(name));\r\n+                } catch (Exception e) {\r\n+                    throw new BadRequestException(e);\r\n+                }\r\n+                break;\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n+        }\r\n+\r\n+    }\r\n+}\r"},{"sha":"7c79f480cfa3e0ec1cc127917e91b2f9813af34c","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/NotificationServiceProxy.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FNotificationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FNotificationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FNotificationServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,69 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import org.apache.syncope.common.SyncopeConstants;\r\n+import org.apache.syncope.common.services.NotificationService;\r\n+import org.apache.syncope.common.to.NotificationTO;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class NotificationServiceProxy extends SpringServiceProxy implements NotificationService {\r\n+\r\n+    public NotificationServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Response create(final NotificationTO notificationTO) {\r\n+        NotificationTO notification = getRestTemplate().postForObject(baseUrl + \"notification/create.json\",\r\n+                notificationTO, NotificationTO.class);\r\n+        URI location = URI.create(baseUrl + \"notification/read/\" + notification.getId() + \".json\");\r\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, notification.getId()).build();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final Long notificationId) {\r\n+        getRestTemplate().getForObject(baseUrl + \"notification/delete/{notificationId}.json\",\r\n+                NotificationTO.class, notificationId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<NotificationTO> list() {\r\n+        return Arrays\r\n+                .asList(getRestTemplate().getForObject(baseUrl + \"notification/list.json\", NotificationTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public NotificationTO read(final Long notificationId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"notification/read/{notificationId}.json\",\r\n+                NotificationTO.class, notificationId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void update(final Long notificationId, final NotificationTO notificationTO) {\r\n+        getRestTemplate().postForObject(baseUrl + \"notification/update.json\", notificationTO,\r\n+                NotificationTO.class);\r\n+    }\r\n+}\r"},{"sha":"896c0b897e024a1e879a6a109806e414818be3ed","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/PolicyServiceProxy.java","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,157 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Arrays;\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import javax.ws.rs.NotFoundException;\r\n+import javax.ws.rs.core.Response;\r\n+import org.apache.syncope.common.services.PolicyService;\r\n+import org.apache.syncope.common.to.AccountPolicyTO;\r\n+import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n+import org.apache.syncope.common.to.PasswordPolicyTO;\r\n+import org.apache.syncope.common.to.PolicyTO;\r\n+import org.apache.syncope.common.to.SyncPolicyTO;\r\n+import org.apache.syncope.common.types.PolicyType;\r\n+import org.apache.syncope.common.util.CollectionWrapper;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+@SuppressWarnings(\"unchecked\")\r\n+public class PolicyServiceProxy extends SpringServiceProxy implements PolicyService {\r\n+\r\n+    public PolicyServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends PolicyTO> Response create(final PolicyType type, final T policyTO) {\r\n+        PolicyTO policy = getRestTemplate().postForObject(baseUrl + \"policy/{kind}/create\", policyTO,\r\n+                policyTO.getClass(), typeToUrl(policyTO.getType()));\r\n+\r\n+        return Response.created(URI.create(baseUrl + \"policy/read/\" + policy.getId() + \".json\")).build();\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends PolicyTO> void delete(final PolicyType type, final Long policyId) {\r\n+        getRestTemplate().getForObject(baseUrl + \"policy/delete/{id}\", getTOClass(type), policyId);\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    @Override\r\n+    public <T extends PolicyTO> List<T> list(final PolicyType type) {\r\n+        List<T> result = null;\r\n+\r\n+        switch (type) {\r\n+            case ACCOUNT:\r\n+            case GLOBAL_ACCOUNT:\r\n+                result = (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n+                        AccountPolicyTO[].class, type));\r\n+                break;\r\n+\r\n+            case PASSWORD:\r\n+            case GLOBAL_PASSWORD:\r\n+                result = (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n+                        PasswordPolicyTO[].class, type));\r\n+                break;\r\n+\r\n+            case SYNC:\r\n+            case GLOBAL_SYNC:\r\n+                result = (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n+                        SyncPolicyTO[].class, type));\r\n+                break;\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(\"Policy Type not supported: \" + type);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends PolicyTO> T read(final PolicyType type, final Long policyId) {\r\n+        return (T) getRestTemplate().getForObject(baseUrl + \"policy/read/{id}.json\", getTOClass(type), policyId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends PolicyTO> T readGlobal(final PolicyType type) {\r\n+        return (T) getRestTemplate().getForObject(baseUrl + \"policy/{kind}/global/read.json\", getTOClass(type),\r\n+                typeToUrl(type));\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends PolicyTO> void update(final PolicyType type, final Long policyId, final T policyTO) {\r\n+        getRestTemplate().postForObject(baseUrl + \"policy/{kind}/update\", policyTO, policyTO.getClass(),\r\n+                typeToUrl(policyTO.getType()));\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    private <T extends PolicyTO> Class<T> getTOClass(final PolicyType type) {\r\n+        Class<T> result = null;\r\n+\r\n+        switch (type) {\r\n+            case ACCOUNT:\r\n+            case GLOBAL_ACCOUNT:\r\n+                result = (Class<T>) AccountPolicyTO.class;\r\n+                break;\r\n+\r\n+            case PASSWORD:\r\n+            case GLOBAL_PASSWORD:\r\n+                result = (Class<T>) PasswordPolicyTO.class;\r\n+                break;\r\n+\r\n+            case SYNC:\r\n+            case GLOBAL_SYNC:\r\n+                result = (Class<T>) SyncPolicyTO.class;\r\n+                break;\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(\"Policy Type not supported: \" + type);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    private String typeToUrl(final PolicyType type) {\r\n+        String url = type.name().toLowerCase();\r\n+        int index = url.indexOf('_');\r\n+        return index == -1 ? url : url.substring(index + 1);\r\n+    }\r\n+\r\n+    @Override\r\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\r\n+    public Set<CorrelationRuleClassTO> getSyncCorrelationRuleClasses(final PolicyType type) {\r\n+        Set<CorrelationRuleClassTO> result = Collections.<CorrelationRuleClassTO>emptySet();\r\n+\r\n+        switch (type) {\r\n+            case SYNC:\r\n+            case GLOBAL_SYNC:\r\n+                result = CollectionWrapper.wrapSyncCorrelationRuleClasses(\r\n+                        handlePossiblyEmptyStringCollection(baseUrl + \"policy/syncCorrelationRuleClasses.json\"));\r\n+                break;\r\n+\r\n+            default:\r\n+                throw new NotFoundException();\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+}\r"},{"sha":"8f2ff677cd4cafccf4abd54c48a7f8b0485132b9","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ReportServiceProxy.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,108 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+import javax.ws.rs.core.Response;\r\n+import org.apache.syncope.common.SyncopeConstants;\r\n+import org.apache.syncope.common.services.ReportService;\r\n+import org.apache.syncope.common.services.ReportletConfClasses;\r\n+import org.apache.syncope.common.to.ReportExecTO;\r\n+import org.apache.syncope.common.to.ReportTO;\r\n+import org.apache.syncope.common.types.ReportExecExportFormat;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class ReportServiceProxy extends SpringServiceProxy implements ReportService {\r\n+\r\n+    public ReportServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Response create(final ReportTO reportTO) {\r\n+        ReportTO createdReportTO = getRestTemplate().postForObject(baseUrl + \"report/create\", reportTO, ReportTO.class);\r\n+        URI location = URI.create(baseUrl + \"report/read/\" + createdReportTO.getId() + \".json\");\r\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, createdReportTO.getId()).build();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void update(final Long reportId, final ReportTO reportTO) {\r\n+        getRestTemplate().postForObject(baseUrl + \"report/update\", reportTO, ReportTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public int count() {\r\n+        return getRestTemplate().getForObject(baseUrl + \"report/count.json\", Integer.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ReportTO> list() {\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"report/list\", ReportTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ReportTO> list(final int page, final int size) {\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"report/list/{page}/{size}\", ReportTO[].class,\r\n+                page, size));\r\n+    }\r\n+\r\n+    @Override\r\n+    public ReportletConfClasses getReportletConfClasses() {\r\n+        return new ReportletConfClasses(\r\n+                handlePossiblyEmptyStringCollection(baseUrl + \"report/reportletConfClasses.json\"));\r\n+    }\r\n+\r\n+    @Override\r\n+    public ReportTO read(final Long reportId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"report/read/{reportId}\", ReportTO.class, reportId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ReportExecTO readExecution(final Long executionId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"report/execution/read/{executionId}\", ReportExecTO.class,\r\n+                executionId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Response exportExecutionResult(final Long executionId, final ReportExecExportFormat fmt) {\r\n+        final String format = fmt == null\r\n+                ? \"\"\r\n+                : \"?fmt=\" + fmt.toString();\r\n+        return handleStream(baseUrl + \"report/execution/export/\" + executionId + format);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ReportExecTO execute(final Long reportId) {\r\n+        return getRestTemplate().postForObject(baseUrl + \"report/execute/{reportId}\", null, ReportExecTO.class,\r\n+                reportId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final Long reportId) {\r\n+        getRestTemplate().getForObject(baseUrl + \"report/delete/{reportId}\", ReportTO.class, reportId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void deleteExecution(final Long executionId) {\r\n+        getRestTemplate().getForObject(baseUrl + \"report/execution/delete/{executionId}\", ReportExecTO.class,\r\n+                executionId);\r\n+    }\r\n+}\r"},{"sha":"ed042b45d0a76d0f3f079ad22bf9c16b21135d3d","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ResourceServiceProxy.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,117 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import java.io.UnsupportedEncodingException;\r\n+import java.net.URI;\r\n+import java.net.URLEncoder;\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import javax.ws.rs.InternalServerErrorException;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import org.apache.syncope.common.SyncopeConstants;\r\n+import org.apache.syncope.common.services.ResourceService;\r\n+import org.apache.syncope.common.to.BulkAction;\r\n+import org.apache.syncope.common.to.BulkActionRes;\r\n+import org.apache.syncope.common.to.ConnObjectTO;\r\n+import org.apache.syncope.common.to.PropagationActionClassTO;\r\n+import org.apache.syncope.common.to.ResourceTO;\r\n+import org.apache.syncope.common.types.AttributableType;\r\n+import org.apache.syncope.common.util.CollectionWrapper;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class ResourceServiceProxy extends SpringServiceProxy implements ResourceService {\r\n+\r\n+    public ResourceServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Response create(final ResourceTO resourceTO) {\r\n+        ResourceTO resource = getRestTemplate().postForObject(baseUrl + \"resource/create.json\", resourceTO,\r\n+                ResourceTO.class);\r\n+\r\n+        try {\r\n+            URI location = URI.create(baseUrl\r\n+                    + \"resource/read/\"\r\n+                    + URLEncoder.encode(resource.getName(), SyncopeConstants.DEFAULT_ENCODING)\r\n+                    + \".json\");\r\n+            return Response.created(location).\r\n+                    header(SyncopeConstants.REST_HEADER_ID, resource.getName()).\r\n+                    build();\r\n+        } catch (UnsupportedEncodingException e) {\r\n+            throw new InternalServerErrorException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void update(final String resourceName, final ResourceTO resourceTO) {\r\n+        getRestTemplate().postForObject(baseUrl + \"resource/update.json\", resourceTO, ResourceTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final String resourceName) {\r\n+        getRestTemplate().getForObject(baseUrl + \"resource/delete/{resourceName}.json\", ResourceTO.class, resourceName);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ResourceTO read(final String resourceName) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"resource/read/{resourceName}.json\", ResourceTO.class,\r\n+                resourceName);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<PropagationActionClassTO> getPropagationActionsClasses() {\r\n+        return CollectionWrapper.wrapPropagationActionClasses(\r\n+                handlePossiblyEmptyStringCollection(baseUrl + \"resource/propagationActionsClasses.json\"));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ResourceTO> list() {\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"resource/list.json\", ResourceTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ResourceTO> list(final Long connInstanceId) {\r\n+        return connInstanceId == null\r\n+                ? list()\r\n+                : Arrays.asList(getRestTemplate().getForObject(baseUrl + \"resource/list.json?connInstanceId={connId}\",\r\n+                ResourceTO[].class, connInstanceId));\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConnObjectTO getConnectorObject(final String resourceName, final AttributableType type, final Long id) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"resource/{resourceName}/read/{type}/{id}.json\",\r\n+                ConnObjectTO.class, resourceName, type.name(), id);\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean check(final ResourceTO resourceTO) {\r\n+        return getRestTemplate().postForObject(baseUrl + \"resource/check.json\", resourceTO, Boolean.class).\r\n+                booleanValue();\r\n+    }\r\n+\r\n+    @Override\r\n+    public BulkActionRes bulkAction(final BulkAction bulkAction) {\r\n+        return getRestTemplate().postForObject(baseUrl + \"resource/bulk\", bulkAction, BulkActionRes.class);\r\n+    }\r\n+}\r"},{"sha":"14085ce24d07e60f6a6261a4e4ef63ea772a038f","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/RoleServiceProxy.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,113 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.ServiceUnavailableException;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import org.apache.syncope.common.SyncopeConstants;\r\n+import org.apache.syncope.common.mod.RoleMod;\r\n+import org.apache.syncope.common.search.NodeCond;\r\n+import org.apache.syncope.common.services.RoleService;\r\n+import org.apache.syncope.common.to.RoleTO;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class RoleServiceProxy extends SpringServiceProxy implements RoleService {\r\n+\r\n+    public RoleServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<RoleTO> children(final Long roleId) {\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"role/children/{roleId}.json\",\r\n+                RoleTO[].class, roleId));\r\n+    }\r\n+\r\n+    @Override\r\n+    public int count() {\r\n+        return Integer.valueOf(list().size());\r\n+    }\r\n+\r\n+    @Override\r\n+    public Response create(final RoleTO roleTO) {\r\n+        RoleTO role = getRestTemplate().postForObject(baseUrl + \"role/create\", roleTO, RoleTO.class);\r\n+\r\n+        URI location = URI.create(baseUrl + \"role/read/\" + role.getId() + \".json\");\r\n+        return Response.created(location)\r\n+                .header(SyncopeConstants.REST_HEADER_ID, role.getId())\r\n+                .entity(role)\r\n+                .build();\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO delete(final Long roleId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"role/delete/{roleId}\", RoleTO.class, roleId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<RoleTO> list() {\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"role/list.json\", RoleTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<RoleTO> list(final int page, final int size) {\r\n+        throw new ServiceUnavailableException();\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO parent(final Long roleId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"role/parent/{roleId}.json\", RoleTO.class, roleId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO read(final Long roleId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"role/read/{roleId}.json\", RoleTO.class, roleId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<RoleTO> search(final NodeCond searchCondition) {\r\n+        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"role/search\", searchCondition, RoleTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<RoleTO> search(final NodeCond searchCondition, final int page, final int size) {\r\n+        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"role/search/{page}/{size}\", searchCondition,\r\n+                RoleTO[].class, page, size));\r\n+    }\r\n+\r\n+    @Override\r\n+    public int searchCount(final NodeCond searchCondition) {\r\n+        return getRestTemplate().postForObject(baseUrl + \"role/search/count.json\", searchCondition, Integer.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO selfRead(final Long roleId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"role/selfRead/{roleId}\", RoleTO.class, roleId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO update(final Long roleId, final RoleMod roleMod) {\r\n+        return getRestTemplate().postForObject(baseUrl + \"role/update\", roleMod, RoleTO.class);\r\n+    }\r\n+}\r"},{"sha":"b904882625c2ac2e33eaf9350f81429ac7c1eaff","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SchemaServiceProxy.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,123 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import java.io.UnsupportedEncodingException;\r\n+import java.net.URI;\r\n+import java.net.URLEncoder;\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.InternalServerErrorException;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import org.apache.syncope.common.SyncopeConstants;\r\n+import org.apache.syncope.common.services.SchemaService;\r\n+import org.apache.syncope.common.to.AbstractSchemaTO;\r\n+import org.apache.syncope.common.to.DerivedSchemaTO;\r\n+import org.apache.syncope.common.to.SchemaTO;\r\n+import org.apache.syncope.common.to.VirtualSchemaTO;\r\n+import org.apache.syncope.common.types.AttributableType;\r\n+import org.apache.syncope.common.types.SchemaType;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+@SuppressWarnings(\"unchecked\")\r\n+public class SchemaServiceProxy extends SpringServiceProxy implements SchemaService {\r\n+\r\n+    public SchemaServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends AbstractSchemaTO> Response create(final AttributableType kind, final SchemaType type,\r\n+            final T schemaTO) {\r\n+        AbstractSchemaTO schema = getRestTemplate().postForObject(baseUrl + type.toSpringURL() + \"/{kind}/create\",\r\n+                schemaTO, getTOClass(type), kind);\r\n+\r\n+        try {\r\n+            URI location = URI.create(baseUrl\r\n+                    + type.toSpringURL() + \"/\" + kind + \"/read/\"\r\n+                    + URLEncoder.encode(schema.getName(), SyncopeConstants.DEFAULT_ENCODING)\r\n+                    + \".json\");\r\n+            return Response.created(location)\r\n+                    .header(SyncopeConstants.REST_HEADER_ID, schema.getName())\r\n+                    .build();\r\n+        } catch (UnsupportedEncodingException e) {\r\n+            throw new InternalServerErrorException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final AttributableType kind, final SchemaType type, final String schemaName) {\r\n+        getRestTemplate().getForObject(baseUrl + type.toSpringURL() + \"/{kind}/delete/{name}.json\", getTOClass(type),\r\n+                kind, schemaName);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<? extends AbstractSchemaTO> list(final AttributableType kind, final SchemaType type) {\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + type.toSpringURL() + \"/{kind}/list.json\",\r\n+                        SchemaTO[].class, kind));\r\n+\r\n+            case DERIVED:\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + type.toSpringURL() + \"/{kind}/list.json\",\r\n+                        DerivedSchemaTO[].class, kind));\r\n+\r\n+            case VIRTUAL:\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + type.toSpringURL() + \"/{kind}/list.json\",\r\n+                        VirtualSchemaTO[].class, kind));\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(\"SchemaType is not supported.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends AbstractSchemaTO> T read(final AttributableType kind, final SchemaType type,\r\n+            final String schemaName) {\r\n+\r\n+        return (T) getRestTemplate().getForObject(baseUrl + type.toSpringURL() + \"/{kind}/read/{name}.json\",\r\n+                getTOClass(type), kind, schemaName);\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends AbstractSchemaTO> void update(final AttributableType kind, final SchemaType type,\r\n+            final String schemaName, final T schemaTO) {\r\n+\r\n+        getRestTemplate().postForObject(baseUrl + type.toSpringURL() + \"/{kind}/update\", schemaTO, getTOClass(type),\r\n+                kind);\r\n+    }\r\n+\r\n+    private Class<? extends AbstractSchemaTO> getTOClass(final SchemaType type) {\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                return SchemaTO.class;\r\n+\r\n+            case DERIVED:\r\n+                return DerivedSchemaTO.class;\r\n+\r\n+            case VIRTUAL:\r\n+                return VirtualSchemaTO.class;\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(\"SchemaType is not supported: \" + type);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"96555d8f73c630bcec9f86278456af323e3f996b","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SpringRestTemplate.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringRestTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringRestTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringRestTemplate.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,26 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public interface SpringRestTemplate {\r\n+\r\n+    RestTemplate getRestTemplate();\r\n+}\r"},{"sha":"6a049902aa494a916bc80eaf63492bbe7339fc96","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SpringServiceProxy.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,107 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import javax.ws.rs.InternalServerErrorException;\r\n+import javax.ws.rs.core.Response;\r\n+import org.apache.http.HttpEntity;\r\n+import org.apache.http.HttpHost;\r\n+import org.apache.http.HttpResponse;\r\n+import org.apache.http.HttpStatus;\r\n+import org.apache.http.auth.AuthScope;\r\n+import org.apache.http.client.AuthCache;\r\n+import org.apache.http.client.methods.HttpGet;\r\n+import org.apache.http.client.protocol.ClientContext;\r\n+import org.apache.http.impl.auth.BasicScheme;\r\n+import org.apache.http.impl.client.BasicAuthCache;\r\n+import org.apache.http.protocol.BasicHttpContext;\r\n+import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\r\n+import org.apache.syncope.common.SyncopeConstants;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public abstract class SpringServiceProxy {\r\n+\r\n+    protected String baseUrl;\r\n+\r\n+    private RestTemplate restTemplate;\r\n+\r\n+    public SpringServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        this.baseUrl = baseUrl;\r\n+        this.restTemplate = restTemplate;\r\n+    }\r\n+\r\n+    public void setRestTemplate(final RestTemplate restTemplate) {\r\n+        this.restTemplate = restTemplate;\r\n+    }\r\n+\r\n+    public RestTemplate getRestTemplate() {\r\n+        return restTemplate;\r\n+    }\r\n+\r\n+    protected Response handleStream(final String url) {\r\n+        final AuthScope scope = ((PreemptiveAuthHttpRequestFactory) getRestTemplate().getRequestFactory()).\r\n+                getAuthScope();\r\n+        final HttpHost targetHost = new HttpHost(scope.getHost(), scope.getPort(), scope.getScheme());\r\n+        final BasicHttpContext localcontext = new BasicHttpContext();\r\n+        final AuthCache authCache = new BasicAuthCache();\r\n+        authCache.put(targetHost, new BasicScheme());\r\n+        localcontext.setAttribute(ClientContext.AUTH_CACHE, authCache);\r\n+\r\n+        final HttpGet getMethod = new HttpGet(url);\r\n+        try {\r\n+            final HttpResponse httpResponse =\r\n+                    ((PreemptiveAuthHttpRequestFactory) getRestTemplate().getRequestFactory()).\r\n+                    getHttpClient().execute(targetHost, getMethod, localcontext);\r\n+\r\n+            Response response;\r\n+            if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\r\n+                HttpEntity entity = httpResponse.getEntity();\r\n+                response = Response.ok(entity.getContent(), entity.getContentType().getValue()).\r\n+                        header(SyncopeConstants.CONTENT_DISPOSITION_HEADER,\r\n+                        httpResponse.getLastHeader(SyncopeConstants.CONTENT_DISPOSITION_HEADER).getValue()).\r\n+                        build();\r\n+            } else {\r\n+                response = Response.noContent().status(httpResponse.getStatusLine().getStatusCode()).\r\n+                        build();\r\n+            }\r\n+\r\n+            return response;\r\n+        } catch (IOException e) {\r\n+            throw new InternalServerErrorException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    protected Collection<String> handlePossiblyEmptyStringCollection(final String url) {\r\n+        Collection<String> result = Collections.<String>emptySet();\r\n+\r\n+        final Object object = getRestTemplate().getForObject(url, Object.class);\r\n+        if (object instanceof String) {\r\n+            String string = (String) object;\r\n+            result = Collections.singleton(string);\r\n+        } else if (object instanceof Collection) {\r\n+            result = (Collection<String>) object;\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+}\r"},{"sha":"1a9cf55011bd079cbab8ea21144928ff6e31b5f4","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/TaskServiceProxy.java","status":"added","additions":221,"deletions":0,"changes":221,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,221 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import java.io.IOException;\r\n+import java.net.URI;\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.xml.ws.WebServiceException;\r\n+import org.apache.syncope.common.SyncopeConstants;\r\n+import org.apache.syncope.common.services.TaskService;\r\n+import org.apache.syncope.common.to.BulkAction;\r\n+import org.apache.syncope.common.to.BulkActionRes;\r\n+import org.apache.syncope.common.to.JobClassTO;\r\n+import org.apache.syncope.common.to.NotificationTaskTO;\r\n+import org.apache.syncope.common.to.PropagationTaskTO;\r\n+import org.apache.syncope.common.to.ReportExecTO;\r\n+import org.apache.syncope.common.to.SchedTaskTO;\r\n+import org.apache.syncope.common.to.SyncActionClassTO;\r\n+import org.apache.syncope.common.to.SyncTaskTO;\r\n+import org.apache.syncope.common.to.TaskExecTO;\r\n+import org.apache.syncope.common.to.TaskTO;\r\n+import org.apache.syncope.common.types.TaskType;\r\n+import org.apache.syncope.common.util.CollectionWrapper;\r\n+import org.springframework.http.HttpMethod;\r\n+import org.springframework.http.client.ClientHttpRequest;\r\n+import org.springframework.http.client.ClientHttpResponse;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+@SuppressWarnings(\"unchecked\")\r\n+public class TaskServiceProxy extends SpringServiceProxy implements TaskService {\r\n+\r\n+    public TaskServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public int count(final TaskType type) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"task/{type}/count.json\", Integer.class, type);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Response create(final TaskTO taskTO) {\r\n+        String subTypeString = (taskTO instanceof SyncTaskTO)\r\n+                ? \"sync\"\r\n+                : (taskTO instanceof SchedTaskTO)\r\n+                ? \"sched\"\r\n+                : \"\";\r\n+\r\n+        TaskTO task = getRestTemplate().postForObject(baseUrl + \"task/create/{type}\", taskTO, taskTO.getClass(),\r\n+                subTypeString);\r\n+\r\n+        return Response.created(URI.create(baseUrl + \"task/read/\" + task.getId() + \".json\"))\r\n+                .header(SyncopeConstants.REST_HEADER_ID, task.getId()).build();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final Long taskId) {\r\n+        ClientHttpResponse response = null;\r\n+        try {\r\n+            ClientHttpRequest request = getRestTemplate().getRequestFactory().createRequest(\r\n+                    URI.create(baseUrl + \"task/delete/\" + taskId), HttpMethod.GET);\r\n+            response = request.execute();\r\n+        } catch (IOException e) {\r\n+            throw new WebServiceException(\"Cannot send request to delete task \" + taskId, e);\r\n+        } finally {\r\n+            if (response != null) {\r\n+                response.close();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void deleteExecution(final Long executionId) {\r\n+        getRestTemplate().getForObject(baseUrl + \"task/execution/delete/{executionId}.json\", TaskExecTO.class,\r\n+                executionId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public TaskExecTO execute(final Long taskId, final boolean dryRun) {\r\n+        String param = (dryRun)\r\n+                ? \"?dryRun=true\"\r\n+                : \"\";\r\n+        return getRestTemplate().postForObject(baseUrl + \"task/execute/{taskId}.json\" + param, null, TaskExecTO.class,\r\n+                taskId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<JobClassTO> getJobClasses() {\r\n+        return CollectionWrapper.wrapJobClasses(\r\n+                handlePossiblyEmptyStringCollection(baseUrl + \"task/jobClasses.json\"));\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<SyncActionClassTO> getSyncActionsClasses() {\r\n+        return CollectionWrapper.wrapSyncActionClasses(\r\n+                handlePossiblyEmptyStringCollection(baseUrl + \"task/syncActionsClasses.json\"));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<? extends TaskTO> list(final TaskType type) {\r\n+        switch (type) {\r\n+            case PROPAGATION:\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list.json\",\r\n+                        PropagationTaskTO[].class, type));\r\n+\r\n+            case NOTIFICATION:\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list.json\",\r\n+                        NotificationTaskTO[].class, type));\r\n+\r\n+            case SCHEDULED:\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list.json\",\r\n+                        SchedTaskTO[].class, type));\r\n+\r\n+            case SYNCHRONIZATION:\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list.json\",\r\n+                        SyncTaskTO[].class, type));\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(\"TaskType is not supported.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<? extends TaskTO> list(final TaskType type, final int page, final int size) {\r\n+        switch (type) {\r\n+            case PROPAGATION:\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n+                        PropagationTaskTO[].class, type, page, size));\r\n+\r\n+            case NOTIFICATION:\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n+                        NotificationTaskTO[].class, type, page, size));\r\n+\r\n+            case SCHEDULED:\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n+                        SchedTaskTO[].class, type, page, size));\r\n+\r\n+            case SYNCHRONIZATION:\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n+                        SyncTaskTO[].class, type, page, size));\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(\"TaskType is not supported :\" + type);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends TaskTO> T read(final TaskType type, final Long taskId) {\r\n+        return (T) getRestTemplate().getForObject(baseUrl + \"task/read/{taskId}.json\", getTOClass(type), taskId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public TaskExecTO readExecution(final Long executionId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"task/execution/read/{executionId}.json\", TaskExecTO.class,\r\n+                executionId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void report(final Long executionId, final ReportExecTO report) {\r\n+        getRestTemplate().getForObject(\r\n+                baseUrl + \"task/execution/report/{executionId}.json\" + \"?executionStatus={status}&message={message}\",\r\n+                TaskExecTO.class, executionId, report.getStatus(), report.getMessage());\r\n+    }\r\n+\r\n+    @Override\r\n+    public void update(final Long taskId, final TaskTO taskTO) {\r\n+        String path = (taskTO instanceof SyncTaskTO)\r\n+                ? \"sync\"\r\n+                : (taskTO instanceof SchedTaskTO)\r\n+                ? \"sched\"\r\n+                : null;\r\n+        if (path == null) {\r\n+            throw new IllegalArgumentException(\"Task can only be instance of SchedTaskTO or SyncTaskTO\");\r\n+        }\r\n+\r\n+        getRestTemplate().postForObject(baseUrl + \"task/update/\" + path, taskTO, taskTO.getClass());\r\n+    }\r\n+\r\n+    private Class<? extends TaskTO> getTOClass(final TaskType type) {\r\n+        switch (type) {\r\n+            case PROPAGATION:\r\n+                return PropagationTaskTO.class;\r\n+\r\n+            case NOTIFICATION:\r\n+                return NotificationTaskTO.class;\r\n+\r\n+            case SCHEDULED:\r\n+                return SchedTaskTO.class;\r\n+\r\n+            case SYNCHRONIZATION:\r\n+                return SyncTaskTO.class;\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(\"SchemaType is not supported: \" + type);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public BulkActionRes bulkAction(final BulkAction bulkAction) {\r\n+        return getRestTemplate().postForObject(baseUrl + \"task/bulk\", bulkAction, BulkActionRes.class);\r\n+    }\r\n+}\r"},{"sha":"2076f947a45ac11ed701a0f8220c8083cee8035b","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/UserRequestServiceProxy.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,90 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import org.apache.syncope.common.SyncopeConstants;\r\n+import org.apache.syncope.common.services.UserRequestService;\r\n+import org.apache.syncope.common.to.UserRequestTO;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class UserRequestServiceProxy extends SpringServiceProxy implements UserRequestService {\r\n+\r\n+    public UserRequestServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Response getOptions() {\r\n+        return Response.ok()\r\n+                .header(\"Allow\", \"GET,POST,OPTIONS,HEAD\")\r\n+                .header(SYNCOPE_CREATE_ALLOWED, isCreateAllowed())\r\n+                .build();\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean isCreateAllowed() {\r\n+        return getRestTemplate().getForObject(baseUrl + \"user/request/create/allowed.json\", Boolean.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Response create(final UserRequestTO userRequestTO) {\r\n+        UserRequestTO created;\r\n+        switch (userRequestTO.getType()) {\r\n+            case UPDATE:\r\n+                created = getRestTemplate().postForObject(baseUrl + \"user/request/update\", userRequestTO.getUserMod(),\r\n+                        UserRequestTO.class);\r\n+                break;\r\n+\r\n+            case DELETE:\r\n+                created = getRestTemplate().getForObject(baseUrl + \"user/request/delete/{userId}\", UserRequestTO.class,\r\n+                        userRequestTO.getUserId());\r\n+                break;\r\n+\r\n+            case CREATE:\r\n+            default:\r\n+                created = getRestTemplate().postForObject(baseUrl + \"user/request/create\", userRequestTO.getUserTO(),\r\n+                        UserRequestTO.class);\r\n+        }\r\n+\r\n+        URI location = URI.create(baseUrl + \"user/request/read/\" + created.getId() + \".json\");\r\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, created.getId()).build();\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<UserRequestTO> list() {\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"user/request/list.json\", UserRequestTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public UserRequestTO read(final Long requestId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"user/request/read/{requestId}.json\", UserRequestTO.class,\r\n+                requestId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final Long requestId) {\r\n+        getRestTemplate().getForObject(baseUrl + \"user/request/deleteRequest/{requestId}.json\", UserRequestTO.class,\r\n+                requestId);\r\n+    }\r\n+}\r"},{"sha":"b323f0541647fbebee032f0d89350b17cc16acf3","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/UserServiceProxy.java","status":"added","additions":187,"deletions":0,"changes":187,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.services.proxy;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.SyncopeConstants;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.services.UserService;\n+import org.apache.syncope.common.to.BulkAction;\n+import org.apache.syncope.common.to.BulkActionRes;\n+import org.apache.syncope.common.to.PropagationRequestTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.springframework.web.client.RestTemplate;\n+\n+public class UserServiceProxy extends SpringServiceProxy implements UserService {\n+\n+    public UserServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\n+        super(baseUrl, restTemplate);\n+    }\n+\n+    @Override\n+    public int count() {\n+        return getRestTemplate().getForObject(baseUrl + \"user/count.json\", Integer.class);\n+    }\n+\n+    @Override\n+    public List<UserTO> list() {\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"user/list.json\", UserTO[].class));\n+    }\n+\n+    @Override\n+    public List<UserTO> list(final int page, final int size) {\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"user/list/{page}/{size}.json\",\n+                UserTO[].class, page, size));\n+    }\n+\n+    @Override\n+    public UserTO read(final Long userId) {\n+        return getRestTemplate().getForObject(baseUrl + \"user/read/{userId}.json\", UserTO.class, userId);\n+    }\n+\n+    @Override\n+    public UserTO read(final String username) {\n+        return getRestTemplate().getForObject(baseUrl + \"user/readByUsername/{username}.json\", UserTO.class,\n+                username);\n+    }\n+\n+    @Override\n+    public Response create(final UserTO userTO) {\n+        UserTO created = getRestTemplate().postForObject(baseUrl + \"user/create\", userTO, UserTO.class);\n+        URI location = URI.create(baseUrl + \"user/read/\" + created.getId() + \".json\");\n+        return Response.created(location)\n+                .header(SyncopeConstants.REST_HEADER_ID, created.getId())\n+                .entity(created)\n+                .build();\n+    }\n+\n+    @Override\n+    public UserTO update(final Long userId, final UserMod userMod) {\n+        return getRestTemplate().postForObject(baseUrl + \"user/update\", userMod, UserTO.class);\n+    }\n+\n+    @Override\n+    public UserTO delete(final Long userId) {\n+        return getRestTemplate().getForObject(baseUrl + \"user/delete/{userId}\", UserTO.class, userId);\n+    }\n+\n+    @Override\n+    public UserTO activate(final long userId, final String token) {\n+        return getRestTemplate().getForObject(baseUrl + \"user/activate/{userId}?token=\" + token, UserTO.class, userId);\n+    }\n+\n+    @Override\n+    public UserTO activate(final long userId, final String token,\n+            final PropagationRequestTO propagationRequestTO) {\n+\n+        return getRestTemplate().postForObject(baseUrl + \"user/activate/{userId}?token=\" + token, propagationRequestTO,\n+                UserTO.class, userId);\n+    }\n+\n+    @Override\n+    public UserTO activateByUsername(final String username, final String token) {\n+        return getRestTemplate().getForObject(baseUrl + \"user/activateByUsername/{username}.json?token=\" + token,\n+                UserTO.class, username);\n+    }\n+\n+    @Override\n+    public UserTO activateByUsername(final String username, final String token,\n+            final PropagationRequestTO propagationRequestTO) {\n+\n+        return getRestTemplate().postForObject(baseUrl + \"user/activateByUsername/{username}.json?token=\" + token,\n+                propagationRequestTO, UserTO.class, username);\n+    }\n+\n+    @Override\n+    public UserTO suspend(final long userId) {\n+        return getRestTemplate().getForObject(baseUrl + \"user/suspend/{userId}\", UserTO.class, userId);\n+    }\n+\n+    @Override\n+    public UserTO suspend(final long userId, final PropagationRequestTO propagationRequestTO) {\n+        return getRestTemplate().postForObject(baseUrl + \"user/suspend/{userId}\", propagationRequestTO,\n+                UserTO.class, userId);\n+    }\n+\n+    @Override\n+    public UserTO suspendByUsername(final String username) {\n+        return getRestTemplate().getForObject(baseUrl + \"user/suspendByUsername/{username}.json\",\n+                UserTO.class, username);\n+    }\n+\n+    @Override\n+    public UserTO suspendByUsername(final String username, final PropagationRequestTO propagationRequestTO) {\n+        return getRestTemplate().postForObject(baseUrl + \"user/suspendByUsername/{username}.json\", propagationRequestTO,\n+                UserTO.class, username);\n+    }\n+\n+    @Override\n+    public UserTO reactivate(final long userId) {\n+        return getRestTemplate().getForObject(baseUrl + \"user/reactivate/{userId}\", UserTO.class, userId);\n+    }\n+\n+    @Override\n+    public UserTO reactivate(final long userId, final PropagationRequestTO propagationRequestTO) {\n+        return getRestTemplate().postForObject(baseUrl + \"user/reactivate/{userId}\", propagationRequestTO,\n+                UserTO.class, userId);\n+    }\n+\n+    @Override\n+    public UserTO reactivateByUsername(final String username) {\n+        return getRestTemplate().getForObject(baseUrl + \"user/reactivateByUsername/{username}.json\",\n+                UserTO.class, username);\n+    }\n+\n+    @Override\n+    public UserTO reactivateByUsername(final String username, final PropagationRequestTO propagationRequestTO) {\n+        return getRestTemplate().postForObject(baseUrl + \"user/reactivateByUsername/{username}.json\",\n+                propagationRequestTO, UserTO.class, username);\n+    }\n+\n+    @Override\n+    public UserTO readSelf() {\n+        return getRestTemplate().getForObject(baseUrl + \"user/read/self\", UserTO.class);\n+    }\n+\n+    @Override\n+    public List<UserTO> search(final NodeCond searchCondition) {\n+        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"user/search\", searchCondition,\n+                UserTO[].class));\n+    }\n+\n+    @Override\n+    public List<UserTO> search(final NodeCond searchCondition, final int page, final int size) {\n+        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"user/search/{page}/{size}\",\n+                searchCondition, UserTO[].class, page, size));\n+    }\n+\n+    @Override\n+    public int searchCount(final NodeCond searchCondition) {\n+        return getRestTemplate().postForObject(baseUrl + \"user/search/count.json\", searchCondition, Integer.class);\n+    }\n+\n+    @Override\n+    public BulkActionRes bulkAction(final BulkAction bulkAction) {\n+        return getRestTemplate().postForObject(baseUrl + \"user/bulk\", bulkAction, BulkActionRes.class);\n+    }\n+}"},{"sha":"28d3cb6fdb2eb7328cbf838813c6b78c24b2e689","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/UserWorkflowServiceProxy.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserWorkflowServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserWorkflowServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserWorkflowServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.services.proxy;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.syncope.common.services.UserWorkflowService;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.to.WorkflowFormTO;\n+import org.springframework.web.client.RestTemplate;\n+\n+public class UserWorkflowServiceProxy extends SpringServiceProxy implements UserWorkflowService {\n+\n+    public UserWorkflowServiceProxy(String baseUrl, RestTemplate restTemplate) {\n+\t\tsuper(baseUrl, restTemplate);\n+\t}\n+\n+\t@Override\n+    public UserTO executeWorkflow(final String taskId, final UserTO userTO) {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<WorkflowFormTO> getForms() {\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"user/workflow/form/list\",\n+                WorkflowFormTO[].class));\n+    }\n+\n+    @Override\n+    public WorkflowFormTO getFormForUser(final Long userId) {\n+        return getRestTemplate().getForObject(baseUrl + \"user/workflow/form/{userId}\", WorkflowFormTO.class,\n+                userId);\n+    }\n+\n+    @Override\n+    public WorkflowFormTO claimForm(final String taskId) {\n+        return getRestTemplate().getForObject(baseUrl + \"user/workflow/form/claim/{taskId}\",\n+                WorkflowFormTO.class, taskId);\n+    }\n+\n+    @Override\n+    public UserTO submitForm(final WorkflowFormTO form) {\n+        return getRestTemplate().postForObject(baseUrl + \"user/workflow/form/submit\", form, UserTO.class);\n+    }\n+\n+}"},{"sha":"edd9b702282e283e4932ff5fd6cb54c5dc737ae4","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/WorkflowServiceProxy.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FWorkflowServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FWorkflowServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FWorkflowServiceProxy.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.services.proxy;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+import org.apache.syncope.common.services.WorkflowService;\r\n+import org.apache.syncope.common.to.WorkflowDefinitionTO;\r\n+import org.apache.syncope.common.types.AttributableType;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class WorkflowServiceProxy extends SpringServiceProxy implements WorkflowService {\r\n+\r\n+    public WorkflowServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public WorkflowDefinitionTO getDefinition(final AttributableType type) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"workflow/definition/\" + type.name().toLowerCase(),\r\n+                WorkflowDefinitionTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void updateDefinition(final AttributableType type, final WorkflowDefinitionTO definition) {\r\n+        getRestTemplate().put(baseUrl + \"workflow/definition/\" + type.name().toLowerCase(), definition);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<String> getDefinedTasks(final AttributableType type) {\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"workflow/tasks/{type}\", String[].class,\r\n+                type.name().toLowerCase()));\r\n+    }\r\n+}\r"},{"sha":"83f972b6be1ed5b335fceac3e659fe12abdd4b17","filename":"client/src/test/java/org/apache/syncope/client/test/JSONTest.java","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.syncope.common.report.UserReportletConf;\n+import org.apache.syncope.common.search.AttributeCond;\n+import org.apache.syncope.common.search.MembershipCond;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.ConfigurationTO;\n+import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditLoggerName;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.junit.Test;\n+\n+public class JSONTest {\n+\n+    @Test\n+    public void testSearchCondition() throws IOException {\n+        final AttributeCond usernameCond = new AttributeCond(AttributeCond.Type.LIKE);\n+        usernameCond.setSchema(\"username\");\n+        usernameCond.setExpression(\"%o%\");\n+\n+        final MembershipCond membershipCond = new MembershipCond();\n+        membershipCond.setRoleName(\"root\");\n+\n+        final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(usernameCond),\n+                NodeCond.getLeafCond(membershipCond));\n+\n+        assertTrue(searchCondition.isValid());\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, searchCondition);\n+\n+        NodeCond actual = mapper.readValue(writer.toString(), NodeCond.class);\n+        assertEquals(searchCondition, actual);\n+    }\n+\n+    @Test\n+    public void testLists() throws IOException {\n+        List<ConfigurationTO> confList = new ArrayList<ConfigurationTO>();\n+        ConfigurationTO configuration = new ConfigurationTO();\n+        configuration.setKey(\"key1\");\n+        configuration.setValue(\"value1\");\n+        confList.add(configuration);\n+        configuration = new ConfigurationTO();\n+        configuration.setKey(\"key2\");\n+        configuration.setValue(\"value2\");\n+        confList.add(configuration);\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, confList);\n+\n+        List<ConfigurationTO> unserializedSchemas = Arrays.asList(mapper.readValue(writer.toString(),\n+                ConfigurationTO[].class));\n+        for (ConfigurationTO unserializedSchema : unserializedSchemas) {\n+            assertNotNull(unserializedSchema);\n+        }\n+    }\n+\n+    @Test\n+    public void testMap() throws IOException {\n+        WorkflowFormPropertyTO prop = new WorkflowFormPropertyTO();\n+        prop.putEnumValue(\"key1\", \"value1\");\n+        prop.putEnumValue(\"key2\", \"value2\");\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, prop);\n+\n+        WorkflowFormPropertyTO unserializedProp = mapper.readValue(writer.toString(), WorkflowFormPropertyTO.class);\n+        assertEquals(prop, unserializedProp);\n+    }\n+\n+    @Test\n+    public void testReportletConfImplementations() throws IOException {\n+        ReportTO report = new ReportTO();\n+        report.setName(\"testReportForCreate\");\n+        report.addReportletConf(new UserReportletConf(\"first\"));\n+        report.addReportletConf(new UserReportletConf(\"second\"));\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, report);\n+\n+        ReportTO actual = mapper.readValue(writer.toString(), ReportTO.class);\n+        assertEquals(report, actual);\n+    }\n+\n+    @Test\n+    public void testAuditLoggerName() throws IOException {\n+        AuditLoggerName auditLoggerName = new AuditLoggerName(AuditElements.Category.report,\n+                AuditElements.ReportSubCategory.create, AuditElements.Result.failure);\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, auditLoggerName);\n+\n+        AuditLoggerName actual = mapper.readValue(writer.toString(), AuditLoggerName.class);\n+        assertEquals(auditLoggerName, actual);\n+    }\n+}"},{"sha":"8fcbf2fbde259dbaada174f67f5695e713f93bee","filename":"common/pom.xml","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fpom.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,126 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope</artifactId>\n+    <version>1.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Common</name>\n+  <description>Apache Syncope Common</description>\n+  <groupId>org.apache.syncope</groupId>\n+  <artifactId>syncope-common</artifactId>\n+  <packaging>bundle</packaging>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>syncope.website</id>\n+      <name>Apache Syncope website</name>\n+      <url>${site.deploymentBaseUrl}/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+  \n+  <dependencies>\n+    <dependency>\n+      <groupId>javax.ws.rs</groupId>\n+      <artifactId>javax.ws.rs-api</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>commons-lang</groupId>\n+      <artifactId>commons-lang</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-webmvc</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-web</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.codehaus.jackson</groupId>\n+      <artifactId>jackson-core-asl</artifactId>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>ch.qos.logback</groupId>\n+      <artifactId>logback-classic</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+    </dependency>\n+\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.felix</groupId>\n+        <artifactId>maven-bundle-plugin</artifactId>\n+        <extensions>true</extensions>\n+        <configuration>\n+          <instructions>\n+            <Bundle-Name>${project.name}</Bundle-Name>\n+            <Bundle-SymbolicName>org.apache.syncope.common</Bundle-SymbolicName>\n+            <Bundle-Version>${project.version}</Bundle-Version>\n+            <Export-Package>\n+              org.apache.syncope.common*;version=${project.version};-split-package:=merge-first\n+            </Export-Package>\n+            <Import-Package>\n+              org.apache.commons.lang*;version=\"[2.6,3)\",\n+              org.codehaus.jackson.annotate;version=\"[1.9,2)\",\n+              org.springframework*;version=\"[3,4)\",\n+              ch.qos.logback.classic;resolution:=optional,\n+              org.slf4j;resolution:=optional,\n+              *\n+            </Import-Package>\n+          </instructions>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-pmd-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+    \n+    <resources>\n+      <resource>\n+        <directory>..</directory>\n+        <targetPath>META-INF</targetPath>\n+        <includes>\n+          <include>LICENSE</include>\n+          <include>NOTICE</include>\n+        </includes>\n+      </resource>\n+    </resources>\n+  </build>\n+</project>"},{"sha":"f46cba8644525e17b8cf85746b7b243df892c056","filename":"common/src/main/java/org/apache/syncope/common/AbstractBaseBean.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FAbstractBaseBean.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common;\r\n+\r\n+import java.io.Serializable;\r\n+import org.apache.commons.lang.builder.EqualsBuilder;\r\n+import org.apache.commons.lang.builder.HashCodeBuilder;\r\n+import org.apache.commons.lang.builder.ReflectionToStringBuilder;\r\n+import org.apache.commons.lang.builder.ToStringStyle;\r\n+\r\n+public abstract class AbstractBaseBean implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = 3119542005279892164L;\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        return EqualsBuilder.reflectionEquals(this, obj);\r\n+    }\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        return HashCodeBuilder.reflectionHashCode(this);\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\r\n+    }\r\n+}\r"},{"sha":"e6404e0f32341a3963c6ca2f429748f5b4fd8ce5","filename":"common/src/main/java/org/apache/syncope/common/SyncopeConstants.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeConstants.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common;\r\n+\r\n+public class SyncopeConstants {\r\n+\r\n+    public static final String[] DATE_PATTERNS = {\r\n+        \"yyyy-MM-dd'T'HH:mm:ssZ\",\r\n+        \"EEE, dd MMM yyyy HH:mm:ss z\",\r\n+        \"yyyy-MM-dd'T'HH:mm:ssz\",\r\n+        \"yyyy-MM-dd HH:mm:ss\",\r\n+        \"yyyy-MM-dd HH:mm:ss.S\", // explicitly added to import date into MySql repository\r\n+        \"yyyy-MM-dd\"};\r\n+\r\n+    public static final String DEFAULT_DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ssZ\";\r\n+\r\n+    /**\r\n+     * This constant will be used to identify HTTP header key to look for object ID assigned to an object after its\r\n+     * creation. HTTP Response after PUT operation should contain this key with resource id as its value.\r\n+     */\r\n+    public static final String REST_HEADER_ID = \"org.apache.syncope.resource.id\";\r\n+\r\n+    /**\r\n+     * This constant is not defined in javax.ws.rs.core.HttpHeaders.\r\n+     *\r\n+     * @see javax.ws.rs.core.HttpHeaders\r\n+     */\r\n+    public static final String CONTENT_DISPOSITION_HEADER = \"Content-Disposition\";\r\n+\r\n+    public static final String DEFAULT_ENCODING = \"UTF-8\";\r\n+\r\n+}\r"},{"sha":"9c8fb599c7857a51cc9cf771dc6ac9e08fdc0447","filename":"common/src/main/java/org/apache/syncope/common/annotation/ClassList.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FClassList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FClassList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FClassList.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,26 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.annotation;\r\n+\r\n+import java.lang.annotation.Retention;\r\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\r\n+\r\n+@Retention(RUNTIME)\r\n+public @interface ClassList {\r\n+}\r"},{"sha":"10ff231516e090800e696fb390eed5dd53c12272","filename":"common/src/main/java/org/apache/syncope/common/annotation/FormAttributeField.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FFormAttributeField.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FFormAttributeField.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FFormAttributeField.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.annotation;\r\n+\r\n+import java.lang.annotation.ElementType;\r\n+import java.lang.annotation.Retention;\r\n+import java.lang.annotation.RetentionPolicy;\r\n+import java.lang.annotation.Target;\r\n+\r\n+import org.apache.syncope.common.types.IntMappingType;\r\n+\r\n+@Target( { ElementType.FIELD })\r\n+@Retention(RetentionPolicy.RUNTIME)\r\n+public @interface FormAttributeField {\r\n+\r\n+    IntMappingType schema() default IntMappingType.UserSchema;\r\n+}\r"},{"sha":"e0a0466243377e1a1a007ac23db2a6d2ef40b1e9","filename":"common/src/main/java/org/apache/syncope/common/annotation/SchemaList.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FSchemaList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FSchemaList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FSchemaList.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,28 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.annotation;\r\n+\r\n+import java.lang.annotation.Retention;\r\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\r\n+\r\n+@Retention(RUNTIME)\r\n+public @interface SchemaList {\r\n+\r\n+    boolean extended() default false;\r\n+}\r"},{"sha":"00744af938b8e11de0336097669c3369877c1c16","filename":"common/src/main/java/org/apache/syncope/common/mod/AbstractAttributableMod.java","status":"added","additions":273,"deletions":0,"changes":273,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAbstractAttributableMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAbstractAttributableMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAbstractAttributableMod.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,273 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.mod;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+/**\r\n+ * Abstract base class for objects that can have attributes removed, added or updated.\r\n+ *\r\n+ * Attributes can be regular attributes, derived attributes, virtual attributes and resources.\r\n+ */\r\n+@XmlType\r\n+public abstract class AbstractAttributableMod extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 3241118574016303198L;\r\n+    protected long id;\r\n+    protected Set<AttributeMod> attributesToBeUpdated;\r\n+    protected Set<String> attributesToBeRemoved;\r\n+    protected Set<String> derivedAttributesToBeAdded;\r\n+    protected Set<String> derivedAttributesToBeRemoved;\r\n+    protected Set<AttributeMod> virtualAttributesToBeUpdated;\r\n+    protected Set<String> virtualAttributesToBeRemoved;\r\n+    protected Set<String> resourcesToBeAdded;\r\n+    protected Set<String> resourcesToBeRemoved;\r\n+\r\n+    /**\r\n+     * All attributes are initialized to empty sets.\r\n+     */\r\n+    public AbstractAttributableMod() {\r\n+        super();\r\n+\r\n+        attributesToBeUpdated = new HashSet<AttributeMod>();\r\n+        attributesToBeRemoved = new HashSet<String>();\r\n+        derivedAttributesToBeAdded = new HashSet<String>();\r\n+        derivedAttributesToBeRemoved = new HashSet<String>();\r\n+        virtualAttributesToBeUpdated = new HashSet<AttributeMod>();\r\n+        virtualAttributesToBeRemoved = new HashSet<String>();\r\n+        resourcesToBeAdded = new HashSet<String>();\r\n+        resourcesToBeRemoved = new HashSet<String>();\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    /**\r\n+     * Convenience method for removing entire attribute instead removing each value in an AttributeMod object\r\n+     *\r\n+     * @param name (schema) of attribute to be removed.\r\n+     * @return true on success.\r\n+     */\r\n+    public boolean addAttributeToBeRemoved(String attribute) {\r\n+        return attributesToBeRemoved.add(attribute);\r\n+    }\r\n+\r\n+    /**\r\n+     * Convenience method for removing entire attribute instead removing each value in an AttributeMod object\r\n+     *\r\n+     * @param name (schema) of attribute to be removed.\r\n+     * @return true on success.\r\n+     */\r\n+    public boolean removeAttributeToBeRemoved(String attribute) {\r\n+        return attributesToBeRemoved.remove(attribute);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"attributesToBeRemoved\")\r\n+    @XmlElement(name = \"attribute\")\r\n+    public Set<String> getAttributesToBeRemoved() {\r\n+        return attributesToBeRemoved;\r\n+    }\r\n+\r\n+    public void setAttributesToBeRemoved(Set<String> attributesToBeRemoved) {\r\n+        this.attributesToBeRemoved = attributesToBeRemoved;\r\n+    }\r\n+\r\n+    /**\r\n+     * Add an attribute modification object. AttributeMod itself indicates how the attribute should be modified.\r\n+     *\r\n+     * @param attribute modification object\r\n+     * @see AttributeMod\r\n+     * @return true on success\r\n+     */\r\n+    public boolean addAttributeToBeUpdated(AttributeMod attribute) {\r\n+        return attributesToBeUpdated.add(attribute);\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove an attribute modification object. AttributeMod itself indicates how the attribute should be modified.\r\n+     *\r\n+     * @param attribute modification object\r\n+     * @see AttributeMod\r\n+     * @return true on success\r\n+     */\r\n+    public boolean removeAttributeToBeUpdated(AttributeMod attribute) {\r\n+        return attributesToBeUpdated.remove(attribute);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"attributesToBeUpdated\")\r\n+    @XmlElement(name = \"attributeMod\")\r\n+    public Set<AttributeMod> getAttributesToBeUpdated() {\r\n+        return attributesToBeUpdated;\r\n+    }\r\n+\r\n+    public void setAttributesToBeUpdated(Set<AttributeMod> attributesToBeUpdated) {\r\n+        this.attributesToBeUpdated = attributesToBeUpdated;\r\n+    }\r\n+\r\n+    /**\r\n+     * Add an attribute modification object. AttributeMod itself indicates how the attribute should be modified.\r\n+     *\r\n+     * @param attribute modification object\r\n+     * @see AttributeMod\r\n+     * @return true on success\r\n+     */\r\n+    public boolean addDerivedAttributeToBeAdded(String derivedAttribute) {\r\n+        return derivedAttributesToBeAdded.add(derivedAttribute);\r\n+    }\r\n+\r\n+    /**\r\n+     * Add a derivedattribute. Value is calculated by its definition.\r\n+     *\r\n+     * @param derivedAttribute\r\n+     * @return true on success\r\n+     */\r\n+    public boolean removeDerivedAttributeToBeAdded(String derivedAttribute) {\r\n+        return derivedAttributesToBeAdded.remove(derivedAttribute);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"derivedAttributesToBeAdded\")\r\n+    @XmlElement(name = \"attributeName\")\r\n+    public Set<String> getDerivedAttributesToBeAdded() {\r\n+        return derivedAttributesToBeAdded;\r\n+    }\r\n+\r\n+    public void setDerivedAttributesToBeAdded(Set<String> derivedAttributesToBeAdded) {\r\n+\r\n+        this.derivedAttributesToBeAdded = derivedAttributesToBeAdded;\r\n+    }\r\n+\r\n+    public boolean addDerivedAttributeToBeRemoved(String derivedAttribute) {\r\n+        return derivedAttributesToBeRemoved.add(derivedAttribute);\r\n+    }\r\n+\r\n+    public boolean removeDerivedAttributeToBeRemoved(String derivedAttribute) {\r\n+        return derivedAttributesToBeRemoved.remove(derivedAttribute);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"derivedAttributesToBeRemoved\")\r\n+    @XmlElement(name = \"attribute\")\r\n+    public Set<String> getDerivedAttributesToBeRemoved() {\r\n+        return derivedAttributesToBeRemoved;\r\n+    }\r\n+\r\n+    public void setDerivedAttributesToBeRemoved(Set<String> derivedAttributesToBeRemoved) {\r\n+\r\n+        this.derivedAttributesToBeRemoved = derivedAttributesToBeRemoved;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"virtualAttributesToBeRemoved\")\r\n+    @XmlElement(name = \"attribute\")\r\n+    public Set<String> getVirtualAttributesToBeRemoved() {\r\n+        return virtualAttributesToBeRemoved;\r\n+    }\r\n+\r\n+    public boolean addVirtualAttributeToBeRemoved(String virtualAttributeToBeRemoved) {\r\n+\r\n+        return virtualAttributesToBeRemoved.add(virtualAttributeToBeRemoved);\r\n+    }\r\n+\r\n+    public boolean removeVirtualAttributeToBeRemoved(String virtualAttributeToBeRemoved) {\r\n+\r\n+        return virtualAttributesToBeRemoved.remove(virtualAttributeToBeRemoved);\r\n+    }\r\n+\r\n+    public void setVirtualAttributesToBeRemoved(Set<String> virtualAttributesToBeRemoved) {\r\n+\r\n+        this.virtualAttributesToBeRemoved = virtualAttributesToBeRemoved;\r\n+    }\r\n+\r\n+    public boolean addVirtualAttributeToBeUpdated(AttributeMod virtualAttributeToBeUpdated) {\r\n+\r\n+        return virtualAttributesToBeUpdated.add(virtualAttributeToBeUpdated);\r\n+    }\r\n+\r\n+    public boolean removeVirtualAttributeToBeUpdated(AttributeMod virtualAttributeToBeUpdated) {\r\n+\r\n+        return virtualAttributesToBeUpdated.remove(virtualAttributeToBeUpdated);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"derivedAttributesToBeUpdated\")\r\n+    @XmlElement(name = \"attribute\")\r\n+    public Set<AttributeMod> getVirtualAttributesToBeUpdated() {\r\n+        return virtualAttributesToBeUpdated;\r\n+    }\r\n+\r\n+    public void setVirtualAttributesToBeUpdated(Set<AttributeMod> virtualAttributesToBeUpdated) {\r\n+\r\n+        this.virtualAttributesToBeUpdated = virtualAttributesToBeUpdated;\r\n+    }\r\n+\r\n+    public boolean addResourceToBeAdded(String resource) {\r\n+        return resourcesToBeAdded.add(resource);\r\n+    }\r\n+\r\n+    public boolean removeResourceToBeAdded(String resource) {\r\n+        return resourcesToBeAdded.remove(resource);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"resourcesToBeAdded\")\r\n+    @XmlElement(name = \"resource\")\r\n+    public Set<String> getResourcesToBeAdded() {\r\n+        return resourcesToBeAdded;\r\n+    }\r\n+\r\n+    public void setResourcesToBeAdded(Set<String> resourcesToBeAdded) {\r\n+        this.resourcesToBeAdded = resourcesToBeAdded;\r\n+    }\r\n+\r\n+    public boolean addResourceToBeRemoved(String resource) {\r\n+        return resourcesToBeRemoved.add(resource);\r\n+    }\r\n+\r\n+    public boolean removeResourceToBeRemoved(String resource) {\r\n+        return resourcesToBeRemoved.remove(resource);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"resourcesToBeRemoved\")\r\n+    @XmlElement(name = \"resource\")\r\n+    public Set<String> getResourcesToBeRemoved() {\r\n+        return resourcesToBeRemoved;\r\n+    }\r\n+\r\n+    public void setResourcesToBeRemoved(Set<String> resourcesToBeRemoved) {\r\n+        this.resourcesToBeRemoved = resourcesToBeRemoved;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return true is all backing Sets are empty.\r\n+     */\r\n+    public boolean isEmpty() {\r\n+        return attributesToBeUpdated.isEmpty() && attributesToBeRemoved.isEmpty()\r\n+                && derivedAttributesToBeAdded.isEmpty() && derivedAttributesToBeRemoved.isEmpty()\r\n+                && virtualAttributesToBeUpdated.isEmpty() && virtualAttributesToBeRemoved.isEmpty()\r\n+                && resourcesToBeAdded.isEmpty() && resourcesToBeRemoved.isEmpty();\r\n+    }\r\n+}\r"},{"sha":"f0c2cedab2bb8c7628ba350247da3e58dcc862e9","filename":"common/src/main/java/org/apache/syncope/common/mod/AttributeMod.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAttributeMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAttributeMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAttributeMod.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,99 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.mod;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement\r\n+@XmlType\r\n+public class AttributeMod extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -913573979137431406L;\r\n+\r\n+    private String schema;\r\n+\r\n+    private List<String> valuesToBeAdded;\r\n+\r\n+    private List<String> valuesToBeRemoved;\r\n+\r\n+    public AttributeMod() {\r\n+        super();\r\n+\r\n+        valuesToBeAdded = new ArrayList<String>();\r\n+        valuesToBeRemoved = new ArrayList<String>();\r\n+    }\r\n+\r\n+    public String getSchema() {\r\n+        return schema;\r\n+    }\r\n+\r\n+    public void setSchema(String schema) {\r\n+        this.schema = schema;\r\n+    }\r\n+\r\n+    public boolean addValueToBeAdded(String value) {\r\n+        return valuesToBeAdded.add(value);\r\n+    }\r\n+\r\n+    public boolean removeValueToBeAdded(String value) {\r\n+        return valuesToBeAdded.remove(value);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"valuesToBeAdded\")\r\n+    @XmlElement(name = \"value\")\r\n+    public List<String> getValuesToBeAdded() {\r\n+        return valuesToBeAdded;\r\n+    }\r\n+\r\n+    public void setValuesToBeAdded(List<String> valuesToBeAdded) {\r\n+        this.valuesToBeAdded = valuesToBeAdded;\r\n+    }\r\n+\r\n+    public boolean addValueToBeRemoved(String value) {\r\n+        return valuesToBeRemoved.add(value);\r\n+    }\r\n+\r\n+    public boolean removeValueToBeRemoved(String value) {\r\n+        return valuesToBeRemoved.remove(value);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"valuesToBeRemoved\")\r\n+    @XmlElement(name = \"value\")\r\n+    public List<String> getValuesToBeRemoved() {\r\n+        return valuesToBeRemoved;\r\n+    }\r\n+\r\n+    public void setValuesToBeRemoved(List<String> valuesToBeRemoved) {\r\n+        this.valuesToBeRemoved = valuesToBeRemoved;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public boolean isEmpty() {\r\n+        return valuesToBeAdded.isEmpty() && valuesToBeRemoved.isEmpty();\r\n+    }\r\n+}\r"},{"sha":"3c1e869c4cc659997013f0aabac271e27fd8a1a7","filename":"common/src/main/java/org/apache/syncope/common/mod/MembershipMod.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FMembershipMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FMembershipMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FMembershipMod.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,94 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.mod;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.Set;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+@XmlRootElement\r\n+@XmlType\r\n+public class MembershipMod extends AbstractAttributableMod {\r\n+\r\n+    private static final long serialVersionUID = 2511869129977331525L;\r\n+\r\n+    private long role;\r\n+\r\n+    public long getRole() {\r\n+        return role;\r\n+    }\r\n+\r\n+    public void setRole(long role) {\r\n+        this.role = role;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean addResourceToBeAdded(String resource) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean addResourceToBeRemoved(String resource) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"resourcesToBeAdded\")\r\n+    @XmlElement(name = \"resource\")\r\n+    @Override\r\n+    public Set<String> getResourcesToBeAdded() {\r\n+        return Collections.emptySet();\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"resourcesToBeRemoved\")\r\n+    @XmlElement(name = \"resource\")\r\n+    @Override\r\n+    public Set<String> getResourcesToBeRemoved() {\r\n+        return Collections.emptySet();\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean removeResourceToBeAdded(String resource) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean removeResourceToBeRemoved(String resource) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setResourcesToBeAdded(Set<String> resourcesToBeAdded) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setResourcesToBeRemoved(Set<String> resourcesToBeRemoved) {\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    @Override\r\n+    public boolean isEmpty() {\r\n+        return super.isEmpty() && role == 0;\r\n+    }\r\n+}\r"},{"sha":"356441065496308df8fa7402d1943235d543d5d4","filename":"common/src/main/java/org/apache/syncope/common/mod/ReferenceMod.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FReferenceMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FReferenceMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FReferenceMod.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.mod;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+/**\r\n+ * This class is used to specify the willing to modify an external reference id. Use 'null' ReferenceMod to keep the\r\n+ * current reference id; use a ReferenceMod with a null id to try to reset the reference id; use a ReferenceMod with a\r\n+ * not null id to specify a new reference id.\r\n+ */\r\n+public class ReferenceMod extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -4188817853738067677L;\r\n+\r\n+    private Long id;\r\n+\r\n+    public ReferenceMod() {\r\n+        this.id = null;\r\n+    }\r\n+\r\n+    public ReferenceMod(final Long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public Long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(Long id) {\r\n+        this.id = id;\r\n+    }\r\n+}\r"},{"sha":"98ddf2ecda511dce755dc424d180d5ca89bb273b","filename":"common/src/main/java/org/apache/syncope/common/mod/RoleMod.java","status":"added","additions":156,"deletions":0,"changes":156,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FRoleMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FRoleMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FRoleMod.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,156 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.mod;\r\n+\r\n+import java.util.List;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+public class RoleMod extends AbstractAttributableMod {\r\n+\r\n+    private static final long serialVersionUID = 7455805264680210747L;\r\n+\r\n+    private String name;\r\n+\r\n+    private ReferenceMod userOwner;\r\n+\r\n+    private ReferenceMod roleOwner;\r\n+\r\n+    private Boolean inheritOwner;\r\n+\r\n+    private Boolean inheritAttributes;\r\n+\r\n+    private Boolean inheritDerivedAttributes;\r\n+\r\n+    private Boolean inheritVirtualAttributes;\r\n+\r\n+    private Boolean inheritAccountPolicy;\r\n+\r\n+    private Boolean inheritPasswordPolicy;\r\n+\r\n+    private List<String> entitlements;\r\n+\r\n+    private ReferenceMod passwordPolicy;\r\n+\r\n+    private ReferenceMod accountPolicy;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public ReferenceMod getUserOwner() {\r\n+        return userOwner;\r\n+    }\r\n+\r\n+    public void setUserOwner(ReferenceMod userOwner) {\r\n+        this.userOwner = userOwner;\r\n+    }\r\n+\r\n+    public ReferenceMod getRoleOwner() {\r\n+        return roleOwner;\r\n+    }\r\n+\r\n+    public void setRoleOwner(ReferenceMod roleOwner) {\r\n+        this.roleOwner = roleOwner;\r\n+    }\r\n+\r\n+    public Boolean getInheritOwner() {\r\n+        return inheritOwner;\r\n+    }\r\n+\r\n+    public void setInheritOwner(Boolean inheritOwner) {\r\n+        this.inheritOwner = inheritOwner;\r\n+    }\r\n+\r\n+    public Boolean getInheritAttributes() {\r\n+        return inheritAttributes;\r\n+    }\r\n+\r\n+    public void setInheritAttributes(final Boolean inheritAttributes) {\r\n+        this.inheritAttributes = inheritAttributes;\r\n+    }\r\n+\r\n+    public Boolean getInheritDerivedAttributes() {\r\n+        return inheritDerivedAttributes;\r\n+    }\r\n+\r\n+    public void setInheritDerivedAttributes(final Boolean inheritDerivedAttributes) {\r\n+        this.inheritDerivedAttributes = inheritDerivedAttributes;\r\n+    }\r\n+\r\n+    public Boolean getInheritVirtualAttributes() {\r\n+        return inheritVirtualAttributes;\r\n+    }\r\n+\r\n+    public void setInheritVirtualAttributes(final Boolean inheritVirtualAttributes) {\r\n+        this.inheritVirtualAttributes = inheritVirtualAttributes;\r\n+    }\r\n+\r\n+    public List<String> getEntitlements() {\r\n+        return entitlements;\r\n+    }\r\n+\r\n+    public void setEntitlements(final List<String> entitlements) {\r\n+        this.entitlements = entitlements;\r\n+    }\r\n+\r\n+    public ReferenceMod getPasswordPolicy() {\r\n+        return passwordPolicy;\r\n+    }\r\n+\r\n+    public void setPasswordPolicy(final ReferenceMod passwordPolicy) {\r\n+        this.passwordPolicy = passwordPolicy;\r\n+    }\r\n+\r\n+    public Boolean getInheritPasswordPolicy() {\r\n+        return inheritPasswordPolicy;\r\n+    }\r\n+\r\n+    public void setInheritPasswordPolicy(final Boolean inheritPasswordPolicy) {\r\n+        this.inheritPasswordPolicy = inheritPasswordPolicy;\r\n+    }\r\n+\r\n+    public ReferenceMod getAccountPolicy() {\r\n+        return accountPolicy;\r\n+    }\r\n+\r\n+    public void setAccountPolicy(final ReferenceMod accountPolicy) {\r\n+        this.accountPolicy = accountPolicy;\r\n+    }\r\n+\r\n+    public Boolean getInheritAccountPolicy() {\r\n+        return inheritAccountPolicy;\r\n+    }\r\n+\r\n+    public void setInheritAccountPolicy(final Boolean inheritAccountPolicy) {\r\n+        this.inheritAccountPolicy = inheritAccountPolicy;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    @Override\r\n+    public boolean isEmpty() {\r\n+        return super.isEmpty() && name == null && userOwner == null && roleOwner == null\r\n+                && inheritOwner == null && inheritAccountPolicy == null && inheritPasswordPolicy == null\r\n+                && inheritAttributes == null && inheritDerivedAttributes == null && inheritVirtualAttributes == null\r\n+                && accountPolicy == null && passwordPolicy == null && (entitlements == null || entitlements.isEmpty());\r\n+    }\r\n+}\r"},{"sha":"6cfdf9fa7a97c52f7913ee2c8a9837c270643c20","filename":"common/src/main/java/org/apache/syncope/common/mod/UserMod.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FUserMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FUserMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FUserMod.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,133 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.mod;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+import org.apache.syncope.common.to.PropagationRequestTO;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+@XmlRootElement(name = \"userMod\")\r\n+@XmlType\r\n+public class UserMod extends AbstractAttributableMod {\r\n+\r\n+    private static final long serialVersionUID = 3081848906558106204L;\r\n+\r\n+    private String password;\r\n+\r\n+    private String username;\r\n+\r\n+    private final Set<MembershipMod> membershipsToBeAdded;\r\n+\r\n+    private final Set<Long> membershipsToBeRemoved;\r\n+\r\n+    private PropagationRequestTO pwdPropRequest;\r\n+\r\n+    public UserMod() {\r\n+        super();\r\n+\r\n+        membershipsToBeAdded = new HashSet<MembershipMod>();\r\n+        membershipsToBeRemoved = new HashSet<Long>();\r\n+    }\r\n+\r\n+    public String getUsername() {\r\n+        return username;\r\n+    }\r\n+\r\n+    public void setUsername(final String username) {\r\n+        this.username = username;\r\n+    }\r\n+\r\n+    public String getPassword() {\r\n+        return password;\r\n+    }\r\n+\r\n+    public void setPassword(final String password) {\r\n+        this.password = password;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"membershipsToBeAdded\")\r\n+    @XmlElement(name = \"membership\")\r\n+    public Set<MembershipMod> getMembershipsToBeAdded() {\r\n+        return membershipsToBeAdded;\r\n+    }\r\n+\r\n+    public boolean addMembershipToBeAdded(final MembershipMod membershipMod) {\r\n+        return membershipsToBeAdded.add(membershipMod);\r\n+    }\r\n+\r\n+    public boolean removeMembershipToBeAdded(final MembershipMod membershipMod) {\r\n+        return membershipsToBeAdded.remove(membershipMod);\r\n+    }\r\n+\r\n+    public void setMembershipsToBeAdded(final Set<MembershipMod> membershipsToBeAdded) {\r\n+        if (this.membershipsToBeAdded != membershipsToBeAdded) {\r\n+            this.membershipsToBeAdded.clear();\r\n+            if (membershipsToBeAdded != null && !membershipsToBeAdded.isEmpty()) {\r\n+                this.membershipsToBeAdded.addAll(membershipsToBeAdded);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"membershipsToBeRemoved\")\r\n+    @XmlElement(name = \"membership\")\r\n+    public Set<Long> getMembershipsToBeRemoved() {\r\n+        return membershipsToBeRemoved;\r\n+    }\r\n+\r\n+    public boolean addMembershipToBeRemoved(final Long membershipToBeRemoved) {\r\n+        return membershipsToBeRemoved.add(membershipToBeRemoved);\r\n+    }\r\n+\r\n+    public boolean removeMembershipToBeRemoved(final Long membershipToBeRemoved) {\r\n+        return membershipsToBeRemoved.remove(membershipToBeRemoved);\r\n+    }\r\n+\r\n+    public void setMembershipsToBeRemoved(final Set<Long> membershipsToBeRemoved) {\r\n+        if (this.membershipsToBeRemoved != membershipsToBeRemoved) {\r\n+            this.membershipsToBeRemoved.clear();\r\n+            if (membershipsToBeRemoved != null && !membershipsToBeRemoved.isEmpty()) {\r\n+                this.membershipsToBeRemoved.addAll(membershipsToBeRemoved);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public PropagationRequestTO getPwdPropRequest() {\r\n+        return pwdPropRequest;\r\n+    }\r\n+\r\n+    public void setPwdPropRequest(final PropagationRequestTO pwdPropRequest) {\r\n+        this.pwdPropRequest = pwdPropRequest;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    @Override\r\n+    public boolean isEmpty() {\r\n+        return super.isEmpty()\r\n+                && password == null\r\n+                && username == null\r\n+                && membershipsToBeAdded.isEmpty()\r\n+                && membershipsToBeRemoved.isEmpty()\r\n+                && pwdPropRequest == null;\r\n+    }\r\n+}\r"},{"sha":"7c8848782f4f5985b3fd6c24306f2c323f3555d9","filename":"common/src/main/java/org/apache/syncope/common/report/AbstractReportletConf.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FAbstractReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FAbstractReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FAbstractReportletConf.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.report;\r\n+\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlType\r\n+public abstract class AbstractReportletConf extends AbstractBaseBean implements ReportletConf {\r\n+\r\n+    private static final long serialVersionUID = -6130008602014516608L;\r\n+\r\n+    private String name;\r\n+\r\n+    public AbstractReportletConf() {\r\n+        this(\"\");\r\n+        setName(getClass().getName());\r\n+    }\r\n+\r\n+    public AbstractReportletConf(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    @Override\r\n+    public final String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public final void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"9db2c264970f98f69971cb67f9234a391ff31309","filename":"common/src/main/java/org/apache/syncope/common/report/ReportletConf.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FReportletConf.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,32 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.report;\r\n+\r\n+import org.codehaus.jackson.annotate.JsonTypeInfo;\r\n+\r\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n+public interface ReportletConf {\r\n+\r\n+    /**\r\n+     * Give name of related reportlet instance.\r\n+     *\r\n+     * @return name of this reportlet instance\r\n+     */\r\n+    String getName();\r\n+}\r"},{"sha":"8bea668fb25c3f444b17427fa1a4fbf37ca17795","filename":"common/src/main/java/org/apache/syncope/common/report/StaticReportletConf.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,112 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.report;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Date;\r\n+import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.types.TraceLevel;\r\n+\r\n+@XmlRootElement\r\n+@XmlType\r\n+public class StaticReportletConf extends AbstractReportletConf {\r\n+\r\n+    private static final long serialVersionUID = -4814950086361753689L;\r\n+\r\n+    private String stringField;\r\n+\r\n+    private Long longField;\r\n+\r\n+    private Double doubleField;\r\n+\r\n+    private Date dateField;\r\n+\r\n+    private TraceLevel traceLevel;\r\n+\r\n+    private List<String> listField;\r\n+\r\n+    public StaticReportletConf() {\r\n+        super();\r\n+    }\r\n+\r\n+    public StaticReportletConf(final String name) {\r\n+        super(name);\r\n+        listField = new ArrayList<String>();\r\n+    }\r\n+\r\n+    public Date getDateField() {\r\n+        return dateField == null\r\n+                ? null\r\n+                : new Date(dateField.getTime());\r\n+    }\r\n+\r\n+    public void setDateField(Date dateField) {\r\n+        this.dateField = dateField == null\r\n+                ? null\r\n+                : new Date(dateField.getTime());\r\n+    }\r\n+\r\n+    public Double getDoubleField() {\r\n+        return doubleField;\r\n+    }\r\n+\r\n+    public void setDoubleField(Double doubleField) {\r\n+        this.doubleField = doubleField;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"listField\")\r\n+    @XmlElement(name = \"field\")\r\n+    public List<String> getListField() {\r\n+        return listField;\r\n+    }\r\n+\r\n+    public void setListField(List<String> listField) {\r\n+        this.listField = listField;\r\n+    }\r\n+\r\n+    public Long getLongField() {\r\n+        return longField;\r\n+    }\r\n+\r\n+    public void setLongField(Long longField) {\r\n+        this.longField = longField;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public TraceLevel getTraceLevel() {\r\n+        return traceLevel;\r\n+    }\r\n+\r\n+    public void setTraceLevel(TraceLevel traceLevel) {\r\n+        this.traceLevel = traceLevel;\r\n+    }\r\n+}\r"},{"sha":"8aa142143cef5bd86a4c14155be2de70bce4b5d9","filename":"common/src/main/java/org/apache/syncope/common/report/UserReportletConf.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,131 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.report;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.annotation.FormAttributeField;\r\n+import org.apache.syncope.common.search.NodeCond;\r\n+import org.apache.syncope.common.types.IntMappingType;\r\n+\r\n+@XmlRootElement(name = \"UserReportletConfiguration\")\r\n+@XmlType\r\n+public class UserReportletConf extends AbstractReportletConf {\r\n+\r\n+    @XmlEnum\r\n+    @XmlType(name = \"UserReportletConfigurationFeature\")\r\n+    public enum Feature {\r\n+\r\n+        id,\r\n+        username,\r\n+        workflowId,\r\n+        status,\r\n+        creationDate,\r\n+        lastLoginDate,\r\n+        changePwdDate,\r\n+        passwordHistorySize,\r\n+        failedLoginCount,\r\n+        memberships,\r\n+        resources\r\n+\r\n+    }\r\n+\r\n+    private static final long serialVersionUID = 6602717600064602764L;\r\n+\r\n+    private NodeCond matchingCond;\r\n+\r\n+    @FormAttributeField(schema = IntMappingType.UserSchema)\r\n+    private List<String> attrs;\r\n+\r\n+    @FormAttributeField(schema = IntMappingType.UserDerivedSchema)\r\n+    private List<String> derAttrs;\r\n+\r\n+    @FormAttributeField(schema = IntMappingType.UserVirtualSchema)\r\n+    private List<String> virAttrs;\r\n+\r\n+    private List<Feature> features;\r\n+\r\n+    public UserReportletConf() {\r\n+        super();\r\n+    }\r\n+\r\n+    public UserReportletConf(final String name) {\r\n+        super(name);\r\n+\r\n+        attrs = new ArrayList<String>();\r\n+        derAttrs = new ArrayList<String>();\r\n+        virAttrs = new ArrayList<String>();\r\n+        features = new ArrayList<Feature>();\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"normalAttributes\")\r\n+    @XmlElement(name = \"attribute\")\r\n+    public List<String> getAttrs() {\r\n+        return attrs;\r\n+    }\r\n+\r\n+    public void setAttrs(List<String> attrs) {\r\n+        this.attrs = attrs;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"derivedAttributes\")\r\n+    @XmlElement(name = \"attribute\")\r\n+    public List<String> getDerAttrs() {\r\n+        return derAttrs;\r\n+    }\r\n+\r\n+    public void setDerAttrs(List<String> derAttrs) {\r\n+        this.derAttrs = derAttrs;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"features\")\r\n+    @XmlElement(name = \"feature\")\r\n+    public List<Feature> getFeatures() {\r\n+        return features;\r\n+    }\r\n+\r\n+    public void setFeatures(List<Feature> features) {\r\n+        this.features = features;\r\n+    }\r\n+\r\n+    public NodeCond getMatchingCond() {\r\n+        return matchingCond;\r\n+    }\r\n+\r\n+    public void setMatchingCond(NodeCond matchingCond) {\r\n+        this.matchingCond = matchingCond;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"virtualAttributes\")\r\n+    @XmlElement(name = \"attribute\")\r\n+    public List<String> getVirAttrs() {\r\n+        return virAttrs;\r\n+    }\r\n+\r\n+    public void setVirAttrs(List<String> virAttrs) {\r\n+        this.virAttrs = virAttrs;\r\n+    }\r\n+}\r"},{"sha":"c91dd0dc277768f12962b034d20d56aacfd5e08c","filename":"common/src/main/java/org/apache/syncope/common/search/AttributableCond.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FAttributableCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FAttributableCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FAttributableCond.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,34 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.search;\r\n+\r\n+/**\r\n+ * Search condition to be applied when comparing bean field values.\r\n+ */\r\n+public class AttributableCond extends AttributeCond implements SearchCond {\r\n+\r\n+    private static final long serialVersionUID = -1880319220462653955L;\r\n+\r\n+    public AttributableCond() {\r\n+    }\r\n+\r\n+    public AttributableCond(final Type conditionType) {\r\n+        super(conditionType);\r\n+    }\r\n+}\r"},{"sha":"1659b8396ab0a5c3acf50f73d7636c4e42f94ab9","filename":"common/src/main/java/org/apache/syncope/common/search/AttributeCond.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FAttributeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FAttributeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FAttributeCond.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,94 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.search;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+/**\r\n+ * Search condition to be applied when comparing attribute values.\r\n+ */\r\n+@XmlRootElement(name = \"attributeCondition\")\r\n+@XmlType\r\n+public class AttributeCond extends AbstractBaseBean implements SearchCond {\r\n+\r\n+    private static final long serialVersionUID = 3275277728404021417L;\r\n+\r\n+    @XmlEnum\r\n+    @XmlType(name = \"attributeConditionType\")\r\n+    public enum Type {\r\n+\r\n+        LIKE,\r\n+        EQ,\r\n+        GT,\r\n+        LT,\r\n+        GE,\r\n+        LE,\r\n+        ISNULL,\r\n+        ISNOTNULL\r\n+\r\n+    }\r\n+\r\n+    private Type type;\r\n+\r\n+    private String schema;\r\n+\r\n+    private String expression;\r\n+\r\n+    public AttributeCond() {\r\n+        super();\r\n+    }\r\n+\r\n+    public AttributeCond(final Type conditionType) {\r\n+        super();\r\n+        this.type = conditionType;\r\n+    }\r\n+\r\n+    public final String getExpression() {\r\n+        return expression;\r\n+    }\r\n+\r\n+    public final void setExpression(final String conditionExpression) {\r\n+        this.expression = conditionExpression;\r\n+    }\r\n+\r\n+    public final String getSchema() {\r\n+        return schema;\r\n+    }\r\n+\r\n+    public final void setSchema(final String conditionSchema) {\r\n+        this.schema = conditionSchema;\r\n+    }\r\n+\r\n+    public final Type getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public final void setType(final Type conditionType) {\r\n+        this.type = conditionType;\r\n+    }\r\n+\r\n+    @Override\r\n+    public final boolean isValid() {\r\n+        return type != null && schema != null && (type == Type.ISNULL || type == Type.ISNOTNULL || expression != null);\r\n+    }\r\n+}\r"},{"sha":"0309376f668d74be48cc5c8591e83e2f9433601c","filename":"common/src/main/java/org/apache/syncope/common/search/EntitlementCond.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FEntitlementCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FEntitlementCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FEntitlementCond.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.search;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"entitlementCondition\")\r\n+@XmlType\r\n+public class EntitlementCond extends AbstractBaseBean implements SearchCond {\r\n+\r\n+    private static final long serialVersionUID = -4077781080368377428L;\r\n+\r\n+    private String expression;\r\n+\r\n+    public String getExpression() {\r\n+        return expression;\r\n+    }\r\n+\r\n+    public void setExpression(final String expression) {\r\n+        this.expression = expression;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean isValid() {\r\n+        return expression != null;\r\n+    }\r\n+}\r"},{"sha":"f8e3c31ed131e7a43dbc25b6b076092409edd2f9","filename":"common/src/main/java/org/apache/syncope/common/search/MembershipCond.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FMembershipCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FMembershipCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FMembershipCond.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.search;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+/**\r\n+ * Search condition to be applied when searching for memberships.\r\n+ */\r\n+@XmlRootElement(name = \"membershipCondition\")\r\n+@XmlType\r\n+public class MembershipCond extends AbstractBaseBean implements SearchCond {\r\n+\r\n+    private static final long serialVersionUID = -728155256293925989L;\r\n+\r\n+    private Long roleId;\r\n+\r\n+    private String roleName;\r\n+\r\n+    public MembershipCond() {\r\n+        super();\r\n+    }\r\n+\r\n+    public Long getRoleId() {\r\n+        return roleId;\r\n+    }\r\n+\r\n+    public void setRoleId(Long roleId) {\r\n+        this.roleId = roleId;\r\n+    }\r\n+\r\n+    public String getRoleName() {\r\n+        return roleName;\r\n+    }\r\n+\r\n+    public void setRoleName(String roleName) {\r\n+        this.roleName = roleName;\r\n+    }\r\n+\r\n+    @Override\r\n+    public final boolean isValid() {\r\n+        return !(roleId == null && roleName == null);\r\n+    }\r\n+}\r"},{"sha":"58de63b8d2fe2318dda00654dd73e10718b920f3","filename":"common/src/main/java/org/apache/syncope/common/search/NodeCond.java","status":"added","additions":250,"deletions":0,"changes":250,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FNodeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FNodeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FNodeCond.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,250 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.search;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+@XmlRootElement(name = \"nodeCondition\")\r\n+@XmlType\r\n+public class NodeCond extends AbstractBaseBean {\r\n+\r\n+    @XmlEnum\r\n+    @XmlType(name = \"nodeConditionType\")\r\n+    public enum Type {\r\n+\r\n+        LEAF,\r\n+        NOT_LEAF,\r\n+        AND,\r\n+        OR\r\n+\r\n+    }\r\n+\r\n+    private Type type;\r\n+\r\n+    private AttributableCond attributableCond;\r\n+\r\n+    private AttributeCond attributeCond;\r\n+\r\n+    private MembershipCond membershipCond;\r\n+\r\n+    private ResourceCond resourceCond;\r\n+\r\n+    private EntitlementCond entitlementCond;\r\n+\r\n+    private NodeCond leftNodeCond;\r\n+\r\n+    private NodeCond rightNodeCond;\r\n+\r\n+    public static NodeCond getLeafCond(final AttributableCond syncopeUserCond) {\r\n+        NodeCond nodeCond = new NodeCond();\r\n+\r\n+        nodeCond.type = Type.LEAF;\r\n+        nodeCond.attributableCond = syncopeUserCond;\r\n+\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getLeafCond(final AttributeCond attributeCond) {\r\n+        NodeCond nodeCond = new NodeCond();\r\n+\r\n+        nodeCond.type = Type.LEAF;\r\n+        nodeCond.attributeCond = attributeCond;\r\n+\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getLeafCond(final MembershipCond membershipCond) {\r\n+        NodeCond nodeCond = new NodeCond();\r\n+\r\n+        nodeCond.type = Type.LEAF;\r\n+        nodeCond.membershipCond = membershipCond;\r\n+\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getLeafCond(final ResourceCond resourceCond) {\r\n+        NodeCond nodeCond = new NodeCond();\r\n+\r\n+        nodeCond.type = Type.LEAF;\r\n+        nodeCond.resourceCond = resourceCond;\r\n+\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getLeafCond(final EntitlementCond entitlementCond) {\r\n+        NodeCond nodeCond = new NodeCond();\r\n+\r\n+        nodeCond.type = Type.LEAF;\r\n+        nodeCond.entitlementCond = entitlementCond;\r\n+\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getNotLeafCond(final AttributableCond syncopeUserCond) {\r\n+        NodeCond nodeCond = getLeafCond(syncopeUserCond);\r\n+        nodeCond.type = Type.NOT_LEAF;\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getNotLeafCond(final AttributeCond attributeCond) {\r\n+        NodeCond nodeCond = getLeafCond(attributeCond);\r\n+        nodeCond.type = Type.NOT_LEAF;\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getNotLeafCond(final MembershipCond membershipCond) {\r\n+        NodeCond nodeCond = getLeafCond(membershipCond);\r\n+        nodeCond.type = Type.NOT_LEAF;\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getNotLeafCond(final ResourceCond resourceCond) {\r\n+        NodeCond nodeCond = getLeafCond(resourceCond);\r\n+        nodeCond.type = Type.NOT_LEAF;\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getNotLeafCond(final EntitlementCond entitlementCond) {\r\n+        NodeCond nodeCond = getLeafCond(entitlementCond);\r\n+        nodeCond.type = Type.NOT_LEAF;\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getAndCond(final NodeCond leftCond, final NodeCond rightCond) {\r\n+        NodeCond nodeCond = new NodeCond();\r\n+\r\n+        nodeCond.type = Type.AND;\r\n+        nodeCond.leftNodeCond = leftCond;\r\n+        nodeCond.rightNodeCond = rightCond;\r\n+\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getOrCond(final NodeCond leftCond, final NodeCond rightCond) {\r\n+        NodeCond nodeCond = new NodeCond();\r\n+\r\n+        nodeCond.type = Type.OR;\r\n+        nodeCond.leftNodeCond = leftCond;\r\n+        nodeCond.rightNodeCond = rightCond;\r\n+\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public AttributableCond getAttributableCond() {\r\n+        return attributableCond;\r\n+    }\r\n+\r\n+    public void setAttributableCond(final AttributableCond attributableCond) {\r\n+        this.attributableCond = attributableCond;\r\n+    }\r\n+\r\n+    public AttributeCond getAttributeCond() {\r\n+        return attributeCond;\r\n+    }\r\n+\r\n+    public void setAttributeCond(final AttributeCond attributeCond) {\r\n+        this.attributeCond = attributeCond;\r\n+    }\r\n+\r\n+    public MembershipCond getMembershipCond() {\r\n+        return membershipCond;\r\n+    }\r\n+\r\n+    public void setMembershipCond(final MembershipCond membershipCond) {\r\n+        this.membershipCond = membershipCond;\r\n+    }\r\n+\r\n+    public ResourceCond getResourceCond() {\r\n+        return resourceCond;\r\n+    }\r\n+\r\n+    public void setResourceCond(final ResourceCond resourceCond) {\r\n+        this.resourceCond = resourceCond;\r\n+    }\r\n+\r\n+    public EntitlementCond getEntitlementCond() {\r\n+        return entitlementCond;\r\n+    }\r\n+\r\n+    public void setEntitlementCond(final EntitlementCond entitlementCond) {\r\n+        this.entitlementCond = entitlementCond;\r\n+    }\r\n+\r\n+    public NodeCond getLeftNodeCond() {\r\n+        return leftNodeCond;\r\n+    }\r\n+\r\n+    public void setLeftNodeCond(final NodeCond leftNodeCond) {\r\n+        this.leftNodeCond = leftNodeCond;\r\n+    }\r\n+\r\n+    public NodeCond getRightNodeCond() {\r\n+        return rightNodeCond;\r\n+    }\r\n+\r\n+    public void setRightNodeCond(final NodeCond rightNodeCond) {\r\n+        this.rightNodeCond = rightNodeCond;\r\n+    }\r\n+\r\n+    public Type getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public void setType(final Type type) {\r\n+        this.type = type;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public boolean isValid() {\r\n+        boolean isValid = false;\r\n+\r\n+        if (type == null) {\r\n+            return isValid;\r\n+        }\r\n+\r\n+        switch (type) {\r\n+            case LEAF:\r\n+            case NOT_LEAF:\r\n+                isValid = (attributableCond != null || attributeCond != null || membershipCond != null\r\n+                        || resourceCond != null || entitlementCond != null)\r\n+                        && (attributableCond == null || attributableCond.isValid())\r\n+                        && (attributeCond == null || attributeCond.isValid())\r\n+                        && (membershipCond == null || membershipCond.isValid())\r\n+                        && (resourceCond == null || resourceCond.isValid())\r\n+                        && (entitlementCond == null || entitlementCond.isValid());\r\n+                break;\r\n+\r\n+            case AND:\r\n+            case OR:\r\n+                isValid = (leftNodeCond == null || rightNodeCond == null)\r\n+                        ? false\r\n+                        : leftNodeCond.isValid() && rightNodeCond.isValid();\r\n+                break;\r\n+\r\n+            default:\r\n+        }\r\n+\r\n+        return isValid;\r\n+    }\r\n+}\r"},{"sha":"ef041182b5acc815746df44f0ffa5e14b028f47e","filename":"common/src/main/java/org/apache/syncope/common/search/ResourceCond.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FResourceCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FResourceCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FResourceCond.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.search;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+/**\r\n+ * Search condition to be applied when searching for associated resources.\r\n+ */\r\n+@XmlRootElement(name = \"resourceCondition\")\r\n+@XmlType\r\n+public class ResourceCond extends AbstractBaseBean implements SearchCond {\r\n+\r\n+    private String resourceName;\r\n+\r\n+    public String getResourceName() {\r\n+        return resourceName;\r\n+    }\r\n+\r\n+    public void setResourceName(String resourceName) {\r\n+        this.resourceName = resourceName;\r\n+    }\r\n+\r\n+    @Override\r\n+    public final boolean isValid() {\r\n+        return resourceName != null;\r\n+    }\r\n+}\r"},{"sha":"238751bd748af564b68a17db7c75b9bc5eeeaa71","filename":"common/src/main/java/org/apache/syncope/common/search/SearchCond.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSearchCond.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,27 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.search;\r\n+\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+public interface SearchCond {\r\n+\r\n+    @JsonIgnore\r\n+    boolean isValid();\r\n+}\r"},{"sha":"68a444d6d08ba28a7ba15c93b637ced1b738aa3b","filename":"common/src/main/java/org/apache/syncope/common/services/ConfigurationService.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,95 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.services;\r\n+\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.core.Response;\r\n+import org.apache.syncope.common.to.ConfigurationTO;\r\n+import org.apache.syncope.common.to.MailTemplateTO;\r\n+import org.apache.syncope.common.to.ValidatorTO;\r\n+\r\n+@Path(\"configurations\")\r\n+public interface ConfigurationService {\r\n+\r\n+    /**\r\n+     * Creates a new configuration element.\r\n+     *\r\n+     * @param configurationTO Configuration to be stored.\r\n+     * @return Response containing URI location for created resource.\r\n+     */\r\n+    @POST\r\n+    Response create(ConfigurationTO configurationTO);\r\n+\r\n+    /**\r\n+     * @return Returns configuration as an downloadable content.xml database export file.\r\n+     */\r\n+    @GET\r\n+    @Path(\"stream\")\r\n+    Response dbExport();\r\n+\r\n+    /**\r\n+     * @param key Deletes configuration with matching key.\r\n+     */\r\n+    @DELETE\r\n+    @Path(\"{key}\")\r\n+    void delete(@PathParam(\"key\") String key);\r\n+\r\n+    /**\r\n+     * @return Returns a list of known mail-template names.\r\n+     */\r\n+    @GET\r\n+    @Path(\"mailTemplates\")\r\n+    Set<MailTemplateTO> getMailTemplates();\r\n+\r\n+    /**\r\n+     * @return Returns a list of known validator names.\r\n+     */\r\n+    @GET\r\n+    @Path(\"validators\")\r\n+    Set<ValidatorTO> getValidators();\r\n+\r\n+    /**\r\n+     * @return Returns a list of all configuration elements.\r\n+     */\r\n+    @GET\r\n+    List<ConfigurationTO> list();\r\n+\r\n+    /**\r\n+     * @param key Identifier of configuration to be read.\r\n+     * @return Returns configuration element with matching key.\r\n+     */\r\n+    @GET\r\n+    @Path(\"{key}\")\r\n+    ConfigurationTO read(@PathParam(\"key\") String key);\r\n+\r\n+    /**\r\n+     * @param key Overwrites configuration element with matching key.\r\n+     * @param configurationTO New configuration\r\n+     */\r\n+    @PUT\r\n+    @Path(\"{key}\")\r\n+    void update(@PathParam(\"key\") String key, ConfigurationTO configurationTO);\r\n+}\r"},{"sha":"b868a0521b2e788b02938c458682f861bc0d283d","filename":"common/src/main/java/org/apache/syncope/common/services/ConnectorService.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,133 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.services;\r\n+\r\n+import java.util.List;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.DefaultValue;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.MatrixParam;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.QueryParam;\r\n+import javax.ws.rs.core.Response;\r\n+import org.apache.syncope.common.to.BulkAction;\r\n+import org.apache.syncope.common.to.BulkActionRes;\r\n+import org.apache.syncope.common.to.ConnBundleTO;\r\n+import org.apache.syncope.common.to.ConnInstanceTO;\r\n+import org.apache.syncope.common.to.SchemaTO;\r\n+import org.apache.syncope.common.types.ConnConfProperty;\r\n+\r\n+@Path(\"connectors\")\r\n+public interface ConnectorService {\r\n+\r\n+    /**\r\n+     * Create a new connector instance.\r\n+     *\r\n+     * @param connInstanceTO connector instance to be created\r\n+     * @return response containing URI location for created resource\r\n+     */\r\n+    @POST\r\n+    Response create(ConnInstanceTO connInstanceTO);\r\n+\r\n+    /**\r\n+     * @param connInstanceId connector instance id to be deleted\r\n+     */\r\n+    @DELETE\r\n+    @Path(\"{connInstanceId}\")\r\n+    void delete(@PathParam(\"connInstanceId\") Long connInstanceId);\r\n+\r\n+    /**\r\n+     * @param lang language to select property keys; default language is English\r\n+     * @return available connector bundles with property keys in selected language\r\n+     */\r\n+    @GET\r\n+    @Path(\"bundles\")\r\n+    List<ConnBundleTO> getBundles(@QueryParam(\"lang\") String lang);\r\n+\r\n+    /**\r\n+     * @param connInstanceId connector instance id to read configuration from\r\n+     * @return configuration for selected connector instance\r\n+     */\r\n+    @GET\r\n+    @Path(\"{connInstanceId}/configuration\")\r\n+    List<ConnConfProperty> getConfigurationProperties(@PathParam(\"connInstanceId\") Long connInstanceId);\r\n+\r\n+    /**\r\n+     * @param connInstanceId connector instance id to be used for schema lookup\r\n+     * @param connInstanceTO connector instance object to provide special configuration properties\r\n+     * @param showAll if set to true, special schema names (like '__PASSWORD__') will be included; default is false\r\n+     * @return schema names for connector bundle matching the given connector instance id\r\n+     */\r\n+    @POST\r\n+    @Path(\"{connInstanceId}/schemas\")\r\n+    List<SchemaTO> getSchemaNames(@PathParam(\"connInstanceId\") Long connInstanceId, ConnInstanceTO connInstanceTO,\r\n+            @QueryParam(\"showAll\") @DefaultValue(\"false\") boolean showAll);\r\n+\r\n+    /**\r\n+     * @param lang language to select property keys; default language is English\r\n+     * @return list of all connector instances with property keys in the matching language\r\n+     */\r\n+    @GET\r\n+    List<ConnInstanceTO> list(@QueryParam(\"lang\") String lang);\r\n+\r\n+    /**\r\n+     * @param connInstanceId connector instance id to be read\r\n+     * @return connector instance with matching id\r\n+     */\r\n+    @GET\r\n+    @Path(\"{connInstanceId}\")\r\n+    ConnInstanceTO read(@PathParam(\"connInstanceId\") Long connInstanceId);\r\n+\r\n+    /**\r\n+     * @param resourceName resource name to be used for connector lookup\r\n+     * @return connector instance for matching resource\r\n+     */\r\n+    @GET\r\n+    ConnInstanceTO readByResource(@MatrixParam(\"resourceName\") String resourceName);\r\n+\r\n+    /**\r\n+     * @param connInstanceId connector instance id to be updated\r\n+     * @param connInstaceTO connector instance to be stored\r\n+     */\r\n+    @PUT\r\n+    @Path(\"{connInstanceId}\")\r\n+    void update(@PathParam(\"connInstanceId\") Long connInstanceId, ConnInstanceTO connInstaceTO);\r\n+\r\n+    /**\r\n+     * @param connInstaceTO connector instance to be used for connection check\r\n+     * @return true if connection could be established\r\n+     */\r\n+    @POST\r\n+    @Path(\"check\")\r\n+    boolean check(ConnInstanceTO connInstaceTO);\r\n+\r\n+    /**\r\n+     * Reload all connector bundles and instances.\r\n+     */\r\n+    @POST\r\n+    @Path(\"reload\")\r\n+    void reload();\r\n+\r\n+    @POST\r\n+    @Path(\"bulk\")\r\n+    BulkActionRes bulkAction(BulkAction bulkAction);\r\n+}\n\\ No newline at end of file"},{"sha":"37421211eb9aed7f82aa22d8962b73606e007f96","filename":"common/src/main/java/org/apache/syncope/common/services/EntitlementService.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FEntitlementService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FEntitlementService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FEntitlementService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.services;\r\n+\r\n+import java.util.Set;\r\n+\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.Path;\r\n+\r\n+import org.apache.syncope.common.to.EntitlementTO;\r\n+\r\n+@Path(\"entitlements\")\r\n+public interface EntitlementService {\r\n+\r\n+    /**\r\n+     * @return Returns a collection of all known entitlements.\r\n+     */\r\n+    @GET\r\n+    Set<EntitlementTO> getAllEntitlements();\r\n+\r\n+    /**\r\n+     * @return Returns a collection of entitlements assigned to user making this request (Service Call).\r\n+     */\r\n+    @GET\r\n+    @Path(\"own\")\r\n+    Set<EntitlementTO> getMyEntitlements();\r\n+}\r"},{"sha":"bdced020e4c12889af3dd19d92b239397bd405aa","filename":"common/src/main/java/org/apache/syncope/common/services/InvalidSearchConditionException.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FInvalidSearchConditionException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FInvalidSearchConditionException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FInvalidSearchConditionException.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+public class InvalidSearchConditionException extends Exception {\n+\n+    private static final long serialVersionUID = 1785286543933086849L;\n+\n+    public InvalidSearchConditionException() {\n+        super();\n+    }\n+\n+    public InvalidSearchConditionException(String string) {\n+        super(string);\n+    }\n+}"},{"sha":"36c7ddc8ce8137234998b6580e98be5276fe56a2","filename":"common/src/main/java/org/apache/syncope/common/services/LoggerService.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.services;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+\r\n+import org.apache.syncope.common.to.LoggerTO;\r\n+import org.apache.syncope.common.types.LoggerType;\r\n+\r\n+@Path(\"logger/{type}\")\r\n+public interface LoggerService {\r\n+\r\n+    /**\r\n+     * @param type LoggerType to be selected.\r\n+     * @param name Logger name to be deleted.\r\n+     */\r\n+    @DELETE\r\n+    @Path(\"{name}\")\r\n+    void delete(@PathParam(\"type\") LoggerType type, @PathParam(\"name\") String name);\r\n+\r\n+    /**\r\n+     * @param type LoggerType to be selected.\r\n+     * @return List of logger with matching type.\r\n+     */\r\n+    @GET\r\n+    List<LoggerTO> list(@PathParam(\"type\") LoggerType type);\r\n+\r\n+    /**\r\n+     * @param type LoggerType to be selected.\r\n+     * @param name Logger name to be read.\r\n+     * @return Returns logger with matching type and name.\r\n+     */\r\n+    @GET\r\n+    @Path(\"{name}\")\r\n+    LoggerTO read(@PathParam(\"type\") LoggerType type, @PathParam(\"name\") final String name);\r\n+\r\n+    /**\r\n+     * @param type LoggerType to be selected.\r\n+     * @param name Logger name to be updated.\r\n+     * @param logger Logger to be created or updated.\r\n+     */\r\n+    @PUT\r\n+    @Path(\"{name}/level\")\r\n+    void update(@PathParam(\"type\") LoggerType type, @PathParam(\"name\") String name, LoggerTO logger);\r\n+\r\n+}\r"},{"sha":"7644520da7635cb72df5587df667a504146df623","filename":"common/src/main/java/org/apache/syncope/common/services/NotificationService.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FNotificationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FNotificationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FNotificationService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,72 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.services;\r\n+\r\n+import java.util.List;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.NotFoundException;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import org.apache.syncope.common.to.NotificationTO;\r\n+\r\n+@Path(\"notifications\")\r\n+public interface NotificationService {\r\n+\r\n+    /**\r\n+     * @param notificationTO Creates a new notification.\r\n+     * @return Response containing URI location for created resource.\r\n+     */\r\n+    @POST\r\n+    Response create(NotificationTO notificationTO);\r\n+\r\n+    /**\r\n+     * @param notificationId ID for notification to be deleted.\r\n+     */\r\n+    @DELETE\r\n+    @Path(\"{notificationId}\")\r\n+    void delete(@PathParam(\"notificationId\") Long notificationId);\r\n+\r\n+    /**\r\n+     * @return Returns list of all notifications.\r\n+     */\r\n+    @GET\r\n+    List<NotificationTO> list();\r\n+\r\n+    /**\r\n+     * @param notificationId ID of notification to be read.\r\n+     * @return Notification with matching id.\r\n+     */\r\n+    @GET\r\n+    @Path(\"{notificationId}\")\r\n+    NotificationTO read(@PathParam(\"notificationId\") Long notificationId);\r\n+\r\n+    /**\r\n+     * @param notificationId ID of notification to be updated.\r\n+     * @param notificationTO Notification to be stored.\r\n+     */\r\n+    @PUT\r\n+    @Path(\"{notificationId}\")\r\n+    void update(@PathParam(\"notificationId\") Long notificationId, NotificationTO notificationTO);\r\n+\r\n+}\r"},{"sha":"81ff85e4c192378609d070282be4d3165a940ed5","filename":"common/src/main/java/org/apache/syncope/common/services/PolicyService.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,106 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.services;\r\n+\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.core.Response;\r\n+import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n+import org.apache.syncope.common.to.PolicyTO;\r\n+import org.apache.syncope.common.types.PolicyType;\r\n+\r\n+@Path(\"policies/{type}\")\r\n+public interface PolicyService {\r\n+\r\n+    /**\r\n+     * @param type Creates a new policy with given type\r\n+     * @param policyTO Policy to be created (needs to match type)\r\n+     * @param <T> response type (extending PolicyTO)\r\n+     * @see PolicyTO\r\n+     * @return Response containing URI location for created resource\r\n+     */\r\n+    @POST\r\n+    <T extends PolicyTO> Response create(@PathParam(\"type\") PolicyType type, T policyTO);\r\n+\r\n+    /**\r\n+     * @param type Deletes policy with given type\r\n+     * @param policyId Deletes policy with given id\r\n+     * @param <T> response type (extending PolicyTO)\r\n+     * @see PolicyTO\r\n+     */\r\n+    @DELETE\r\n+    @Path(\"{policyId}\")\r\n+    <T extends PolicyTO> void delete(@PathParam(\"type\") PolicyType type, @PathParam(\"policyId\") Long policyId);\r\n+\r\n+    /**\r\n+     * @param type Type selector for requested policies\r\n+     * @param <T> response type (extending PolicyTO)\r\n+     * @see PolicyTO\r\n+     * @return List of policies with matching type.\r\n+     */\r\n+    @GET\r\n+    <T extends PolicyTO> List<T> list(@PathParam(\"type\") PolicyType type);\r\n+\r\n+    /**\r\n+     * @param type Request for policy with given type\r\n+     * @param policyId ID of requested policy\r\n+     * @param <T> response type (extending PolicyTO)\r\n+     * @see PolicyTO\r\n+     * @return Returns policy with matching id and type\r\n+     */\r\n+    @GET\r\n+    @Path(\"{policyId}\")\r\n+    <T extends PolicyTO> T read(@PathParam(\"type\") PolicyType type, @PathParam(\"policyId\") Long policyId);\r\n+\r\n+    /**\r\n+     * @param type PolicyType to read global policy from\r\n+     * @param <T> response type (extending PolicyTO)\r\n+     * @see PolicyTO\r\n+     * @return Global Policy for matching type\r\n+     */\r\n+    @GET\r\n+    @Path(\"0\")\r\n+    <T extends PolicyTO> T readGlobal(@PathParam(\"type\") PolicyType type);\r\n+\r\n+    /**\r\n+     * @param type PolicyType to be updated.\r\n+     * @param policyId ID of policy to be updated\r\n+     * @param policyTO Policy to replace existing policy\r\n+     * @param <T> response type (extending PolicyTO)\r\n+     * @see PolicyTO\r\n+     */\r\n+    @PUT\r\n+    @Path(\"{policyId}\")\r\n+    <T extends PolicyTO> void update(@PathParam(\"type\") PolicyType type, @PathParam(\"policyId\") Long policyId,\r\n+            T policyTO);\r\n+\r\n+    /**\r\n+     * @param type PolicyType (just SYNC is supported).\r\n+     * @return Returns correlation rules java classes.\r\n+     */\r\n+    @GET\r\n+    @Path(\"syncCorrelationRuleClasses\")\r\n+    Set<CorrelationRuleClassTO> getSyncCorrelationRuleClasses(@PathParam(\"type\") PolicyType type);\r\n+}\r"},{"sha":"441441a5c2966a458a2232d04b6140aceeee7395","filename":"common/src/main/java/org/apache/syncope/common/services/ReportService.java","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,129 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.services;\r\n+\r\n+import java.util.List;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.DefaultValue;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.QueryParam;\r\n+import javax.ws.rs.core.Response;\r\n+import org.apache.syncope.common.to.ReportExecTO;\r\n+import org.apache.syncope.common.to.ReportTO;\r\n+import org.apache.syncope.common.types.ReportExecExportFormat;\r\n+\r\n+@Path(\"reports\")\r\n+public interface ReportService {\r\n+\r\n+    /**\r\n+     * @return Returns number of existing reports\r\n+     */\r\n+    @GET\r\n+    @Path(\"count\")\r\n+    int count();\r\n+\r\n+    /**\r\n+     * @param reportTO Report to be created\r\n+     * @return Response containing URI location for created resource\r\n+     */\r\n+    @POST\r\n+    Response create(ReportTO reportTO);\r\n+\r\n+    /**\r\n+     * @param reportId Deletes report with matching id\r\n+     */\r\n+    @DELETE\r\n+    @Path(\"{reportId}\")\r\n+    void delete(@PathParam(\"reportId\") Long reportId);\r\n+\r\n+    /**\r\n+     * @param executionId ID of execution report to be deleted\r\n+     */\r\n+    @DELETE\r\n+    @Path(\"executions/{executionId}\")\r\n+    void deleteExecution(@PathParam(\"executionId\") Long executionId);\r\n+\r\n+    /**\r\n+     * @param reportId ID of report to be executed.\r\n+     * @return Execution result\r\n+     */\r\n+    @POST\r\n+    @Path(\"{reportId}/execute\")\r\n+    ReportExecTO execute(@PathParam(\"reportId\") Long reportId);\r\n+\r\n+    /**\r\n+     * @param executionId ID of execution report to be selected\r\n+     * @param fmt file-format selection\r\n+     * @return Returns a stream for content download\r\n+     */\r\n+    @GET\r\n+    @Path(\"executions/{executionId}/stream\")\r\n+    Response exportExecutionResult(@PathParam(\"executionId\") Long executionId,\r\n+            @QueryParam(\"format\") ReportExecExportFormat fmt);\r\n+\r\n+    /**\r\n+     * @return Returns a list of all reportletConfClasses\r\n+     */\r\n+    @GET\r\n+    @Path(\"reportletConfClasses\")\r\n+    ReportletConfClasses getReportletConfClasses();\r\n+\r\n+    /**\r\n+     * @return Returns a list of all reports\r\n+     */\r\n+    @GET\r\n+    List<ReportTO> list();\r\n+\r\n+    /**\r\n+     * @param page selected page in relation to size\r\n+     * @param size Number of items per page\r\n+     * @return Returns a list of reports according to pagination\r\n+     */\r\n+    @GET\r\n+    List<ReportTO> list(@QueryParam(\"page\") int page,\r\n+            @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n+\r\n+    /**\r\n+     * @param reportId ID of report to be read\r\n+     * @return Report with matching ID\r\n+     */\r\n+    @GET\r\n+    @Path(\"{reportId}\")\r\n+    ReportTO read(@PathParam(\"reportId\") Long reportId);\r\n+\r\n+    /**\r\n+     * @param executionId ID ExecutionReport to be selected\r\n+     * @return Returns ExecutionReport with matching id\r\n+     */\r\n+    @GET\r\n+    @Path(\"executions/{executionId}\")\r\n+    ReportExecTO readExecution(@PathParam(\"executionId\") Long executionId);\r\n+\r\n+    /**\r\n+     * @param reportId ID for report to be updated\r\n+     * @param reportTO Updates report with matching reportId\r\n+     */\r\n+    @PUT\r\n+    @Path(\"{reportId}\")\r\n+    void update(@PathParam(\"reportId\") Long reportId, ReportTO reportTO);\r\n+}\r"},{"sha":"da94d735556271f3ff3aa9a433b56fb89098d180","filename":"common/src/main/java/org/apache/syncope/common/services/ReportletConfClasses.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportletConfClasses.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportletConfClasses.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportletConfClasses.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlRootElement\n+public class ReportletConfClasses {\n+\n+    List<String> confClasses;\n+\n+    public ReportletConfClasses() {\n+        this.confClasses = new ArrayList<String>();\n+    }\n+\n+    public ReportletConfClasses(Collection<String> confClasses) {\n+        this();\n+        this.confClasses.addAll(confClasses);  \n+    }\n+\n+\n+    public List<String> getConfClasses() {\n+        return confClasses;\n+    }\n+\n+    public void setConfClasses(List<String> confClasses) {\n+        this.confClasses = confClasses;\n+    }\n+}"},{"sha":"6b2581eea77a45488047ce989048752c57b54553","filename":"common/src/main/java/org/apache/syncope/common/services/ResourceService.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,113 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.services;\r\n+\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.MatrixParam;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.core.Response;\r\n+import org.apache.syncope.common.to.BulkAction;\r\n+import org.apache.syncope.common.to.BulkActionRes;\r\n+import org.apache.syncope.common.to.ConnObjectTO;\r\n+import org.apache.syncope.common.to.PropagationActionClassTO;\r\n+import org.apache.syncope.common.to.ResourceTO;\r\n+import org.apache.syncope.common.types.AttributableType;\r\n+\r\n+@Path(\"resources\")\r\n+public interface ResourceService {\r\n+\r\n+    /**\r\n+     * @param resourceTO Resource to be checked\r\n+     * @return Returns true, if connection to resource could be established\r\n+     */\r\n+    @POST\r\n+    @Path(\"check\")\r\n+    boolean check(ResourceTO resourceTO);\r\n+\r\n+    /**\r\n+     * @param resourceTO Resource to be created\r\n+     * @return Response containing URI location for created resource\r\n+     */\r\n+    @POST\r\n+    Response create(ResourceTO resourceTO);\r\n+\r\n+    /**\r\n+     * @param resourceName Name of resource to be deleted\r\n+     */\r\n+    @DELETE\r\n+    @Path(\"{resourceName}\")\r\n+    void delete(@PathParam(\"resourceName\") String resourceName);\r\n+\r\n+    /**\r\n+     * @param resourceName Name of resource to read connector object from\r\n+     * @param type user / role\r\n+     * @param id user id / role id\r\n+     * @return connector object from the external resource, for the given type and id\r\n+     */\r\n+    @GET\r\n+    @Path(\"{resourceName}/{type}/{id}\")\r\n+    ConnObjectTO getConnectorObject(@PathParam(\"resourceName\") String resourceName,\r\n+            @PathParam(\"type\") AttributableType type, @PathParam(\"id\") Long id);\r\n+\r\n+    /**\r\n+     * @return Returns PropagationActionsClasses\r\n+     */\r\n+    @GET\r\n+    @Path(\"propagationActionsClasses\")\r\n+    Set<PropagationActionClassTO> getPropagationActionsClasses();\r\n+\r\n+    /**\r\n+     * @return Returns list of all Resources\r\n+     */\r\n+    @GET\r\n+    List<ResourceTO> list();\r\n+\r\n+    /**\r\n+     * @param connInstanceId Connector id to filter for resources\r\n+     * @return Returns all resources using matching connector\r\n+     */\r\n+    @GET\r\n+    List<ResourceTO> list(@MatrixParam(\"connectorId\") Long connInstanceId);\r\n+\r\n+    /**\r\n+     * @param resourceName Name of resource to be read\r\n+     * @return Resource with matching name\r\n+     */\r\n+    @GET\r\n+    @Path(\"{resourceName}\")\r\n+    ResourceTO read(@PathParam(\"resourceName\") String resourceName);\r\n+\r\n+    /**\r\n+     * @param resourceName Name of resource to be updated\r\n+     * @param resourceTO Resource to be stored\r\n+     */\r\n+    @PUT\r\n+    @Path(\"{resourceName}\")\r\n+    void update(@PathParam(\"resourceName\") String resourceName, ResourceTO resourceTO);\r\n+\r\n+    @POST\r\n+    @Path(\"bulk\")\r\n+    BulkActionRes bulkAction(BulkAction bulkAction);\r\n+}\r"},{"sha":"e67cacc5f2ec33dbf36b57151901329477051a6c","filename":"common/src/main/java/org/apache/syncope/common/services/RoleService.java","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,149 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.services;\r\n+\r\n+import java.util.List;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.DefaultValue;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.QueryParam;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import org.apache.syncope.common.search.NodeCond;\r\n+import org.apache.syncope.common.mod.RoleMod;\r\n+import org.apache.syncope.common.to.RoleTO;\r\n+\r\n+@Path(\"roles\")\r\n+public interface RoleService {\r\n+\r\n+    /**\r\n+     * @param roleId ID of role to get children from\r\n+     * @return Returns list of children for selected role\r\n+     */\r\n+    @GET\r\n+    @Path(\"{roleId}/children\")\r\n+    List<RoleTO> children(@PathParam(\"roleId\") Long roleId);\r\n+\r\n+    /**\r\n+     * @return Returns number of known roles. (size of list)\r\n+     */\r\n+    @GET\r\n+    @Path(\"count\")\r\n+    int count();\r\n+\r\n+    /**\r\n+     * @param roleTO Role to be created\r\n+     * @return Response containing URI location for created role, as well as the role itself enriched with propagation\r\n+     * status information\r\n+     */\r\n+    @POST\r\n+    Response create(RoleTO roleTO);\r\n+\r\n+    /**\r\n+     * @param roleId ID of role to be deleted\r\n+     * @return Returns deleted role, enriched with propagation status information\r\n+     */\r\n+    @DELETE\r\n+    @Path(\"{roleId}\")\r\n+    RoleTO delete(@PathParam(\"roleId\") Long roleId);\r\n+\r\n+    /**\r\n+     * @return Returns list of all knwon roles\r\n+     */\r\n+    @GET\r\n+    List<RoleTO> list();\r\n+\r\n+    /**\r\n+     * @param page Page of roles in relation to size parameter\r\n+     * @param size Number of roles to be displayed per page\r\n+     * @return Returns paginated list of roles\r\n+     */\r\n+    @GET\r\n+    List<RoleTO> list(@QueryParam(\"page\") int page, @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n+\r\n+    /**\r\n+     * @param roleId Id of role to get parent role from\r\n+     * @return Returns parent role or null if no parent exists\r\n+     */\r\n+    @GET\r\n+    @Path(\"{roleId}/parent\")\r\n+    RoleTO parent(@PathParam(\"roleId\") Long roleId);\r\n+\r\n+    /**\r\n+     * @param roleId ID of role to be read\r\n+     * @return Returns role with matching id\r\n+     */\r\n+    @GET\r\n+    @Path(\"{roleId}\")\r\n+    RoleTO read(@PathParam(\"roleId\") Long roleId);\r\n+\r\n+    /**\r\n+     * @param searchCondition Filter condition for role list\r\n+     * @return Returns list of roles with matching filter conditions\r\n+     * @throws InvalidSearchConditionException \r\n+     */\r\n+    @POST\r\n+    @Path(\"search\")\r\n+    List<RoleTO> search(NodeCond searchCondition) throws InvalidSearchConditionException;\r\n+\r\n+    /**\r\n+     * @param searchCondition Filter condition for role list\r\n+     * @param page Page of roles in relation to size parameter\r\n+     * @param size Number of roles to be displayed per page\r\n+     * @return Returns paginated list of roles with matching filter conditions\r\n+     * @throws InvalidSearchConditionException \r\n+     */\r\n+    @POST\r\n+    @Path(\"search\")\r\n+    List<RoleTO> search(NodeCond searchCondition, @QueryParam(\"page\") int page,\r\n+            @QueryParam(\"size\") @DefaultValue(\"25\") int size) throws InvalidSearchConditionException;\r\n+\r\n+    /**\r\n+     * @param searchCondition Filter condition for role list\r\n+     * @return Returns number of roles matching provided filter conditions\r\n+     * @throws InvalidSearchConditionException \r\n+     */\r\n+    @POST\r\n+    @Path(\"search/count\")\r\n+    int searchCount(NodeCond searchCondition) throws InvalidSearchConditionException;\r\n+\r\n+    /**\r\n+     * This method is similar to {@link #read(Long)}, but uses different authentication handling to ensure that a user\r\n+     * can read his own roles.\r\n+     *\r\n+     * @param roleId ID of role to be read\r\n+     * @return Returns role with matching id\r\n+     */\r\n+    @GET\r\n+    @Path(\"{roleId}/own\")\r\n+    RoleTO selfRead(@PathParam(\"roleId\") Long roleId);\r\n+\r\n+    /**\r\n+     * @param roleId ID of role to be updated\r\n+     * @param roleMod Role object containing list of changes to be applied for selected role\r\n+     * @return Returns updated role, merged from existing role and provided roleMod\r\n+     */\r\n+    @POST\r\n+    @Path(\"{roleId}\")\r\n+    RoleTO update(@PathParam(\"roleId\") Long roleId, RoleMod roleMod);\r\n+\r\n+}\n\\ No newline at end of file"},{"sha":"58b8de6bdd57fc0bacbc8d7d67c624422e1ea547","filename":"common/src/main/java/org/apache/syncope/common/services/SchemaService.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.services;\r\n+\r\n+import java.util.List;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.core.Response;\r\n+import org.apache.syncope.common.to.AbstractSchemaTO;\r\n+import org.apache.syncope.common.types.AttributableType;\r\n+import org.apache.syncope.common.types.SchemaType;\r\n+\r\n+@Path(\"schemas/{kind}/{type}\")\r\n+public interface SchemaService {\r\n+\r\n+    /**\r\n+     * @param kind Kind for schema to be created\r\n+     * @param type Type for schema to be created\r\n+     * @param schemaTO Schema to be created\r\n+     * @return Response containing URI location for created resource.\r\n+     */\r\n+    @POST\r\n+    <T extends AbstractSchemaTO> Response create(@PathParam(\"kind\") AttributableType kind,\r\n+            @PathParam(\"type\") SchemaType type, T schemaTO);\r\n+\r\n+    /**\r\n+     * @param kind Kind for schema to be deleted\r\n+     * @param type Type for schema to be deleted\r\n+     * @param schemaName Name of schema to be deleted\r\n+     */\r\n+    @DELETE\r\n+    @Path(\"{name}\")\r\n+    void delete(@PathParam(\"kind\") AttributableType kind, @PathParam(\"type\") SchemaType type,\r\n+            @PathParam(\"name\") String schemaName);\r\n+\r\n+    /**\r\n+     * @param kind Kind for schemas to be listed\r\n+     * @param type Type for schemas to be listed\r\n+     * @return List of schemas with matching kind and type\r\n+     */\r\n+    @GET\r\n+    List<? extends AbstractSchemaTO> list(@PathParam(\"kind\") AttributableType kind, @PathParam(\"type\") SchemaType type);\r\n+\r\n+    /**\r\n+     * @param kind Kind for schemas to be read\r\n+     * @param type Type for schemas to be read\r\n+     * @param schemaName Name of schema to be read\r\n+     * @return Returns schema with matching name, kind and type\r\n+     */\r\n+    @GET\r\n+    @Path(\"{name}\")\r\n+    <T extends AbstractSchemaTO> T read(@PathParam(\"kind\") AttributableType kind, @PathParam(\"type\") SchemaType type,\r\n+            @PathParam(\"name\") String schemaName);\r\n+\r\n+    /**\r\n+     * @param kind Kind for schemas to be updated\r\n+     * @param type Type for schemas to be updated\r\n+     * @param schemaName Name of schema to be updated\r\n+     * @param schemaTO New schema to be stored\r\n+     */\r\n+    @PUT\r\n+    @Path(\"{name}\")\r\n+    <T extends AbstractSchemaTO> void update(@PathParam(\"kind\") AttributableType kind,\r\n+            @PathParam(\"type\") SchemaType type, @PathParam(\"name\") String schemaName, T schemaTO);\r\n+\r\n+}\r"},{"sha":"292cc459ae6009ca1d92cef93688a31154742a36","filename":"common/src/main/java/org/apache/syncope/common/services/TaskService.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,155 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.services;\r\n+\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.DefaultValue;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.QueryParam;\r\n+import javax.ws.rs.core.Response;\r\n+import org.apache.syncope.common.to.BulkAction;\r\n+import org.apache.syncope.common.to.BulkActionRes;\r\n+\r\n+import org.apache.syncope.common.to.JobClassTO;\r\n+import org.apache.syncope.common.to.ReportExecTO;\r\n+import org.apache.syncope.common.to.SyncActionClassTO;\r\n+import org.apache.syncope.common.to.TaskExecTO;\r\n+import org.apache.syncope.common.to.TaskTO;\r\n+import org.apache.syncope.common.types.TaskType;\r\n+\r\n+@Path(\"tasks\")\r\n+public interface TaskService {\r\n+\r\n+    /**\r\n+     * @param taskType filter for task count\r\n+     * @return Returns number of tasks with matching type\r\n+     */\r\n+    @GET\r\n+    @Path(\"{type}/count\")\r\n+    int count(@PathParam(\"type\") TaskType taskType);\r\n+\r\n+    /**\r\n+     * @param taskTO Task to be created\r\n+     * @return Response containing URI location for created resource\r\n+     */\r\n+    @POST\r\n+    Response create(TaskTO taskTO);\r\n+\r\n+    /**\r\n+     * @param taskId Id of task to be deleted\r\n+     */\r\n+    @DELETE\r\n+    @Path(\"{taskId}\")\r\n+    void delete(@PathParam(\"taskId\") Long taskId);\r\n+\r\n+    /**\r\n+     * @param executionId ID of task execution to be deleted\r\n+     */\r\n+    @DELETE\r\n+    @Path(\"executions/{executionId}\")\r\n+    void deleteExecution(@PathParam(\"executionId\") Long executionId);\r\n+\r\n+    /**\r\n+     * @param taskId Id of task to be executed\r\n+     * @param dryRun if true, task will only be simulated\r\n+     * @return Returns TaskExcecution\r\n+     */\r\n+    @POST\r\n+    @Path(\"{taskId}/execute\")\r\n+    TaskExecTO execute(@PathParam(\"taskId\") Long taskId, @QueryParam(\"dryRun\") @DefaultValue(\"false\") boolean dryRun);\r\n+\r\n+    /**\r\n+     * @return Returns list of JobClasses\r\n+     */\r\n+    @GET\r\n+    @Path(\"jobClasses\")\r\n+    Set<JobClassTO> getJobClasses();\r\n+\r\n+    /**\r\n+     * @return Returns list of SyncActionClasses\r\n+     */\r\n+    @GET\r\n+    @Path(\"syncActionsClasses\")\r\n+    Set<SyncActionClassTO> getSyncActionsClasses();\r\n+\r\n+    /**\r\n+     * @param taskType Type of tasks to be listed\r\n+     * @return Returns list of tasks with matching type\r\n+     */\r\n+    @GET\r\n+    @Path(\"{type}/list\")\r\n+    // TODO '/list' path will be removed once CXF/JAX-B bug is solved\r\n+    List<? extends TaskTO> list(@PathParam(\"type\") TaskType taskType);\r\n+\r\n+    /**\r\n+     * @param taskType Type of tasks to be listed\r\n+     * @param page Page number of tasks in relation to page size\r\n+     * @param size Number of tasks listed per page\r\n+     * @return Returns paginated list of task with matching type\r\n+     */\r\n+    @GET\r\n+    @Path(\"{type}\")\r\n+    List<? extends TaskTO> list(@PathParam(\"type\") TaskType taskType, @QueryParam(\"page\") int page,\r\n+            @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n+\r\n+    /**\r\n+     * @param taskType Type of task to be read\r\n+     * @param taskId Id of task to be read\r\n+     * @return Returns task with matching id\r\n+     */\r\n+    @GET\r\n+    @Path(\"{type}/{taskId}\")\r\n+    // TODO TaskType can be removed once CXF migration is done\r\n+    <T extends TaskTO> T read(@PathParam(\"type\") TaskType taskType, @PathParam(\"taskId\") Long taskId);\r\n+\r\n+    /**\r\n+     * @param executionId Id if task execution to be read\r\n+     * @return Returns task execution with matching Id\r\n+     */\r\n+    @GET\r\n+    @Path(\"executions/{executionId}\")\r\n+    TaskExecTO readExecution(@PathParam(\"executionId\") Long executionId);\r\n+\r\n+    /**\r\n+     * @param executionId Task execution ID related to report\r\n+     * @param report Report for task execution\r\n+     */\r\n+    @POST\r\n+    @Path(\"executions/{executionId}/report\")\r\n+    void report(@PathParam(\"executionId\") Long executionId, ReportExecTO report);\r\n+\r\n+    /**\r\n+     * @param taskId Id if task to be updated\r\n+     * @param taskTO New task to be stored\r\n+     */\r\n+    @PUT\r\n+    @Path(\"{taskId}\")\r\n+    void update(@PathParam(\"taskId\") Long taskId, TaskTO taskTO);\r\n+    \r\n+    @POST\r\n+    @Path(\"bulk\")\r\n+    BulkActionRes bulkAction(BulkAction bulkAction);\r\n+}\r"},{"sha":"daba9848beca595f7dc9fe422f988ad0d34f5c13","filename":"common/src/main/java/org/apache/syncope/common/services/UserRequestService.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,84 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.services;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.OPTIONS;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import org.apache.syncope.common.to.UserRequestTO;\r\n+\r\n+@Path(\"requests/user\")\r\n+public interface UserRequestService {\r\n+\r\n+    public static final String SYNCOPE_CREATE_ALLOWED = \"Syncope-Create-Allowed\";\r\n+\r\n+    /**\r\n+     * This method is similar to {@link #isCreateAllowed()}, but follows RESTful best practices.\r\n+     *\r\n+     * @return Response contains special syncope HTTP header (SYNCOPE_CREATE_ALLOWED), indicating if user is allowed to\r\n+     * make a create UserRequest\r\n+     */\r\n+    @OPTIONS\r\n+    Response getOptions();\r\n+\r\n+    /**\r\n+     * This method is similar to {@link #getOptions()}, but without following RESTful best practices.\r\n+     *\r\n+     * @return Returns true, if user is allowed to make user create requests\r\n+     */\r\n+    @GET\r\n+    @Path(\"create/allowed\")\r\n+    boolean isCreateAllowed();\r\n+\r\n+    /**\r\n+     * @param userRequestTO Request for user to be created\r\n+     * @return Response containing URI location for created resource\r\n+     */\r\n+    @POST\r\n+    Response create(UserRequestTO userRequestTO);\r\n+\r\n+    /**\r\n+     * @return Returns list of all UserRequests.\r\n+     */\r\n+    @GET\r\n+    List<UserRequestTO> list();\r\n+\r\n+    /**\r\n+     * @param requestId ID of UserRequest to be read\r\n+     * @return Returns UserRequest with matching requestId.\r\n+     */\r\n+    @GET\r\n+    @Path(\"{requestId}\")\r\n+    UserRequestTO read(@PathParam(\"requestId\") Long requestId);\r\n+\r\n+    /**\r\n+     * @param requestId ID of UserRequest to be deleted.\r\n+     */\r\n+    @DELETE\r\n+    @Path(\"{requestId}\")\r\n+    void delete(@PathParam(\"requestId\") Long requestId);\r\n+\r\n+}\r"},{"sha":"376236fb6f9baeb5b763a1d73656a5fdc1e3d487","filename":"common/src/main/java/org/apache/syncope/common/services/UserService.java","status":"added","additions":138,"deletions":0,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import java.util.List;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.BulkAction;\n+import org.apache.syncope.common.to.BulkActionRes;\n+import org.apache.syncope.common.to.PropagationRequestTO;\n+import org.apache.syncope.common.to.UserTO;\n+\n+@Path(\"users\")\n+public interface UserService {\n+\n+    @POST\n+    @Path(\"{userId}/status/activate\")\n+    UserTO activate(@PathParam(\"userId\") long userId, @QueryParam(\"token\") String token);\n+\n+    @POST\n+    @Path(\"{userId}/status/activate/propagation\")\n+    UserTO activate(@PathParam(\"userId\") long userId, @QueryParam(\"token\") String token,\n+            PropagationRequestTO propagationRequestTO);\n+\n+    @POST\n+    @Path(\"activateByUsername/{username}\")\n+    UserTO activateByUsername(@PathParam(\"username\") String username, @QueryParam(\"token\") String token);\n+\n+    @POST\n+    @Path(\"activateByUsername/{username}/propagation\")\n+    UserTO activateByUsername(@PathParam(\"username\") String username, @QueryParam(\"token\") String token,\n+            PropagationRequestTO propagationRequestTO);\n+\n+    @GET\n+    @Path(\"count\")\n+    int count();\n+\n+    @POST\n+    Response create(UserTO userTO);\n+\n+    @DELETE\n+    @Path(\"{userId}\")\n+    UserTO delete(@PathParam(\"userId\") Long userId);\n+\n+    @GET\n+    List<UserTO> list();\n+\n+    @GET\n+    List<UserTO> list(@QueryParam(\"page\") int page, @QueryParam(\"size\") @DefaultValue(\"25\") int size);\n+\n+    @POST\n+    @Path(\"{userId}/status/reactivate\")\n+    UserTO reactivate(@PathParam(\"userId\") long userId);\n+\n+    @POST\n+    @Path(\"{userId}/status/reactivate/propagation\")\n+    UserTO reactivate(@PathParam(\"userId\") long userId, PropagationRequestTO propagationRequestTO);\n+\n+    @POST\n+    @Path(\"reactivateByUsername/{username}\")\n+    UserTO reactivateByUsername(@PathParam(\"username\") String username);\n+\n+    @POST\n+    @Path(\"reactivateByUsername/{username}/propagation\")\n+    UserTO reactivateByUsername(@PathParam(\"username\") String username, PropagationRequestTO propagationRequestTO);\n+\n+    @GET\n+    @Path(\"{userId}\")\n+    UserTO read(@PathParam(\"userId\") Long userId);\n+\n+    @GET\n+    UserTO read(@QueryParam(\"username\") String username);\n+\n+    @GET\n+    @Path(\"self\")\n+    UserTO readSelf();\n+\n+    @POST\n+    @Path(\"search\")\n+    List<UserTO> search(NodeCond searchCondition) throws InvalidSearchConditionException;\n+\n+    @POST\n+    @Path(\"search\")\n+    List<UserTO> search(NodeCond searchCondition, @QueryParam(\"page\") int page,\n+            @QueryParam(\"size\") @DefaultValue(\"25\") int size) throws InvalidSearchConditionException;\n+\n+    @POST\n+    @Path(\"search/count\")\n+    int searchCount(NodeCond searchCondition) throws InvalidSearchConditionException;\n+\n+    @POST\n+    @Path(\"{userId}/status/suspend\")\n+    UserTO suspend(@PathParam(\"userId\") long userId);\n+\n+    @POST\n+    @Path(\"{userId}/status/suspend/propagation\")\n+    UserTO suspend(@PathParam(\"userId\") long userId, PropagationRequestTO propagationRequestTO);\n+\n+    @POST\n+    @Path(\"suspendByUsername/{username}\")\n+    UserTO suspendByUsername(@PathParam(\"username\") String username);\n+\n+    @POST\n+    @Path(\"suspendByUsername/{username}/propagation\")\n+    UserTO suspendByUsername(@PathParam(\"username\") String username, PropagationRequestTO propagationRequestTO);\n+\n+    @POST\n+    @Path(\"{userId}\")\n+    UserTO update(@PathParam(\"userId\") Long userId, UserMod userMod);\n+\n+    @POST\n+    @Path(\"bulk\")\n+    BulkActionRes bulkAction(BulkAction bulkAction);\n+}"},{"sha":"0c312ce846ae6b44d8c665dc602854307456fd51","filename":"common/src/main/java/org/apache/syncope/common/services/UserWorkflowService.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserWorkflowService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.to.WorkflowFormTO;\n+\n+@Path(\"userworkflow\")\n+public interface UserWorkflowService {\n+\t@POST\n+\t@Path(\"forms\")\n+\tUserTO submitForm(WorkflowFormTO form);\n+\n+\t@GET\n+\t@Path(\"forms\")\n+\tList<WorkflowFormTO> getForms();\n+\n+\t@GET\n+\t@Path(\"forms/{userId}\")\n+\tWorkflowFormTO getFormForUser(@PathParam(\"userId\") Long userId);\n+\t\n+\t@POST\n+\t@Path(\"tasks/{taskId}/claim\")\n+\tWorkflowFormTO claimForm(@PathParam(\"taskId\") String taskId);\n+\n+\t@POST\n+\t@Path(\"tasks/{taskId}/execute\")\n+\tUserTO executeWorkflow(@PathParam(\"taskId\") String taskId, UserTO userTO);\n+}"},{"sha":"d92f3961db7712ca008ac236d366376e227a0dca","filename":"common/src/main/java/org/apache/syncope/common/services/WorkflowService.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.services;\r\n+\r\n+import java.util.List;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+\r\n+import org.apache.syncope.common.to.WorkflowDefinitionTO;\r\n+import org.apache.syncope.common.types.AttributableType;\r\n+\r\n+@Path(\"workflows/{kind}\")\r\n+public interface WorkflowService {\r\n+\r\n+    /**\r\n+     * @param kind Kind can be USER or ROLE only!\r\n+     * @return Returns workflow definition for matching kind.\r\n+     */\r\n+    @GET\r\n+    WorkflowDefinitionTO getDefinition(@PathParam(\"kind\") AttributableType kind);\r\n+\r\n+    /**\r\n+     * @param kind Kind can be USER or ROLE only!\r\n+     * @param definition New workflow definition to be stored for matching kind.\r\n+     */\r\n+    @PUT\r\n+    void updateDefinition(@PathParam(\"kind\") AttributableType kind, WorkflowDefinitionTO definition);\r\n+\r\n+    /**\r\n+     * @param kind Kind can be USER or ROLE only!\r\n+     * @return Returns existing tasks for matching kind.\r\n+     */\r\n+    @GET\r\n+    @Path(\"tasks\")\r\n+    List<String> getDefinedTasks(@PathParam(\"kind\") AttributableType kind);\r\n+\r\n+}\r"},{"sha":"a5e33122175005c67a884b4246df75c326d878b5","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractAttributableTO.java","status":"added","additions":185,"deletions":0,"changes":185,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,185 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+@XmlType\r\n+public abstract class AbstractAttributableTO extends ConnObjectTO {\r\n+\r\n+    private static final long serialVersionUID = 4083884098736820255L;\r\n+\r\n+    private long id;\r\n+\r\n+    private List<AttributeTO> derivedAttributes;\r\n+\r\n+    private List<AttributeTO> virtualAttributes;\r\n+\r\n+    private Set<String> resources;\r\n+\r\n+    private final List<PropagationStatusTO> propagationStatusTOs;\r\n+\r\n+    protected AbstractAttributableTO() {\r\n+        super();\r\n+\r\n+        derivedAttributes = new ArrayList<AttributeTO>();\r\n+        virtualAttributes = new ArrayList<AttributeTO>();\r\n+        resources = new HashSet<String>();\r\n+        propagationStatusTOs = new ArrayList<PropagationStatusTO>();\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(final long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public Map<String, AttributeTO> getDerivedAttributeMap() {\r\n+        Map<String, AttributeTO> result;\r\n+\r\n+        if (derivedAttributes == null) {\r\n+            result = Collections.emptyMap();\r\n+        } else {\r\n+            result = new HashMap<String, AttributeTO>(derivedAttributes.size());\r\n+            for (AttributeTO attributeTO : derivedAttributes) {\r\n+                result.put(attributeTO.getSchema(), attributeTO);\r\n+            }\r\n+            result = Collections.unmodifiableMap(result);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public Map<String, AttributeTO> getVirtualAttributeMap() {\r\n+        Map<String, AttributeTO> result;\r\n+\r\n+        if (derivedAttributes == null) {\r\n+            result = Collections.emptyMap();\r\n+        } else {\r\n+            result = new HashMap<String, AttributeTO>(virtualAttributes.size());\r\n+            for (AttributeTO attributeTO : virtualAttributes) {\r\n+                result.put(attributeTO.getSchema(), attributeTO);\r\n+            }\r\n+            result = Collections.unmodifiableMap(result);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    public boolean addDerivedAttribute(final AttributeTO derivedAttribute) {\r\n+        return derivedAttributes.add(derivedAttribute);\r\n+    }\r\n+\r\n+    public boolean removeDerivedAttribute(final AttributeTO derivedAttribute) {\r\n+        return derivedAttributes.remove(derivedAttribute);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"derivedAttributes\")\r\n+    @XmlElement(name = \"attribute\")\r\n+    public List<AttributeTO> getDerivedAttributes() {\r\n+        return derivedAttributes;\r\n+    }\r\n+\r\n+    public void setDerivedAttributes(final List<AttributeTO> derivedAttributes) {\r\n+\r\n+        this.derivedAttributes = derivedAttributes;\r\n+    }\r\n+\r\n+    public boolean addVirtualAttribute(final AttributeTO virtualAttribute) {\r\n+        return virtualAttributes.add(virtualAttribute);\r\n+    }\r\n+\r\n+    public boolean removeVirtualAttribute(final AttributeTO virtualAttribute) {\r\n+        return virtualAttributes.remove(virtualAttribute);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"virtualAttributes\")\r\n+    @XmlElement(name = \"attribute\")\r\n+    public List<AttributeTO> getVirtualAttributes() {\r\n+        return virtualAttributes;\r\n+    }\r\n+\r\n+    public void setVirtualAttributes(final List<AttributeTO> virtualAttributes) {\r\n+        this.virtualAttributes = virtualAttributes;\r\n+    }\r\n+\r\n+    public boolean addResource(final String resource) {\r\n+        return resources.add(resource);\r\n+    }\r\n+\r\n+    public boolean removeResource(final String resource) {\r\n+        return resources.remove(resource);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"resources\")\r\n+    @XmlElement(name = \"resource\")\r\n+    public Set<String> getResources() {\r\n+        return resources;\r\n+    }\r\n+\r\n+    public void setResources(final Set<String> resources) {\r\n+        this.resources = resources;\r\n+    }\r\n+\r\n+    public boolean addPropagationTO(final PropagationStatusTO status) {\r\n+        return propagationStatusTOs.add(status);\r\n+    }\r\n+\r\n+    public boolean removePropagationTO(final String resource) {\r\n+        if (resource != null && getPropagationStatusTOs().isEmpty()) {\r\n+            final List<PropagationStatusTO> toBeRemoved = new ArrayList<PropagationStatusTO>();\r\n+\r\n+            for (PropagationStatusTO propagationTO : getPropagationStatusTOs()) {\r\n+                if (resource.equals(propagationTO.getResource())) {\r\n+                    toBeRemoved.add(propagationTO);\r\n+                }\r\n+            }\r\n+\r\n+            return propagationStatusTOs.removeAll(toBeRemoved);\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"propagationStatuses\")\r\n+    @XmlElement(name = \"propagationStatus\")\r\n+    public List<PropagationStatusTO> getPropagationStatusTOs() {\r\n+        return propagationStatusTOs;\r\n+    }\r\n+\r\n+    public void setPropagationStatusTOs(final List<PropagationStatusTO> propagationStatusTOs) {\r\n+        if (this.propagationStatusTOs != propagationStatusTOs) {\r\n+            this.propagationStatusTOs.clear();\r\n+            this.propagationStatusTOs.addAll(propagationStatusTOs);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"0445f5a4c6c3615c6dcb0ad006c401143c5440a6","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractExecTO.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractExecTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,89 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.Date;\r\n+\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlType\r\n+public class AbstractExecTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -4621191979198357081L;\r\n+\r\n+    protected long id;\r\n+\r\n+    protected String status;\r\n+\r\n+    protected String message;\r\n+\r\n+    protected Date startDate;\r\n+\r\n+    protected Date endDate;\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getMessage() {\r\n+        return message;\r\n+    }\r\n+\r\n+    public void setMessage(String message) {\r\n+        this.message = message;\r\n+    }\r\n+\r\n+    public String getStatus() {\r\n+        return status;\r\n+    }\r\n+\r\n+    public void setStatus(String status) {\r\n+        this.status = status;\r\n+    }\r\n+\r\n+    public Date getStartDate() {\r\n+        return startDate == null\r\n+                ? null\r\n+                : new Date(startDate.getTime());\r\n+    }\r\n+\r\n+    public void setStartDate(Date startDate) {\r\n+        if (startDate != null) {\r\n+            this.startDate = new Date(startDate.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public Date getEndDate() {\r\n+        return endDate == null\r\n+                ? null\r\n+                : new Date(endDate.getTime());\r\n+    }\r\n+\r\n+    public void setEndDate(Date endDate) {\r\n+        if (endDate != null) {\r\n+            this.endDate = new Date(endDate.getTime());\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"195d69d88e9bf39cf82cf7c268067352526ae3ce","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractSchemaTO.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlSeeAlso;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"abstractSchema\")\r\n+@XmlType\r\n+@XmlSeeAlso({SchemaTO.class, DerivedSchemaTO.class, VirtualSchemaTO.class})\r\n+//@JsonTypeInfo(use=Id.CLASS, include=As.PROPERTY, property=\"class\")\r\n+public abstract class AbstractSchemaTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 4088388951694301759L;\r\n+\r\n+    private String name;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"473485bbb2947fe5ae247b98d6aa72f50b37370a","filename":"common/src/main/java/org/apache/syncope/common/to/AccountPolicyTO.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.types.AccountPolicySpec;\r\n+import org.apache.syncope.common.types.PolicyType;\r\n+\r\n+@XmlRootElement(name = \"accountPolicy\")\r\n+@XmlType\r\n+public class AccountPolicyTO extends PolicyTO {\r\n+\r\n+    private static final long serialVersionUID = -1557150042828800134L;\r\n+\r\n+    private AccountPolicySpec specification;\r\n+\r\n+    public AccountPolicyTO() {\r\n+        this(false);\r\n+    }\r\n+\r\n+    public AccountPolicyTO(boolean global) {\r\n+        super();\r\n+\r\n+        PolicyType type = global\r\n+                ? PolicyType.GLOBAL_ACCOUNT\r\n+                : PolicyType.ACCOUNT;\r\n+        setType(type);\r\n+    }\r\n+\r\n+    public void setSpecification(final AccountPolicySpec specification) {\r\n+        this.specification = specification;\r\n+    }\r\n+\r\n+    public AccountPolicySpec getSpecification() {\r\n+        return specification;\r\n+    }\r\n+}\r"},{"sha":"cfbed837918399d5aad7314bb37253f3c87535ad","filename":"common/src/main/java/org/apache/syncope/common/to/AttributeTO.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAttributeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAttributeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAttributeTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,120 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"attribute\")\r\n+@XmlType\r\n+public class AttributeTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 4941691338796323623L;\r\n+\r\n+    /**\r\n+     * Name of the schema that this attribute is referring to.\r\n+     */\r\n+    private String schema;\r\n+\r\n+    /**\r\n+     * Set of (string) values of this attribute.\r\n+     */\r\n+    private List<String> values;\r\n+\r\n+    /**\r\n+     * Whether this attribute is read-only or not.\r\n+     */\r\n+    private boolean readonly;\r\n+\r\n+    /**\r\n+     * Default constructor.\r\n+     */\r\n+    public AttributeTO() {\r\n+        super();\r\n+        values = new ArrayList<String>();\r\n+        readonly = false;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name of the schema that this attribute is referring to\r\n+     */\r\n+    public String getSchema() {\r\n+        return schema;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param schema name to be set\r\n+     */\r\n+    public void setSchema(final String schema) {\r\n+        this.schema = schema;\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * @param value an attribute value to be added\r\n+     * @return whether the operation succeeded or not\r\n+     */\r\n+    public boolean addValue(final String value) {\r\n+        return value == null || isReadonly()\r\n+                ? false\r\n+                : values.add(value);\r\n+    }\r\n+\r\n+    /**\r\n+     * @param value an attribute value to be removed\r\n+     * @return whether the operation succeeded or not\r\n+     */\r\n+    public boolean removeValue(final String value) {\r\n+        return value == null || isReadonly()\r\n+                ? false\r\n+                : values.remove(value);\r\n+    }\r\n+\r\n+    /**\r\n+     * @return attribute values as strings\r\n+     */\r\n+    //@XmlElementWrapper(name = \"values\")\r\n+    @XmlElement(name = \"value\")\r\n+    public List<String> getValues() {\r\n+        return values;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param values set of (string) values\r\n+     */\r\n+    public void setValues(final List<String> values) {\r\n+        if (!isReadonly()) {\r\n+            this.values = values;\r\n+        }\r\n+    }\r\n+\r\n+    public boolean isReadonly() {\r\n+        return readonly;\r\n+    }\r\n+\r\n+    public void setReadonly(boolean readonly) {\r\n+        this.readonly = readonly;\r\n+    }\r\n+}\r"},{"sha":"528802dc4c71f7442a2bc1a8da3e572f393457f9","filename":"common/src/main/java/org/apache/syncope/common/to/BulkAction.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FBulkAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FBulkAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FBulkAction.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import javax.xml.bind.annotation.XmlEnum;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"bulkAction\")\n+@XmlType\n+public class BulkAction extends AbstractBaseBean {\n+\n+    @XmlEnum\n+    @XmlType(name = \"bulkActionType\")\n+    public enum Type {\n+\n+        DELETE,\n+        REACTIVATE,\n+        SUSPEND,\n+        DRYRUN,\n+        EXECUTE\n+\n+    }\n+\n+    private Type operation;\n+\n+    /**\n+     * Serialized identifiers.\n+     */\n+    private Collection<String> targets;\n+\n+    public Type getOperation() {\n+        return operation;\n+    }\n+\n+    public void setOperation(final Type operation) {\n+        this.operation = operation;\n+    }\n+\n+    public void setTargets(final Collection<String> targets) {\n+        this.targets = targets;\n+    }\n+\n+    public Collection<String> getTargets() {\n+        return targets;\n+    }\n+\n+    public void addTarget(final String target) {\n+        if (this.targets == null) {\n+            this.targets = new ArrayList<String>();\n+        }\n+\n+        this.targets.add(target);\n+    }\n+\n+    public int size() {\n+        return targets == null ? 0 : targets.size();\n+    }\n+}"},{"sha":"73b2169dbd89935a61ecc2a27815f57784cddb55","filename":"common/src/main/java/org/apache/syncope/common/to/BulkActionRes.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FBulkActionRes.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FBulkActionRes.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FBulkActionRes.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlEnum;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.codehaus.jackson.annotate.JsonIgnore;\n+\n+@XmlRootElement(name = \"BulkActionRes\")\n+@XmlType\n+public class BulkActionRes extends AbstractBaseBean {\n+\n+    @XmlEnum\n+    @XmlType(name = \"bulkActionStatus\")\n+    public enum Status {\n+\n+        SUCCESS,\n+        FAILURE\n+\n+    }\n+\n+    private List<Result> results;\n+\n+    public void setResults(final List<Result> results) {\n+        this.results = results;\n+    }\n+\n+    public List<Result> getResults() {\n+        return results;\n+    }\n+\n+    @JsonIgnore\n+    public void add(final Object id, final Status status) {\n+        if (results == null) {\n+            results = new ArrayList<Result>();\n+        }\n+\n+        if (id != null) {\n+            results.add(new Result(id.toString(), status));\n+        }\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, Status> getResultMap() {\n+        final Map<String, Status> res = new HashMap<String, Status>();\n+        if (results != null) {\n+            for (Result result : results) {\n+                res.put(result.getKey(), result.getValue());\n+            }\n+        }\n+        return res;\n+    }\n+\n+    @JsonIgnore\n+    public List getResultByStatus(final Status status) {\n+        final List<String> res = new ArrayList<String>();\n+        if (results != null) {\n+            for (Result result : results) {\n+                if (result.getValue() == status) {\n+                    res.add(result.getKey());\n+                }\n+            }\n+        }\n+        return res;\n+    }\n+\n+    public static class Result {\n+\n+        private String key;\n+\n+        private Status value;\n+\n+        public Result() {\n+        }\n+\n+        public Result(String key, Status value) {\n+            this.key = key;\n+            this.value = value;\n+        }\n+\n+        public String getKey() {\n+            return key;\n+        }\n+\n+        public Status getValue() {\n+            return value;\n+        }\n+\n+        public void setKey(String key) {\n+            this.key = key;\n+        }\n+\n+        public void setValue(Status value) {\n+            this.value = value;\n+        }\n+    }\n+}"},{"sha":"1b6485f3300c177111626e6a606aefe690b802da","filename":"common/src/main/java/org/apache/syncope/common/to/ConfigurationTO.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConfigurationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConfigurationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConfigurationTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"configuration\")\r\n+@XmlType\r\n+public class ConfigurationTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -3825039700228595590L;\r\n+\r\n+    private String key;\r\n+\r\n+    private String value;\r\n+\r\n+    public String getKey() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public void setKey(final String key) {\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public String getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(final String value) {\r\n+        this.value = value;\r\n+    }\r\n+}\r"},{"sha":"80a52c5b9d7218f14e880b9c3bcf8e8e1c1556f4","filename":"common/src/main/java/org/apache/syncope/common/to/ConnBundleTO.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnBundleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnBundleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnBundleTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,107 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.ConnConfPropSchema;\r\n+\r\n+@XmlRootElement(name = \"connectorBundle\")\r\n+@XmlType\r\n+public class ConnBundleTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 7215115961910138005L;\r\n+\r\n+    private String displayName;\r\n+\r\n+    private String location;\r\n+\r\n+    private String bundleName;\r\n+\r\n+    private String connectorName;\r\n+\r\n+    private String version;\r\n+\r\n+    private List<ConnConfPropSchema> properties = new ArrayList<ConnConfPropSchema>();\r\n+\r\n+    public String getDisplayName() {\r\n+        return displayName;\r\n+    }\r\n+\r\n+    public void setDisplayName(final String displayName) {\r\n+        this.displayName = displayName;\r\n+    }\r\n+\r\n+    public String getLocation() {\r\n+        return location;\r\n+    }\r\n+\r\n+    public void setLocation(final String location) {\r\n+        this.location = location;\r\n+    }\r\n+\r\n+    public String getBundleName() {\r\n+        return bundleName;\r\n+    }\r\n+\r\n+    public void setBundleName(final String bundleName) {\r\n+        this.bundleName = bundleName;\r\n+    }\r\n+\r\n+    public String getConnectorName() {\r\n+        return connectorName;\r\n+    }\r\n+\r\n+    public void setConnectorName(final String connectorName) {\r\n+        this.connectorName = connectorName;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"properties\")\r\n+    @XmlElement(name = \"connConfPropSchema\")\r\n+    public List<ConnConfPropSchema> getProperties() {\r\n+        return properties;\r\n+    }\r\n+\r\n+    public String getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setVersion(final String version) {\r\n+        this.version = version;\r\n+    }\r\n+\r\n+    public void setProperties(final List<ConnConfPropSchema> properties) {\r\n+        this.properties = properties;\r\n+    }\r\n+\r\n+    public boolean addProperty(final ConnConfPropSchema property) {\r\n+        return properties.add(property);\r\n+    }\r\n+\r\n+    public boolean removeProperty(final ConnConfPropSchema property) {\r\n+        return properties.remove(property);\r\n+    }\r\n+}\r"},{"sha":"f99770b33625a2e822cfb7b0e8b3c0d7cbdbe8fe","filename":"common/src/main/java/org/apache/syncope/common/to/ConnInstanceTO.java","status":"added","additions":195,"deletions":0,"changes":195,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnInstanceTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,195 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.EnumSet;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.ConnConfProperty;\r\n+import org.apache.syncope.common.types.ConnectorCapability;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+@XmlRootElement(name = \"connector\")\r\n+@XmlType\r\n+public class ConnInstanceTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 2707778645445168671L;\r\n+\r\n+    private long id;\r\n+\r\n+    private String location;\r\n+\r\n+    private String connectorName;\r\n+\r\n+    private String bundleName;\r\n+\r\n+    private String version;\r\n+\r\n+    private final Set<ConnConfProperty> configuration;\r\n+\r\n+    private final Set<ConnectorCapability> capabilities;\r\n+\r\n+    private String displayName;\r\n+\r\n+    private Integer connRequestTimeout;\r\n+\r\n+    public ConnInstanceTO() {\r\n+        super();\r\n+\r\n+        configuration = new HashSet<ConnConfProperty>();\r\n+        capabilities = EnumSet.noneOf(ConnectorCapability.class);\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getLocation() {\r\n+        return location;\r\n+    }\r\n+\r\n+    public void setLocation(final String location) {\r\n+        this.location = location;\r\n+    }\r\n+\r\n+    public String getConnectorName() {\r\n+        return connectorName;\r\n+    }\r\n+\r\n+    public void setConnectorName(final String connectorname) {\r\n+        this.connectorName = connectorname;\r\n+    }\r\n+\r\n+    public String getBundleName() {\r\n+        return bundleName;\r\n+    }\r\n+\r\n+    public void setBundleName(final String bundlename) {\r\n+        this.bundleName = bundlename;\r\n+    }\r\n+\r\n+    public String getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setVersion(final String version) {\r\n+        this.version = version;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"configuration\")\r\n+    @XmlElement(name = \"property\")\r\n+    public Set<ConnConfProperty> getConfiguration() {\r\n+        return this.configuration;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public Map<String, ConnConfProperty> getConfigurationMap() {\r\n+        Map<String, ConnConfProperty> result;\r\n+\r\n+        if (getConfiguration() == null) {\r\n+            result = Collections.<String, ConnConfProperty>emptyMap();\r\n+        } else {\r\n+            result = new HashMap<String, ConnConfProperty>();\r\n+            for (ConnConfProperty prop : getConfiguration()) {\r\n+                result.put(prop.getSchema().getName(), prop);\r\n+            }\r\n+            result = Collections.unmodifiableMap(result);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    public boolean addConfiguration(final ConnConfProperty property) {\r\n+        return this.configuration.add(property);\r\n+    }\r\n+\r\n+    public boolean removeConfiguration(final ConnConfProperty property) {\r\n+        return this.configuration.remove(property);\r\n+    }\r\n+\r\n+    public void setConfiguration(final Set<ConnConfProperty> configuration) {\r\n+        if (this.configuration != configuration) {\r\n+            this.configuration.clear();\r\n+            if (configuration != null && !configuration.isEmpty()) {\r\n+                this.configuration.addAll(configuration);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public boolean addCapability(final ConnectorCapability capability) {\r\n+        return capabilities.add(capability);\r\n+    }\r\n+\r\n+    public boolean removeCapability(final ConnectorCapability capability) {\r\n+        return capabilities.remove(capability);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"capabilities\")\r\n+    @XmlElement(name = \"capability\")\r\n+    public Set<ConnectorCapability> getCapabilities() {\r\n+        return capabilities;\r\n+    }\r\n+\r\n+    public void setCapabilities(final Set<ConnectorCapability> capabilities) {\r\n+        if (this.capabilities != capabilities) {\r\n+            this.capabilities.clear();\r\n+            if (capabilities != null && !capabilities.isEmpty()) {\r\n+                this.capabilities.addAll(capabilities);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public String getDisplayName() {\r\n+        return displayName;\r\n+    }\r\n+\r\n+    public void setDisplayName(final String displayName) {\r\n+        this.displayName = displayName;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get connector request timeout. It is not applied in case of sync, full reconciliation and search.\r\n+     *\r\n+     * @return timeout.\r\n+     */\r\n+    public Integer getConnRequestTimeout() {\r\n+        return connRequestTimeout;\r\n+    }\r\n+\r\n+    /**\r\n+     * Set connector request timeout. It is not applied in case of sync, full reconciliation and search.\r\n+     *\r\n+     * @param timeout.\r\n+     */\r\n+    public void setConnRequestTimeout(final Integer connRequestTimeout) {\r\n+        this.connRequestTimeout = connRequestTimeout;\r\n+    }\r\n+}\r"},{"sha":"8f73fd808a77a6e968b9fa5cadff0be163ab1daf","filename":"common/src/main/java/org/apache/syncope/common/to/ConnObjectTO.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnObjectTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,81 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+@XmlRootElement(name = \"connector\")\r\n+@XmlType\r\n+public class ConnObjectTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 5139554911265442497L;\r\n+\r\n+    private List<AttributeTO> attributes;\r\n+\r\n+    public ConnObjectTO() {\r\n+        super();\r\n+\r\n+        attributes = new ArrayList<AttributeTO>();\r\n+    }\r\n+\r\n+    public boolean addAttribute(final AttributeTO attribute) {\r\n+        return attributes.add(attribute);\r\n+    }\r\n+\r\n+    public boolean removeAttribute(final AttributeTO attribute) {\r\n+        return attributes.remove(attribute);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"attributes\")\r\n+    @XmlElement(name = \"attribute\")\r\n+    public List<AttributeTO> getAttributes() {\r\n+        return attributes;\r\n+    }\r\n+\r\n+    public void setAttributes(final List<AttributeTO> attributes) {\r\n+        this.attributes = attributes;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public Map<String, AttributeTO> getAttributeMap() {\r\n+        Map<String, AttributeTO> result;\r\n+\r\n+        if (attributes == null) {\r\n+            result = Collections.<String, AttributeTO>emptyMap();\r\n+        } else {\r\n+            result = new HashMap<String, AttributeTO>(attributes.size());\r\n+            for (AttributeTO attributeTO : attributes) {\r\n+                result.put(attributeTO.getSchema(), attributeTO);\r\n+            }\r\n+            result = Collections.<String, AttributeTO>unmodifiableMap(result);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+}\r"},{"sha":"e339e357964a7025a24c9454dcf6699177c4e8e7","filename":"common/src/main/java/org/apache/syncope/common/to/CorrelationRuleClassTO.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FCorrelationRuleClassTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FCorrelationRuleClassTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FCorrelationRuleClassTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"correlationRuleClass\")\r\n+@XmlType\r\n+public class CorrelationRuleClassTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -6715106427060816725L;\r\n+\r\n+    private String name;\r\n+\r\n+    public static CorrelationRuleClassTO instance(final String name) {\r\n+        CorrelationRuleClassTO instance = new CorrelationRuleClassTO();\r\n+        instance.setName(name);\r\n+        return instance;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"d00680dc247ad6f0711ec23be00d5584116c53cc","filename":"common/src/main/java/org/apache/syncope/common/to/DerivedSchemaTO.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerivedSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerivedSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerivedSchemaTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+@XmlRootElement(name = \"derivedSchema\")\r\n+@XmlType\r\n+public class DerivedSchemaTO extends AbstractSchemaTO {\r\n+\r\n+    private static final long serialVersionUID = -6747399803792103108L;\r\n+\r\n+    private String expression;\r\n+\r\n+    public String getExpression() {\r\n+        return expression;\r\n+    }\r\n+\r\n+    public void setExpression(String expression) {\r\n+        this.expression = expression;\r\n+    }\r\n+}\r"},{"sha":"3c28fa9959caf59060cd57ad388c18e9a3329cc7","filename":"common/src/main/java/org/apache/syncope/common/to/EntitlementTO.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEntitlementTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEntitlementTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEntitlementTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"entitlement\")\r\n+@XmlType\r\n+public class EntitlementTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 7133614577172038452L;\r\n+\r\n+    private String name;\r\n+\r\n+    public static EntitlementTO instance(final String name) {\r\n+        EntitlementTO instance = new EntitlementTO();\r\n+        instance.setName(name);\r\n+        return instance;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"fa523205b08defd20df97686c3b3ec72b865997f","filename":"common/src/main/java/org/apache/syncope/common/to/JobClassTO.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FJobClassTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FJobClassTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FJobClassTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"jobClass\")\r\n+@XmlType\r\n+public class JobClassTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -1953799905627918822L;\r\n+\r\n+    private String name;\r\n+\r\n+    public static JobClassTO instance(final String name) {\r\n+        JobClassTO instance = new JobClassTO();\r\n+        instance.setName(name);\r\n+        return instance;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"44a6df6346603d96479e86e968785ac6fca8d661","filename":"common/src/main/java/org/apache/syncope/common/to/LoggerTO.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FLoggerTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FLoggerTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FLoggerTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.SyncopeLoggerLevel;\r\n+\r\n+@XmlRootElement(name = \"logger\")\r\n+@XmlType\r\n+public class LoggerTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -7794833835668648505L;\r\n+\r\n+    private String name;\r\n+\r\n+    private SyncopeLoggerLevel level;\r\n+\r\n+    public SyncopeLoggerLevel getLevel() {\r\n+        return level;\r\n+    }\r\n+\r\n+    public void setLevel(final SyncopeLoggerLevel level) {\r\n+        this.level = level;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"2ebd5df260865033a0a7192c08f95db7716ee2dd","filename":"common/src/main/java/org/apache/syncope/common/to/MailTemplateTO.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMailTemplateTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMailTemplateTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMailTemplateTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"mailTemplate\")\r\n+@XmlType\r\n+public class MailTemplateTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 7232619557172031478L;\r\n+\r\n+    private String name;\r\n+\r\n+    public static MailTemplateTO instance(final String name) {\r\n+        MailTemplateTO templateTO = new MailTemplateTO();\r\n+        templateTO.setName(name);\r\n+        return templateTO;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"4578621a750fa5ea707b6c65d3213b7c7c92339f","filename":"common/src/main/java/org/apache/syncope/common/to/MappingItemTO.java","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingItemTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingItemTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingItemTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,135 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.IntMappingType;\r\n+import org.apache.syncope.common.types.MappingPurpose;\r\n+\r\n+@XmlRootElement(name = \"mappingItem\")\r\n+@XmlType\r\n+public class MappingItemTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 2983498836767176862L;\r\n+\r\n+    private Long id;\r\n+\r\n+    /**\r\n+     * Attribute schema to be mapped. Consider that we can associate tha same attribute schema more than once, with\r\n+     * different aliases, to different resource attributes.\r\n+     */\r\n+    private String intAttrName;\r\n+\r\n+    /**\r\n+     * Schema type to be mapped.\r\n+     */\r\n+    private IntMappingType intMappingType;\r\n+\r\n+    /**\r\n+     * External resource's field to be mapped.\r\n+     */\r\n+    private String extAttrName;\r\n+\r\n+    /**\r\n+     * Specify if the mapped target resource's field is the key.\r\n+     */\r\n+    private boolean accountid;\r\n+\r\n+    /**\r\n+     * Specify if the mapped target resource's field is the password.\r\n+     */\r\n+    private boolean password;\r\n+\r\n+    /**\r\n+     * Specify if the mapped target resource's field is nullable.\r\n+     */\r\n+    private String mandatoryCondition = \"false\";\r\n+\r\n+    /**\r\n+     * Mapping purposes: SYNCHRONIZATION, PROPAGATION, BOTH.\r\n+     */\r\n+    private MappingPurpose purpose;\r\n+\r\n+    public boolean isAccountid() {\r\n+        return accountid;\r\n+    }\r\n+\r\n+    public void setAccountid(boolean accountid) {\r\n+        this.accountid = accountid;\r\n+    }\r\n+\r\n+    public String getExtAttrName() {\r\n+        return extAttrName;\r\n+    }\r\n+\r\n+    public void setExtAttrName(String extAttrName) {\r\n+        this.extAttrName = extAttrName;\r\n+    }\r\n+\r\n+    public Long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(Long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getMandatoryCondition() {\r\n+        return mandatoryCondition;\r\n+    }\r\n+\r\n+    public void setMandatoryCondition(String mandatoryCondition) {\r\n+        this.mandatoryCondition = mandatoryCondition;\r\n+    }\r\n+\r\n+    public boolean isPassword() {\r\n+        return password;\r\n+    }\r\n+\r\n+    public void setPassword(boolean password) {\r\n+        this.password = password;\r\n+    }\r\n+\r\n+    public String getIntAttrName() {\r\n+        return intAttrName;\r\n+    }\r\n+\r\n+    public void setIntAttrName(String intAttrName) {\r\n+        this.intAttrName = intAttrName;\r\n+    }\r\n+\r\n+    public IntMappingType getIntMappingType() {\r\n+        return intMappingType;\r\n+    }\r\n+\r\n+    public void setIntMappingType(IntMappingType intMappingType) {\r\n+        this.intMappingType = intMappingType;\r\n+    }\r\n+\r\n+    public MappingPurpose getPurpose() {\r\n+        return purpose;\r\n+    }\r\n+\r\n+    public void setPurpose(MappingPurpose purpose) {\r\n+        this.purpose = purpose;\r\n+    }\r\n+}\r"},{"sha":"d02b5a59a7f96e7e00861ff761e61afcc0cf61aa","filename":"common/src/main/java/org/apache/syncope/common/to/MappingTO.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,137 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.IntMappingType;\r\n+\r\n+@XmlRootElement(name = \"mapping\")\r\n+@XmlType\r\n+public class MappingTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 8447688036282611118L;\r\n+\r\n+    private String accountLink;\r\n+\r\n+    private final List<MappingItemTO> items;\r\n+\r\n+    public MappingTO() {\r\n+        super();\r\n+\r\n+        items = new ArrayList<MappingItemTO>();\r\n+    }\r\n+\r\n+    public String getAccountLink() {\r\n+        return accountLink;\r\n+    }\r\n+\r\n+    public void setAccountLink(String accountLink) {\r\n+        this.accountLink = accountLink;\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public <T extends MappingItemTO> T getAccountIdItem() {\r\n+        T accountIdItem = null;\r\n+        for (MappingItemTO item : getItems()) {\r\n+            if (item.isAccountid()) {\r\n+                accountIdItem = (T) item;\r\n+            }\r\n+        }\r\n+        return accountIdItem;\r\n+    }\r\n+\r\n+    protected <T extends MappingItemTO> boolean addAccountIdItem(final T accountIdItem) {\r\n+        if (IntMappingType.UserVirtualSchema == accountIdItem.getIntMappingType()\r\n+                || IntMappingType.RoleVirtualSchema == accountIdItem.getIntMappingType()\r\n+                || IntMappingType.MembershipVirtualSchema == accountIdItem.getIntMappingType()\r\n+                || IntMappingType.Password == accountIdItem.getIntMappingType()) {\r\n+\r\n+            throw new IllegalArgumentException(\"Virtual attributes cannot be set as accountId\");\r\n+        }\r\n+        if (IntMappingType.Password == accountIdItem.getIntMappingType()) {\r\n+            throw new IllegalArgumentException(\"Password attributes cannot be set as accountId\");\r\n+        }\r\n+\r\n+        accountIdItem.setExtAttrName(null);\r\n+        accountIdItem.setAccountid(true);\r\n+\r\n+        return this.addItem(accountIdItem);\r\n+    }\r\n+\r\n+    public boolean setAccountIdItem(final MappingItemTO accountIdItem) {\r\n+        if (accountIdItem == null) {\r\n+            return this.removeItem(getAccountIdItem());\r\n+        } else {\r\n+            return addAccountIdItem(accountIdItem);\r\n+        }\r\n+    }\r\n+\r\n+    public MappingItemTO getPasswordItem() {\r\n+        MappingItemTO passwordItem = null;\r\n+        for (MappingItemTO item : getItems()) {\r\n+            if (item.isPassword()) {\r\n+                passwordItem = item;\r\n+            }\r\n+        }\r\n+        return passwordItem;\r\n+    }\r\n+\r\n+    public boolean setPasswordItem(final MappingItemTO passwordItem) {\r\n+        if (passwordItem == null) {\r\n+            return this.removeItem(getPasswordItem());\r\n+        } else {\r\n+            passwordItem.setExtAttrName(null);\r\n+            passwordItem.setPassword(true);\r\n+            return addItem(passwordItem);\r\n+        }\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    @XmlElementWrapper(name = \"items\")\r\n+    @XmlElement(name = \"item\")\r\n+    public <T extends MappingItemTO> List<T> getItems() {\r\n+        return (List<T>) items;\r\n+    }\r\n+\r\n+    public boolean addItem(final MappingItemTO item) {\r\n+        return item == null ? false : this.items.contains(item) || this.items.add(item);\r\n+    }\r\n+\r\n+    public boolean removeItem(final MappingItemTO item) {\r\n+        return this.items.remove(item);\r\n+    }\r\n+\r\n+    public void setItems(final Collection<MappingItemTO> items) {\r\n+        if (this.items != items) {\r\n+            this.items.clear();\r\n+            if (items != null && !items.isEmpty()) {\r\n+                this.items.addAll(items);\r\n+            }\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"3d50d006a1b23c7fbc6e2e624f9c233dd70bf0c3","filename":"common/src/main/java/org/apache/syncope/common/to/MembershipTO.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,95 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+@XmlRootElement(name = \"membership\")\r\n+@XmlType\r\n+public class MembershipTO extends AbstractAttributableTO {\r\n+\r\n+    private static final long serialVersionUID = 5992828670273935861L;\r\n+\r\n+    private long roleId;\r\n+\r\n+    private String roleName;\r\n+\r\n+    public long getRoleId() {\r\n+        return roleId;\r\n+    }\r\n+\r\n+    public void setRoleId(long roleId) {\r\n+        this.roleId = roleId;\r\n+    }\r\n+\r\n+    public String getRoleName() {\r\n+        return roleName;\r\n+    }\r\n+\r\n+    public void setRoleName(String roleName) {\r\n+        this.roleName = roleName;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean addResource(String resource) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean removeResource(String resource) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    @XmlElementWrapper(name = \"resources\")\r\n+    @XmlElement(name = \"resource\")\r\n+    public Set<String> getResources() {\r\n+        return Collections.<String>emptySet();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setResources(Set<String> resources) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean addPropagationTO(PropagationStatusTO status) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean removePropagationTO(String resource) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<PropagationStatusTO> getPropagationStatusTOs() {\r\n+        return Collections.<PropagationStatusTO>emptyList();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setPropagationStatusTOs(List<PropagationStatusTO> propagationTOs) {\r\n+    }\r\n+}\r"},{"sha":"6d2958a370f0e6fe89a3b652ae728f8c7f3839b0","filename":"common/src/main/java/org/apache/syncope/common/to/NotificationTO.java","status":"added","additions":163,"deletions":0,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,163 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.search.NodeCond;\r\n+import org.apache.syncope.common.types.IntMappingType;\r\n+import org.apache.syncope.common.types.TraceLevel;\r\n+\r\n+@XmlRootElement(name = \"notification\")\r\n+@XmlType\r\n+public class NotificationTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -6145117115632592612L;\r\n+\r\n+    private Long id;\r\n+\r\n+    private List<String> events;\r\n+\r\n+    private NodeCond about;\r\n+\r\n+    private NodeCond recipients;\r\n+\r\n+    private IntMappingType recipientAttrType;\r\n+\r\n+    private String recipientAttrName;\r\n+\r\n+    private boolean selfAsRecipient;\r\n+\r\n+    private String sender;\r\n+\r\n+    private String subject;\r\n+\r\n+    private String template;\r\n+\r\n+    private TraceLevel traceLevel;\r\n+\r\n+    public NotificationTO() {\r\n+        events = new ArrayList<String>();\r\n+    }\r\n+\r\n+    public NodeCond getAbout() {\r\n+        return about;\r\n+    }\r\n+\r\n+    public void setAbout(NodeCond about) {\r\n+        this.about = about;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"events\")\r\n+    @XmlElement(name = \"event\")\r\n+    public List<String> getEvents() {\r\n+        return events;\r\n+    }\r\n+\r\n+    public boolean addEvent(final String event) {\r\n+        return event != null && !events.contains(event) && events.add(event);\r\n+    }\r\n+\r\n+    public boolean removeEvent(final String event) {\r\n+        return event != null && events.remove(event);\r\n+    }\r\n+\r\n+    public void setEvents(List<String> events) {\r\n+        this.events = events;\r\n+    }\r\n+\r\n+    public Long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(Long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public NodeCond getRecipients() {\r\n+        return recipients;\r\n+    }\r\n+\r\n+    public void setRecipients(NodeCond recipients) {\r\n+        this.recipients = recipients;\r\n+    }\r\n+\r\n+    public String getRecipientAttrName() {\r\n+        return recipientAttrName;\r\n+    }\r\n+\r\n+    public void setRecipientAttrName(String recipientAttrName) {\r\n+        this.recipientAttrName = recipientAttrName;\r\n+    }\r\n+\r\n+    public IntMappingType getRecipientAttrType() {\r\n+        return recipientAttrType;\r\n+    }\r\n+\r\n+    public void setRecipientAttrType(IntMappingType recipientAttrType) {\r\n+        this.recipientAttrType = recipientAttrType;\r\n+    }\r\n+\r\n+    public boolean isSelfAsRecipient() {\r\n+        return selfAsRecipient;\r\n+    }\r\n+\r\n+    public void setSelfAsRecipient(boolean selfAsRecipient) {\r\n+        this.selfAsRecipient = selfAsRecipient;\r\n+    }\r\n+\r\n+    public String getSender() {\r\n+        return sender;\r\n+    }\r\n+\r\n+    public void setSender(String sender) {\r\n+        this.sender = sender;\r\n+    }\r\n+\r\n+    public String getSubject() {\r\n+        return subject;\r\n+    }\r\n+\r\n+    public void setSubject(String subject) {\r\n+        this.subject = subject;\r\n+    }\r\n+\r\n+    public String getTemplate() {\r\n+        return template;\r\n+    }\r\n+\r\n+    public void setTemplate(String template) {\r\n+        this.template = template;\r\n+    }\r\n+\r\n+    public TraceLevel getTraceLevel() {\r\n+        return traceLevel;\r\n+    }\r\n+\r\n+    public void setTraceLevel(TraceLevel traceLevel) {\r\n+        this.traceLevel = traceLevel;\r\n+    }\r\n+}\r"},{"sha":"b34887d94a276dd9c77b6bf73d4350de5d7fcd9d","filename":"common/src/main/java/org/apache/syncope/common/to/NotificationTaskTO.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTaskTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,121 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.types.TraceLevel;\r\n+\r\n+@XmlRootElement(name = \"notificationTask\")\r\n+@XmlType\r\n+public class NotificationTaskTO extends TaskTO {\r\n+\r\n+    private static final long serialVersionUID = 371671242591093846L;\r\n+\r\n+    private final Set<String> recipients = new HashSet<String>();\r\n+\r\n+    private String sender;\r\n+\r\n+    private String subject;\r\n+\r\n+    private String textBody;\r\n+\r\n+    private String htmlBody;\r\n+\r\n+    private boolean executed;\r\n+\r\n+    private TraceLevel traceLevel;\r\n+\r\n+    @XmlElementWrapper(name = \"recipients\")\r\n+    @XmlElement(name = \"recipient\")\r\n+    public Set<String> getRecipients() {\r\n+        return recipients;\r\n+    }\r\n+\r\n+    public boolean addRecipient(final String recipient) {\r\n+        return recipients.add(recipient);\r\n+    }\r\n+\r\n+    public boolean removeRecipient(final String recipient) {\r\n+        return recipients.remove(recipient);\r\n+    }\r\n+\r\n+    public void setRecipients(final Set<String> recipients) {\r\n+        if (this.recipients != recipients) {\r\n+            this.recipients.clear();\r\n+            if (recipients != null) {\r\n+                this.recipients.addAll(recipients);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public String getSender() {\r\n+        return sender;\r\n+    }\r\n+\r\n+    public void setSender(final String sender) {\r\n+        this.sender = sender;\r\n+    }\r\n+\r\n+    public String getSubject() {\r\n+        return subject;\r\n+    }\r\n+\r\n+    public void setSubject(final String subject) {\r\n+        this.subject = subject;\r\n+    }\r\n+\r\n+    public String getTextBody() {\r\n+        return textBody;\r\n+    }\r\n+\r\n+    public void setTextBody(final String textBody) {\r\n+        this.textBody = textBody;\r\n+    }\r\n+\r\n+    public String getHtmlBody() {\r\n+        return htmlBody;\r\n+    }\r\n+\r\n+    public void setHtmlBody(final String htmlBody) {\r\n+        this.htmlBody = htmlBody;\r\n+    }\r\n+\r\n+    public boolean isExecuted() {\r\n+        return executed;\r\n+    }\r\n+\r\n+    public void setExecuted(boolean executed) {\r\n+        this.executed = executed;\r\n+    }\r\n+\r\n+    public TraceLevel getTraceLevel() {\r\n+        return traceLevel;\r\n+    }\r\n+\r\n+    public void setTraceLevel(TraceLevel traceLevel) {\r\n+        this.traceLevel = traceLevel;\r\n+    }\r\n+}\r"},{"sha":"53156de72a40b4b0a2b4fa9fc0e6e0b053cbe828","filename":"common/src/main/java/org/apache/syncope/common/to/PasswordPolicyTO.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.types.PasswordPolicySpec;\r\n+import org.apache.syncope.common.types.PolicyType;\r\n+\r\n+@XmlRootElement(name = \"passwordPolicy\")\r\n+@XmlType\r\n+public class PasswordPolicyTO extends PolicyTO {\r\n+\r\n+    private static final long serialVersionUID = -5606086441294799690L;\r\n+\r\n+    private PasswordPolicySpec specification;\r\n+\r\n+    public PasswordPolicyTO() {\r\n+        this(false);\r\n+    }\r\n+\r\n+    public PasswordPolicyTO(boolean global) {\r\n+        super();\r\n+\r\n+        PolicyType type = global\r\n+                ? PolicyType.GLOBAL_PASSWORD\r\n+                : PolicyType.PASSWORD;\r\n+        setType(type);\r\n+    }\r\n+\r\n+    public void setSpecification(final PasswordPolicySpec specification) {\r\n+        this.specification = specification;\r\n+    }\r\n+\r\n+    public PasswordPolicySpec getSpecification() {\r\n+        return specification;\r\n+    }\r\n+}\r"},{"sha":"2e73a7ee09867c74f391bedc7eeb1cde5ca07d70","filename":"common/src/main/java/org/apache/syncope/common/to/PolicyTO.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPolicyTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlSeeAlso;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.PolicyType;\r\n+\r\n+@XmlRootElement(name = \"policy\")\r\n+@XmlType\r\n+@XmlSeeAlso({AccountPolicyTO.class, PasswordPolicyTO.class, SyncPolicyTO.class})\r\n+//@JsonTypeInfo(use=Id.CLASS, include=As.PROPERTY, property=\"class\")\r\n+public abstract class PolicyTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -2903888572649721035L;\r\n+\r\n+    private long id;\r\n+\r\n+    private String description;\r\n+\r\n+    private PolicyType type;\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getDescription() {\r\n+        return description;\r\n+    }\r\n+\r\n+    public void setDescription(String description) {\r\n+        this.description = description;\r\n+    }\r\n+\r\n+    public PolicyType getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public void setType(PolicyType type) {\r\n+        this.type = type;\r\n+    }\r\n+}\r"},{"sha":"2572828d6a0eb4a4070a7f91daf3bfb128a31388","filename":"common/src/main/java/org/apache/syncope/common/to/PropagationActionClassTO.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationActionClassTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationActionClassTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationActionClassTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"propagationActionClass\")\r\n+@XmlType\r\n+public class PropagationActionClassTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 2187654394121198308L;\r\n+\r\n+    private String name;\r\n+\r\n+    public static PropagationActionClassTO instance(final String name) {\r\n+        PropagationActionClassTO instance = new PropagationActionClassTO();\r\n+        instance.setName(name);\r\n+        return instance;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"0cfc1b89e4ea0e3efd66a28021e821a2de8f1cfc","filename":"common/src/main/java/org/apache/syncope/common/to/PropagationRequestTO.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationRequestTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationRequestTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationRequestTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+/**\n+ * Propagation request on internal storage or on 0+ external resources.\n+ */\n+@XmlRootElement(name = \"propagationRequest\")\n+@XmlType\n+public class PropagationRequestTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 7601716025754543004L;\n+\n+    /**\n+     * External resources propagation is requested to.\n+     */\n+    private final Set<String> resources;\n+\n+    /**\n+     * Whether update should be performed on internal storage.\n+     */\n+    private boolean onSyncope;\n+\n+    public PropagationRequestTO() {\n+        super();\n+\n+        this.resources = new HashSet<String>();\n+    }\n+\n+    public boolean isOnSyncope() {\n+        return onSyncope;\n+    }\n+\n+    public void setOnSyncope(final boolean onSyncope) {\n+        this.onSyncope = onSyncope;\n+    }\n+\n+    @XmlElementWrapper(name = \"resources\")\n+    @XmlElement(name = \"resource\")\n+    public Set<String> getResources() {\n+        return resources;\n+    }\n+\n+    public boolean addResource(final String resource) {\n+        return this.resources.add(resource);\n+    }\n+\n+    public boolean removeResource(final String resource) {\n+        return this.resources.remove(resource);\n+    }\n+\n+    public void setResources(final Set<String> resources) {\n+        if (this.resources != resources) {\n+            this.resources.clear();\n+            if (resources != null && !resources.isEmpty()) {\n+                this.resources.addAll(resources);\n+            }\n+        }\n+    }\n+}"},{"sha":"8fb5547e911ffa7b103ac2f24e19e6c227573df8","filename":"common/src/main/java/org/apache/syncope/common/to/PropagationStatusTO.java","status":"added","additions":130,"deletions":0,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationStatusTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationStatusTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationStatusTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,130 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.PropagationTaskExecStatus;\r\n+\r\n+/**\r\n+ * Single propagation status.\r\n+ */\r\n+@XmlRootElement(name = \"propagationStatus\")\r\n+@XmlType\r\n+public class PropagationStatusTO extends AbstractBaseBean {\r\n+\r\n+    /**\r\n+     * Serial version ID.\r\n+     */\r\n+    private static final long serialVersionUID = 3921498450222857690L;\r\n+\r\n+    /**\r\n+     * Object before propagation.\r\n+     */\r\n+    private ConnObjectTO beforeObj;\r\n+\r\n+    /**\r\n+     * Object after propagation.\r\n+     */\r\n+    private ConnObjectTO afterObj;\r\n+\r\n+    /**\r\n+     * Propagated resource name.\r\n+     */\r\n+    private String resource;\r\n+\r\n+    /**\r\n+     * Propagation task execution status.\r\n+     */\r\n+    private PropagationTaskExecStatus status;\r\n+\r\n+    /**\r\n+     * After object getter.\r\n+     *\r\n+     * @return after object.\r\n+     */\r\n+    public ConnObjectTO getAfterObj() {\r\n+        return afterObj;\r\n+    }\r\n+\r\n+    /**\r\n+     * After object setter.\r\n+     *\r\n+     * @param afterObj object.\r\n+     */\r\n+    public void setAfterObj(final ConnObjectTO afterObj) {\r\n+        this.afterObj = afterObj;\r\n+    }\r\n+\r\n+    /**\r\n+     * Before object getter.\r\n+     *\r\n+     * @return before object.\r\n+     */\r\n+    public ConnObjectTO getBeforeObj() {\r\n+        return beforeObj;\r\n+    }\r\n+\r\n+    /**\r\n+     * Before object setter.\r\n+     *\r\n+     * @param beforeObj object.\r\n+     */\r\n+    public void setBeforeObj(final ConnObjectTO beforeObj) {\r\n+        this.beforeObj = beforeObj;\r\n+    }\r\n+\r\n+    /**\r\n+     * resource name getter.\r\n+     *\r\n+     * @return resource name.\r\n+     */\r\n+    public String getResource() {\r\n+        return resource;\r\n+    }\r\n+\r\n+    /**\r\n+     * Resource name setter.\r\n+     *\r\n+     * @param resource resource name\r\n+     */\r\n+    public void setResource(final String resource) {\r\n+        this.resource = resource;\r\n+    }\r\n+\r\n+    /**\r\n+     * Propagation execution status getter.\r\n+     *\r\n+     * @return status\r\n+     */\r\n+    public PropagationTaskExecStatus getStatus() {\r\n+        return status;\r\n+    }\r\n+\r\n+    /**\r\n+     * Propagation execution status setter.\r\n+     *\r\n+     * @param status propagation execution status\r\n+     */\r\n+    public void setStatus(final PropagationTaskExecStatus status) {\r\n+        this.status = status;\r\n+    }\r\n+}\r"},{"sha":"9e963c332aef86f174f2acd667db1c518674435d","filename":"common/src/main/java/org/apache/syncope/common/to/PropagationTaskTO.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTaskTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,124 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.types.AttributableType;\r\n+import org.apache.syncope.common.types.PropagationMode;\r\n+import org.apache.syncope.common.types.ResourceOperation;\r\n+\r\n+@XmlRootElement(name = \"propagationTask\")\r\n+@XmlType\r\n+public class PropagationTaskTO extends TaskTO {\r\n+\r\n+    private static final long serialVersionUID = 386450127003321197L;\r\n+\r\n+    private PropagationMode propagationMode;\r\n+\r\n+    private ResourceOperation propagationOperation;\r\n+\r\n+    private String accountId;\r\n+\r\n+    private String oldAccountId;\r\n+\r\n+    private String xmlAttributes;\r\n+\r\n+    private String resource;\r\n+\r\n+    private String objectClassName;\r\n+\r\n+    private AttributableType subjectType;\r\n+\r\n+    private Long subjectId;\r\n+\r\n+    public String getAccountId() {\r\n+        return accountId;\r\n+    }\r\n+\r\n+    public void setAccountId(String accountId) {\r\n+        this.accountId = accountId;\r\n+    }\r\n+\r\n+    public String getOldAccountId() {\r\n+        return oldAccountId;\r\n+    }\r\n+\r\n+    public void setOldAccountId(String oldAccountId) {\r\n+        this.oldAccountId = oldAccountId;\r\n+    }\r\n+\r\n+    public PropagationMode getPropagationMode() {\r\n+        return propagationMode;\r\n+    }\r\n+\r\n+    public void setPropagationMode(PropagationMode propagationMode) {\r\n+        this.propagationMode = propagationMode;\r\n+    }\r\n+\r\n+    public String getResource() {\r\n+        return resource;\r\n+    }\r\n+\r\n+    public void setResource(String resource) {\r\n+        this.resource = resource;\r\n+    }\r\n+\r\n+    public ResourceOperation getPropagationOperation() {\r\n+        return propagationOperation;\r\n+    }\r\n+\r\n+    public void setPropagationOperation(ResourceOperation propagationOperation) {\r\n+\r\n+        this.propagationOperation = propagationOperation;\r\n+    }\r\n+\r\n+    public String getXmlAttributes() {\r\n+        return xmlAttributes;\r\n+    }\r\n+\r\n+    public void setXmlAttributes(String xmlAttributes) {\r\n+        this.xmlAttributes = xmlAttributes;\r\n+    }\r\n+\r\n+    public String getObjectClassName() {\r\n+        return objectClassName;\r\n+    }\r\n+\r\n+    public void setObjectClassName(String objectClassName) {\r\n+        this.objectClassName = objectClassName;\r\n+    }\r\n+\r\n+    public AttributableType getSubjectType() {\r\n+        return subjectType;\r\n+    }\r\n+\r\n+    public void setSubjectType(AttributableType subjectType) {\r\n+        this.subjectType = subjectType;\r\n+    }\r\n+\r\n+    public Long getSubjectId() {\r\n+        return subjectId;\r\n+    }\r\n+\r\n+    public void setSubjectId(Long subjectId) {\r\n+        this.subjectId = subjectId;\r\n+    }\r\n+}\r"},{"sha":"dfcb6bebc27d1b7f199f3574d0f02938e30be0b0","filename":"common/src/main/java/org/apache/syncope/common/to/ReportExecTO.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportExecTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,40 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+@XmlRootElement(name = \"executionReport\")\r\n+@XmlType\r\n+public class ReportExecTO extends AbstractExecTO {\r\n+\r\n+    private static final long serialVersionUID = -1025555939724089215L;\r\n+\r\n+    private long report;\r\n+\r\n+    public long getReport() {\r\n+        return report;\r\n+    }\r\n+\r\n+    public void setReport(long report) {\r\n+        this.report = report;\r\n+    }\r\n+\r\n+}\r"},{"sha":"62f830c2b3cd3ee5481e2ced5023ddc143cddcb8","filename":"common/src/main/java/org/apache/syncope/common/to/ReportTO.java","status":"added","additions":185,"deletions":0,"changes":185,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,185 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Date;\r\n+import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlSeeAlso;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.report.AbstractReportletConf;\r\n+import org.apache.syncope.common.report.StaticReportletConf;\r\n+import org.apache.syncope.common.report.UserReportletConf;\r\n+\r\n+@XmlRootElement(name = \"report\")\r\n+@XmlType\r\n+@XmlSeeAlso({UserReportletConf.class, StaticReportletConf.class})\r\n+public class ReportTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 5274568072084814410L;\r\n+\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    private List<AbstractReportletConf> reportletConfs;\r\n+\r\n+    private String cronExpression;\r\n+\r\n+    private List<ReportExecTO> executions;\r\n+\r\n+    private String latestExecStatus;\r\n+\r\n+    private Date lastExec;\r\n+\r\n+    private Date nextExec;\r\n+\r\n+    private Date startDate;\r\n+\r\n+    private Date endDate;\r\n+\r\n+    public ReportTO() {\r\n+        super();\r\n+\r\n+        reportletConfs = new ArrayList<AbstractReportletConf>();\r\n+        executions = new ArrayList<ReportExecTO>();\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public boolean addReportletConf(AbstractReportletConf reportlet) {\r\n+        return this.reportletConfs.add(reportlet);\r\n+    }\r\n+\r\n+    public boolean removeReportletConf(AbstractReportletConf reportlet) {\r\n+        return this.reportletConfs.remove(reportlet);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"reportletConfigurations\")\r\n+    @XmlElement(name=\"reportletconf\")\r\n+    public List<AbstractReportletConf> getReportletConfs() {\r\n+        return reportletConfs;\r\n+    }\r\n+\r\n+    public void setReportletConfs(List<AbstractReportletConf> reportlets) {\r\n+        this.reportletConfs = reportlets;\r\n+    }\r\n+\r\n+    public String getCronExpression() {\r\n+        return cronExpression;\r\n+    }\r\n+\r\n+    public void setCronExpression(String cronExpression) {\r\n+        this.cronExpression = cronExpression;\r\n+    }\r\n+\r\n+    public boolean addExecution(ReportExecTO execution) {\r\n+        return executions.add(execution);\r\n+    }\r\n+\r\n+    public boolean removeExecution(ReportExecTO execution) {\r\n+        return executions.remove(execution);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"executions\")\r\n+    @XmlElement(name = \"execution\")\r\n+    public List<ReportExecTO> getExecutions() {\r\n+        return executions;\r\n+    }\r\n+\r\n+    public void setExecutions(List<ReportExecTO> executions) {\r\n+        this.executions = executions;\r\n+    }\r\n+\r\n+    public String getLatestExecStatus() {\r\n+        return latestExecStatus;\r\n+    }\r\n+\r\n+    public void setLatestExecStatus(String latestExecStatus) {\r\n+        this.latestExecStatus = latestExecStatus;\r\n+    }\r\n+\r\n+    public Date getLastExec() {\r\n+        return lastExec == null\r\n+                ? null\r\n+                : new Date(lastExec.getTime());\r\n+    }\r\n+\r\n+    public void setLastExec(Date lastExec) {\r\n+        if (lastExec != null) {\r\n+            this.lastExec = new Date(lastExec.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public Date getNextExec() {\r\n+        return nextExec == null\r\n+                ? null\r\n+                : new Date(nextExec.getTime());\r\n+    }\r\n+\r\n+    public void setNextExec(Date nextExec) {\r\n+        if (nextExec != null) {\r\n+            this.nextExec = new Date(nextExec.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public Date getStartDate() {\r\n+        return startDate == null\r\n+                ? null\r\n+                : new Date(startDate.getTime());\r\n+    }\r\n+\r\n+    public void setStartDate(Date startDate) {\r\n+        if (startDate != null) {\r\n+            this.startDate = new Date(startDate.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public Date getEndDate() {\r\n+        return endDate == null\r\n+                ? null\r\n+                : new Date(endDate.getTime());\r\n+    }\r\n+\r\n+    public void setEndDate(Date endDate) {\r\n+        if (endDate != null) {\r\n+            this.endDate = new Date(endDate.getTime());\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"940e734901cbf1ece3b8a73973642eda7fbdf867","filename":"common/src/main/java/org/apache/syncope/common/to/ResourceTO.java","status":"added","additions":267,"deletions":0,"changes":267,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,267 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.ConnConfProperty;\r\n+import org.apache.syncope.common.types.PropagationMode;\r\n+import org.apache.syncope.common.types.TraceLevel;\r\n+\r\n+@XmlRootElement(name = \"resource\")\r\n+@XmlType\r\n+public class ResourceTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -9193551354041698963L;\r\n+\r\n+    /**\r\n+     * The resource identifier is the name.\r\n+     */\r\n+    private String name;\r\n+\r\n+    /**\r\n+     * The resource type is identified by the associated connector.\r\n+     */\r\n+    private Long connectorId;\r\n+\r\n+    /**\r\n+     * Convenience information: display name for the connector id.\r\n+     */\r\n+    private String connectorDisplayName;\r\n+\r\n+    private MappingTO umapping;\r\n+\r\n+    private MappingTO rmapping;\r\n+\r\n+    private boolean propagationPrimary;\r\n+\r\n+    private int propagationPriority;\r\n+\r\n+    private boolean randomPwdIfNotProvided;\r\n+\r\n+    private PropagationMode propagationMode;\r\n+\r\n+    private boolean enforceMandatoryCondition;\r\n+\r\n+    private TraceLevel createTraceLevel;\r\n+\r\n+    private TraceLevel updateTraceLevel;\r\n+\r\n+    private TraceLevel deleteTraceLevel;\r\n+\r\n+    private TraceLevel syncTraceLevel;\r\n+\r\n+    private Long passwordPolicy;\r\n+\r\n+    private Long accountPolicy;\r\n+\r\n+    private Long syncPolicy;\r\n+\r\n+    private Set<ConnConfProperty> connConfProperties;\r\n+\r\n+    private String usyncToken;\r\n+\r\n+    private String rsyncToken;\r\n+\r\n+    private String propagationActionsClassName;\r\n+\r\n+    public ResourceTO() {\r\n+        super();\r\n+\r\n+        connConfProperties = new HashSet<ConnConfProperty>();\r\n+        propagationMode = PropagationMode.TWO_PHASES;\r\n+        propagationPriority = 0;\r\n+\r\n+        createTraceLevel = TraceLevel.ALL;\r\n+        updateTraceLevel = TraceLevel.ALL;\r\n+        deleteTraceLevel = TraceLevel.ALL;\r\n+        syncTraceLevel = TraceLevel.ALL;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public boolean isEnforceMandatoryCondition() {\r\n+        return enforceMandatoryCondition;\r\n+    }\r\n+\r\n+    public void setEnforceMandatoryCondition(boolean enforceMandatoryCondition) {\r\n+        this.enforceMandatoryCondition = enforceMandatoryCondition;\r\n+    }\r\n+\r\n+    public Long getConnectorId() {\r\n+        return connectorId;\r\n+    }\r\n+\r\n+    public void setConnectorId(Long connectorId) {\r\n+        this.connectorId = connectorId;\r\n+    }\r\n+\r\n+    public String getConnectorDisplayName() {\r\n+        return connectorDisplayName;\r\n+    }\r\n+\r\n+    public void setConnectorDisplayName(String connectorDisplayName) {\r\n+        this.connectorDisplayName = connectorDisplayName;\r\n+    }\r\n+\r\n+    public MappingTO getUmapping() {\r\n+        return umapping;\r\n+    }\r\n+\r\n+    public void setUmapping(MappingTO umapping) {\r\n+        this.umapping = umapping;\r\n+    }\r\n+\r\n+    public MappingTO getRmapping() {\r\n+        return rmapping;\r\n+    }\r\n+\r\n+    public void setRmapping(MappingTO rmapping) {\r\n+        this.rmapping = rmapping;\r\n+    }\r\n+\r\n+    public boolean isPropagationPrimary() {\r\n+        return propagationPrimary;\r\n+    }\r\n+\r\n+    public void setPropagationPrimary(boolean propagationPrimary) {\r\n+        this.propagationPrimary = propagationPrimary;\r\n+    }\r\n+\r\n+    public int getPropagationPriority() {\r\n+        return propagationPriority;\r\n+    }\r\n+\r\n+    public void setPropagationPriority(int propagationPriority) {\r\n+        this.propagationPriority = propagationPriority;\r\n+    }\r\n+\r\n+    public boolean isRandomPwdIfNotProvided() {\r\n+        return randomPwdIfNotProvided;\r\n+    }\r\n+\r\n+    public void setRandomPwdIfNotProvided(boolean randomPwdIfNotProvided) {\r\n+        this.randomPwdIfNotProvided = randomPwdIfNotProvided;\r\n+    }\r\n+\r\n+    public PropagationMode getPropagationMode() {\r\n+        return propagationMode;\r\n+    }\r\n+\r\n+    public void setPropagationMode(PropagationMode propagationMode) {\r\n+        this.propagationMode = propagationMode;\r\n+    }\r\n+\r\n+    public TraceLevel getCreateTraceLevel() {\r\n+        return createTraceLevel;\r\n+    }\r\n+\r\n+    public void setCreateTraceLevel(TraceLevel createTraceLevel) {\r\n+        this.createTraceLevel = createTraceLevel;\r\n+    }\r\n+\r\n+    public TraceLevel getDeleteTraceLevel() {\r\n+        return deleteTraceLevel;\r\n+    }\r\n+\r\n+    public void setDeleteTraceLevel(TraceLevel deleteTraceLevel) {\r\n+        this.deleteTraceLevel = deleteTraceLevel;\r\n+    }\r\n+\r\n+    public TraceLevel getUpdateTraceLevel() {\r\n+        return updateTraceLevel;\r\n+    }\r\n+\r\n+    public void setUpdateTraceLevel(TraceLevel updateTraceLevel) {\r\n+        this.updateTraceLevel = updateTraceLevel;\r\n+    }\r\n+\r\n+    public Long getPasswordPolicy() {\r\n+        return passwordPolicy;\r\n+    }\r\n+\r\n+    public void setPasswordPolicy(Long passwordPolicy) {\r\n+        this.passwordPolicy = passwordPolicy;\r\n+    }\r\n+\r\n+    public Long getAccountPolicy() {\r\n+        return accountPolicy;\r\n+    }\r\n+\r\n+    public void setAccountPolicy(Long accountPolicy) {\r\n+        this.accountPolicy = accountPolicy;\r\n+    }\r\n+\r\n+    public Long getSyncPolicy() {\r\n+        return syncPolicy;\r\n+    }\r\n+\r\n+    public void setSyncPolicy(Long syncPolicy) {\r\n+        this.syncPolicy = syncPolicy;\r\n+    }\r\n+\r\n+    public Set<ConnConfProperty> getConnConfProperties() {\r\n+        return connConfProperties;\r\n+    }\r\n+\r\n+    public void setConnectorConfigurationProperties(final Set<ConnConfProperty> connConfProperties) {\r\n+        this.connConfProperties = connConfProperties;\r\n+    }\r\n+\r\n+    public TraceLevel getSyncTraceLevel() {\r\n+        return syncTraceLevel;\r\n+    }\r\n+\r\n+    public void setSyncTraceLevel(final TraceLevel syncTraceLevel) {\r\n+        this.syncTraceLevel = syncTraceLevel;\r\n+    }\r\n+\r\n+    public String getUsyncToken() {\r\n+        return usyncToken;\r\n+    }\r\n+\r\n+    public void setUsyncToken(final String syncToken) {\r\n+        this.usyncToken = syncToken;\r\n+    }\r\n+\r\n+    public String getRsyncToken() {\r\n+        return rsyncToken;\r\n+    }\r\n+\r\n+    public void setRsyncToken(final String syncToken) {\r\n+        this.rsyncToken = syncToken;\r\n+    }\r\n+\r\n+    public String getPropagationActionsClassName() {\r\n+        return propagationActionsClassName;\r\n+    }\r\n+\r\n+    public void setPropagationActionsClassName(final String propagationActionsClassName) {\r\n+        this.propagationActionsClassName = propagationActionsClassName;\r\n+    }\r\n+}\r"},{"sha":"6db453ca9783292b9568394e936e69039a142e27","filename":"common/src/main/java/org/apache/syncope/common/to/RoleTO.java","status":"added","additions":215,"deletions":0,"changes":215,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FRoleTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,215 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.codehaus.jackson.annotate.JsonIgnoreProperties;\r\n+\r\n+@XmlRootElement(name = \"role\")\r\n+@XmlType\r\n+@JsonIgnoreProperties({\"displayName\"})\r\n+public class RoleTO extends AbstractAttributableTO {\r\n+\r\n+    private static final long serialVersionUID = -7785920258290147542L;\r\n+\r\n+    private String name;\r\n+\r\n+    private long parent;\r\n+\r\n+    private Long userOwner;\r\n+\r\n+    private Long roleOwner;\r\n+\r\n+    private boolean inheritOwner;\r\n+\r\n+    private boolean inheritAttributes;\r\n+\r\n+    private boolean inheritDerivedAttributes;\r\n+\r\n+    private boolean inheritVirtualAttributes;\r\n+\r\n+    private boolean inheritPasswordPolicy;\r\n+\r\n+    private boolean inheritAccountPolicy;\r\n+\r\n+    private final List<String> entitlements;\r\n+\r\n+    private Long passwordPolicy;\r\n+\r\n+    private Long accountPolicy;\r\n+\r\n+    public RoleTO() {\r\n+        entitlements = new ArrayList<String>();\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public long getParent() {\r\n+        return parent;\r\n+    }\r\n+\r\n+    public void setParent(final long parent) {\r\n+        this.parent = parent;\r\n+    }\r\n+\r\n+    public Long getUserOwner() {\r\n+        return userOwner;\r\n+    }\r\n+\r\n+    public void setUserOwner(final Long userOwner) {\r\n+        this.userOwner = userOwner;\r\n+    }\r\n+\r\n+    public Long getRoleOwner() {\r\n+        return roleOwner;\r\n+    }\r\n+\r\n+    public void setRoleOwner(final Long roleOwner) {\r\n+        this.roleOwner = roleOwner;\r\n+    }\r\n+\r\n+    public boolean isInheritOwner() {\r\n+        return inheritOwner;\r\n+    }\r\n+\r\n+    public void setInheritOwner(final boolean inheritOwner) {\r\n+        this.inheritOwner = inheritOwner;\r\n+    }\r\n+\r\n+    public boolean isInheritAttributes() {\r\n+        return inheritAttributes;\r\n+    }\r\n+\r\n+    public void setInheritAttributes(final boolean inheritAttributes) {\r\n+        this.inheritAttributes = inheritAttributes;\r\n+    }\r\n+\r\n+    public boolean isInheritDerivedAttributes() {\r\n+        return inheritDerivedAttributes;\r\n+    }\r\n+\r\n+    public void setInheritDerivedAttributes(final boolean inheritDerivedAttributes) {\r\n+\r\n+        this.inheritDerivedAttributes = inheritDerivedAttributes;\r\n+    }\r\n+\r\n+    public boolean isInheritVirtualAttributes() {\r\n+        return inheritVirtualAttributes;\r\n+    }\r\n+\r\n+    public void setInheritVirtualAttributes(final boolean inheritVirtualAttributes) {\r\n+        this.inheritVirtualAttributes = inheritVirtualAttributes;\r\n+    }\r\n+\r\n+    public boolean addEntitlement(final String entitlement) {\r\n+        return entitlements.add(entitlement);\r\n+    }\r\n+\r\n+    public boolean removeEntitlement(final String entitlement) {\r\n+        return entitlements.remove(entitlement);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"entitlements\")\r\n+    @XmlElement(name = \"entitlement\")\r\n+    public List<String> getEntitlements() {\r\n+        return entitlements;\r\n+    }\r\n+\r\n+    public void setEntitlements(final List<String> entitlements) {\r\n+        if (this.entitlements != entitlements) {\r\n+            this.entitlements.clear();\r\n+            if (entitlements != null && !entitlements.isEmpty()) {\r\n+                this.entitlements.addAll(entitlements);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public Long getPasswordPolicy() {\r\n+        return passwordPolicy;\r\n+    }\r\n+\r\n+    public void setPasswordPolicy(final Long passwordPolicy) {\r\n+        this.passwordPolicy = passwordPolicy;\r\n+    }\r\n+\r\n+    public boolean isInheritPasswordPolicy() {\r\n+        return inheritPasswordPolicy;\r\n+    }\r\n+\r\n+    /**\r\n+     * Specify if password policy must be inherited. In this case eventual passwordPolicy occurrence will be ignored.\r\n+     *\r\n+     * @param inheritPasswordPolicy 'true' to inherit policy, false otherwise.\r\n+     */\r\n+    public void setInheritPasswordPolicy(final boolean inheritPasswordPolicy) {\r\n+        this.inheritPasswordPolicy = inheritPasswordPolicy;\r\n+    }\r\n+\r\n+    public Long getAccountPolicy() {\r\n+        return accountPolicy;\r\n+    }\r\n+\r\n+    public void setAccountPolicy(final Long accountPolicy) {\r\n+        this.accountPolicy = accountPolicy;\r\n+    }\r\n+\r\n+    public boolean isInheritAccountPolicy() {\r\n+        return inheritAccountPolicy;\r\n+    }\r\n+\r\n+    /**\r\n+     * Specify if account policy must be inherited. In this case eventual accountPolicy occurrence will be ignored.\r\n+     *\r\n+     * @param inheritAccountPolicy 'true' to inherit policy, false otherwise.\r\n+     */\r\n+    public void setInheritAccountPolicy(final boolean inheritAccountPolicy) {\r\n+        this.inheritAccountPolicy = inheritAccountPolicy;\r\n+    }\r\n+\r\n+    public String getDisplayName() {\r\n+        return getId() + \" \" + getName();\r\n+    }\r\n+\r\n+    public static long fromDisplayName(final String displayName) {\r\n+        long result = 0;\r\n+        if (displayName != null && !displayName.isEmpty() && displayName.indexOf(' ') != -1) {\r\n+            try {\r\n+                result = Long.valueOf(displayName.split(\" \")[0]);\r\n+            } catch (NumberFormatException e) {\r\n+                // just to avoid PMD warning about \"empty catch block\"\r\n+                result = 0;\r\n+            }\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+}\r"},{"sha":"ba0e576109aa81eb818be69a9ec0ada7d1861121","filename":"common/src/main/java/org/apache/syncope/common/to/SchedTaskTO.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchedTaskTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,99 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.Date;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+@XmlRootElement(name = \"schedTask\")\r\n+@XmlType\r\n+public class SchedTaskTO extends TaskTO {\r\n+\r\n+    private static final long serialVersionUID = -5722284116974636425L;\r\n+\r\n+    private String cronExpression;\r\n+\r\n+    private String jobClassName;\r\n+\r\n+    private String name;\r\n+\r\n+    private String description;\r\n+\r\n+    private Date lastExec;\r\n+\r\n+    private Date nextExec;\r\n+\r\n+    public String getCronExpression() {\r\n+        return cronExpression;\r\n+    }\r\n+\r\n+    public void setCronExpression(String cronExpression) {\r\n+        this.cronExpression = cronExpression;\r\n+    }\r\n+\r\n+    public String getJobClassName() {\r\n+        return jobClassName;\r\n+    }\r\n+\r\n+    public void setJobClassName(String jobClassName) {\r\n+        this.jobClassName = jobClassName;\r\n+    }\r\n+\r\n+    public Date getLastExec() {\r\n+        return lastExec == null\r\n+                ? null\r\n+                : new Date(lastExec.getTime());\r\n+    }\r\n+\r\n+    public void setLastExec(Date lastExec) {\r\n+        if (lastExec != null) {\r\n+            this.lastExec = new Date(lastExec.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public Date getNextExec() {\r\n+        return nextExec == null\r\n+                ? null\r\n+                : new Date(nextExec.getTime());\r\n+    }\r\n+\r\n+    public void setNextExec(Date nextExec) {\r\n+        if (nextExec != null) {\r\n+            this.nextExec = new Date(nextExec.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public String getDescription() {\r\n+        return description;\r\n+    }\r\n+\r\n+    public void setDescription(String description) {\r\n+        this.description = description;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"c5022860e9588594e92481d7e8c62cbf34356242","filename":"common/src/main/java/org/apache/syncope/common/to/SchemaTO.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,125 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.commons.lang.StringUtils;\r\n+import org.apache.syncope.common.types.AttributeSchemaType;\r\n+\r\n+@XmlRootElement(name = \"schema\")\r\n+@XmlType\r\n+//@JsonTypeInfo(use=Id.CLASS, include=As.PROPERTY, property=\"class\")\r\n+public class SchemaTO extends AbstractSchemaTO {\r\n+\r\n+    private static final long serialVersionUID = -8133983392476990308L;\r\n+\r\n+    private AttributeSchemaType type = AttributeSchemaType.String;\r\n+\r\n+    private String mandatoryCondition;\r\n+\r\n+    private String enumerationValues;\r\n+\r\n+    private String enumerationKeys;\r\n+\r\n+    private boolean multivalue;\r\n+\r\n+    private boolean uniqueConstraint;\r\n+\r\n+    private boolean readonly;\r\n+\r\n+    private String conversionPattern;\r\n+\r\n+    private String validatorClass;\r\n+\r\n+    public String getConversionPattern() {\r\n+        return conversionPattern;\r\n+    }\r\n+\r\n+    public void setConversionPattern(final String conversionPattern) {\r\n+        this.conversionPattern = conversionPattern;\r\n+    }\r\n+\r\n+    public String getMandatoryCondition() {\r\n+        return StringUtils.isNotBlank(mandatoryCondition)\r\n+                ? mandatoryCondition\r\n+                : \"false\";\r\n+    }\r\n+\r\n+    public void setMandatoryCondition(final String mandatoryCondition) {\r\n+        this.mandatoryCondition = mandatoryCondition;\r\n+    }\r\n+\r\n+    public String getEnumerationValues() {\r\n+        return enumerationValues;\r\n+    }\r\n+\r\n+    public void setEnumerationValues(final String enumerationValues) {\r\n+        this.enumerationValues = enumerationValues;\r\n+    }\r\n+\r\n+    public String getEnumerationKeys() {\r\n+        return enumerationKeys;\r\n+    }\r\n+\r\n+    public void setEnumerationKeys(final String enumerationKeys) {\r\n+        this.enumerationKeys = enumerationKeys;\r\n+    }\r\n+\r\n+    public boolean isMultivalue() {\r\n+        return multivalue;\r\n+    }\r\n+\r\n+    public void setMultivalue(final boolean multivalue) {\r\n+        this.multivalue = multivalue;\r\n+    }\r\n+\r\n+    public boolean isUniqueConstraint() {\r\n+        return uniqueConstraint;\r\n+    }\r\n+\r\n+    public void setUniqueConstraint(final boolean uniqueConstraint) {\r\n+        this.uniqueConstraint = uniqueConstraint;\r\n+    }\r\n+\r\n+    public boolean isReadonly() {\r\n+        return readonly;\r\n+    }\r\n+\r\n+    public void setReadonly(final boolean readonly) {\r\n+        this.readonly = readonly;\r\n+    }\r\n+\r\n+    public AttributeSchemaType getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public void setType(final AttributeSchemaType type) {\r\n+        this.type = type;\r\n+    }\r\n+\r\n+    public String getValidatorClass() {\r\n+        return validatorClass;\r\n+    }\r\n+\r\n+    public void setValidatorClass(final String validatorClass) {\r\n+        this.validatorClass = validatorClass;\r\n+    }\r\n+}\r"},{"sha":"cdc8a2cf07ba83df2d31ace57ce444767f7fb5d8","filename":"common/src/main/java/org/apache/syncope/common/to/SyncActionClassTO.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncActionClassTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncActionClassTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncActionClassTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"syncActionClass\")\r\n+@XmlType\r\n+public class SyncActionClassTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -3379629287646343560L;\r\n+\r\n+    private String name;\r\n+\r\n+    public static SyncActionClassTO instance(final String name) {\r\n+        SyncActionClassTO instance = new SyncActionClassTO();\r\n+        instance.setName(name);\r\n+        return instance;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"dbc2e4ff5a0c829bf5de98299d505b433cf32875","filename":"common/src/main/java/org/apache/syncope/common/to/SyncPolicyTO.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.types.PolicyType;\r\n+import org.apache.syncope.common.types.SyncPolicySpec;\r\n+\r\n+@XmlRootElement(name = \"syncPolicy\")\r\n+@XmlType\r\n+public class SyncPolicyTO extends PolicyTO {\r\n+\r\n+    private static final long serialVersionUID = 993024634238024242L;\r\n+\r\n+    private SyncPolicySpec specification;\r\n+\r\n+    public SyncPolicyTO() {\r\n+        this(false);\r\n+    }\r\n+\r\n+    public SyncPolicyTO(boolean global) {\r\n+        super();\r\n+\r\n+        PolicyType type = global\r\n+                ? PolicyType.GLOBAL_SYNC\r\n+                : PolicyType.SYNC;\r\n+        setType(type);\r\n+    }\r\n+\r\n+    public void setSpecification(final SyncPolicySpec specification) {\r\n+        this.specification = specification;\r\n+    }\r\n+\r\n+    public SyncPolicySpec getSpecification() {\r\n+        return specification;\r\n+    }\r\n+}\r"},{"sha":"b6872fea8229a437dc6e83643dbe586da45aa7dd","filename":"common/src/main/java/org/apache/syncope/common/to/SyncTaskTO.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncTaskTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,119 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+@XmlRootElement(name = \"syncTask\")\r\n+@XmlType\r\n+public class SyncTaskTO extends SchedTaskTO {\r\n+\r\n+    private static final long serialVersionUID = -2143537546915809016L;\r\n+\r\n+    private String resource;\r\n+\r\n+    private UserTO userTemplate;\r\n+\r\n+    private RoleTO roleTemplate;\r\n+\r\n+    private boolean performCreate;\r\n+\r\n+    private boolean performUpdate;\r\n+\r\n+    private boolean performDelete;\r\n+\r\n+    private boolean syncStatus;\r\n+\r\n+    private boolean fullReconciliation;\r\n+\r\n+    private String actionsClassName;\r\n+\r\n+    public UserTO getUserTemplate() {\r\n+        return userTemplate;\r\n+    }\r\n+\r\n+    public void setUserTemplate(UserTO userTemplate) {\r\n+        this.userTemplate = userTemplate;\r\n+    }\r\n+\r\n+    public RoleTO getRoleTemplate() {\r\n+        return roleTemplate;\r\n+    }\r\n+\r\n+    public void setRoleTemplate(RoleTO roleTemplate) {\r\n+        this.roleTemplate = roleTemplate;\r\n+    }\r\n+\r\n+    public String getResource() {\r\n+        return resource;\r\n+    }\r\n+\r\n+    public void setResource(String resource) {\r\n+        this.resource = resource;\r\n+    }\r\n+\r\n+    public boolean isPerformCreate() {\r\n+        return performCreate;\r\n+    }\r\n+\r\n+    public void setPerformCreate(boolean performCreate) {\r\n+        this.performCreate = performCreate;\r\n+    }\r\n+\r\n+    public boolean isPerformUpdate() {\r\n+        return performUpdate;\r\n+    }\r\n+\r\n+    public void setPerformUpdate(boolean performUpdate) {\r\n+        this.performUpdate = performUpdate;\r\n+    }\r\n+\r\n+    public boolean isPerformDelete() {\r\n+        return performDelete;\r\n+    }\r\n+\r\n+    public void setPerformDelete(boolean performDelete) {\r\n+        this.performDelete = performDelete;\r\n+    }\r\n+\r\n+    public boolean isSyncStatus() {\r\n+        return syncStatus;\r\n+    }\r\n+\r\n+    public void setSyncStatus(boolean syncStatus) {\r\n+        this.syncStatus = syncStatus;\r\n+    }\r\n+\r\n+    public boolean isFullReconciliation() {\r\n+        return fullReconciliation;\r\n+    }\r\n+\r\n+    public void setFullReconciliation(boolean fullReconciliation) {\r\n+        this.fullReconciliation = fullReconciliation;\r\n+    }\r\n+\r\n+    public String getActionsClassName() {\r\n+        return actionsClassName;\r\n+    }\r\n+\r\n+    public void setActionsClassName(String actionsClassName) {\r\n+        this.actionsClassName = actionsClassName;\r\n+    }\r\n+}\r"},{"sha":"16a6d53bbb9ebad75c632f5214e958cbf7094692","filename":"common/src/main/java/org/apache/syncope/common/to/TaskExecTO.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskExecTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+@XmlRootElement(name = \"taskExecution\")\r\n+@XmlType\r\n+public class TaskExecTO extends AbstractExecTO {\r\n+\r\n+    private static final long serialVersionUID = -5401795154606268973L;\r\n+\r\n+    private long task;\r\n+\r\n+    public long getTask() {\r\n+        return task;\r\n+    }\r\n+\r\n+    public void setTask(long task) {\r\n+        this.task = task;\r\n+    }\r\n+}\r"},{"sha":"86e1e1d774301fd0b4f94bb82f127e19b57d567d","filename":"common/src/main/java/org/apache/syncope/common/to/TaskTO.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,118 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Date;\r\n+import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlSeeAlso;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"task\")\r\n+@XmlType\r\n+@XmlSeeAlso({ SyncTaskTO.class, NotificationTaskTO.class, SyncTaskTO.class,\r\n+    SchedTaskTO.class, PropagationTaskTO.class })\r\n+\r\n+/* This will help CXF marshalling but is incompatible with spring services \r\n+@JsonTypeInfo(use=Id.NAME, include=As.PROPERTY, property=\"type\")\r\n+@JsonSubTypes({\r\n+    @JsonSubTypes.Type(value=NotificationTaskTO.class, name=\"notificationTask\"),\r\n+    @JsonSubTypes.Type(value=PropagationTaskTO.class, name=\"propagationTask\"),\r\n+    @JsonSubTypes.Type(value=SchedTaskTO.class, name=\"schedTask\"),\r\n+    @JsonSubTypes.Type(value=SyncTaskTO.class, name=\"syncTask\")\r\n+})\r\n+*/\r\n+public abstract class TaskTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 386450127003321197L;\r\n+\r\n+    private long id;\r\n+\r\n+    private String latestExecStatus;\r\n+\r\n+    private List<TaskExecTO> executions = new ArrayList<TaskExecTO>();\r\n+\r\n+    private Date startDate;\r\n+\r\n+    private Date endDate;\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getLatestExecStatus() {\r\n+        return latestExecStatus;\r\n+    }\r\n+\r\n+    public void setLatestExecStatus(String latestExecStatus) {\r\n+        this.latestExecStatus = latestExecStatus;\r\n+    }\r\n+\r\n+    public boolean addExecution(TaskExecTO execution) {\r\n+        return executions.add(execution);\r\n+    }\r\n+\r\n+    public boolean removeExecution(TaskExecTO execution) {\r\n+        return executions.remove(execution);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"excecutions\")\r\n+    @XmlElement(name = \"excecution\")\r\n+    public List<TaskExecTO> getExecutions() {\r\n+        return executions;\r\n+    }\r\n+\r\n+    public void setExecutions(List<TaskExecTO> executions) {\r\n+        this.executions = executions;\r\n+    }\r\n+\r\n+    public Date getStartDate() {\r\n+        return startDate == null\r\n+                ? null\r\n+                : new Date(startDate.getTime());\r\n+    }\r\n+\r\n+    public void setStartDate(Date startDate) {\r\n+        if (startDate != null) {\r\n+            this.startDate = new Date(startDate.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public Date getEndDate() {\r\n+        return endDate == null\r\n+                ? null\r\n+                : new Date(endDate.getTime());\r\n+    }\r\n+\r\n+    public void setEndDate(Date endDate) {\r\n+        if (endDate != null) {\r\n+            this.endDate = new Date(endDate.getTime());\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"cecc952f3c6c1ef8be1b33c5136a904c30537b19","filename":"common/src/main/java/org/apache/syncope/common/to/UserRequestOptionsTO.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestOptionsTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestOptionsTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestOptionsTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlRootElement\n+public class UserRequestOptionsTO {\n+    private boolean createAllowed;\n+\n+    public UserRequestOptionsTO(boolean createAllowed) {\n+        super();\n+        this.createAllowed = createAllowed;\n+    }\n+\n+    public boolean isCreateAllowed() {\n+        return createAllowed;\n+    }\n+}"},{"sha":"b20fa08e4d2eafcbf5ea02c774164a3ffe2d4831","filename":"common/src/main/java/org/apache/syncope/common/to/UserRequestTO.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,119 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.mod.UserMod;\r\n+import org.apache.syncope.common.types.UserRequestType;\r\n+\r\n+@XmlRootElement(name = \"userRequest\")\r\n+@XmlType\r\n+public class UserRequestTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 1228351243795629329L;\r\n+\r\n+    private long id;\r\n+\r\n+    private UserTO userTO;\r\n+\r\n+    private UserMod userMod;\r\n+\r\n+    private Long userId;\r\n+\r\n+    private UserRequestType type;\r\n+    \r\n+    public UserRequestTO() {\r\n+    }\r\n+\r\n+    /**\r\n+     * Request to create a user\r\n+     * @param userTO\r\n+     */\r\n+    public UserRequestTO(UserTO userTO) {\r\n+        this.type = UserRequestType.CREATE;\r\n+        this.userTO = userTO;\r\n+    }\r\n+\r\n+    /**\r\n+     * Request to update a user\r\n+     * @param userMod\r\n+     */\r\n+    public UserRequestTO(UserMod userMod) {\r\n+        this.userMod = userMod;\r\n+        this.type = UserRequestType.UPDATE;\r\n+    }\r\n+\r\n+    /**\r\n+     * Request to delete a user\r\n+     * @param userId\r\n+     */\r\n+    public UserRequestTO(long userId) {\r\n+        this.type = UserRequestType.DELETE;\r\n+        this.userId = userId;\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public UserRequestType getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public void setType(UserRequestType type) {\r\n+        this.type = type;\r\n+    }\r\n+\r\n+    public UserTO getUserTO() {\r\n+        return type != UserRequestType.CREATE\r\n+                ? null\r\n+                : userTO;\r\n+    }\r\n+\r\n+    public void setUserTO(UserTO userTO) {\r\n+        this.userTO = userTO;\r\n+    }\r\n+\r\n+    public UserMod getUserMod() {\r\n+        return type != UserRequestType.UPDATE\r\n+                ? null\r\n+                : userMod;\r\n+    }\r\n+\r\n+    public void setUserMod(UserMod userMod) {\r\n+        this.userMod = userMod;\r\n+    }\r\n+\r\n+    public Long getUserId() {\r\n+        return type != UserRequestType.DELETE\r\n+                ? null\r\n+                : userId;\r\n+    }\r\n+\r\n+    public void setUserId(Long userId) {\r\n+        this.userId = userId;\r\n+    }\r\n+}\r"},{"sha":"83b10597e088574badbf63710aa9c9e942959560","filename":"common/src/main/java/org/apache/syncope/common/to/UserTO.java","status":"added","additions":189,"deletions":0,"changes":189,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,189 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.lang.reflect.Field;\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+import org.apache.commons.lang.builder.ReflectionToStringBuilder;\r\n+import org.apache.commons.lang.builder.ToStringStyle;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+@XmlRootElement(name = \"user\")\r\n+@XmlType\r\n+public class UserTO extends AbstractAttributableTO {\r\n+\r\n+    private static final long serialVersionUID = 7791304495192615740L;\r\n+\r\n+    private String password;\r\n+\r\n+    private List<MembershipTO> memberships;\r\n+\r\n+    private String status;\r\n+\r\n+    private String token;\r\n+\r\n+    private Date tokenExpireTime;\r\n+\r\n+    private String username;\r\n+\r\n+    private Date lastLoginDate;\r\n+\r\n+    private Date creationDate;\r\n+\r\n+    private Date changePwdDate;\r\n+\r\n+    private Integer failedLogins;\r\n+\r\n+    public UserTO() {\r\n+        super();\r\n+\r\n+        memberships = new ArrayList<MembershipTO>();\r\n+    }\r\n+\r\n+    public String getPassword() {\r\n+        return password;\r\n+    }\r\n+\r\n+    public void setPassword(String password) {\r\n+        this.password = password;\r\n+    }\r\n+\r\n+    public boolean addMembership(MembershipTO membershipTO) {\r\n+        return memberships.add(membershipTO);\r\n+    }\r\n+\r\n+    public boolean removeMembership(MembershipTO membershipTO) {\r\n+        return memberships.remove(membershipTO);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"memberships\")\r\n+    @XmlElement(name = \"membership\")\r\n+    public List<MembershipTO> getMemberships() {\r\n+        return memberships;\r\n+    }\r\n+\r\n+    public void setMemberships(List<MembershipTO> memberships) {\r\n+        this.memberships = memberships;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public Map<Long, MembershipTO> getMembershipMap() {\r\n+        Map<Long, MembershipTO> result;\r\n+\r\n+        if (getMemberships() == null) {\r\n+            result = Collections.emptyMap();\r\n+        } else {\r\n+            result = new HashMap<Long, MembershipTO>(getMemberships().size());\r\n+            for (MembershipTO membership : getMemberships()) {\r\n+                result.put(membership.getRoleId(), membership);\r\n+            }\r\n+            result = Collections.unmodifiableMap(result);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    public String getStatus() {\r\n+        return status;\r\n+    }\r\n+\r\n+    public void setStatus(String status) {\r\n+        this.status = status;\r\n+    }\r\n+\r\n+    public String getToken() {\r\n+        return token;\r\n+    }\r\n+\r\n+    public void setToken(String token) {\r\n+        this.token = token;\r\n+    }\r\n+\r\n+    public Date getTokenExpireTime() {\r\n+        return tokenExpireTime == null\r\n+                ? null\r\n+                : new Date(tokenExpireTime.getTime());\r\n+    }\r\n+\r\n+    public void setTokenExpireTime(Date tokenExpireTime) {\r\n+        if (tokenExpireTime != null) {\r\n+            this.tokenExpireTime = new Date(tokenExpireTime.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public String getUsername() {\r\n+        return username;\r\n+    }\r\n+\r\n+    public void setUsername(String username) {\r\n+        this.username = username;\r\n+    }\r\n+\r\n+    public Date getChangePwdDate() {\r\n+        return changePwdDate;\r\n+    }\r\n+\r\n+    public Date getCreationDate() {\r\n+        return creationDate;\r\n+    }\r\n+\r\n+    public Integer getFailedLogins() {\r\n+        return failedLogins;\r\n+    }\r\n+\r\n+    public Date getLastLoginDate() {\r\n+        return lastLoginDate;\r\n+    }\r\n+\r\n+    public void setChangePwdDate(Date changePwdDate) {\r\n+        this.changePwdDate = changePwdDate;\r\n+    }\r\n+\r\n+    public void setCreationDate(Date creationDate) {\r\n+        this.creationDate = creationDate;\r\n+    }\r\n+\r\n+    public void setFailedLogins(Integer failedLogins) {\r\n+        this.failedLogins = failedLogins;\r\n+    }\r\n+\r\n+    public void setLastLoginDate(Date lastLoginDate) {\r\n+        this.lastLoginDate = lastLoginDate;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return new ReflectionToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE) {\r\n+\r\n+            @Override\r\n+            protected boolean accept(Field f) {\r\n+                return super.accept(f) && !f.getName().equals(\"password\");\r\n+            }\r\n+        }.toString();\r\n+    }\r\n+}\r"},{"sha":"b31fe7211bc0c1ac759382e4c634beca4e352cd5","filename":"common/src/main/java/org/apache/syncope/common/to/ValidatorTO.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FValidatorTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FValidatorTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FValidatorTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"validator\")\r\n+@XmlType\r\n+public class ValidatorTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 7233619557177034453L;\r\n+\r\n+    private String name;\r\n+\r\n+    public static ValidatorTO instance(final String name) {\r\n+        ValidatorTO instance = new ValidatorTO();\r\n+        instance.setName(name);\r\n+        return instance;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"66eb826459a75789cabe460812ec05136d1e4dc1","filename":"common/src/main/java/org/apache/syncope/common/to/VirtualSchemaTO.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirtualSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirtualSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirtualSchemaTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+\r\n+@XmlRootElement(name = \"virtualSchema\")\r\n+public class VirtualSchemaTO extends AbstractSchemaTO {\r\n+\r\n+    private static final long serialVersionUID = -8198557479659701343L;\r\n+    \r\n+    private boolean readonly;\r\n+    \r\n+    public boolean isReadonly() {\r\n+        return readonly;\r\n+    }\r\n+\r\n+    public void setReadonly(final boolean readonly) {\r\n+        this.readonly = readonly;\r\n+    }\r\n+\r\n+}\r"},{"sha":"d6531e8a1fbc0196a80de44aa7cbf68924e3d758","filename":"common/src/main/java/org/apache/syncope/common/to/WorkflowDefinitionTO.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowDefinitionTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowDefinitionTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowDefinitionTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"workflowDefinition\")\r\n+@XmlType\r\n+public class WorkflowDefinitionTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 8803733012885686826L;\r\n+\r\n+    private String id;\r\n+\r\n+    private String xmlDefinition;\r\n+\r\n+    public String getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(String id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getXmlDefinition() {\r\n+        return xmlDefinition;\r\n+    }\r\n+\r\n+    public void setXmlDefinition(String xmlDefinition) {\r\n+        this.xmlDefinition = xmlDefinition;\r\n+    }\r\n+\r\n+}\r"},{"sha":"27a3087cd1e0fdc5f99239c6c896db7670746f0e","filename":"common/src/main/java/org/apache/syncope/common/to/WorkflowFormPropertyTO.java","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormPropertyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormPropertyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormPropertyTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,139 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.WorkflowFormPropertyType;\r\n+\r\n+@XmlRootElement(name = \"workflowFormProperty\")\r\n+@XmlType\r\n+public class WorkflowFormPropertyTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 9139969592634304261L;\r\n+\r\n+    private String id;\r\n+\r\n+    private String name;\r\n+\r\n+    private WorkflowFormPropertyType type;\r\n+\r\n+    private String value;\r\n+\r\n+    private boolean readable;\r\n+\r\n+    private boolean writable;\r\n+\r\n+    private boolean required;\r\n+\r\n+    private String datePattern;\r\n+\r\n+    private Map<String, String> enumValues;\r\n+\r\n+    public WorkflowFormPropertyTO() {\r\n+        enumValues = new HashMap<String, String>();\r\n+    }\r\n+\r\n+    public String getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(String id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public boolean isReadable() {\r\n+        return readable;\r\n+    }\r\n+\r\n+    public void setReadable(boolean readable) {\r\n+        this.readable = readable;\r\n+    }\r\n+\r\n+    public boolean isRequired() {\r\n+        return required;\r\n+    }\r\n+\r\n+    public void setRequired(boolean required) {\r\n+        this.required = required;\r\n+    }\r\n+\r\n+    public WorkflowFormPropertyType getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public void setType(WorkflowFormPropertyType type) {\r\n+        this.type = type;\r\n+    }\r\n+\r\n+    public String getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(String value) {\r\n+        this.value = value;\r\n+    }\r\n+\r\n+    public boolean isWritable() {\r\n+        return writable;\r\n+    }\r\n+\r\n+    public void setWritable(boolean writable) {\r\n+        this.writable = writable;\r\n+    }\r\n+\r\n+    public String getDatePattern() {\r\n+        return datePattern;\r\n+    }\r\n+\r\n+    public void setDatePattern(String datePattern) {\r\n+        this.datePattern = datePattern;\r\n+    }\r\n+\r\n+    public Map<String, String> getEnumValues() {\r\n+        return enumValues;\r\n+    }\r\n+\r\n+    public void putEnumValue(String key, String value) {\r\n+        this.enumValues.put(key, value);\r\n+    }\r\n+\r\n+    public void removeEnumValue(String key) {\r\n+        this.enumValues.remove(key);\r\n+    }\r\n+\r\n+    public void setEnumValues(Map<String, String> enumValues) {\r\n+        if (enumValues != null) {\r\n+            this.enumValues = enumValues;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"ec504e46e6a4191378f6caf7a3bd3a27794294af","filename":"common/src/main/java/org/apache/syncope/common/to/WorkflowFormTO.java","status":"added","additions":170,"deletions":0,"changes":170,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormTO.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,170 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+@XmlRootElement(name = \"workflowForm\")\r\n+@XmlType\r\n+public class WorkflowFormTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -7044543391316529128L;\r\n+\r\n+    private long userId;\r\n+\r\n+    private String taskId;\r\n+\r\n+    private String key;\r\n+\r\n+    private String description;\r\n+\r\n+    private Date createTime;\r\n+\r\n+    private Date dueDate;\r\n+\r\n+    private String owner;\r\n+\r\n+    private final List<WorkflowFormPropertyTO> properties;\r\n+\r\n+    public WorkflowFormTO() {\r\n+        properties = new ArrayList<WorkflowFormPropertyTO>();\r\n+    }\r\n+\r\n+    public long getUserId() {\r\n+        return userId;\r\n+    }\r\n+\r\n+    public void setUserId(long userId) {\r\n+        this.userId = userId;\r\n+    }\r\n+\r\n+    public String getTaskId() {\r\n+        return taskId;\r\n+    }\r\n+\r\n+    public void setTaskId(String taskId) {\r\n+        this.taskId = taskId;\r\n+    }\r\n+\r\n+    public String getKey() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public void setKey(String key) {\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public Date getCreateTime() {\r\n+        return createTime;\r\n+    }\r\n+\r\n+    public void setCreateTime(Date createTime) {\r\n+        this.createTime = createTime;\r\n+    }\r\n+\r\n+    public String getDescription() {\r\n+        return description;\r\n+    }\r\n+\r\n+    public void setDescription(String description) {\r\n+        this.description = description;\r\n+    }\r\n+\r\n+    public Date getDueDate() {\r\n+        return dueDate;\r\n+    }\r\n+\r\n+    public void setDueDate(Date dueDate) {\r\n+        this.dueDate = dueDate;\r\n+    }\r\n+\r\n+    public String getOwner() {\r\n+        return owner;\r\n+    }\r\n+\r\n+    public void setOwner(String owner) {\r\n+        this.owner = owner;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"workflowFormProperties\")\r\n+    @XmlElement(name = \"workflowFormProperty\")\r\n+    public List<WorkflowFormPropertyTO> getProperties() {\r\n+        return properties;\r\n+    }\r\n+\r\n+    public boolean addProperty(final WorkflowFormPropertyTO property) {\r\n+        return properties.contains(property)\r\n+                ? true\r\n+                : properties.add(property);\r\n+    }\r\n+\r\n+    public boolean removeProperty(final WorkflowFormPropertyTO property) {\r\n+        return properties.remove(property);\r\n+    }\r\n+\r\n+    public void setProperties(final Collection<WorkflowFormPropertyTO> properties) {\r\n+        if (this.properties != properties) {\r\n+            this.properties.clear();\r\n+            if (properties != null) {\r\n+                this.properties.addAll(properties);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public Map<String, WorkflowFormPropertyTO> getPropertyMap() {\r\n+        Map<String, WorkflowFormPropertyTO> result;\r\n+\r\n+        if (getProperties() == null) {\r\n+            result = Collections.emptyMap();\r\n+        } else {\r\n+            result = new HashMap<String, WorkflowFormPropertyTO>();\r\n+            for (WorkflowFormPropertyTO prop : getProperties()) {\r\n+                result.put(prop.getId(), prop);\r\n+            }\r\n+            result = Collections.unmodifiableMap(result);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public Map<String, String> getPropertiesForSubmit() {\r\n+        Map<String, String> props = new HashMap<String, String>();\r\n+        for (WorkflowFormPropertyTO prop : getProperties()) {\r\n+            if (prop.isWritable()) {\r\n+                props.put(prop.getId(), prop.getValue());\r\n+            }\r\n+        }\r\n+\r\n+        return props;\r\n+    }\r\n+}\r"},{"sha":"9fefc67bb212c6efa6301803dc92f09466f851ce","filename":"common/src/main/java/org/apache/syncope/common/types/AbstractPolicySpec.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,27 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+public abstract class AbstractPolicySpec extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 2740439904103716653L;\r\n+\r\n+}\r"},{"sha":"9782a71566cbf0c82dc4c00803609f2bbeabf066","filename":"common/src/main/java/org/apache/syncope/common/types/AccountPolicySpec.java","status":"added","additions":189,"deletions":0,"changes":189,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAccountPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAccountPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAccountPolicySpec.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,189 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.annotation.SchemaList;\r\n+\r\n+@XmlType\r\n+public class AccountPolicySpec extends AbstractPolicySpec {\r\n+\r\n+    private static final long serialVersionUID = 3259256974414758406L;\r\n+\r\n+    /**\r\n+     * Minimum length.\r\n+     */\r\n+    private int maxLength;\r\n+\r\n+    /**\r\n+     * Maximum length.\r\n+     */\r\n+    private int minLength;\r\n+\r\n+    /**\r\n+     * Substrings not permitted.\r\n+     */\r\n+    private List<String> wordsNotPermitted;\r\n+\r\n+    /**\r\n+     * User attribute values not permitted.\r\n+     */\r\n+    @SchemaList\r\n+    private List<String> schemasNotPermitted;\r\n+\r\n+    /**\r\n+     * Substrings not permitted as prefix.\r\n+     */\r\n+    private List<String> prefixesNotPermitted;\r\n+\r\n+    /**\r\n+     * Substrings not permitted as suffix.\r\n+     */\r\n+    private List<String> suffixesNotPermitted;\r\n+\r\n+    /**\r\n+     * Specify if one or more lowercase characters are permitted.\r\n+     */\r\n+    private boolean allUpperCase;\r\n+\r\n+    /**\r\n+     * Specify if one or more uppercase characters are permitted.\r\n+     */\r\n+    private boolean allLowerCase;\r\n+\r\n+    /**\r\n+     * Specify if it must be propagate suspension in case of maximum subsequent\r\n+     * failed logins reached.\r\n+     */\r\n+    private boolean propagateSuspension;\r\n+\r\n+    /**\r\n+     * Number of permitted login retries.\r\n+     * 0 disabled; >0 enabled.\r\n+     * If the number of subsequent failed logins will be greater then this value\r\n+     * the account will be suspended (lock-out).\r\n+     */\r\n+    private int permittedLoginRetries;\r\n+\r\n+    public boolean isAllLowerCase() {\r\n+        return allLowerCase;\r\n+    }\r\n+\r\n+    public void setAllLowerCase(boolean allLowerCase) {\r\n+        this.allLowerCase = allLowerCase;\r\n+    }\r\n+\r\n+    public boolean isAllUpperCase() {\r\n+        return allUpperCase;\r\n+    }\r\n+\r\n+    public void setAllUpperCase(boolean allUpperCase) {\r\n+        this.allUpperCase = allUpperCase;\r\n+    }\r\n+\r\n+    public int getMaxLength() {\r\n+        return maxLength;\r\n+    }\r\n+\r\n+    public void setMaxLength(int maxLength) {\r\n+        this.maxLength = maxLength;\r\n+    }\r\n+\r\n+    public int getMinLength() {\r\n+        return minLength;\r\n+    }\r\n+\r\n+    public void setMinLength(int minLength) {\r\n+        this.minLength = minLength;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"prefixesNotPermitted\")\r\n+    @XmlElement(name = \"prefix\")\r\n+    public List<String> getPrefixesNotPermitted() {\r\n+        if (prefixesNotPermitted == null) {\r\n+            prefixesNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return prefixesNotPermitted;\r\n+    }\r\n+\r\n+    public void setPrefixesNotPermitted(List<String> prefixesNotPermitted) {\r\n+        this.prefixesNotPermitted = prefixesNotPermitted;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"schemasNotPermitted\")\r\n+    @XmlElement(name = \"schema\")\r\n+    public List<String> getSchemasNotPermitted() {\r\n+        if (schemasNotPermitted == null) {\r\n+            schemasNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return schemasNotPermitted;\r\n+    }\r\n+\r\n+    public void setSchemasNotPermitted(List<String> schemasNotPermitted) {\r\n+        this.schemasNotPermitted = schemasNotPermitted;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"suffixesNotPermitted\")\r\n+    @XmlElement(name = \"suffix\")\r\n+    public List<String> getSuffixesNotPermitted() {\r\n+        if (suffixesNotPermitted == null) {\r\n+            suffixesNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return suffixesNotPermitted;\r\n+    }\r\n+\r\n+    public void setSuffixesNotPermitted(List<String> suffixesNotPermitted) {\r\n+        this.suffixesNotPermitted = suffixesNotPermitted;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"wordsNotPermitted\")\r\n+    @XmlElement(name = \"word\")\r\n+    public List<String> getWordsNotPermitted() {\r\n+        if (wordsNotPermitted == null) {\r\n+            wordsNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return wordsNotPermitted;\r\n+    }\r\n+\r\n+    public void setWordsNotPermitted(List<String> wordsNotPermitted) {\r\n+        this.wordsNotPermitted = wordsNotPermitted;\r\n+    }\r\n+\r\n+    public boolean isPropagateSuspension() {\r\n+        return propagateSuspension;\r\n+    }\r\n+\r\n+    public void setPropagateSuspension(boolean propagateSuspension) {\r\n+        this.propagateSuspension = propagateSuspension;\r\n+    }\r\n+\r\n+    public int getPermittedLoginRetries() {\r\n+        return permittedLoginRetries;\r\n+    }\r\n+\r\n+    public void setPermittedLoginRetries(int permittedLoginRetries) {\r\n+        this.permittedLoginRetries = permittedLoginRetries;\r\n+    }\r\n+}\r"},{"sha":"fac99e651f84b2b4df9b7514475a0db4db3fb457","filename":"common/src/main/java/org/apache/syncope/common/types/AttributableType.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributableType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributableType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributableType.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,34 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum AttributableType {\r\n+\r\n+    USER,\r\n+    ROLE,\r\n+    MEMBERSHIP;\r\n+\r\n+    public static AttributableType fromString(String value) {\r\n+        return valueOf(value.toUpperCase());\r\n+    }\r\n+\r\n+}\r"},{"sha":"79df17842b1305c8239825a77845c472d7570603","filename":"common/src/main/java/org/apache/syncope/common/types/AttributeSchemaType.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.util.Date;\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum AttributeSchemaType {\r\n+\r\n+    String(String.class),\r\n+    Long(Long.class),\r\n+    Double(Double.class),\r\n+    Boolean(Boolean.class),\r\n+    Date(Date.class),\r\n+    Enum(Enum.class);\r\n+\r\n+    final private Class<?> type;\r\n+\r\n+    AttributeSchemaType(final Class<?> type) {\r\n+        this.type = type;\r\n+    }\r\n+\r\n+    public Class<?> getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public boolean isConversionPatternNeeded() {\r\n+        return this == AttributeSchemaType.Date\r\n+                || this == AttributeSchemaType.Double\r\n+                || this == AttributeSchemaType.Long;\r\n+    }\r\n+}\r"},{"sha":"1a77cd7777f5793481818b947e3c077cedf0d941","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"added","additions":264,"deletions":0,"changes":264,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,264 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.util.EnumSet;\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+public final class AuditElements {\r\n+\r\n+    private AuditElements() {\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum Category {\r\n+\r\n+        authentication(AuthenticationSubCategory.class),\r\n+        configuration(ConfigurationSubCategory.class),\r\n+        connector(ConnectorSubCategory.class),\r\n+        logger(LoggerSubCategory.class),\r\n+        notification(NotificationSubCategory.class),\r\n+        policy(PolicySubCategory.class),\r\n+        report(ReportSubCategory.class),\r\n+        resource(ResourceSubCategory.class),\r\n+        role(RoleSubCategory.class),\r\n+        schema(SchemaSubCategory.class),\r\n+        task(TaskSubCategory.class),\r\n+        user(UserSubCategory.class),\r\n+        userRequest(UserRequestSubCategory.class),\r\n+        workflow(WorkflowSubCategory.class);\r\n+\r\n+        private Class<? extends Enum<?>> subCategory;\r\n+\r\n+        Category(final Class<? extends Enum<?>> subCategory) {\r\n+            this.subCategory = subCategory;\r\n+        }\r\n+\r\n+        public Class<? extends Enum> getSubCategory() {\r\n+            return subCategory;\r\n+        }\r\n+\r\n+        @SuppressWarnings(\"unchecked\")\r\n+        public EnumSet<? extends Enum<?>> getSubCategoryElements() {\r\n+            return EnumSet.allOf(getSubCategory());\r\n+        }\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum Result {\r\n+\r\n+        success,\r\n+        failure\r\n+\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum AuthenticationSubCategory {\r\n+\r\n+        login,\r\n+        getEntitlements\r\n+\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum ConfigurationSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        getMailTemplates,\r\n+        getValidators,\r\n+        dbExport\r\n+\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum ConnectorSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        getBundles,\r\n+        getSchemaNames,\r\n+        getConfigurationProperties,\r\n+        check,\r\n+        readConnectorBean,\r\n+        reload\r\n+\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum LoggerSubCategory {\r\n+\r\n+        list,\r\n+        setLevel,\r\n+        delete\r\n+\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum NotificationSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        sent\r\n+\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum PolicySubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        getCorrelationRuleClasses\r\n+\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum ReportSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        readExecution,\r\n+        update,\r\n+        delete,\r\n+        deleteExecution,\r\n+        getReportletConfClasses,\r\n+        execute,\r\n+        exportExecutionResult\r\n+\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum ResourceSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        getObject,\r\n+        getRoleResourcesMapping,\r\n+        getPropagationActionsClasses\r\n+\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum RoleSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        selfRead,\r\n+        update,\r\n+        delete,\r\n+        parent,\r\n+        children\r\n+\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum SchemaSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        listDerived,\r\n+        createDerived,\r\n+        readDerived,\r\n+        updateDerived,\r\n+        deleteDerived,\r\n+        listVirtual,\r\n+        createVirtual,\r\n+        readVirtual,\r\n+        updateVirtual,\r\n+        deleteVirtual\r\n+\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum TaskSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        getJobClasses,\r\n+        getSyncActionsClasses,\r\n+        readExecution,\r\n+        execute,\r\n+        report,\r\n+        deleteExecution\r\n+\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum UserSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        verifyPassword,\r\n+        search,\r\n+        setStatus,\r\n+        executeWorkflow,\r\n+        getForms,\r\n+        getFormForUser,\r\n+        claimForm,\r\n+        submitForm\r\n+\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum UserRequestSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        isCreateAllowed\r\n+\r\n+    }\r\n+\r\n+    @XmlEnum\r\n+    public enum WorkflowSubCategory {\r\n+\r\n+        getDefinition,\r\n+        updateDefinition,\r\n+        getDefinedTasks\r\n+\r\n+    }\r\n+}\r"},{"sha":"5d24c4ecfe3c2615c81da30c2c9f4b368beadc23","filename":"common/src/main/java/org/apache/syncope/common/types/AuditLoggerName.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,107 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.text.ParseException;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.commons.lang.StringUtils;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.AuditElements.Category;\r\n+import org.apache.syncope.common.types.AuditElements.Result;\r\n+import org.codehaus.jackson.annotate.JsonCreator;\r\n+import org.codehaus.jackson.annotate.JsonProperty;\r\n+import org.codehaus.jackson.annotate.JsonTypeInfo;\r\n+\r\n+@XmlType\r\n+@XmlRootElement\r\n+public class AuditLoggerName extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -647989486671786839L;\r\n+\r\n+    private final Category category;\r\n+\r\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n+    private final Enum<?> subcategory;\r\n+\r\n+    private final Result result;\r\n+\r\n+    @JsonCreator\r\n+    public AuditLoggerName(@JsonProperty(\"category\") final Category category,\r\n+            @JsonProperty(\"subcategory\") final Enum<?> subcategory, @JsonProperty(\"result\") final Result result)\r\n+            throws IllegalArgumentException {\r\n+\r\n+        if (category == null || subcategory == null || result == null) {\r\n+            throw new IllegalArgumentException(\"Null values not permitted\");\r\n+        }\r\n+\r\n+        if (!category.getSubCategoryElements().contains(subcategory)) {\r\n+            throw new IllegalArgumentException(category.name() + \" does not contain \" + subcategory.name());\r\n+        }\r\n+\r\n+        this.category = category;\r\n+        this.subcategory = subcategory;\r\n+        this.result = result;\r\n+    }\r\n+\r\n+    public Category getCategory() {\r\n+        return category;\r\n+    }\r\n+\r\n+    public Result getResult() {\r\n+        return result;\r\n+    }\r\n+\r\n+    public Enum<?> getSubcategory() {\r\n+        return subcategory;\r\n+    }\r\n+\r\n+    public String toLoggerName() {\r\n+        return new StringBuilder().append(SyncopeLoggerType.AUDIT.getPrefix()).append('.').\r\n+                append(category.name()).append('.').\r\n+                append(subcategory.name()).append('.').\r\n+                append(result.name()).toString();\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public static AuditLoggerName fromLoggerName(final String loggerName)\r\n+            throws IllegalArgumentException, ParseException {\r\n+\r\n+        if (StringUtils.isBlank(loggerName)) {\r\n+            throw new IllegalArgumentException(\"Null value not permitted\");\r\n+        }\r\n+\r\n+        if (!loggerName.startsWith(SyncopeLoggerType.AUDIT.getPrefix())) {\r\n+            throw new ParseException(\"Audit logger name must start with \" + SyncopeLoggerType.AUDIT.getPrefix(), 0);\r\n+        }\r\n+\r\n+        String[] splitted = loggerName.split(\"\\\\.\");\r\n+        if (splitted == null || splitted.length < 5) {\r\n+            throw new ParseException(\"Unparsable logger name\", 0);\r\n+        }\r\n+\r\n+        Category category = Category.valueOf(splitted[2]);\r\n+        Enum<?> subcategory = Enum.valueOf(category.getSubCategory(), splitted[3]);\r\n+        Result result = Result.valueOf(splitted[4]);\r\n+\r\n+        return new AuditLoggerName(category, subcategory, result);\r\n+    }\r\n+}\r"},{"sha":"bf95c568ccea1758769a485aa0f52d571087685d","filename":"common/src/main/java/org/apache/syncope/common/types/CipherAlgorithm.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum CipherAlgorithm {\r\n+\r\n+    SHA1(\"SHA-1\"),\r\n+    SHA256(\"SHA-256\"),\r\n+    AES(\"AES\"),\r\n+    SMD5(\"S-MD5\"),\r\n+    SSHA1(\"S-SHA-1\"),\r\n+    SSHA256(\"S-SHA-256\"),\r\n+    BCRYPT(\"BCRYPT\");\r\n+\r\n+    final private String algorithm;\r\n+\r\n+    CipherAlgorithm(final String algorithm) {\r\n+        this.algorithm = algorithm;\r\n+    }\r\n+\r\n+    public final String getAlgorithm() {\r\n+        return algorithm;\r\n+    }\r\n+\r\n+    public static CipherAlgorithm fromString(final String value) {\r\n+        return CipherAlgorithm.valueOf(value.toUpperCase());\r\n+    }\r\n+}\r"},{"sha":"870f1f2912d61eab044f4a6732c0132562d561c6","filename":"common/src/main/java/org/apache/syncope/common/types/ConflictResolutionAction.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConflictResolutionAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConflictResolutionAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConflictResolutionAction.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum ConflictResolutionAction {\r\n+\r\n+    // ignore sync\r\n+    IGNORE,\r\n+    // sync first matcgh\r\n+    FIRSTMATCH,\r\n+    // sync last match\r\n+    LASTMATCH,\r\n+    // sync all\r\n+    ALL;\r\n+\r\n+    public static ConflictResolutionAction fromString(String value) {\r\n+        return ConflictResolutionAction.valueOf(value.toUpperCase());\r\n+    }\r\n+}\r"},{"sha":"0ec0a3d2c634ce7c3f9fcc2f1f9301febe526574","filename":"common/src/main/java/org/apache/syncope/common/types/ConnConfPropSchema.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,112 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement\r\n+@XmlType\r\n+public class ConnConfPropSchema extends AbstractBaseBean implements Comparable<ConnConfPropSchema> {\r\n+\r\n+    private static final long serialVersionUID = -1976365781005801296L;\r\n+\r\n+    private String name;\r\n+\r\n+    private String displayName;\r\n+\r\n+    private String helpMessage;\r\n+\r\n+    private String type;\r\n+\r\n+    private boolean required;\r\n+\r\n+    private int order;\r\n+\r\n+    private boolean confidential;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public boolean isRequired() {\r\n+        return required;\r\n+    }\r\n+\r\n+    public void setRequired(final boolean required) {\r\n+        this.required = required;\r\n+    }\r\n+\r\n+    public String getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public void setType(final String type) {\r\n+        this.type = type;\r\n+    }\r\n+\r\n+    public String getDisplayName() {\r\n+        return displayName;\r\n+    }\r\n+\r\n+    public void setDisplayName(final String displayName) {\r\n+        this.displayName = displayName;\r\n+    }\r\n+\r\n+    public String getHelpMessage() {\r\n+        return helpMessage;\r\n+    }\r\n+\r\n+    public void setHelpMessage(final String helpMessage) {\r\n+        this.helpMessage = helpMessage;\r\n+    }\r\n+\r\n+    public int getOrder() {\r\n+        return order;\r\n+    }\r\n+\r\n+    public void setOrder(final int order) {\r\n+        this.order = order;\r\n+    }\r\n+\r\n+    public boolean isConfidential() {\r\n+        return confidential;\r\n+    }\r\n+\r\n+    public void setConfidential(final boolean confidential) {\r\n+        this.confidential = confidential;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int compareTo(final ConnConfPropSchema connConfPropSchema) {\r\n+        if (this.getOrder() > connConfPropSchema.getOrder()) {\r\n+            return 1;\r\n+        } else if (this.getOrder() < connConfPropSchema.getOrder()) {\r\n+            return -1;\r\n+        } else {\r\n+            return 0;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"413ca1242bde3f4c22f00d18eb916387ba4a4ebb","filename":"common/src/main/java/org/apache/syncope/common/types/ConnConfProperty.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement\r\n+@XmlType\r\n+public class ConnConfProperty extends AbstractBaseBean implements Comparable<ConnConfProperty> {\r\n+\r\n+    private static final long serialVersionUID = -8391413960221862238L;\r\n+\r\n+    private ConnConfPropSchema schema;\r\n+\r\n+    private List<?> values = new ArrayList<Object>();\r\n+\r\n+    private boolean overridable;\r\n+\r\n+    public ConnConfPropSchema getSchema() {\r\n+        return schema;\r\n+    }\r\n+\r\n+    public void setSchema(final ConnConfPropSchema schema) {\r\n+        this.schema = schema;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"values\")\r\n+    @XmlElement(name = \"value\")\r\n+    public List<?> getValues() {\r\n+        return values;\r\n+    }\r\n+\r\n+    public void setValues(final List<?> values) {\r\n+        this.values = values;\r\n+    }\r\n+\r\n+    public boolean isOverridable() {\r\n+        return overridable;\r\n+    }\r\n+\r\n+    public void setOverridable(final boolean overridable) {\r\n+        this.overridable = overridable;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int compareTo(final ConnConfProperty connConfProperty) {\r\n+        return this.getSchema().compareTo(connConfProperty.getSchema());\r\n+    }\r\n+}\r"},{"sha":"c327143b3b5216ef7594043ade0499b59a5fed8c","filename":"common/src/main/java/org/apache/syncope/common/types/ConnParameterType.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnParameterType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnParameterType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnParameterType.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum ConnParameterType {\r\n+\r\n+    /**\r\n+     * Connector parameter type:\r\n+     */\r\n+    OVERRIDABLE(true),\r\n+    NOT_OVERRIDABLE(false);\r\n+\r\n+    private boolean overridable;\r\n+\r\n+    ConnParameterType(final boolean overridable) {\r\n+        this.overridable = overridable;\r\n+    }\r\n+\r\n+    public boolean getOverridable() {\r\n+        return overridable;\r\n+    }\r\n+}\r"},{"sha":"0ea5ad7d533184e7cc337e194a1c200885eb4140","filename":"common/src/main/java/org/apache/syncope/common/types/ConnectorCapability.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnectorCapability.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnectorCapability.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnectorCapability.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,42 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+/**\r\n+ * Enum of all possible capabilities that a connector instance can expose.\r\n+ */\r\n+@XmlEnum\r\n+public enum ConnectorCapability {\r\n+\r\n+    ONE_PHASE_CREATE,\r\n+    TWO_PHASES_CREATE,\r\n+    ONE_PHASE_UPDATE,\r\n+    TWO_PHASES_UPDATE,\r\n+    ONE_PHASE_DELETE,\r\n+    TWO_PHASES_DELETE,\r\n+    SEARCH,\r\n+    SYNC;\r\n+\r\n+    public static ConnectorCapability fromString(String value) {\r\n+        return ConnectorCapability.valueOf(value.toUpperCase());\r\n+    }\r\n+\r\n+}\r"},{"sha":"ae13bfaec5577d212f12d1e52a91c766d1b28b97","filename":"common/src/main/java/org/apache/syncope/common/types/EntityViolationType.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum EntityViolationType {\r\n+\r\n+    Standard(\"\"),\r\n+    InvalidAccountPolicy(\"org.apache.syncope.core.validation.accountpolicy\"),\r\n+    InvalidEntitlementName(\"org.apache.syncope.core.validation.entitlement.name\"),\r\n+    InvalidConnInstanceLocation(\"org.apache.syncope.core.validation.conninstance.location\"),\r\n+    InvalidMapping(\"org.apache.syncope.core.validation.mapping\"),\r\n+    InvalidMSchema(\"org.apache.syncope.core.validation.attrvalue.mSchema\"),\r\n+    InvalidMDerSchema(\"org.apache.syncope.core.validation.attrvalue.mDerSchema\"),\r\n+    InvalidMVirSchema(\"org.apache.syncope.core.validation.attrvalue.mVirSchema\"),\r\n+    InvalidNotification(\"org.apache.syncope.core.validation.notification\"),\r\n+    InvalidPassword(\"org.apache.syncope.core.validation.syncopeuser.password\"),\r\n+    InvalidPasswordPolicy(\"org.apache.syncope.core.validation.passwordpolicy\"),\r\n+    InvalidPolicy(\"org.apache.syncope.core.validation.policy\"),\r\n+    InvalidPropagationTask(\"org.apache.syncope.core.validation.propagationtask\"),\r\n+    InvalidRSchema(\"org.apache.syncope.core.validation.attrvalue.rSchema\"),\r\n+    InvalidRDerSchema(\"org.apache.syncope.core.validation.attrvalue.rDerSchema\"),\r\n+    InvalidRVirSchema(\"org.apache.syncope.core.validation.attrvalue.rVirSchema\"),\r\n+    InvalidReport(\"org.apache.syncope.core.validation.report\"),\r\n+    InvalidResource(\"org.apache.syncope.core.validation.externalresource\"),\r\n+    InvalidRoleOwner(\"org.apache.syncope.core.validation.syncoperole.owner\"),\r\n+    InvalidSchemaTypeSpecification(\"org.apache.syncope.core.validation.attrvalue.schemaTypeSpecification\"),\r\n+    InvalidSchedTask(\"org.apache.syncope.core.validation.schedtask\"),\r\n+    InvalidSyncTask(\"org.apache.syncope.core.validation.synctask\"),\r\n+    InvalidSyncPolicy(\"org.apache.syncope.core.validation.syncpolicy\"),\r\n+    InvalidUSchema(\"org.apache.syncope.core.validation.attrvalue.uSchema\"),\r\n+    InvalidUDerSchema(\"org.apache.syncope.core.validation.attrvalue.derSchema\"),\r\n+    InvalidUVirSchema(\"org.apache.syncope.core.validation.attrvalue.uVirSchema\"),\r\n+    InvalidUsername(\"org.apache.syncope.core.validation.syncopeuser.username\"),\r\n+    InvalidValueList(\"org.apache.syncope.core.validation.attr.valueList\"),\r\n+    MultivalueAndUniqueConstraint(\"org.apache.syncope.core.validation.schema.multivalueAndUniqueConstraint\"),\r\n+    MoreThanOneNonNull(\"org.apache.syncope.core.validation.attrvalue.moreThanOneNonNull\");\r\n+\r\n+    private String message;\r\n+\r\n+    private EntityViolationType(final String message) {\r\n+        this.message = message;\r\n+    }\r\n+\r\n+    public void setMessageTemplate(final String message) {\r\n+        this.message = message;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return this == Standard\r\n+                ? message\r\n+                : super.toString();\r\n+    }\r\n+}\r"},{"sha":"1f1210f423dd45b4e5b491ae2a482e652826941f","filename":"common/src/main/java/org/apache/syncope/common/types/IntMappingType.java","status":"added","additions":199,"deletions":0,"changes":199,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,199 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.util.EnumSet;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+/**\r\n+ * Internal attribute mapping type.\r\n+ */\r\n+@XmlEnum\r\n+public enum IntMappingType {\r\n+\r\n+    // Unfortunately enum type cannot be extended ...\r\n+    // -------------------------\r\n+    // User attribute types (the same in UserMappingType)\r\n+    // -------------------------\r\n+    UserSchema(AttributableType.USER),\r\n+    UserDerivedSchema(AttributableType.USER),\r\n+    UserVirtualSchema(AttributableType.USER),\r\n+    UserId(AttributableType.USER),\r\n+    Username(AttributableType.USER),\r\n+    Password(AttributableType.USER),\r\n+    // -------------------------\r\n+    // Role attribute types (the same in RoleMappingType)\r\n+    // -------------------------\r\n+    RoleSchema(AttributableType.ROLE),\r\n+    RoleDerivedSchema(AttributableType.ROLE),\r\n+    RoleVirtualSchema(AttributableType.ROLE),\r\n+    RoleId(AttributableType.ROLE),\r\n+    RoleName(AttributableType.ROLE),\r\n+    RoleOwnerSchema(AttributableType.ROLE),\r\n+    // -------------------------\r\n+    // Membership attribute types (the same in MembershipMappingType)\r\n+    // -------------------------\r\n+    MembershipSchema(AttributableType.MEMBERSHIP),\r\n+    MembershipDerivedSchema(AttributableType.MEMBERSHIP),\r\n+    MembershipVirtualSchema(AttributableType.MEMBERSHIP),\r\n+    MembershipId(AttributableType.MEMBERSHIP);\r\n+\r\n+    private AttributableType attributableType;\r\n+\r\n+    private IntMappingType(final AttributableType attributableType) {\r\n+        this.attributableType = attributableType;\r\n+    }\r\n+\r\n+    public AttributableType getAttributableType() {\r\n+        return attributableType;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get attribute types for a certain attributable type.\r\n+     *\r\n+     * @param attributableType attributable type\r\n+     * @param toBeFiltered types to be filtered from the result.\r\n+     * @return set of attribute types.\r\n+     */\r\n+    public static Set<IntMappingType> getAttributeTypes(\r\n+            final AttributableType attributableType, final Set<IntMappingType> toBeFiltered) {\r\n+\r\n+        final Set<IntMappingType> res = getAttributeTypes(attributableType);\r\n+        res.removeAll(toBeFiltered);\r\n+\r\n+        return res;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get attribute types for a certain attributable type.\r\n+     *\r\n+     * @param attributableType attributable type\r\n+     * @return set of attribute types.\r\n+     */\r\n+    public static Set<IntMappingType> getAttributeTypes(final AttributableType attributableType) {\r\n+        final EnumSet<?> enumset;\r\n+\r\n+        switch (attributableType) {\r\n+            case ROLE:\r\n+                enumset = EnumSet.allOf(RoleMappingType.class);\r\n+                break;\r\n+\r\n+            case MEMBERSHIP:\r\n+                enumset = EnumSet.allOf(MembershipMappingType.class);\r\n+                break;\r\n+\r\n+            default:\r\n+                enumset = EnumSet.allOf(UserMappingType.class);\r\n+        }\r\n+\r\n+        final Set<IntMappingType> result = new HashSet<IntMappingType>(enumset.size());\r\n+        for (Object obj : enumset) {\r\n+            result.add(IntMappingType.valueOf(obj.toString()));\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    public static Set<IntMappingType> getEmbedded() {\r\n+        return EnumSet.of(\r\n+                IntMappingType.UserId, IntMappingType.Username, IntMappingType.Password,\r\n+                IntMappingType.RoleId, IntMappingType.RoleName,\r\n+                IntMappingType.MembershipId);\r\n+    }\r\n+\r\n+    /**\r\n+     * Check if attribute type belongs to the specified attributable type set.\r\n+     *\r\n+     * @param attributableType attributable type.\r\n+     * @param type attribute type.\r\n+     * @return true if attribute type belongs to the specified attributable type set.\r\n+     */\r\n+    public static boolean contains(final AttributableType attributableType, final String type) {\r\n+        switch (attributableType) {\r\n+            case ROLE:\r\n+                for (RoleMappingType c : RoleMappingType.values()) {\r\n+                    if (c.name().equals(type)) {\r\n+                        return true;\r\n+                    }\r\n+                }\r\n+                break;\r\n+\r\n+            case MEMBERSHIP:\r\n+                for (MembershipMappingType c : MembershipMappingType.values()) {\r\n+                    if (c.name().equals(type)) {\r\n+                        return true;\r\n+                    }\r\n+                }\r\n+                break;\r\n+\r\n+            case USER:\r\n+            default:\r\n+                for (UserMappingType c : UserMappingType.values()) {\r\n+                    if (c.name().equals(type)) {\r\n+                        return true;\r\n+                    }\r\n+                }\r\n+                break;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    /**\r\n+     * User attribute types.\r\n+     */\r\n+    private enum UserMappingType {\r\n+\r\n+        UserSchema,\r\n+        UserDerivedSchema,\r\n+        UserVirtualSchema,\r\n+        UserId,\r\n+        Username,\r\n+        Password;\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Role attribute types.\r\n+     */\r\n+    private enum RoleMappingType {\r\n+\r\n+        RoleSchema,\r\n+        RoleDerivedSchema,\r\n+        RoleVirtualSchema,\r\n+        RoleId,\r\n+        RoleName,\r\n+        RoleOwnerSchema;\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Membership attribute types.\r\n+     */\r\n+    private enum MembershipMappingType {\r\n+\r\n+        MembershipSchema,\r\n+        MembershipDerivedSchema,\r\n+        MembershipVirtualSchema,\r\n+        MembershipId;\r\n+\r\n+    }\r\n+}\r"},{"sha":"13b70fc721f62d237b606b901d93e104f47eb4f5","filename":"common/src/main/java/org/apache/syncope/common/types/LoggerType.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FLoggerType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FLoggerType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FLoggerType.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum LoggerType {\r\n+\r\n+    /**\r\n+     * This type describes a common logger used to handle system and application events.\r\n+     */\r\n+    NORMAL,\r\n+\r\n+    /**\r\n+     * Audit logger only focus on security related events, usually logging how did what and when.\r\n+     * In case of a security incident audit loggers should allow an administrator to recall all\r\n+     * actions a certain user has done.\r\n+     */\r\n+    AUDIT;\r\n+\r\n+    public static LoggerType fromString(String value) {\r\n+        return LoggerType.valueOf(value.toUpperCase());\r\n+    }\r\n+}\r"},{"sha":"be25c7c7b321ab390d003401dad4ac2dd35af73d","filename":"common/src/main/java/org/apache/syncope/common/types/MappingPurpose.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FMappingPurpose.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FMappingPurpose.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FMappingPurpose.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+public enum MappingPurpose {\n+\n+    BOTH,\n+    SYNCHRONIZATION,\n+    PROPAGATION\n+\n+}"},{"sha":"c8216f900de26740c5e1135b46d34241564f5a1b","filename":"common/src/main/java/org/apache/syncope/common/types/PasswordPolicySpec.java","status":"added","additions":365,"deletions":0,"changes":365,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,365 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+import org.apache.syncope.common.annotation.SchemaList;\r\n+\r\n+@XmlType\r\n+public class PasswordPolicySpec extends AbstractPolicySpec {\r\n+\r\n+    private static final long serialVersionUID = -7988778083915548547L;\r\n+\r\n+    /**\r\n+     * History length.\r\n+     */\r\n+    private int historyLength;\r\n+\r\n+    /**\r\n+     * Minimum length.\r\n+     */\r\n+    private int maxLength;\r\n+\r\n+    /**\r\n+     * Maximum length.\r\n+     */\r\n+    private int minLength;\r\n+\r\n+    /**\r\n+     * Substrings not permitted.\r\n+     */\r\n+    private List<String> wordsNotPermitted;\r\n+\r\n+    /**\r\n+     * User attribute values not permitted.\r\n+     */\r\n+    @SchemaList\r\n+    private List<String> schemasNotPermitted;\r\n+\r\n+    /**\r\n+     * Specify if one or more non alphanumeric characters are required.\r\n+     */\r\n+    private boolean nonAlphanumericRequired;\r\n+\r\n+    /**\r\n+     * Specify if one or more alphanumeric characters are required.\r\n+     */\r\n+    private boolean alphanumericRequired;\r\n+\r\n+    /**\r\n+     * Specify if one or more digits are required.\r\n+     */\r\n+    private boolean digitRequired;\r\n+\r\n+    /**\r\n+     * Specify if one or more lowercase alphabetic characters are required.\r\n+     */\r\n+    private boolean lowercaseRequired;\r\n+\r\n+    /**\r\n+     * Specify if one or more uppercase alphabetic characters are required.\r\n+     */\r\n+    private boolean uppercaseRequired;\r\n+\r\n+    /**\r\n+     * Specify if must start with a digit.\r\n+     */\r\n+    private boolean mustStartWithDigit;\r\n+\r\n+    /**\r\n+     * Specify if mustn't start with a digit.\r\n+     */\r\n+    private boolean mustntStartWithDigit;\r\n+\r\n+    /**\r\n+     * Specify if must end with a digit.\r\n+     */\r\n+    private boolean mustEndWithDigit;\r\n+\r\n+    /**\r\n+     * Specify if mustn't end with a digit.\r\n+     */\r\n+    private boolean mustntEndWithDigit;\r\n+\r\n+    /**\r\n+     * Specify if must start with a non alphanumeric character.\r\n+     */\r\n+    private boolean mustStartWithNonAlpha;\r\n+\r\n+    /**\r\n+     * Specify if must start with a alphanumeric character.\r\n+     */\r\n+    private boolean mustStartWithAlpha;\r\n+\r\n+    /**\r\n+     * Specify if mustn't start with a non alphanumeric character.\r\n+     */\r\n+    private boolean mustntStartWithNonAlpha;\r\n+\r\n+    /**\r\n+     * Specify if mustn't start with a alphanumeric character.\r\n+     */\r\n+    private boolean mustntStartWithAlpha;\r\n+\r\n+    /**\r\n+     * Specify if must end with a non alphanumeric character.\r\n+     */\r\n+    private boolean mustEndWithNonAlpha;\r\n+\r\n+    /**\r\n+     * Specify if must end with a alphanumeric character.\r\n+     */\r\n+    private boolean mustEndWithAlpha;\r\n+\r\n+    /**\r\n+     * Specify if mustn't end with a non alphanumeric character.\r\n+     */\r\n+    private boolean mustntEndWithNonAlpha;\r\n+\r\n+    /**\r\n+     * Specify if mustn't end with a alphanumeric character.\r\n+     */\r\n+    private boolean mustntEndWithAlpha;\r\n+\r\n+    /**\r\n+     * Substrings not permitted as prefix.\r\n+     */\r\n+    private List<String> prefixesNotPermitted;\r\n+\r\n+    /**\r\n+     * Substrings not permitted as suffix.\r\n+     */\r\n+    private List<String> suffixesNotPermitted;\r\n+\r\n+    public boolean isDigitRequired() {\r\n+        return digitRequired;\r\n+    }\r\n+\r\n+    public void setDigitRequired(boolean digitRequired) {\r\n+        this.digitRequired = digitRequired;\r\n+    }\r\n+\r\n+    public boolean isLowercaseRequired() {\r\n+        return lowercaseRequired;\r\n+    }\r\n+\r\n+    public void setLowercaseRequired(boolean lowercaseRequired) {\r\n+        this.lowercaseRequired = lowercaseRequired;\r\n+    }\r\n+\r\n+    public int getMaxLength() {\r\n+        return maxLength;\r\n+    }\r\n+\r\n+    public void setMaxLength(int maxLength) {\r\n+        this.maxLength = maxLength;\r\n+    }\r\n+\r\n+    public int getMinLength() {\r\n+        return minLength;\r\n+    }\r\n+\r\n+    public void setMinLength(int minLength) {\r\n+        this.minLength = minLength;\r\n+    }\r\n+\r\n+    public boolean isMustEndWithDigit() {\r\n+        return mustEndWithDigit;\r\n+    }\r\n+\r\n+    public void setMustEndWithDigit(boolean mustEndWithDigit) {\r\n+        this.mustEndWithDigit = mustEndWithDigit;\r\n+    }\r\n+\r\n+    public boolean isMustEndWithNonAlpha() {\r\n+        return mustEndWithNonAlpha;\r\n+    }\r\n+\r\n+    public void setMustEndWithNonAlpha(boolean mustEndWithNonAlpha) {\r\n+        this.mustEndWithNonAlpha = mustEndWithNonAlpha;\r\n+    }\r\n+\r\n+    public boolean isMustStartWithDigit() {\r\n+        return mustStartWithDigit;\r\n+    }\r\n+\r\n+    public void setMustStartWithDigit(boolean mustStartWithDigit) {\r\n+        this.mustStartWithDigit = mustStartWithDigit;\r\n+    }\r\n+\r\n+    public boolean isMustStartWithNonAlpha() {\r\n+        return mustStartWithNonAlpha;\r\n+    }\r\n+\r\n+    public void setMustStartWithNonAlpha(boolean mustStartWithNonAlpha) {\r\n+        this.mustStartWithNonAlpha = mustStartWithNonAlpha;\r\n+    }\r\n+\r\n+    public boolean isMustntEndWithDigit() {\r\n+        return mustntEndWithDigit;\r\n+    }\r\n+\r\n+    public void setMustntEndWithDigit(boolean mustntEndWithDigit) {\r\n+        this.mustntEndWithDigit = mustntEndWithDigit;\r\n+    }\r\n+\r\n+    public boolean isMustntEndWithNonAlpha() {\r\n+        return mustntEndWithNonAlpha;\r\n+    }\r\n+\r\n+    public void setMustntEndWithNonAlpha(boolean mustntEndWithNonAlpha) {\r\n+        this.mustntEndWithNonAlpha = mustntEndWithNonAlpha;\r\n+    }\r\n+\r\n+    public boolean isMustntStartWithDigit() {\r\n+        return mustntStartWithDigit;\r\n+    }\r\n+\r\n+    public void setMustntStartWithDigit(boolean mustntStartWithDigit) {\r\n+        this.mustntStartWithDigit = mustntStartWithDigit;\r\n+    }\r\n+\r\n+    public boolean isMustntStartWithNonAlpha() {\r\n+        return mustntStartWithNonAlpha;\r\n+    }\r\n+\r\n+    public void setMustntStartWithNonAlpha(boolean mustntStartWithNonAlpha) {\r\n+        this.mustntStartWithNonAlpha = mustntStartWithNonAlpha;\r\n+    }\r\n+\r\n+    public boolean isNonAlphanumericRequired() {\r\n+        return nonAlphanumericRequired;\r\n+    }\r\n+\r\n+    public void setNonAlphanumericRequired(boolean nonAlphanumericRequired) {\r\n+        this.nonAlphanumericRequired = nonAlphanumericRequired;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"prefixesNotPermitted\")\r\n+    @XmlElement(name = \"prefix\")\r\n+    public List<String> getPrefixesNotPermitted() {\r\n+        if (prefixesNotPermitted == null) {\r\n+            prefixesNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return prefixesNotPermitted;\r\n+    }\r\n+\r\n+    public void setPrefixesNotPermitted(List<String> prefixesNotPermitted) {\r\n+        this.prefixesNotPermitted = prefixesNotPermitted;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"schemasNotPermitted\")\r\n+    @XmlElement(name = \"schema\")\r\n+    public List<String> getSchemasNotPermitted() {\r\n+        if (schemasNotPermitted == null) {\r\n+            schemasNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return schemasNotPermitted;\r\n+    }\r\n+\r\n+    public void setSchemasNotPermitted(List<String> schemasNotPermitted) {\r\n+        this.schemasNotPermitted = schemasNotPermitted;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"suffixesNotPermitted\")\r\n+    @XmlElement(name = \"suffix\")\r\n+    public List<String> getSuffixesNotPermitted() {\r\n+        if (suffixesNotPermitted == null) {\r\n+            suffixesNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return suffixesNotPermitted;\r\n+    }\r\n+\r\n+    public void setSuffixesNotPermitted(List<String> suffixesNotPermitted) {\r\n+        this.suffixesNotPermitted = suffixesNotPermitted;\r\n+    }\r\n+\r\n+    public boolean isUppercaseRequired() {\r\n+        return uppercaseRequired;\r\n+    }\r\n+\r\n+    public void setUppercaseRequired(boolean uppercaseRequired) {\r\n+        this.uppercaseRequired = uppercaseRequired;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"wordsNotPermitted\")\r\n+    @XmlElement(name = \"word\")\r\n+    public List<String> getWordsNotPermitted() {\r\n+        if (wordsNotPermitted == null) {\r\n+            wordsNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return wordsNotPermitted;\r\n+    }\r\n+\r\n+    public void setWordsNotPermitted(List<String> wordsNotPermitted) {\r\n+        this.wordsNotPermitted = wordsNotPermitted;\r\n+    }\r\n+\r\n+    public boolean isAlphanumericRequired() {\r\n+        return alphanumericRequired;\r\n+    }\r\n+\r\n+    public void setAlphanumericRequired(boolean alphanumericRequired) {\r\n+        this.alphanumericRequired = alphanumericRequired;\r\n+    }\r\n+\r\n+    public boolean isMustEndWithAlpha() {\r\n+        return mustEndWithAlpha;\r\n+    }\r\n+\r\n+    public void setMustEndWithAlpha(boolean mustEndWithAlpha) {\r\n+        this.mustEndWithAlpha = mustEndWithAlpha;\r\n+    }\r\n+\r\n+    public boolean isMustStartWithAlpha() {\r\n+        return mustStartWithAlpha;\r\n+    }\r\n+\r\n+    public void setMustStartWithAlpha(boolean mustStartWithAlpha) {\r\n+        this.mustStartWithAlpha = mustStartWithAlpha;\r\n+    }\r\n+\r\n+    public boolean isMustntEndWithAlpha() {\r\n+        return mustntEndWithAlpha;\r\n+    }\r\n+\r\n+    public void setMustntEndWithAlpha(boolean mustntEndWithAlpha) {\r\n+        this.mustntEndWithAlpha = mustntEndWithAlpha;\r\n+    }\r\n+\r\n+    public boolean isMustntStartWithAlpha() {\r\n+        return mustntStartWithAlpha;\r\n+    }\r\n+\r\n+    public void setMustntStartWithAlpha(boolean mustntStartWithAlpha) {\r\n+        this.mustntStartWithAlpha = mustntStartWithAlpha;\r\n+    }\r\n+\r\n+    public int getHistoryLength() {\r\n+        return historyLength;\r\n+    }\r\n+\r\n+    public void setHistoryLength(int historyLength) {\r\n+        this.historyLength = historyLength;\r\n+    }\r\n+}\r"},{"sha":"b67a35248589b3450bce410be3f621075361f7e7","filename":"common/src/main/java/org/apache/syncope/common/types/PolicyType.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,58 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum PolicyType {\r\n+\r\n+    /**\r\n+     * Account policy like:\r\n+     * password expire time, change password at first access, ...\r\n+     */\r\n+    ACCOUNT(\"Account Policy\"),\r\n+    GLOBAL_ACCOUNT(\"Account Global Policy\"),\r\n+\r\n+    /**\r\n+     * Password policy regarding password syntax.\r\n+     */\r\n+    PASSWORD(\"Password Policy\"),\r\n+    GLOBAL_PASSWORD(\"Password Global Policy\"),\r\n+\r\n+    /**\r\n+     * SYNC policy regarding account conflicts resolution.\r\n+     */\r\n+    SYNC(\"Synchronization Policy\"),\r\n+    GLOBAL_SYNC(\"Synchronization Global Policy\");\r\n+\r\n+    private String description;\r\n+\r\n+    PolicyType(final String description) {\r\n+        this.description = description;\r\n+    }\r\n+\r\n+    public String getDescription() {\r\n+        return description;\r\n+    }\r\n+\r\n+    public static PolicyType fromString(String value) {\r\n+        return PolicyType.valueOf(value.toUpperCase());\r\n+    }\r\n+}\r"},{"sha":"b97017edb57823500ac94f39347655211050b5e4","filename":"common/src/main/java/org/apache/syncope/common/types/PropagationMode.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationMode.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationMode.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationMode.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,29 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum PropagationMode {\r\n+\r\n+    ONE_PHASE,\r\n+    TWO_PHASES\r\n+\r\n+}\r"},{"sha":"3d148e97b934e4edc61f4a32b346d2ddbfe80734","filename":"common/src/main/java/org/apache/syncope/common/types/PropagationTaskExecStatus.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationTaskExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationTaskExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationTaskExecStatus.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+/**\r\n+ * Status of a TaskExecution.\r\n+ *\r\n+ * CREATED -> SUBMITTED or UBSUBMITTED (depending on the external resource to\r\n+ * return success or failure).\r\n+ * SUBMITTED -> SUCCESS or FAILURE (depending on the external resource to\r\n+ * report success or failure).\r\n+ *\r\n+ * @see TaskExecution\r\n+ */\r\n+@XmlEnum\r\n+public enum PropagationTaskExecStatus {\r\n+\r\n+    CREATED,\r\n+    SUBMITTED,\r\n+    UNSUBMITTED,\r\n+    SUCCESS,\r\n+    FAILURE;\r\n+\r\n+    public boolean isSuccessful() {\r\n+        return this == SUCCESS || this == SUBMITTED;\r\n+    }\r\n+\r\n+    public static PropagationTaskExecStatus fromString(String value) {\r\n+        return PropagationTaskExecStatus.valueOf(value.toUpperCase());\r\n+    }\r\n+}\r"},{"sha":"f8a5a5ff28bbb8645408b71a18a4e48b2294b2d9","filename":"common/src/main/java/org/apache/syncope/common/types/ReportExecExportFormat.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecExportFormat.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecExportFormat.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecExportFormat.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum ReportExecExportFormat {\r\n+\r\n+    XML,\r\n+    HTML,\r\n+    PDF,\r\n+    RTF\r\n+\r\n+}\r"},{"sha":"8138252dd8b41475ccf7f3e7d1e513f4fcb270ab","filename":"common/src/main/java/org/apache/syncope/common/types/ReportExecStatus.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecStatus.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,34 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum ReportExecStatus {\r\n+\r\n+    STARTED,\r\n+    RUNNING,\r\n+    SUCCESS,\r\n+    FAILURE;\r\n+\r\n+    public static ReportExecStatus fromString(String value) {\r\n+        return ReportExecStatus.valueOf(value.toUpperCase());\r\n+    }\r\n+}\r"},{"sha":"68eff7810e3370fc7ffce05db847c4b9091a7216","filename":"common/src/main/java/org/apache/syncope/common/types/ResourceOperation.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum ResourceOperation {\r\n+\r\n+    CREATE,\r\n+    UPDATE,\r\n+    DELETE;\r\n+\r\n+    public static ResourceOperation fromString(String value) {\r\n+        return ResourceOperation.valueOf(value.toUpperCase());\r\n+    }\r\n+}\r"},{"sha":"4dd9065e41eb49e3e1941ee01c6ab0e3904c5179","filename":"common/src/main/java/org/apache/syncope/common/types/SchemaType.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+import org.apache.syncope.common.to.AbstractSchemaTO;\r\n+import org.apache.syncope.common.to.DerivedSchemaTO;\r\n+import org.apache.syncope.common.to.SchemaTO;\r\n+import org.apache.syncope.common.to.VirtualSchemaTO;\r\n+\r\n+@XmlEnum\r\n+public enum SchemaType {\r\n+\r\n+    /**\r\n+     * Standard schema for normal attributes to be stored within syncope.\r\n+     */\r\n+    NORMAL(\"schema\", SchemaTO.class),\r\n+    /**\r\n+     * Derived schema calculated based on other attributes.\r\n+     */\r\n+    DERIVED(\"derivedSchema\", DerivedSchemaTO.class),\r\n+    /**\r\n+     * Virtual schema for attributes fetched from remote resources only.\r\n+     */\r\n+    VIRTUAL(\"virtualSchema\", VirtualSchemaTO.class);\r\n+\r\n+    // TODO remove name once CXF migration is complete\r\n+    private final String name;\r\n+\r\n+    private final Class<? extends AbstractSchemaTO> toClass;\r\n+\r\n+    private SchemaType(final String name, final Class<? extends AbstractSchemaTO> toClass) {\r\n+        this.name = name;\r\n+        this.toClass = toClass;\r\n+    }\r\n+\r\n+    public String toSpringURL() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public Class<? extends AbstractSchemaTO> getToClass() {\r\n+        return toClass;\r\n+    }\r\n+}\r"},{"sha":"5c3566f6c15becf16201c5d4923c07686990493e","filename":"common/src/main/java/org/apache/syncope/common/types/SyncPolicySpec.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,110 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+import org.apache.syncope.common.annotation.ClassList;\r\n+import org.apache.syncope.common.annotation.SchemaList;\r\n+\r\n+@XmlType\r\n+public class SyncPolicySpec extends AbstractPolicySpec {\r\n+\r\n+    private static final long serialVersionUID = -3144027171719498127L;\r\n+\r\n+    /**\r\n+     * SyncopeUser attributes and fields for matching during synchronization.\r\n+     */\r\n+    @SchemaList(extended = true)\r\n+    private List<String> uAltSearchSchemas;\r\n+\r\n+    @ClassList\r\n+    private String userJavaRule;\r\n+\r\n+    /**\r\n+     * SyncopeRole attributes and fields for matching during synchronization.\r\n+     */\r\n+    @SchemaList(extended = true)\r\n+    private List<String> rAltSearchSchemas;\r\n+\r\n+    @ClassList\r\n+    private String roleJavaRule;\r\n+\r\n+    /**\r\n+     * Conflict resolution action.\r\n+     */\r\n+    private ConflictResolutionAction conflictResolutionAction;\r\n+\r\n+    public SyncPolicySpec() {\r\n+        super();\r\n+\r\n+        uAltSearchSchemas = new ArrayList<String>();\r\n+        rAltSearchSchemas = new ArrayList<String>();\r\n+    }\r\n+\r\n+    public ConflictResolutionAction getConflictResolutionAction() {\r\n+        return conflictResolutionAction == null\r\n+                ? ConflictResolutionAction.IGNORE\r\n+                : conflictResolutionAction;\r\n+    }\r\n+\r\n+    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\r\n+        this.conflictResolutionAction = conflictResolutionAction;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"userAltSearchSchemas\")\r\n+    @XmlElement(name = \"userAltSearchSchema\")\r\n+    public List<String> getuAltSearchSchemas() {\r\n+        return uAltSearchSchemas;\r\n+    }\r\n+\r\n+    public void setuAltSearchSchemas(List<String> uAltSearchSchemas) {\r\n+        this.uAltSearchSchemas = uAltSearchSchemas;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"roleAltSearchSchemas\")\r\n+    @XmlElement(name = \"roleAltSearchSchema\")\r\n+    public List<String> getrAltSearchSchemas() {\r\n+        return rAltSearchSchemas;\r\n+    }\r\n+\r\n+    public void setrAltSearchSchemas(List<String> rAltSearchSchemas) {\r\n+        this.rAltSearchSchemas = rAltSearchSchemas;\r\n+    }\r\n+\r\n+\r\n+    public String getRoleJavaRule() {\r\n+        return roleJavaRule;\r\n+    }\r\n+\r\n+    public void setRoleJavaRule(String roleJavaRule) {\r\n+        this.roleJavaRule = roleJavaRule;\r\n+    }\r\n+\r\n+    public String getUserJavaRule() {\r\n+        return userJavaRule;\r\n+    }\r\n+\r\n+    public void setUserJavaRule(String userJavaRule) {\r\n+        this.userJavaRule = userJavaRule;\r\n+    }\r\n+}\r"},{"sha":"0dd4ca5762be3caf3a30232f1b1907241b13cab1","filename":"common/src/main/java/org/apache/syncope/common/types/SyncopeClientExceptionType.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,102 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum SyncopeClientExceptionType {\r\n+\r\n+    AssociatedResources(\"Syncope.AssociatedResources\", \"Syncope.AssociatedResources.name\"),\r\n+    Deadlock(\"Syncope.Deadlock\", \"\"),\r\n+    DataIntegrityViolation(\"Syncope.DataIntegrityViolation\", \"Syncope.DataIntegrityViolation.name\"),\r\n+    EntityExists(\"Syncope.EntityExists\", \"Syncope.EntityExists.name\"),\r\n+    GenericPersistence(\"Syncope.GenericPersistence\", \"Syncope.GenericPersistence.cause\"),\r\n+    InvalidLogger(\"Syncope.InvalidLogger\", \"Syncope.InvalidLogger.message\"),\r\n+    InvalidConnInstance(\"Syncope.InvalidConnInstance\", \"Syncope.InvalidConnInstance.message\"),\r\n+    InvalidConnIdConf(\"Syncope.InvalidConnIdConf\", \"Syncope.InvalidConnIdConf.message\"),\r\n+    InvalidPasswordPolicy(\"Syncope.InvalidPasswordPolicy\", \"Syncope.InvalidPasswordPolicy.reason\"),\r\n+    InvalidAccountPolicy(\"Syncope.InvalidAccountPolicy\", \"Syncope.InvalidAccountPolicy.reason\"),\r\n+    InvalidSyncPolicy(\"Syncope.InvalidSyncPolicy\", \"Syncope.InvalidSyncPolicy.reason\"),\r\n+    InvalidSyncopeRole(\"Syncope.InvalidSyncopeRole\", \"Syncope.InvalidSyncopeRole.reason\"),\r\n+    InvalidReportExec(\"Syncope.InvalidReportExec\", \"Syncope.InvalidReportExec.reason\"),\r\n+    InvalidRoles(\"Syncope.InvalidRoles\", \"Syncope.InvalidRoles.name\"),\r\n+    InvalidSchemaDefinition(\"Syncope.InvalidSchemaDefinition\", \"\"),\r\n+    InvalidSearchCondition(\"Syncope.InvalidSearchCondition\", \"\"),\r\n+    InvalidPropagationTaskExecReport(\r\n+    \"Syncope.InvalidPropagationTaskExecReport\",\r\n+    \"Syncope.InvalidPropagationTaskExecReport.element\"),\r\n+    InvalidUSchema(\"Syncope.InvalidUSchemaUpdate\", \"Syncope.InvalidUSchemaUpdate.name\"),\r\n+    InvalidUDerSchema(\"Syncope.InvalidUDerSchemaUpdate\", \"Syncope.InvalidUDerSchemaUpdate.name\"),\r\n+    InvalidUVirSchema(\"Syncope.InvalidUVirSchemaUpdate\", \"Syncope.InvalidUVirSchemaUpdate.name\"),\r\n+    InvalidRSchema(\"Syncope.InvalidRSchemaUpdate\", \"Syncope.InvalidRSchemaUpdate.name\"),\r\n+    InvalidRDerSchema(\"Syncope.InvalidRDerSchemaUpdate\", \"Syncope.InvalidRDerSchemaUpdate.name\"),\r\n+    InvalidRVirSchema(\"Syncope.InvalidRVirSchemaUpdate\", \"Syncope.InvalidRVirSchemaUpdate.name\"),\r\n+    InvalidMSchema(\"Syncope.InvalidMSchemaUpdate\", \"Syncope.InvalidMSchemaUpdate.name\"),\r\n+    InvalidMDerSchema(\"Syncope.InvalidMDerSchemaUpdate\", \"Syncope.InvalidMDerSchemaUpdate.name\"),\r\n+    InvalidMVirSchema(\"Syncope.InvalidMVirSchemaUpdate\", \"Syncope.InvalidMVirSchemaUpdate.name\"),\r\n+    InvalidSchemaMapping(\"Syncope.InvalidSchemaMapping\", \"\"),\r\n+    InvalidSyncopeUser(\"Syncope.InvalidSyncopeUser\", \"Syncope.InvalidSyncopeUser.element\"),\r\n+    InvalidExternalResource(\"Syncope.InvalidExternalResource\", \"Syncope.InvalidExternalResource.element\"),\r\n+    InvalidNotification(\"Syncope.InvalidNotification\", \"Syncope.InvalidNotification.element\"),\r\n+    InvalidPropagationTask(\"Syncope.InvalidPropagationTask\", \"Syncope.InvalidPropagationTask.element\"),\r\n+    InvalidSchedTask(\"Syncope.InvalidSchedTask\", \"Syncope.InvalidSchedTask.element\"),\r\n+    InvalidSyncTask(\"Syncope.InvalidSyncTask\", \"Syncope.InvalidSyncTask.element\"),\r\n+    InvalidValues(\"Syncope.InvalidValues\", \"Syncope.InvalidValues.attributeName\"),\r\n+    NotFound(\"Syncope.NotFound\", \"Syncope.NotFound.entity\"),\r\n+    Propagation(\"Syncope.Propagation\", \"Syncope.Propagation.resourceName\"),\r\n+    RejectedUserCreate(\"Syncope.RejectUserCreate\", \"Syncope.RejectUserCreate.userId\"),\r\n+    RequiredValuesMissing(\"Syncope.RequiredValuesMissing\", \"Syncope.RequiredValuesMissing.attributeName\"),\r\n+    Scheduling(\"Syncope.Scheduling\", \"Syncope.Scheduling.message\"),\r\n+    UnauthorizedRole(\"Syncope.UnauthorizedRole\", \"Syncope.UnauthorizedRole.id\"),\r\n+    Unknown(\"Syncope.Unknown\", \"\"),\r\n+    Workflow(\"Syncope.Workflow\", \"Syncope.Workflow.message\");\r\n+\r\n+    private String headerValue;\r\n+\r\n+    private String elementHeaderName;\r\n+\r\n+    private SyncopeClientExceptionType(final String headerValue, final String elementHeaderName) {\r\n+        this.headerValue = headerValue;\r\n+        this.elementHeaderName = elementHeaderName;\r\n+    }\r\n+\r\n+    public static SyncopeClientExceptionType getFromHeaderValue(final String exceptionTypeHeaderValue) {\r\n+        SyncopeClientExceptionType result = null;\r\n+        for (SyncopeClientExceptionType syncopeClientExceptionType : values()) {\r\n+            if (exceptionTypeHeaderValue.equals(syncopeClientExceptionType.getHeaderValue())) {\r\n+                result = syncopeClientExceptionType;\r\n+            }\r\n+        }\r\n+\r\n+        if (result == null) {\r\n+            throw new IllegalArgumentException(\"Unexpected header value: \" + exceptionTypeHeaderValue);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    public String getElementHeaderName() {\r\n+        return elementHeaderName;\r\n+    }\r\n+\r\n+    public String getHeaderValue() {\r\n+        return headerValue;\r\n+    }\r\n+}\r"},{"sha":"330fd942149fb4ec30edf8fd3ff5b5b66cc08f61","filename":"common/src/main/java/org/apache/syncope/common/types/SyncopeLoggerLevel.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeLoggerLevel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeLoggerLevel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeLoggerLevel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+import ch.qos.logback.classic.Level;\r\n+\r\n+@XmlEnum\r\n+public enum SyncopeLoggerLevel {\r\n+\r\n+    OFF(Level.OFF),\r\n+    ERROR(Level.ERROR),\r\n+    WARN(Level.WARN),\r\n+    INFO(Level.INFO),\r\n+    DEBUG(Level.DEBUG),\r\n+    TRACE(Level.TRACE),\r\n+    ALL(Level.ALL);\r\n+\r\n+    private Level level;\r\n+\r\n+    SyncopeLoggerLevel(final Level level) {\r\n+        this.level = level;\r\n+    }\r\n+\r\n+    public Level getLevel() {\r\n+        return level;\r\n+    }\r\n+\r\n+    public static SyncopeLoggerLevel fromLevel(final Level level) {\r\n+        SyncopeLoggerLevel result;\r\n+        if (level.equals(Level.OFF)) {\r\n+            result = OFF;\r\n+        } else if (level.equals(Level.ERROR)) {\r\n+            result = ERROR;\r\n+        } else if (level.equals(Level.WARN)) {\r\n+            result = WARN;\r\n+        } else if (level.equals(Level.INFO)) {\r\n+            result = INFO;\r\n+        } else if (level.equals(Level.DEBUG)) {\r\n+            result = DEBUG;\r\n+        } else if (level.equals(Level.TRACE)) {\r\n+            result = TRACE;\r\n+        } else if (level.equals(Level.ALL)) {\r\n+            result = ALL;\r\n+        } else {\r\n+            throw new IllegalArgumentException(\"Undefined Level \" + level);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+}\r"},{"sha":"dc51384d35e0c0abc906d2c6617924a25074e88c","filename":"common/src/main/java/org/apache/syncope/common/types/SyncopeLoggerType.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeLoggerType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeLoggerType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeLoggerType.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum SyncopeLoggerType {\r\n+\r\n+    LOG(\"\"),\r\n+    AUDIT(\"syncope.audit\");\r\n+\r\n+    private String prefix;\r\n+\r\n+    SyncopeLoggerType(final String prefix) {\r\n+        this.prefix = prefix;\r\n+    }\r\n+\r\n+    public String getPrefix() {\r\n+        return prefix;\r\n+    }\r\n+}\r"},{"sha":"51ebc05020fea509ed07fefb44d1a6cf055cfaa7","filename":"common/src/main/java/org/apache/syncope/common/types/TaskType.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTaskType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTaskType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTaskType.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum TaskType {\r\n+\r\n+    PROPAGATION(\"propagation\"),\r\n+    NOTIFICATION(\"notification\"),\r\n+    SCHEDULED(\"sched\"),\r\n+    SYNCHRONIZATION(\"sync\");\r\n+\r\n+    private String name;\r\n+\r\n+    private TaskType(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public static TaskType fromString(String name) {\r\n+        if (name != null) {\r\n+            for (TaskType t : TaskType.values()) {\r\n+                if (t.name.equalsIgnoreCase(name)) {\r\n+                    return t;\r\n+                }\r\n+            }\r\n+        }\r\n+        return TaskType.valueOf(name.toUpperCase());\r\n+    }\r\n+}\r"},{"sha":"6e436c2444bf09320b8ebbdc9e919f6ee800eac6","filename":"common/src/main/java/org/apache/syncope/common/types/TraceLevel.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTraceLevel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTraceLevel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTraceLevel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum TraceLevel {\r\n+\r\n+    /**\r\n+     * No details at all.\r\n+     */\r\n+    NONE,\r\n+    /**\r\n+     * Only failed entries.\r\n+     */\r\n+    FAILURES,\r\n+    /**\r\n+     * Only an overall summary.\r\n+     */\r\n+    SUMMARY,\r\n+    /**\r\n+     * All available information, including per-entry information.\r\n+     */\r\n+    ALL\r\n+\r\n+}\r"},{"sha":"760782cb81fddcecfb18791aaf310e06bbe4b21b","filename":"common/src/main/java/org/apache/syncope/common/types/UserRequestType.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUserRequestType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUserRequestType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUserRequestType.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,34 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum UserRequestType {\r\n+\r\n+    CREATE,\r\n+    UPDATE,\r\n+    DELETE;\r\n+\r\n+    public static UserRequestType fromString(String value) {\r\n+        return UserRequestType.valueOf(value.toUpperCase());\r\n+    }\r\n+\r\n+}\r"},{"sha":"01cad9c72ee5e11a3129f8243825bd956c7a5b55","filename":"common/src/main/java/org/apache/syncope/common/types/WorkflowFormPropertyType.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FWorkflowFormPropertyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FWorkflowFormPropertyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FWorkflowFormPropertyType.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,32 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public enum WorkflowFormPropertyType {\r\n+\r\n+    String,\r\n+    Long,\r\n+    Enum,\r\n+    Date,\r\n+    Boolean\r\n+\r\n+}\r"},{"sha":"b6795d30b871b7527222354dc946f0834b8e3da6","filename":"common/src/main/java/org/apache/syncope/common/types/package-info.java","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2Fpackage-info.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,19 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r"},{"sha":"c99f58fa1306215e6fb4389d9f948d5a567236a8","filename":"common/src/main/java/org/apache/syncope/common/util/AttributableOperations.java","status":"added","additions":412,"deletions":0,"changes":412,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,412 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.util;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import org.apache.commons.lang.SerializationUtils;\r\n+import org.apache.syncope.common.mod.AbstractAttributableMod;\r\n+import org.apache.syncope.common.mod.AttributeMod;\r\n+import org.apache.syncope.common.mod.MembershipMod;\r\n+import org.apache.syncope.common.mod.ReferenceMod;\r\n+import org.apache.syncope.common.mod.RoleMod;\r\n+import org.apache.syncope.common.mod.UserMod;\r\n+import org.apache.syncope.common.to.AbstractAttributableTO;\r\n+import org.apache.syncope.common.to.AttributeTO;\r\n+import org.apache.syncope.common.to.MembershipTO;\r\n+import org.apache.syncope.common.to.RoleTO;\r\n+import org.apache.syncope.common.to.UserTO;\r\n+\r\n+/**\r\n+ * Utility class for manipulating classes extending AbstractAttributableTO and AbstractAttributableMod.\r\n+ *\r\n+ * @see AbstractAttributableTO\r\n+ * @see AbstractAttributableMod\r\n+ */\r\n+public final class AttributableOperations {\r\n+\r\n+    private AttributableOperations() {\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public static <T extends AbstractAttributableTO> T clone(final T original) {\r\n+        return (T) SerializationUtils.clone(original);\r\n+    }\r\n+\r\n+    private static void populate(final Map<String, AttributeTO> updatedAttrs,\r\n+            final Map<String, AttributeTO> originalAttrs, final AbstractAttributableMod result) {\r\n+        populate(updatedAttrs, originalAttrs, result, false);\r\n+    }\r\n+\r\n+    private static void populate(final Map<String, AttributeTO> updatedAttrs,\r\n+            final Map<String, AttributeTO> originalAttrs, final AbstractAttributableMod result, final boolean virtuals) {\r\n+\r\n+        for (Map.Entry<String, AttributeTO> entry : updatedAttrs.entrySet()) {\r\n+            AttributeMod mod = new AttributeMod();\r\n+            mod.setSchema(entry.getKey());\r\n+\r\n+            Set<String> updatedValues = new HashSet<String>(entry.getValue().getValues());\r\n+\r\n+            Set<String> originalValues = originalAttrs.containsKey(entry.getKey())\r\n+                    ? new HashSet<String>(originalAttrs.get(entry.getKey()).getValues())\r\n+                    : Collections.<String>emptySet();\r\n+\r\n+            if (!updatedValues.equals(originalValues)) {\r\n+                // avoid unwanted inputs\r\n+                updatedValues.remove(\"\");\r\n+                if (!entry.getValue().isReadonly()) {\r\n+                    mod.setValuesToBeAdded(new ArrayList<String>(updatedValues));\r\n+\r\n+                    if (!mod.isEmpty()) {\r\n+                        if (virtuals) {\r\n+                            result.addVirtualAttributeToBeRemoved(mod.getSchema());\r\n+                        } else {\r\n+                            result.addAttributeToBeRemoved(mod.getSchema());\r\n+                        }\r\n+                    }\r\n+                }\r\n+\r\n+                mod.setValuesToBeRemoved(new ArrayList<String>(originalValues));\r\n+\r\n+                if (!mod.isEmpty()) {\r\n+                    if (virtuals) {\r\n+                        result.addVirtualAttributeToBeUpdated(mod);\r\n+                    } else {\r\n+                        result.addAttributeToBeUpdated(mod);\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private static void diff(\r\n+            final AbstractAttributableTO updated,\r\n+            final AbstractAttributableTO original,\r\n+            final AbstractAttributableMod result,\r\n+            final boolean incremental) {\r\n+\r\n+        // 1. check same id\r\n+        if (updated.getId() != original.getId()) {\r\n+            throw new IllegalArgumentException(\"AttributableTO's id must be the same\");\r\n+        }\r\n+        result.setId(updated.getId());\r\n+\r\n+        // 2. attributes\r\n+        Map<String, AttributeTO> updatedAttrs = new HashMap<String, AttributeTO>(updated.getAttributeMap());\r\n+        Map<String, AttributeTO> originalAttrs = new HashMap<String, AttributeTO>(original.getAttributeMap());\r\n+\r\n+        Set<String> originalAttrNames = new HashSet<String>(originalAttrs.keySet());\r\n+        originalAttrNames.removeAll(updatedAttrs.keySet());\r\n+\r\n+        if (!incremental) {\r\n+            result.setAttributesToBeRemoved(originalAttrNames);\r\n+        }\r\n+\r\n+        Set<String> emptyUpdatedAttrs = new HashSet<String>();\r\n+        for (Map.Entry<String, AttributeTO> entry : updatedAttrs.entrySet()) {\r\n+            if (entry.getValue().getValues() == null || entry.getValue().getValues().isEmpty()) {\r\n+\r\n+                emptyUpdatedAttrs.add(entry.getKey());\r\n+            }\r\n+        }\r\n+        for (String emptyUpdatedAttr : emptyUpdatedAttrs) {\r\n+            updatedAttrs.remove(emptyUpdatedAttr);\r\n+            result.addAttributeToBeRemoved(emptyUpdatedAttr);\r\n+        }\r\n+\r\n+        populate(updatedAttrs, originalAttrs, result);\r\n+\r\n+        // 3. derived attributes\r\n+        updatedAttrs = updated.getDerivedAttributeMap();\r\n+        originalAttrs = original.getDerivedAttributeMap();\r\n+\r\n+        originalAttrNames = new HashSet<String>(originalAttrs.keySet());\r\n+        originalAttrNames.removeAll(updatedAttrs.keySet());\r\n+\r\n+        if (!incremental) {\r\n+            result.setDerivedAttributesToBeRemoved(originalAttrNames);\r\n+        }\r\n+\r\n+        Set<String> updatedAttrNames = new HashSet<String>(updatedAttrs.keySet());\r\n+        updatedAttrNames.removeAll(originalAttrs.keySet());\r\n+        result.setDerivedAttributesToBeAdded(updatedAttrNames);\r\n+\r\n+        // 4. virtual attributes\r\n+        updatedAttrs = updated.getVirtualAttributeMap();\r\n+        originalAttrs = original.getVirtualAttributeMap();\r\n+\r\n+        originalAttrNames = new HashSet<String>(originalAttrs.keySet());\r\n+        originalAttrNames.removeAll(updatedAttrs.keySet());\r\n+\r\n+        if (!incremental) {\r\n+            result.setVirtualAttributesToBeRemoved(originalAttrNames);\r\n+        }\r\n+\r\n+        populate(updatedAttrs, originalAttrs, result, true);\r\n+\r\n+        // 5. resources\r\n+        Set<String> updatedRes = new HashSet<String>(updated.getResources());\r\n+        Set<String> originalRes = new HashSet<String>(original.getResources());\r\n+\r\n+        updatedRes.removeAll(originalRes);\r\n+        result.setResourcesToBeAdded(updatedRes);\r\n+\r\n+        originalRes.removeAll(updated.getResources());\r\n+\r\n+        if (!incremental) {\r\n+            result.setResourcesToBeRemoved(originalRes);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Calculate modifications needed by first in order to be equal to second.\r\n+     *\r\n+     * @param updated updated UserTO\r\n+     * @param original original UserTO\r\n+     * @return UserMod containing differences\r\n+     */\r\n+    public static UserMod diff(final UserTO updated, final UserTO original) {\r\n+        return diff(updated, original, false);\r\n+    }\r\n+\r\n+    /**\r\n+     * Calculate modifications needed by first in order to be equal to second.\r\n+     *\r\n+     * @param updated updated UserTO\r\n+     * @param original original UserTO\r\n+     * @param incremental perform incremental diff (without removing existing info)\r\n+     * @return UserMod containing differences\r\n+     */\r\n+    public static UserMod diff(final UserTO updated, final UserTO original, final boolean incremental) {\r\n+        UserMod result = new UserMod();\r\n+\r\n+        diff(updated, original, result, incremental);\r\n+\r\n+        // 1. password\r\n+        if (original.getPassword() != null && !original.getPassword().equals(updated.getPassword())) {\r\n+            result.setPassword(updated.getPassword());\r\n+        }\r\n+\r\n+        // 2. username\r\n+        if (original.getUsername() != null && !original.getUsername().equals(updated.getUsername())) {\r\n+            result.setUsername(updated.getUsername());\r\n+        }\r\n+\r\n+        // 3. memberships\r\n+        Map<Long, MembershipTO> updatedMembs = updated.getMembershipMap();\r\n+        Map<Long, MembershipTO> originalMembs = original.getMembershipMap();\r\n+\r\n+        for (Map.Entry<Long, MembershipTO> entry : updatedMembs.entrySet()) {\r\n+            MembershipMod membMod = new MembershipMod();\r\n+            membMod.setRole(entry.getValue().getRoleId());\r\n+\r\n+            if (originalMembs.containsKey(entry.getKey())) {\r\n+                diff(entry.getValue(), originalMembs.get(entry.getKey()), membMod, false);\r\n+            } else {\r\n+                for (AttributeTO attr : entry.getValue().getAttributes()) {\r\n+\r\n+                    AttributeMod attrMod = new AttributeMod();\r\n+                    attrMod.setSchema(attr.getSchema());\r\n+                    attrMod.setValuesToBeAdded(attr.getValues());\r\n+\r\n+                    if (!attrMod.isEmpty()) {\r\n+                        membMod.addAttributeToBeUpdated(attrMod);\r\n+                        membMod.addAttributeToBeRemoved(attrMod.getSchema());\r\n+                    }\r\n+                }\r\n+                for (AttributeTO attr : entry.getValue().getDerivedAttributes()) {\r\n+\r\n+                    membMod.addDerivedAttributeToBeAdded(attr.getSchema());\r\n+                }\r\n+                for (AttributeTO attr : entry.getValue().getVirtualAttributes()) {\r\n+\r\n+                    AttributeMod attrMod = new AttributeMod();\r\n+                    attrMod.setSchema(attr.getSchema());\r\n+                    attrMod.setValuesToBeAdded(attr.getValues());\r\n+\r\n+                    if (!attrMod.isEmpty()) {\r\n+                        membMod.addVirtualAttributeToBeUpdated(attrMod);\r\n+                        membMod.addAttributeToBeRemoved(attrMod.getSchema());\r\n+                    }\r\n+                }\r\n+                membMod.setResourcesToBeAdded(entry.getValue().getResources());\r\n+            }\r\n+\r\n+            if (!membMod.isEmpty()) {\r\n+                result.addMembershipToBeAdded(membMod);\r\n+            }\r\n+        }\r\n+\r\n+        if (!incremental) {\r\n+            Set<Long> originalRoles = new HashSet<Long>(originalMembs.keySet());\r\n+            originalRoles.removeAll(updatedMembs.keySet());\r\n+            for (Long roleId : originalRoles) {\r\n+                result.addMembershipToBeRemoved(originalMembs.get(roleId).getId());\r\n+            }\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Calculate modifications needed by first in order to be equal to second.\r\n+     *\r\n+     * @param updated updated RoleTO\r\n+     * @param original original RoleTO\r\n+     * @return RoleMod containing differences\r\n+     */\r\n+    public static RoleMod diff(final RoleTO updated, final RoleTO original) {\r\n+        return diff(updated, original, false);\r\n+    }\r\n+\r\n+    /**\r\n+     * Calculate modifications needed by first in order to be equal to second.\r\n+     *\r\n+     * @param updated updated RoleTO\r\n+     * @param original original RoleTO\r\n+     * @param incremental perform incremental diff (without removing existing info)\r\n+     * @return RoleMod containing differences\r\n+     */\r\n+    public static RoleMod diff(final RoleTO updated, final RoleTO original, final boolean incremental) {\r\n+        RoleMod result = new RoleMod();\r\n+\r\n+        diff(updated, original, result, incremental);\r\n+\r\n+        // 1. inheritance\r\n+        result.setInheritOwner(updated.isInheritOwner());\r\n+        result.setInheritAccountPolicy(updated.isInheritAccountPolicy());\r\n+        result.setInheritPasswordPolicy(updated.isInheritPasswordPolicy());\r\n+        result.setInheritAttributes(updated.isInheritAttributes());\r\n+        result.setInheritDerivedAttributes(updated.isInheritDerivedAttributes());\r\n+        result.setInheritVirtualAttributes(updated.isInheritVirtualAttributes());\r\n+\r\n+        // 2. policies\r\n+        result.setAccountPolicy(new ReferenceMod(updated.getAccountPolicy()));\r\n+        result.setPasswordPolicy(new ReferenceMod(updated.getPasswordPolicy()));\r\n+\r\n+        // 3. name\r\n+        if (!original.getName().equals(updated.getName())) {\r\n+            result.setName(updated.getName());\r\n+        }\r\n+\r\n+        // 4. entitlements\r\n+        Set<String> updatedEnts = new HashSet<String>(updated.getEntitlements());\r\n+        Set<String> originalEnts = new HashSet<String>(original.getEntitlements());\r\n+        if (updatedEnts.equals(originalEnts)) {\r\n+            result.setEntitlements(null);\r\n+        } else {\r\n+            result.setEntitlements(updated.getEntitlements());\r\n+        }\r\n+\r\n+        // 5. owner\r\n+        result.setUserOwner(new ReferenceMod(updated.getUserOwner()));\r\n+        result.setRoleOwner(new ReferenceMod(updated.getRoleOwner()));\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    private static List<AttributeTO> getUpdateValues(final Map<String, AttributeTO> attrs,\r\n+            final Set<String> attrsToBeRemoved, final Set<AttributeMod> attrsToBeUpdated) {\r\n+\r\n+        Map<String, AttributeTO> rwattrs = new HashMap<String, AttributeTO>(attrs);\r\n+        for (String attrName : attrsToBeRemoved) {\r\n+            rwattrs.remove(attrName);\r\n+        }\r\n+        for (AttributeMod attrMod : attrsToBeUpdated) {\r\n+            if (rwattrs.containsKey(attrMod.getSchema())) {\r\n+                AttributeTO attrTO = rwattrs.get(attrMod.getSchema());\r\n+                attrTO.getValues().removeAll(attrMod.getValuesToBeRemoved());\r\n+                attrTO.getValues().addAll(attrMod.getValuesToBeAdded());\r\n+            } else {\r\n+                AttributeTO attrTO = new AttributeTO();\r\n+                attrTO.setSchema(attrMod.getSchema());\r\n+                attrTO.setValues(attrMod.getValuesToBeAdded());\r\n+\r\n+                rwattrs.put(attrMod.getSchema(), attrTO);\r\n+            }\r\n+        }\r\n+\r\n+        return new ArrayList<AttributeTO>(rwattrs.values());\r\n+    }\r\n+\r\n+    private static <T extends AbstractAttributableTO, K extends AbstractAttributableMod> void apply(final T to,\r\n+            final K mod, final T result) {\r\n+\r\n+        // 1. attributes\r\n+        result.setAttributes(getUpdateValues(to.getAttributeMap(), mod.getAttributesToBeRemoved(), mod.\r\n+                getAttributesToBeUpdated()));\r\n+\r\n+        // 2. derived attributes\r\n+        Map<String, AttributeTO> attrs = to.getDerivedAttributeMap();\r\n+        for (String attrName : mod.getDerivedAttributesToBeRemoved()) {\r\n+            attrs.remove(attrName);\r\n+        }\r\n+        for (String attrName : mod.getDerivedAttributesToBeAdded()) {\r\n+            AttributeTO attrTO = new AttributeTO();\r\n+            attrTO.setSchema(attrName);\r\n+\r\n+            attrs.put(attrName, attrTO);\r\n+        }\r\n+        result.setDerivedAttributes(new ArrayList<AttributeTO>(attrs.values()));\r\n+\r\n+        // 3. virtual attributes\r\n+        result.setVirtualAttributes(getUpdateValues(to.getVirtualAttributeMap(), mod.getVirtualAttributesToBeRemoved(),\r\n+                mod.getVirtualAttributesToBeUpdated()));\r\n+\r\n+        // 4. resources\r\n+        result.getResources().removeAll(mod.getResourcesToBeRemoved());\r\n+        result.getResources().addAll(mod.getResourcesToBeAdded());\r\n+    }\r\n+\r\n+    public static UserTO apply(final UserTO userTO, final UserMod userMod) {\r\n+        // 1. check same id\r\n+        if (userTO.getId() != userMod.getId()) {\r\n+            throw new IllegalArgumentException(\"UserTO and UserMod ids must be the same\");\r\n+        }\r\n+\r\n+        UserTO result = clone(userTO);\r\n+        apply(userTO, userMod, result);\r\n+\r\n+        // 1. password\r\n+        result.setPassword(userMod.getPassword());\r\n+\r\n+        // 2. username\r\n+        if (userMod.getUsername() != null) {\r\n+            result.setUsername(userMod.getUsername());\r\n+        }\r\n+        // 3. memberships\r\n+        Map<Long, MembershipTO> membs = result.getMembershipMap();\r\n+        for (Long membId : userMod.getMembershipsToBeRemoved()) {\r\n+            result.removeMembership(membs.get(membId));\r\n+        }\r\n+        for (MembershipMod membMod : userMod.getMembershipsToBeAdded()) {\r\n+            MembershipTO membTO = new MembershipTO();\r\n+            membTO.setRoleId(membMod.getRole());\r\n+\r\n+            apply(membTO, membMod, membTO);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+}\r"},{"sha":"cde9d925b455b8d1ea2ed375b6e1ca5bde70681f","filename":"common/src/main/java/org/apache/syncope/common/util/CollectionWrapper.java","status":"added","additions":183,"deletions":0,"changes":183,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,183 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.util;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n+import org.apache.syncope.common.to.EntitlementTO;\r\n+import org.apache.syncope.common.to.JobClassTO;\r\n+import org.apache.syncope.common.to.LoggerTO;\r\n+import org.apache.syncope.common.to.MailTemplateTO;\r\n+import org.apache.syncope.common.to.PropagationActionClassTO;\r\n+import org.apache.syncope.common.to.SyncActionClassTO;\r\n+import org.apache.syncope.common.to.ValidatorTO;\r\n+import org.apache.syncope.common.types.AuditLoggerName;\r\n+import org.apache.syncope.common.types.SyncopeLoggerLevel;\r\n+import org.springframework.web.servlet.ModelAndView;\r\n+\r\n+public final class CollectionWrapper {\r\n+\r\n+    private CollectionWrapper() {\r\n+        // empty constructor for static utility class\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public static List<String> wrapStrings(final ModelAndView modelAndView) {\r\n+        return (List<String>) modelAndView.getModel().values().iterator().next();\r\n+    }\r\n+\r\n+    public static Set<EntitlementTO> wrap(final Collection<String> collection) {\r\n+        Set<EntitlementTO> respons = new HashSet<EntitlementTO>();\r\n+        for (String e : collection) {\r\n+            respons.add(EntitlementTO.instance(e));\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static Set<String> unwrap(final Collection<EntitlementTO> collection) {\r\n+        Set<String> respons = new HashSet<String>();\r\n+        for (EntitlementTO e : collection) {\r\n+            respons.add(e.getName());\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static Set<MailTemplateTO> wrapMailTemplates(final Collection<String> collection) {\r\n+        Set<MailTemplateTO> respons = new HashSet<MailTemplateTO>();\r\n+        for (String e : collection) {\r\n+            respons.add(MailTemplateTO.instance(e));\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static List<String> unwrapMailTemplates(final Collection<MailTemplateTO> collection) {\r\n+        List<String> respons = new ArrayList<String>();\r\n+        for (MailTemplateTO e : collection) {\r\n+            respons.add(e.getName());\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static Set<ValidatorTO> wrapValidators(final Collection<String> validators) {\r\n+        Set<ValidatorTO> respons = new HashSet<ValidatorTO>();\r\n+        for (String validator : validators) {\r\n+            respons.add(ValidatorTO.instance(validator));\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static List<String> unwrapValidator(final Collection<ValidatorTO> collection) {\r\n+        List<String> respons = new ArrayList<String>();\r\n+        for (ValidatorTO e : collection) {\r\n+            respons.add(e.getName());\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static List<AuditLoggerName> wrapLogger(final Collection<LoggerTO> logger) {\r\n+        List<AuditLoggerName> respons = new ArrayList<AuditLoggerName>();\r\n+        for (LoggerTO l : logger) {\r\n+            try {\r\n+                respons.add(AuditLoggerName.fromLoggerName(l.getName()));\r\n+            } catch (Exception e) {\r\n+                //TODO log event\r\n+            }\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static List<LoggerTO> unwrapLogger(final Collection<AuditLoggerName> auditNames) {\r\n+        List<LoggerTO> respons = new ArrayList<LoggerTO>();\r\n+        for (AuditLoggerName l : auditNames) {\r\n+            LoggerTO loggerTO = new LoggerTO();\r\n+            loggerTO.setName(l.toLoggerName());\r\n+            loggerTO.setLevel(SyncopeLoggerLevel.DEBUG);\r\n+            respons.add(loggerTO);\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static Set<JobClassTO> wrapJobClasses(final Collection<String> classes) {\r\n+        Set<JobClassTO> respons = new HashSet<JobClassTO>();\r\n+        for (String cl : classes) {\r\n+            respons.add(JobClassTO.instance(cl));\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static List<String> unwrapJobClasses(final Collection<JobClassTO> jobClasses) {\r\n+        List<String> respons = new ArrayList<String>();\r\n+        for (JobClassTO e : jobClasses) {\r\n+            respons.add(e.getName());\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static Set<SyncActionClassTO> wrapSyncActionClasses(final Collection<String> classes) {\r\n+        Set<SyncActionClassTO> respons = new HashSet<SyncActionClassTO>();\r\n+        for (String cl : classes) {\r\n+            respons.add(SyncActionClassTO.instance(cl));\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static List<String> unwrapSyncActionClasses(final Collection<SyncActionClassTO> actions) {\r\n+        List<String> respons = new ArrayList<String>();\r\n+        for (SyncActionClassTO e : actions) {\r\n+            respons.add(e.getName());\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static Set<PropagationActionClassTO> wrapPropagationActionClasses(final Collection<String> classes) {\r\n+        Set<PropagationActionClassTO> respons = new HashSet<PropagationActionClassTO>();\r\n+        for (String cl : classes) {\r\n+            respons.add(PropagationActionClassTO.instance(cl));\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static List<String> unwrapPropagationActionClasses(final Collection<PropagationActionClassTO> actions) {\r\n+        List<String> respons = new ArrayList<String>();\r\n+        for (PropagationActionClassTO e : actions) {\r\n+            respons.add(e.getName());\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static Set<CorrelationRuleClassTO> wrapSyncCorrelationRuleClasses(final Collection<String> classes) {\r\n+        Set<CorrelationRuleClassTO> respons = new HashSet<CorrelationRuleClassTO>();\r\n+        for (String cl : classes) {\r\n+            respons.add(CorrelationRuleClassTO.instance(cl));\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static List<String> unwrapSyncCorrelationRuleClasses(final Collection<CorrelationRuleClassTO> actions) {\r\n+        List<String> respons = new ArrayList<String>();\r\n+        for (CorrelationRuleClassTO e : actions) {\r\n+            respons.add(e.getName());\r\n+        }\r\n+        return respons;\r\n+    }\r\n+}\r"},{"sha":"a1bc50a499d679b1411546ab44ec2968af186f01","filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientCompositeErrorException.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeErrorException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeErrorException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeErrorException.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,101 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.validation;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Iterator;\r\n+import java.util.Set;\r\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n+import org.springframework.http.HttpStatus;\r\n+import org.springframework.web.client.HttpClientErrorException;\r\n+\r\n+public class SyncopeClientCompositeErrorException extends HttpClientErrorException {\r\n+\r\n+    private static final long serialVersionUID = 7882118041134372129L;\r\n+\r\n+    private Set<SyncopeClientException> exceptions;\r\n+\r\n+    public SyncopeClientCompositeErrorException(HttpStatus statusCode) {\r\n+        super(statusCode);\r\n+        exceptions = new HashSet<SyncopeClientException>();\r\n+    }\r\n+\r\n+    public boolean hasExceptions() {\r\n+        return !exceptions.isEmpty();\r\n+    }\r\n+\r\n+    public boolean hasException(SyncopeClientExceptionType exceptionType) {\r\n+        return getException(exceptionType) != null;\r\n+    }\r\n+\r\n+    public SyncopeClientException getException(SyncopeClientExceptionType exceptionType) {\r\n+        boolean found = false;\r\n+        SyncopeClientException syncopeClientException = null;\r\n+        for (Iterator<SyncopeClientException> itor = exceptions.iterator(); itor.hasNext() && !found;) {\r\n+            syncopeClientException = itor.next();\r\n+            if (syncopeClientException.getType().equals(exceptionType)) {\r\n+                found = true;\r\n+            }\r\n+        }\r\n+\r\n+        return found\r\n+                ? syncopeClientException\r\n+                : null;\r\n+    }\r\n+\r\n+    public Set<SyncopeClientException> getExceptions() {\r\n+        return exceptions;\r\n+    }\r\n+\r\n+    public boolean addException(SyncopeClientException exception) {\r\n+        if (exception.getType() == null) {\r\n+            throw new IllegalArgumentException(exception + \" does not have the right \"\r\n+                    + SyncopeClientExceptionType.class.getName() + \" set\");\r\n+        }\r\n+\r\n+        return exceptions.add(exception);\r\n+    }\r\n+\r\n+    @Override\r\n+    public String getMessage() {\r\n+        StringBuilder message = new StringBuilder();\r\n+\r\n+        message.append(\"{\");\r\n+        Iterator<SyncopeClientException> iter = getExceptions().iterator();\r\n+        while (iter.hasNext()) {\r\n+            SyncopeClientException e = iter.next();\r\n+            message.append(\"[\");\r\n+            message.append(e.getType());\r\n+            message.append(\" \");\r\n+            message.append(e.getElements());\r\n+            message.append(\"]\");\r\n+            if (iter.hasNext()) {\r\n+                message.append(\", \");\r\n+            }\r\n+        }\r\n+        message.append(\"}\");\r\n+\r\n+        return message.toString();\r\n+    }\r\n+\r\n+    @Override\r\n+    public String getLocalizedMessage() {\r\n+        return getMessage();\r\n+    }\r\n+}\r"},{"sha":"71e2624a7d37578e00f30849f877c9823ee92e4e","filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientErrorHandler.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,100 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.validation;\r\n+\r\n+import java.io.IOException;\r\n+import java.security.AccessControlException;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import org.apache.commons.lang.ArrayUtils;\r\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+import org.springframework.http.HttpStatus;\r\n+import org.springframework.http.client.ClientHttpResponse;\r\n+import org.springframework.web.client.DefaultResponseErrorHandler;\r\n+\r\n+public class SyncopeClientErrorHandler extends DefaultResponseErrorHandler {\r\n+\r\n+    public static final String EXCEPTION_TYPE_HEADER = \"ExceptionType\";\r\n+\r\n+    /**\r\n+     * Logger.\r\n+     */\r\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeClientErrorHandler.class);\r\n+\r\n+    private static final HttpStatus[] MANAGED_STATUSES = {\r\n+        HttpStatus.BAD_REQUEST, HttpStatus.NOT_FOUND, HttpStatus.CONFLICT, HttpStatus.UNAUTHORIZED\r\n+    };\r\n+\r\n+    @Override\r\n+    public void handleError(final ClientHttpResponse response) throws IOException {\r\n+        if (!ArrayUtils.contains(MANAGED_STATUSES, response.getStatusCode())) {\r\n+            super.handleError(response);\r\n+        }\r\n+\r\n+        // Mapped 401 Unauthorized Exception\r\n+        if (response.getStatusCode().equals(HttpStatus.UNAUTHORIZED)) {\r\n+            throw new AccessControlException(\"Remote unauthorized exception\");\r\n+        }\r\n+\r\n+        List<String> exceptionTypesInHeaders = response.getHeaders().get(EXCEPTION_TYPE_HEADER);\r\n+        if (exceptionTypesInHeaders == null) {\r\n+            LOG.debug(\"No \" + EXCEPTION_TYPE_HEADER + \" provided\");\r\n+\r\n+            return;\r\n+        }\r\n+\r\n+        SyncopeClientCompositeErrorException compositeException =\r\n+                new SyncopeClientCompositeErrorException(response.getStatusCode());\r\n+\r\n+        Set<String> handledExceptions = new HashSet<String>();\r\n+        for (String exceptionTypeAsString : exceptionTypesInHeaders) {\r\n+            SyncopeClientExceptionType exceptionType = null;\r\n+            try {\r\n+                exceptionType = SyncopeClientExceptionType.getFromHeaderValue(exceptionTypeAsString);\r\n+            } catch (IllegalArgumentException e) {\r\n+                LOG.error(\"Unexpected value of \" + EXCEPTION_TYPE_HEADER + \": \" + exceptionTypeAsString, e);\r\n+            }\r\n+            if (exceptionType != null) {\r\n+                handledExceptions.add(exceptionTypeAsString);\r\n+\r\n+                SyncopeClientException clientException = new SyncopeClientException();\r\n+                clientException.setType(exceptionType);\r\n+                if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null\r\n+                        && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {\r\n+\r\n+                    clientException.setElements(response.getHeaders().get(exceptionType.getElementHeaderName()));\r\n+                }\r\n+\r\n+                compositeException.addException(clientException);\r\n+            }\r\n+        }\r\n+\r\n+        exceptionTypesInHeaders.removeAll(handledExceptions);\r\n+        if (!exceptionTypesInHeaders.isEmpty()) {\r\n+            LOG.error(\"Unmanaged exceptions: \" + exceptionTypesInHeaders);\r\n+        }\r\n+\r\n+        if (compositeException.hasExceptions()) {\r\n+            throw compositeException;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"7a843dc2e592c9eb54adebafd6d2b56da273929f","filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientException.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientException.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,75 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.validation;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n+\r\n+public class SyncopeClientException extends Exception {\r\n+\r\n+    private static final long serialVersionUID = 3380920886511913475L;\r\n+\r\n+    private SyncopeClientExceptionType type;\r\n+\r\n+    private Set<String> elements;\r\n+\r\n+    public SyncopeClientException() {\r\n+        super();\r\n+        elements = new HashSet<String>();\r\n+    }\r\n+\r\n+    public SyncopeClientException(SyncopeClientExceptionType type) {\r\n+        this();\r\n+        setType(type);\r\n+    }\r\n+\r\n+    public SyncopeClientExceptionType getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public final void setType(SyncopeClientExceptionType type) {\r\n+        this.type = type;\r\n+    }\r\n+\r\n+    public boolean addElement(String element) {\r\n+        return elements.add(element);\r\n+    }\r\n+\r\n+    public boolean removeElement(String element) {\r\n+        return elements.remove(element);\r\n+    }\r\n+\r\n+    public Set<String> getElements() {\r\n+        return elements;\r\n+    }\r\n+\r\n+    public void setElements(Set<String> elements) {\r\n+        this.elements = elements;\r\n+    }\r\n+\r\n+    public void setElements(List<String> elements) {\r\n+        this.elements.addAll(elements);\r\n+    }\r\n+\r\n+    public boolean isEmpty() {\r\n+        return elements.isEmpty();\r\n+    }\r\n+}\r"},{"sha":"e5f4026c2333f4367f32b403fbb7a26c53b291ef","filename":"console/pom.xml","status":"added","additions":583,"deletions":0,"changes":583,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fpom.xml?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,583 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope</artifactId>\n+    <version>1.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Console</name>\n+  <description>Apache Syncope Console</description>\n+\n+  <groupId>org.apache.syncope</groupId>\n+  <artifactId>syncope-console</artifactId>\n+  <packaging>war</packaging>\n+\n+  <distributionManagement>\n+    <site>\n+      <id>syncope.website</id>\n+      <name>Apache Syncope website</name>\n+      <url>${site.deploymentBaseUrl}/${project.artifactId}</url>\n+    </site>\n+  </distributionManagement>\n+  \n+  <dependencies>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-client</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>servlet-api</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>ch.qos.logback</groupId>\n+      <artifactId>logback-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>ch.qos.logback</groupId>\n+      <artifactId>logback-classic</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-logging</groupId>\n+      <artifactId>commons-logging</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>jcl-over-slf4j</artifactId>\n+    </dependency>    \n+\n+    <dependency>\n+      <groupId>org.apache.wicket</groupId>\n+      <artifactId>wicket</artifactId>\n+      <type>pom</type>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.wicket</groupId>\n+      <artifactId>wicket-extensions</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.wicket</groupId>\n+      <artifactId>wicket-datetime</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.wicket</groupId>\n+      <artifactId>wicket-spring</artifactId>\n+      <!-- exclude spring framework that wicket pulls in -->\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.springframework</groupId>\n+          <artifactId>spring</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.wicket</groupId>\n+      <artifactId>wicket-auth-roles</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-webmvc</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.httpcomponents</groupId>\n+      <artifactId>httpclient</artifactId>\n+    </dependency>\n+\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-build-tools</artifactId>\n+      <version>${project.version}</version>\n+      <type>war</type>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.seleniumhq.selenium.client-drivers</groupId>\n+      <artifactId>selenium-java-client-driver</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.h2database</groupId>\n+      <artifactId>h2</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.connid.bundles.soap</groupId>\n+      <artifactId>wssample</artifactId>\n+      <type>war</type>\n+      <scope>test</scope>\n+    </dependency>\n+    <!-- /TEST -->\n+  </dependencies>\n+\n+  <build>\n+    <finalName>${project.artifactId}</finalName>\n+\n+    <plugins>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <id>set-bundles</id>\n+            <phase>process-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-antrun-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <id>explodeSyncopeWAR</id>\n+            <phase>pre-integration-test</phase>\n+            <configuration>\n+              <target>\n+                <unzip src=\"${basedir}/../core/target/syncope.war\" dest=\"${cargo.run.dir}\" />\n+                <copy file=\"${project.build.directory}/test-classes/db.jsp\" todir=\"${cargo.run.dir}\" />\n+                <copy todir=\"${cargo.run.dir}/WEB-INF/classes\" includeEmptyDirs=\"false\">\n+                  <fileset dir=\"${project.build.directory}/test-classes\">\n+                    <exclude name=\"**/*.class\" />\n+                    <exclude name=\"restClientContext.xml\" />\n+                  </fileset>\n+                </copy>\n+              </target>\n+            </configuration>\n+            <goals>\n+              <goal>run</goal>\n+            </goals>\n+          </execution>\n+          <execution>\n+            <id>setupCSV</id>\n+            <phase>pre-integration-test</phase>\n+            <configuration>\n+              <target>\n+                <copy file=\"${project.build.directory}/test-classes/test.csv\" todir=\"${test.csvdir.path}\" overwrite=\"true\" />\n+              </target>\n+            </configuration>\n+            <goals>\n+              <goal>run</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.codehaus.cargo</groupId>\n+        <artifactId>cargo-maven2-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <configuration>\n+          <container>\n+            <dependencies>\n+              <dependency>\n+                <groupId>com.h2database</groupId>\n+                <artifactId>h2</artifactId>\n+              </dependency>\n+            </dependencies>\n+            <systemProperties>\n+              <syncope.console.configuration>${project.build.directory}/test-classes/configuration.properties</syncope.console.configuration>\n+            </systemProperties>\n+          </container>\n+          <configuration>\n+            <type>standalone</type>\n+            <properties>\n+              <cargo.servlet.port>${cargo.servlet.port}</cargo.servlet.port>\n+              <cargo.tomcat.ajp.port>${cargo.tomcat.ajp.port}</cargo.tomcat.ajp.port>\n+              <cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>\n+\n+              <!--<cargo.jvmargs>-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n</cargo.jvmargs>-->\n+              <cargo.jvmargs>-noverify ${javaagent} -Drebel.spring_plugin=false -Xms512m -Xmx1024m -XX:PermSize=512m -XX:MaxPermSize=1024m</cargo.jvmargs>\n+            </properties>\n+            <configfiles>\n+              <configfile>\n+                <file>${project.build.directory}/test-classes/context.xml</file>\n+                <todir>conf/</todir>\n+                <tofile>context.xml</tofile>\n+              </configfile>\n+            </configfiles>\n+          </configuration>\n+          <deployables>\n+            <deployable>\n+              <location>${cargo.run.dir}</location>\n+              <properties>\n+                <context>syncope</context>\n+              </properties>\n+            </deployable>\n+            <deployable>\n+              <location>${project.build.directory}/${project.build.finalName}.war</location>\n+              <properties>\n+                <context>syncope-console</context>\n+              </properties>\n+            </deployable>\n+            <deployable>\n+              <groupId>org.connid.bundles.soap</groupId>\n+              <artifactId>wssample</artifactId>\n+              <type>war</type>\n+              <properties>\n+                <context>wssample</context>\n+              </properties>\n+            </deployable>\n+            <deployable>\n+              <groupId>org.apache.syncope</groupId>\n+              <artifactId>syncope-build-tools</artifactId>\n+              <type>war</type>\n+              <properties>\n+                <context>syncope-build-tools</context>\n+              </properties>\n+            </deployable>\n+          </deployables>\n+        </configuration>\n+      </plugin>\n+      \n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-pmd-plugin</artifactId>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.felix</groupId>\n+        <artifactId>maven-bundle-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>bundle-manifest</id>\n+            <phase>process-classes</phase>\n+            <goals>\n+              <goal>manifest</goal>\n+            </goals>\n+            <configuration>\n+              <instructions>\n+                <Bundle-Name>${project.name}</Bundle-Name>\n+                <Bundle-SymbolicName>org.apache.syncope.console</Bundle-SymbolicName>\n+                <Bundle-Version>${project.version}</Bundle-Version>\n+                <Export-Package>\n+                  org.apache.syncope.console*;version=${project.version};-split-package:=merge-first\n+                </Export-Package>\n+                <Import-Package>\n+                  javax.servlet,\n+                  javax.xml*,\n+                  org.w3c.dom,\n+                  org.apache.commons.lang*;version=\"[2.6,3)\",\n+                  org.apache.http*;version=\"[4,5)\",\n+                  org.apache.syncope.client*;version=${project.version},\n+                  org.apache.syncope.common*;version=${project.version},\n+                  org.apache.wicket*;version=\"[6,7)\",\n+                  org.codehaus.jackson*;version=\"[1.9,2)\",\n+                  org.springframework*;version=\"[3,4)\",\n+                  ch.qos.logback.classic;resolution:=optional,\n+                  javax.swing.tree;resolution:=optional,\n+                  org.slf4j;resolution:=optional\n+                </Import-Package>\n+              </instructions>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-war-plugin</artifactId>\n+        <configuration>\n+          <archive>\n+            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n+          </archive>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+\n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+      <resource>\n+        <directory>..</directory>\n+        <targetPath>META-INF</targetPath>\n+        <includes>\n+          <include>LICENSE</include>\n+          <include>NOTICE</include>\n+        </includes>\n+      </resource>\n+    </resources>\n+\n+    <testResources>\n+      <testResource>\n+        <directory>../core/src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+      <testResource>\n+        <directory>src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+    </testResources>\n+  </build>\n+\n+  <profiles>\n+\n+    <profile>\n+      <id>skipTests</id>\n+      <properties>\n+        <javaagent />\n+      </properties>\n+      \n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-dependency-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>set-bundles</id>\n+                <phase>none</phase>\n+              </execution>\n+            </executions>\n+          </plugin>\n+          \n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-antrun-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>explodeSyncopeWAR</id>\n+                <phase>none</phase>\n+              </execution>\n+              <execution>\n+                <id>setupCSV</id>\n+                <phase>none</phase>\n+              </execution>\n+            </executions>\n+          </plugin>\n+      \n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-surefire-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <skipTests>${skipTests}</skipTests>\n+            </configuration>\n+          </plugin>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <skipTests>${skipTests}</skipTests>\n+            </configuration>\n+          </plugin>\n+          \n+          <plugin>\n+            <groupId>org.codehaus.cargo</groupId>\n+            <artifactId>cargo-maven2-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>start-container</id>\n+                <phase>none</phase>\n+              </execution>\n+              <execution>\n+                <id>stop-container</id>\n+                <phase>none</phase>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+\n+    <profile>\n+      <id>dev</id>\n+      <properties>\n+        <skipTests>true</skipTests>\n+        <javaagent />\n+      </properties>\n+      <build>\n+        <defaultGoal>clean verify cargo:run</defaultGoal>\n+        \n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-war-plugin</artifactId>\n+            <configuration>\n+              <webXml>${project.build.directory}/test-classes/web.xml</webXml>\n+            </configuration>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+\n+    <profile>\n+      <id>jrebel</id>\n+      <properties>\n+        <skipTests>true</skipTests>\n+        <javaagent>-javaagent:${env.REBEL_HOME}/jrebel.jar</javaagent>\n+      </properties>\n+      <build>\n+        <defaultGoal>clean verify cargo:run</defaultGoal>\n+\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-war-plugin</artifactId>\n+            <configuration>\n+              <webXml>${project.build.directory}/test-classes/web.xml</webXml>\n+            </configuration>\n+          </plugin>\n+          \n+          <plugin>\n+            <groupId>org.zeroturnaround</groupId>\n+            <artifactId>jrebel-maven-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>generate-rebel-xml</id>\n+                <phase>process-resources</phase>\n+                <goals>\n+                  <goal>generate</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+\n+    <profile>\n+      <id>selenium</id>\n+      <properties>\n+        <javaagent />\n+      </properties>\n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+        <plugins>\n+\n+          <plugin>\n+            <groupId>org.codehaus.mojo</groupId>\n+            <artifactId>selenium-maven-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>start-selenium</id>\n+                <phase>pre-integration-test</phase>\n+                <goals>\n+                  <goal>start-server</goal>\n+                </goals>\n+                <configuration>\n+                  <background>true</background>\n+                  <logOutput>true</logOutput>\n+                </configuration>\n+              </execution>\n+              <execution>\n+                <id>stop-selenium</id>\n+                <phase>post-integration-test</phase>\n+                <goals>\n+                  <goal>stop-server</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>verify</id>\n+                <goals>\n+                  <goal>verify</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>org.codehaus.cargo</groupId>\n+            <artifactId>cargo-maven2-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>start-container</id>\n+                <phase>pre-integration-test</phase>\n+                <goals>\n+                  <goal>start</goal>\n+                </goals>\n+                <configuration>\n+                  <wait>false</wait>\n+                </configuration>\n+              </execution>\n+              <execution>\n+                <id>stop-container</id>\n+                <phase>post-integratison-test</phase>\n+                <goals>\n+                  <goal>stop</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+  </profiles>\n+\n+</project>"},{"sha":"14c74b6288bc0ca7519feeda12204f38def7b1c2","filename":"console/src/main/java/org/apache/syncope/console/SyncopeApplication.java","status":"added","additions":206,"deletions":0,"changes":206,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeApplication.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console;\n+\n+import java.io.Serializable;\n+import org.apache.syncope.console.commons.XMLRolesReader;\n+import org.apache.syncope.console.pages.Configuration;\n+import org.apache.syncope.console.pages.InfoModalPage;\n+import org.apache.syncope.console.pages.Login;\n+import org.apache.syncope.console.pages.Logout;\n+import org.apache.syncope.console.pages.Reports;\n+import org.apache.syncope.console.pages.Resources;\n+import org.apache.syncope.console.pages.Roles;\n+import org.apache.syncope.console.pages.Schema;\n+import org.apache.syncope.console.pages.Tasks;\n+import org.apache.syncope.console.pages.Todo;\n+import org.apache.syncope.console.pages.Users;\n+import org.apache.syncope.console.pages.WelcomePage;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.RestartResponseAtInterceptPageException;\n+import org.apache.wicket.Session;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.authorization.IUnauthorizedComponentInstantiationListener;\n+import org.apache.wicket.authorization.UnauthorizedInstantiationException;\n+import org.apache.wicket.authroles.authorization.strategies.role.IRoleCheckingStrategy;\n+import org.apache.wicket.authroles.authorization.strategies.role.RoleAuthorizationStrategy;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.markup.html.image.Image;\n+import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n+import org.apache.wicket.protocol.http.WebApplication;\n+import org.apache.wicket.request.Request;\n+import org.apache.wicket.request.Response;\n+import org.apache.wicket.request.resource.ContextRelativeResource;\n+import org.apache.wicket.spring.injection.annot.SpringComponentInjector;\n+\n+/**\n+ * SyncopeApplication class.\n+ */\n+public class SyncopeApplication\n+        extends WebApplication\n+        implements IUnauthorizedComponentInstantiationListener, IRoleCheckingStrategy, Serializable {\n+\n+    public static final String IMG_PREFIX = \"/img/menu/\";\n+\n+    public static final String IMG_NOTSEL = \"notsel/\";\n+\n+    public static final String IMG_SUFFIX = \".png\";\n+\n+    private static final long serialVersionUID = -2920378752291913495L;\n+\n+    @Override\n+    protected void init() {\n+        super.init();\n+\n+        getComponentInstantiationListeners().add(new SpringComponentInjector(this));\n+\n+        getResourceSettings().setThrowExceptionOnMissingResource(true);\n+\n+        getSecuritySettings().setAuthorizationStrategy(new RoleAuthorizationStrategy(this));\n+        getSecuritySettings().setUnauthorizedComponentInstantiationListener(this);\n+\n+        getMarkupSettings().setStripWicketTags(true);\n+        getMarkupSettings().setCompressWhitespace(true);\n+\n+        getRequestCycleListeners().add(new SyncopeRequestCycleListener());\n+    }\n+\n+    public void setupNavigationPanel(final WebPage page, final XMLRolesReader xmlRolesReader, final boolean notsel) {\n+        final ModalWindow infoModal = new ModalWindow(\"infoModal\");\n+        page.add(infoModal);\n+        infoModal.setInitialWidth(350);\n+        infoModal.setInitialHeight(300);\n+        infoModal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        infoModal.setCookieName(\"infoModal\");\n+        infoModal.setPageCreator(new ModalWindow.PageCreator() {\n+\n+            private static final long serialVersionUID = -7834632442532690940L;\n+\n+            @Override\n+            public Page createPage() {\n+                return new InfoModalPage();\n+            }\n+        });\n+\n+        final AjaxLink<Void> infoLink = new AjaxLink<Void>(\"infoLink\") {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                infoModal.show(target);\n+            }\n+        };\n+        page.add(infoLink);\n+\n+        BookmarkablePageLink<Void> schemaLink = new BookmarkablePageLink<Void>(\"schema\", Schema.class);\n+        MetaDataRoleAuthorizationStrategy.authorizeAll(schemaLink, WebPage.ENABLE);\n+        page.add(schemaLink);\n+        schemaLink.add(new Image(\"schemaIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"schema\" + IMG_SUFFIX)));\n+\n+        BookmarkablePageLink<Void> usersLink = new BookmarkablePageLink<Void>(\"users\", Users.class);\n+        String allowedUsersRoles = xmlRolesReader.getAllAllowedRoles(\"Users\", \"list\");\n+        MetaDataRoleAuthorizationStrategy.authorize(usersLink, WebPage.ENABLE, allowedUsersRoles);\n+        page.add(usersLink);\n+        usersLink.add(new Image(\"usersIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"users\" + IMG_SUFFIX)));\n+\n+        BookmarkablePageLink<Void> rolesLink = new BookmarkablePageLink<Void>(\"roles\", Roles.class);\n+        MetaDataRoleAuthorizationStrategy.authorizeAll(rolesLink, WebPage.ENABLE);\n+        page.add(rolesLink);\n+        rolesLink.add(new Image(\"rolesIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"roles\" + IMG_SUFFIX)));\n+\n+        BookmarkablePageLink<Void> resourcesLink = new BookmarkablePageLink<Void>(\"resources\", Resources.class);\n+        MetaDataRoleAuthorizationStrategy.authorizeAll(resourcesLink, WebPage.ENABLE);\n+        page.add(resourcesLink);\n+        resourcesLink.add(new Image(\"resourcesIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"resources\" + IMG_SUFFIX)));\n+\n+        BookmarkablePageLink<Void> todoLink = new BookmarkablePageLink<Void>(\"todo\", Todo.class);\n+        MetaDataRoleAuthorizationStrategy.authorize(todoLink, WebPage.ENABLE, xmlRolesReader.getAllAllowedRoles(\n+                \"Approval\", \"list\"));\n+        page.add(todoLink);\n+        todoLink.add(new Image(\"todoIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"todo\" + IMG_SUFFIX)));\n+\n+        BookmarkablePageLink<Void> reportLink = new BookmarkablePageLink<Void>(\"reports\", Reports.class);\n+        String allowedReportRoles = xmlRolesReader.getAllAllowedRoles(\"Reports\", \"list\");\n+        MetaDataRoleAuthorizationStrategy.authorize(reportLink, WebPage.ENABLE, allowedReportRoles);\n+        page.add(reportLink);\n+        reportLink.add(new Image(\"reportsIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"reports\" + IMG_SUFFIX)));\n+\n+        BookmarkablePageLink<Void> configurationLink = new BookmarkablePageLink<Void>(\"configuration\",\n+                Configuration.class);\n+        String allowedConfigurationRoles = xmlRolesReader.getAllAllowedRoles(\"Configuration\", \"list\");\n+        MetaDataRoleAuthorizationStrategy.authorize(configurationLink, WebPage.ENABLE, allowedConfigurationRoles);\n+        page.add(configurationLink);\n+        configurationLink.add(new Image(\"configurationIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"configuration\" + IMG_SUFFIX)));\n+\n+        BookmarkablePageLink<Void> taskLink = new BookmarkablePageLink<Void>(\"tasks\", Tasks.class);\n+        String allowedTasksRoles = xmlRolesReader.getAllAllowedRoles(\"Tasks\", \"list\");\n+        MetaDataRoleAuthorizationStrategy.authorize(taskLink, WebPage.ENABLE, allowedTasksRoles);\n+        page.add(taskLink);\n+        taskLink.add(new Image(\"tasksIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"tasks\" + IMG_SUFFIX)));\n+\n+        page.add(new BookmarkablePageLink<Void>(\"logout\", Logout.class));\n+    }\n+\n+    @Override\n+    public Session newSession(final Request request, final Response response) {\n+        return new SyncopeSession(request);\n+    }\n+\n+    @Override\n+    public Class<? extends Page> getHomePage() {\n+        return SyncopeSession.get().isAuthenticated() ? WelcomePage.class : Login.class;\n+    }\n+\n+    @Override\n+    public void onUnauthorizedInstantiation(final Component component) {\n+        SyncopeSession.get().invalidate();\n+\n+        if (component instanceof Page) {\n+            throw new UnauthorizedInstantiationException(component.getClass());\n+        }\n+\n+        throw new RestartResponseAtInterceptPageException(Login.class);\n+    }\n+\n+    @Override\n+    public boolean hasAnyRole(final org.apache.wicket.authroles.authorization.strategies.role.Roles roles) {\n+        return SyncopeSession.get().hasAnyRole(roles);\n+    }\n+}"},{"sha":"c770bd482226c67ba67ad9c3b451f446a3105a3e","filename":"console/src/main/java/org/apache/syncope/console/SyncopeRequestCycleListener.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeRequestCycleListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeRequestCycleListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeRequestCycleListener.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console;\n+\n+import org.apache.syncope.console.pages.ErrorPage;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.authorization.UnauthorizedInstantiationException;\n+import org.apache.wicket.core.request.handler.ComponentRenderingRequestHandler;\n+import org.apache.wicket.markup.html.pages.ExceptionErrorPage;\n+import org.apache.wicket.model.StringResourceModel;\n+import org.apache.wicket.protocol.http.PageExpiredException;\n+import org.apache.wicket.request.IRequestHandler;\n+import org.apache.wicket.request.cycle.AbstractRequestCycleListener;\n+import org.apache.wicket.request.cycle.RequestCycle;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestClientException;\n+\n+public class SyncopeRequestCycleListener extends AbstractRequestCycleListener {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeRequestCycleListener.class);\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public IRequestHandler onException(final RequestCycle cycle, final Exception e) {\n+\n+        LOG.error(\"Exception found\", e);\n+\n+        final Page errorPage;\n+        PageParameters errorParameters = new PageParameters();\n+        errorParameters.add(\"errorTitle\", new StringResourceModel(\"alert\", null).getString());\n+\n+        if (e instanceof UnauthorizedInstantiationException) {\n+            errorParameters.add(\"errorMessage\", new StringResourceModel(\"unauthorizedInstantiationException\", null)\n+                    .getString());\n+\n+            errorPage = new ErrorPage(errorParameters);\n+        } else if (e instanceof HttpClientErrorException) {\n+            errorParameters.add(\"errorMessage\", new StringResourceModel(\"httpClientException\", null).getString());\n+\n+            errorPage = new ErrorPage(errorParameters);\n+        } else if (e instanceof PageExpiredException || !(SyncopeSession.get()).isAuthenticated()) {\n+\n+            errorParameters.add(\"errorMessage\", new StringResourceModel(\"pageExpiredException\", null).getString());\n+\n+            errorPage = new ErrorPage(errorParameters);\n+        } else if (e.getCause() != null && e.getCause().getCause() != null\n+                && e.getCause().getCause() instanceof RestClientException) {\n+\n+            errorParameters.add(\"errorMessage\", new StringResourceModel(\"restClientException\", null).getString());\n+\n+            errorPage = new ErrorPage(errorParameters);\n+        } else {\n+            // redirect to default Wicket error page\n+            errorPage = new ExceptionErrorPage(e, null);\n+        }\n+\n+        return new ComponentRenderingRequestHandler(errorPage);\n+    }\n+}"},{"sha":"7042e349943725c2c825fb4466dad3a938ff1b94","filename":"console/src/main/java/org/apache/syncope/console/SyncopeSession.java","status":"added","additions":170,"deletions":0,"changes":170,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console;\n+\n+import java.text.DateFormat;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import org.apache.syncope.client.services.proxy.ConfigurationServiceProxy;\n+import org.apache.syncope.client.services.proxy.ConnectorServiceProxy;\n+import org.apache.syncope.client.services.proxy.EntitlementServiceProxy;\n+import org.apache.syncope.client.services.proxy.LoggerServiceProxy;\n+import org.apache.syncope.client.services.proxy.NotificationServiceProxy;\n+import org.apache.syncope.client.services.proxy.PolicyServiceProxy;\n+import org.apache.syncope.client.services.proxy.ReportServiceProxy;\n+import org.apache.syncope.client.services.proxy.ResourceServiceProxy;\n+import org.apache.syncope.client.services.proxy.RoleServiceProxy;\n+import org.apache.syncope.client.services.proxy.SchemaServiceProxy;\n+import org.apache.syncope.client.services.proxy.SpringServiceProxy;\n+import org.apache.syncope.client.services.proxy.TaskServiceProxy;\n+import org.apache.syncope.client.services.proxy.UserRequestServiceProxy;\n+import org.apache.syncope.client.services.proxy.UserServiceProxy;\n+import org.apache.syncope.client.services.proxy.UserWorkflowServiceProxy;\n+import org.apache.syncope.client.services.proxy.WorkflowServiceProxy;\n+import org.apache.syncope.common.services.ConfigurationService;\n+import org.apache.syncope.common.services.ConnectorService;\n+import org.apache.syncope.common.services.EntitlementService;\n+import org.apache.syncope.common.services.LoggerService;\n+import org.apache.syncope.common.services.NotificationService;\n+import org.apache.syncope.common.services.PolicyService;\n+import org.apache.syncope.common.services.ReportService;\n+import org.apache.syncope.common.services.ResourceService;\n+import org.apache.syncope.common.services.RoleService;\n+import org.apache.syncope.common.services.SchemaService;\n+import org.apache.syncope.common.services.TaskService;\n+import org.apache.syncope.common.services.UserRequestService;\n+import org.apache.syncope.common.services.UserService;\n+import org.apache.syncope.common.services.UserWorkflowService;\n+import org.apache.syncope.common.services.WorkflowService;\n+import org.apache.wicket.Session;\n+import org.apache.wicket.authroles.authorization.strategies.role.Roles;\n+import org.apache.wicket.protocol.http.WebApplication;\n+import org.apache.wicket.protocol.http.WebSession;\n+import org.apache.wicket.request.Request;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.web.client.RestTemplate;\n+import org.springframework.web.context.support.WebApplicationContextUtils;\n+\n+/**\n+ * Custom Syncope Session class.\n+ */\n+public class SyncopeSession extends WebSession {\n+\n+    private static final long serialVersionUID = 7743446298924805872L;\n+\n+    public static final List<Locale> SUPPORTED_LOCALES = Arrays.asList(new Locale[] {\n+        Locale.ENGLISH, Locale.ITALIAN});\n+\n+    private String userId;\n+\n+    private String version;\n+\n+    private Roles roles = new Roles();\n+\n+    protected String baseURL;\n+\n+    private final RestTemplate restTemplate;\n+\n+    private final Map<Class<?>, SpringServiceProxy> services = new HashMap<Class<?>, SpringServiceProxy>();\n+\n+    public static SyncopeSession get() {\n+        return (SyncopeSession) Session.get();\n+    }\n+\n+    public SyncopeSession(final Request request) {\n+        super(request);\n+\n+        final ApplicationContext applicationContext =\n+                WebApplicationContextUtils.getWebApplicationContext(WebApplication.get().getServletContext());\n+\n+        restTemplate = applicationContext.getBean(RestTemplate.class);\n+        baseURL = applicationContext.getBean(\"baseURL\", String.class);\n+\n+        setupRESTClients();\n+    }\n+\n+    private void setupRESTClients() {\n+        services.put(ConfigurationService.class, new ConfigurationServiceProxy(baseURL, restTemplate));\n+        services.put(ConnectorService.class, new ConnectorServiceProxy(baseURL, restTemplate));\n+        services.put(EntitlementService.class, new EntitlementServiceProxy(baseURL, restTemplate));\n+        services.put(LoggerService.class, new LoggerServiceProxy(baseURL, restTemplate));\n+        services.put(NotificationService.class, new NotificationServiceProxy(baseURL, restTemplate));\n+        services.put(PolicyService.class, new PolicyServiceProxy(baseURL, restTemplate));\n+        services.put(ReportService.class, new ReportServiceProxy(baseURL, restTemplate));\n+        services.put(ResourceService.class, new ResourceServiceProxy(baseURL, restTemplate));\n+        services.put(RoleService.class, new RoleServiceProxy(baseURL, restTemplate));\n+        services.put(SchemaService.class, new SchemaServiceProxy(baseURL, restTemplate));\n+        services.put(TaskService.class, new TaskServiceProxy(baseURL, restTemplate));\n+        services.put(UserRequestService.class, new UserRequestServiceProxy(baseURL, restTemplate));\n+        services.put(UserService.class, new UserServiceProxy(baseURL, restTemplate));\n+        services.put(UserWorkflowService.class, new UserWorkflowServiceProxy(baseURL, restTemplate));\n+        services.put(WorkflowService.class, new WorkflowServiceProxy(baseURL, restTemplate));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T getService(final Class<T> service) {\n+        return (T) services.get(service);\n+    }\n+\n+    public RestTemplate getRestTemplate() {\n+        return restTemplate;\n+    }\n+\n+    public String getUserId() {\n+        return userId;\n+    }\n+\n+    public void setUserId(final String userId) {\n+        this.userId = userId;\n+    }\n+\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(final String version) {\n+        this.version = version;\n+    }\n+\n+    public void setEntitlements(final String[] entitlements) {\n+        String[] defensiveCopy = entitlements.clone();\n+        roles = new Roles(defensiveCopy);\n+    }\n+\n+    public Roles getEntitlements() {\n+        return roles;\n+    }\n+\n+    public boolean isAuthenticated() {\n+        return getUserId() != null;\n+    }\n+\n+    public boolean hasAnyRole(final Roles roles) {\n+        return this.roles.hasAnyRole(roles);\n+    }\n+\n+    public DateFormat getDateFormat() {\n+        final Locale locale = getLocale() == null ? Locale.ENGLISH : getLocale();\n+\n+        return DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, locale);\n+    }\n+}"},{"sha":"80db975a59cee9167ed10fdc877a1de540c48183","filename":"console/src/main/java/org/apache/syncope/console/commons/AttributableDataProvider.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.commons;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.services.InvalidSearchConditionException;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.console.rest.AbstractAttributableRestClient;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class AttributableDataProvider extends SortableDataProvider<AbstractAttributableTO, String> {\n+    private static final Logger LOG = LoggerFactory.getLogger(AttributableDataProvider.class);\n+\n+    private static final long serialVersionUID = 6267494272884913376L;\n+\n+    private final SortableAttributableProviderComparator comparator;\n+\n+    private NodeCond filter = null;\n+\n+    private final int paginatorRows;\n+\n+    private final boolean filtered ;\n+\n+    private final AbstractAttributableRestClient restClient;\n+\n+    public AttributableDataProvider(final AbstractAttributableRestClient restClient,\n+            final int paginatorRows, final boolean filtered) {\n+\n+        super();\n+\n+        this.restClient = restClient;\n+        this.filtered = filtered;\n+        this.paginatorRows = paginatorRows;\n+\n+        // default sorting\n+        setSort(\"id\", SortOrder.ASCENDING);\n+\n+        this.comparator = new SortableAttributableProviderComparator(this);\n+    }\n+\n+    public void setSearchCond(final NodeCond searchCond) {\n+        this.filter = searchCond;\n+    }\n+\n+    @Override\n+    public Iterator<? extends AbstractAttributableTO> iterator(final long first, final long count) {\n+        final List<? extends AbstractAttributableTO> result;\n+\n+        if (filtered) {\n+            try {\n+                result = filter == null\n+                        ? Collections.<AbstractAttributableTO>emptyList()\n+                        : restClient.search(filter, ((int) first / paginatorRows) + 1, paginatorRows);\n+            } catch (InvalidSearchConditionException e) {\n+                LOG.error(e.getMessage(), e);\n+                return Collections.<AbstractAttributableTO>emptyList().iterator();\n+            }\n+        } else {\n+            result = restClient.list(((int) first / paginatorRows) + 1, paginatorRows);\n+        }\n+\n+        Collections.sort(result, comparator);\n+        return result.iterator();\n+    }\n+\n+    @Override\n+    public long size() {\n+        if (filtered) {\n+            try {\n+                return filter == null\n+                        ? 0\n+                        : restClient.searchCount(filter);\n+            } catch (InvalidSearchConditionException e) {\n+                LOG.error(e.getMessage(), e);\n+                return 0;\n+            }\n+        } else {\n+            return restClient.count();\n+        }\n+    }\n+\n+    @Override\n+    public IModel<AbstractAttributableTO> model(final AbstractAttributableTO object) {\n+        return new CompoundPropertyModel<AbstractAttributableTO>(object);\n+    }\n+}"},{"sha":"4055408485aa8cb9059f67c081fffb71158fe558","filename":"console/src/main/java/org/apache/syncope/console/commons/CloseOnESCBehavior.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FCloseOnESCBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FCloseOnESCBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FCloseOnESCBehavior.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.commons;\n+\n+import org.apache.wicket.Component;\n+import org.apache.wicket.ajax.AjaxEventBehavior;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.attributes.AjaxCallListener;\n+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+\n+public class CloseOnESCBehavior extends AjaxEventBehavior {\n+\n+    private static final long serialVersionUID = 5826308247642534260L;\n+\n+    public CloseOnESCBehavior(String event) {\n+        super(event);\n+    }\n+\n+    @Override\n+    protected void onEvent(final AjaxRequestTarget target) {\n+        ModalWindow.closeCurrent(target);\n+    }\n+\n+    @Override\n+    protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n+        super.updateAjaxAttributes(attributes);\n+\n+        attributes.getAjaxCallListeners().add(new AjaxCallListener() {\n+            private static final long serialVersionUID = 7160235486520935153L;\n+\n+            @Override\n+            public CharSequence getPrecondition(final Component aComponent) {\n+                return \" if(Wicket.Event.keyCode(attrs.event) != 27){return false;}\";\n+            }\n+        });\n+    }\n+}"},{"sha":"739ca24634f3be09551e68d098fb634b6ec9b6ed","filename":"console/src/main/java/org/apache/syncope/console/commons/Constants.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.commons;\n+\n+public final class Constants {\n+\n+    public static final String PREF_USERS_DETAILS_VIEW = \"users.details.view\";\n+\n+    public static final String PREF_USERS_ATTRIBUTES_VIEW = \"users.attributes.view\";\n+\n+    public static final String PREF_USERS_DERIVED_ATTRIBUTES_VIEW = \"users.derived.attributes.view\";\n+\n+    public static final String PREF_USERS_VIRTUAL_ATTRIBUTES_VIEW = \"users.virtual.attributes.view\";\n+\n+    public static final String PREF_USER_SCHEMA_PAGINATOR_ROWS = \"user.schema.paginator.rows\";\n+\n+    public static final String PREF_USER_DER_SCHEMA_PAGINATOR_ROWS = \"user.derived.schema.paginator.rows\";\n+\n+    public static final String PREF_USER_VIR_SCHEMA_PAGINATOR_ROWS = \"user.virtual.schema.paginator.rows\";\n+\n+    public static final String PREF_ROLE_SCHEMA_PAGINATOR_ROWS = \"role.schema.paginator.rows\";\n+\n+    public static final String PREF_ROLE_DER_SCHEMA_PAGINATOR_ROWS = \"role.derived.schema.paginator.rows\";\n+\n+    public static final String PREF_ROLE_VIR_SCHEMA_PAGINATOR_ROWS = \"role.virtual.schema.paginator.rows\";\n+\n+    public static final String PREF_MEMBERSHIP_SCHEMA_PAGINATOR_ROWS = \"membership.schema.paginator.rows\";\n+\n+    public static final String PREF_MEMBERSHIP_DER_SCHEMA_PAGINATOR_ROWS = \"membership.derived.aschema.paginator.rows\";\n+\n+    public static final String PREF_MEMBERSHIP_VIR_SCHEMA_PAGINATOR_ROWS = \"membership.virtual.aschema.paginator.rows\";\n+\n+    public static final String PREF_USERS_PAGINATOR_ROWS = \"users.paginator.rows\";\n+\n+    public static final String PREF_RESOURCES_PAGINATOR_ROWS = \"resources.paginator.rows\";\n+\n+    public static final String PREF_CONNECTORS_PAGINATOR_ROWS = \"connectors.paginator.rows\";\n+\n+    public static final String PREF_CONFIGURATION_PAGINATOR_ROWS = \"configuration.paginator.rows\";\n+\n+    public static final String PREF_NOTIFICATION_PAGINATOR_ROWS = \"notification.paginator.rows\";\n+\n+    public static final String PREF_PROPAGATION_TASKS_PAGINATOR_ROWS = \"proagationtasks.paginator.rows\";\n+\n+    public static final String PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS = \"notificationtasks.paginator.rows\";\n+\n+    public static final String PREF_SCHED_TASKS_PAGINATOR_ROWS = \"schedtasks.paginator.rows\";\n+\n+    public static final String PREF_SYNC_TASKS_PAGINATOR_ROWS = \"synctasks.paginator.rows\";\n+\n+    public static final String PREF_APPROVAL_PAGINATOR_ROWS = \"approval.paginator.rows\";\n+\n+    public static final String PREF_USER_REQUEST_PAGINATOR_ROWS = \"userRequest.paginator.rows\";\n+\n+    public static final String PREF_REPORT_PAGINATOR_ROWS = \"report.paginator.rows\";\n+\n+    public static final String PAGEPARAM_CREATE = \"CREATE\";\n+\n+    public static final String PAGEPARAM_CURRENT_PAGE = \"_current_page\";\n+\n+    public static final String PREF_POLICY_PAGINATOR_ROWS = \"policy.paginator.rows\";\n+\n+    public static final String ENUM_VALUES_SEPARATOR = \";\";\n+\n+    private Constants() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"070e5518634412ec823d66fb0ca9b3a5b9cda5b5","filename":"console/src/main/java/org/apache/syncope/console/commons/DateFormatROModel.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FDateFormatROModel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FDateFormatROModel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FDateFormatROModel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.commons;\n+\n+import java.util.Date;\n+import org.apache.syncope.console.SyncopeSession;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class DateFormatROModel implements IModel<String> {\n+\n+    private static final long serialVersionUID = 6677274580927636121L;\n+\n+    private final PropertyModel model;\n+\n+    public DateFormatROModel(final PropertyModel model) {\n+        this.model = model;\n+    }\n+\n+    @Override\n+    public String getObject() {\n+        return model.getObject() == null\n+                ? \"\"\n+                : SyncopeSession.get().getDateFormat().format((Date) model.getObject());\n+    }\n+\n+    @Override\n+    public void setObject(final String object) {\n+    }\n+\n+    @Override\n+    public void detach() {\n+    }\n+}\n\\ No newline at end of file"},{"sha":"a1d79e75e87af3d3596609ad973b4e3dc08abd96","filename":"console/src/main/java/org/apache/syncope/console/commons/HttpResourceStream.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.commons;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpStatus;\n+import org.apache.syncope.common.SyncopeConstants;\n+import org.apache.wicket.util.lang.Bytes;\n+import org.apache.wicket.util.resource.AbstractResourceStream;\n+import org.apache.wicket.util.resource.IFixedLocationResourceStream;\n+import org.apache.wicket.util.resource.ResourceStreamNotFoundException;\n+\n+public class HttpResourceStream extends AbstractResourceStream implements IFixedLocationResourceStream {\n+\n+    private static final long serialVersionUID = 5811207817876330189L;\n+\n+    private transient InputStream inputStream;\n+\n+    private String contentType;\n+\n+    private String filename;\n+\n+    public HttpResourceStream(final Response response) {\n+        Object entity = response.getEntity();\n+        if (response.getStatus() == HttpStatus.SC_OK && (entity instanceof InputStream)) {\n+            this.inputStream = (InputStream) entity;\n+            this.contentType = response.getHeaderString(HttpHeaders.CONTENT_TYPE);\n+            String contentDisposition = response.getHeaderString(SyncopeConstants.CONTENT_DISPOSITION_HEADER);\n+            if (StringUtils.isNotBlank(contentDisposition)) {\n+                String[] splitted = contentDisposition.split(\"=\");\n+                if (splitted != null && splitted.length > 1) {\n+                    this.filename = splitted[1].trim();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public InputStream getInputStream()\n+            throws ResourceStreamNotFoundException {\n+\n+        return inputStream == null\n+                ? new ByteArrayInputStream(new byte[0])\n+                : inputStream;\n+    }\n+\n+    @Override\n+    public Bytes length() {\n+        return inputStream == null\n+                ? Bytes.bytes(0)\n+                : null;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        // No need for explict closing\n+    }\n+\n+    @Override\n+    public String locationAsString() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getContentType() {\n+        return contentType == null\n+                ? MediaType.APPLICATION_OCTET_STREAM\n+                : contentType;\n+    }\n+\n+    public String getFilename() {\n+        return filename == null\n+                ? \"error\"\n+                : filename;\n+    }\n+}"},{"sha":"6dadaee29eeae0213637b55663587db7ef58cc55","filename":"console/src/main/java/org/apache/syncope/console/commons/JexlHelpUtil.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FJexlHelpUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FJexlHelpUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FJexlHelpUtil.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.commons;\n+\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.link.ExternalLink;\n+\n+public final class JexlHelpUtil {\n+\n+    private static final String JEXL_SYNTAX_URL = \"http://commons.apache.org/jexl/reference/syntax.html\";\n+\n+    private JexlHelpUtil() {\n+        // private constructor for static utility class\n+    }\n+\n+    public static WebMarkupContainer getJexlHelpWebContainer(final String wicketId) {\n+        final WebMarkupContainer jexlHelp = new WebMarkupContainer(wicketId);\n+        jexlHelp.setVisible(false);\n+        jexlHelp.setOutputMarkupPlaceholderTag(true);\n+        jexlHelp.setOutputMarkupId(true);\n+        jexlHelp.add(new ExternalLink(\"jexlLink\", JEXL_SYNTAX_URL));\n+        return jexlHelp;\n+    }\n+\n+    public static AjaxLink<Void> getAjaxLink(final WebMarkupContainer wmc, final String wicketId) {\n+        AjaxLink<Void> questionMarkJexlHelp = new AjaxLink<Void>(wicketId) {\n+\n+            private static final long serialVersionUID = -1838017408000591382L;\n+\n+            private boolean toogle = false;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                // using bitwise inversion as suggested by \n+                // http://pmd.sourceforge.net/pmd-4.2.5/rules/controversial.html#BooleanInversion\n+                toogle ^= true;\n+                wmc.setVisible(toogle);\n+                target.add(wmc);\n+            }\n+        };\n+        return questionMarkJexlHelp;\n+    }\n+}"},{"sha":"c41b916e298fd4465152af27b7edf2ad68a594b8","filename":"console/src/main/java/org/apache/syncope/console/commons/MapChoiceRenderer.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FMapChoiceRenderer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FMapChoiceRenderer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FMapChoiceRenderer.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.commons;\n+\n+import java.util.Map;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+\n+public class MapChoiceRenderer<T, K> implements IChoiceRenderer<T> {\n+\n+    private static final long serialVersionUID = -7452881117778186644L;\n+\n+    private final Map<T, K> map;\n+\n+    public MapChoiceRenderer(final Map<T, K> map) {\n+        this.map = map;\n+    }\n+\n+    @Override\n+    public Object getDisplayValue(final T key) {\n+        return map.get(key);\n+    }\n+\n+    @Override\n+    public String getIdValue(final T key, final int index) {\n+        return key.toString();\n+    }\n+}"},{"sha":"4a06e4771c662869476a7add80311077c8bceb63","filename":"console/src/main/java/org/apache/syncope/console/commons/PreferenceManager.java","status":"added","additions":180,"deletions":0,"changes":180,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.commons;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import org.apache.wicket.request.Request;\n+import org.apache.wicket.request.Response;\n+import org.apache.wicket.util.cookies.CookieDefaults;\n+import org.apache.wicket.util.cookies.CookieUtils;\n+import org.apache.wicket.util.crypt.Base64;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.codehaus.jackson.type.TypeReference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.util.StringUtils;\n+\n+public class PreferenceManager {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(PreferenceManager.class);\n+\n+    private static final String PREFMAN_KEY = \"prefMan\";\n+\n+    private static final int ONE_YEAR_TIME = 60 * 60 * 24 * 365;\n+\n+    private static final TypeReference MAP_TYPE_REF = new TypeReference<Map<String, String>>() {\n+    };\n+\n+    private static final List<Integer> PAGINATOR_CHOICES = Arrays.asList(new Integer[]{10, 25, 50});\n+\n+    @Autowired\n+    private ObjectMapper mapper;\n+\n+    private final CookieUtils cookieUtils;\n+\n+    public PreferenceManager() {\n+        CookieDefaults cookieDefaults = new CookieDefaults();\n+        cookieDefaults.setMaxAge(ONE_YEAR_TIME);\n+        cookieUtils = new CookieUtils(cookieDefaults);\n+    }\n+\n+    public List<Integer> getPaginatorChoices() {\n+        return PAGINATOR_CHOICES;\n+    }\n+\n+    private Map<String, String> getPrefs(final String value) {\n+        Map<String, String> prefs;\n+        try {\n+            if (StringUtils.hasText(value)) {\n+                prefs = mapper.readValue(value, MAP_TYPE_REF);\n+            } else {\n+                throw new Exception(\"Invalid cookie value '\" + value + \"'\");\n+            }\n+        } catch (Exception e) {\n+            LOG.debug(\"No preferences found\", e);\n+            prefs = new HashMap<String, String>();\n+        }\n+\n+        return prefs;\n+    }\n+\n+    private String setPrefs(final Map<String, String> prefs) throws IOException {\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, prefs);\n+\n+        return writer.toString();\n+    }\n+\n+    public String get(final Request request, final String key) {\n+        String result = null;\n+\n+        String prefString = cookieUtils.load(PREFMAN_KEY);\n+        if (prefString != null) {\n+            final Map<String, String> prefs = getPrefs(new String(Base64.decodeBase64(prefString.getBytes())));\n+            result = prefs.get(key);\n+        }\n+\n+        return result;\n+    }\n+\n+    public Integer getPaginatorRows(final Request request, final String key) {\n+        Integer result = getPaginatorChoices().get(0);\n+\n+        String value = get(request, key);\n+        if (value != null) {\n+            try {\n+                result = Integer.valueOf(value);\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"Unparsable value \" + value, e);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public List<String> getList(final Request request, final String key) {\n+        final List<String> result = new ArrayList<String>();\n+\n+        final String compound = get(request, key);\n+\n+        if (StringUtils.hasText(compound)) {\n+            String[] items = compound.split(\";\");\n+            result.addAll(Arrays.asList(items));\n+        }\n+\n+        return result;\n+    }\n+\n+    public void set(final Request request, final Response response, final Map<String, List<String>> prefs) {\n+        String prefString = cookieUtils.load(PREFMAN_KEY);\n+\n+        final Map<String, String> current = new HashMap<String, String>();\n+        if (prefString != null) {\n+            current.putAll(getPrefs(new String(Base64.decodeBase64(prefString.getBytes()))));\n+        }\n+\n+        // after retrieved previous setting in order to overwrite the key ...\n+        for (Entry<String, List<String>> entry : prefs.entrySet()) {\n+            current.put(entry.getKey(), StringUtils.collectionToDelimitedString(entry.getValue(), \";\"));\n+        }\n+\n+        try {\n+            cookieUtils.save(PREFMAN_KEY, new String(Base64.encodeBase64(setPrefs(current).getBytes())));\n+        } catch (IOException e) {\n+            LOG.error(\"Could not save {} info: {}\", getClass().getSimpleName(), current, e);\n+        }\n+    }\n+\n+    public void set(final Request request, final Response response, final String key, final String value) {\n+        String prefString = cookieUtils.load(PREFMAN_KEY);\n+\n+        final Map<String, String> current = new HashMap<String, String>();\n+        if (prefString != null) {\n+            current.putAll(getPrefs(new String(Base64.decodeBase64(prefString.getBytes()))));\n+        }\n+\n+        // after retrieved previous setting in order to overwrite the key ...\n+        current.put(key, value);\n+\n+        try {\n+            cookieUtils.save(PREFMAN_KEY, new String(Base64.encodeBase64(setPrefs(current).getBytes())));\n+        } catch (IOException e) {\n+            LOG.error(\"Could not save {} info: {}\", getClass().getSimpleName(), current, e);\n+        }\n+    }\n+\n+    public void setList(final Request request, final Response response, final String key, final List<String> values) {\n+        set(request, response, key, StringUtils.collectionToDelimitedString(values, \";\"));\n+    }\n+\n+    public void setList(final Request request, final Response response, final Map<String, List<String>> prefs) {\n+        set(request, response, prefs);\n+    }\n+}"},{"sha":"f827e647dd93de37bfc3eae4044bd630d3ea1094","filename":"console/src/main/java/org/apache/syncope/console/commons/RoleTreeBuilder.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FRoleTreeBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FRoleTreeBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FRoleTreeBuilder.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.commons;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+import javax.swing.tree.DefaultTreeModel;\n+import javax.swing.tree.TreeModel;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.console.rest.RoleRestClient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class RoleTreeBuilder {\n+\n+    @Autowired\n+    private RoleRestClient restClient;\n+\n+    private final RoleTOComparator comparator = new RoleTOComparator();\n+\n+    private List<RoleTO> allRoles;\n+\n+    private List<RoleTO> getChildRoles(final long parentRoleId, final List<RoleTO> roles) {\n+        List<RoleTO> result = new ArrayList<RoleTO>();\n+        for (RoleTO role : roles) {\n+            if (role.getParent() == parentRoleId) {\n+                result.add(role);\n+            }\n+        }\n+\n+        Collections.sort(result, comparator);\n+        return result;\n+    }\n+\n+    private void populateSubtree(final DefaultMutableTreeNode subRoot, final List<RoleTO> roles) {\n+        RoleTO role = (RoleTO) subRoot.getUserObject();\n+\n+        DefaultMutableTreeNode child;\n+        for (RoleTO subRoleTO : getChildRoles(role.getId(), roles)) {\n+            child = new DefaultMutableTreeNode(subRoleTO);\n+            subRoot.add(child);\n+            populateSubtree(child, roles);\n+        }\n+    }\n+\n+    public List<RoleTO> getAllRoles() {\n+        return this.allRoles;\n+    }\n+\n+    public TreeModel build() {\n+        this.allRoles = this.restClient.list();\n+        return build(this.allRoles);\n+    }\n+\n+    public TreeModel build(final List<RoleTO> roles) {\n+        DefaultMutableTreeNode fakeroot = new DefaultMutableTreeNode(new FakeRootRoleTO());\n+\n+        populateSubtree(fakeroot, roles);\n+\n+        return new DefaultTreeModel(fakeroot);\n+    }\n+\n+    private static class RoleTOComparator implements Comparator<RoleTO>, Serializable {\n+\n+        private static final long serialVersionUID = 7085057398406518811L;\n+\n+        @Override\n+        public int compare(final RoleTO r1, final RoleTO r2) {\n+            if (r1.getId() < r2.getId()) {\n+                return -1;\n+            }\n+            if (r1.getId() == r2.getId()) {\n+                return 0;\n+            }\n+\n+            return 1;\n+        }\n+    }\n+\n+    private static class FakeRootRoleTO extends RoleTO {\n+\n+        private static final long serialVersionUID = 4839183625773925488L;\n+\n+        public FakeRootRoleTO() {\n+            super();\n+\n+            setId(0);\n+            setName(\"\");\n+            setParent(-1);\n+        }\n+\n+        @Override\n+        public String getDisplayName() {\n+            return \"\";\n+        }\n+    }\n+}"},{"sha":"86248245831a2cefe8f2dd02e1ed9e2b0fdc68fb","filename":"console/src/main/java/org/apache/syncope/console/commons/RoleUtils.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FRoleUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FRoleUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FRoleUtils.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.commons;\n+\n+import org.apache.syncope.common.to.RoleTO;\n+\n+public class RoleUtils {\n+\n+    public static RoleTO findRole(final RoleTreeBuilder roleTreeBuilder, final long roleId) {\n+        RoleTO found = null;\n+        if (roleTreeBuilder.getAllRoles() != null) {\n+            for (RoleTO roleTO : roleTreeBuilder.getAllRoles()) {\n+                if (roleTO.getId() == roleId) {\n+                    found = roleTO;\n+                }\n+            }\n+        }\n+        return found;\n+    }\n+}"},{"sha":"846b9270ab1b00851d0d1c3968e9d816feba2685","filename":"console/src/main/java/org/apache/syncope/console/commons/SchemaModalPageFactory.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSchemaModalPageFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSchemaModalPageFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSchemaModalPageFactory.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.commons;\n+\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.console.pages.AbstractSchemaModalPage;\n+import org.apache.syncope.console.pages.DerivedSchemaModalPage;\n+import org.apache.syncope.console.pages.SchemaModalPage;\n+import org.apache.syncope.console.pages.VirtualSchemaModalPage;\n+\n+public final class SchemaModalPageFactory {\n+\n+    private static final long serialVersionUID = -3533177688264693505L;\n+\n+    private SchemaModalPageFactory() {\n+        // empty constructor for static utility class\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends AbstractSchemaModalPage> T getSchemaModalPage(\n+            final AttributableType entity, final SchemaType schemaType) {\n+\n+        T page;\n+\n+        switch (schemaType) {\n+            case DERIVED:\n+                page = (T) new DerivedSchemaModalPage(entity);\n+                break;\n+\n+            case VIRTUAL:\n+                page = (T) new VirtualSchemaModalPage(entity);\n+                break;\n+\n+            default:\n+                page = (T) new SchemaModalPage(entity);\n+                break;\n+        }\n+\n+        return page;\n+    }\n+}"},{"sha":"eef797e655e30823bfaeeb29907d896b710ba8ee","filename":"console/src/main/java/org/apache/syncope/console/commons/SearchCondWrapper.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSearchCondWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSearchCondWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSearchCondWrapper.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.commons;\n+\n+import java.io.Serializable;\n+import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang.builder.ToStringStyle;\n+import org.apache.syncope.common.search.AttributeCond;\n+import org.apache.syncope.common.search.AttributeCond.Type;\n+\n+/**\n+ * Generic search condition wrapper class.\n+ */\n+public class SearchCondWrapper implements Serializable {\n+\n+    private static final long serialVersionUID = -5828622221257732958L;\n+\n+    public enum OperationType {\n+\n+        AND,\n+        OR\n+\n+    };\n+\n+    public enum FilterType {\n+\n+        ATTRIBUTE,\n+        MEMBERSHIP,\n+        RESOURCE,\n+        ENTITLEMENT\n+\n+    };\n+\n+    private boolean notOperator;\n+\n+    private OperationType operationType = null;\n+\n+    private Type type;\n+\n+    private FilterType filterType;\n+\n+    private String filterName;\n+\n+    private String filterValue;\n+\n+    public boolean isNotOperator() {\n+        return notOperator;\n+    }\n+\n+    public void setNotOperator(boolean notOperator) {\n+        this.notOperator = notOperator;\n+    }\n+\n+    public OperationType getOperationType() {\n+        return operationType;\n+    }\n+\n+    public void setOperationType(OperationType operationType) {\n+        this.operationType = operationType;\n+    }\n+\n+    public AttributeCond.Type getType() {\n+        return type;\n+    }\n+\n+    public void setType(AttributeCond.Type type) {\n+        this.type = type;\n+    }\n+\n+    public FilterType getFilterType() {\n+        return filterType;\n+    }\n+\n+    public void setFilterType(FilterType filterType) {\n+        this.filterType = filterType;\n+    }\n+\n+    public String getFilterName() {\n+        return filterName;\n+    }\n+\n+    public void setFilterName(String filterName) {\n+        this.filterName = filterName;\n+    }\n+\n+    public String getFilterValue() {\n+        return filterValue;\n+    }\n+\n+    public void setFilterValue(String filterValue) {\n+        this.filterValue = filterValue;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+}"},{"sha":"4d26f62175f9ee01c60d65acf195a4480ae3cded","filename":"console/src/main/java/org/apache/syncope/console/commons/SelectChoiceRenderer.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSelectChoiceRenderer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSelectChoiceRenderer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSelectChoiceRenderer.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.commons;\n+\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+\n+public class SelectChoiceRenderer<T> implements IChoiceRenderer<T> {\n+\n+    private static final long serialVersionUID = -3242441544405909243L;\n+\n+    @Override\n+    public Object getDisplayValue(T obj) {\n+        if (obj instanceof SelectOption) {\n+            return ((SelectOption) obj).getDisplayValue();\n+        } else {\n+            return obj.toString();\n+        }\n+    }\n+\n+    @Override\n+    public String getIdValue(T obj, int i) {\n+        return obj.toString();\n+    }\n+}"},{"sha":"3f770ffadf719fa2d16e9ef2cd4dca2e806ffa57","filename":"console/src/main/java/org/apache/syncope/console/commons/SelectOption.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSelectOption.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSelectOption.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSelectOption.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.commons;\n+\n+import java.io.Serializable;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n+\n+public class SelectOption implements Serializable {\n+\n+    private static final long serialVersionUID = 2961127533930849828L;\n+\n+    private String displayValue;\n+\n+    private String keyValue;\n+\n+    public SelectOption(final String displayValue, final String keyValue) {\n+        this.displayValue = displayValue;\n+        this.keyValue = keyValue;\n+    }\n+\n+    public String getDisplayValue() {\n+        return displayValue;\n+    }\n+\n+    public void setDisplayValue(final String displayValue) {\n+        this.displayValue = displayValue;\n+    }\n+\n+    public String getKeyValue() {\n+        return keyValue;\n+    }\n+\n+    public void setKeyValue(final String keyValue) {\n+        this.keyValue = keyValue;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null || !(obj instanceof SelectOption)) {\n+            return false;\n+        }\n+\n+        return (keyValue == null && ((SelectOption) obj).keyValue == null) || keyValue != null\n+                && keyValue.equals(((SelectOption) obj).keyValue);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return keyValue;\n+    }\n+}"},{"sha":"0e2ac370851c0480dee0b3ca27bc9e9a82aa7e08","filename":"console/src/main/java/org/apache/syncope/console/commons/SortableAttributableProviderComparator.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSortableAttributableProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSortableAttributableProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSortableAttributableProviderComparator.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"b773afb83bff3d7f2e3c469be311ba093cef8a84","filename":"console/src/main/java/org/apache/syncope/console/commons/SortableDataProviderComparator.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSortableDataProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSortableDataProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSortableDataProviderComparator.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"2671d4ba4775a876e0e65703862ce25dac90a8e8","filename":"console/src/main/java/org/apache/syncope/console/commons/StatusBean.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FStatusBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FStatusBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FStatusBean.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"837b2b39ad34d186b06da17f4fad481b19782a4a","filename":"console/src/main/java/org/apache/syncope/console/commons/StatusUtils.java","status":"added","additions":189,"deletions":0,"changes":189,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FStatusUtils.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"c03197576e9e6b7dd9960f45e2e722751e8c8fb5","filename":"console/src/main/java/org/apache/syncope/console/commons/XMLRolesReader.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FXMLRolesReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FXMLRolesReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FXMLRolesReader.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"acd65fcb6ea02ec2c037e635dc6bdd0657168e84","filename":"console/src/main/java/org/apache/syncope/console/markup/html/CrontabContainer.java","status":"added","additions":186,"deletions":0,"changes":186,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2FCrontabContainer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2FCrontabContainer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2FCrontabContainer.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"cab7a97dfe542cf9009136a8289982b71bc8cf4c","filename":"console/src/main/java/org/apache/syncope/console/markup/html/list/AltListView.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2Flist%2FAltListView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2Flist%2FAltListView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2Flist%2FAltListView.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"35b08c149453dea11d7961168f8c4cf0a63ebfc7","filename":"console/src/main/java/org/apache/syncope/console/pages/AbstractBasePage.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractBasePage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"d538f9fbb738f6101ad49abdb1e187644f881a65","filename":"console/src/main/java/org/apache/syncope/console/pages/AbstractSchedTaskModalPage.java","status":"added","additions":141,"deletions":0,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"6ed139cd6a85bc8abf07d129b40d7a1554b6d08b","filename":"console/src/main/java/org/apache/syncope/console/pages/AbstractSchemaModalPage.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchemaModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"753a4c25c0900249d8404dd3fb46f81bd7f0af8e","filename":"console/src/main/java/org/apache/syncope/console/pages/ApprovalModalPage.java","status":"added","additions":285,"deletions":0,"changes":285,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"1132466c640ab10f56820161f68e3746560855c8","filename":"console/src/main/java/org/apache/syncope/console/pages/BaseModalPage.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBaseModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBaseModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBaseModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"907fdad287ec50d18a1a81a9b39e2bac6e6d36ec","filename":"console/src/main/java/org/apache/syncope/console/pages/BasePage.java","status":"added","additions":179,"deletions":0,"changes":179,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"5a720b743790f28f190ee079d69c7060b58fc9d0","filename":"console/src/main/java/org/apache/syncope/console/pages/BulkActionModalPage.java","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBulkActionModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBulkActionModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBulkActionModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"5efa9f5ef491223f90091749cac936ffaad48a67","filename":"console/src/main/java/org/apache/syncope/console/pages/BulkActionResultModalPage.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBulkActionResultModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBulkActionResultModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBulkActionResultModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"c06cf4ca6b5f06d26d076721e344ccbe68dd575b","filename":"console/src/main/java/org/apache/syncope/console/pages/Configuration.java","status":"added","additions":705,"deletions":0,"changes":705,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"f527d7c873809d9d7e9a8ee18b831ade6299c1e4","filename":"console/src/main/java/org/apache/syncope/console/pages/ConfigurationModalPage.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"7e94c4e228cdb0a444e09895e168dfab482a38a8","filename":"console/src/main/java/org/apache/syncope/console/pages/ConnObjectModalPage.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnObjectModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnObjectModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnObjectModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"7f6ea679cd9410e65c4f521658d2f6e2187ec2f0","filename":"console/src/main/java/org/apache/syncope/console/pages/ConnectorModalPage.java","status":"added","additions":510,"deletions":0,"changes":510,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"e3ed4bf27700921dd10355ac374d9254d0401d48","filename":"console/src/main/java/org/apache/syncope/console/pages/DerivedSchemaModalPage.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"d864a09bf053611c3bf621285ecd687114c4005b","filename":"console/src/main/java/org/apache/syncope/console/pages/DisplayAttributesModalPage.java","status":"added","additions":296,"deletions":0,"changes":296,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"2a9a4f3b222db4c7a97ffa2a328f21cb6429bc96","filename":"console/src/main/java/org/apache/syncope/console/pages/EditUserModalPage.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"f12a802ff217ad5979cfadce0a31656f082d31f0","filename":"console/src/main/java/org/apache/syncope/console/pages/ErrorPage.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FErrorPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FErrorPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FErrorPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"8a78867b9fec8201099a61987bd188e77470c72a","filename":"console/src/main/java/org/apache/syncope/console/pages/ExecMessageModalPage.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FExecMessageModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FExecMessageModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FExecMessageModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"68304c7439c443fa8ed8a31db4751d52bab4dd5c","filename":"console/src/main/java/org/apache/syncope/console/pages/HomePage.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FHomePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FHomePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FHomePage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"0e66a70490508f4d6f7dcfdc85e67a7bc2062f9f","filename":"console/src/main/java/org/apache/syncope/console/pages/InfoModalPage.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FInfoModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FInfoModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FInfoModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"7a745683b24dae2d278ec7dba868c14439f26a21","filename":"console/src/main/java/org/apache/syncope/console/pages/Login.java","status":"added","additions":278,"deletions":0,"changes":278,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"15867d9832508fd15d5c39d0beb308d14933bb14","filename":"console/src/main/java/org/apache/syncope/console/pages/Logout.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogout.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"a21bc44e299f13ed8015402b2224792d08320887","filename":"console/src/main/java/org/apache/syncope/console/pages/MembershipModalPage.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FMembershipModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FMembershipModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FMembershipModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"42c6f57c24818523b35cff8782f1e6bcf4a1da3b","filename":"console/src/main/java/org/apache/syncope/console/pages/NotificationModalPage.java","status":"added","additions":279,"deletions":0,"changes":279,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"40355f59af1f78ffa8f9992db00f1f29e924d480","filename":"console/src/main/java/org/apache/syncope/console/pages/NotificationTaskModalPage.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationTaskModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"a4ed1ba4762401e97640a84de048fa2646ec9feb","filename":"console/src/main/java/org/apache/syncope/console/pages/PolicyModalPage.java","status":"added","additions":226,"deletions":0,"changes":226,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"87aa54d28fde32af29007672852a960dc08a994a","filename":"console/src/main/java/org/apache/syncope/console/pages/PropagationTaskModalPage.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPropagationTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPropagationTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPropagationTaskModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"3a2e8b655e00561df341edbbf9c75b0c08cce162","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportExecResultDownloadModalPage.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"51125a46f411eb280e8a1721ae010fcd287e72a6","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportModalPage.java","status":"added","additions":646,"deletions":0,"changes":646,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"0063956e370f7c28b48c22992cd95e736b7f3917","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportletConfModalPage.java","status":"added","additions":366,"deletions":0,"changes":366,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"c9e48ef27c22abb14e05cb477be90464c974b746","filename":"console/src/main/java/org/apache/syncope/console/pages/Reports.java","status":"added","additions":508,"deletions":0,"changes":508,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"3b0ba376574e61ecb9fd67a366de3c6326298be9","filename":"console/src/main/java/org/apache/syncope/console/pages/ResourceModalPage.java","status":"added","additions":212,"deletions":0,"changes":212,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"dd9b67acf65156760546ea9a0d4bb96c432f029f","filename":"console/src/main/java/org/apache/syncope/console/pages/Resources.java","status":"added","additions":610,"deletions":0,"changes":610,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"0779d701d07d1066482e93bc916aa82c19b361c3","filename":"console/src/main/java/org/apache/syncope/console/pages/ResultStatusModalPage.java","status":"added","additions":365,"deletions":0,"changes":365,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"25fd5e965bb0aa2f35664e46380be8c14704aad6","filename":"console/src/main/java/org/apache/syncope/console/pages/RoleModalPage.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"c2dac91d5ab8834199b92d436505848161df5e55","filename":"console/src/main/java/org/apache/syncope/console/pages/RoleSelectModalPage.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleSelectModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleSelectModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleSelectModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"693bfd8818966eafc65f9a9f9b40067786e5585c","filename":"console/src/main/java/org/apache/syncope/console/pages/RoleTemplateModalPage.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleTemplateModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleTemplateModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleTemplateModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"23ed3ddef3302655c9ea051e156f2d15c93f4c2d","filename":"console/src/main/java/org/apache/syncope/console/pages/Roles.java","status":"added","additions":177,"deletions":0,"changes":177,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"ba17abb80871664345ab087693215f5a6f0c37f7","filename":"console/src/main/java/org/apache/syncope/console/pages/SchedTaskModalPage.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"66a2bf4d3327f585ad400cf8b9167b4a408ef9e8","filename":"console/src/main/java/org/apache/syncope/console/pages/Schema.java","status":"added","additions":463,"deletions":0,"changes":463,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchema.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"3e856e048565e6b54268afa369af2b05add7ef94","filename":"console/src/main/java/org/apache/syncope/console/pages/SchemaModalPage.java","status":"added","additions":332,"deletions":0,"changes":332,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"63a48a13e094c8141ed4a4df7f523dd063135ec0","filename":"console/src/main/java/org/apache/syncope/console/pages/StatusModalPage.java","status":"added","additions":147,"deletions":0,"changes":147,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FStatusModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FStatusModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FStatusModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"e32229129b3804f4327173e56aeeefb49b8a7826","filename":"console/src/main/java/org/apache/syncope/console/pages/SyncTaskModalPage.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"bc283a6df326501ccea14ffe1bfad4c729a389a7","filename":"console/src/main/java/org/apache/syncope/console/pages/TaskModalPage.java","status":"added","additions":259,"deletions":0,"changes":259,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"f48f46fc358a3c62eea7f8d8ad807e8016a1003d","filename":"console/src/main/java/org/apache/syncope/console/pages/Tasks.java","status":"added","additions":226,"deletions":0,"changes":226,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"5c29579783f517c214e43c39aa9ae32857c198fb","filename":"console/src/main/java/org/apache/syncope/console/pages/Todo.java","status":"added","additions":483,"deletions":0,"changes":483,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"f0f1cf9768515cbd5de70be48063a1860a364933","filename":"console/src/main/java/org/apache/syncope/console/pages/UserModalPage.java","status":"added","additions":211,"deletions":0,"changes":211,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"bad6da88da0e89ad1b8de137eb08934bdd263856","filename":"console/src/main/java/org/apache/syncope/console/pages/UserOwnerSelectModalPage.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"86ef4fedd6a53581406facabd24a2f9316320850","filename":"console/src/main/java/org/apache/syncope/console/pages/UserRequestModalPage.java","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserRequestModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserRequestModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserRequestModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"0fe0e4ee09d0c12ef54afd701aee0d221250a92a","filename":"console/src/main/java/org/apache/syncope/console/pages/UserTemplateModalPage.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserTemplateModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserTemplateModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserTemplateModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"e682897a32fc61e1e5ee66c0e4f9ee6c17512c57","filename":"console/src/main/java/org/apache/syncope/console/pages/Users.java","status":"added","additions":167,"deletions":0,"changes":167,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"ebab02cf7756835cbe1a80ebac65eb8131894ce9","filename":"console/src/main/java/org/apache/syncope/console/pages/ViewUserModalPage.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FViewUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FViewUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FViewUserModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"1cee70446898aeae8a6e735da91ad2ebf2c7286d","filename":"console/src/main/java/org/apache/syncope/console/pages/VirtualSchemaModalPage.java","status":"added","additions":130,"deletions":0,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"81ba9535cebf82a758ebbfb77c5137178e0b257e","filename":"console/src/main/java/org/apache/syncope/console/pages/WelcomePage.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"4fadb99e7b711fa44ae7cb74e01f957fd479f3dc","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AbstractSearchPanel.java","status":"added","additions":406,"deletions":0,"changes":406,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"e484d706a2880c5caf6efcd08029d2171d3c5a29","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AbstractSearchResultPanel.java","status":"added","additions":355,"deletions":0,"changes":355,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchResultPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"b8b986017e9dc9668300cd279ad1ddce56d990f9","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AccountInformationPanel.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAccountInformationPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAccountInformationPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAccountInformationPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"35710f09cc19600ab7377f12f5aacbe9e65b77b6","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AjaxDataTablePanel.java","status":"added","additions":180,"deletions":0,"changes":180,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAjaxDataTablePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAjaxDataTablePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAjaxDataTablePanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"42fea2a2193a309d6f9ce8a86403bf499a4c5e1b","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AttributesPanel.java","status":"added","additions":282,"deletions":0,"changes":282,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"29db4267724754d6de71193dc90c5ec936e508fe","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/DerivedAttributesPanel.java","status":"added","additions":177,"deletions":0,"changes":177,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FDerivedAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FDerivedAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FDerivedAttributesPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"805082d4822824ddeedf399811a0832e46cb65ed","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/JQueryUITabbedPanel.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FJQueryUITabbedPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FJQueryUITabbedPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FJQueryUITabbedPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"35d964c881b18afcd8db5ffd2a8e51a188517049","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/MembershipsPanel.java","status":"added","additions":248,"deletions":0,"changes":248,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FMembershipsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FMembershipsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FMembershipsPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"7ce935b60d2c15b3533f4cd10a3f7a29ed181f4b","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/NotificationTasks.java","status":"added","additions":268,"deletions":0,"changes":268,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"2480e6039c774e3ea52bdedb2be71b07bb530344","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PoliciesPanel.java","status":"added","additions":333,"deletions":0,"changes":333,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"21432016df0044607317823ab4f64e779364bae5","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PolicyBeanPanel.java","status":"added","additions":322,"deletions":0,"changes":322,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"e20c2370524c94cb43cbd0f317d7f1bd3e486242","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PropagationTasks.java","status":"added","additions":287,"deletions":0,"changes":287,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"0fec863719318ae2391635f1f6e1ee0010d6e838","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceConnConfPanel.java","status":"added","additions":302,"deletions":0,"changes":302,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"76e34cb734829eac2965b77be7f06f0bb2ec4823","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceDetailsPanel.java","status":"added","additions":250,"deletions":0,"changes":250,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"c2d5daf354a8a4b9b4ae61ac50fbda03b2643b0b","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceMappingPanel.java","status":"added","additions":647,"deletions":0,"changes":647,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"6bf734cc25d21b98c9c830b49c0a3a61d845fd52","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceSecurityPanel.java","status":"added","additions":189,"deletions":0,"changes":189,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"66b68929839d7917230d913a3e517fe17273e712","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourcesPanel.java","status":"added","additions":154,"deletions":0,"changes":154,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourcesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourcesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourcesPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"6658e96d38c023f551a09825f5e8dd1d620bddbe","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleDetailsPanel.java","status":"added","additions":393,"deletions":0,"changes":393,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleDetailsPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"7eefcb360784861bb2b85f8ca341a76cc13ce0ee","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RolePanel.java","status":"added","additions":141,"deletions":0,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRolePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRolePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRolePanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"5dbfd7bda772e08e7e267c9a9766040c0aedc6ab","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSearchPanel.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"9cea3409b126be3af3339ef94833fc4259c860b8","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSearchResultPanel.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchResultPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"89044f8056a06258ed953e1c943ae6cd3022193b","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSecurityPanel.java","status":"added","additions":193,"deletions":0,"changes":193,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"b0752e9278ffcd6e1865044ccd53bd04e352d83a","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSummaryPanel.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSummaryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSummaryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSummaryPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"0c99fd150bccd77e6501b8aea77689036066944b","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleTabPanel.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleTabPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleTabPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleTabPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"057bd4ffdb550a6f9756c393cbcf6fc7052471c9","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SchedTasks.java","status":"added","additions":301,"deletions":0,"changes":301,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"828f3d127b50513c56a639d641e75f50bb88c661","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SearchView.java","status":"added","additions":306,"deletions":0,"changes":306,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchView.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"49280a4d547f28e6a3358cf19bfc83eeb0b54584","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SelectOnlyUserSearchResultPanel.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectOnlyUserSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectOnlyUserSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectOnlyUserSearchResultPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"15eb128daa7afa644f99f4ab05a0ea26197fddbc","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/StatusPanel.java","status":"added","additions":307,"deletions":0,"changes":307,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FStatusPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FStatusPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FStatusPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"f7ef9f7695c3d6a83294880fa5e2c4a3224fa90e","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SyncTasks.java","status":"added","additions":345,"deletions":0,"changes":345,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"adc058883556d862dd16ad7429530fb050e3223c","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/UserDetailsPanel.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserDetailsPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"296a913081cd9d6d295a3c2645df59290f219088","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/UserSearchPanel.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"2db95b4e3c66f65b529ec082d04612e00443f942","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/UserSearchResultPanel.java","status":"added","additions":277,"deletions":0,"changes":277,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchResultPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"1deb6ed6e6b46da63d4b3d971898ba639ad37757","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/VirtualAttributesPanel.java","status":"added","additions":243,"deletions":0,"changes":243,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FVirtualAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FVirtualAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FVirtualAttributesPanel.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"c1719b012e673cc0d046e3678a161f0c599d3092","filename":"console/src/main/java/org/apache/syncope/console/rest/AbstractAttributableRestClient.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"02ab0172ef0a138019c4e0fc7ea10d1f8081e7a7","filename":"console/src/main/java/org/apache/syncope/console/rest/ApprovalRestClient.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"8c46ac8c7719a654c1fcd5bd801960d2e5ff499e","filename":"console/src/main/java/org/apache/syncope/console/rest/AuthRestClient.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"3cd14d317378be01838704779a8c36ab2c939ad2","filename":"console/src/main/java/org/apache/syncope/console/rest/BaseRestClient.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"54deedcd12ad38b5062ed744759182ba36fe29d4","filename":"console/src/main/java/org/apache/syncope/console/rest/ConfigurationRestClient.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"bacdd90ad0fd3fb508a4ff825cfde83e6d2ff632","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"added","additions":201,"deletions":0,"changes":201,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"dcb3c8367aa822d7a2dde80cac3c515053e1d8d0","filename":"console/src/main/java/org/apache/syncope/console/rest/ExecutionRestClient.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FExecutionRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FExecutionRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FExecutionRestClient.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"a751a70bef526dc3c78d8463132494a09652adc6","filename":"console/src/main/java/org/apache/syncope/console/rest/InvalidPolicyType.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FInvalidPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FInvalidPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FInvalidPolicyType.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"51a1488dcb048614adfbc6d11a9bead6ce695684","filename":"console/src/main/java/org/apache/syncope/console/rest/LoggerRestClient.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"2c91600206f22dc6b339a53bc5b0e88a4e49e702","filename":"console/src/main/java/org/apache/syncope/console/rest/NotificationRestClient.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"4407ac266583fc4b8b16f173d26b01ee0259a576","filename":"console/src/main/java/org/apache/syncope/console/rest/PolicyRestClient.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"},{"sha":"8657af02bd0440724ab857185fbb41702f7d0530","filename":"console/src/main/java/org/apache/syncope/console/rest/ReportRestClient.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03fe1cd43606eb2bdaa90d241ee81017397a321f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java?ref=03fe1cd43606eb2bdaa90d241ee81017397a321f"}]}