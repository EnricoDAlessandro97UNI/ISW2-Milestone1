{"sha":"761d1045e5d0ce147271f1780b15d635117e056a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc2MWQxMDQ1ZTVkMGNlMTQ3MjcxZjE3ODBiMTVkNjM1MTE3ZTA1NmE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-12T11:59:50Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-12T12:27:18Z"},"message":"[SYNCOPE-1223] Now allowing FIQL expressions with escaped , and ;","tree":{"sha":"19f026cac8219eaa87444934116d705178ef4920","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/19f026cac8219eaa87444934116d705178ef4920"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/761d1045e5d0ce147271f1780b15d635117e056a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/761d1045e5d0ce147271f1780b15d635117e056a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/761d1045e5d0ce147271f1780b15d635117e056a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/761d1045e5d0ce147271f1780b15d635117e056a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"df35f9ca9009a3a51f43d9d8643c73b80162cfde","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/df35f9ca9009a3a51f43d9d8643c73b80162cfde","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/df35f9ca9009a3a51f43d9d8643c73b80162cfde"}],"stats":{"total":261,"additions":169,"deletions":92},"files":[{"sha":"8b3c67b8b9646149bf8b6639f2db7f3b1e8952ac","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java","status":"modified","additions":46,"deletions":17,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/761d1045e5d0ce147271f1780b15d635117e056a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/761d1045e5d0ce147271f1780b15d635117e056a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java?ref=761d1045e5d0ce147271f1780b15d635117e056a","patch":"@@ -21,16 +21,25 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n+import org.apache.wicket.request.cycle.RequestCycle;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class AnyDataProvider<A extends AnyTO> extends DirectoryDataProvider<A> {\n \n     private static final long serialVersionUID = 6267494272884913376L;\n \n+    protected static final Logger LOG = LoggerFactory.getLogger(AnyDataProvider.class);\n+\n     private final SortableAnyProviderComparator<A> comparator;\n \n     private final AbstractAnyRestClient<A, ?> restClient;\n@@ -43,12 +52,15 @@\n \n     private final String type;\n \n+    private final PageReference pageRef;\n+\n     public AnyDataProvider(\n             final AbstractAnyRestClient<A, ?> restClient,\n             final int paginatorRows,\n             final boolean filtered,\n             final String realm,\n-            final String type) {\n+            final String type,\n+            final PageReference pageRef) {\n \n         super(paginatorRows);\n \n@@ -74,20 +86,29 @@ public AnyDataProvider(\n \n         this.realm = realm;\n         this.type = type;\n+        this.pageRef = pageRef;\n     }\n \n     @Override\n     public Iterator<A> iterator(final long first, final long count) {\n-        List<A> result;\n-\n-        final int page = ((int) first / paginatorRows);\n-\n-        if (filtered) {\n-            result = fiql == null\n-                    ? Collections.<A>emptyList()\n-                    : restClient.search(realm, fiql, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);\n-        } else {\n-            result = restClient.search(realm, null, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);\n+        List<A> result = Collections.emptyList();\n+\n+        try {\n+            final int page = ((int) first / paginatorRows);\n+\n+            if (filtered) {\n+                result = fiql == null\n+                        ? Collections.<A>emptyList()\n+                        : restClient.search(realm, fiql, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);\n+            } else {\n+                result = restClient.search(realm, null, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"While searching with FIQL {}\", fiql, e);\n+            SyncopeConsoleSession.get().error(e.getMessage());\n+\n+            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(\n+                    RequestCycle.get().find(AjaxRequestTarget.class));\n         }\n \n         Collections.sort(result, comparator);\n@@ -96,12 +117,20 @@ public Iterator<A> iterator(final long first, final long count) {\n \n     @Override\n     public long size() {\n-        long result;\n-\n-        if (filtered) {\n-            result = fiql == null ? 0 : restClient.searchCount(realm, fiql, type);\n-        } else {\n-            result = restClient.searchCount(realm, null, type);\n+        long result = 0;\n+\n+        try {\n+            if (filtered) {\n+                result = fiql == null ? 0 : restClient.searchCount(realm, fiql, type);\n+            } else {\n+                result = restClient.searchCount(realm, null, type);\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"While requesting for size() with FIQL {}\", fiql, e);\n+            SyncopeConsoleSession.get().error(e.getMessage());\n+\n+            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(\n+                    RequestCycle.get().find(AjaxRequestTarget.class));\n         }\n \n         return result;"},{"sha":"da58347a13d974452fc2fd260c3b1f899a229726","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/761d1045e5d0ce147271f1780b15d635117e056a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/761d1045e5d0ce147271f1780b15d635117e056a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java?ref=761d1045e5d0ce147271f1780b15d635117e056a","patch":"@@ -211,8 +211,7 @@ protected void addPropertyColumn(\n \n     @Override\n     protected AnyDataProvider<A> dataProvider() {\n-        final AnyDataProvider<A> dp = new AnyDataProvider<>(restClient, rows, filtered, realm, type);\n-        return dp.setFIQL(this.fiql);\n+        return new AnyDataProvider<>(restClient, rows, filtered, realm, type, pageRef).setFIQL(this.fiql);\n     }\n \n     public void search(final String fiql, final AjaxRequestTarget target) {"},{"sha":"68ac17f219e7981119ed31170100e9f69999251e","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/761d1045e5d0ce147271f1780b15d635117e056a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/761d1045e5d0ce147271f1780b15d635117e056a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=761d1045e5d0ce147271f1780b15d635117e056a","patch":"@@ -55,48 +55,46 @@ private static Pattern getTypeConditionPattern(final String type) {\n     }\n \n     public static Map<String, List<SearchClause>> getSearchClauses(final Map<String, String> fiql) {\n-        final Map<String, List<SearchClause>> res = new HashMap<>();\n-        if (fiql != null && !fiql.isEmpty()) {\n-            for (Map.Entry<String, String> entry : fiql.entrySet()) {\n-                res.put(entry.getKey(), getSearchClauses(\n-                        entry.getValue().replaceAll(getTypeConditionPattern(entry.getKey()).pattern(), \"\")));\n-            }\n+        Map<String, List<SearchClause>> clauses = new HashMap<>();\n+        for (Map.Entry<String, String> entry : fiql.entrySet()) {\n+            clauses.put(entry.getKey(), getSearchClauses(\n+                    entry.getValue().replaceAll(getTypeConditionPattern(entry.getKey()).pattern(), \"\")));\n         }\n-        return res;\n+        return clauses;\n     }\n \n     public static List<SearchClause> getSearchClauses(final String fiql) {\n-        final List<SearchClause> res = new ArrayList<>();\n+        List<SearchClause> clauses = new ArrayList<>();\n         if (StringUtils.isNotBlank(fiql)) {\n             try {\n                 SyncopeFiqlParser<SearchBean> fiqlParser = new SyncopeFiqlParser<>(\n                         SearchBean.class, AbstractFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n-                res.addAll(getSearchClauses(fiqlParser.parse(fiql)));\n+                clauses.addAll(getSearchClauses(fiqlParser.parse(fiql)));\n             } catch (Exception e) {\n                 LOG.error(\"Unparseable FIQL expression '{}'\", fiql, e);\n             }\n         }\n-        return res;\n+        return clauses;\n     }\n \n     private static List<SearchClause> getSearchClauses(final SearchCondition<SearchBean> sc) {\n-        List<SearchClause> res = new ArrayList<>();\n+        List<SearchClause> clauses = new ArrayList<>();\n \n         if (sc.getStatement() == null) {\n-            res.addAll(getCompoundSearchClause(sc));\n+            clauses.addAll(getCompoundSearchClauses(sc));\n         } else {\n-            res.add(getPrimitiveSearchClause(sc));\n+            clauses.add(getPrimitiveSearchClause(sc));\n         }\n \n-        return res;\n+        return clauses;\n     }\n \n-    private static List<SearchClause> getCompoundSearchClause(final SearchCondition<SearchBean> sc) {\n-        List<SearchClause> res = new ArrayList<>();\n+    private static List<SearchClause> getCompoundSearchClauses(final SearchCondition<SearchBean> sc) {\n+        List<SearchClause> clauses = new ArrayList<>();\n \n         for (SearchCondition<SearchBean> searchCondition : sc.getSearchConditions()) {\n             if (searchCondition.getStatement() == null) {\n-                res.addAll(getCompoundSearchClause(searchCondition));\n+                clauses.addAll(getCompoundSearchClauses(searchCondition));\n             } else {\n                 SearchClause clause = getPrimitiveSearchClause(searchCondition);\n                 if (sc.getConditionType() == ConditionType.AND) {\n@@ -105,43 +103,43 @@ private static List<SearchClause> getCompoundSearchClause(final SearchCondition<\n                 if (sc.getConditionType() == ConditionType.OR) {\n                     clause.setOperator(SearchClause.Operator.OR);\n                 }\n-                res.add(clause);\n+                clauses.add(clause);\n             }\n         }\n \n-        return res;\n+        return clauses;\n     }\n \n     private static SearchClause getPrimitiveSearchClause(final SearchCondition<SearchBean> sc) {\n-        SearchClause res = new SearchClause();\n+        SearchClause clause = new SearchClause();\n \n         String property = sc.getCondition().getKeySet().iterator().next();\n-        res.setProperty(property);\n-        String value = sc.getCondition().get(property);\n-        res.setValue(value);\n+        clause.setProperty(property);\n+        String value = sc.getCondition().get(property).replace(\"%252C\", \",\").replace(\"%253B\", \";\");\n+        clause.setValue(value);\n \n         LOG.debug(\"Condition: \" + sc.getCondition());\n \n         if (SpecialAttr.ROLES.toString().equals(property)) {\n-            res.setType(SearchClause.Type.ROLE_MEMBERSHIP);\n-            res.setProperty(value);\n+            clause.setType(SearchClause.Type.ROLE_MEMBERSHIP);\n+            clause.setProperty(value);\n         } else if (SpecialAttr.RELATIONSHIPS.toString().equals(property)) {\n-            res.setType(SearchClause.Type.RELATIONSHIP);\n-            res.setProperty(value);\n+            clause.setType(SearchClause.Type.RELATIONSHIP);\n+            clause.setProperty(value);\n         } else if (SpecialAttr.RELATIONSHIP_TYPES.toString().equals(property)) {\n-            res.setType(SearchClause.Type.RELATIONSHIP);\n-            res.setProperty(value);\n+            clause.setType(SearchClause.Type.RELATIONSHIP);\n+            clause.setProperty(value);\n         } else if (SpecialAttr.GROUPS.toString().equals(property)) {\n-            res.setType(SearchClause.Type.GROUP_MEMBERSHIP);\n-            res.setProperty(value);\n+            clause.setType(SearchClause.Type.GROUP_MEMBERSHIP);\n+            clause.setProperty(value);\n         } else if (SpecialAttr.RESOURCES.toString().equals(property)) {\n-            res.setType(SearchClause.Type.RESOURCE);\n-            res.setProperty(value);\n+            clause.setType(SearchClause.Type.RESOURCE);\n+            clause.setProperty(value);\n         } else if (SpecialAttr.MEMBER.toString().equals(property)) {\n-            res.setType(SearchClause.Type.GROUP_MEMBER);\n-            res.setProperty(value);\n+            clause.setType(SearchClause.Type.GROUP_MEMBER);\n+            clause.setProperty(value);\n         } else {\n-            res.setType(SearchClause.Type.ATTRIBUTE);\n+            clause.setType(SearchClause.Type.ATTRIBUTE);\n         }\n \n         ConditionType ct = sc.getConditionType();\n@@ -156,45 +154,45 @@ private static SearchClause getPrimitiveSearchClause(final SearchCondition<Searc\n         switch (ct) {\n             case EQUALS:\n                 if (SpecialAttr.RELATIONSHIP_TYPES.toString().equals(property)) {\n-                    res.setComparator(SpecialAttr.NULL.toString().equals(value)\n+                    clause.setComparator(SpecialAttr.NULL.toString().equals(value)\n                             ? SearchClause.Comparator.EQUALS : SearchClause.Comparator.IS_NULL);\n                 } else {\n-                    res.setComparator(SpecialAttr.NULL.toString().equals(value)\n+                    clause.setComparator(SpecialAttr.NULL.toString().equals(value)\n                             ? SearchClause.Comparator.IS_NULL : SearchClause.Comparator.EQUALS);\n                 }\n                 break;\n \n             case NOT_EQUALS:\n                 if (SpecialAttr.RELATIONSHIP_TYPES.toString().equals(property)) {\n-                    res.setComparator(SpecialAttr.NULL.toString().equals(value)\n+                    clause.setComparator(SpecialAttr.NULL.toString().equals(value)\n                             ? SearchClause.Comparator.NOT_EQUALS : SearchClause.Comparator.IS_NOT_NULL);\n                 } else {\n-                    res.setComparator(SpecialAttr.NULL.toString().equals(value)\n+                    clause.setComparator(SpecialAttr.NULL.toString().equals(value)\n                             ? SearchClause.Comparator.IS_NOT_NULL : SearchClause.Comparator.NOT_EQUALS);\n                 }\n                 break;\n \n             case GREATER_OR_EQUALS:\n-                res.setComparator(SearchClause.Comparator.GREATER_OR_EQUALS);\n+                clause.setComparator(SearchClause.Comparator.GREATER_OR_EQUALS);\n                 break;\n \n             case GREATER_THAN:\n-                res.setComparator(SearchClause.Comparator.GREATER_THAN);\n+                clause.setComparator(SearchClause.Comparator.GREATER_THAN);\n                 break;\n \n             case LESS_OR_EQUALS:\n-                res.setComparator(SearchClause.Comparator.LESS_OR_EQUALS);\n+                clause.setComparator(SearchClause.Comparator.LESS_OR_EQUALS);\n                 break;\n \n             case LESS_THAN:\n-                res.setComparator(SearchClause.Comparator.LESS_THAN);\n+                clause.setComparator(SearchClause.Comparator.LESS_THAN);\n                 break;\n \n             default:\n                 break;\n         }\n \n-        return res;\n+        return clause;\n     }\n \n     public static String buildFIQL(final List<SearchClause> clauses, final AbstractFiqlSearchConditionBuilder builder) {\n@@ -216,17 +214,19 @@ public static String buildFIQL(\n             prevCondition = condition;\n \n             if (clause.getType() != null) {\n+                String value = clause.getValue() == null\n+                        ? null\n+                        : clause.getValue().replace(\",\", \"%252C\").replace(\";\", \"%253B\");\n+\n                 switch (clause.getType()) {\n                     case GROUP_MEMBER:\n                         switch (clause.getComparator()) {\n                             case EQUALS:\n-                                condition = ((GroupFiqlSearchConditionBuilder) builder).\n-                                        withMembers(clause.getValue());\n+                                condition = ((GroupFiqlSearchConditionBuilder) builder).withMembers(value);\n                                 break;\n \n                             case NOT_EQUALS:\n-                                condition = ((GroupFiqlSearchConditionBuilder) builder).\n-                                        withoutMembers(clause.getValue());\n+                                condition = ((GroupFiqlSearchConditionBuilder) builder).withoutMembers(value);\n                                 break;\n \n                             default:\n@@ -275,35 +275,35 @@ public static String buildFIQL(\n \n                                 case LESS_THAN:\n                                     condition = isLong\n-                                            ? property.lessThan(NumberUtils.toLong(clause.getValue()))\n-                                            : property.lexicalBefore(clause.getValue());\n+                                            ? property.lessThan(NumberUtils.toLong(value))\n+                                            : property.lexicalBefore(value);\n                                     break;\n \n                                 case LESS_OR_EQUALS:\n                                     condition = isLong\n-                                            ? property.lessOrEqualTo(NumberUtils.toLong(clause.getValue()))\n-                                            : property.lexicalNotAfter(clause.getValue());\n+                                            ? property.lessOrEqualTo(NumberUtils.toLong(value))\n+                                            : property.lexicalNotAfter(value);\n                                     break;\n \n                                 case GREATER_THAN:\n                                     condition = isLong\n-                                            ? property.greaterThan(NumberUtils.toLong(clause.getValue()))\n-                                            : property.lexicalAfter(clause.getValue());\n+                                            ? property.greaterThan(NumberUtils.toLong(value))\n+                                            : property.lexicalAfter(value);\n                                     break;\n \n                                 case GREATER_OR_EQUALS:\n                                     condition = isLong\n-                                            ? property.greaterOrEqualTo(NumberUtils.toLong(clause.getValue()))\n-                                            : property.lexicalNotBefore(clause.getValue());\n+                                            ? property.greaterOrEqualTo(NumberUtils.toLong(value))\n+                                            : property.lexicalNotBefore(value);\n                                     break;\n \n                                 case NOT_EQUALS:\n-                                    condition = property.notEqualTolIgnoreCase(clause.getValue());\n+                                    condition = property.notEqualTolIgnoreCase(value);\n                                     break;\n \n                                 case EQUALS:\n                                 default:\n-                                    condition = property.equalToIgnoreCase(clause.getValue());\n+                                    condition = property.equalToIgnoreCase(value);\n                                     break;\n                             }\n                         }\n@@ -340,11 +340,11 @@ public static String buildFIQL(\n                                         break;\n                                     case EQUALS:\n                                         condition = ((UserFiqlSearchConditionBuilder) builder).\n-                                                inRelationships(clause.getValue());\n+                                                inRelationships(value);\n                                         break;\n                                     case NOT_EQUALS:\n                                         condition = ((UserFiqlSearchConditionBuilder) builder).\n-                                                notInRelationships(clause.getValue());\n+                                                notInRelationships(value);\n                                         break;\n                                     default:\n                                         break;\n@@ -361,11 +361,11 @@ public static String buildFIQL(\n                                         break;\n                                     case EQUALS:\n                                         condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n-                                                inRelationships(clause.getValue());\n+                                                inRelationships(value);\n                                         break;\n                                     case NOT_EQUALS:\n                                         condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n-                                                notInRelationships(clause.getValue());\n+                                                notInRelationships(value);\n                                         break;\n                                     default:\n                                         break;"},{"sha":"1ec0f6f8196fa7beabe87e6b134146996e982ccc","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondConverter.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/761d1045e5d0ce147271f1780b15d635117e056a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/761d1045e5d0ce147271f1780b15d635117e056a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverter.java?ref=761d1045e5d0ce147271f1780b15d635117e056a","patch":"@@ -18,8 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.api.search;\n \n+import java.net.URLDecoder;\n+import java.nio.charset.StandardCharsets;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.SyncopeFiqlParser;\n@@ -34,25 +37,27 @@ public final class SearchCondConverter {\n     /**\n      * Parses a FIQL expression into Syncope's <tt>SearchCond</tt>, using CXF's <tt>FiqlParser</tt>.\n      *\n-     * @param fiqlExpression FIQL string\n+     * @param fiql FIQL string\n      * @param realms optional realm to provide to {@link SearchCondVisitor}\n      * @return {@link SearchCond} instance for given FIQL expression\n      * @see SyncopeFiqlParser\n      */\n-    public static SearchCond convert(final String fiqlExpression, final String... realms) {\n-        SyncopeFiqlParser<SearchBean> fiqlParser = new SyncopeFiqlParser<>(\n+    public static SearchCond convert(final String fiql, final String... realms) {\n+        SyncopeFiqlParser<SearchBean> parser = new SyncopeFiqlParser<>(\n                 SearchBean.class, AbstractFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n \n         try {\n-            SearchCondVisitor searchCondVisitor = new SearchCondVisitor();\n+            SearchCondVisitor visitor = new SearchCondVisitor();\n             if (realms != null && realms.length > 0) {\n-                searchCondVisitor.setRealm(realms[0]);\n+                visitor.setRealm(realms[0]);\n             }\n-            searchCondVisitor.visit(fiqlParser.parse(fiqlExpression));\n-            return searchCondVisitor.getQuery();\n+            SearchCondition<SearchBean> sc = parser.parse(URLDecoder.decode(fiql, StandardCharsets.UTF_8.name()));\n+            sc.accept(visitor);\n+\n+            return visitor.getQuery();\n         } catch (Exception e) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n-            sce.getElements().add(fiqlExpression);\n+            sce.getElements().add(fiql);\n             sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));\n             throw sce;\n         }"},{"sha":"18d576677d12b7ef33561257706a9b0348db82a7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/761d1045e5d0ce147271f1780b15d635117e056a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/761d1045e5d0ce147271f1780b15d635117e056a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=761d1045e5d0ce147271f1780b15d635117e056a","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.search;\n \n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n@@ -73,8 +76,14 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n         String name = getRealPropertyName(sc.getStatement().getProperty());\n         Optional<SpecialAttr> specialAttrName = SpecialAttr.fromString(name);\n \n-        String value = SearchUtils.toSqlWildcardString(sc.getStatement().getValue().toString(), false).\n-                replaceAll(\"\\\\\\\\_\", \"_\");\n+        String value = null;\n+        try {\n+            value = SearchUtils.toSqlWildcardString(\n+                    URLDecoder.decode(sc.getStatement().getValue().toString(), StandardCharsets.UTF_8.name()), false).\n+                    replaceAll(\"\\\\\\\\_\", \"_\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new IllegalArgumentException(\"While decoding \" + sc.getStatement().getValue(), e);\n+        }\n         Optional<SpecialAttr> specialAttrValue = SpecialAttr.fromString(value);\n \n         AttributeCond attributeCond = createAttributeCond(name);"},{"sha":"10e229f4d9735d9d1bc72a0525565e8ed6065272","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/SearchCondConverterTest.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/761d1045e5d0ce147271f1780b15d635117e056a/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/761d1045e5d0ce147271f1780b15d635117e056a/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java?ref=761d1045e5d0ce147271f1780b15d635117e056a","patch":"@@ -305,4 +305,15 @@ public void or() {\n         assertEquals(orCond, SearchCondConverter.convert(fiql));\n     }\n \n+    @Test\n+    public void issueSYNCOPE1223() {\n+        String fiql = new UserFiqlSearchConditionBuilder().is(\"ctype\").equalTo(\"ou=sample%252Co=isp\").query();\n+\n+        AttributeCond cond = new AttributeCond(AttributeCond.Type.EQ);\n+        cond.setSchema(\"ctype\");\n+        cond.setExpression(\"ou=sample,o=isp\");\n+\n+        assertEquals(SearchCond.getLeafCond(cond), SearchCondConverter.convert(fiql));\n+    }\n+\n }"},{"sha":"a0409609c11744cd76ddc1daf94041bd2f0eec48","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/761d1045e5d0ce147271f1780b15d635117e056a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/761d1045e5d0ce147271f1780b15d635117e056a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=761d1045e5d0ce147271f1780b15d635117e056a","patch":"@@ -30,6 +30,7 @@\n import javax.ws.rs.core.UriInfo;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n import org.apache.cxf.jaxrs.ext.search.SearchBean;\n import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n@@ -161,6 +162,7 @@ protected SearchCond getSearchCond(final String fiql, final String realm) {\n \n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n             sce.getElements().add(fiql);\n+            sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));\n             throw sce;\n         }\n     }"},{"sha":"0677ad7af68c757f22dedede95136d95ab81ec3a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/761d1045e5d0ce147271f1780b15d635117e056a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/761d1045e5d0ce147271f1780b15d635117e056a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=761d1045e5d0ce147271f1780b15d635117e056a","patch":"@@ -28,7 +28,9 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.MembershipPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -471,4 +473,24 @@ public void issueSYNCOPE983() {\n                         build());\n         assertNotEquals(0, users.getTotalCount());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1223() {\n+        UserPatch patch = new UserPatch();\n+        patch.setKey(\"vivaldi\");\n+        patch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"ctype\", \"ou=sample,o=isp\")).build());\n+        userService.update(patch);\n+\n+        try {\n+            PagedResult<UserTO> users = userService.search(new AnyQuery.Builder().fiql(\n+                    SyncopeClient.getUserSearchConditionBuilder().is(\"ctype\").equalTo(\"ou=sample%252Co=isp\").query()).\n+                    build());\n+            assertEquals(1, users.getTotalCount());\n+            assertEquals(\"vivaldi\", users.getResult().get(0).getUsername());\n+        } finally {\n+            patch.getPlainAttrs().clear();\n+            patch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"ctype\", \"F\")).build());\n+            userService.update(patch);\n+        }\n+    }\n }"}]}