{"sha":"84c2d7bc836c0f3419ce204169e9dfc98ca8407f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg0YzJkN2JjODM2YzBmMzQxOWNlMjA0MTY5ZTlkZmM5OGNhODQwN2Y=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-05-25T12:10:24Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-05-25T12:10:24Z"},"message":"Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/syncope","tree":{"sha":"4865c53ca5d3d9921d10ade16d2617d5e30de88f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4865c53ca5d3d9921d10ade16d2617d5e30de88f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/84c2d7bc836c0f3419ce204169e9dfc98ca8407f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/84c2d7bc836c0f3419ce204169e9dfc98ca8407f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/84c2d7bc836c0f3419ce204169e9dfc98ca8407f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"e3e57dfb95462da33bc07f6a5549f58157c86461","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e3e57dfb95462da33bc07f6a5549f58157c86461","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e3e57dfb95462da33bc07f6a5549f58157c86461"},{"sha":"4cd6f5dc673497b83c56873f007f61e405f40f2a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4cd6f5dc673497b83c56873f007f61e405f40f2a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4cd6f5dc673497b83c56873f007f61e405f40f2a"}],"stats":{"total":613,"additions":574,"deletions":39},"files":[{"sha":"920393b9682388f3e88d1663b4becbe229b9e7f4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/JobAction.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobAction.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum JobAction {\n+\n+    START,\n+    STOP;\n+\n+}"},{"sha":"3a43807a31ac9073c284be0c3bb48d33f47ed0dd","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/JobStatusType.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobStatusType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobStatusType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobStatusType.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum JobStatusType {\n+\n+    ALL,\n+    RUNNING,\n+    SCHEDULED;\n+\n+}"},{"sha":"996f7842be39d9f370d09eda1ad0b5e8f09cf3bf","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -24,6 +24,7 @@\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n+import javax.ws.rs.MatrixParam;\n import javax.ws.rs.POST;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n@@ -38,6 +39,8 @@\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n import org.apache.syncope.common.rest.api.beans.ListQuery;\n@@ -155,4 +158,25 @@ public interface ReportService extends JAXRSService {\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     Response exportExecutionResult(@NotNull @PathParam(\"executionKey\") Long executionKey,\n             @QueryParam(\"format\") ReportExecExportFormat fmt);\n+\n+    /**\n+     * List report jobs of the given type.\n+     *\n+     * @param type of report job\n+     * @return list of report jobs of the given type\n+     */\n+    @GET\n+    @Path(\"jobs\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ReportExecTO> listJobs(@MatrixParam(\"type\") JobStatusType type);\n+\n+    /**\n+     * Executes an action on an existing report's job.\n+     *\n+     * @param reportKey report key\n+     * @param action\n+     */\n+    @POST\n+    @Path(\"{reportKey}\")\n+    void actionJob(@PathParam(\"reportKey\") Long reportKey, @QueryParam(\"action\") JobAction action);\n }"},{"sha":"84b7cbf70c990e0542a8285936d7a3211c98de21","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n@@ -43,6 +44,8 @@\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ListQuery;\n \n@@ -167,4 +170,25 @@ TaskExecTO execute(@NotNull @PathParam(\"taskKey\") Long taskKey,\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     BulkActionResult bulk(@NotNull BulkAction bulkAction);\n+\n+    /**\n+     * List task jobs of the given type.\n+     *\n+     * @param type of task job\n+     * @return list task jobs of the given type\n+     */\n+    @GET\n+    @Path(\"jobs\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<TaskExecTO> listJobs(@MatrixParam(\"type\") JobStatusType type);\n+\n+    /**\n+     * Executes an action on an existing task's job.\n+     *\n+     * @param taskKey task key\n+     * @param action\n+     */\n+    @POST\n+    @Path(\"{taskKey}\")\n+    void actionJob(@PathParam(\"taskKey\") Long taskKey, @QueryParam(\"action\") JobAction action);\n }"},{"sha":"e423174b7008a40341f5f28bf2b7f35023bc9a02","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractJobLogic.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.to.AbstractExecTO;\n+import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobKey;\n+import org.quartz.Scheduler;\n+import org.quartz.SchedulerException;\n+import org.quartz.Trigger;\n+import org.quartz.impl.matchers.GroupMatcher;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n+\n+abstract class AbstractJobLogic<T extends AbstractBaseBean> extends AbstractTransactionalLogic<T> {\n+\n+    @Autowired\n+    protected SchedulerFactoryBean scheduler;\n+\n+    protected abstract Long getKeyFromJobName(final JobKey jobKey);\n+\n+    private <E extends AbstractExecTO> void setTaskOrReportKey(final E jobExecTO, final Long taskOrReportKey) {\n+        if (jobExecTO instanceof TaskExecTO) {\n+            ((TaskExecTO) jobExecTO).setTask(taskOrReportKey);\n+        } else if (jobExecTO instanceof ReportExecTO) {\n+            ((ReportExecTO) jobExecTO).setReport(taskOrReportKey);\n+        }\n+    }\n+\n+    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n+        List<E> jobExecTOs = new ArrayList<>();\n+\n+        switch (type) {\n+            case ALL:\n+                try {\n+                    for (String groupName : scheduler.getScheduler().getJobGroupNames()) {\n+                        for (JobKey jobKey\n+                                : scheduler.getScheduler().getJobKeys(GroupMatcher.jobGroupEquals(groupName))) {\n+\n+                            Long key = getKeyFromJobName(jobKey);\n+                            if (key != null) {\n+                                List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n+                                if (jobTriggers.isEmpty()) {\n+                                    E jobExecTO = reference.newInstance();\n+                                    setTaskOrReportKey(jobExecTO, key);\n+                                    jobExecTO.setStatus(\"Not Scheduled\");\n+\n+                                    jobExecTOs.add(jobExecTO);\n+                                } else {\n+                                    for (Trigger t : jobTriggers) {\n+                                        E jobExecTO = reference.newInstance();\n+                                        jobExecTO.setKey(key);\n+                                        jobExecTO.\n+                                                setStatus(scheduler.getScheduler().getTriggerState(t.getKey()).name());\n+                                        jobExecTO.setStartDate(t.getStartTime());\n+\n+                                        jobExecTOs.add(jobExecTO);\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                } catch (SchedulerException e) {\n+                    LOG.debug(\"Problems while retrieving all scheduled jobs\", e);\n+                } catch (InstantiationException e) {\n+                    LOG.debug(\"Problems while instantiating {}\", reference, e);\n+                } catch (IllegalAccessException e) {\n+                    LOG.debug(\"Problems while accessing {}\", reference, e);\n+                }\n+                break;\n+\n+            case RUNNING:\n+                try {\n+                    for (JobExecutionContext jec : scheduler.getScheduler().getCurrentlyExecutingJobs()) {\n+                        Long key = getKeyFromJobName(jec.getJobDetail().getKey());\n+                        if (key != null) {\n+                            E jobExecTO = reference.newInstance();\n+                            setTaskOrReportKey(jobExecTO, key);\n+                            jobExecTO.setStatus(\n+                                    scheduler.getScheduler().getTriggerState(jec.getTrigger().getKey()).name());\n+                            jobExecTO.setStartDate(jec.getFireTime());\n+\n+                            jobExecTOs.add(jobExecTO);\n+                        }\n+                    }\n+                } catch (SchedulerException e) {\n+                    LOG.debug(\"Problems while retrieving all currently executing jobs\", e);\n+                } catch (InstantiationException e) {\n+                    LOG.debug(\"Problems while instantiating {}\", reference, e);\n+                } catch (IllegalAccessException e) {\n+                    LOG.debug(\"Problems while accessing {}\", reference, e);\n+                }\n+                break;\n+\n+            case SCHEDULED:\n+                try {\n+                    for (String groupName : scheduler.getScheduler().getJobGroupNames()) {\n+                        for (JobKey jobKey\n+                                : scheduler.getScheduler().getJobKeys(GroupMatcher.jobGroupEquals(groupName))) {\n+\n+                            Long key = getKeyFromJobName(jobKey);\n+                            if (key != null) {\n+                                List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n+                                for (Trigger t : jobTriggers) {\n+                                    E jobExecTO = reference.newInstance();\n+                                    setTaskOrReportKey(jobExecTO, key);\n+                                    jobExecTO.setStatus(scheduler.getScheduler().getTriggerState(t.getKey()).name());\n+                                    jobExecTO.setStartDate(t.getStartTime());\n+\n+                                    jobExecTOs.add(jobExecTO);\n+                                }\n+                            }\n+                        }\n+                    }\n+                } catch (SchedulerException e) {\n+                    LOG.debug(\"Problems while retrieving all scheduled jobs\", e);\n+                } catch (InstantiationException e) {\n+                    LOG.debug(\"Problems while instantiating {}\", reference, e);\n+                } catch (IllegalAccessException e) {\n+                    LOG.debug(\"Problems while accessing {}\", reference, e);\n+                }\n+                break;\n+\n+            default:\n+        }\n+        return jobExecTOs;\n+    }\n+\n+    protected void actionJob(final String jobName, final JobAction action) {\n+        if (jobName != null) {\n+            JobKey jobKey = new JobKey(jobName, Scheduler.DEFAULT_GROUP);\n+            try {\n+                if (scheduler.getScheduler().checkExists(jobKey)) {\n+                    switch (action) {\n+                        case START:\n+                            scheduler.getScheduler().triggerJob(jobKey);\n+                            break;\n+\n+                        case STOP:\n+                            scheduler.getScheduler().interrupt(jobKey);\n+                            break;\n+\n+                        default:\n+                    }\n+                }\n+            } catch (SchedulerException e) {\n+                LOG.debug(\"Problems during {} operation on job {}\", action.toString(), jobName, e);\n+            }\n+        }\n+    }\n+}"},{"sha":"4c3230c4e3f3e8a18129e0a6bb6ce37719dc693a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":25,"deletions":5,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -63,19 +63,21 @@\n import org.apache.syncope.core.logic.report.ReportletConfClass;\n import org.apache.syncope.core.logic.report.TextSerializer;\n import org.apache.syncope.common.lib.CollectionUtils2;\n+import org.apache.syncope.common.lib.to.AbstractExecTO;\n import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.xmlgraphics.util.MimeConstants;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ClassUtils;\n \n @Component\n-public class ReportLogic extends AbstractTransactionalLogic<ReportTO> {\n+public class ReportLogic extends AbstractJobLogic<ReportTO> {\n \n     @Autowired\n     private ReportDAO reportDAO;\n@@ -86,9 +88,6 @@ public class ReportLogic extends AbstractTransactionalLogic<ReportTO> {\n     @Autowired\n     private JobInstanceLoader jobInstanceLoader;\n \n-    @Autowired\n-    private SchedulerFactoryBean scheduler;\n-\n     @Autowired\n     private ReportDataBinder binder;\n \n@@ -401,4 +400,25 @@ protected ReportTO resolveReference(final Method method, final Object... args)\n \n         throw new UnresolvedReferenceException();\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_LIST + \"')\")\n+    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n+        return super.listJobs(type, reference);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_EXECUTE + \"')\")\n+    public void actionJob(final Long reportKey, final JobAction action) {\n+        Report report = reportDAO.find(reportKey);\n+        if (report == null) {\n+            throw new NotFoundException(\"Report \" + reportKey);\n+        }\n+        String jobName = JobNamer.getJobName(report);\n+        actionJob(jobName, action);\n+    }\n+\n+    @Override\n+    protected Long getKeyFromJobName(final JobKey jobKey) {\n+        return JobNamer.getReportKeyFromJobName(jobKey.getName());\n+    }\n }"},{"sha":"82dc8d1242b0a2d36a80bb78f7120bf413befc7c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -26,12 +26,15 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractExecTO;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.PropagationMode;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -61,7 +64,7 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class TaskLogic extends AbstractTransactionalLogic<AbstractTaskTO> {\n+public class TaskLogic extends AbstractJobLogic<AbstractTaskTO> {\n \n     @Autowired\n     private TaskDAO taskDAO;\n@@ -336,4 +339,25 @@ protected AbstractTaskTO resolveReference(final Method method, final Object... a\n \n         throw new UnresolvedReferenceException();\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_LIST + \"')\")\n+    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n+        return super.listJobs(type, reference);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_EXECUTE + \"')\")\n+    public void actionJob(final Long taskKey, final JobAction action) {\n+        Task task = taskDAO.find(taskKey);\n+        if (task == null) {\n+            throw new NotFoundException(\"Task \" + taskKey);\n+        }\n+        String jobName = JobNamer.getJobName(task);\n+        actionJob(jobName, action);\n+    }\n+\n+    @Override\n+    protected Long getKeyFromJobName(final JobKey jobKey) {\n+        return JobNamer.getTaskKeyFromJobName(jobKey.getName());\n+    }\n }"},{"sha":"53d974e3cdd5c7c5662a2c4a727dccb05078ca6e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -246,7 +246,7 @@ public UserTO update(final UserMod userMod) {\n \n         Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(actual, removeMemberships);\n \n-        final UserTO updatedTO = binder.getUserTO(updated.getKey());\n+        UserTO updatedTO = binder.getUserTO(updated.getKey());\n         updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n         return updatedTO;\n     }"},{"sha":"9ddf5630d57f59aedd1434711b297720d3dc3a57","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobNamer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamer.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -44,11 +44,11 @@ private static Long getIdFromJobName(final String name, final String pattern, fi\n         return result;\n     }\n \n-    public static Long getTaskIdFromJobName(final String name) {\n+    public static Long getTaskKeyFromJobName(final String name) {\n         return getIdFromJobName(name, \"taskJob[0-9]+\", 7);\n     }\n \n-    public static Long getReportIdFromJobName(final String name) {\n+    public static Long getReportKeyFromJobName(final String name) {\n         return getIdFromJobName(name, \"reportJob[0-9]+\", 9);\n     }\n "},{"sha":"3df89bcf18504a64308ae4a62e07151e5aea4ab5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/TaskJob.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FTaskJob.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -19,13 +19,13 @@\n package org.apache.syncope.core.provisioning.api.job;\n \n import org.quartz.DisallowConcurrentExecution;\n-import org.quartz.Job;\n+import org.quartz.InterruptableJob;\n \n /**\n  * Interface for Quartz jobs bound to a given Task.\n  */\n @DisallowConcurrentExecution\n-public interface TaskJob extends Job {\n+public interface TaskJob extends InterruptableJob {\n \n     String DRY_RUN_JOBDETAIL_KEY = \"dryRun\";\n "},{"sha":"2f959b5e3e5f9fbf4934f945a22647903a04504d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -349,7 +349,14 @@ public void requestPasswordReset(final Long id) {\n     public void confirmPasswordReset(final User user, final String token, final String password) {\n         uwfAdapter.confirmPasswordReset(user.getKey(), token, password);\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(user, null, null);\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(user.getKey());\n+        userMod.setPassword(password);\n+\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n+                new WorkflowResult<Pair<UserMod, Boolean>>(\n+                        new ImmutablePair<UserMod, Boolean>(userMod, null), null, \"confirmPasswordReset\"),\n+                true, null);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {"},{"sha":"58202b7ef167ef919e0dbca034f0cdba6406faf0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -292,7 +292,7 @@ public PropagationByResource fillMembershipVirtual(\n             final Long key, final Long groupKey, final Long membershipKey, final Set<String> vAttrsToBeRemoved,\n             final Set<AttrMod> vAttrsToBeUpdated, final boolean isRemoval) {\n \n-        final Membership membership = membershipKey == null\n+        Membership membership = membershipKey == null\n                 ? userDAO.authFetch(key).getMembership(groupKey)\n                 : membershipDAO.authFetch(membershipKey);\n "},{"sha":"688ca99c86d9b5195eba3ef5cf5b1e31fb674908","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractTaskJob.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -18,7 +18,11 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n+import java.text.SimpleDateFormat;\n import java.util.Date;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n@@ -33,6 +37,7 @@\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n+import org.quartz.UnableToInterruptJobException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -100,6 +105,11 @@ public enum Status {\n      */\n     protected Task task;\n \n+    /**\n+     * The current running thread containing the task to be executed.\n+     */\n+    protected AtomicReference<Thread> runningThread = new AtomicReference<Thread>();\n+\n     /**\n      * Task id setter.\n      *\n@@ -112,6 +122,7 @@ public void setTaskId(final Long taskId) {\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n+        this.runningThread.set(Thread.currentThread());\n         task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new JobExecutionException(\"Task \" + taskId + \" not found\");\n@@ -178,4 +189,16 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n     protected boolean hasToBeRegistered(final TaskExec execution) {\n         return false;\n     }\n+\n+    @Override\n+    public void interrupt() throws UnableToInterruptJobException {\n+        Thread thread = this.runningThread.getAndSet(null);\n+        if (thread != null) {\n+            LOG.info(\"Interrupting job time {} \", (new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN, Locale.\n+                    getDefault())).format(new Date()));\n+            thread.interrupt();\n+        } else {\n+            LOG.warn(\"Unable to retrieve the right thread related to the current job execution\");\n+        }\n+    }\n }"},{"sha":"71535296e4e2d1569252b864870b705e0cee9692","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -294,11 +294,12 @@ public void createTasks(\n                 if (!notification.getEvents().contains(currentEvent)) {\n                     LOG.debug(\"No events found about {}\", subject);\n                 } else if (subjectType == null || subject == null\n-                        || notification.getUserAbout() == null || notification.getGroupAbout() == null\n+                        || (subjectType == SubjectType.USER && (notification.getUserAbout() == null\n                         || searchDAO.matches(subject,\n-                                SearchCondConverter.convert(notification.getUserAbout()), subjectType)\n+                                SearchCondConverter.convert(notification.getUserAbout()), subjectType)))\n+                        || subjectType == SubjectType.GROUP && (notification.getGroupAbout() == null\n                         || searchDAO.matches(subject,\n-                                SearchCondConverter.convert(notification.getGroupAbout()), subjectType)) {\n+                                SearchCondConverter.convert(notification.getGroupAbout()), subjectType))) {\n \n                     LOG.debug(\"Creating notification task for event {} about {}\", currentEvent, subject);\n "},{"sha":"d21afc5ac45b2aff36b5dd61827aab59ac889429","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":15,"deletions":16,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -275,7 +275,7 @@ public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserMo\n                 tasks.addAll(getUserUpdateTasks(wfResult, true, toBeExcluded));\n             }\n \n-            final PropagationByResource nonPwdPropByRes = new PropagationByResource();\n+            PropagationByResource nonPwdPropByRes = new PropagationByResource();\n             nonPwdPropByRes.merge(origPropByRes);\n             nonPwdPropByRes.removeAll(pwdResourceNames);\n             nonPwdPropByRes.purge();\n@@ -318,20 +318,19 @@ public List<PropagationTask> getUpdateTasks(final Subject<?, ?, ?> subject,\n             resourceNames = userDAO.findAllResourceNames(user);\n             for (final Membership membership : user.getMemberships()) {\n                 if (membership.getVirAttrs() != null && !membership.getVirAttrs().isEmpty()) {\n-                    final MembershipMod membershipMod = CollectionUtils.find(membershipsToAdd,\n-                            new Predicate<MembershipMod>() {\n-\n-                                @Override\n-                                public boolean evaluate(final MembershipMod membershipMod) {\n-                                    return membershipMod.getGroup() == membership.getGroup().getKey();\n-                                }\n-                            });\n-                    if (membershipMod != null) {\n-                        virAttrHandler.fillVirtual(membership, membershipMod.getVirAttrsToRemove() == null\n+                    MembershipMod membMod = CollectionUtils.find(membershipsToAdd, new Predicate<MembershipMod>() {\n+\n+                        @Override\n+                        public boolean evaluate(final MembershipMod membershipMod) {\n+                            return membershipMod.getGroup() == membership.getGroup().getKey();\n+                        }\n+                    });\n+                    if (membMod != null) {\n+                        virAttrHandler.fillVirtual(membership, membMod.getVirAttrsToRemove() == null\n                                 ? Collections.<String>emptySet()\n-                                : membershipMod.getVirAttrsToRemove(),\n-                                membershipMod.getVirAttrsToUpdate() == null ? Collections.<AttrMod>emptySet()\n-                                        : membershipMod.getVirAttrsToUpdate(), attrUtilsFactory.getInstance(\n+                                : membMod.getVirAttrsToRemove(),\n+                                membMod.getVirAttrsToUpdate() == null ? Collections.<AttrMod>emptySet()\n+                                        : membMod.getVirAttrsToUpdate(), attrUtilsFactory.getInstance(\n                                         AttributableType.MEMBERSHIP));\n                     }\n                 }\n@@ -431,7 +430,7 @@ protected List<PropagationTask> getDeleteTaskIds(\n             final Collection<String> resourceNames,\n             final Collection<String> noPropResourceNames) {\n \n-        final PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(ResourceOperation.DELETE, resourceNames);\n         if (noPropResourceNames != null && !noPropResourceNames.isEmpty()) {\n             propByRes.get(ResourceOperation.DELETE).removeAll(noPropResourceNames);\n@@ -485,7 +484,7 @@ protected List<PropagationTask> createTasks(final Subject<?, ?, ?> subject,\n         propByRes.purge();\n         LOG.debug(\"After purge: {}\", propByRes);\n \n-        final List<PropagationTask> tasks = new ArrayList<>();\n+        List<PropagationTask> tasks = new ArrayList<>();\n \n         for (ResourceOperation operation : ResourceOperation.values()) {\n             for (String resourceName : propByRes.get(operation)) {"},{"sha":"3c910fae0e5361cf752aeab5b7add96a2e887c81","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -28,6 +28,8 @@\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n import org.apache.syncope.common.rest.api.CollectionWrapper;\n@@ -119,4 +121,14 @@ public void delete(final Long reportKey) {\n     public void deleteExecution(final Long executionKey) {\n         logic.deleteExecution(executionKey);\n     }\n+\n+    @Override\n+    public List<ReportExecTO> listJobs(final JobStatusType type) {\n+        return logic.listJobs(type, ReportExecTO.class);\n+    }\n+\n+    @Override\n+    public void actionJob(final Long reportKey, final JobAction action) {\n+        logic.actionJob(reportKey, action);\n+    }\n }"},{"sha":"9da72aab9e3840bc27f2937319d15b625d965064","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.net.URI;\n+import java.util.List;\n import javax.ws.rs.BadRequestException;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n@@ -30,6 +31,8 @@\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -163,4 +166,14 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n \n         return result;\n     }\n+\n+    @Override\n+    public List<TaskExecTO> listJobs(final JobStatusType type) {\n+        return logic.listJobs(type, TaskExecTO.class);\n+    }\n+\n+    @Override\n+    public void actionJob(final Long taskKey, final JobAction action) {\n+        logic.actionJob(taskKey, action);\n+    }\n }"},{"sha":"4c89caf972f04dd2ec9c79673218b96423257628","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -359,13 +359,15 @@ protected WorkflowResult<Pair<UserMod, Boolean>> doUpdate(final User user, final\n \n         PropagationByResource propByRes =\n                 runtimeService.getVariable(user.getWorkflowId(), PROP_BY_RESOURCE, PropagationByResource.class);\n+        UserMod updatedMod =\n+                runtimeService.getVariable(user.getWorkflowId(), USER_MOD, UserMod.class);\n \n-        saveForFormSubmit(updated, userMod.getPassword(), propByRes);\n+        saveForFormSubmit(updated, updatedMod.getPassword(), propByRes);\n \n         Boolean propagateEnable = runtimeService.getVariable(user.getWorkflowId(), PROPAGATE_ENABLE, Boolean.class);\n \n         return new WorkflowResult<Pair<UserMod, Boolean>>(\n-                new ImmutablePair<>(userMod, propagateEnable), propByRes, tasks);\n+                new ImmutablePair<>(updatedMod, propagateEnable), propByRes, tasks);\n     }\n \n     @Override"},{"sha":"4da56c6357a8eb6076aa76d75ae479122670b371","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/task/Update.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -40,15 +40,18 @@ protected void doExecute(final String executionId) {\n                 runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, UserMod.class);\n \n         // update password internally only if required\n-        UserMod actualMod = SerializationUtils.clone(userMod);\n-        if (actualMod.getPwdPropRequest() != null && !actualMod.getPwdPropRequest().isOnSyncope()) {\n-            actualMod.setPassword(null);\n+        UserMod updatedMod = SerializationUtils.clone(userMod);\n+        String updatedPwd = updatedMod.getPassword();\n+        if (updatedMod.getPwdPropRequest() != null && !updatedMod.getPwdPropRequest().isOnSyncope()) {\n+            updatedMod.setPassword(null);\n         }\n         // update user\n-        PropagationByResource propByRes = dataBinder.update(user, actualMod);\n+        PropagationByResource propByRes = dataBinder.update(user, updatedMod);\n+        updatedMod.setPassword(updatedPwd);\n \n         // report updated user and propagation by resource as result\n         runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.USER, user);\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, updatedMod);\n         runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.PROP_BY_RESOURCE, propByRes);\n     }\n }"},{"sha":"f0c6851a38abbd54a6dd6ab2be2f4ea7a258cd85","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserConfirmPwdResetProcessor.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -21,9 +21,13 @@\n import java.util.List;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -48,7 +52,14 @@ public class UserConfirmPwdResetProcessor implements Processor {\n     public void process(final Exchange exchange) {\n         User user = exchange.getProperty(\"user\", User.class);\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(user, null, null);\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(user.getKey());\n+        userMod.setPassword(exchange.getProperty(\"password\", String.class));\n+\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n+                new WorkflowResult<Pair<UserMod, Boolean>>(\n+                        new ImmutablePair<UserMod, Boolean>(userMod, null), null, \"confirmPasswordReset\"),\n+                true, null);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {"},{"sha":"a8f71844376d7454396de2b86001e1efc58925b0","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestSampleJob.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJob.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import java.util.Date;\n+import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.provisioning.java.job.AbstractTaskJob;\n+import org.quartz.JobExecutionException;\n+\n+/**\n+ * Sample implementation for execution a scheduled task.\n+ *\n+ * @see SchedTask\n+ */\n+public class TestSampleJob extends AbstractTaskJob {\n+\n+    @Override\n+    protected String doExecute(final boolean dryRun) throws JobExecutionException {\n+        if (!(task instanceof SchedTask)) {\n+            throw new JobExecutionException(\"Task \" + taskId + \" isn't a SchedTask\");\n+        }\n+\n+        for (int i = 0; i < 10; i++) {\n+            LOG.debug(\"TestSampleJob#doExecute round {} time {}\", i, new Date().toString());\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException ex) {\n+                throw new JobExecutionException(\"Job interrupted\");\n+            }\n+        }\n+\n+        final SchedTask schedTask = (SchedTask) this.task;\n+\n+        LOG.info(\"TestSampleJob {}running [SchedTask {}]\", (dryRun\n+                ? \"dry \"\n+                : \"\"), schedTask.getKey());\n+\n+        return (dryRun\n+                ? \"DRY \"\n+                : \"\") + \"RUNNING\";\n+    }\n+\n+    @Override\n+    protected boolean hasToBeRegistered(final TaskExec execution) {\n+        return true;\n+    }\n+}"},{"sha":"e31190f83f53cc62841f79862809b2a033672f32","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SchedTaskITCase.java","status":"modified","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -22,6 +22,7 @@\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.util.List;\n@@ -32,6 +33,9 @@\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n+import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.provisioning.api.job.SyncJob;\n@@ -104,4 +108,60 @@ public void issueSYNCOPE144() {\n         assertEquals(\"issueSYNCOPE144_2\", actual.getName());\n         assertEquals(\"issueSYNCOPE144 Description_2\", actual.getDescription());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE660() {\n+        List<TaskExecTO> list = taskService.listJobs(JobStatusType.ALL);\n+        int old_size = list.size();\n+\n+        SchedTaskTO task = new SchedTaskTO();\n+        task.setName(\"issueSYNCOPE660\");\n+        task.setDescription(\"issueSYNCOPE660 Description\");\n+        task.setJobClassName(TestSampleJob.class.getName());\n+\n+        Response response = taskService.create(task);\n+        task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n+\n+        list = taskService.listJobs(JobStatusType.ALL);\n+        assertEquals(old_size + 1, list.size());\n+\n+        taskService.actionJob(task.getKey(), JobAction.START);\n+\n+        int i = 0, maxit = 50;\n+\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+                // ignore\n+            }\n+\n+            list = taskService.listJobs(JobStatusType.RUNNING);\n+\n+            assertNotNull(list);\n+            i++;\n+        } while (list.size() < 1 && i < maxit);\n+\n+        assertEquals(1, list.size());\n+        assertEquals(task.getKey(), list.get(0).getTask());\n+\n+        taskService.actionJob(task.getKey(), JobAction.STOP);\n+\n+        i = 0;\n+\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+                // ignore\n+            }\n+\n+            list = taskService.listJobs(JobStatusType.RUNNING);\n+\n+            assertNotNull(list);\n+            i++;\n+        } while (list.size() >= 1 && i < maxit);\n+\n+        assertTrue(list.isEmpty());\n+    }\n }"},{"sha":"14e2f9f87da513de7a565472edec6d9f7996c052","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserSelfITCase.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84c2d7bc836c0f3419ce204169e9dfc98ca8407f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java?ref=84c2d7bc836c0f3419ce204169e9dfc98ca8407f","patch":"@@ -20,6 +20,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n@@ -54,6 +55,7 @@\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n+import org.springframework.jdbc.core.JdbcTemplate;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class UserSelfITCase extends AbstractITCase {\n@@ -264,8 +266,15 @@ public void passwordReset() {\n         UserTO user = UserITCase.getUniqueSampleTO(\"pwdReset@syncope.apache.org\");\n         user.setSecurityQuestion(1L);\n         user.setSecurityAnswer(\"Rossi\");\n+        user.getResources().add(RESOURCE_NAME_TESTDB);\n         createUser(user);\n \n+        // verify propagation (including password) on external db\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        String pwdOnResource = jdbcTemplate.queryForObject(\"SELECT password FROM test WHERE id=?\", String.class,\n+                user.getUsername());\n+        assertTrue(StringUtils.isNotBlank(pwdOnResource));\n+\n         // 2. verify that new user is able to authenticate\n         SyncopeClient authClient = clientFactory.create(user.getUsername(), \"password123\");\n         UserTO read = authClient.self().getValue();\n@@ -300,6 +309,12 @@ public void passwordReset() {\n         read = authClient.self().getValue();\n         assertNotNull(read);\n         assertNull(read.getToken());\n+\n+        // 7. verify that password was changed on external resource\n+        String newPwdOnResource = jdbcTemplate.queryForObject(\"SELECT password FROM test WHERE id=?\", String.class,\n+                user.getUsername());\n+        assertTrue(StringUtils.isNotBlank(newPwdOnResource));\n+        assertNotEquals(pwdOnResource, newPwdOnResource);\n     }\n \n     @Test"}]}