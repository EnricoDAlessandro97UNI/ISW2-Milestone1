{"sha":"b16742e203531b63fc92b968671ec72456aa19b6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmIxNjc0MmUyMDM1MzFiNjNmYzkyYjk2ODY3MWVjNzI0NTZhYTE5YjY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-21T15:31:30Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-21T15:31:30Z"},"message":"Fixes issue 190\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247161 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7cb53fd52cb1d9fa5e42686ab8a85ac6b42d2a25","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7cb53fd52cb1d9fa5e42686ab8a85ac6b42d2a25"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b16742e203531b63fc92b968671ec72456aa19b6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b16742e203531b63fc92b968671ec72456aa19b6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b16742e203531b63fc92b968671ec72456aa19b6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b16742e203531b63fc92b968671ec72456aa19b6/comments","author":null,"committer":null,"parents":[{"sha":"5cf8c913fc9b607f4e7ce72ed4be2140534270bb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5cf8c913fc9b607f4e7ce72ed4be2140534270bb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5cf8c913fc9b607f4e7ce72ed4be2140534270bb"}],"stats":{"total":173,"additions":162,"deletions":11},"files":[{"sha":"1d5d091fb06212807426050058da62565194efa3","filename":"client/src/main/java/org/syncope/client/to/ConnInstanceTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b16742e203531b63fc92b968671ec72456aa19b6/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b16742e203531b63fc92b968671ec72456aa19b6/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnInstanceTO.java?ref=b16742e203531b63fc92b968671ec72456aa19b6","patch":"@@ -134,4 +134,14 @@ public String getDisplayName() {\n     public void setDisplayName(String displayName) {\n         this.displayName = displayName;\n     }\n+\n+    public boolean isPropertyPresent(final String propName) {\n+\n+        for (ConnConfProperty props : this.getConfiguration()) {\n+            if (propName.equals(props.getSchema().getName())) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n }"},{"sha":"7d6c8e5a3e62540ea3a558b809a114ae6192cbf0","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b16742e203531b63fc92b968671ec72456aa19b6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b16742e203531b63fc92b968671ec72456aa19b6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=b16742e203531b63fc92b968671ec72456aa19b6","patch":"@@ -160,7 +160,8 @@ public void delete(@PathVariable(\"connectorId\") Long connectorId)\n     @PreAuthorize(\"hasRole('CONNECTOR_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public List<ConnInstanceTO> list() {\n+    public List<ConnInstanceTO> list()\n+            throws NotFoundException {\n         List<ConnInstance> connInstances = connInstanceDAO.findAll();\n \n         List<ConnInstanceTO> connInstanceTOs =\n@@ -273,8 +274,8 @@ public List<ConnBundleTO> getBundles()\n                 connectorBundleTO.setConnectorName(key.getConnectorName());\n                 connectorBundleTO.setVersion(key.getBundleVersion());\n \n-                properties = bundle.createDefaultAPIConfiguration().\n-                        getConfigurationProperties();\n+                properties =\n+                        connBundleManager.getConfigurationProperties(bundle);\n \n                 ConnConfPropSchema connConfPropSchema;\n                 ConfigurationProperty configurationProperty;"},{"sha":"b13055bcc24ce7f74109094946b6bcb78c92ac70","filename":"core/src/main/java/org/syncope/core/rest/data/ConnInstanceDataBinder.java","status":"modified","additions":51,"deletions":1,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b16742e203531b63fc92b968671ec72456aa19b6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b16742e203531b63fc92b968671ec72456aa19b6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java?ref=b16742e203531b63fc92b968671ec72456aa19b6","patch":"@@ -14,6 +14,11 @@\n  */\n package org.syncope.core.rest.data;\n \n+import javassist.NotFoundException;\n+import org.identityconnectors.framework.api.ConfigurationProperties;\n+import org.identityconnectors.framework.api.ConfigurationProperty;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n@@ -23,17 +28,29 @@\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.dao.ConnInstanceDAO;\n+import org.syncope.core.util.ConnBundleManager;\n+import org.syncope.types.ConnConfPropSchema;\n+import org.syncope.types.ConnConfProperty;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n public class ConnInstanceDataBinder {\n \n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            ConnInstanceDataBinder.class);\n+\n     private static final String[] ignoreProperties = {\n         \"id\", \"resources\", \"syncToken\"};\n \n     @Autowired\n     private ConnInstanceDAO connectorInstanceDAO;\n \n+    @Autowired\n+    private ConnBundleManager connBundleManager;\n+\n     public ConnInstance getConnInstance(\n             final ConnInstanceTO connectorInstanceTO)\n             throws SyncopeClientCompositeErrorException {\n@@ -148,16 +165,49 @@ public ConnInstance updateConnInstance(\n         return connInstance;\n     }\n \n-    public ConnInstanceTO getConnInstanceTO(ConnInstance connInstance) {\n+    public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance)\n+            throws NotFoundException {\n         ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n         connInstanceTO.setId(connInstance.getId());\n \n+        // retrieve the ConfigurationProperties.\n+        ConfigurationProperties properties =\n+                connBundleManager.getConfigurationProperties(\n+                connInstance.getBundleName(),\n+                connInstance.getVersion(),\n+                connInstance.getConnectorName());\n+\n         BeanUtils.copyProperties(\n                 connInstance, connInstanceTO, ignoreProperties);\n \n         connInstanceTO.setSyncToken(\n                 connInstance.getSerializedSyncToken());\n \n+        ConnConfPropSchema connConfPropSchema;\n+        ConfigurationProperty configurationProperty;\n+\n+        for (String propName : properties.getPropertyNames()) {\n+\n+            if (!connInstanceTO.isPropertyPresent(propName)) {\n+\n+                connConfPropSchema = new ConnConfPropSchema();\n+                configurationProperty = properties.getProperty(propName);\n+                connConfPropSchema.setName(\n+                        configurationProperty.getName());\n+                connConfPropSchema.setDisplayName(\n+                        configurationProperty.getDisplayName(propName));\n+                connConfPropSchema.setHelpMessage(\n+                        configurationProperty.getHelpMessage(propName));\n+                connConfPropSchema.setRequired(\n+                        configurationProperty.isRequired());\n+                connConfPropSchema.setType(\n+                        configurationProperty.getType().getName());\n+\n+                ConnConfProperty property = new ConnConfProperty();\n+                property.setSchema(connConfPropSchema);\n+                connInstanceTO.addConfiguration(property);\n+            }\n+        }\n         return connInstanceTO;\n     }\n }"},{"sha":"da0ef621886730d7ca9349c9a7786b6c43bdd3a6","filename":"core/src/main/java/org/syncope/core/util/ConnBundleManager.java","status":"modified","additions":80,"deletions":6,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b16742e203531b63fc92b968671ec72456aa19b6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnBundleManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b16742e203531b63fc92b968671ec72456aa19b6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnBundleManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnBundleManager.java?ref=b16742e203531b63fc92b968671ec72456aa19b6","patch":"@@ -22,8 +22,12 @@\n import javassist.NotFoundException;\n \n import org.identityconnectors.common.IOUtil;\n+import org.identityconnectors.framework.api.APIConfiguration;\n+import org.identityconnectors.framework.api.ConfigurationProperties;\n+import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorInfoManager;\n import org.identityconnectors.framework.api.ConnectorInfoManagerFactory;\n+import org.identityconnectors.framework.api.ConnectorKey;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -36,25 +40,26 @@\n public class ConnBundleManager {\n \n     private static final Logger LOG = LoggerFactory.getLogger(\n-                    ConnBundleManager.class);\n+            ConnBundleManager.class);\n+\n     @Autowired\n     private ConfDAO confDAO;\n \n     public ConnectorInfoManager getConnectorManager()\n             throws NotFoundException, MissingConfKeyException {\n-    \n+\n         // 1. Bundles directory\n         SyncopeConf connectorBundleDir =\n                 confDAO.find(\"connid.bundles.directory\");\n-    \n+\n         // 2. Find bundles inside that directory\n         File bundleDirectory = new File(connectorBundleDir.getValue());\n         String[] bundleFiles = bundleDirectory.list();\n         if (bundleFiles == null) {\n             throw new NotFoundException(\"Bundles from dir \"\n                     + connectorBundleDir.getValue());\n         }\n-    \n+\n         List<URL> bundleFileURLs = new ArrayList<URL>();\n         for (String file : bundleFiles) {\n             try {\n@@ -72,16 +77,85 @@ public ConnectorInfoManager getConnectorManager()\n                     + connectorBundleDir.getValue());\n         }\n         LOG.debug(\"Bundle file URLs: {}\", bundleFileURLs);\n-    \n+\n         // 3. Get connector info manager\n         ConnectorInfoManager manager =\n                 ConnectorInfoManagerFactory.getInstance().getLocalManager(\n                 bundleFileURLs.toArray(new URL[0]));\n         if (manager == null) {\n             throw new NotFoundException(\"Connector Info Manager\");\n         }\n-    \n+\n         return manager;\n     }\n \n+    public ConfigurationProperties getConfigurationProperties(\n+            final String bundleName,\n+            final String version,\n+            final String connectorName)\n+            throws NotFoundException {\n+\n+        //Create key for search all properties\n+        final ConnectorKey key =\n+                new ConnectorKey(bundleName, version, connectorName);\n+\n+        if (key == null) {\n+            throw new NotFoundException(\"Connector Key\");\n+        }\n+\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"\\nBundle name: \" + key.getBundleName()\n+                    + \"\\nBundle version: \" + key.getBundleVersion()\n+                    + \"\\nBundle class: \" + key.getConnectorName());\n+        }\n+\n+        //get the specified connector.\n+        ConnectorInfo info;\n+        try {\n+            info = getConnectorManager().findConnectorInfo(key);\n+            if (info == null) {\n+                throw new NotFoundException(\"Connector Info for key \" + key);\n+            }\n+        } catch (MissingConfKeyException e) {\n+            throw new NotFoundException(\"Connector Info for key \" + key, e);\n+        }\n+\n+        return getConfigurationProperties(info);\n+    }\n+\n+    public ConfigurationProperties getConfigurationProperties(\n+            final ConnectorInfo info)\n+            throws NotFoundException {\n+\n+        if (info == null) {\n+            throw new NotFoundException(\"Invalid connector info \" + info);\n+        }\n+\n+        // create default configuration\n+        APIConfiguration apiConfig = info.createDefaultAPIConfiguration();\n+\n+        if (apiConfig == null) {\n+            throw new NotFoundException(\"Default API configuration\");\n+        }\n+\n+        // retrieve the ConfigurationProperties.\n+        ConfigurationProperties properties =\n+                apiConfig.getConfigurationProperties();\n+\n+        if (properties == null) {\n+            throw new NotFoundException(\"Configuration properties\");\n+        }\n+\n+        // Print out what the properties are (not necessary)\n+        if (LOG.isDebugEnabled()) {\n+            for (String propName : properties.getPropertyNames()) {\n+                LOG.debug(\"\\nProperty Name: \"\n+                        + properties.getProperty(propName).getName()\n+                        + \"\\nProperty Type: \"\n+                        + properties.getProperty(propName).getType());\n+            }\n+        }\n+\n+        return properties;\n+    }\n }"},{"sha":"a78373c1179f04eb2742643d81562dd7280c8ea9","filename":"core/src/test/java/org/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b16742e203531b63fc92b968671ec72456aa19b6/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b16742e203531b63fc92b968671ec72456aa19b6/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=b16742e203531b63fc92b968671ec72456aa19b6","patch":"@@ -81,7 +81,7 @@ public void create() {\n         connectorTO.setVersion(connidSoapVersion);\n \n         // set connector name\n-        connectorTO.setConnectorName(WebServiceConnector.class.getSimpleName());\n+        connectorTO.setConnectorName(WebServiceConnector.class.getName());\n \n         // set bundle name\n         connectorTO.setBundleName(\"org.connid.bundles.soap\");\n@@ -334,4 +334,20 @@ public void getConnectorConfiguration() {\n         assertNotNull(props);\n         assertFalse(props.isEmpty());\n     }\n+\n+    @Test\n+    public void checkHiddenProperty() {\n+        ConnInstanceTO connInstanceTO = restTemplate.getForObject(\n+                BASE_URL + \"connector/read/{connectorId}.json\",\n+                ConnInstanceTO.class, \"100\");\n+\n+        boolean check = false;\n+\n+        for (ConnConfProperty prop : connInstanceTO.getConfiguration()) {\n+            if (\"receiveTimeout\".equals(prop.getSchema().getName())) {\n+                check = true;\n+            }\n+        }\n+        assertTrue(check);\n+    }\n }"}]}