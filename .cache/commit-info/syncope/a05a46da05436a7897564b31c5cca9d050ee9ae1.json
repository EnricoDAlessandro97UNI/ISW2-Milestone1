{"sha":"a05a46da05436a7897564b31c5cca9d050ee9ae1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmEwNWE0NmRhMDU0MzZhNzg5NzU2NGIzMWM1Y2NhOWQwNTBlZTlhZTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-06-30T13:27:30Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-06-30T13:27:30Z"},"message":"[SYNCOPE-519] implementation provided\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1606725 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f95994f4c0b5614b4dd5acc6eaeb48c2584d8e4a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f95994f4c0b5614b4dd5acc6eaeb48c2584d8e4a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a05a46da05436a7897564b31c5cca9d050ee9ae1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a05a46da05436a7897564b31c5cca9d050ee9ae1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a05a46da05436a7897564b31c5cca9d050ee9ae1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a05a46da05436a7897564b31c5cca9d050ee9ae1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"98324791e89259caa407d74c8e9e2ac447ea38bb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/98324791e89259caa407d74c8e9e2ac447ea38bb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/98324791e89259caa407d74c8e9e2ac447ea38bb"}],"stats":{"total":318,"additions":168,"deletions":150},"files":[{"sha":"5921df63cd8352df2de2b3bfe01b689b1a48994c","filename":"common/src/main/java/org/apache/syncope/common/types/ConnConfPropSchema.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a05a46da05436a7897564b31c5cca9d050ee9ae1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a05a46da05436a7897564b31c5cca9d050ee9ae1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java?ref=a05a46da05436a7897564b31c5cca9d050ee9ae1","patch":"@@ -43,6 +43,8 @@ public class ConnConfPropSchema extends AbstractBaseBean implements Comparable<C\n \r\n     private boolean confidential;\r\n \r\n+    private Object defaultValue;\r\n+\r\n     public String getName() {\r\n         return name;\r\n     }\r\n@@ -99,6 +101,14 @@ public void setConfidential(final boolean confidential) {\n         this.confidential = confidential;\r\n     }\r\n \r\n+    public Object getDefaultValue() {\r\n+        return defaultValue;\r\n+    }\r\n+\r\n+    public void setDefaultValue(final Object defaultValue) {\r\n+        this.defaultValue = defaultValue;\r\n+    }\r\n+\r\n     @Override\r\n     public int compareTo(final ConnConfPropSchema connConfPropSchema) {\r\n         if (this.getOrder() > connConfPropSchema.getOrder()) {\r"},{"sha":"d0ffec1c9247c0e882efe41047591bd8fdda9bec","filename":"common/src/main/java/org/apache/syncope/common/types/ConnConfProperty.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a05a46da05436a7897564b31c5cca9d050ee9ae1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a05a46da05436a7897564b31c5cca9d050ee9ae1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java?ref=a05a46da05436a7897564b31c5cca9d050ee9ae1","patch":"@@ -36,7 +36,7 @@ public class ConnConfProperty extends AbstractBaseBean implements Comparable<Con\n \r\n     private ConnConfPropSchema schema;\r\n \r\n-    private List<?> values = new ArrayList<Object>();\r\n+    private List<Object> values = new ArrayList<Object>();\r\n \r\n     private boolean overridable;\r\n \r\n@@ -50,11 +50,11 @@ public void setSchema(final ConnConfPropSchema schema) {\n \r\n     @XmlElementWrapper(name = \"values\")\r\n     @XmlElement(name = \"value\")\r\n-    public List<?> getValues() {\r\n+    public List<Object> getValues() {\r\n         return values;\r\n     }\r\n \r\n-    public void setValues(final List<?> values) {\r\n+    public void setValues(final List<Object> values) {\r\n         this.values = values;\r\n     }\r\n \r"},{"sha":"07589e896f3112ad1bd910be02fccfd96e83b47a","filename":"console/src/main/java/org/apache/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":107,"deletions":95,"changes":202,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a05a46da05436a7897564b31c5cca9d050ee9ae1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a05a46da05436a7897564b31c5cca9d050ee9ae1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=a05a46da05436a7897564b31c5cca9d050ee9ae1","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.EnumSet;\n import java.util.HashMap;\n@@ -83,8 +84,8 @@ public class ConnectorModalPage extends BaseModalPage {\n     // GuardedByteArray is not in classpath\n     private static final String GUARDED_BYTE_ARRAY = \"org.identityconnectors.common.security.GuardedByteArray\";\n \n-    private static final Class[] NUMBER = {Integer.class, Double.class, Long.class,\n-        Float.class, Number.class, Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE};\n+    private static final Class[] NUMBER = { Integer.class, Double.class, Long.class,\n+        Float.class, Number.class, Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE };\n \n     @SpringBean\n     private ConnectorRestClient restClient;\n@@ -105,7 +106,6 @@ public ConnectorModalPage(final PageReference pageRef, final ModalWindow window,\n         super();\n \n         // general data setup\n-\n         selectedCapabilities = new ArrayList<ConnectorCapability>(connInstanceTO.getId() == 0\n                 ? EnumSet.noneOf(ConnectorCapability.class)\n                 : connInstanceTO.getCapabilities());\n@@ -134,7 +134,6 @@ public ConnectorModalPage(final PageReference pageRef, final ModalWindow window,\n         properties = fillProperties(bundleTO, connInstanceTO);\n \n         // form - first tab\n-\n         final Form<ConnInstanceTO> connectorForm = new Form<ConnInstanceTO>(FORM);\n         connectorForm.setModel(new CompoundPropertyModel<ConnInstanceTO>(connInstanceTO));\n         connectorForm.setOutputMarkupId(true);\n@@ -157,7 +156,7 @@ public ConnectorModalPage(final PageReference pageRef, final ModalWindow window,\n \n         final AjaxDropDownChoicePanel<String> location =\n                 new AjaxDropDownChoicePanel<String>(\"location\", \"location\",\n-                new Model<String>(bundleTO == null ? null : bundleTO.getLocation()));\n+                        new Model<String>(bundleTO == null ? null : bundleTO.getLocation()));\n         ((DropDownChoice) location.getField()).setNullValid(true);\n         location.setStyleSheet(\"long_dynamicsize\");\n         location.setChoices(new ArrayList<String>(mapConnBundleTOs.keySet()));\n@@ -170,7 +169,7 @@ public ConnectorModalPage(final PageReference pageRef, final ModalWindow window,\n \n         final AjaxDropDownChoicePanel<String> connectorName =\n                 new AjaxDropDownChoicePanel<String>(\"connectorName\", \"connectorName\",\n-                new Model<String>(bundleTO == null ? null : bundleTO.getBundleName()));\n+                        new Model<String>(bundleTO == null ? null : bundleTO.getBundleName()));\n         ((DropDownChoice) connectorName.getField()).setNullValid(true);\n         connectorName.setStyleSheet(\"long_dynamicsize\");\n         connectorName.setChoices(bundleTO == null\n@@ -186,12 +185,12 @@ public ConnectorModalPage(final PageReference pageRef, final ModalWindow window,\n \n         final AjaxDropDownChoicePanel<String> version =\n                 new AjaxDropDownChoicePanel<String>(\"version\", \"version\",\n-                new Model<String>(bundleTO == null ? null : bundleTO.getVersion()));\n+                        new Model<String>(bundleTO == null ? null : bundleTO.getVersion()));\n         version.setStyleSheet(\"long_dynamicsize\");\n         version.setChoices(bundleTO == null\n                 ? new ArrayList<String>()\n                 : new ArrayList<String>(mapConnBundleTOs.get(connInstanceTO.getLocation()).\n-                get(connInstanceTO.getBundleName()).keySet()));\n+                        get(connInstanceTO.getBundleName()).keySet()));\n         version.setRequired(true);\n         version.addRequiredLabel();\n         version.setEnabled(connInstanceTO.getBundleName() != null);\n@@ -268,92 +267,94 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         });\n \n         // form - second tab (properties)\n-\n         final ListView<ConnConfProperty> connPropView = new AltListView<ConnConfProperty>(\n                 \"connectorProperties\", new PropertyModel<List<ConnConfProperty>>(this, \"properties\")) {\n \n-            private static final long serialVersionUID = 9101744072914090143L;\n-\n-            @Override\n-            protected void populateItem(final ListItem<ConnConfProperty> item) {\n-                final ConnConfProperty property = item.getModelObject();\n+                    private static final long serialVersionUID = 9101744072914090143L;\n \n-                final Label label = new Label(\"connPropAttrSchema\", property.getSchema().getDisplayName() == null\n-                        || property.getSchema().getDisplayName().isEmpty()\n-                        ? property.getSchema().getName()\n-                        : property.getSchema().getDisplayName());\n+                    @Override\n+                    @SuppressWarnings(\"unchecked\")\n+                    protected void populateItem(final ListItem<ConnConfProperty> item) {\n+                        final ConnConfProperty property = item.getModelObject();\n \n-                item.add(label);\n+                        final Label label = new Label(\"connPropAttrSchema\",\n+                                property.getSchema().getDisplayName() == null\n+                                || property.getSchema().getDisplayName().isEmpty()\n+                                ? property.getSchema().getName()\n+                                : property.getSchema().getDisplayName());\n+                        item.add(label);\n \n-                final FieldPanel field;\n-                boolean required = false;\n-                boolean isArray = false;\n-                if (property.getSchema().isConfidential()\n+                        final FieldPanel field;\n+                        boolean required = false;\n+                        boolean isArray = false;\n+                        if (property.getSchema().isConfidential()\n                         || GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())\n                         || GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {\n \n-                    field = new AjaxPasswordFieldPanel(\"panel\",\n-                            label.getDefaultModelObjectAsString(), new Model<String>());\n+                            field = new AjaxPasswordFieldPanel(\"panel\",\n+                                    label.getDefaultModelObjectAsString(), new Model<String>());\n \n-                    ((PasswordTextField) field.getField()).setResetPassword(false);\n+                            ((PasswordTextField) field.getField()).setResetPassword(false);\n \n-                    required = property.getSchema().isRequired();\n-                } else {\n-                    Class<?> propertySchemaClass;\n+                            required = property.getSchema().isRequired();\n+                        } else {\n+                            Class<?> propertySchemaClass;\n \n-                    try {\n-                        propertySchemaClass =\n+                            try {\n+                                propertySchemaClass =\n                                 ClassUtils.forName(property.getSchema().getType(), ClassUtils.getDefaultClassLoader());\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error parsing attribute type\", e);\n-                        propertySchemaClass = String.class;\n-                    }\n-                    if (ArrayUtils.contains(NUMBER, propertySchemaClass)) {\n-                        field = new AjaxNumberFieldPanel(\"panel\",\n-                                label.getDefaultModelObjectAsString(), new Model<Number>(),\n-                                ClassUtils.resolvePrimitiveIfNecessary(propertySchemaClass));\n-\n-                        required = property.getSchema().isRequired();\n-                    } else if (Boolean.class.equals(propertySchemaClass) || boolean.class.equals(propertySchemaClass)) {\n-                        field = new AjaxCheckBoxPanel(\"panel\",\n-                                label.getDefaultModelObjectAsString(), new Model<Boolean>());\n-                    } else {\n-                        field = new AjaxTextFieldPanel(\"panel\",\n-                                label.getDefaultModelObjectAsString(), new Model<String>());\n-\n-                        required = property.getSchema().isRequired();\n+                            } catch (Exception e) {\n+                                LOG.error(\"Error parsing attribute type\", e);\n+                                propertySchemaClass = String.class;\n+                            }\n+                            if (ArrayUtils.contains(NUMBER, propertySchemaClass)) {\n+                                field = new AjaxNumberFieldPanel(\"panel\",\n+                                        label.getDefaultModelObjectAsString(), new Model<Number>(),\n+                                        ClassUtils.resolvePrimitiveIfNecessary(propertySchemaClass));\n+\n+                                required = property.getSchema().isRequired();\n+                            } else if (Boolean.class.equals(propertySchemaClass)\n+                            || boolean.class.equals(propertySchemaClass)) {\n+\n+                                field = new AjaxCheckBoxPanel(\"panel\",\n+                                        label.getDefaultModelObjectAsString(), new Model<Boolean>());\n+                            } else {\n+                                field = new AjaxTextFieldPanel(\"panel\",\n+                                        label.getDefaultModelObjectAsString(), new Model<String>());\n+\n+                                required = property.getSchema().isRequired();\n+                            }\n+\n+                            if (propertySchemaClass.isArray()) {\n+                                isArray = true;\n+                            }\n+                        }\n+\n+                        field.setTitle(property.getSchema().getHelpMessage());\n+\n+                        if (required) {\n+                            field.addRequiredLabel();\n+                        }\n+\n+                        if (isArray) {\n+                            if (property.getValues().isEmpty()) {\n+                                property.getValues().add(null);\n+                            }\n+\n+                            item.add(new MultiValueSelectorPanel<String>(\n+                                            \"panel\", new PropertyModel<List<String>>(property, \"values\"), field));\n+                        } else {\n+                            field.setNewModel(property.getValues());\n+                            item.add(field);\n+                        }\n+\n+                        final AjaxCheckBoxPanel overridable = new AjaxCheckBoxPanel(\"connPropAttrOverridable\",\n+                                \"connPropAttrOverridable\", new PropertyModel<Boolean>(property, \"overridable\"));\n+\n+                        item.add(overridable);\n+                        connInstanceTO.addConfiguration(property);\n                     }\n-\n-                    if (String[].class.equals(propertySchemaClass)) {\n-                        isArray = true;\n-                    }\n-                }\n-\n-                field.setTitle(property.getSchema().getHelpMessage());\n-\n-                if (required) {\n-                    field.addRequiredLabel();\n-                }\n-\n-                if (isArray) {\n-                    if (property.getValues().isEmpty()) {\n-                        property.getValues().add(null);\n-                    }\n-\n-                    item.add(new MultiValueSelectorPanel<String>(\n-                            \"panel\", new PropertyModel<List<String>>(property, \"values\"), field));\n-                } else {\n-                    field.setNewModel(property.getValues());\n-                    item.add(field);\n-                }\n-\n-                final AjaxCheckBoxPanel overridable = new AjaxCheckBoxPanel(\"connPropAttrOverridable\",\n-                        \"connPropAttrOverridable\", new PropertyModel<Boolean>(property, \"overridable\"));\n-\n-                item.add(overridable);\n-                connInstanceTO.addConfiguration(property);\n-            }\n-        };\n+                };\n         connPropView.setOutputMarkupId(true);\n         connectorPropForm.add(connPropView);\n \n@@ -379,24 +380,22 @@ public void onClick(final AjaxRequestTarget target) {\n         connectorPropForm.add(check);\n \n         // form - third tab (capabilities)\n-\n         final IModel<List<ConnectorCapability>> capabilities =\n                 new LoadableDetachableModel<List<ConnectorCapability>>() {\n \n-            private static final long serialVersionUID = 5275935387613157437L;\n+                    private static final long serialVersionUID = 5275935387613157437L;\n \n-            @Override\n-            protected List<ConnectorCapability> load() {\n-                return Arrays.asList(ConnectorCapability.values());\n-            }\n-        };\n+                    @Override\n+                    protected List<ConnectorCapability> load() {\n+                        return Arrays.asList(ConnectorCapability.values());\n+                    }\n+                };\n         CheckBoxMultipleChoice<ConnectorCapability> capabilitiesPalette =\n                 new CheckBoxMultipleChoice<ConnectorCapability>(\"capabilitiesPalette\",\n-                new PropertyModel<List<ConnectorCapability>>(this, \"selectedCapabilities\"), capabilities);\n+                        new PropertyModel<List<ConnectorCapability>>(this, \"selectedCapabilities\"), capabilities);\n         connectorForm.add(capabilitiesPalette);\n \n         // form - submit / cancel buttons\n-\n         final AjaxButton submit = new IndicatingAjaxButton(APPLY, new Model<String>(getString(SUBMIT))) {\n \n             private static final long serialVersionUID = -958724007591692537L;\n@@ -480,16 +479,29 @@ private List<ConnConfProperty> fillProperties(final ConnBundleTO bundleTO, final\n \n         if (bundleTO != null) {\n             for (ConnConfPropSchema key : bundleTO.getProperties()) {\n-                final ConnConfProperty propertyTO = new ConnConfProperty();\n-                propertyTO.setSchema(key);\n+                final ConnConfProperty property = new ConnConfProperty();\n+                property.setSchema(key);\n                 if (connInstanceTO.getId() != 0 && connInstanceTO.getConfigurationMap().containsKey(key.getName())) {\n-                    propertyTO.setValues(connInstanceTO.getConfigurationMap().get(key.getName()).getValues());\n-                    propertyTO.setOverridable(connInstanceTO.getConfigurationMap().get(key.getName()).isOverridable());\n+                    property.getValues().addAll(\n+                            connInstanceTO.getConfigurationMap().get(key.getName()).getValues());\n+                    property.setOverridable(connInstanceTO.getConfigurationMap().get(key.getName()).isOverridable());\n+                }\n+\n+                if (property.getValues() == null || property.getValues().isEmpty() && key.getDefaultValue() != null) {\n+                    if (key.getDefaultValue().getClass().isArray()) {\n+                        property.getValues().addAll(Arrays.asList((Object[]) key.getDefaultValue()));\n+                    } else if (key.getDefaultValue() instanceof Collection<?>) {\n+                        property.getValues().addAll((Collection<?>) key.getDefaultValue());\n+                    } else {\n+                        property.getValues().add(key.getDefaultValue());\n+                    }\n                 }\n-                props.add(propertyTO);\n+\n+                props.add(property);\n             }\n         }\n-        // re-order properties\n+        \n+        // re-order properties (implements Comparable)\n         Collections.sort(props);\n         return props;\n     }"},{"sha":"1ca515af758b16e4fa2119d8ac0c161b2bd01e59","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a05a46da05436a7897564b31c5cca9d050ee9ae1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a05a46da05436a7897564b31c5cca9d050ee9ae1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=a05a46da05436a7897564b31c5cca9d050ee9ae1","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.core.util.ConnIdBundleManager;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n+import org.identityconnectors.framework.api.ConfigurationProperty;\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorKey;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n@@ -212,18 +213,18 @@ public List<ConnBundleTO> getBundles(@RequestParam(value = \"lang\", required = fa\n                 ConfigurationProperties properties = ConnIdBundleManager.getConfigurationProperties(bundle);\n \n                 for (String propName : properties.getPropertyNames()) {\n-                    ConnConfPropSchema connConfPropSchema = new ConnConfPropSchema();\n+                    ConfigurationProperty configurationProperty = properties.getProperty(propName);\n \n-                    ConfigurationPropertyImpl configurationProperty =\n-                            (ConfigurationPropertyImpl) properties.getProperty(propName);\n+                    ConnConfPropSchema connConfPropSchema = new ConnConfPropSchema();\n \n                     connConfPropSchema.setName(configurationProperty.getName());\n                     connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));\n                     connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));\n                     connConfPropSchema.setRequired(configurationProperty.isRequired());\n                     connConfPropSchema.setType(configurationProperty.getType().getName());\n-                    connConfPropSchema.setOrder(configurationProperty.getOrder());\n+                    connConfPropSchema.setOrder(((ConfigurationPropertyImpl) configurationProperty).getOrder());\n                     connConfPropSchema.setConfidential(configurationProperty.isConfidential());\n+                    connConfPropSchema.setDefaultValue(configurationProperty.getValue());\n \n                     connBundleTO.addProperty(connConfPropSchema);\n                 }"},{"sha":"c6d0a82364bac90987e3d06e28f91edc94e500b5","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ConnInstanceDataBinder.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a05a46da05436a7897564b31c5cca9d050ee9ae1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a05a46da05436a7897564b31c5cca9d050ee9ae1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java?ref=a05a46da05436a7897564b31c5cca9d050ee9ae1","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.apache.syncope.core.util.ConnIdBundleManager;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n+import org.identityconnectors.framework.api.ConfigurationProperty;\n import org.identityconnectors.framework.impl.api.ConfigurationPropertyImpl;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -40,7 +41,7 @@\n @Component\n public class ConnInstanceDataBinder {\n \n-    private static final String[] IGNORE_PROPERTIES = {\"id\"};\n+    private static final String[] IGNORE_PROPERTIES = { \"id\" };\n \n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n@@ -112,9 +113,7 @@ public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n             connInstance.setLocation(connInstanceTO.getLocation().toString());\n         }\n \n-        // Throw composite exception if there is at least one element set\n-        // in the composing exceptions\n-\n+        // Throw composite exception if there is at least one element set in the composing exceptions\n         if (!requiredValuesMissing.isEmpty()) {\n             scee.addException(requiredValuesMissing);\n         }\n@@ -188,28 +187,29 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n         // retrieve the ConfigurationProperties\n         ConfigurationProperties properties = ConnIdBundleManager.getConfigurationProperties(\n                 ConnIdBundleManager.getConnectorInfo(connInstance.getLocation(),\n-                connInstance.getBundleName(), connInstance.getVersion(), connInstance.getConnectorName()));\n+                        connInstance.getBundleName(), connInstance.getVersion(), connInstance.getConnectorName()));\n \n         BeanUtils.copyProperties(connInstance, connInstanceTO, IGNORE_PROPERTIES);\n \n         final Map<String, ConnConfProperty> connInstanceToConfMap = connInstanceTO.getConfigurationMap();\n \n         for (String propName : properties.getPropertyNames()) {\n-            ConfigurationPropertyImpl configurationProperty =\n-                    (ConfigurationPropertyImpl) properties.getProperty(propName);\n+            ConfigurationProperty configurationProperty = properties.getProperty(propName);\n \n             if (connInstanceToConfMap.containsKey(propName)) {\n                 connInstanceToConfMap.get(propName).getSchema().setDisplayName(\n                         configurationProperty.getDisplayName(propName));\n             } else {\n                 ConnConfPropSchema connConfPropSchema = new ConnConfPropSchema();\n+\n                 connConfPropSchema.setName(configurationProperty.getName());\n                 connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));\n                 connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));\n                 connConfPropSchema.setRequired(configurationProperty.isRequired());\n                 connConfPropSchema.setType(configurationProperty.getType().getName());\n+                connConfPropSchema.setOrder(((ConfigurationPropertyImpl) configurationProperty).getOrder());\n                 connConfPropSchema.setConfidential(configurationProperty.isConfidential());\n-                connConfPropSchema.setOrder(configurationProperty.getOrder());\n+                connConfPropSchema.setDefaultValue(configurationProperty.getValue());\n \n                 ConnConfProperty property = new ConnConfProperty();\n                 property.setSchema(connConfPropSchema);"},{"sha":"9e700d55e410a77f28b5950d95d4ab755b344488","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/ConnInstanceTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a05a46da05436a7897564b31c5cca9d050ee9ae1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a05a46da05436a7897564b31c5cca9d050ee9ae1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java?ref=a05a46da05436a7897564b31c5cca9d050ee9ae1","patch":"@@ -21,7 +21,6 @@\n import static org.junit.Assert.*;\n \n import java.io.File;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -87,15 +86,15 @@ public void save() throws ClassNotFoundException {\n         endpointSchema.setRequired(true);\n         ConnConfProperty endpoint = new ConnConfProperty();\n         endpoint.setSchema(endpointSchema);\n-        endpoint.setValues(Collections.singletonList(\"http://host.domain\"));\n+        endpoint.getValues().add(\"http://host.domain\");\n \n         ConnConfPropSchema servicenameSchema = new ConnConfPropSchema();\n         servicenameSchema.setName(\"servicename\");\n         servicenameSchema.setType(String.class.getName());\n         servicenameSchema.setRequired(true);\n         ConnConfProperty servicename = new ConnConfProperty();\n         servicename.setSchema(servicenameSchema);\n-        servicename.setValues(Collections.singletonList(\"Provisioning\"));\n+        servicename.getValues().add(\"Provisioning\");\n \n         conf.add(endpoint);\n         conf.add(servicename);"},{"sha":"e81ca9fffd1c749e209c94f458522b8d832086a8","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a05a46da05436a7897564b31c5cca9d050ee9ae1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a05a46da05436a7897564b31c5cca9d050ee9ae1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=a05a46da05436a7897564b31c5cca9d050ee9ae1","patch":"@@ -28,7 +28,6 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.URI;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n@@ -123,15 +122,15 @@ public void create() {\n         endpointSchema.setRequired(true);\n         ConnConfProperty endpoint = new ConnConfProperty();\n         endpoint.setSchema(endpointSchema);\n-        endpoint.setValues(Collections.singletonList(\"http://localhost:8888/wssample/services\"));\n+        endpoint.getValues().add(\"http://localhost:8888/wssample/services\");\n \n         ConnConfPropSchema servicenameSchema = new ConnConfPropSchema();\n         servicenameSchema.setName(\"servicename\");\n         servicenameSchema.setType(String.class.getName());\n         servicenameSchema.setRequired(true);\n         ConnConfProperty servicename = new ConnConfProperty();\n         servicename.setSchema(servicenameSchema);\n-        servicename.setValues(Collections.singletonList(\"Provisioning\"));\n+        servicename.getValues().add(\"Provisioning\");\n \n         conf.add(endpoint);\n         conf.add(servicename);\n@@ -224,15 +223,15 @@ public void update() {\n         endpointSchema.setRequired(true);\n         ConnConfProperty endpoint = new ConnConfProperty();\n         endpoint.setSchema(endpointSchema);\n-        endpoint.setValues(Collections.singletonList(\"http://localhost:8888/wssample/services\"));\n+        endpoint.getValues().add(\"http://localhost:8888/wssample/services\");\n \n         ConnConfPropSchema servicenameSchema = new ConnConfPropSchema();\n         servicenameSchema.setName(\"servicename\");\n         servicenameSchema.setType(String.class.getName());\n         servicenameSchema.setRequired(true);\n         ConnConfProperty servicename = new ConnConfProperty();\n         servicename.setSchema(servicenameSchema);\n-        servicename.setValues(Collections.singletonList(\"Provisioning\"));\n+        servicename.getValues().add(\"Provisioning\");\n \n         conf.add(endpoint);\n         conf.add(servicename);\n@@ -451,55 +450,55 @@ public void validate() {\n         userSchema.setRequired(false);\n         ConnConfProperty user = new ConnConfProperty();\n         user.setSchema(userSchema);\n-        user.setValues(Collections.singletonList(\"sa\"));\n+        user.getValues().add(\"sa\");\n \n         ConnConfPropSchema keyColumnSchema = new ConnConfPropSchema();\n         keyColumnSchema.setName(\"keyColumn\");\n         keyColumnSchema.setType(String.class.getName());\n         keyColumnSchema.setRequired(true);\n         ConnConfProperty keyColumn = new ConnConfProperty();\n         keyColumn.setSchema(keyColumnSchema);\n-        keyColumn.setValues(Collections.singletonList(\"id\"));\n+        keyColumn.getValues().add(\"id\");\n \n         ConnConfPropSchema jdbcUrlTemplateSchema = new ConnConfPropSchema();\n         jdbcUrlTemplateSchema.setName(\"jdbcUrlTemplate\");\n         jdbcUrlTemplateSchema.setType(String.class.getName());\n         jdbcUrlTemplateSchema.setRequired(true);\n         ConnConfProperty jdbcUrlTemplate = new ConnConfProperty();\n         jdbcUrlTemplate.setSchema(jdbcUrlTemplateSchema);\n-        jdbcUrlTemplate.setValues(Collections.singletonList(\"jdbc:h2:tcp://localhost:9092/testdb\"));\n+        jdbcUrlTemplate.getValues().add(\"jdbc:h2:tcp://localhost:9092/testdb\");\n \n         ConnConfPropSchema passwordColumnSchema = new ConnConfPropSchema();\n         passwordColumnSchema.setName(\"passwordColumn\");\n         passwordColumnSchema.setType(String.class.getName());\n         passwordColumnSchema.setRequired(true);\n         ConnConfProperty passwordColumn = new ConnConfProperty();\n         passwordColumn.setSchema(passwordColumnSchema);\n-        passwordColumn.setValues(Collections.singletonList(\"password\"));\n+        passwordColumn.getValues().add(\"password\");\n \n         ConnConfPropSchema tableSchema = new ConnConfPropSchema();\n         tableSchema.setName(\"table\");\n         tableSchema.setType(String.class.getName());\n         tableSchema.setRequired(true);\n         ConnConfProperty table = new ConnConfProperty();\n         table.setSchema(tableSchema);\n-        table.setValues(Collections.singletonList(\"test\"));\n+        table.getValues().add(\"test\");\n \n         ConnConfPropSchema passwordSchema = new ConnConfPropSchema();\n         passwordSchema.setName(\"password\");\n         passwordSchema.setType(GuardedString.class.getName());\n         passwordSchema.setRequired(true);\n         ConnConfProperty password = new ConnConfProperty();\n         password.setSchema(passwordSchema);\n-        password.setValues(Collections.singletonList(\"sa\"));\n+        password.getValues().add(\"sa\");\n \n         ConnConfPropSchema jdbcDriverSchema = new ConnConfPropSchema();\n         jdbcDriverSchema.setName(\"jdbcDriver\");\n         jdbcDriverSchema.setType(String.class.getName());\n         jdbcDriverSchema.setRequired(true);\n         ConnConfProperty jdbcDriver = new ConnConfProperty();\n         jdbcDriver.setSchema(jdbcDriverSchema);\n-        jdbcDriver.setValues(Collections.singletonList(\"org.h2.Driver\"));\n+        jdbcDriver.getValues().add(\"org.h2.Driver\");\n \n         conf.add(user);\n         conf.add(keyColumn);\n@@ -517,7 +516,8 @@ public void validate() {\n         assertTrue(verify);\n \n         conf.remove(password);\n-        password.setValues(Collections.singletonList(\"password\"));\n+        password.getValues().clear();\n+        password.getValues().add(\"password\");\n         conf.add(password);\n \n         verify = connectorService.check(connectorTO);\n@@ -600,7 +600,7 @@ public void issueSYNCOPE112() {\n         userSchema.setRequired(true);\n         ConnConfProperty endpoint = new ConnConfProperty();\n         endpoint.setSchema(userSchema);\n-        endpoint.setValues(Collections.singletonList(\"http://localhost:9080/does_not_work\"));\n+        endpoint.getValues().add(\"http://localhost:9080/does_not_work\");\n         endpoint.setOverridable(true);\n \n         ConnConfPropSchema keyColumnSchema = new ConnConfPropSchema();\n@@ -609,8 +609,7 @@ public void issueSYNCOPE112() {\n         keyColumnSchema.setRequired(true);\n         ConnConfProperty servicename = new ConnConfProperty();\n         servicename.setSchema(keyColumnSchema);\n-        servicename.setValues(\n-                Collections.singletonList(\"org.connid.bundles.soap.provisioning.interfaces.Provisioning\"));\n+        servicename.getValues().add(\"org.connid.bundles.soap.provisioning.interfaces.Provisioning\");\n         servicename.setOverridable(false);\n \n         conf.add(endpoint);\n@@ -641,7 +640,8 @@ public void issueSYNCOPE112() {\n             resourceTO.setConnectorId(connectorTO.getId());\n \n             conf = new HashSet<ConnConfProperty>();\n-            endpoint.setValues(Collections.singletonList(\"http://localhost:9080/wssample/services/provisioning\"));\n+            endpoint.getValues().clear();\n+            endpoint.getValues().add(\"http://localhost:9080/wssample/services/provisioning\");\n             conf.add(endpoint);\n \n             resourceTO.setConnectorConfigurationProperties(conf);\n@@ -691,7 +691,6 @@ public void bulkAction() {\n         bulkAction.addTarget(String.valueOf(\n                 getObject(connectorService.create(conn), ConnInstanceTO.class, connectorService).getId()));\n \n-\n         Iterator<String> iter = bulkAction.getTargets().iterator();\n \n         assertNotNull(connectorService.read(Long.valueOf(iter.next())));"},{"sha":"60af3713313d13500e999d2abd5a9b9bce02fe74","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a05a46da05436a7897564b31c5cca9d050ee9ae1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a05a46da05436a7897564b31c5cca9d050ee9ae1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=a05a46da05436a7897564b31c5cca9d050ee9ae1","patch":"@@ -118,7 +118,7 @@ public void createOverridingProps() {\n         schema.setName(\"endpoint\");\n         schema.setRequired(true);\n         p.setSchema(schema);\n-        p.setValues(Collections.singletonList(\"http://invalidurl/\"));\n+        p.getValues().add(\"http://invalidurl/\");\n \n         Set<ConnConfProperty> connectorConfigurationProperties = new HashSet<ConnConfProperty>(Arrays.asList(p));\n         resourceTO.setConnectorConfigurationProperties(connectorConfigurationProperties);"},{"sha":"5c66b3d076a5ff707e9d284b9d1e518aeff9feaf","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a05a46da05436a7897564b31c5cca9d050ee9ae1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a05a46da05436a7897564b31c5cca9d050ee9ae1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=a05a46da05436a7897564b31c5cca9d050ee9ae1","patch":"@@ -57,7 +57,6 @@\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.types.TraceLevel;\n-import static org.apache.syncope.core.rest.AbstractTest.attributeTO;\n import org.apache.syncope.core.sync.TestSyncActions;\n import org.apache.syncope.core.sync.TestSyncRule;\n import org.apache.syncope.core.sync.impl.SyncJob;"},{"sha":"bd6f40f7f15992cb7e0d485f34d2b36eef74cfa0","filename":"core/src/test/java/org/apache/syncope/core/rest/VirAttrTestITCase.java","status":"modified","additions":15,"deletions":17,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a05a46da05436a7897564b31c5cca9d050ee9ae1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a05a46da05436a7897564b31c5cca9d050ee9ae1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java?ref=a05a46da05436a7897564b31c5cca9d050ee9ae1","patch":"@@ -18,10 +18,6 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.apache.syncope.core.rest.AbstractTest.RESOURCE_NAME_LDAP;\n-import static org.apache.syncope.core.rest.AbstractTest.attributeMod;\n-import static org.apache.syncope.core.rest.AbstractTest.attributeTO;\n-import static org.apache.syncope.core.rest.UserTestITCase.getUniqueSampleTO;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n@@ -56,7 +52,7 @@ public class VirAttrTestITCase extends AbstractTest {\n \n     @Test\n     public void issueSYNCOPE16() {\n-        UserTO userTO = getUniqueSampleTO(\"issue16@apache.org\");\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"issue16@apache.org\");\n \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(8L);\n@@ -91,7 +87,7 @@ public void issueSYNCOPE260() {\n         // ----------------------------------\n         // create user and check virtual attribute value propagation\n         // ----------------------------------\n-        UserTO userTO = getUniqueSampleTO(\"260@a.com\");\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"260@a.com\");\n         userTO.addResource(RESOURCE_NAME_WS2);\n \n         userTO = createUser(userTO);\n@@ -203,7 +199,7 @@ public void issueSYNCOPE260() {\n \n     @Test\n     public void virAttrCache() {\n-        UserTO userTO = getUniqueSampleTO(\"virattrcache@apache.org\");\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"virattrcache@apache.org\");\n         userTO.getVirtualAttributes().clear();\n \n         AttributeTO virAttrTO = new AttributeTO();\n@@ -291,7 +287,7 @@ public void issueSYNCOPE397() {\n         assertTrue(found);\n \n         // create a new user\n-        UserTO userTO = getUniqueSampleTO(\"syncope397@syncope.apache.org\");\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"syncope397@syncope.apache.org\");\n         userTO.getResources().clear();\n         userTO.getMemberships().clear();\n         userTO.getDerivedAttributes().clear();\n@@ -333,7 +329,7 @@ public void issueSYNCOPE397() {\n \n     @Test\n     public void issueSYNCOPE442() {\n-        UserTO userTO = getUniqueSampleTO(\"syncope442@apache.org\");\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"syncope442@apache.org\");\n         userTO.getVirtualAttributes().clear();\n \n         AttributeTO virAttrTO = new AttributeTO();\n@@ -361,7 +357,8 @@ public void issueSYNCOPE442() {\n         for (ConnConfProperty prop : connInstanceBean.getConfiguration()) {\n             if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n                 jdbcURL = prop.getValues().iterator().next().toString();\n-                prop.setValues(Collections.singletonList(\"jdbc:h2:tcp://localhost:9092/xxx\"));\n+                prop.getValues().clear();\n+                prop.getValues().add(\"jdbc:h2:tcp://localhost:9092/xxx\");\n             }\n         }\n \n@@ -405,7 +402,8 @@ public void issueSYNCOPE442() {\n         // ----------------------------------------\n         for (ConnConfProperty prop : connInstanceBean.getConfiguration()) {\n             if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n-                prop.setValues(Collections.singletonList(jdbcURL));\n+                prop.getValues().clear();\n+                prop.getValues().add(jdbcURL);\n             }\n         }\n \n@@ -418,7 +416,7 @@ public void issueSYNCOPE442() {\n \n     @Test\n     public void issueSYNCOPE436() {\n-        UserTO userTO = getUniqueSampleTO(\"syncope436@syncope.apache.org\");\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"syncope436@syncope.apache.org\");\n         userTO.getMemberships().clear();\n         userTO.getResources().clear();\n         userTO.addResource(RESOURCE_NAME_LDAP);\n@@ -484,7 +482,7 @@ public void issueSYNCOPE453() {\n         // -------------------------------------------\n         // Create new user\n         // -------------------------------------------\n-        UserTO userTO = getUniqueSampleTO(\"syncope453@syncope.apache.org\");\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"syncope453@syncope.apache.org\");\n         userTO.addAttribute(attributeTO(\"aLong\", \"123\"));\n         userTO.getResources().clear();\n         userTO.getResources().add(resourceName);\n@@ -522,7 +520,7 @@ public void issueSYNCOPE453() {\n \n     @Test\n     public void issueSYNCOPE459() {\n-        UserTO userTO = getUniqueSampleTO(\"syncope459@apache.org\");\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"syncope459@apache.org\");\n         userTO.getResources().clear();\n         userTO.getMemberships().clear();\n         userTO.getVirtualAttributes().clear();\n@@ -551,11 +549,11 @@ public void issueSYNCOPE459() {\n     @Test\n     public void issueSYNCOPE501() {\n         // 1. create user and propagate him on resource-db-virattr\n-        UserTO userTO = getUniqueSampleTO(\"syncope501@apache.org\");\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"syncope501@apache.org\");\n         userTO.getResources().clear();\n         userTO.getMemberships().clear();\n         userTO.getVirtualAttributes().clear();\n-        \n+\n         userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n \n         // virtualdata is mapped with username\n@@ -586,7 +584,7 @@ public void issueSYNCOPE501() {\n \n         userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n-        \n+\n         // 3. check that user virtual attribute has been really updated \n         assertFalse(userTO.getVirtualAttributeMap().get(\"virtualdata\").getValues().isEmpty());\n         assertEquals(\"syncope501_updated@apache.org\", userTO.getVirtualAttributeMap().get(\"virtualdata\").getValues()."}]}