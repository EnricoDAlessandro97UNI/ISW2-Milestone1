{"sha":"57499d370cbcda40eedc58fa597d251f0d5efc81","node_id":"C_kwDOJfYA1toAKDU3NDk5ZDM3MGNiY2RhNDBlZWRjNThmYTU5N2QyNTFmMGQ1ZWZjODE","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2023-01-03T15:27:49Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-01-03T15:28:31Z"},"message":"[SYNCOPE-1719] No more limitations when setting memberships and relationships (#399)","tree":{"sha":"e02a1a92baf875389a63f1c83ec4acde9458da4c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e02a1a92baf875389a63f1c83ec4acde9458da4c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/57499d370cbcda40eedc58fa597d251f0d5efc81","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/57499d370cbcda40eedc58fa597d251f0d5efc81","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/57499d370cbcda40eedc58fa597d251f0d5efc81","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/57499d370cbcda40eedc58fa597d251f0d5efc81/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1ef7cbf03c7bb36b88596058f1056f0e264e1db0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1ef7cbf03c7bb36b88596058f1056f0e264e1db0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1ef7cbf03c7bb36b88596058f1056f0e264e1db0"}],"stats":{"total":484,"additions":91,"deletions":393},"files":[{"sha":"13426911bcb2f74805e737f7f024363ed6b301d9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -247,7 +247,7 @@ protected void reloadMemberships() {\n                 if (!conditions.isEmpty()) {\n                     assignedGroups.putAll(groupRestClient.search(\n                             realmObj,\n-                            builder.isAssignable().and().or(conditions).query(),\n+                            builder.or(conditions).query(),\n                             1,\n                             Constants.MAX_GROUP_LIST_SIZE,\n                             sort,"},{"sha":"887e9b6c408e980c1ee14f29c42c044ff6f16e31","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/PlainAttrs.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FPlainAttrs.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -371,10 +371,8 @@ protected void populateItem(final ListItem<Attr> item) {\n \n                     AbstractFieldPanel<?> panel = getFieldPanel(schemas.get(attrTO.getSchema()));\n                     if (schemas.get(attrTO.getSchema()).isMultivalue()) {\n-                        panel = new MultiFieldPanel.Builder<>(\n-                                new PropertyModel<>(\n-                                        attributableTO.getObject().getPlainAttr(attrTO.getSchema()), \"values\"))\n-                                .build(\"panel\", attrTO.getSchema(), FieldPanel.class.cast(panel));\n+                        panel = new MultiFieldPanel.Builder<>(new PropertyModel<>(attrTO, \"values\")).\n+                                build(\"panel\", attrTO.getSchema(), FieldPanel.class.cast(panel));\n                         // SYNCOPE-1215 the entire multifield panel must be readonly, not only its field\n                         ((MultiFieldPanel) panel).setReadOnly(schema == null ? false : schema.isReadonly());\n                     } else {"},{"sha":"dc5eaed6614130778d490b81752a17e28c863dcf","filename":"client/idrepo/enduser/src/test/resources/enduser-debug.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/client%2Fidrepo%2Fenduser%2Fsrc%2Ftest%2Fresources%2Fenduser-debug.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/client%2Fidrepo%2Fenduser%2Fsrc%2Ftest%2Fresources%2Fenduser-debug.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Ftest%2Fresources%2Fenduser-debug.properties?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -19,6 +19,6 @@ keymaster.username=${anonymousUser}\n keymaster.password=${anonymousKey}\n \n server.port=9091\n-service.discovery.address=http://localhost:9090/syncope-console/\n+service.discovery.address=http://localhost:9090/syncope-enduser/\n \n logging.config=file://${project.build.testOutputDirectory}/log4j2.xml"},{"sha":"cfdc87eb7eb6d092a2f76c24dcdbeb577dde7634","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/AnyObjectFiqlSearchConditionBuilder.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -91,12 +91,6 @@ public AnyObjectCompleteCondition notInRelationshipTypes(final String type, fina\n                 notInRelationshipTypes(type, moreTypes);\n     }\n \n-    public AnyObjectCompleteCondition isAssignable() {\n-        return newBuilderInstance().\n-                is(SpecialAttr.ASSIGNABLE.toString()).\n-                isAssignable();\n-    }\n-\n     protected class Builder extends AbstractFiqlSearchConditionBuilder.Builder<\n             AnyObjectProperty, AnyObjectPartialCondition, AnyObjectCompleteCondition>\n             implements AnyObjectProperty, AnyObjectPartialCondition, AnyObjectCompleteCondition {\n@@ -157,11 +151,5 @@ public AnyObjectCompleteCondition notInRelationshipTypes(final String type, fina\n             this.result = SpecialAttr.RELATIONSHIP_TYPES.toString();\n             return condition(FiqlParser.NEQ, type, (Object[]) moreTypes);\n         }\n-\n-        @Override\n-        public AnyObjectCompleteCondition isAssignable() {\n-            this.result = SpecialAttr.ASSIGNABLE.toString();\n-            return condition(FiqlParser.EQ, SpecialAttr.NULL);\n-        }\n     }\n }"},{"sha":"755d1d935a7f9b1f6c42d94ed4ee74dd3b6226a5","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/AnyObjectProperty.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectProperty.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -31,6 +31,4 @@ public interface AnyObjectProperty extends SyncopeProperty<AnyObjectCompleteCond\n     AnyObjectCompleteCondition inRelationshipTypes(String type, String... moreTypes);\n \n     AnyObjectCompleteCondition notInRelationshipTypes(String type, String... moreTypes);\n-\n-    AnyObjectCompleteCondition isAssignable();\n }"},{"sha":"512e699b799c2f2f0397be31b1d030c3088d010d","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/GroupFiqlSearchConditionBuilder.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -40,12 +40,6 @@ public GroupProperty is(final String property) {\n         return newBuilderInstance().is(property);\n     }\n \n-    public GroupCompleteCondition isAssignable() {\n-        return newBuilderInstance().\n-                is(SpecialAttr.ASSIGNABLE.toString()).\n-                isAssignable();\n-    }\n-\n     public GroupCompleteCondition withMembers(final String member, final String... moreMembers) {\n         return newBuilderInstance().\n                 is(SpecialAttr.MEMBER.toString()).\n@@ -77,12 +71,6 @@ public GroupProperty is(final String property) {\n             return b;\n         }\n \n-        @Override\n-        public GroupCompleteCondition isAssignable() {\n-            this.result = SpecialAttr.ASSIGNABLE.toString();\n-            return condition(FiqlParser.EQ, SpecialAttr.NULL);\n-        }\n-\n         @Override\n         public GroupCompleteCondition withMembers(final String member, final String... moreMembers) {\n             this.result = SpecialAttr.MEMBER.toString();"},{"sha":"a71bb93ba55843f55b70b864cd60ea876f2c5ccf","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/GroupProperty.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -20,8 +20,6 @@\n \n public interface GroupProperty extends SyncopeProperty<GroupCompleteCondition> {\n \n-    GroupCompleteCondition isAssignable();\n-\n     GroupCompleteCondition withMembers(String member, String... moreMembers);\n \n     GroupCompleteCondition withoutMembers(String member, String... moreMembers);"},{"sha":"4d960c181541a379e355171b9b0c3711a598188e","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/SpecialAttr.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -66,11 +66,7 @@ public enum SpecialAttr {\n     /**\n      * Applies to groups.\n      */\n-    MEMBER(\"$member\"),\n-    /**\n-     * Applies to groups and any objects.\n-     */\n-    ASSIGNABLE(\"$assignable\");\n+    MEMBER(\"$member\");\n \n     private final String literal;\n "},{"sha":"8100da88d0d661ee77e8c93cb7b14d4929fd934b","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -30,9 +30,8 @@ public static class Builder {\n \n         private final RelationshipTO instance = new RelationshipTO();\n \n-        public Builder type(final String type) {\n+        public Builder(final String type) {\n             instance.setType(type);\n-            return this;\n         }\n \n         public Builder otherEnd(final String otherEndType, final String otherEndKey) {"},{"sha":"3ad2049c8d2dccd2f73c65eba08266dd99791fc0","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -39,7 +39,6 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -123,21 +122,16 @@ public Pair<Integer, List<GroupTO>> searchAssignableGroups(\n         Realm base = Optional.ofNullable(realmDAO.findByFullPath(realm)).\n                 orElseThrow(() -> new NotFoundException(\"Realm \" + realm));\n \n-        AssignableCond assignableCond = new AssignableCond();\n-        assignableCond.setRealmFullPath(realm);\n-\n-        SearchCond searchCond;\n+        AnyCond termCond;\n         if (StringUtils.isNotBlank(term)) {\n-            AnyCond termCond = new AnyCond(AttrCond.Type.ILIKE);\n+            termCond = new AnyCond(AttrCond.Type.ILIKE);\n             termCond.setSchema(\"name\");\n             termCond.setExpression(term.replace(\"*\", \"%\"));\n-\n-            searchCond = SearchCond.getAnd(\n-                    SearchCond.getLeaf(assignableCond),\n-                    SearchCond.getLeaf(termCond));\n         } else {\n-            searchCond = SearchCond.getLeaf(assignableCond);\n+            termCond = new AnyCond(AttrCond.Type.ISNOTNULL);\n+            termCond.setSchema(\"key\");\n         }\n+        SearchCond searchCond = SearchCond.getLeaf(termCond);\n \n         int count = searchDAO.count(base, true, SyncopeConstants.FULL_ADMIN_REALMS, searchCond, AnyTypeKind.GROUP);\n "},{"sha":"67a3aa93a34d2bf473ddbf1a219e539ee766ffb0","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -36,7 +36,6 @@\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.request.ResourceAR;\n import org.apache.syncope.common.lib.request.ResourceDR;\n-import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -128,11 +127,6 @@ public TO read(final String key) {\n     public PagedResult<TO> search(final AnyQuery anyQuery) {\n         String realm = StringUtils.prependIfMissing(anyQuery.getRealm(), SyncopeConstants.ROOT_REALM);\n \n-        // if an assignable query is provided in the FIQL string, start anyway from root realm\n-        boolean isAssignableCond = StringUtils.isBlank(anyQuery.getFiql())\n-                ? false\n-                : -1 != anyQuery.getFiql().indexOf(SpecialAttr.ASSIGNABLE.toString());\n-\n         SearchCond searchCond = StringUtils.isBlank(anyQuery.getFiql())\n                 ? null\n                 : getSearchCond(anyQuery.getFiql(), realm);\n@@ -143,7 +137,7 @@ public PagedResult<TO> search(final AnyQuery anyQuery) {\n                     anyQuery.getPage(),\n                     anyQuery.getSize(),\n                     getOrderByClauses(anyQuery.getOrderBy()),\n-                    isAssignableCond ? SyncopeConstants.ROOT_REALM : realm,\n+                    realm,\n                     anyQuery.getRecursive(),\n                     anyQuery.getDetails());\n "},{"sha":"92de4a349e6c285de0ef963529e5e92a890fe962","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -35,7 +35,6 @@\n import org.apache.syncope.common.lib.search.SyncopeFiqlSearchCondition;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.AuxClassCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n@@ -200,12 +199,6 @@ protected SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                             leaf = SearchCond.getLeaf(dynRealmCond);\n                             break;\n \n-                        case ASSIGNABLE:\n-                            AssignableCond assignableCond = new AssignableCond();\n-                            assignableCond.setRealmFullPath(REALM.get());\n-                            leaf = SearchCond.getLeaf(assignableCond);\n-                            break;\n-\n                         case MEMBER:\n                             MemberCond memberCond = new MemberCond();\n                             memberCond.setMember(value);"},{"sha":"eff4efd3054f1cb21199f512635365e5e97d6ccb","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/SearchCondConverterTest.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -27,7 +27,6 @@\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.AuxClassCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n@@ -251,18 +250,6 @@ public void resources() {\n         assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql));\n     }\n \n-    @Test\n-    public void assignable() {\n-        String fiql = new GroupFiqlSearchConditionBuilder().isAssignable().query();\n-        assertEquals(SpecialAttr.ASSIGNABLE + \"==\" + SpecialAttr.NULL, fiql);\n-\n-        AssignableCond assignableCond = new AssignableCond();\n-        assignableCond.setRealmFullPath(\"/even/two\");\n-        SearchCond leaf = SearchCond.getLeaf(assignableCond);\n-\n-        assertEquals(leaf, SearchCondConverter.convert(VISITOR, fiql, \"/even/two\"));\n-    }\n-\n     @Test\n     public void type() {\n         String fiql = new AnyObjectFiqlSearchConditionBuilder(\"PRINTER\").query();"},{"sha":"c301d216dff5d0aa3cdf96937abd6273d04eccf4","filename":"core/persistence-jpa-json/pom.xml","status":"modified","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-jpa-json%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-jpa-json%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fpom.xml?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -158,35 +158,6 @@ under the License.\n   </build>\n \n   <profiles>\n-    <profile>\n-      <id>sqlgen</id>\n-      \n-      <properties>\n-        <skipTests>true</skipTests>\n-      </properties>\n-      \n-      <build>\n-        <defaultGoal>clean verify</defaultGoal>\n-        \n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-maven-plugin</artifactId>\n-            <inherited>true</inherited>\n-            <executions>\n-              <execution>\n-                <id>sqlgen</id>\n-                <phase>process-classes</phase>\n-                <goals>\n-                  <goal>sql</goal>\n-                </goals>\n-              </execution>\n-            </executions>\n-          </plugin>          \n-        </plugins>\n-      </build>\n-    </profile>\n-    \n     <profile>\n       <id>openjpa</id>\n       "},{"sha":"4fceb3609b5d2357fec6bb10cb9efe4f55b077eb","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -42,7 +42,6 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.AuxClassCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n@@ -459,31 +458,6 @@ protected String getQuery(\n         return query.toString();\n     }\n \n-    @Override\n-    protected String getQuery(\n-            final AssignableCond cond,\n-            final List<Object> parameters,\n-            final SearchSupport svs) {\n-\n-        Realm realm = check(cond);\n-\n-        StringBuilder query = new StringBuilder().append('(');\n-        if (cond.isFromGroup()) {\n-            realmDAO.findDescendants(realm).forEach(current -> query.append(\"realm_id=?\").\n-                    append(setParameter(parameters, current.getKey())).append(\" OR \"));\n-            query.setLength(query.length() - 4);\n-        } else {\n-            for (Realm current = realm; current.getParent() != null; current = current.getParent()) {\n-                query.append(\"realm_id=?\").append(setParameter(parameters, current.getKey())).append(\" OR \");\n-            }\n-            query.append(\"realm_id=?\").append(setParameter(parameters, realmDAO.getRoot().getKey()));\n-        }\n-\n-        query.append(')');\n-\n-        return query.toString();\n-    }\n-\n     @Override\n     protected String getQuery(\n             final MemberCond cond,"},{"sha":"41479e11ea2ffedaa12d0e2c8236018c1149ee06","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -45,7 +45,6 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AbstractSearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n@@ -315,15 +314,6 @@ protected String check(final RelationshipCond cond) {\n         return rightAnyObjectKey;\n     }\n \n-    protected Realm check(final AssignableCond cond) {\n-        Realm realm = realmDAO.findByFullPath(cond.getRealmFullPath());\n-        if (realm == null) {\n-            throw new IllegalArgumentException(\"Could not find realm for \" + cond.getRealmFullPath());\n-        }\n-\n-        return realm;\n-    }\n-\n     protected String check(final MemberCond cond) {\n         String memberKey;\n         if (SyncopeConstants.UUID_PATTERN.matcher(cond.getMember()).matches()) {"},{"sha":"4e06850bb8d8e7cf5f91c2954e991a47853e228c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyMatchDAO.java","status":"modified","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -44,7 +44,6 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n@@ -61,7 +60,6 @@\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n@@ -143,12 +141,6 @@ public <T extends Any<?>> boolean matches(final T any, final SearchCond cond) {\n                             orElse(null);\n                 }\n \n-                if (match == null) {\n-                    match = cond.getLeaf(AssignableCond.class).\n-                            map(leaf -> matches(any, leaf, not)).\n-                            orElse(null);\n-                }\n-\n                 if (match == null) {\n                     match = cond.getLeaf(RoleCond.class).\n                             filter(leaf -> any instanceof User).\n@@ -243,15 +235,6 @@ protected boolean matches(\n         return not ? !found : found;\n     }\n \n-    protected boolean matches(final Any<?> any, final AssignableCond cond, final boolean not) {\n-        Realm realm = realmDAO.findByFullPath(cond.getRealmFullPath());\n-        boolean found = Optional.ofNullable(realm)\n-                .filter(realm1 -> (cond.isFromGroup() ? realmDAO.findDescendants(realm1) : realmDAO.\n-                findAncestors(realm1)).\n-                stream().anyMatch(item -> item.equals(any.getRealm()))).isPresent();\n-        return not ? !found : found;\n-    }\n-\n     protected boolean matches(final User user, final RoleCond cond, final boolean not) {\n         boolean found = userDAO.findAllRoles(user).stream().anyMatch(role -> role.getKey().equals(cond.getRole()));\n         return not ? !found : found;"},{"sha":"e3f6b5028685e9b29f7df826394d31f04a361c3d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -44,7 +44,6 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.AuxClassCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n@@ -578,9 +577,6 @@ protected Pair<StringBuilder, Set<String>> getQuery(\n                         filter(leaf -> AnyTypeKind.GROUP == svs.anyTypeKind).\n                         ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n \n-                cond.getLeaf(AssignableCond.class).\n-                        ifPresent(leaf -> query.append(getQuery(leaf, parameters, svs)));\n-\n                 cond.getLeaf(RoleCond.class).\n                         filter(leaf -> AnyTypeKind.USER == svs.anyTypeKind).\n                         ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n@@ -897,31 +893,6 @@ protected String getQuery(\n         return query.toString();\n     }\n \n-    protected String getQuery(\n-            final AssignableCond cond,\n-            final List<Object> parameters,\n-            final SearchSupport svs) {\n-\n-        Realm realm = check(cond);\n-\n-        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n-                append(svs.field().name).append(\" WHERE (\");\n-        if (cond.isFromGroup()) {\n-            realmDAO.findDescendants(realm).forEach(current -> {\n-                query.append(\"realm_id=?\").append(setParameter(parameters, current.getKey())).append(\" OR \");\n-            });\n-            query.setLength(query.length() - 4);\n-        } else {\n-            for (Realm current = realm; current.getParent() != null; current = current.getParent()) {\n-                query.append(\"realm_id=?\").append(setParameter(parameters, current.getKey())).append(\" OR \");\n-            }\n-            query.append(\"realm_id=?\").append(setParameter(parameters, realmDAO.getRoot().getKey()));\n-        }\n-        query.append(')');\n-\n-        return query.toString();\n-    }\n-\n     protected String getQuery(\n             final MemberCond cond,\n             final boolean not,"},{"sha":"adb6a767450ade7aea4c5d3a9205c202139faf6e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":6,"deletions":17,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -42,7 +42,6 @@\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -279,14 +278,8 @@ public List<String> findAllKeys(final int page, final int itemsPerPage) {\n         return findAllKeys(JPAGroup.TABLE, page, itemsPerPage);\n     }\n \n-    protected SearchCond buildDynMembershipCond(final String baseCondFIQL, final Realm groupRealm) {\n-        AssignableCond cond = new AssignableCond();\n-        cond.setRealmFullPath(groupRealm.getFullPath());\n-        cond.setFromGroup(true);\n-\n-        return SearchCond.getAnd(\n-                SearchCond.getLeaf(cond),\n-                SearchCondConverter.convert(searchCondVisitor, baseCondFIQL));\n+    protected SearchCond buildDynMembershipCond(final String baseCondFIQL) {\n+        return SearchCondConverter.convert(searchCondVisitor, baseCondFIQL);\n     }\n \n     @Override\n@@ -296,7 +289,7 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n         // refresh dynamic memberships\n         clearUDynMembers(merged);\n         if (merged.getUDynMembership() != null) {\n-            SearchCond cond = buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm());\n+            SearchCond cond = buildDynMembershipCond(merged.getUDynMembership().getFIQLCond());\n             int count = anySearchDAO.count(\n                     merged.getRealm(), true, Set.of(merged.getRealm().getFullPath()), cond, AnyTypeKind.USER);\n             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n@@ -323,7 +316,7 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n         }\n         clearADynMembers(merged);\n         merged.getADynMemberships().forEach(memb -> {\n-            SearchCond cond = buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm());\n+            SearchCond cond = buildDynMembershipCond(memb.getFIQLCond());\n             int count = anySearchDAO.count(\n                     merged.getRealm(), true, Set.of(merged.getRealm().getFullPath()), cond, AnyTypeKind.ANY_OBJECT);\n             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n@@ -495,9 +488,7 @@ public Pair<Set<String>, Set<String>> refreshDynMemberships(final AnyObject anyO\n         Set<String> before = new HashSet<>();\n         Set<String> after = new HashSet<>();\n         findWithADynMemberships(anyObject.getType()).forEach(memb -> {\n-            boolean matches = anyMatchDAO.matches(\n-                    anyObject,\n-                    buildDynMembershipCond(memb.getFIQLCond(), memb.getGroup().getRealm()));\n+            boolean matches = anyMatchDAO.matches(anyObject, buildDynMembershipCond(memb.getFIQLCond()));\n             if (matches) {\n                 after.add(memb.getGroup().getKey());\n             }\n@@ -596,9 +587,7 @@ public Pair<Set<String>, Set<String>> refreshDynMemberships(final User user) {\n         Set<String> before = new HashSet<>();\n         Set<String> after = new HashSet<>();\n         findWithUDynMemberships().forEach(memb -> {\n-            boolean matches = anyMatchDAO.matches(\n-                    user,\n-                    buildDynMembershipCond(memb.getFIQLCond(), memb.getGroup().getRealm()));\n+            boolean matches = anyMatchDAO.matches(user, buildDynMembershipCond(memb.getFIQLCond()));\n             if (matches) {\n                 after.add(memb.getGroup().getKey());\n             }"},{"sha":"1fff8d5176471c406ab26af5325455437ee38b41","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":0,"deletions":22,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -45,7 +45,6 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.AuxClassCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n@@ -619,27 +618,6 @@ public void groupOrderBy() {\n                 groups.size());\n     }\n \n-    @Test\n-    public void assignable() {\n-        AssignableCond assignableCond = new AssignableCond();\n-        assignableCond.setRealmFullPath(\"/even/two\");\n-        SearchCond searchCondition = SearchCond.getLeaf(assignableCond);\n-        assertTrue(searchCondition.isValid());\n-\n-        List<Group> groups = searchDAO.search(searchCondition, AnyTypeKind.GROUP);\n-        assertTrue(groups.stream().anyMatch(group -> \"additional\".equals(group.getName())));\n-        assertFalse(groups.stream().anyMatch(group -> \"fake\".equals(group.getName())));\n-\n-        assignableCond = new AssignableCond();\n-        assignableCond.setRealmFullPath(\"/odd\");\n-        searchCondition = SearchCond.getLeaf(assignableCond);\n-        assertTrue(searchCondition.isValid());\n-\n-        List<AnyObject> anyObjects = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n-        assertFalse(anyObjects.stream().\n-                anyMatch(anyObject -> \"9e1d130c-d6a3-48b1-98b3-182477ed0688\".equals(anyObject.getKey())));\n-    }\n-\n     @Test\n     public void member() {\n         MemberCond memberCond = new MemberCond();"},{"sha":"b237bf43a9e0ff3855a456227cf59486493861f2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -658,8 +658,8 @@ protected static void fillTO(\n     }\n \n     protected static RelationshipTO getRelationshipTO(final String relationshipType, final AnyObject otherEnd) {\n-        return new RelationshipTO.Builder().\n-                type(relationshipType).otherEnd(otherEnd.getType().getKey(), otherEnd.getKey(), otherEnd.getName()).\n+        return new RelationshipTO.Builder(relationshipType).\n+                otherEnd(otherEnd.getType().getKey(), otherEnd.getKey(), otherEnd.getName()).\n                 build();\n     }\n "},{"sha":"306a8d08094047e7dd858eaf46d01d44c9a25d2a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":7,"deletions":36,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -236,10 +236,11 @@ public void create(final AnyObject anyObject, final AnyObjectCR anyObjectCR) {\n \n                     SyncopeClientException assigned =\n                             SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n-                    assigned.getElements().add(otherEnd.getType().getKey() + \" \" + otherEnd.getName()\n-                            + \" in relationship \" + relationshipTO.getType());\n+                    assigned.getElements().add(\"AnyObject was already in relationship \"\n+                            + relationshipTO.getType() + \" with \"\n+                            + otherEnd.getType().getKey() + \" \" + otherEnd.getName());\n                     scce.addException(assigned);\n-                } else if (anyObject.getRealm().getFullPath().startsWith(otherEnd.getRealm().getFullPath())) {\n+                } else {\n                     relationships.add(Pair.of(otherEnd.getKey(), relationshipTO.getType()));\n \n                     RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n@@ -253,14 +254,6 @@ public void create(final AnyObject anyObject, final AnyObjectCR anyObjectCR) {\n \n                         anyObject.add(relationship);\n                     }\n-                } else {\n-                    LOG.error(\"{} cannot be related to {}\", otherEnd, anyObject);\n-\n-                    SyncopeClientException unrelatable =\n-                            SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n-                    unrelatable.getElements().add(otherEnd.getType().getKey() + \" \" + otherEnd.getName()\n-                            + \" cannot be related\");\n-                    scce.addException(unrelatable);\n                 }\n             }\n         });\n@@ -281,7 +274,7 @@ public void create(final AnyObject anyObject, final AnyObjectCR anyObjectCR) {\n                         SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n                 assigned.getElements().add(\"Group \" + group.getName() + \" was already assigned\");\n                 scce.addException(assigned);\n-            } else if (anyObject.getRealm().getFullPath().startsWith(group.getRealm().getFullPath())) {\n+            } else {\n                 groups.add(group.getKey());\n \n                 AMembership membership = entityFactory.newEntity(AMembership.class);\n@@ -292,13 +285,6 @@ public void create(final AnyObject anyObject, final AnyObjectCR anyObjectCR) {\n \n                 // membership attributes\n                 fill(anyObject, membership, membershipTO, anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT), scce);\n-            } else {\n-                LOG.error(\"{} cannot be assigned to {}\", group, anyObject);\n-\n-                SyncopeClientException unassignable =\n-                        SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n-                unassignable.getElements().add(\"Group \" + group.getName() + \" cannot be assigned\");\n-                scce.addException(unassignable);\n             }\n         });\n \n@@ -378,7 +364,7 @@ public PropagationByResource<String> update(final AnyObject toBeUpdated, final A\n                                     + patch.getRelationshipTO().getType() + \" with \"\n                                     + otherEnd.getType().getKey() + \" \" + otherEnd.getName());\n                             scce.addException(assigned);\n-                        } else if (anyObject.getRealm().getFullPath().startsWith(otherEnd.getRealm().getFullPath())) {\n+                        } else {\n                             relationships.add(Pair.of(otherEnd.getKey(), patch.getRelationshipTO().getType()));\n \n                             ARelationship newRelationship = entityFactory.newEntity(ARelationship.class);\n@@ -387,14 +373,6 @@ public PropagationByResource<String> update(final AnyObject toBeUpdated, final A\n                             newRelationship.setLeftEnd(anyObject);\n \n                             anyObject.add(newRelationship);\n-                        } else {\n-                            LOG.error(\"{} cannot be related to {}\", otherEnd, anyObject);\n-\n-                            SyncopeClientException unrelatable =\n-                                    SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n-                            unrelatable.getElements().add(otherEnd.getType().getKey() + \" \" + otherEnd.getName()\n-                                    + \" cannot be related\");\n-                            scce.addException(unrelatable);\n                         }\n                     }\n                 }\n@@ -433,7 +411,7 @@ public PropagationByResource<String> update(final AnyObject toBeUpdated, final A\n                             SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n                     assigned.getElements().add(\"Multiple patches for group \" + group.getName() + \" were found\");\n                     scce.addException(assigned);\n-                } else if (anyObject.getRealm().getFullPath().startsWith(group.getRealm().getFullPath())) {\n+                } else {\n                     groups.add(group.getKey());\n \n                     AMembership newMembership = entityFactory.newEntity(AMembership.class);\n@@ -475,13 +453,6 @@ public PropagationByResource<String> update(final AnyObject toBeUpdated, final A\n                     }\n \n                     propByRes.addAll(ResourceOperation.UPDATE, groupDAO.findAllResourceKeys(group.getKey()));\n-                } else {\n-                    LOG.error(\"{} cannot be assigned to {}\", group, anyObject);\n-\n-                    SyncopeClientException unassignable =\n-                            SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n-                    unassignable.getElements().add(\"Group \" + group.getName() + \" cannot be assigned\");\n-                    scce.addException(unassignable);\n                 }\n             }\n         });"},{"sha":"4062101b733a6f4942d6f13941d1f73e0a6fc90d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":2,"deletions":17,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -404,7 +404,7 @@ public void create(final User user, final UserCR userCR) {\n                         SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n                 assigned.getElements().add(\"Group \" + group.getName() + \" was already assigned\");\n                 scce.addException(assigned);\n-            } else if (user.getRealm().getFullPath().startsWith(group.getRealm().getFullPath())) {\n+            } else {\n                 groups.add(group.getKey());\n \n                 UMembership membership = entityFactory.newEntity(UMembership.class);\n@@ -415,13 +415,6 @@ public void create(final User user, final UserCR userCR) {\n \n                 // membership attributes\n                 fill(user, membership, membershipTO, anyUtilsFactory.getInstance(AnyTypeKind.USER), scce);\n-            } else {\n-                LOG.error(\"{} cannot be assigned to {}\", group, user);\n-\n-                SyncopeClientException unassignable =\n-                        SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n-                unassignable.getElements().add(\"Group \" + group.getName() + \" cannot be assigned\");\n-                scce.addException(unassignable);\n             }\n         });\n \n@@ -629,7 +622,7 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n                             SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n                     assigned.getElements().add(\"Multiple patches for group \" + group.getName() + \" were found\");\n                     scce.addException(assigned);\n-                } else if (user.getRealm().getFullPath().startsWith(group.getRealm().getFullPath())) {\n+                } else {\n                     groups.add(group.getKey());\n \n                     UMembership newMembership = entityFactory.newEntity(UMembership.class);\n@@ -681,13 +674,6 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n                                 filter(this::isPasswordMapped).\n                                 forEach(resource -> userUR.getPassword().getResources().add(resource.getKey()));\n                     }\n-                } else {\n-                    LOG.error(\"{} cannot be assigned to {}\", group, user);\n-\n-                    SyncopeClientException unassignable =\n-                            SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n-                    unassignable.getElements().add(\"Group \" + group.getName() + \" cannot be assigned\");\n-                    scce.addException(unassignable);\n                 }\n             }\n         });\n@@ -714,7 +700,6 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n                     plainAttrValueDAO.deleteAll(attr, anyUtilsFactory.getLinkedAccountInstance());\n                     plainAttrDAO.delete(attr);\n                 });\n-\n             });\n             if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n                 linkedAccount("},{"sha":"a04f9807102c6e42be12b4b84a4bca87f0d6b4d9","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -57,7 +57,6 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.AuxClassCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n@@ -358,12 +357,6 @@ protected Query getQuery(final SearchCond cond, final AnyTypeKind kind) {\n                             orElse(null);\n                 }\n \n-                if (query == null) {\n-                    query = cond.getLeaf(AssignableCond.class).\n-                            map(this::getQuery).\n-                            orElse(null);\n-                }\n-\n                 if (query == null) {\n                     query = cond.getLeaf(RoleCond.class).\n                             filter(leaf -> AnyTypeKind.USER == kind).\n@@ -473,29 +466,6 @@ protected Query getQuery(final MembershipCond cond) {\n         return new Query.Builder().disMax(QueryBuilders.disMax().queries(membershipQueries).build()).build();\n     }\n \n-    protected Query getQuery(final AssignableCond cond) {\n-        Realm realm = check(cond);\n-\n-        List<Query> queries = new ArrayList<>();\n-        if (cond.isFromGroup()) {\n-            realmDAO.findDescendants(realm).forEach(\n-                    current -> queries.add(new Query.Builder().term(QueryBuilders.term().\n-                            field(\"realm\").value(FieldValue.of(current.getFullPath())).build()).\n-                            build()));\n-        } else {\n-            for (Realm current = realm; current.getParent() != null; current = current.getParent()) {\n-                queries.add(new Query.Builder().term(QueryBuilders.term().\n-                        field(\"realm\").value(FieldValue.of(current.getFullPath())).build()).\n-                        build());\n-            }\n-            queries.add(new Query.Builder().term(QueryBuilders.term().\n-                    field(\"realm\").value(FieldValue.of(realmDAO.getRoot().getFullPath())).build()).\n-                    build());\n-        }\n-\n-        return new Query.Builder().disMax(QueryBuilders.disMax().queries(queries).build()).build();\n-    }\n-\n     protected Query getQuery(final RoleCond cond) {\n         return new Query.Builder().term(QueryBuilders.term().\n                 field(\"roles\").value(FieldValue.of(cond.getRole())).build())."},{"sha":"cfd3e40948877bbf25aa82323a57803242b2923a","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -53,9 +53,8 @@ protected void doExecute(final DelegateExecution execution) {\n \n             UserUR userUR = new UserUR();\n             userUR.setKey(user.getKey());\n-            userUR.getRelationships().add(new RelationshipUR.Builder(new RelationshipTO.Builder().\n-                    otherEnd(\"PRINTER\", printer).type(\"neighborhood\").build()).\n-                    build());\n+            userUR.getRelationships().add(new RelationshipUR.Builder(new RelationshipTO.Builder(\"neighborhood\").\n+                    otherEnd(\"PRINTER\", printer).build()).build());\n \n             Pair<PropagationByResource<String>, PropagationByResource<Pair<String, String>>> propInfo =\n                     dataBinder.update(user, userUR);"},{"sha":"f1ca61ce8cd7243449238cf5eb40d2319c79890c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyObjectITCase.java","status":"modified","additions":27,"deletions":23,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -33,10 +33,10 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.RelationshipUR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ConnObject;\n-import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -75,27 +75,6 @@ public void create() {\n                 connObjectTO.getAttr(\"LOCATION\").get().getValues());\n     }\n \n-    @Test\n-    public void createInvalidMembership() {\n-        // 1. create anyObject in realm /odd and attempt to assign group 15, from realm /even => exception\n-        AnyObjectCR anyObjectCR = getSample(\"createInvalidMembership\");\n-        anyObjectCR.setRealm(\"/odd\");\n-        anyObjectCR.getMemberships().add(new MembershipTO.Builder(\"034740a9-fa10-453b-af37-dc7897e98fb1\").build());\n-\n-        try {\n-            createAnyObject(anyObjectCR);\n-            fail(\"This should not happen\");\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidMembership, e.getType());\n-        }\n-\n-        // 2. change anyObject's realm to /even/two, now it works\n-        anyObjectCR.setRealm(\"/even/two\");\n-\n-        AnyObjectTO anyObjectTO = createAnyObject(anyObjectCR).getEntity();\n-        assertNotNull(anyObjectTO.getMembership(\"034740a9-fa10-453b-af37-dc7897e98fb1\"));\n-    }\n-\n     @Test\n     public void delete() {\n         try {\n@@ -199,10 +178,35 @@ public void deleteAttr() {\n         }\n     }\n \n+    @Test\n+    public void unlimitedRelationships() {\n+        AnyObjectCR anyObjectCR = getSample(\"unlimited1\");\n+        anyObjectCR.setRealm(\"/even/two\");\n+        anyObjectCR.getResources().clear();\n+        AnyObjectTO left = createAnyObject(anyObjectCR).getEntity();\n+\n+        anyObjectCR = getSample(\"unlimited2\");\n+        anyObjectCR.setRealm(SyncopeConstants.ROOT_REALM);\n+        anyObjectCR.getResources().clear();\n+        anyObjectCR.getRelationships().add(new RelationshipTO.Builder(\"neighborhood\").\n+                otherEnd(left.getType(), left.getKey()).build());\n+        AnyObjectTO right = createAnyObject(anyObjectCR).getEntity();\n+\n+        assertEquals(1, right.getRelationships().size());\n+        assertEquals(left.getKey(), right.getRelationships().get(0).getOtherEndKey());\n+\n+        AnyObjectUR anyObjectUR = new AnyObjectUR.Builder(left.getKey()).\n+                relationship(new RelationshipUR.Builder(new RelationshipTO.Builder(\"neighborhood\").\n+                        otherEnd(right.getType(), right.getKey()).build()).build()).build();\n+        left = updateAnyObject(anyObjectUR).getEntity();\n+        assertEquals(2, left.getRelationships().size());\n+        assertTrue(left.getRelationships().stream().anyMatch(r -> right.getKey().equals(r.getOtherEndKey())));\n+    }\n+\n     @Test\n     public void issueSYNCOPE756() {\n         AnyObjectCR anyObjectCR = getSample(\"issueSYNCOPE756\");\n-        anyObjectCR.getRelationships().add(new RelationshipTO.Builder().otherEnd(\n+        anyObjectCR.getRelationships().add(new RelationshipTO.Builder(\"neighborhood\").otherEnd(\n                 AnyTypeKind.USER.name(), \"1417acbe-cbf6-4277-9372-e75e04f97000\").build());\n \n         try {"},{"sha":"d2e6760f05e5edf2d6fa7cce8a73e6f293307ffc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":27,"deletions":21,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -32,6 +32,7 @@\n import java.security.AccessControlException;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n@@ -691,17 +692,12 @@ public void uDynMembership() {\n         groupCR.setUDynMembershipCond(\"cool==true\");\n         GroupTO group = createGroup(groupCR).getEntity();\n         assertNotNull(group);\n-        final String groupKey = group.getKey();\n \n-        List<MembershipTO> memberships = USER_SERVICE.read(\n-                \"c9b2dec2-00a7-4855-97c0-d854842b4b24\").getDynMemberships();\n-        assertTrue(memberships.stream().anyMatch(m -> m.getGroupKey().equals(groupKey)));\n+        List<MembershipTO> memberships = USER_SERVICE.read(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\").getDynMemberships();\n+        assertTrue(memberships.stream().anyMatch(m -> m.getGroupKey().equals(group.getKey())));\n         assertEquals(1, GROUP_SERVICE.read(group.getKey()).getDynamicUserMembershipCount());\n \n-        GroupUR groupUR = new GroupUR();\n-        groupUR.setKey(group.getKey());\n-        groupUR.setUDynMembershipCond(\"cool==false\");\n-        GROUP_SERVICE.update(groupUR);\n+        GROUP_SERVICE.update(new GroupUR.Builder(group.getKey()).udynMembershipCond(\"cool==false\").build());\n \n         assertTrue(USER_SERVICE.read(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\").getDynMemberships().isEmpty());\n         assertEquals(0, GROUP_SERVICE.read(group.getKey()).getDynamicUserMembershipCount());\n@@ -1000,26 +996,40 @@ public void provisionMembers() throws InterruptedException {\n         }\n     }\n \n+    @Test\n+    public void unlimitedMembership() {\n+        GroupCR groupCR = new GroupCR();\n+        groupCR.setName(\"unlimited\" + getUUIDString());\n+        groupCR.setRealm(\"/even/two\");\n+        GroupTO groupTO = createGroup(groupCR).getEntity();\n+\n+        UserCR userCR = UserITCase.getUniqueSample(\"unlimited@syncope.apache.org\");\n+        userCR.setRealm(SyncopeConstants.ROOT_REALM);\n+        userCR.getMemberships().add(new MembershipTO.Builder(groupTO.getKey()).build());\n+        UserTO userTO = createUser(userCR).getEntity();\n+\n+        assertFalse(userTO.getMemberships().isEmpty());\n+        assertEquals(groupTO.getKey(), userTO.getMemberships().get(0).getGroupKey());\n+    }\n+\n     @Test\n     public void issue178() {\n         GroupCR groupCR = new GroupCR();\n-        String groupName = \"torename\" + getUUIDString();\n-        groupCR.setName(groupName);\n-        groupCR.setRealm(\"/\");\n+        groupCR.setName(\"torename\" + getUUIDString());\n+        groupCR.setRealm(SyncopeConstants.ROOT_REALM);\n \n         GroupTO actual = createGroup(groupCR).getEntity();\n \n         assertNotNull(actual);\n-        assertEquals(groupName, actual.getName());\n+        assertEquals(groupCR.getName(), actual.getName());\n \n         GroupUR groupUR = new GroupUR();\n         groupUR.setKey(actual.getKey());\n-        String renamedGroup = \"renamed\" + getUUIDString();\n-        groupUR.setName(new StringReplacePatchItem.Builder().value(renamedGroup).build());\n+        groupUR.setName(new StringReplacePatchItem.Builder().value(\"renamed\" + getUUIDString()).build());\n \n         actual = updateGroup(groupUR).getEntity();\n         assertNotNull(actual);\n-        assertEquals(renamedGroup, actual.getName());\n+        assertEquals(groupUR.getName().getValue(), actual.getName());\n     }\n \n     @Test\n@@ -1116,9 +1126,7 @@ public void issueSYNCOPE632() {\n             assertEquals(1, entries);\n         } finally {\n             SCHEMA_SERVICE.update(SchemaType.DERIVED, orig);\n-            if (groupTO != null) {\n-                GROUP_SERVICE.delete(groupTO.getKey());\n-            }\n+            Optional.ofNullable(groupTO).ifPresent(g -> GROUP_SERVICE.delete(g.getKey()));\n             RESOURCE_SERVICE.delete(\"new-ldap\");\n         }\n     }\n@@ -1214,9 +1222,7 @@ public void issueSYNCOPE1467() {\n             assertNotNull(connObjectTO);\n             assertEquals(\"fixedSYNCOPE1467\", connObjectTO.getAttr(\"cn\").get().getValues().get(0));\n         } finally {\n-            if (groupTO.getKey() != null) {\n-                GROUP_SERVICE.delete(groupTO.getKey());\n-            }\n+            Optional.ofNullable(groupTO).ifPresent(g -> GROUP_SERVICE.delete(g.getKey()));\n         }\n     }\n "},{"sha":"c6a02e4013b03a194a99a49f91970cbd30db9f65","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -897,8 +897,8 @@ public void issueSYNCOPE1567() {\n \n             // 1. create user with relationship and the new resource assigned\n             UserCR userCR = UserITCase.getUniqueSample(\"syncope1567@syncope.apache.org\");\n-            userCR.getRelationships().add(new RelationshipTO.Builder().\n-                    type(\"neighborhood\").otherEnd(PRINTER, \"fc6dbc3a-6c07-4965-8781-921e7401a4a5\").build());\n+            userCR.getRelationships().add(new RelationshipTO.Builder(\"neighborhood\").\n+                    otherEnd(PRINTER, \"fc6dbc3a-6c07-4965-8781-921e7401a4a5\").build());\n             userCR.getResources().clear();\n             userCR.getResources().add(ldap.getKey());\n "},{"sha":"b894524c619812a6d33c63f799e47646cc6dcc3c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -459,27 +459,6 @@ public void searchBySecurityAnswer() {\n         }\n     }\n \n-    @Test\n-    public void assignable() {\n-        PagedResult<GroupTO> groups = GROUP_SERVICE.search(new AnyQuery.Builder().realm(\"/even/two\").page(1).size(1000).\n-                fiql(SyncopeClient.getGroupSearchConditionBuilder().isAssignable().\n-                        and(\"name\").equalTo(\"*\").query()).\n-                build());\n-        assertNotNull(groups);\n-        assertTrue(groups.getResult().stream().\n-                anyMatch(group -> \"034740a9-fa10-453b-af37-dc7897e98fb1\".equals(group.getKey())));\n-        assertFalse(groups.getResult().stream().\n-                anyMatch(group -> \"e7ff94e8-19c9-4f0a-b8b7-28327edbf6ed\".equals(group.getKey())));\n-\n-        PagedResult<AnyObjectTO> anyObjects = ANY_OBJECT_SERVICE.search(new AnyQuery.Builder().realm(\"/odd\").\n-                fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(PRINTER).isAssignable().\n-                        and(\"name\").equalTo(\"*\").query()).\n-                build());\n-        assertNotNull(anyObjects);\n-        assertFalse(anyObjects.getResult().stream().\n-                anyMatch(anyObject -> \"9e1d130c-d6a3-48b1-98b3-182477ed0688\".equals(anyObject.getKey())));\n-    }\n-\n     @Test\n     public void member() {\n         PagedResult<GroupTO> groups = GROUP_SERVICE.search(new AnyQuery.Builder().realm(\"/\")."},{"sha":"15f8eb449c2fb2ebc40ea4c3864da33005eb835f","filename":"src/main/asciidoc/reference-guide/concepts/realms.adoc","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Frealms.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Frealms.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Frealms.adoc?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -34,12 +34,7 @@ If Users, Groups and Any Objects are members of a realm then they are also membe\n realm contains everything, and other realms can be seen as containers that split up the total number of entities into\n smaller pools.\n \n-This has consequences on <<memberships-relationships,memberships and relationships>>:\n-\n-* A User or an Any Object can be members of Groups in the same realm or in one of the parent realms.\n-* A User or an Any object can be in a relation with Any Objects in the same realm or in one of parent realms.\n-\n-Moreover, this partition allows fine-grained control over policy enforcement and, alongside with\n+This partition allows fine-grained control over policy enforcement and, alongside with\n <<entitlements,entitlements>> and <<roles,roles>>, helps to implement\n <<delegated-administration,delegated administration>>.\n "},{"sha":"0a8629f5e172f09bec4df71572ba26dcbda4a475","filename":"src/main/asciidoc/reference-guide/usage/clientlibrary.adoc","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57499d370cbcda40eedc58fa597d251f0d5efc81/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fclientlibrary.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57499d370cbcda40eedc58fa597d251f0d5efc81/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fclientlibrary.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fclientlibrary.adoc?ref=57499d370cbcda40eedc58fa597d251f0d5efc81","patch":"@@ -158,8 +158,8 @@ GroupService groupService = client.getService(GroupService.class);\n \n PagedResult<GroupTO> matchingGroups = groupService.search(\n     new AnyQuery.Builder().realm(\"/even/two\").page(3).size(150).\n-    fiql(SyncopeClient.getGroupSearchConditionBuilder().isAssignable().\n-        and(\"name\").equalTo(\"palo*\").query()).\n+    fiql(SyncopeClient.getGroupSearchConditionBuilder().\n+        is(\"name\").equalTo(\"palo*\").query()).\n     build()); // <6>\n ----\n <1> get the total number of users available in the given deployment (and <<domains,domain>>)\n@@ -168,7 +168,7 @@ PagedResult<GroupTO> matchingGroups = groupService.search(\n given deployment\n <4> get users in the root realm with <<roles,role>> `Other` assigned\n <5> get all any objects in the root realm with <<anytype,type>> `PRINTER`\n-<6> get all groups that can be assigned to users or any objects in the `/even/two` realm - third page of the result,\n+<6> get all groups having name starting with prefix 'palo' - third page of the result,\n where each page contains 150 items\n ====\n "}]}