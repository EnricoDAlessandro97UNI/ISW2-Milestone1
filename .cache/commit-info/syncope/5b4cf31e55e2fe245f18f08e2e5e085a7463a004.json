{"sha":"5b4cf31e55e2fe245f18f08e2e5e085a7463a004","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjViNGNmMzFlNTVlMmZlMjQ1ZjE4ZjA4ZTJlNWUwODVhNzQ2M2EwMDQ=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-07-18T09:06:35Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-07-18T09:06:35Z"},"message":"[SYNCOPE-888] improves mapped internal attribute evaluation","tree":{"sha":"2ae85ec6e8e2894a5d5111e6b34961c6a19b580f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2ae85ec6e8e2894a5d5111e6b34961c6a19b580f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5b4cf31e55e2fe245f18f08e2e5e085a7463a004","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5b4cf31e55e2fe245f18f08e2e5e085a7463a004","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5b4cf31e55e2fe245f18f08e2e5e085a7463a004","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5b4cf31e55e2fe245f18f08e2e5e085a7463a004/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"0016c6ac22d2c9d1604bf9325239dd1587179a51","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0016c6ac22d2c9d1604bf9325239dd1587179a51","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0016c6ac22d2c9d1604bf9325239dd1587179a51"}],"stats":{"total":190,"additions":119,"deletions":71},"files":[{"sha":"53d121c04212c989ac44500a6cb75f249276aa38","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":79,"deletions":70,"changes":149,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b4cf31e55e2fe245f18f08e2e5e085a7463a004/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b4cf31e55e2fe245f18f08e2e5e085a7463a004/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=5b4cf31e55e2fe245f18f08e2e5e085a7463a004","patch":"@@ -299,8 +299,8 @@ private void populateMapping(\n \n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n         SyncopeClientException invalidMapping = SyncopeClientException.build(ClientExceptionType.InvalidMapping);\n-        SyncopeClientException requiredValuesMissing =\n-                SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n+        SyncopeClientException requiredValuesMissing = SyncopeClientException.build(\n+                ClientExceptionType.RequiredValuesMissing);\n \n         for (MappingItemTO itemTO : mappingTO.getItems()) {\n             if (itemTO == null) {\n@@ -314,87 +314,96 @@ private void populateMapping(\n                         itemTO.getIntAttrName(),\n                         mapping.getProvision().getAnyType().getKind());\n \n-                boolean allowed = true;\n-                if (intAttrName.getSchemaType() != null\n-                        && intAttrName.getEnclosingGroup() == null && intAttrName.getRelatedAnyObject() == null) {\n-\n-                    switch (intAttrName.getSchemaType()) {\n-                        case PLAIN:\n-                            allowed = allowedSchemas.getPlainSchemas().contains(intAttrName.getSchemaName());\n-                            break;\n-\n-                        case DERIVED:\n-                            allowed = allowedSchemas.getDerSchemas().contains(intAttrName.getSchemaName());\n-                            break;\n-\n-                        case VIRTUAL:\n-                            allowed = allowedSchemas.getVirSchemas().contains(intAttrName.getSchemaName());\n-                            break;\n-\n-                        default:\n+                if (intAttrName.getSchemaType() == null && intAttrName.getField() == null) {\n+                    LOG.error(\"'{}' not existing\", itemTO.getIntAttrName());\n+                    invalidMapping.getElements().add(\"'\" + itemTO.getIntAttrName() + \"' not existing\");\n+                } else {\n+                    boolean allowed = true;\n+                    if (intAttrName.getSchemaType() != null\n+                            && intAttrName.getEnclosingGroup() == null\n+                            && intAttrName.getRelatedAnyObject() == null) {\n+                        switch (intAttrName.getSchemaType()) {\n+                            case PLAIN:\n+                                allowed = allowedSchemas.getPlainSchemas().contains(intAttrName.getSchemaName());\n+                                break;\n+\n+                            case DERIVED:\n+                                allowed = allowedSchemas.getDerSchemas().contains(intAttrName.getSchemaName());\n+                                break;\n+\n+                            case VIRTUAL:\n+                                allowed = allowedSchemas.getVirSchemas().contains(intAttrName.getSchemaName());\n+                                break;\n+\n+                            default:\n+                        }\n                     }\n-                }\n \n-                if (allowed) {\n-                    // no mandatory condition implies mandatory condition false\n-                    if (!JexlUtils.isExpressionValid(itemTO.getMandatoryCondition() == null\n-                            ? \"false\" : itemTO.getMandatoryCondition())) {\n+                    if (allowed) {\n+                        // no mandatory condition implies mandatory condition false\n+                        if (!JexlUtils.isExpressionValid(itemTO.getMandatoryCondition() == null\n+                                ? \"false\" : itemTO.getMandatoryCondition())) {\n \n-                        SyncopeClientException invalidMandatoryCondition =\n-                                SyncopeClientException.build(ClientExceptionType.InvalidValues);\n-                        invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n-                        scce.addException(invalidMandatoryCondition);\n-                    }\n-\n-                    MappingItem item = SerializationUtils.clone(prototype);\n-                    BeanUtils.copyProperties(itemTO, item, MAPPINGITEM_IGNORE_PROPERTIES);\n-                    item.setMapping(mapping);\n-                    if (item.isConnObjectKey()) {\n-                        if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n-                            invalidMapping.getElements().add(\"Virtual attributes cannot be set as ConnObjectKey\");\n+                            SyncopeClientException invalidMandatoryCondition = SyncopeClientException.build(\n+                                    ClientExceptionType.InvalidValues);\n+                            invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n+                            scce.addException(invalidMandatoryCondition);\n                         }\n-                        if (\"password\".equals(intAttrName.getField())) {\n-                            invalidMapping.getElements().add(\"Password attributes cannot be set as ConnObjectKey\");\n-                        }\n-\n-                        mapping.setConnObjectKeyItem(item);\n-                    } else {\n-                        mapping.add(item);\n-                    }\n \n-                    if (intAttrName.getEnclosingGroup() != null\n-                            && item.getPurpose() != MappingPurpose.PROPAGATION) {\n+                        MappingItem item = SerializationUtils.clone(prototype);\n+                        BeanUtils.copyProperties(itemTO, item, MAPPINGITEM_IGNORE_PROPERTIES);\n+                        item.setMapping(mapping);\n+                        if (item.isConnObjectKey()) {\n+                            if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n+                                invalidMapping.getElements().\n+                                        add(\"Virtual attributes cannot be set as ConnObjectKey\");\n+                            }\n+                            if (\"password\".equals(intAttrName.getField())) {\n+                                invalidMapping.getElements().add(\n+                                        \"Password attributes cannot be set as ConnObjectKey\");\n+                            }\n+\n+                            mapping.setConnObjectKeyItem(item);\n+                        } else {\n+                            mapping.add(item);\n+                        }\n \n-                        invalidMapping.getElements().add(\n-                                \"Only \" + MappingPurpose.PROPAGATION.name() + \" allowed when referring to groups\");\n-                    }\n-                    if (intAttrName.getRelatedAnyObject() != null\n-                            && item.getPurpose() != MappingPurpose.PROPAGATION) {\n+                        if (intAttrName.getEnclosingGroup() != null\n+                                && item.getPurpose() != MappingPurpose.PROPAGATION) {\n \n-                        invalidMapping.getElements().add(\n-                                \"Only \" + MappingPurpose.PROPAGATION.name() + \" allowed when referring to any objects\");\n-                    }\n-                    if (intAttrName.getSchemaType() == SchemaType.DERIVED\n-                            && item.getPurpose() != MappingPurpose.PROPAGATION) {\n+                            invalidMapping.getElements().add(\n+                                    \"Only \" + MappingPurpose.PROPAGATION.name()\n+                                    + \" allowed when referring to groups\");\n+                        }\n+                        if (intAttrName.getRelatedAnyObject() != null\n+                                && item.getPurpose() != MappingPurpose.PROPAGATION) {\n \n-                        invalidMapping.getElements().add(\n-                                \"Only \" + MappingPurpose.PROPAGATION.name() + \" allowed for derived\");\n-                    }\n-                    if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n-                        if (item.getPurpose() != MappingPurpose.PROPAGATION) {\n                             invalidMapping.getElements().add(\n-                                    \"Only \" + MappingPurpose.PROPAGATION.name() + \" allowed for virtual\");\n+                                    \"Only \" + MappingPurpose.PROPAGATION.name()\n+                                    + \" allowed when referring to any objects\");\n                         }\n+                        if (intAttrName.getSchemaType() == SchemaType.DERIVED\n+                                && item.getPurpose() != MappingPurpose.PROPAGATION) {\n \n-                        VirSchema schema = virSchemaDAO.find(item.getIntAttrName());\n-                        if (schema != null && schema.getProvision().equals(item.getMapping().getProvision())) {\n                             invalidMapping.getElements().add(\n-                                    \"No need to map virtual schema on linking resource\");\n+                                    \"Only \" + MappingPurpose.PROPAGATION.name() + \" allowed for derived\");\n+                        }\n+                        if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n+                            if (item.getPurpose() != MappingPurpose.PROPAGATION) {\n+                                invalidMapping.getElements().add(\n+                                        \"Only \" + MappingPurpose.PROPAGATION.name() + \" allowed for virtual\");\n+                            }\n+\n+                            VirSchema schema = virSchemaDAO.find(item.getIntAttrName());\n+                            if (schema != null && schema.getProvision().equals(item.getMapping().getProvision())) {\n+                                invalidMapping.getElements().add(\n+                                        \"No need to map virtual schema on linking resource\");\n+                            }\n                         }\n+                    } else {\n+                        LOG.error(\"'{}' not allowed\", itemTO.getIntAttrName());\n+                        invalidMapping.getElements().add(\"'\" + itemTO.getIntAttrName() + \"' not allowed\");\n                     }\n-                } else {\n-                    LOG.error(\"{} not allowed\", itemTO.getIntAttrName());\n-                    invalidMapping.getElements().add(itemTO.getIntAttrName() + \" not allowed\");\n                 }\n             }\n         }\n@@ -476,7 +485,7 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n             orgUnitTO.setSyncToken(orgUnit.getSerializedSyncToken());\n             orgUnitTO.setExtAttrName(orgUnit.getExtAttrName());\n             orgUnitTO.setConnObjectLink(orgUnit.getConnObjectLink());\n-            \n+\n             resourceTO.setOrgUnit(orgUnitTO);\n         }\n "},{"sha":"b0b03eb87e93e9077115ec909287b9c2b421f774","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":40,"deletions":1,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b4cf31e55e2fe245f18f08e2e5e085a7463a004/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b4cf31e55e2fe245f18f08e2e5e085a7463a004/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=5b4cf31e55e2fe245f18f08e2e5e085a7463a004","patch":"@@ -663,7 +663,7 @@ public void issueSYNCOPE368() {\n         mapping.setConnObjectKeyItem(item);\n \n         item = new MappingItemTO();\n-        item.setIntAttrName(\"owner\");\n+        item.setIntAttrName(\"userOwner\");\n         item.setExtAttrName(\"owner\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.add(item);\n@@ -759,4 +759,43 @@ public void issueSYNCOPE645() {\n             assertEquals(ClientExceptionType.InvalidMapping, e.getType());\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE888() {\n+        String resourceKey = RESOURCE_NAME_CREATE_WRONG;\n+        ResourceTO resourceTO = new ResourceTO();\n+        resourceTO.setKey(resourceKey);\n+        resourceTO.setConnector(\"5ffbb4ac-a8c3-4b44-b699-11b398a1ba08\");\n+\n+        ProvisionTO provisionTO = new ProvisionTO();\n+        provisionTO.setAnyType(AnyTypeKind.USER.name());\n+        provisionTO.setObjectClass(ObjectClass.ACCOUNT_NAME);\n+        resourceTO.getProvisions().add(provisionTO);\n+\n+        MappingTO mapping = new MappingTO();\n+        provisionTO.setMapping(mapping);\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntAttrName(\"key\");\n+        item.setExtAttrName(\"userId\");\n+        item.setConnObjectKey(true);\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.setConnObjectKeyItem(item);\n+\n+        // Add mapping for a not existing internal attribute\n+        item = new MappingItemTO();\n+        item.setIntAttrName(\"locatio\");\n+        item.setExtAttrName(\"location\");\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.add(item);\n+\n+        try {\n+            createResource(resourceTO);\n+            fail(\"Create should not have worked\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidMapping, e.getType());\n+            assertEquals(1, e.getElements().size());\n+            assertEquals(\"'locatio' not existing\", e.getElements().iterator().next());\n+        }\n+    }\n }"}]}