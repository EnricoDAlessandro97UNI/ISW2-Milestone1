{"sha":"c50ee317670571c7e56e1066536ba99313327166","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM1MGVlMzE3NjcwNTcxYzdlNTZlMTA2NjUzNmJhOTkzMTMzMjcxNjY=","commit":{"author":{"name":"Matteo Alessandroni","email":"matteo.alessandroni@tirasa.net","date":"2017-06-23T12:27:17Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2017-06-29T08:53:27Z"},"message":"Fixes [SYNCOPE-1110], [SYNCOPE-1123]. This closes #47","tree":{"sha":"25911649d698b5d5e34682325c29567c6bcd9e76","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/25911649d698b5d5e34682325c29567c6bcd9e76"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c50ee317670571c7e56e1066536ba99313327166","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c50ee317670571c7e56e1066536ba99313327166","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c50ee317670571c7e56e1066536ba99313327166","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c50ee317670571c7e56e1066536ba99313327166/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"7187c35ab562c233fdefdc41e44a27b13ec46863","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7187c35ab562c233fdefdc41e44a27b13ec46863","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7187c35ab562c233fdefdc41e44a27b13ec46863"}],"stats":{"total":124,"additions":68,"deletions":56},"files":[{"sha":"63eaa0b1f41914b941e8b95c9cf77d4898a90790","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomAttributesInfo.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50ee317670571c7e56e1066536ba99313327166/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FCustomAttributesInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50ee317670571c7e56e1066536ba99313327166/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FCustomAttributesInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FCustomAttributesInfo.java?ref=c50ee317670571c7e56e1066536ba99313327166","patch":"@@ -33,7 +33,7 @@ public class CustomAttributesInfo implements Serializable {\n     public CustomAttributesInfo() {\n     }\n \n-    public Boolean getShow() {\n+    public Boolean isShow() {\n         return show;\n     }\n "},{"sha":"3a092c32054c47799dae052c479937469e314b6d","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/BaseUserSelfResource.java","status":"modified","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50ee317670571c7e56e1066536ba99313327166/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50ee317670571c7e56e1066536ba99313327166/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java?ref=c50ee317670571c7e56e1066536ba99313327166","patch":"@@ -21,14 +21,10 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.text.ParseException;\n-import java.util.HashSet;\n-import org.apache.commons.collections4.Predicate;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.time.FastDateFormat;\n-import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n \n@@ -91,38 +87,4 @@ public void writeData(final Attributes attributes) throws IOException {\n         });\n     }\n \n-    protected void customizeAttrTOs(final Set<AttrTO> attrs, final CustomAttributesInfo customAttributesInfo) {\n-        if (customAttributesInfo != null\n-                && customAttributesInfo.getShow()\n-                && !customAttributesInfo.getAttributes().isEmpty()) {\n-            Set<AttrTO> attrsToAdd = new HashSet<>();\n-            for (AttrTO attr : attrs) {\n-                if (customAttributesInfo.getAttributes().containsKey(attr.getSchema())) {\n-                    attrsToAdd.add(attr);\n-                }\n-            }\n-            attrs.clear();\n-            attrs.addAll(attrsToAdd);\n-        } else if (customAttributesInfo != null && !customAttributesInfo.getShow()) {\n-            attrs.clear();\n-        }\n-    }\n-\n-    protected void customizeAttrPatches(final Set<AttrPatch> attrs, final CustomAttributesInfo customAttributesInfo) {\n-        if (customAttributesInfo != null\n-                && customAttributesInfo.getShow()\n-                && !customAttributesInfo.getAttributes().isEmpty()) {\n-            CollectionUtils.filter(attrs, new Predicate<AttrPatch>() {\n-\n-                @Override\n-                public boolean evaluate(final AttrPatch patchPlainAttr) {\n-                    // if membership attribute clean schema name coming from custom form\n-                    return customAttributesInfo.getAttributes().containsKey(patchPlainAttr.getAttrTO().getSchema());\n-                }\n-            });\n-        } else if (customAttributesInfo != null && !customAttributesInfo.getShow()) {\n-            attrs.clear();\n-        }\n-    }\n-\n }"},{"sha":"332011f5dd014ca6e40052e8a8976128b234aad2","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50ee317670571c7e56e1066536ba99313327166/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50ee317670571c7e56e1066536ba99313327166/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java?ref=c50ee317670571c7e56e1066536ba99313327166","patch":"@@ -111,7 +111,7 @@ public boolean evaluate(final GroupTO item) {\n                     : customForm == null || customForm.isEmpty() || customForm.get(SchemaType.PLAIN.name()) == null\n                     ? schemaService.list(\n                             new SchemaQuery.Builder().type(SchemaType.PLAIN).anyTypeClasses(classes).build())\n-                    : customForm.get(SchemaType.PLAIN.name()).getShow()\n+                    : customForm.get(SchemaType.PLAIN.name()).isShow()\n                     ? customizeSchemas(schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).\n                             anyTypeClasses(classes).build()), groupParam, customForm.get(SchemaType.PLAIN.name()).\n                             getAttributes())\n@@ -121,7 +121,7 @@ public boolean evaluate(final GroupTO item) {\n                     : customForm == null || customForm.isEmpty() || customForm.get(SchemaType.DERIVED.name()) == null\n                     ? schemaService.list(\n                             new SchemaQuery.Builder().type(SchemaType.DERIVED).anyTypeClasses(classes).build())\n-                    : customForm.get(SchemaType.DERIVED.name()).getShow()\n+                    : customForm.get(SchemaType.DERIVED.name()).isShow()\n                     ? customizeSchemas(schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).\n                             anyTypeClasses(classes).build()), groupParam, customForm.get(SchemaType.DERIVED.name()).\n                             getAttributes())\n@@ -131,7 +131,7 @@ public boolean evaluate(final GroupTO item) {\n                     : customForm == null || customForm.isEmpty() || customForm.get(SchemaType.VIRTUAL.name()) == null\n                     ? schemaService.list(\n                             new SchemaQuery.Builder().type(SchemaType.VIRTUAL).anyTypeClasses(classes).build())\n-                    : customForm.get(SchemaType.VIRTUAL.name()).getShow()\n+                    : customForm.get(SchemaType.VIRTUAL.name()).isShow()\n                     ? customizeSchemas(schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).\n                             anyTypeClasses(classes).build()), groupParam, customForm.get(SchemaType.VIRTUAL.name()).\n                             getAttributes())"},{"sha":"7d95cdc2340e4cb7f027235ac7e86c5090163214","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50ee317670571c7e56e1066536ba99313327166/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50ee317670571c7e56e1066536ba99313327166/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java?ref=c50ee317670571c7e56e1066536ba99313327166","patch":"@@ -21,9 +21,12 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Map;\n+import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserApplication;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n@@ -95,6 +98,7 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n             for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n                 dateToMillis(userTO.getPlainAttrs(), plainSchema);\n             }\n+\n             final String selfTOJson = MAPPER.writeValueAsString(userTO);\n             response.setContentType(MediaType.APPLICATION_JSON);\n             response.setTextEncoding(StandardCharsets.UTF_8.name());\n@@ -129,4 +133,22 @@ private void applyFromCustomization(final UserTO userTO, final Map<String, Custo\n         }\n     }\n \n+    private void customizeAttrTOs(final Set<AttrTO> attrs, final CustomAttributesInfo customAttributesInfo) {\n+        if (customAttributesInfo != null\n+                && customAttributesInfo.isShow()\n+                && !customAttributesInfo.getAttributes().isEmpty()) {\n+\n+            CollectionUtils.filter(attrs, new Predicate<AttrTO>() {\n+\n+                @Override\n+                public boolean evaluate(final AttrTO attr) {\n+                    return customAttributesInfo.getAttributes().containsKey(attr.getSchema());\n+                }\n+            });\n+\n+        } else if (customAttributesInfo != null && !customAttributesInfo.isShow()) {\n+            attrs.clear();\n+        }\n+    }\n+\n }"},{"sha":"56c61522f6ae4bd309c17d2c7ba84afbc4a3dd67","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":41,"deletions":13,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50ee317670571c7e56e1066536ba99313327166/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50ee317670571c7e56e1066536ba99313327166/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=c50ee317670571c7e56e1066536ba99313327166","patch":"@@ -34,12 +34,12 @@\n import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n import org.apache.syncope.client.enduser.util.UserRequestValidator;\n import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n@@ -158,10 +158,14 @@ public boolean evaluate(final MembershipTO item) {\n                 }\n                 userTO.getVirAttrs().removeAll(membAttrs);\n \n-                UserPatch userPatch = AnyOperations.diff(userTO, SyncopeEnduserSession.get().getSelfTO(), false);\n-\n-                applyFormCustomization(userPatch, customForm);\n-\n+                // get old user object from session\n+                UserTO selfTO = SyncopeEnduserSession.get().getSelfTO();\n+                // align \"userTO\" and \"selfTO\" objects\n+                if (customForm != null && !customForm.isEmpty()) {\n+                    completeUserObject(userTO, selfTO);\n+                }\n+                // create diff patch\n+                UserPatch userPatch = AnyOperations.diff(userTO, selfTO, false);\n                 // update user by patch\n                 Response res = SyncopeEnduserSession.get().\n                         getService(userTO.getETagValue(), UserSelfService.class).update(userPatch);\n@@ -189,15 +193,39 @@ public boolean evaluate(final MembershipTO item) {\n         return response;\n     }\n \n-    private void applyFormCustomization(final UserPatch userPatch, final Map<String, CustomAttributesInfo> customForm) {\n-        final CustomAttributesInfo customPlainAttrsInfo = customForm.get(SchemaType.PLAIN.name());\n-        final CustomAttributesInfo customVirtualAttrsInfo = customForm.get(SchemaType.VIRTUAL.name());\n-        // clean patch to avoid unwanted deletions of hidden schemas (custom form)\n-        if (customPlainAttrsInfo != null) {\n-            customizeAttrPatches(userPatch.getPlainAttrs(), customPlainAttrsInfo);\n+    private void completeUserObject(final UserTO userTO, final UserTO selfTO) {\n+        // memberships plain and virtual attrs\n+        for (final MembershipTO updatedTOMemb : userTO.getMemberships()) {\n+            MembershipTO oldTOMatchedMemb =\n+                    IterableUtils.find(selfTO.getMemberships(), new Predicate<MembershipTO>() {\n+\n+                        @Override\n+                        public boolean evaluate(final MembershipTO oldTOMemb) {\n+                            return updatedTOMemb.getGroupKey().equals(oldTOMemb.getGroupKey());\n+                        }\n+                    });\n+            if (oldTOMatchedMemb != null) {\n+                if (!updatedTOMemb.getPlainAttrs().isEmpty()) {\n+                    completeAttrs(updatedTOMemb.getPlainAttrs(), oldTOMatchedMemb.getPlainAttrs());\n+                }\n+                if (!updatedTOMemb.getVirAttrs().isEmpty()) {\n+                    completeAttrs(updatedTOMemb.getVirAttrs(), oldTOMatchedMemb.getVirAttrs());\n+                }\n+            }\n         }\n-        if (customVirtualAttrsInfo != null) {\n-            customizeAttrTOs(userPatch.getVirAttrs(), customPlainAttrsInfo);\n+        // plain attrs\n+        completeAttrs(userTO.getPlainAttrs(), selfTO.getPlainAttrs());\n+        // virtual attrs\n+        completeAttrs(userTO.getVirAttrs(), selfTO.getVirAttrs());\n+    }\n+\n+    private void completeAttrs(final Set<AttrTO> userTOAttrs, final Set<AttrTO> selfTOAttrs) {\n+        Map<String, AttrTO> userTOAttrsMap =\n+                EntityTOUtils.buildAttrMap(userTOAttrs);\n+        for (AttrTO selfTOAttr : selfTOAttrs) {\n+            if (!userTOAttrsMap.containsKey(selfTOAttr.getSchema())) {\n+                userTOAttrs.add(selfTOAttr);\n+            }\n         }\n     }\n "},{"sha":"1d02e4ea18a72158e8d0796e1d9d0f2467c9daca","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/util/UserRequestValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50ee317670571c7e56e1066536ba99313327166/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50ee317670571c7e56e1066536ba99313327166/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidator.java?ref=c50ee317670571c7e56e1066536ba99313327166","patch":"@@ -56,7 +56,7 @@ private static boolean validateAttributes(final Map<String, AttrTO> attrMap,\n             final CustomAttributesInfo customAttrInfo, final boolean checkDefaultValues) {\n \n         return customAttrInfo == null\n-                || (customAttrInfo.getAttributes().isEmpty() && customAttrInfo.getShow())\n+                || (customAttrInfo.getAttributes().isEmpty() && customAttrInfo.isShow())\n                 || IterableUtils.matchesAll(attrMap.entrySet(), new Predicate<Map.Entry<String, AttrTO>>() {\n \n                     @Override"}]}