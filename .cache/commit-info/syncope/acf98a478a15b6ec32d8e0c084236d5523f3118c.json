{"sha":"acf98a478a15b6ec32d8e0c084236d5523f3118c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFjZjk4YTQ3OGExNWI2ZWMzMmQ4ZTBjMDg0MjM2ZDU1MjNmMzExOGM=","commit":{"author":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-08-02T15:42:59Z"},"committer":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-08-02T16:10:05Z"},"message":"Adding SAML SSO Response tests","tree":{"sha":"921f2fa02f78bfe46f6a15b22a58e94aa96e69db","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/921f2fa02f78bfe46f6a15b22a58e94aa96e69db"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/acf98a478a15b6ec32d8e0c084236d5523f3118c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/acf98a478a15b6ec32d8e0c084236d5523f3118c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/acf98a478a15b6ec32d8e0c084236d5523f3118c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/acf98a478a15b6ec32d8e0c084236d5523f3118c/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"a11cd34eb3abba039a103a6429a6b9445234ef9d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a11cd34eb3abba039a103a6429a6b9445234ef9d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a11cd34eb3abba039a103a6429a6b9445234ef9d"}],"stats":{"total":546,"additions":545,"deletions":1},"files":[{"sha":"0772ccbf8481ca08ad4866179dd3b3841f62bd4b","filename":"fit/core-reference/pom.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/acf98a478a15b6ec32d8e0c084236d5523f3118c/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/acf98a478a15b6ec32d8e0c084236d5523f3118c/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=acf98a478a15b6ec32d8e0c084236d5523f3118c","patch":"@@ -363,13 +363,15 @@ under the License.\n         <filtering>true</filtering>\n         <excludes>\n           <exclude>keystore</exclude>\n+          <exclude>**/*.jks</exclude>\n         </excludes>\n       </testResource>\n       <testResource>\n         <directory>src/test/resources</directory>\n         <filtering>false</filtering>\n         <includes>\n           <include>keystore</include>\n+          <include>**/*.jks</include>\n         </includes>\n       </testResource>\n       <testResource>"},{"sha":"f80d4b9bdc83501b543bf89d612a4a4d6a7b0a5f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2CallbackHandler.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/acf98a478a15b6ec32d8e0c084236d5523f3118c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2CallbackHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/acf98a478a15b6ec32d8e0c084236d5523f3118c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2CallbackHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2CallbackHandler.java?ref=acf98a478a15b6ec32d8e0c084236d5523f3118c","patch":"@@ -0,0 +1,121 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.fit.core;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+\n+import org.apache.wss4j.common.saml.SAMLCallback;\n+import org.apache.wss4j.common.saml.bean.AuthenticationStatementBean;\n+import org.apache.wss4j.common.saml.bean.ConditionsBean;\n+import org.apache.wss4j.common.saml.bean.SubjectBean;\n+import org.apache.wss4j.common.saml.bean.SubjectConfirmationDataBean;\n+import org.apache.wss4j.common.saml.bean.Version;\n+import org.apache.wss4j.common.saml.builder.SAML2Constants;\n+\n+/**\n+ * A Callback Handler implementation for a SAML 2 assertion.\n+ */\n+public class SAML2CallbackHandler implements CallbackHandler {\n+    private String subjectName = \"uid=joe,ou=people,ou=saml-demo,o=example.com\";\n+    private String subjectQualifier = \"www.example.com\";\n+    private String issuer;\n+    private ConditionsBean conditions;\n+    private SubjectConfirmationDataBean subjectConfirmationData;\n+    private String subjectConfirmationMethod = SAML2Constants.CONF_BEARER;\n+\n+    public void handle(Callback[] callbacks)\n+        throws IOException, UnsupportedCallbackException {\n+        for (int i = 0; i < callbacks.length; i++) {\n+            if (callbacks[i] instanceof SAMLCallback) {\n+                SAMLCallback callback = (SAMLCallback) callbacks[i];\n+                callback.setSamlVersion(Version.SAML_20);\n+                callback.setIssuer(issuer);\n+                if (conditions != null) {\n+                    callback.setConditions(conditions);\n+                }\n+\n+                SubjectBean subjectBean =\n+                    new SubjectBean(\n+                        subjectName, subjectQualifier, subjectConfirmationMethod\n+                    );\n+                subjectBean.setSubjectConfirmationData(subjectConfirmationData);\n+                callback.setSubject(subjectBean);\n+                AuthenticationStatementBean authBean = new AuthenticationStatementBean();\n+                authBean.setAuthenticationMethod(\"Password\");\n+                callback.setAuthenticationStatementData(Collections.singletonList(authBean));\n+            } else {\n+                throw new UnsupportedCallbackException(callbacks[i], \"Unrecognized Callback\");\n+            }\n+        }\n+    }\n+\n+    public String getSubjectName() {\n+        return subjectName;\n+    }\n+\n+    public void setSubjectName(String subjectName) {\n+        this.subjectName = subjectName;\n+    }\n+\n+    public String getSubjectQualifier() {\n+        return subjectQualifier;\n+    }\n+\n+    public void setSubjectQualifier(String subjectQualifier) {\n+        this.subjectQualifier = subjectQualifier;\n+    }\n+\n+    public String getIssuer() {\n+        return issuer;\n+    }\n+\n+    public void setIssuer(String issuer) {\n+        this.issuer = issuer;\n+    }\n+\n+    public ConditionsBean getConditions() {\n+        return conditions;\n+    }\n+\n+    public void setConditions(ConditionsBean conditions) {\n+        this.conditions = conditions;\n+    }\n+\n+    public SubjectConfirmationDataBean getSubjectConfirmationData() {\n+        return subjectConfirmationData;\n+    }\n+\n+    public void setSubjectConfirmationData(SubjectConfirmationDataBean subjectConfirmationData) {\n+        this.subjectConfirmationData = subjectConfirmationData;\n+    }\n+\n+    public String getSubjectConfirmationMethod() {\n+        return subjectConfirmationMethod;\n+    }\n+\n+    public void setSubjectConfirmationMethod(String subjectConfirmationMethod) {\n+        this.subjectConfirmationMethod = subjectConfirmationMethod;\n+    }\n+}"},{"sha":"55838b89d60a9b523891fd3bd5d08bf700f5973b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":233,"deletions":1,"changes":234,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/acf98a478a15b6ec32d8e0c084236d5523f3118c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/acf98a478a15b6ec32d8e0c084236d5523f3118c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=acf98a478a15b6ec32d8e0c084236d5523f3118c","patch":"@@ -28,27 +28,54 @@\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.nio.charset.StandardCharsets;\n+import java.security.KeyStore;\n+import java.util.Collections;\n import java.util.Optional;\n \n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+\n import org.apache.commons.codec.binary.Base64;\n+import org.apache.cxf.helpers.DOMUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n+import org.apache.cxf.rs.security.saml.sso.SAMLProtocolResponseValidator;\n import org.apache.cxf.staxutils.StaxUtils;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n+import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.SAML2SPDetector;\n+import org.apache.wss4j.common.crypto.Crypto;\n+import org.apache.wss4j.common.crypto.Merlin;\n+import org.apache.wss4j.common.saml.OpenSAMLUtil;\n+import org.apache.wss4j.common.saml.SAMLCallback;\n+import org.apache.wss4j.common.saml.SAMLUtil;\n+import org.apache.wss4j.common.saml.SamlAssertionWrapper;\n+import org.apache.wss4j.common.saml.bean.AudienceRestrictionBean;\n+import org.apache.wss4j.common.saml.bean.ConditionsBean;\n+import org.apache.wss4j.common.saml.bean.SubjectConfirmationDataBean;\n+import org.apache.wss4j.common.saml.builder.SAML2Constants;\n+import org.apache.wss4j.common.util.DOM2Writer;\n+import org.apache.wss4j.common.util.Loader;\n+import org.apache.wss4j.dom.WSConstants;\n+import org.apache.wss4j.dom.engine.WSSConfig;\n+import org.joda.time.DateTime;\n import org.junit.AfterClass;\n import org.junit.Assume;\n import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.opensaml.saml.common.xml.SAMLConstants;\n+import org.opensaml.saml.saml2.core.Status;\n import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n \n public class SAML2ITCase extends AbstractITCase {\n \n@@ -59,6 +86,9 @@ public static void setupAnonymousClient() {\n         anonymous = new SyncopeClientFactoryBean().\n                 setAddress(ADDRESS).\n                 create(new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n+\n+        WSSConfig.init();\n+        OpenSAMLUtil.initSamlEngine();\n     }\n \n     @BeforeClass\n@@ -75,6 +105,7 @@ public static void importFromIdPMetadata() {\n         try {\n             saml2IdPService.importFromMetadata(SAML2ITCase.class.getResourceAsStream(\"/ssocircle.xml\"));\n             saml2IdPService.importFromMetadata(SAML2ITCase.class.getResourceAsStream(\"/testshib-providers.xml\"));\n+            saml2IdPService.importFromMetadata(SAML2ITCase.class.getResourceAsStream(\"/fediz.xml\"));\n         } catch (Exception e) {\n             LOG.error(\"Unexpected error while importing SAML 2.0 IdP metadata\", e);\n         } finally {\n@@ -83,7 +114,7 @@ public static void importFromIdPMetadata() {\n                     type(clientFactory.getContentType().getMediaType());\n         }\n \n-        assertEquals(2, saml2IdPService.list().size());\n+        assertEquals(3, saml2IdPService.list().size());\n     }\n \n     @AfterClass\n@@ -160,4 +191,205 @@ public void setIdPMapping() {\n         assertEquals(\"EmailAddress\", ssoCircle.getConnObjectKeyItem().getExtAttrName());\n     }\n \n+    @Test\n+    public void validateLoginResponse() throws Exception {\n+        Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n+\n+        // Get a valid login request for the Fediz realm\n+        SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n+        SAML2RequestTO loginRequest =\n+            saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n+        assertNotNull(loginRequest);\n+\n+        assertEquals(\"https://localhost:8443/fediz-idp/saml/up\", loginRequest.getIdpServiceAddress());\n+        assertNotNull(loginRequest.getContent());\n+        assertTrue(Base64.isBase64(loginRequest.getContent()));\n+        assertNotNull(loginRequest.getRelayState());\n+\n+        // Check a null relaystate\n+        SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n+        try {\n+            saml2Service.validateLoginResponse(response);\n+            fail(\"Failure expected on no Relay State\");\n+        } catch (SyncopeClientException ex) {\n+            assertTrue(ex.getMessage().contains(\"No Relay State was provided\"));\n+        }\n+\n+        // Check a null Response\n+        response.setRelayState(loginRequest.getRelayState());\n+        try {\n+            saml2Service.validateLoginResponse(response);\n+            fail(\"Failure expected on no SAML Response\");\n+        } catch (SyncopeClientException ex) {\n+            assertTrue(ex.getMessage().contains(\"No SAML Response was provided\"));\n+        }\n+\n+        // Create a SAML Response using WSS4J\n+        Document doc = DOMUtils.newDocument();\n+        JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n+        String inResponseTo = relayState.getJwtClaims().getSubject();\n+\n+        org.opensaml.saml.saml2.core.Response samlResponse = createResponse(doc, inResponseTo);\n+        Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n+        String responseStr = DOM2Writer.nodeToString(responseElement);\n+\n+        // Validate the SAML Response\n+        response.setSamlResponse(java.util.Base64.getEncoder().encodeToString(responseStr.getBytes()));\n+        SAML2LoginResponseTO loginResponse = saml2Service.validateLoginResponse(response);\n+        assertNotNull(loginResponse.getAccessToken());\n+        assertEquals(\"puccini\", loginResponse.getNameID());\n+    }\n+\n+    @Test\n+    @org.junit.Ignore\n+    public void testUnsignedAssertionInLoginResponse() throws Exception {\n+        Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n+\n+        // Get a valid login request for the Fediz realm\n+        SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n+        SAML2RequestTO loginRequest =\n+            saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n+        assertNotNull(loginRequest);\n+\n+        SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n+        response.setRelayState(loginRequest.getRelayState());\n+\n+        // Create a SAML Response using WSS4J\n+        Document doc = DOMUtils.newDocument();\n+        JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n+        String inResponseTo = relayState.getJwtClaims().getSubject();\n+\n+        org.opensaml.saml.saml2.core.Response samlResponse =\n+            createResponse(doc, inResponseTo, false, SAML2Constants.CONF_SENDER_VOUCHES);\n+        Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n+        String responseStr = DOM2Writer.nodeToString(responseElement);\n+\n+        // Validate the SAML Response\n+        response.setSamlResponse(java.util.Base64.getEncoder().encodeToString(responseStr.getBytes()));\n+        try {\n+            saml2Service.validateLoginResponse(response);\n+            fail(\"Failure expected on an unsigned Assertion\");\n+        } catch (SyncopeClientException ex) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    @org.junit.Ignore\n+    public void testLoginResponseWrappingAttack() throws Exception {\n+        Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n+\n+        // Get a valid login request for the Fediz realm\n+        SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n+        SAML2RequestTO loginRequest =\n+            saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n+        assertNotNull(loginRequest);\n+\n+        SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n+        response.setRelayState(loginRequest.getRelayState());\n+\n+        // Create a SAML Response using WSS4J\n+        Document doc = DOMUtils.newDocument();\n+        JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n+        String inResponseTo = relayState.getJwtClaims().getSubject();\n+\n+        org.opensaml.saml.saml2.core.Response samlResponse = createResponse(doc, inResponseTo);\n+        Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n+\n+        doc.appendChild(responseElement);\n+        assertNotNull(responseElement);\n+\n+        // Get Assertion Element\n+        Element assertionElement =\n+            (Element)responseElement.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"Assertion\").item(0);\n+        assertNotNull(assertionElement);\n+\n+        // Clone it, strip the Signature, modify the Subject, change Subj Conf\n+        Element clonedAssertion = (Element)assertionElement.cloneNode(true);\n+        clonedAssertion.setAttributeNS(null, \"ID\", \"_12345623562\");\n+        Element sigElement =\n+            (Element)clonedAssertion.getElementsByTagNameNS(WSConstants.SIG_NS, \"Signature\").item(0);\n+        clonedAssertion.removeChild(sigElement);\n+\n+        Element subjElement =\n+            (Element)clonedAssertion.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"Subject\").item(0);\n+        Element subjNameIdElement =\n+            (Element)subjElement.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"NameID\").item(0);\n+        subjNameIdElement.setTextContent(\"verdi\");\n+\n+        Element subjConfElement =\n+            (Element)subjElement.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"SubjectConfirmation\").item(0);\n+        subjConfElement.setAttributeNS(null, \"Method\", SAML2Constants.CONF_SENDER_VOUCHES);\n+\n+        // Now insert the modified cloned Assertion into the Response after the other assertion\n+        responseElement.insertBefore(clonedAssertion, null);\n+\n+        String responseStr = DOM2Writer.nodeToString(responseElement);\n+\n+        // Validate the SAML Response\n+        response.setSamlResponse(java.util.Base64.getEncoder().encodeToString(responseStr.getBytes()));\n+        SAML2LoginResponseTO loginResponse = saml2Service.validateLoginResponse(response);\n+        assertNotNull(loginResponse.getAccessToken());\n+        assertEquals(\"puccini\", loginResponse.getNameID());\n+    }\n+\n+    private org.opensaml.saml.saml2.core.Response createResponse(Document doc, String inResponseTo) throws Exception {\n+        return createResponse(doc, inResponseTo, true, SAML2Constants.CONF_BEARER);\n+    }\n+\n+    private org.opensaml.saml.saml2.core.Response createResponse(Document doc, String inResponseTo,\n+                                                                 boolean signAssertion, String subjectConfMethod) throws Exception {\n+        Status status =\n+            SAML2PResponseComponentBuilder.createStatus(\n+                SAMLProtocolResponseValidator.SAML2_STATUSCODE_SUCCESS, null\n+            );\n+        org.opensaml.saml.saml2.core.Response response =\n+            SAML2PResponseComponentBuilder.createSAMLResponse(\n+                inResponseTo, \"urn:org:apache:cxf:fediz:idp:realm-A\", status\n+            );\n+        response.setDestination(\"http://recipient.apache.org\");\n+\n+        // Create an AuthenticationAssertion\n+        SAML2CallbackHandler callbackHandler = new SAML2CallbackHandler();\n+        callbackHandler.setIssuer(\"urn:org:apache:cxf:fediz:idp:realm-A\");\n+        callbackHandler.setSubjectName(\"puccini\");\n+        callbackHandler.setSubjectConfirmationMethod(subjectConfMethod);\n+\n+        SubjectConfirmationDataBean subjectConfirmationData = new SubjectConfirmationDataBean();\n+        subjectConfirmationData.setAddress(\"http://apache.org\");\n+        subjectConfirmationData.setInResponseTo(\"12345\");\n+        subjectConfirmationData.setNotAfter(new DateTime().plusMinutes(5));\n+        subjectConfirmationData.setRecipient(\"http://recipient.apache.org\");\n+        callbackHandler.setSubjectConfirmationData(subjectConfirmationData);\n+\n+        ConditionsBean conditions = new ConditionsBean();\n+        conditions.setNotBefore(new DateTime());\n+        conditions.setNotAfter(new DateTime().plusMinutes(5));\n+\n+        AudienceRestrictionBean audienceRestriction = new AudienceRestrictionBean();\n+        audienceRestriction.setAudienceURIs(Collections.singletonList(\"http://service.apache.org\"));\n+        conditions.setAudienceRestrictions(Collections.singletonList(audienceRestriction));\n+        callbackHandler.setConditions(conditions);\n+\n+        SAMLCallback samlCallback = new SAMLCallback();\n+        SAMLUtil.doSAMLCallback(callbackHandler, samlCallback);\n+        SamlAssertionWrapper assertion = new SamlAssertionWrapper(samlCallback);\n+\n+        if (signAssertion) {\n+            Crypto issuerCrypto = new Merlin();\n+            KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+            ClassLoader loader = Loader.getClassLoader(SAML2ITCase.class);\n+            InputStream input = Merlin.loadInputStream(loader, \"stsrealm_a.jks\");\n+            keyStore.load(input, \"storepass\".toCharArray());\n+            ((Merlin)issuerCrypto).setKeyStore(keyStore);\n+\n+            assertion.signAssertion(\"realma\", \"realma\", issuerCrypto, false);\n+        }\n+\n+        response.getAssertions().add(assertion.getSaml2());\n+\n+        return response;\n+    }\n+\n+\n }"},{"sha":"75ad465ccc680a4914b24253e28079b58f669707","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2PResponseComponentBuilder.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/acf98a478a15b6ec32d8e0c084236d5523f3118c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2PResponseComponentBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/acf98a478a15b6ec32d8e0c084236d5523f3118c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2PResponseComponentBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2PResponseComponentBuilder.java?ref=acf98a478a15b6ec32d8e0c084236d5523f3118c","patch":"@@ -0,0 +1,142 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.fit.core;\n+\n+import java.util.UUID;\n+\n+import org.joda.time.DateTime;\n+import org.opensaml.core.xml.XMLObjectBuilderFactory;\n+import org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport;\n+import org.opensaml.saml.common.SAMLObjectBuilder;\n+import org.opensaml.saml.common.SAMLVersion;\n+import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.Status;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.StatusMessage;\n+\n+/**\n+* A (basic) set of utility methods to construct SAML 2.0 Protocol Response statements\n+*/\n+public final class SAML2PResponseComponentBuilder {\n+\n+    private static SAMLObjectBuilder<Response> responseBuilder;\n+\n+    private static SAMLObjectBuilder<Issuer> issuerBuilder;\n+\n+    private static SAMLObjectBuilder<Status> statusBuilder;\n+\n+    private static SAMLObjectBuilder<StatusCode> statusCodeBuilder;\n+\n+    private static SAMLObjectBuilder<StatusMessage> statusMessageBuilder;\n+\n+    private static SAMLObjectBuilder<AuthnContextClassRef> authnContextClassRefBuilder;\n+\n+    private static XMLObjectBuilderFactory builderFactory =\n+        XMLObjectProviderRegistrySupport.getBuilderFactory();\n+\n+    private SAML2PResponseComponentBuilder() {\n+\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static Response createSAMLResponse(\n+        String inResponseTo,\n+        String issuer,\n+        Status status\n+    ) {\n+        if (responseBuilder == null) {\n+            responseBuilder = (SAMLObjectBuilder<Response>)\n+                builderFactory.getBuilder(Response.DEFAULT_ELEMENT_NAME);\n+        }\n+        Response response = responseBuilder.buildObject();\n+\n+        response.setID(UUID.randomUUID().toString());\n+        response.setIssueInstant(new DateTime());\n+        response.setInResponseTo(inResponseTo);\n+        response.setIssuer(createIssuer(issuer));\n+        response.setStatus(status);\n+        response.setVersion(SAMLVersion.VERSION_20);\n+\n+        return response;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static Issuer createIssuer(\n+        String issuerValue\n+    ) {\n+        if (issuerBuilder == null) {\n+            issuerBuilder = (SAMLObjectBuilder<Issuer>)\n+                builderFactory.getBuilder(Issuer.DEFAULT_ELEMENT_NAME);\n+        }\n+        Issuer issuer = issuerBuilder.buildObject();\n+        issuer.setValue(issuerValue);\n+\n+        return issuer;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static Status createStatus(\n+        String statusCodeValue,\n+        String statusMessage\n+    ) {\n+        if (statusBuilder == null) {\n+            statusBuilder = (SAMLObjectBuilder<Status>)\n+                builderFactory.getBuilder(Status.DEFAULT_ELEMENT_NAME);\n+        }\n+        if (statusCodeBuilder == null) {\n+            statusCodeBuilder = (SAMLObjectBuilder<StatusCode>)\n+                builderFactory.getBuilder(StatusCode.DEFAULT_ELEMENT_NAME);\n+        }\n+        if (statusMessageBuilder == null) {\n+            statusMessageBuilder = (SAMLObjectBuilder<StatusMessage>)\n+                builderFactory.getBuilder(StatusMessage.DEFAULT_ELEMENT_NAME);\n+        }\n+\n+        Status status = statusBuilder.buildObject();\n+\n+        StatusCode statusCode = statusCodeBuilder.buildObject();\n+        statusCode.setValue(statusCodeValue);\n+        status.setStatusCode(statusCode);\n+\n+        if (statusMessage != null) {\n+            StatusMessage statusMessageObject = statusMessageBuilder.buildObject();\n+            statusMessageObject.setMessage(statusMessage);\n+            status.setStatusMessage(statusMessageObject);\n+        }\n+\n+        return status;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static AuthnContextClassRef createAuthnContextClassRef(String newAuthnContextClassRef) {\n+        if (authnContextClassRefBuilder == null) {\n+            authnContextClassRefBuilder = (SAMLObjectBuilder<AuthnContextClassRef>)\n+                builderFactory.getBuilder(AuthnContextClassRef.DEFAULT_ELEMENT_NAME);\n+        }\n+\n+        AuthnContextClassRef authnContextClassRef = authnContextClassRefBuilder.buildObject();\n+        authnContextClassRef.setAuthnContextClassRef(newAuthnContextClassRef);\n+\n+        return authnContextClassRef;\n+    }\n+\n+}\n\\ No newline at end of file"},{"sha":"cbc8faa4850a179e6c2d92a87bd361577bae4b32","filename":"fit/core-reference/src/test/resources/fediz.xml","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/acf98a478a15b6ec32d8e0c084236d5523f3118c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/acf98a478a15b6ec32d8e0c084236d5523f3118c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz.xml?ref=acf98a478a15b6ec32d8e0c084236d5523f3118c","patch":"@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<EntityDescriptor entityID=\"urn:org:apache:cxf:fediz:idp:realm-A\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n+    <IDPSSODescriptor WantAuthnRequestsSigned=\"true\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n+        <KeyDescriptor use=\"signing\">\n+            <ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n+                <ds:X509Data>\n+                    <ds:X509Certificate>\n+MIICwTCCAamgAwIBAgIEINqJ9TANBgkqhkiG9w0BAQsFADARMQ8wDQYDVQQDEwZSRUFMTUEwHhcN\n+MTUwNjEwMTU0NDE3WhcNMjUwNDE4MTU0NDE3WjARMQ8wDQYDVQQDEwZSRUFMTUEwggEiMA0GCSqG\n+SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCJDSXn2lDR+JM+AsJarFG3/XGH7K+9AfAbQIz2IgB9MCpO\n+KVWTUPCvuo1I+Fp5nEGreuHYLEwgIiam3o+C9tvpLgtDDaDkmXjDzkWpk8z6+im72HZ/ODF93Rqw\n+jIiY5ZCzgDumFyPzdKiGwChThamidy+rd6oheSoi6qRVSMMcnwiEUmvkfFvV3izXRqeT5nGQwsin\n+y9mCEiGx8jkfxP++H0RQjVjhOwzfQ7epsR7dTQNf2ZhkBR3o6wKV9QnF2IBWHZpA9EK58rWU9H6j\n+G7b631rYvwsbOUF9HcZ8DI2BFh+4p18jDN/fnjNGSLr9rYOExpsIiF1cHBK7Tr7WwCmDAgMBAAGj\n+ITAfMB0GA1UdDgQWBBRHy0qYoLm9jx/1L6r61NznHKun2jANBgkqhkiG9w0BAQsFAAOCAQEAR9rU\n+5Sp1FsOErdvKNFqeaKl0oq6Fuz7BWcGm2kK6+1ZbWE8IOv6Vh+BlLuOe5hF7aLUbm8UIjhKsmg0M\n+Ey5MBwkBZktT1qhQteMuiKgYR7CxayCxO0f125RYvvwntJa5rI7bUrzOqX29VQD1qQ/Tb+08fULT\n+L7oURP+g88Ff99dn3IpO4VZxZdsbl4+KZRtqQvPAdXNYjOajJtPzS489+/DtfWJ6wPm/7YZ4did4\n+1fYcrdwyEZ15L0/5i931z7sztNickm5WhO40qEVDKN6KrlV2Eyea0+933v2Pwe4resTlko9G2T5h\n+dEaSbvht2Q/JOMMmT91daeto2oS8HTKhTA==\n+                   </ds:X509Certificate>\n+                </ds:X509Data>\n+            </ds:KeyInfo>\n+        </KeyDescriptor>\n+        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://localhost:8443/fediz-idp/saml/up\"/>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://localhost:8443/fediz-idp/saml/up\"/>\n+    </IDPSSODescriptor>\n+</EntityDescriptor>"},{"sha":"fde29282cfb1423bd72440ae2814f69e95e1c756","filename":"fit/core-reference/src/test/resources/stsrealm_a.jks","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/acf98a478a15b6ec32d8e0c084236d5523f3118c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fstsrealm_a.jks","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/acf98a478a15b6ec32d8e0c084236d5523f3118c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fstsrealm_a.jks","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fstsrealm_a.jks?ref=acf98a478a15b6ec32d8e0c084236d5523f3118c"}]}