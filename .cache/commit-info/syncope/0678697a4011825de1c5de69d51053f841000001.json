{"sha":"0678697a4011825de1c5de69d51053f841000001","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA2Nzg2OTdhNDAxMTgyNWRlMWM1ZGU2OWQ1MTA1M2Y4NDEwMDAwMDE=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"marco.disabatino@tirasa.net","date":"2019-12-06T08:55:40Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2019-12-06T09:13:51Z"},"message":"[SYNCOPE-1522] Realm behaviors for Delegated Administration","tree":{"sha":"1ceaa2c28e69571aa9c8e2cda3bba3fcb9586b0d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1ceaa2c28e69571aa9c8e2cda3bba3fcb9586b0d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0678697a4011825de1c5de69d51053f841000001","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0678697a4011825de1c5de69d51053f841000001","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0678697a4011825de1c5de69d51053f841000001","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0678697a4011825de1c5de69d51053f841000001/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"38ea36567fa1f09dbb4ae77fa13095b58dd757de","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/38ea36567fa1f09dbb4ae77fa13095b58dd757de","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/38ea36567fa1f09dbb4ae77fa13095b58dd757de"}],"stats":{"total":56,"additions":15,"deletions":41},"files":[{"sha":"f9c4180b3e1de77963a50e6c218165059d0060f5","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":15,"deletions":41,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0678697a4011825de1c5de69d51053f841000001/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0678697a4011825de1c5de69d51053f841000001/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=0678697a4011825de1c5de69d51053f841000001","patch":"@@ -89,12 +89,12 @@ public class RealmChoicePanel extends Panel {\n     public RealmChoicePanel(final String id, final PageReference pageRef) {\n         super(id);\n         this.pageRef = pageRef;\n+        availableRealms = SyncopeConsoleSession.get().getAuthRealms();\n         tree = new HashMap<>();\n \n         RealmTO fakeRootRealm = new RealmTO();\n         fakeRootRealm.setName(SyncopeConstants.ROOT_REALM);\n         fakeRootRealm.setFullPath(SyncopeConstants.ROOT_REALM);\n-        model = Model.of(fakeRootRealm);\n \n         realmTree = new LoadableDetachableModel<List<Pair<String, RealmTO>>>() {\n \n@@ -118,11 +118,14 @@ private void getChildren(\n             @Override\n             protected List<Pair<String, RealmTO>> load() {\n                 Map<String, Pair<RealmTO, List<RealmTO>>> map = reloadRealmParentMap();\n-                model.setObject(map.get(null).getKey());\n-\n-                final List<Pair<String, RealmTO>> full = new ArrayList<>();\n+                List<Pair<String, RealmTO>> full = new ArrayList<>();\n                 getChildren(full, null, map, StringUtils.EMPTY);\n-                return full;\n+\n+                return full.stream().filter(realm\n+                        -> availableRealms.stream().anyMatch(\n+                                availableRealm -> realm.getValue().getFullPath()\n+                                        .startsWith(availableRealm))).collect(Collectors.toList());\n+\n             }\n         };\n \n@@ -142,17 +145,17 @@ protected List<DynRealmTO> load() {\n                         return left.getKey().compareTo(right.getKey());\n                     }\n                 });\n-\n-                return dynRealms;\n+                return dynRealms.stream().filter(dynRealm\n+                        -> availableRealms.stream().anyMatch(\n+                                availableRealm -> SyncopeConstants.ROOT_REALM.equals(availableRealm)\n+                                || dynRealm.getKey().equals(availableRealm))).collect(Collectors.toList());\n             }\n         };\n-\n+       \n+        model = Model.of(realmTree.getObject().stream().findFirst().get().getValue());\n         container = new WebMarkupContainer(\"container\", realmTree);\n         container.setOutputMarkupId(true);\n         add(container);\n-\n-        availableRealms = SyncopeConsoleSession.get().getAuthRealms();\n-\n         reloadRealmTree();\n     }\n \n@@ -187,22 +190,7 @@ public final void reloadRealmTree() {\n             BootstrapSelectConfig config = new BootstrapSelectConfig().withLiveSearch(true);\n             config.put(new Key<>(\"styleBase\", \"btn\"), \"btn glyphicon glyphicon-folder-open\");\n             BootstrapSelect<Pair<String, RealmTO>> select =\n-                    new BootstrapSelect<Pair<String, RealmTO>>(\"realmsLiveSearch\", new Model<>(), realms) {\n-\n-                private static final long serialVersionUID = -12358873583862012L;\n-\n-                @Override\n-                protected boolean isDisabled(\n-                        final Pair<String, RealmTO> object,\n-                        final int index,\n-                        final String selected) {\n-                    return availableRealms.stream().anyMatch(availableRealm -> {\n-                        return !SyncopeConstants.ROOT_REALM.equals(availableRealm)\n-                                && !object.getValue().getFullPath().equals(availableRealm);\n-                    });\n-                }\n-            };\n-\n+                    new BootstrapSelect<>(\"realmsLiveSearch\", new Model<>(), realms);\n             select.with(config);\n             select.setOutputMarkupId(true);\n             select.setChoiceRenderer(new IChoiceRenderer<Pair<String, RealmTO>>() {\n@@ -316,12 +304,6 @@ public void onClick(final AjaxRequestTarget target) {\n                     target.add(label);\n                     send(pageRef.getPage(), Broadcast.EXACT, new ChosenRealm<>(realmTO, target));\n                 }\n-\n-                @Override\n-                public boolean isEnabled() {\n-                    return availableRealms.stream().\n-                            anyMatch(availableRealm -> realmTO.getFullPath().startsWith(availableRealm));\n-                }\n             });\n         }\n \n@@ -373,14 +355,6 @@ public void onClick(final AjaxRequestTarget target) {\n                         target.add(label);\n                         send(pageRef.getPage(), Broadcast.EXACT, new ChosenRealm<>(realmTO, target));\n                     }\n-\n-                    @Override\n-                    public boolean isEnabled() {\n-                        return availableRealms.stream().anyMatch(availableRealm -> {\n-                            return SyncopeConstants.ROOT_REALM.equals(availableRealm)\n-                                    || realmTO.getKey().equals(availableRealm);\n-                        });\n-                    }\n                 });\n             }\n         }"}]}