{"sha":"2770bffe9f4aea52d1e2510b822e9b0771bd8339","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI3NzBiZmZlOWY0YWVhNTJkMWUyNTEwYjgyMmU5YjA3NzFiZDgzMzk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-06-07T08:06:34Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-06-07T12:53:46Z"},"message":"Upgrading Nimbus JOSE JWT and commons-jexl3","tree":{"sha":"a479f05ca5b52bc51aacec6ea710daa978bcfb51","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a479f05ca5b52bc51aacec6ea710daa978bcfb51"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2770bffe9f4aea52d1e2510b822e9b0771bd8339","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2770bffe9f4aea52d1e2510b822e9b0771bd8339","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2770bffe9f4aea52d1e2510b822e9b0771bd8339","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2770bffe9f4aea52d1e2510b822e9b0771bd8339/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"427d9633c7c06d550863e3e9023b9f787491b939","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/427d9633c7c06d550863e3e9023b9f787491b939","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/427d9633c7c06d550863e3e9023b9f787491b939"}],"stats":{"total":128,"additions":83,"deletions":45},"files":[{"sha":"0919c7e40e52f01de8cda12a8c00548fa44e61f7","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AuthProfileService.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2770bffe9f4aea52d1e2510b822e9b0771bd8339/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2770bffe9f4aea52d1e2510b822e9b0771bd8339/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java?ref=2770bffe9f4aea52d1e2510b822e9b0771bd8339","patch":"@@ -21,6 +21,8 @@\n import static org.apache.syncope.common.rest.api.service.JAXRSService.PARAM_PAGE;\n import static org.apache.syncope.common.rest.api.service.JAXRSService.PARAM_SIZE;\n \n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n import io.swagger.v3.oas.annotations.headers.Header;\n import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n@@ -107,6 +109,8 @@ PagedResult<AuthProfileTO> list(\n      *\n      * @param authProfileTO auth profile\n      */\n+    @Parameter(name = \"key\", description = \"AuthProfile's key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n     @PUT\n     @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })"},{"sha":"fa84239157cfb9e54cc1f69cb804d7eedb971900","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPEntityService.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2770bffe9f4aea52d1e2510b822e9b0771bd8339/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPEntityService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2770bffe9f4aea52d1e2510b822e9b0771bd8339/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPEntityService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPEntityService.java?ref=2770bffe9f4aea52d1e2510b822e9b0771bd8339","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -70,6 +73,8 @@ public interface SAML2IdPEntityService extends JAXRSService {\n      *\n      * @param entityTO entity to be created\n      */\n+    @Parameter(name = \"key\", description = \"SAML2IdPEntityTO's key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n     @POST\n     @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })"},{"sha":"47de0dd1d918c72bb4ea3da520f0d0bc1e96bfc1","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPEntityService.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2770bffe9f4aea52d1e2510b822e9b0771bd8339/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPEntityService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2770bffe9f4aea52d1e2510b822e9b0771bd8339/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPEntityService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPEntityService.java?ref=2770bffe9f4aea52d1e2510b822e9b0771bd8339","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -69,6 +72,8 @@ public interface SAML2SPEntityService extends JAXRSService {\n      *\n      * @param entityTO entity to be created\n      */\n+    @Parameter(name = \"key\", description = \"SAML2SPEntityTO's key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n     @POST\n     @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })"},{"sha":"bcdbb9140a97f65504039512b0ec14d70dcdbccc","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchIndexManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2770bffe9f4aea52d1e2510b822e9b0771bd8339/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2770bffe9f4aea52d1e2510b822e9b0771bd8339/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java?ref=2770bffe9f4aea52d1e2510b822e9b0771bd8339","patch":"@@ -141,7 +141,7 @@ public void after(final AnyCreatedUpdatedEvent<Any<?>> event) throws IOException\n                             AuthContextUtils.getDomain(), event.getAny().getType().getKind()),\n                     event.getAny().getKey()).\n                     retryOnConflict(elasticsearchUtils.getRetryOnConflict()).\n-                    doc(elasticsearchUtils.builder(event.getAny()));\n+                    doc(elasticsearchUtils.builder(event.getAny(), event.getDomain()));\n             UpdateResponse response = client.update(request, RequestOptions.DEFAULT);\n             LOG.debug(\"Index successfully updated for {}: {}\", event.getAny(), response);\n         } else {\n@@ -151,7 +151,7 @@ public void after(final AnyCreatedUpdatedEvent<Any<?>> event) throws IOException\n                     ElasticsearchUtils.getContextDomainName(\n                             AuthContextUtils.getDomain(), event.getAny().getType().getKind())).\n                     id(event.getAny().getKey()).\n-                    source(elasticsearchUtils.builder(event.getAny()));\n+                    source(elasticsearchUtils.builder(event.getAny(), event.getDomain()));\n             IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n             LOG.debug(\"Index successfully created for {}: {}\", event.getAny(), response);\n         }"},{"sha":"122c96f76fc839abd1eecbc215daa9911806a634","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":61,"deletions":37,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2770bffe9f4aea52d1e2510b822e9b0771bd8339/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2770bffe9f4aea52d1e2510b822e9b0771bd8339/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=2770bffe9f4aea52d1e2510b822e9b0771bd8339","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.common.xcontent.XContentFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -102,53 +103,62 @@ public void setNumberOfReplicas(final int numberOfReplicas) {\n      * Returns the builder specialized with content from the provided any.\n      *\n      * @param any user, group or any object to index\n+     * @param domain tenant information\n      * @return builder specialized with content from the provided any\n      * @throws IOException in case of errors\n      */\n     @Transactional\n-    public XContentBuilder builder(final Any<?> any) throws IOException {\n+    public XContentBuilder builder(final Any<?> any, final String domain) throws IOException {\n+        Set<String> resources = new HashSet<>();\n+        List<String> dynRealms = new ArrayList<>();\n+        AuthContextUtils.callAsAdmin(domain, () -> {\n+            resources.addAll(any instanceof User\n+                    ? userDAO.findAllResourceKeys(any.getKey())\n+                    : any instanceof AnyObject\n+                            ? anyObjectDAO.findAllResourceKeys(any.getKey())\n+                            : groupDAO.findAllResourceKeys(any.getKey()));\n+            dynRealms.addAll(any instanceof User\n+                    ? userDAO.findDynRealms(any.getKey())\n+                    : any instanceof AnyObject\n+                            ? anyObjectDAO.findDynRealms(any.getKey())\n+                            : groupDAO.findDynRealms(any.getKey()));\n+            return null;\n+        });\n+\n         XContentBuilder builder = XContentFactory.jsonBuilder().\n                 startObject().\n                 field(\"id\", any.getKey()).\n                 field(\"realm\", any.getRealm().getFullPath()).\n                 field(\"anyType\", any.getType().getKey()).\n                 field(\"creationDate\", any.getCreationDate()).\n-                field(\"creationContext\", any.getCreationContext()).\n                 field(\"creator\", any.getCreator()).\n                 field(\"lastChangeDate\", any.getLastChangeDate()).\n                 field(\"lastModifier\", any.getLastModifier()).\n-                field(\"lastChangeContext\", any.getLastChangeContext()).\n                 field(\"status\", any.getStatus()).\n-                field(\"resources\",\n-                        any instanceof User\n-                                ? userDAO.findAllResourceKeys(any.getKey())\n-                                : any instanceof AnyObject\n-                                        ? anyObjectDAO.findAllResourceKeys(any.getKey())\n-                                        : groupDAO.findAllResourceKeys(any.getKey())).\n-                field(\"dynRealms\",\n-                        any instanceof User\n-                                ? userDAO.findDynRealms(any.getKey())\n-                                : any instanceof AnyObject\n-                                        ? anyObjectDAO.findDynRealms(any.getKey())\n-                                        : groupDAO.findDynRealms(any.getKey()));\n+                field(\"resources\", resources).\n+                field(\"dynRealms\", dynRealms);\n \n         if (any instanceof AnyObject) {\n             AnyObject anyObject = ((AnyObject) any);\n             builder = builder.field(\"name\", anyObject.getName());\n \n-            List<Object> memberships = new ArrayList<>(anyObjectDAO.findAllGroupKeys(anyObject));\n+            Collection<String> memberships = AuthContextUtils.callAsAdmin(\n+                    domain, () -> anyObjectDAO.findAllGroupKeys(anyObject));\n             builder = builder.field(\"memberships\", memberships);\n \n-            List<Object> relationships = new ArrayList<>();\n-            List<Object> relationshipTypes = new ArrayList<>();\n-            anyObjectDAO.findAllRelationships(anyObject).forEach(relationship -> {\n-                relationships.add(relationship.getRightEnd().getKey());\n-                relationshipTypes.add(relationship.getType().getKey());\n+            List<String> relationships = new ArrayList<>();\n+            List<String> relationshipTypes = new ArrayList<>();\n+            AuthContextUtils.callAsAdmin(domain, () -> {\n+                anyObjectDAO.findAllRelationships(anyObject).forEach(relationship -> {\n+                    relationships.add(relationship.getRightEnd().getKey());\n+                    relationshipTypes.add(relationship.getType().getKey());\n+                });\n+                return null;\n             });\n             builder = builder.field(\"relationships\", relationships);\n             builder = builder.field(\"relationshipTypes\", relationshipTypes);\n \n-            builder = customizeBuilder(builder, anyObject);\n+            builder = customizeBuilder(builder, anyObject, domain);\n         } else if (any instanceof Group) {\n             Group group = ((Group) any);\n             builder = builder.field(\"name\", group.getName());\n@@ -159,15 +169,19 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n                 builder = builder.field(\"groupOwner\", group.getGroupOwner().getKey());\n             }\n \n-            List<Object> members = groupDAO.findUMemberships(group).stream().\n-                    map(membership -> membership.getLeftEnd().getKey()).collect(Collectors.toList());\n-            members.add(groupDAO.findUDynMembers(group));\n-            members.addAll(groupDAO.findAMemberships(group).stream().\n-                    map(membership -> membership.getLeftEnd().getKey()).collect(Collectors.toList()));\n-            members.add(groupDAO.findADynMembers(group));\n+            List<String> members = new ArrayList<>();\n+            AuthContextUtils.callAsAdmin(domain, () -> {\n+                members.addAll(groupDAO.findUMemberships(group).stream().\n+                        map(membership -> membership.getLeftEnd().getKey()).collect(Collectors.toList()));\n+                members.addAll(groupDAO.findUDynMembers(group));\n+                members.addAll(groupDAO.findAMemberships(group).stream().\n+                        map(membership -> membership.getLeftEnd().getKey()).collect(Collectors.toList()));\n+                members.addAll(groupDAO.findADynMembers(group));\n+                return null;\n+            });\n             builder = builder.field(\"members\", members);\n \n-            builder = customizeBuilder(builder, group);\n+            builder = customizeBuilder(builder, group, domain);\n         } else if (any instanceof User) {\n             User user = ((User) any);\n             builder = builder.\n@@ -182,14 +196,18 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n \n             List<String> roles = new ArrayList<>();\n             Set<String> privileges = new HashSet<>();\n-            userDAO.findAllRoles(user).forEach(role -> {\n-                roles.add(role.getKey());\n-                privileges.addAll(role.getPrivileges().stream().map(Privilege::getKey).collect(Collectors.toSet()));\n+            AuthContextUtils.callAsAdmin(domain, () -> {\n+                userDAO.findAllRoles(user).forEach(role -> {\n+                    roles.add(role.getKey());\n+                    privileges.addAll(role.getPrivileges().stream().map(Privilege::getKey).collect(Collectors.toSet()));\n+                });\n+                return null;\n             });\n             builder = builder.field(\"roles\", roles);\n             builder = builder.field(\"privileges\", privileges);\n \n-            Collection<String> memberships = userDAO.findAllGroupKeys(user);\n+            Collection<String> memberships = AuthContextUtils.callAsAdmin(\n+                    domain, () -> userDAO.findAllGroupKeys(user));\n             builder = builder.field(\"memberships\", memberships);\n \n             List<String> relationships = new ArrayList<>();\n@@ -201,7 +219,7 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n             builder = builder.field(\"relationships\", relationships);\n             builder = builder.field(\"relationshipTypes\", relationshipTypes);\n \n-            builder = customizeBuilder(builder, user);\n+            builder = customizeBuilder(builder, user, domain);\n         }\n \n         for (PlainAttr<?> plainAttr : any.getPlainAttrs()) {\n@@ -218,17 +236,23 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n         return builder.endObject();\n     }\n \n-    protected XContentBuilder customizeBuilder(final XContentBuilder builder, final AnyObject anyObject)\n+    protected XContentBuilder customizeBuilder(\n+            final XContentBuilder builder, final AnyObject anyObject, final String domain)\n             throws IOException {\n \n         return builder;\n     }\n \n-    protected XContentBuilder customizeBuilder(final XContentBuilder builder, final Group group) throws IOException {\n+    protected XContentBuilder customizeBuilder(\n+            final XContentBuilder builder, final Group group, final String domain)\n+            throws IOException {\n+\n         return builder;\n     }\n \n-    protected XContentBuilder customizeBuilder(final XContentBuilder builder, final User user) throws IOException {\n+    protected XContentBuilder customizeBuilder(final XContentBuilder builder, final User user, final String domain)\n+            throws IOException {\n+\n         return builder;\n     }\n }"},{"sha":"2fe15911a63b8329ac0adea6c07fcedc57d4c4c6","filename":"ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2770bffe9f4aea52d1e2510b822e9b0771bd8339/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2770bffe9f4aea52d1e2510b822e9b0771bd8339/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java?ref=2770bffe9f4aea52d1e2510b822e9b0771bd8339","patch":"@@ -49,7 +49,7 @@ public class ElasticsearchReindex extends AbstractSchedTaskJobDelegate {\n     protected ElasticsearchIndexManager indexManager;\n \n     @Autowired\n-    protected ElasticsearchUtils elasticsearchUtils;\n+    protected ElasticsearchUtils utils;\n \n     @Autowired\n     protected UserDAO userDAO;\n@@ -117,7 +117,7 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                                 ElasticsearchUtils.getContextDomainName(\n                                         AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n                                 id(user).\n-                                source(elasticsearchUtils.builder(userDAO.find(user)));\n+                                source(utils.builder(userDAO.find(user), AuthContextUtils.getDomain()));\n                         IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n                         LOG.debug(\"Index successfully created for {}: {}\", user, response);\n                     }\n@@ -130,7 +130,7 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                                 ElasticsearchUtils.getContextDomainName(\n                                         AuthContextUtils.getDomain(), AnyTypeKind.GROUP)).\n                                 id(group).\n-                                source(elasticsearchUtils.builder(groupDAO.find(group)));\n+                                source(utils.builder(groupDAO.find(group), AuthContextUtils.getDomain()));\n                         IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n                         LOG.debug(\"Index successfully created for {}: {}\", group, response);\n                     }\n@@ -143,7 +143,7 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                                 ElasticsearchUtils.getContextDomainName(\n                                         AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT)).\n                                 id(anyObject).\n-                                source(elasticsearchUtils.builder(anyObjectDAO.find(anyObject)));\n+                                source(utils.builder(anyObjectDAO.find(anyObject), AuthContextUtils.getDomain()));\n                         IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n                         LOG.debug(\"Index successfully created for {}: {}\", anyObject, response);\n                     }"},{"sha":"2b44260b3a185b797f6474bdfd2875e5e9635de3","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2770bffe9f4aea52d1e2510b822e9b0771bd8339/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2770bffe9f4aea52d1e2510b822e9b0771bd8339/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=2770bffe9f4aea52d1e2510b822e9b0771bd8339","patch":"@@ -406,7 +406,7 @@ under the License.\n \n     <cxf.version>3.4.3</cxf.version>\n     <bouncycastle.version>1.68</bouncycastle.version>\n-    <nimbus-jose-jwt.version>9.9.3</nimbus-jose-jwt.version>\n+    <nimbus-jose-jwt.version>9.10</nimbus-jose-jwt.version>\n \n     <jackson.version>2.12.3</jackson.version>\n \n@@ -439,7 +439,7 @@ under the License.\n     <log4j.version>2.14.1</log4j.version>\n     <disruptor.version>3.4.4</disruptor.version>\n     \n-    <commons-jexl.version>3.1</commons-jexl.version>\n+    <commons-jexl.version>3.2</commons-jexl.version>\n     <commons-lang.version>3.12.0</commons-lang.version>\n     <commons-text.version>1.9</commons-text.version>\n     <commons-codec.version>1.15</commons-codec.version>"}]}