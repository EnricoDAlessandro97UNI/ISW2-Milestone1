{"sha":"d6eda7330b39036981ac3121d8601b0b4c6b2bab","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ2ZWRhNzMzMGIzOTAzNjk4MWFjMzEyMWQ4NjAxYjBiNGM2YjJiYWI=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-18T14:13:20Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-18T14:13:20Z"},"message":"(Fixes issue #9)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246098 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7028b63a5b99e80c01b994c950ce1b0bb169d837","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7028b63a5b99e80c01b994c950ce1b0bb169d837"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d6eda7330b39036981ac3121d8601b0b4c6b2bab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d6eda7330b39036981ac3121d8601b0b4c6b2bab","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d6eda7330b39036981ac3121d8601b0b4c6b2bab","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d6eda7330b39036981ac3121d8601b0b4c6b2bab/comments","author":null,"committer":null,"parents":[{"sha":"145bc1fc4b291336177783cead4adfd0be10a993","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/145bc1fc4b291336177783cead4adfd0be10a993","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/145bc1fc4b291336177783cead4adfd0be10a993"}],"stats":{"total":448,"additions":390,"deletions":58},"files":[{"sha":"ebc348c84839fa7a84af70722a82f9c05942c683","filename":"client/src/main/java/org/syncope/client/to/AttributeSchemaTO.java","status":"modified","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAttributeSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAttributeSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAttributeSchemaTO.java?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -15,6 +15,73 @@\n package org.syncope.client.to;\n \n import java.io.Serializable;\n+import java.util.Set;\n+import org.syncope.types.AttributeType;\n \n public class AttributeSchemaTO implements Serializable {\n+\n+    private String name;\n+    private AttributeType type;\n+    private boolean mandatory;\n+    private boolean multivalue;\n+    private String conversionPattern;\n+    private String validatorClass;\n+    private Set<String> derivedAttributeSchemas;\n+\n+    public String getConversionPattern() {\n+        return conversionPattern;\n+    }\n+\n+    public void setConversionPattern(String conversionPattern) {\n+        this.conversionPattern = conversionPattern;\n+    }\n+\n+    public Set<String> getDerivedAttributeSchemas() {\n+        return derivedAttributeSchemas;\n+    }\n+\n+    public void setDerivedAttributeSchemas(Set<String> derivedAttributeSchemas) {\n+        this.derivedAttributeSchemas = derivedAttributeSchemas;\n+    }\n+\n+    public boolean isMandatory() {\n+        return mandatory;\n+    }\n+\n+    public void setMandatory(boolean mandatory) {\n+        this.mandatory = mandatory;\n+    }\n+\n+    public boolean isMultivalue() {\n+        return multivalue;\n+    }\n+\n+    public void setMultivalue(boolean multivalue) {\n+        this.multivalue = multivalue;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public AttributeType getType() {\n+        return type;\n+    }\n+\n+    public void setType(AttributeType type) {\n+        this.type = type;\n+    }\n+\n+    public String getValidatorClass() {\n+        return validatorClass;\n+    }\n+\n+    public void setValidatorClass(String validatorClass) {\n+        this.validatorClass = validatorClass;\n+    }\n+\n }"},{"sha":"110296ea1b1dc7e34e658fe8890cc590f5b1e51d","filename":"client/src/main/java/org/syncope/types/AttributeType.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAttributeType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAttributeType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAttributeType.java?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence;\n+package org.syncope.types;\n \n import java.text.DecimalFormat;\n import java.text.Format;","previous_filename":"core/src/main/java/org/syncope/core/persistence/AttributeType.java"},{"sha":"d90a1e975020717fa56f5a412ddf1eeac152aa05","filename":"core/pom.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -130,6 +130,11 @@\n             <artifactId>postgresql</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>org.dbunit</groupId>\n+            <artifactId>dbunit</artifactId>\n+        </dependency>\n+        \n         <dependency>\n             <groupId>log4j</groupId>\n             <artifactId>log4j</artifactId>\n@@ -167,11 +172,6 @@\n             <artifactId>spring-test</artifactId>\n             <scope>test</scope>\n         </dependency>\n-        <dependency>\n-            <groupId>org.dbunit</groupId>\n-            <artifactId>dbunit</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n         <dependency>\n             <groupId>org.mortbay.jetty</groupId>\n             <artifactId>jetty</artifactId>"},{"sha":"bf3193859feee54cea9c7e3bb8fba22dec3b43a5","filename":"core/src/main/java/org/syncope/core/persistence/DefaultContentLoader.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -0,0 +1,92 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence;\n+\n+import java.sql.Connection;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.sql.DataSource;\n+import org.dbunit.database.DatabaseConfig;\n+import org.dbunit.database.DatabaseConnection;\n+import org.dbunit.database.IDatabaseConnection;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.ITableIterator;\n+import org.dbunit.dataset.datatype.DefaultDataTypeFactory;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n+import org.springframework.web.context.WebApplicationContext;\n+import org.springframework.web.context.support.WebApplicationContextUtils;\n+\n+public class DefaultContentLoader implements ServletContextListener {\n+\n+    private static final Logger log = LoggerFactory.getLogger(\n+            DefaultContentLoader.class);\n+\n+    @Override\n+    public void contextInitialized(ServletContextEvent sce) {\n+        WebApplicationContext springContext =\n+                WebApplicationContextUtils.getWebApplicationContext(\n+                sce.getServletContext());\n+\n+        DataSource dataSource =\n+                (DataSource) springContext.getBean(\"dataSource\");\n+        DefaultDataTypeFactory dbUnitDataTypeFactory =\n+                (DefaultDataTypeFactory) springContext.getBean(\n+                \"dbUnitDataTypeFactory\");\n+\n+        Connection conn = DataSourceUtils.getConnection(dataSource);\n+        try {\n+            IDatabaseConnection dbUnitConn = new DatabaseConnection(conn);\n+\n+            DatabaseConfig config = dbUnitConn.getConfig();\n+            config.setProperty(\n+                    \"http://www.dbunit.org/properties/datatypeFactory\",\n+                    dbUnitDataTypeFactory);\n+\n+            boolean existingData = false;\n+            IDataSet existingDataSet = dbUnitConn.createDataSet();\n+            for (ITableIterator itor = existingDataSet.iterator();\n+                    itor.next() && !existingData;) {\n+\n+                existingData = (itor.getTable().getRowCount() > 0);\n+            }\n+\n+            if (existingData) {\n+                log.info(\"Data found in the database, leaving untouched\");\n+            } else {\n+                log.info(\"Empty database found, loading default content\");\n+\n+                FlatXmlDataSetBuilder dataSetBuilder = new FlatXmlDataSetBuilder();\n+                dataSetBuilder.setColumnSensing(true);\n+                IDataSet dataSet = dataSetBuilder.build(\n+                        getClass().getResourceAsStream(\n+                        \"/org/syncope/core/persistence/defaultContent.xml\"));\n+\n+                DatabaseOperation.REFRESH.execute(dbUnitConn, dataSet);\n+            }\n+        } catch (Throwable t) {\n+            log.error(\"While loading default content\", t);\n+        } finally {\n+            DataSourceUtils.releaseConnection(conn, dataSource);\n+        }\n+    }\n+\n+    @Override\n+    public void contextDestroyed(ServletContextEvent sce) {\n+    }\n+}"},{"sha":"33989f198ea3f14cf3f30dd848bd7cd0167068bc","filename":"core/src/main/java/org/syncope/core/persistence/beans/AttributeSchema.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAttributeSchema.java?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -29,10 +29,10 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import javax.persistence.Transient;\n-import org.syncope.core.persistence.AttributeType;\n import org.syncope.core.persistence.validation.AttributeBasicValidator;\n import org.syncope.core.persistence.validation.AttributeValidator;\n import org.syncope.core.persistence.validation.ValidatorInstantiationException;\n+import org.syncope.types.AttributeType;\n \n @Entity\n public class AttributeSchema extends AbstractBaseBean {"},{"sha":"3e2dc828585c0270b2658157f83227bcf8febcb2","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -0,0 +1,50 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Set;\n+import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.context.WebApplicationContext;\n+import org.springframework.web.servlet.support.RequestContextUtils;\n+import org.syncope.client.to.AttributeSchemaTO;\n+import org.syncope.core.persistence.dao.AttributeSchemaDAO;\n+\n+@Controller\n+@RequestMapping(\"/schema\")\n+public class SchemaController {\n+\n+    private static final Logger log = LoggerFactory.getLogger(\n+            SchemaController.class);\n+\n+    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n+    public Set<AttributeSchemaTO> list(HttpServletRequest request) throws IOException {\n+\n+        WebApplicationContext webApplicationContext =\n+                RequestContextUtils.getWebApplicationContext(request);\n+\n+        AttributeSchemaDAO attributeSchemaDAO =\n+                (AttributeSchemaDAO) webApplicationContext.getBean(\n+                \"attributeSchemaDAOImpl\");\n+\n+        return Collections.singleton(new AttributeSchemaTO());\n+    }\n+}"},{"sha":"79fd21ed27f8857c401b0494def9873fcafae56b","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":20,"deletions":1,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -16,9 +16,11 @@\n \n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -28,10 +30,13 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.context.WebApplicationContext;\n import org.springframework.web.servlet.ModelAndView;\n+import org.springframework.web.servlet.support.RequestContextUtils;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.SearchParameters;\n import org.syncope.client.to.UserTO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n \n /**\n  * TODO: call syncope-core\n@@ -40,7 +45,8 @@\n @RequestMapping(\"/user\")\n public class UserController {\n \n-    private static final Logger log = LoggerFactory.getLogger(UserController.class);\n+    private static final Logger log = LoggerFactory.getLogger(\n+            UserController.class);\n \n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public UserTO create(HttpServletResponse response,\n@@ -62,6 +68,19 @@ public void delete(HttpServletResponse response,\n         }\n     }\n \n+    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n+    public Set<UserTO> list(HttpServletRequest request) throws IOException {\n+\n+        WebApplicationContext webApplicationContext =\n+                RequestContextUtils.getWebApplicationContext(request);\n+\n+        SyncopeUserDAO syncopeUserDAO =\n+                (SyncopeUserDAO) webApplicationContext.getBean(\n+                \"syncopeUserDAOImpl\");\n+\n+        return Collections.singleton(new UserTO());\n+    }\n+\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{userId}\")\n     public ModelAndView read(@PathVariable(\"userId\") Long userId)\n             throws IOException {"},{"sha":"be6534b0a598cb1792705fb1e13b0b55e331972e","filename":"core/src/main/resources/META-INF/persistence.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -3,7 +3,7 @@\n              xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n              http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n              version=\"1.0\">\n-    <persistence-unit name=\"syncopePersistenceUnit\" transaction-type=\"RESOURCE_LOCAL\">\n+    <persistence-unit name=\"syncopePersistenceUnit\">\n         <properties>\n         </properties>\n     </persistence-unit>"},{"sha":"ff91ea41384eb5531d0df565baf5ee6916d3604c","filename":"core/src/main/resources/org/syncope/core/persistence/db.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -3,3 +3,4 @@ hibernate.connection.url=jdbc:postgresql://localhost:5432/syncope\n hibernate.connection.username=syncope\n hibernate.connection.password=syncope\n hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n+dbUnitDataTypeFactory=org.dbunit.ext.postgresql.PostgresqlDataTypeFactory\n\\ No newline at end of file"},{"sha":"036b0d890b815e83b31389258b3943521b347cc1","filename":"core/src/main/resources/org/syncope/core/persistence/defaultContent.xml","status":"added","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FdefaultContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FdefaultContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FdefaultContent.xml?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -0,0 +1,15 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<dataset>\n+    <AttributeSchema name=\"surname\" type=\"String\"\n+                     mandatory=\"true\" multivalue=\"false\"/>\n+    <AttributeSchema name=\"firstname\" type=\"String\"\n+                     mandatory=\"false\" multivalue=\"false\"/>\n+\n+    <DerivedAttributeSchema name=\"username\"\n+                            expression=\"firstname + '.' + surname\"/>\n+\n+    <DerivedAttributeSchema_AttributeSchema derivedAttributeSchemas_name=\"username\"\n+                                            attributeSchemas_name=\"firstname\"/>\n+    <DerivedAttributeSchema_AttributeSchema derivedAttributeSchemas_name=\"username\"\n+                                            attributeSchemas_name=\"surname\"/>\n+</dataset>"},{"sha":"140dd56e1f818b01db16f712ee949940cd0abadf","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -25,6 +25,8 @@\n         </property>\n     </bean>\n \n+    <bean id=\"dbUnitDataTypeFactory\" class=\"${dbUnitDataTypeFactory}\"/>\n+\n     <!-- Use JNDI datasource as default but, when not available, revert to\n          local datasource, using different properties for execution and testing -->\n     <bean id=\"dataSource\""},{"sha":"021917f824a8fdf91719c7773cb2e545cf818a1d","filename":"core/src/main/webapp/WEB-INF/sun-web.xml","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsun-web.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsun-web.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsun-web.xml?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -1,11 +1,9 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!DOCTYPE sun-web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Application Server 9.0 Servlet 2.5//EN\" \"http://www.sun.com/software/appserver/dtds/sun-web-app_2_5-0.dtd\">\n <sun-web-app error-url=\"\">\n-  <context-root>/syncope</context-root>\n-  <class-loader delegate=\"false\"/>\n-  <jsp-config>\n-    <property name=\"keepgenerated\" value=\"true\">\n-      <description>Keep a copy of the generated servlet class' java code.</description>\n-    </property>\n-  </jsp-config>\n+    <context-root>/syncope</context-root>\n+    <class-loader delegate=\"false\"/>\n+    <jsp-config>\n+        <property name=\"keepgenerated\" value=\"true\"/>\n+    </jsp-config>\n </sun-web-app>"},{"sha":"67761675cfd804beb7fe423a31245fa1d32ca864","filename":"core/src/main/webapp/WEB-INF/syncope-core-rest-servlet.xml","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","previous_filename":"core/src/main/resources/restContext.xml"},{"sha":"368be91f7dd5a1e803cc416e62a9d37083756127","filename":"core/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":18,"deletions":4,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -1,22 +1,36 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<web-app id=\"WebApp_ID\" version=\"2.4\"\n-         xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n+<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\">\n+         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\n+         version=\"2.5\">\n \n     <display-name>Syncope</display-name>\n \n     <context-param>\n         <param-name>log4jConfigLocation</param-name>\n         <param-value>/WEB-INF/classes/log4j.xml</param-value>\n     </context-param>\n+    <context-param>\n+        <param-name>contextConfigLocation</param-name>\n+        <param-value>classpath:*Context.xml</param-value>\n+    </context-param>\n+\n+    <listener>\n+        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n+    </listener>\n+    <listener>\n+        <listener-class>org.syncope.core.persistence.DefaultContentLoader</listener-class>\n+    </listener>\n \n     <servlet>\n         <servlet-name>syncope-core-rest</servlet-name>\n         <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n         <init-param>\n             <param-name>contextConfigLocation</param-name>\n-            <param-value>/WEB-INF/classes/*Context.xml</param-value>\n+            <param-value>\n+                /WEB-INF/syncope-core-rest-servlet.xml\n+                /WEB-INF/classes/*Context.xml\n+            </param-value>\n         </init-param>\n \n         <load-on-startup>1</load-on-startup>"},{"sha":"db19ae2a38138ad9d455ba79d61b0e315b1ea76c","filename":"core/src/test/java/org/syncope/core/persistence/test/AbstractDAOTest.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FAbstractDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FAbstractDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FAbstractDAOTest.java?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -14,7 +14,6 @@\n  */\n package org.syncope.core.persistence.test;\n \n-import java.io.FileInputStream;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n import java.sql.ResultSet;\n@@ -42,10 +41,12 @@\n @ContextConfiguration(locations = {\"classpath:persistenceContext.xml\"})\n public abstract class AbstractDAOTest {\n \n-    @Autowired\n-    protected DataSource dataSource;\n     protected static final Logger log = LoggerFactory.getLogger(\n             AbstractDAOTest.class);\n+    @Autowired\n+    private DataSource dataSource;\n+    @Autowired\n+    private HsqldbDataTypeFactory dbUnitDataTypeFactory;\n \n     private void logTableContent(Connection conn, String tableName)\n             throws SQLException {\n@@ -83,12 +84,12 @@ public void setUpTestDataWithinTransaction() throws Exception {\n \n         DatabaseConfig config = dbUnitConn.getConfig();\n         config.setProperty(\"http://www.dbunit.org/properties/datatypeFactory\",\n-                new HsqldbDataTypeFactory());\n+                dbUnitDataTypeFactory);\n \n         FlatXmlDataSetBuilder dataSetBuilder = new FlatXmlDataSetBuilder();\n         dataSetBuilder.setColumnSensing(true);\n-        IDataSet dataSet = dataSetBuilder.build(\n-                new FileInputStream(\"./src/test/resources/dbunitTestData.xml\"));\n+        IDataSet dataSet = dataSetBuilder.build(getClass().getResourceAsStream(\n+                \"/org/syncope/core/persistence/dbunitTestData.xml\"));\n         try {\n             DatabaseOperation.REFRESH.execute(dbUnitConn, dataSet);\n         } catch (Throwable t) {"},{"sha":"66a5a080747676a8ef25383f582d9350a50a46c0","filename":"core/src/test/java/org/syncope/core/persistence/test/AttributeDAOTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FAttributeDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FAttributeDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FAttributeDAOTest.java?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -20,12 +20,12 @@\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.AttributeType;\n import org.syncope.core.persistence.beans.AttributeSchema;\n import org.syncope.core.persistence.beans.Attribute;\n import org.syncope.core.persistence.dao.AttributeSchemaDAO;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.validation.ValidationException;\n+import org.syncope.types.AttributeType;\n \n @Transactional\n public class AttributeDAOTest extends AbstractDAOTest {"},{"sha":"f9fea7515a436f7ba549c161f9be3b66aa392554","filename":"core/src/test/java/org/syncope/core/persistence/test/AttributeSchemaDAOTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FAttributeSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FAttributeSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FAttributeSchemaDAOTest.java?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -22,7 +22,7 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.AttributeSchema;\n import org.syncope.core.persistence.dao.AttributeSchemaDAO;\n-import org.syncope.core.persistence.AttributeType;\n+import org.syncope.types.AttributeType;\n \n @Transactional\n public class AttributeSchemaDAOTest extends AbstractDAOTest {"},{"sha":"17df21fd204950fee3fb9ca292612c8d1449cec8","filename":"core/src/test/java/org/syncope/core/rest/test/AbstractTestITCase.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FAbstractTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FAbstractTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FAbstractTestITCase.java?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright 2010 ilgrosso.\n+ * \n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.test;\n+\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.web.client.RestTemplate;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\"file:src/main/webapp/WEB-INF/syncope-core-rest-servlet.xml\"})\n+public abstract class AbstractTestITCase {\n+\n+    protected static final Logger log = LoggerFactory.getLogger(SchemaTestITCase.class);\n+    protected static final String BASE_URL = \"http://localhost:8080/syncope/\";\n+    @Autowired\n+    protected RestTemplate restTemplate;\n+}"},{"sha":"6f6a663d43bca22df266b8683b5da4cb7fa4329b","filename":"core/src/test/java/org/syncope/core/rest/test/SchemaTestITCase.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FSchemaTestITCase.java?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -0,0 +1,36 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.test;\n+\n+import java.util.Set;\n+import org.junit.Test;\n+import org.syncope.client.to.AttributeSchemaTO;\n+import static org.junit.Assert.*;\n+\n+public class SchemaTestITCase extends AbstractTestITCase {\n+\n+    @Test\n+    public void list() {\n+        Set<AttributeSchemaTO> attributeSchemas =\n+                restTemplate.getForObject(BASE_URL + \"schema/list.json\",\n+                Set.class);\n+\n+        assertNotNull(attributeSchemas);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(attributeSchemas.toString());\n+        }\n+    }\n+}"},{"sha":"89cad3ebb83ba4c72fc8d2417f45a05ae199c517","filename":"core/src/test/java/org/syncope/core/rest/test/UserTestITCase.java","status":"renamed","additions":24,"deletions":23,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FUserTestITCase.java?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -18,29 +18,16 @@\n \n import java.util.Collections;\n import java.util.List;\n+import java.util.Set;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.web.client.HttpStatusCodeException;\n-import org.springframework.web.client.RestTemplate;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.SearchParameters;\n import org.syncope.client.to.UserTO;\n \n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\"classpath:restContext.xml\"})\n-public class RestUserTestITCase {\n-\n-    private static final Logger log = LoggerFactory.getLogger(RestUserTestITCase.class);\n-    private static final String BASE_URL = \"http://localhost:8080/syncope/user/\";\n-    @Autowired\n-    private RestTemplate restTemplate;\n-\n+public class UserTestITCase extends AbstractTestITCase {\n+    \n     @Test\n     public void create() {\n         AttributeTO attribute = new AttributeTO();\n@@ -51,7 +38,7 @@ public void create() {\n         newUserTO.setId(0L);\n         newUserTO.setAttributes(Collections.singleton(attribute));\n \n-        UserTO userTO = restTemplate.postForObject(BASE_URL + \"create\",\n+        UserTO userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n                 newUserTO, UserTO.class);\n \n         assertEquals(newUserTO, userTO);\n@@ -60,15 +47,29 @@ public void create() {\n     @Test\n     public void delete() {\n         try {\n-            restTemplate.delete(BASE_URL + \"delete/{userId}\", \"0\");\n+            restTemplate.delete(BASE_URL + \"user/delete/{userId}\", \"0\");\n         } catch (HttpStatusCodeException e) {\n             assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n         }\n     }\n \n+    @Test\n+    public void list() {\n+        Set<UserTO> users = restTemplate.getForObject(BASE_URL\n+                + \"user/list.json\",\n+                Set.class);\n+\n+        assertNotNull(users);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(users.toString());\n+        }\n+    }\n+\n     @Test\n     public void read() {\n-        UserTO userTO = restTemplate.getForObject(BASE_URL + \"read/{userId}.json\",\n+        UserTO userTO = restTemplate.getForObject(BASE_URL\n+                + \"user/read/{userId}.json\",\n                 UserTO.class, \"0\");\n \n         assertNotNull(userTO);\n@@ -80,7 +81,7 @@ public void read() {\n \n     @Test\n     public void passwordReset() {\n-        String tokenId = restTemplate.getForObject(BASE_URL\n+        String tokenId = restTemplate.getForObject(BASE_URL + \"user/\"\n                 + \"passwordReset/{userId}.json\"\n                 + \"?passwordResetFormURL={passwordResetFormURL}\"\n                 + \"&gotoURL={gotoURL}\",\n@@ -90,7 +91,7 @@ public void passwordReset() {\n \n         assertNotNull(tokenId);\n \n-        restTemplate.put(BASE_URL + \"passwordReset/{userId}.json\"\n+        restTemplate.put(BASE_URL + \"user/passwordReset/{userId}.json\"\n                 + \"?tokenId={tokenId}&newPassword={newPassword}\",\n                 null, \"0\", tokenId, \"newPassword\");\n     }\n@@ -100,7 +101,7 @@ public void search() {\n         SearchParameters searchParameters = new SearchParameters();\n \n         List<UserTO> matchedUsers = restTemplate.postForObject(\n-                BASE_URL + \"search\",\n+                BASE_URL + \"user/search\",\n                 searchParameters, List.class);\n \n         assertNotNull(matchedUsers);\n@@ -116,7 +117,7 @@ public void update() {\n         newUserTO.setId(0L);\n         newUserTO.setAttributes(Collections.singleton(attribute));\n \n-        UserTO userTO = restTemplate.postForObject(BASE_URL + \"update\",\n+        UserTO userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n                 newUserTO, UserTO.class);\n \n         assertEquals(newUserTO, userTO);","previous_filename":"core/src/test/java/org/syncope/core/rest/test/RestUserTestITCase.java"},{"sha":"0dee4025be25f128dc7990b47fa30cdde79b0760","filename":"core/src/test/resources/org/syncope/core/persistence/db.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -3,3 +3,4 @@ hibernate.connection.url=jdbc:hsqldb:mem:syncopeTest\n hibernate.connection.username=sa\n hibernate.connection.password=\n hibernate.dialect=org.hibernate.dialect.HSQLDialect\n+dbUnitDataTypeFactory=org.dbunit.ext.hsqldb.HsqldbDataTypeFactory\n\\ No newline at end of file"},{"sha":"be39c0bd16b7d3eb849072a36706adc84d87e786","filename":"core/src/test/resources/org/syncope/core/persistence/dbunitTestData.xml","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FdbunitTestData.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FdbunitTestData.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FdbunitTestData.xml?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","previous_filename":"core/src/test/resources/dbunitTestData.xml"},{"sha":"f246103cad456fa3720b56759e0f09dd0ba86b50","filename":"pom.xml","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6eda7330b39036981ac3121d8601b0b4c6b2bab/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6eda7330b39036981ac3121d8601b0b4c6b2bab/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=d6eda7330b39036981ac3121d8601b0b4c6b2bab","patch":"@@ -105,7 +105,7 @@\n \n         <osworkflow.version>2.8.0</osworkflow.version>\n \n-        <org.springframework.version>3.0.2.RELEASE</org.springframework.version>\n+        <org.springframework.version>3.0.3.RELEASE</org.springframework.version>\n         <cglib.version>2.2</cglib.version>\n         <jackson.version>1.5.2</jackson.version>\n         <xstream.version>1.3.1</xstream.version>\n@@ -188,6 +188,12 @@\n                 <version>${postgresql.jdbc-driver.version}</version>\n             </dependency>\n \n+            <dependency>\n+                <groupId>org.dbunit</groupId>\n+                <artifactId>dbunit</artifactId>\n+                <version>${dbunit.version}</version>\n+            </dependency>\n+\n             <!-- Spring -->\n             <dependency>\n                 <groupId>org.springframework</groupId>\n@@ -280,12 +286,6 @@\n                 <version>${org.springframework.version}</version>\n                 <scope>test</scope>\n             </dependency>\n-            <dependency>\n-                <groupId>org.dbunit</groupId>\n-                <artifactId>dbunit</artifactId>\n-                <version>${dbunit.version}</version>\n-                <scope>test</scope>\n-            </dependency>\n             <dependency>\n                 <groupId>org.mortbay.jetty</groupId>\n                 <artifactId>jetty</artifactId>"}]}