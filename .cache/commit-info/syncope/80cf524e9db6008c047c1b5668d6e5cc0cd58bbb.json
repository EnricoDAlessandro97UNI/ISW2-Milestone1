{"sha":"80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgwY2Y1MjRlOWRiNjAwOGMwNDdjMWI1NjY4ZDZlNWNjMGNkNThiYmI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2020-07-27T13:26:29Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-07-27T13:26:29Z"},"message":"[SYNCOPE-1579] Adding SAML 2.0 support via pac4j-saml (#208)","tree":{"sha":"5fcd09fbd1683ba30cb68c464d71e2af0fcb826e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5fcd09fbd1683ba30cb68c464d71e2af0fcb826e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfHtYFCRBK7hj4Ov3rIwAAdHIIABejsc/muUPAUDC2CvdtAG9A\nSzdPYAORFBi64EnCIOPXKD5gKEgAMdF2f6s/5869RQfbioPVB6Dr1awQIYG6Ey5m\nfeAoLccz7cToYzdyNaNFyRpNzL8hNtXGQatgkogkEQFAUavcSxtZ3O7iB2+PU5q4\nHP7bdshvUcfGspYk8PptMP7IMlBMFQrRXNNe1QFYXi86Cn9M2695x9AGShXEY2UN\nl+fFZtMZzQqC8CK7isfzENOCd9q2dCjRu894clPZVA1nZIUqtHzPZ79VMGvjFyiv\nA1UHzxKRUrMk6pIyJ3nq4TQqeO0sV39fMX1yhapXTif/rGaYIKxcToCGY49m8aw=\n=QEPJ\n-----END PGP SIGNATURE-----\n","payload":"tree 5fcd09fbd1683ba30cb68c464d71e2af0fcb826e\nparent 6d2a8a2cbeb25b11aa0bd33737ee0a7f64adf4dc\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1595856389 +0200\ncommitter GitHub <noreply@github.com> 1595856389 +0200\n\n[SYNCOPE-1579] Adding SAML 2.0 support via pac4j-saml (#208)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"6d2a8a2cbeb25b11aa0bd33737ee0a7f64adf4dc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6d2a8a2cbeb25b11aa0bd33737ee0a7f64adf4dc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6d2a8a2cbeb25b11aa0bd33737ee0a7f64adf4dc"}],"stats":{"total":2297,"additions":1797,"deletions":500},"files":[{"sha":"a1c919dc0a8b96ce910cf36d84a2f5768bc8b26c","filename":"archetype/src/main/resources/archetype-resources/wa/pom.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fwa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fwa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fwa%2Fpom.xml?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -32,10 +32,6 @@ under the License.\n   <artifactId>${artifactId}</artifactId>\n   <packaging>war</packaging>\n \n-  <properties>\n-    <opensaml.version>3.4.5</opensaml.version>\n-  </properties>\n-\n   <dependencies>\n     <dependency>\n       <groupId>${groupId}</groupId>"},{"sha":"f5b73d4a747b78d40848ea5d5f9246c97b245aed","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WASAML2IdPMetadataService.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2IdPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2IdPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2IdPMetadataService.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -51,6 +51,8 @@\n @Path(\"wa/saml2idp/metadata\")\n public interface WASAML2IdPMetadataService extends JAXRSService {\n \n+    String DEFAULT_OWNER = \"Syncope\";\n+\n     /**\n      * Returns a document outlining keys and metadata of Syncope as SAML 2.0 IdP.\n      *\n@@ -60,7 +62,7 @@ public interface WASAML2IdPMetadataService extends JAXRSService {\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2IdPMetadataTO getByOwner(@QueryParam(\"appliesTo\") @DefaultValue(\"Syncope\") String appliesTo);\n+    SAML2IdPMetadataTO getByOwner(@QueryParam(\"appliesTo\") @DefaultValue(DEFAULT_OWNER) String appliesTo);\n \n     /**\n      * Returns the SAML 2.0 IdP metadata matching the given key."},{"sha":"19d0901ef79c667b164186bf00d25e1cfcde529d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n@@ -255,11 +254,10 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n         clearUDynMembers(merged);\n         if (merged.getUDynMembership() != null) {\n             SearchCond cond = buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm());\n-            int count = searchDAO.count(\n-                    Collections.<String>singleton(merged.getRealm().getFullPath()), cond, AnyTypeKind.USER);\n+            int count = searchDAO.count(Set.of(merged.getRealm().getFullPath()), cond, AnyTypeKind.USER);\n             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                 List<User> matching = searchDAO.search(\n-                        Collections.<String>singleton(merged.getRealm().getFullPath()),\n+                        Set.of(merged.getRealm().getFullPath()),\n                         cond,\n                         page,\n                         AnyDAO.DEFAULT_PAGE_SIZE,\n@@ -279,11 +277,10 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n         clearADynMembers(merged);\n         merged.getADynMemberships().forEach(memb -> {\n             SearchCond cond = buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm());\n-            int count = searchDAO.count(\n-                    Collections.<String>singleton(merged.getRealm().getFullPath()), cond, AnyTypeKind.ANY_OBJECT);\n+            int count = searchDAO.count(Set.of(merged.getRealm().getFullPath()), cond, AnyTypeKind.ANY_OBJECT);\n             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                 List<AnyObject> matching = searchDAO.search(\n-                        Collections.<String>singleton(merged.getRealm().getFullPath()),\n+                        Set.of(merged.getRealm().getFullPath()),\n                         cond,\n                         page,\n                         AnyDAO.DEFAULT_PAGE_SIZE,"},{"sha":"81bd3457d8a926023787801f37c351891ce34274","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MappingManagerImplTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImplTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImplTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImplTest.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -264,7 +264,7 @@ public void issueSYNCOPE1583() {\n         // 2. verify that dynamic membership is in place\n         assertTrue(userDAO.findAllGroupKeys(user).contains(group.getKey()));\n \n-        // 3.\n+        // 3. check propagation attrs\n         ExternalResource csv = resourceDAO.find(\"resource-csv\");\n         Provision provision = csv.getProvision(AnyTypeKind.USER.name()).get();\n         assertNotNull(provision);"},{"sha":"d7531e271c7c191412a349df76e67e13856c7d53","filename":"docker/wa/pom.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/docker%2Fwa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/docker%2Fwa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fwa%2Fpom.xml?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -34,8 +34,6 @@ under the License.\n   <packaging>war</packaging>\n \n   <properties>\n-    <opensaml.version>4.0.0</opensaml.version>\n-\n     <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n   </properties>\n   "},{"sha":"01534fdbc08e3da1a8c641d7e1556e37a1cd21a3","filename":"docker/wa/src/main/resources/wa.properties","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -27,9 +27,13 @@ cas.server.name=http://localhost:8080\n cas.server.prefix=${cas.server.name}/syncope-wa\n cas.server.scope=syncope.org\n \n+cas.tgc.secure=false\n cas.logout.follow-service-redirects=true\n \n-cas.authn.saml-idp.entity-id=https://syncope.apache.org/saml\n+cas.authn.saml-idp.entity-id=http://localhost:8080/saml\n+cas.authn.saml-idp.metadata.metadata-backup-location=file:${conf.directory}/saml\n+\n+cas.authn.oidc.issuer=http://localhost:8080/syncope-wa/oidc/\n \n # Disable access to the login endpoint\n # if no target application is specified."},{"sha":"68cacbd951298a875ca92be7e329192945222835","filename":"ext/saml2sp/pom.xml","status":"modified","additions":67,"deletions":1,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/ext%2Fsaml2sp%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/ext%2Fsaml2sp%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpom.xml?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -34,9 +34,75 @@ under the License.\n   <packaging>pom</packaging>\n   \n   <properties>\n+    <opensaml.version>3.3.1</opensaml.version>\n     <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n   </properties>\n-  \n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <!-- OpenSAML -->\n+      <dependency>\n+        <groupId>org.opensaml</groupId>\n+        <artifactId>opensaml-saml-api</artifactId>\n+        <version>${opensaml.version}</version>\n+        <exclusions>\n+          <exclusion>\n+            <groupId>org.opensaml</groupId>\n+            <artifactId>opensaml-storage-api</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.opensaml</groupId>\n+            <artifactId>opensaml-messaging-api</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.apache.velocity</groupId>\n+            <artifactId>velocity</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.apache.httpcomponents</groupId>\n+            <artifactId>httpclient</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>com.google.code.findbugs</groupId>\n+            <artifactId>jsr305</artifactId>\n+          </exclusion>\n+        </exclusions>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.opensaml</groupId>\n+        <artifactId>opensaml-saml-impl</artifactId>\n+        <version>${opensaml.version}</version>\n+        <exclusions>\n+          <exclusion>\n+            <groupId>org.opensaml</groupId>\n+            <artifactId>opensaml-soap-impl</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.opensaml</groupId>\n+            <artifactId>opensaml-storage-api</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.opensaml</groupId>\n+            <artifactId>opensaml-messaging-api</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.apache.velocity</groupId>\n+            <artifactId>velocity</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.apache.httpcomponents</groupId>\n+            <artifactId>httpclient</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>com.google.code.findbugs</groupId>\n+            <artifactId>jsr305</artifactId>\n+          </exclusion>\n+        </exclusions>\n+      </dependency>\n+      <!-- /OpenSAML -->\n+    </dependencies>\n+  </dependencyManagement>\n+\n   <modules>\n     <module>common-lib</module>\n     <module>persistence-api</module>"},{"sha":"9bf1300c4e82c08b970376dcffd2018cb1514688","filename":"fit/wa-reference/pom.xml","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/fit%2Fwa-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/fit%2Fwa-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fpom.xml?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -34,8 +34,6 @@ under the License.\n   <packaging>war</packaging>\n   \n   <properties>\n-    <opensaml.version>4.0.0</opensaml.version>\n-\n     <ianal.skip>true</ianal.skip>\n \n     <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n@@ -243,6 +241,13 @@ under the License.\n         <directory>src/test/resources</directory>\n         <filtering>true</filtering>\n       </testResource>\n+      <testResource>\n+        <directory>${basedir}/../../sra/src/test/resources/debug</directory>\n+        <filtering>false</filtering>\n+        <includes>\n+          <include>saml.keystore.jks</include>\n+        </includes>\n+      </testResource>\n     </testResources>\n   </build>\n   "},{"sha":"2e0162ba733b1f00d255c12d0921b7b55e4e1ec4","filename":"fit/wa-reference/src/main/resources/idp-metadata.xml","status":"removed","additions":0,"deletions":144,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d2a8a2cbeb25b11aa0bd33737ee0a7f64adf4dc/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fidp-metadata.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d2a8a2cbeb25b11aa0bd33737ee0a7f64adf4dc/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fidp-metadata.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fidp-metadata.xml?ref=6d2a8a2cbeb25b11aa0bd33737ee0a7f64adf4dc","patch":"@@ -1,144 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-  ~ Licensed to the Apache Software Foundation (ASF) under one\n-  ~ or more contributor license agreements.  See the NOTICE file\n-  ~ distributed with this work for additional information\n-  ~ regarding copyright ownership.  The ASF licenses this file\n-  ~ to you under the Apache License, Version 2.0 (the\n-  ~ \"License\"); you may not use this file except in compliance\n-  ~ with the License.  You may obtain a copy of the License at\n-  ~\n-  ~    http://www.apache.org/licenses/LICENSE-2.0\n-  ~\n-  ~ Unless required by applicable law or agreed to in writing,\n-  ~ software distributed under the License is distributed on an\n-  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-  ~ KIND, either express or implied.  See the License for the\n-  ~ specific language governing permissions and limitations\n-  ~ under the License.\n-  -->\n-<EntityDescriptor xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" xmlns:shibmd=\"urn:mace:shibboleth:metadata:1.0\" xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xmlns:mdui=\"urn:oasis:names:tc:SAML:metadata:ui\" entityID=\"https://syncope.apache.org/idp\">\n-    <IDPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol urn:oasis:names:tc:SAML:1.1:protocol urn:mace:shibboleth:1.0\">\n-        <Extensions>\n-            <shibmd:Scope regexp=\"false\">example.net</shibmd:Scope>\n-        </Extensions>\n-        <KeyDescriptor use=\"signing\">\n-            <ds:KeyInfo>\n-                <ds:X509Data>\n-                    <ds:X509Certificate>MIIDLTCCAhWgAwIBAgIUVqwgQMQunB5UtoiiOqP1oQeg7lcwDQYJKoZIhvcNAQEL\n-                        BQAwHjEcMBoGA1UEAwwTbW1vYXl5ZWQudW5pY29uLm5ldDAeFw0xOTExMDExNDQ3\n-                        NDhaFw0zOTExMDExNDQ3NDhaMB4xHDAaBgNVBAMME21tb2F5eWVkLnVuaWNvbi5u\n-                        ZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDLXKHf93KZztJfCpNg\n-                        R/ip6EdOp3Z52HmwT32QlOzeby+2prqbOanQcs5oEeXoz6cdzjwOO6isnqZ3ES7p\n-                        BuVyuUoYVZyuXY6dsk6ANxeOXBRzGBS3ZemzYRQVmvQudNHUqdXpJelkFZvz3Au2\n-                        I594V2PZjywtuGIUb+T7j+8hh6Srf8c/W/KmC3KLFfU2yDQrcjuhGv+0Py5ZUpXs\n-                        EANs/d/AYV+LbMp3UtvWSOy8xGb+xxjS2KhTd53Oc6xsCgTPgTM5Y3DVA0ERNH+n\n-                        ppngRi/t3NggIN0EKYAS6ZqJi1GBEVHFOoacebLSy/UQA8tYI170/gf03/OYwO2S\n-                        9GATAgMBAAGjYzBhMB0GA1UdDgQWBBQxJh8NNf+qGJNZPlOItCWFQFY/wDBABgNV\n-                        HREEOTA3ghNtbW9heXllZC51bmljb24ubmV0hiBtbW9heXllZC51bmljb24ubmV0\n-                        L2lkcC9tZXRhZGF0YTANBgkqhkiG9w0BAQsFAAOCAQEAMMOb+f4Log69KUeAEvgh\n-                        sWTjiZujvl44nY4roXofAoXYc3vos/p5JVwEtrxgTLdyTsz65kZtaRISRrUJ3k0n\n-                        K22L2eXGa85qPhdKivRyNip5AMVi0zSXC6uhG50571Gy5UK/Rh3gvg7VM8GUFDHL\n-                        +Zay9ffV9lf0UVmFObA+PAe+HNY/dYRLIP9/pFW0+c1MmFtwCTrO4xbecfzA+Yde\n-                        9dbaBjS4veOSvFKiaCOvsiIVEUt1J7NrqM5sgYvOR5Q5zv0G72pmzS8cuGe2UP7e\n-                        i24oGm471cMDTLyFLYMCL8veHydcgfIV9z5g0PksV0kQL91r4XVkIp3iFZJ+TUBF\n-                        zg==</ds:X509Certificate>\n-                </ds:X509Data>\n-            </ds:KeyInfo>\n-        </KeyDescriptor>\n-        <KeyDescriptor use=\"encryption\">\n-            <ds:KeyInfo>\n-                <ds:X509Data>\n-                    <ds:X509Certificate>MIIDLTCCAhWgAwIBAgIUKymtgciRE6pWwDfrsI58qL9pQMgwDQYJKoZIhvcNAQEL\n-                        BQAwHjEcMBoGA1UEAwwTbW1vYXl5ZWQudW5pY29uLm5ldDAeFw0xOTExMDExNDQ3\n-                        NDhaFw0zOTExMDExNDQ3NDhaMB4xHDAaBgNVBAMME21tb2F5eWVkLnVuaWNvbi5u\n-                        ZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCKrT805sny3vlaYjTn\n-                        +m6m3VbUoStvnacgwHH+orNFhHoV1HP2ndoH5BsEDB9tQYuyRbGUm/nYVOSHayzB\n-                        G3bzMGdU7woO6rsCqpHuxUyEvojd/y/N/r9jMzeBOCu0KDBTrn3BJhnGSwSTfhOS\n-                        3r20JFmDuTkHmabRs7ro0BvDaQ29jh38ro1iwB4E/4mqb1zYP13NI3ooErN/o6pl\n-                        XKpnFY37bDDOyOuocjN9tfPNIANNFKah0HjWOP0Nso0D1g6jHOSzmOw/Yxg61vBk\n-                        qOD4aKhLYPAxsXRl80nDrwTnm3/9xLQj9D3uLAtDLnn9pSqn3jCLxsxsHfKL/zkB\n-                        IKEBAgMBAAGjYzBhMB0GA1UdDgQWBBSrPjAgCJIHYmsofDcDIPzEhnYxmTBABgNV\n-                        HREEOTA3ghNtbW9heXllZC51bmljb24ubmV0hiBtbW9heXllZC51bmljb24ubmV0\n-                        L2lkcC9tZXRhZGF0YTANBgkqhkiG9w0BAQsFAAOCAQEAI8MlofbE0tbq8ez2d0Lq\n-                        Syhp4Q/shMEwjqcDarOwR+ACB9McOannUpAG7TCDp8Ch5E/V1B0Uo/5DF2tAzB1y\n-                        7sgAmy2mY9/mFhMYpOqTCagufwewaMkn9n7ETzC/6vQEjYrjiNyNR0F3UQQz2bhe\n-                        ROM3YuKctuOnMthc+ZE7vn+AXCGumRHBhyCaYdzfeUh7id+yrd9B51+o3iF4eu6w\n-                        zJi5z7FMCS6I4PSc/uWYDw1ahzoPONjazWSEWGUibZaJYM3pJHkuwqyWKOFGVknH\n-                        J1Qv4WCfSPb6eva94TZX0lkLM01C7NZObnfxY3fvJGcyFl8wlRTUYvuqM8md5CEp\n-                        LA==</ds:X509Certificate>\n-                </ds:X509Data>\n-            </ds:KeyInfo>\n-        </KeyDescriptor>\n-\n-        <!--\n-        <ArtifactResolutionService Binding=\"urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding\"\n-                                   Location=\"https://syncope.apache.org/cas/idp/profile/SAML1/SOAP/ArtifactResolution\" index=\"1\"/>\n-        -->\n-\n-        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/POST/SLO\"/>\n-        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/Redirect/SLO\" />\n-\n-        <NameIDFormat>urn:mace:shibboleth:1.0:nameIdentifier</NameIDFormat>\n-        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>\n-\n-        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/POST/SSO\"/>\n-        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/POST-SimpleSign/SSO\"/>\n-        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/Redirect/SSO\"/>\n-        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/SOAP/ECP\"/>\n-    </IDPSSODescriptor>\n-\n-    <!--\n-    <AttributeAuthorityDescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:1.1:protocol urn:oasis:names:tc:SAML:2.0:protocol\">\n-        <Extensions>\n-            <shibmd:Scope regexp=\"false\">example.net</shibmd:Scope>\n-        </Extensions>\n-        <KeyDescriptor use=\"signing\">\n-            <ds:KeyInfo>\n-                <ds:X509Data>\n-                    <ds:X509Certificate>MIIDLTCCAhWgAwIBAgIUVqwgQMQunB5UtoiiOqP1oQeg7lcwDQYJKoZIhvcNAQEL\n-BQAwHjEcMBoGA1UEAwwTbW1vYXl5ZWQudW5pY29uLm5ldDAeFw0xOTExMDExNDQ3\n-NDhaFw0zOTExMDExNDQ3NDhaMB4xHDAaBgNVBAMME21tb2F5eWVkLnVuaWNvbi5u\n-ZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDLXKHf93KZztJfCpNg\n-R/ip6EdOp3Z52HmwT32QlOzeby+2prqbOanQcs5oEeXoz6cdzjwOO6isnqZ3ES7p\n-BuVyuUoYVZyuXY6dsk6ANxeOXBRzGBS3ZemzYRQVmvQudNHUqdXpJelkFZvz3Au2\n-I594V2PZjywtuGIUb+T7j+8hh6Srf8c/W/KmC3KLFfU2yDQrcjuhGv+0Py5ZUpXs\n-EANs/d/AYV+LbMp3UtvWSOy8xGb+xxjS2KhTd53Oc6xsCgTPgTM5Y3DVA0ERNH+n\n-ppngRi/t3NggIN0EKYAS6ZqJi1GBEVHFOoacebLSy/UQA8tYI170/gf03/OYwO2S\n-9GATAgMBAAGjYzBhMB0GA1UdDgQWBBQxJh8NNf+qGJNZPlOItCWFQFY/wDBABgNV\n-HREEOTA3ghNtbW9heXllZC51bmljb24ubmV0hiBtbW9heXllZC51bmljb24ubmV0\n-L2lkcC9tZXRhZGF0YTANBgkqhkiG9w0BAQsFAAOCAQEAMMOb+f4Log69KUeAEvgh\n-sWTjiZujvl44nY4roXofAoXYc3vos/p5JVwEtrxgTLdyTsz65kZtaRISRrUJ3k0n\n-K22L2eXGa85qPhdKivRyNip5AMVi0zSXC6uhG50571Gy5UK/Rh3gvg7VM8GUFDHL\n-+Zay9ffV9lf0UVmFObA+PAe+HNY/dYRLIP9/pFW0+c1MmFtwCTrO4xbecfzA+Yde\n-9dbaBjS4veOSvFKiaCOvsiIVEUt1J7NrqM5sgYvOR5Q5zv0G72pmzS8cuGe2UP7e\n-i24oGm471cMDTLyFLYMCL8veHydcgfIV9z5g0PksV0kQL91r4XVkIp3iFZJ+TUBF\n-zg==</ds:X509Certificate>\n-                </ds:X509Data>\n-            </ds:KeyInfo>\n-        </KeyDescriptor>\n-        <AttributeService Binding=\"urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML1/SOAP/AttributeQuery\"/>\n-        <AttributeService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://syncope.apache.org/cas/idp/profile/SAML2/SOAP/AttributeQuery\"/>\n-    </AttributeAuthorityDescriptor>\n-    -->\n-\n-    <!--\n-    <Organization>\n-        <OrganizationName xml:lang=\"en\">Institution Name</OrganizationName>\n-        <OrganizationDisplayName xml:lang=\"en\">Institution DisplayName</OrganizationDisplayName>\n-        <OrganizationURL xml:lang=\"en\">URL</OrganizationURL>\n-    </Organization>\n-    <ContactPerson contactType=\"administrative\">\n-        <GivenName>John Smith</GivenName>\n-        <EmailAddress>jsmith@example.org</EmailAddress>\n-    </ContactPerson>\n-    <ContactPerson contactType=\"technical\">\n-        <GivenName>John Smith</GivenName>\n-        <EmailAddress>jsmith@example.org</EmailAddress>\n-    </ContactPerson>\n-    <ContactPerson contactType=\"support\">\n-        <GivenName>IT Services Support</GivenName>\n-        <EmailAddress>support@example.org</EmailAddress>\n-    </ContactPerson>\n-    -->\n-</EntityDescriptor>"},{"sha":"8c94d91c97178116bed6a339640ab5d84504e29d","filename":"fit/wa-reference/src/main/resources/wa.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -31,7 +31,8 @@ cas.authn.syncope.url=http://localhost:9080/syncope/rest/\n cas.tgc.secure=false\n cas.logout.follow-service-redirects=true\n \n-cas.authn.saml-idp.entity-id=https://syncope.apache.org/saml\n+cas.authn.saml-idp.entity-id=http://localhost:9080/saml\n+cas.authn.saml-idp.metadata.metadata-backup-location=file:${conf.directory}/saml\n \n cas.authn.oidc.issuer=http://localhost:9080/syncope-wa/oidc/\n cas.authn.oidc.id-token-signing-alg-values-supported=RS256,RS384,RS512,PS256,PS384,PS512,ES256,ES384,ES512,HS256,HS384,HS512"},{"sha":"db6e6a0bf4bb3c78f774b4cd00693783778e2875","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/AbstractITCase.java","status":"modified","additions":106,"deletions":76,"changes":182,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractITCase.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -19,41 +19,54 @@\n package org.apache.syncope.fit.sra;\n \n import static org.awaitility.Awaitility.await;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.ConnectException;\n import java.net.InetSocketAddress;\n import java.net.Socket;\n import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.http.Consts;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n-import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.to.SRARouteTO;\n-import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n-import org.apache.syncope.common.lib.types.ClientAppType;\n-import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.SRARouteFilter;\n import org.apache.syncope.common.lib.types.SRARouteFilterFactory;\n import org.apache.syncope.common.lib.types.SRARoutePredicate;\n import org.apache.syncope.common.lib.types.SRARoutePredicateFactory;\n import org.apache.syncope.common.lib.types.SRARouteType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.AuthModuleService;\n import org.apache.syncope.common.rest.api.service.ClientAppService;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n import org.apache.syncope.common.rest.api.service.SRARouteService;\n@@ -89,8 +102,6 @@ public abstract class AbstractITCase {\n \n     protected static SyncopeClient adminClient;\n \n-    protected static AuthModuleService authModuleService;\n-\n     protected static PolicyService policyService;\n \n     protected static ClientAppService clientAppService;\n@@ -104,11 +115,9 @@ public static void restSetup() {\n         clientFactory = new SyncopeClientFactoryBean().setAddress(CORE_ADDRESS);\n         adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n \n-        authModuleService = adminClient.getService(AuthModuleService.class);\n         policyService = adminClient.getService(PolicyService.class);\n         clientAppService = adminClient.getService(ClientAppService.class);\n         sraRouteService = adminClient.getService(SRARouteService.class);\n-\n     }\n \n     @BeforeAll\n@@ -193,70 +202,6 @@ public static void sraRouteSetup() {\n         }\n     }\n \n-    protected static void oidcClientAppSetup(\n-            final String appName,\n-            final String sraRegistrationId,\n-            final Long clientAppId,\n-            final String clientId,\n-            final String clientSecret) {\n-\n-        AuthModuleTO syncopeAuthModule = authModuleService.list().stream().\n-                filter(module -> module.getConf() instanceof SyncopeAuthModuleConf).\n-                findFirst().orElseThrow(() -> new IllegalArgumentException(\"Could not find Syncope Auth Module\"));\n-\n-        AuthPolicyTO syncopeAuthPolicy = policyService.list(PolicyType.AUTH).stream().\n-                map(AuthPolicyTO.class::cast).\n-                filter(policy -> policy.getConf() instanceof DefaultAuthPolicyConf\n-                && ((DefaultAuthPolicyConf) policy.getConf()).getAuthModules().contains(syncopeAuthModule.getKey())).\n-                findFirst().\n-                orElseGet(() -> {\n-                    DefaultAuthPolicyConf policyConf = new DefaultAuthPolicyConf();\n-                    policyConf.getAuthModules().add(syncopeAuthModule.getKey());\n-\n-                    AuthPolicyTO policy = new AuthPolicyTO();\n-                    policy.setDescription(\"Syncope authentication\");\n-                    policy.setConf(policyConf);\n-\n-                    Response response = policyService.create(PolicyType.AUTH, policy);\n-                    if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-                        fail(\"Could not create Syncope Auth Policy\");\n-                    }\n-\n-                    return policyService.read(PolicyType.AUTH, response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n-                });\n-\n-        OIDCRPTO clientApp = clientAppService.list(ClientAppType.OIDCRP).stream().\n-                filter(app -> appName.equals(app.getName())).\n-                map(OIDCRPTO.class::cast).\n-                findFirst().\n-                orElseGet(() -> {\n-                    OIDCRPTO app = new OIDCRPTO();\n-                    app.setName(appName);\n-                    app.setClientAppId(clientAppId);\n-                    app.setClientId(clientId);\n-                    app.setClientSecret(clientSecret);\n-\n-                    Response response = clientAppService.create(ClientAppType.OIDCRP, app);\n-                    if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-                        fail(\"Could not create OIDC Client App\");\n-                    }\n-\n-                    return clientAppService.read(\n-                            ClientAppType.OIDCRP, response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n-                });\n-\n-        clientApp.setClientId(clientId);\n-        clientApp.setClientSecret(clientSecret);\n-        clientApp.setSubjectType(OIDCSubjectType.PUBLIC);\n-        clientApp.getRedirectUris().add(SRA_ADDRESS + \"/login/oauth2/code/\" + sraRegistrationId);\n-        clientApp.setAuthPolicy(syncopeAuthPolicy.getKey());\n-        clientApp.setSignIdToken(true);\n-        clientApp.setLogoutUri(SRA_ADDRESS + \"/logout\");\n-\n-        clientAppService.update(ClientAppType.OIDCRP, clientApp);\n-        clientAppService.pushToWA();\n-    }\n-\n     protected static void doStartSRA(final String activeProfile)\n             throws IOException, InterruptedException, TimeoutException {\n \n@@ -304,16 +249,101 @@ protected static void doStartSRA(final String activeProfile)\n             }\n             return connected;\n         });\n-        assertTrue(WebClient.create(SRA_ADDRESS).get().getStatus() < 400);\n+        assertDoesNotThrow(() -> WebClient.create(SRA_ADDRESS).get().getStatus());\n \n         sraRouteService.pushToSRA();\n     }\n \n+    protected static AuthPolicyTO getAuthPolicy() {\n+        String authModule = \"DefaultSyncopeAuthModule\";\n+\n+        return policyService.list(PolicyType.AUTH).stream().\n+                map(AuthPolicyTO.class::cast).\n+                filter(policy -> policy.getConf() instanceof DefaultAuthPolicyConf\n+                && ((DefaultAuthPolicyConf) policy.getConf()).getAuthModules().contains(authModule)).\n+                findFirst().\n+                orElseGet(() -> {\n+                    DefaultAuthPolicyConf policyConf = new DefaultAuthPolicyConf();\n+                    policyConf.getAuthModules().add(authModule);\n+\n+                    AuthPolicyTO policy = new AuthPolicyTO();\n+                    policy.setDescription(\"Syncope authentication\");\n+                    policy.setConf(policyConf);\n+\n+                    Response response = policyService.create(PolicyType.AUTH, policy);\n+                    if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                        fail(\"Could not create Syncope Auth Policy\");\n+                    }\n+\n+                    return policyService.read(PolicyType.AUTH, response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                });\n+    }\n+\n     @AfterAll\n     public static void stopSRA() throws InterruptedException {\n         if (SRA != null) {\n             SRA.destroy();\n             SRA.waitFor();\n         }\n     }\n+\n+    protected static String extractCASExecution(final String responseBody) {\n+        int begin = responseBody.indexOf(\"name=\\\"execution\\\" value=\\\"\");\n+        assertNotEquals(-1, begin);\n+        int end = responseBody.indexOf(\"\\\"/><input type=\\\"hidden\\\" name=\\\"_eventId\\\"\");\n+        assertNotEquals(-1, end);\n+\n+        String execution = responseBody.substring(begin + 24, end);\n+        assertNotNull(execution);\n+        return execution;\n+    }\n+\n+    protected static CloseableHttpResponse authenticateToCas(\n+            final String responseBody, final CloseableHttpClient httpclient, final HttpClientContext context)\n+            throws IOException {\n+\n+        List<NameValuePair> form = new ArrayList<>();\n+        form.add(new BasicNameValuePair(\"_eventId\", \"submit\"));\n+        form.add(new BasicNameValuePair(\"execution\", extractCASExecution(responseBody)));\n+        form.add(new BasicNameValuePair(\"username\", \"bellini\"));\n+        form.add(new BasicNameValuePair(\"password\", \"password\"));\n+        form.add(new BasicNameValuePair(\"geolocation\", \"\"));\n+\n+        HttpPost post = new HttpPost(WA_ADDRESS + \"/login\");\n+        post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        post.setEntity(new UrlEncodedFormEntity(form, Consts.UTF_8));\n+        return httpclient.execute(post, context);\n+    }\n+\n+    protected static ObjectNode checkGetResponse(\n+            final CloseableHttpResponse response, final String originalRequestURI) throws IOException {\n+\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        assertEquals(MediaType.APPLICATION_JSON, response.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue());\n+\n+        JsonNode json = OBJECT_MAPPER.readTree(EntityUtils.toString(response.getEntity()));\n+\n+        ObjectNode args = (ObjectNode) json.get(\"args\");\n+        assertEquals(\"value1\", args.get(\"key1\").asText());\n+\n+        ArrayNode key2 = (ArrayNode) args.get(\"key2\");\n+        assertEquals(\"value2\", key2.get(0).asText());\n+        assertEquals(\"value3\", key2.get(1).asText());\n+\n+        ObjectNode headers = (ObjectNode) json.get(\"headers\");\n+        assertEquals(MediaType.TEXT_HTML, headers.get(HttpHeaders.ACCEPT).asText());\n+        assertEquals(EN_LANGUAGE, headers.get(HttpHeaders.ACCEPT_LANGUAGE).asText());\n+        assertEquals(\"localhost:\" + PORT, headers.get(\"X-Forwarded-Host\").asText());\n+\n+        assertEquals(originalRequestURI, json.get(\"url\").asText());\n+\n+        return headers;\n+    }\n+\n+    protected void checkLogout(final CloseableHttpResponse response) throws IOException {\n+        assertEquals(HttpStatus.SC_NO_CONTENT, response.getStatusLine().getStatusCode());\n+        assertEquals(\"true\", response.getFirstHeader(LOGGED_OUT_HEADER).getValue());\n+    }\n }"},{"sha":"430c1ac6efb864be2619b27471e85c574dfcde8c","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/OAUTH2SRAITCase.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOAUTH2SRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOAUTH2SRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOAUTH2SRAITCase.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -18,10 +18,6 @@\n  */\n package org.apache.syncope.fit.sra;\n \n-import static org.apache.syncope.fit.sra.AbstractITCase.doStartSRA;\n-import static org.apache.syncope.fit.sra.AbstractITCase.oidcClientAppSetup;\n-import static org.apache.syncope.fit.sra.OIDCSRAITCase.CLIENT_ID;\n-import static org.apache.syncope.fit.sra.OIDCSRAITCase.CLIENT_SECRET;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"sha":"191cd32d113bb0e9eec9c7ae57d64349e86094c8","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/OIDCSRAITCase.java","status":"modified","additions":51,"deletions":65,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -27,7 +27,6 @@\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.node.ArrayNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.nimbusds.jwt.JWTClaimsSet;\n import com.nimbusds.jwt.SignedJWT;\n@@ -58,6 +57,10 @@\n import org.apache.http.impl.client.HttpClients;\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.util.EntityUtils;\n+import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.OIDCSubjectType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n \n@@ -76,6 +79,45 @@ public static void startSRA() throws IOException, InterruptedException, TimeoutE\n         doStartSRA(\"oidc\");\n     }\n \n+    protected static void oidcClientAppSetup(\n+            final String appName,\n+            final String sraRegistrationId,\n+            final Long clientAppId,\n+            final String clientId,\n+            final String clientSecret) {\n+\n+        OIDCRPTO clientApp = clientAppService.list(ClientAppType.OIDCRP).stream().\n+                filter(app -> appName.equals(app.getName())).\n+                map(OIDCRPTO.class::cast).\n+                findFirst().\n+                orElseGet(() -> {\n+                    OIDCRPTO app = new OIDCRPTO();\n+                    app.setName(appName);\n+                    app.setClientAppId(clientAppId);\n+                    app.setClientId(clientId);\n+                    app.setClientSecret(clientSecret);\n+\n+                    Response response = clientAppService.create(ClientAppType.OIDCRP, app);\n+                    if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                        fail(\"Could not create OIDC Client App\");\n+                    }\n+\n+                    return clientAppService.read(\n+                            ClientAppType.OIDCRP, response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                });\n+\n+        clientApp.setClientId(clientId);\n+        clientApp.setClientSecret(clientSecret);\n+        clientApp.setSubjectType(OIDCSubjectType.PUBLIC);\n+        clientApp.getRedirectUris().add(SRA_ADDRESS + \"/login/oauth2/code/\" + sraRegistrationId);\n+        clientApp.setAuthPolicy(getAuthPolicy().getKey());\n+        clientApp.setSignIdToken(true);\n+        clientApp.setLogoutUri(SRA_ADDRESS + \"/logout\");\n+\n+        clientAppService.update(ClientAppType.OIDCRP, clientApp);\n+        clientAppService.pushToWA();\n+    }\n+\n     @BeforeAll\n     public static void clientAppSetup() {\n         assumeTrue(OIDCSRAITCase.class.equals(MethodHandles.lookup().lookupClass()));\n@@ -95,37 +137,6 @@ public static void clientAppSetup() {\n         oidcClientAppSetup(OIDCSRAITCase.class.getName(), \"OIDC\", 1L, CLIENT_ID, CLIENT_SECRET);\n     }\n \n-    private ObjectNode checkResponse(final CloseableHttpResponse response, final String originalRequestURI)\n-            throws IOException {\n-\n-        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n-\n-        assertEquals(MediaType.APPLICATION_JSON, response.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue());\n-\n-        JsonNode json = OBJECT_MAPPER.readTree(EntityUtils.toString(response.getEntity()));\n-\n-        ObjectNode args = (ObjectNode) json.get(\"args\");\n-        assertEquals(\"value1\", args.get(\"key1\").asText());\n-\n-        ArrayNode key2 = (ArrayNode) args.get(\"key2\");\n-        assertEquals(\"value2\", key2.get(0).asText());\n-        assertEquals(\"value3\", key2.get(1).asText());\n-\n-        ObjectNode headers = (ObjectNode) json.get(\"headers\");\n-        assertEquals(MediaType.TEXT_HTML, headers.get(HttpHeaders.ACCEPT).asText());\n-        assertEquals(EN_LANGUAGE, headers.get(HttpHeaders.ACCEPT_LANGUAGE).asText());\n-        assertEquals(\"localhost:\" + PORT, headers.get(\"X-Forwarded-Host\").asText());\n-\n-        assertEquals(originalRequestURI, json.get(\"url\").asText());\n-\n-        return headers;\n-    }\n-\n-    protected void checkLogout(final CloseableHttpResponse response) {\n-        assertEquals(HttpStatus.SC_NO_CONTENT, response.getStatusLine().getStatusCode());\n-        assertEquals(\"true\", response.getFirstHeader(LOGGED_OUT_HEADER).getValue());\n-    }\n-\n     @Test\n     public void web() throws IOException {\n         CloseableHttpClient httpclient = HttpClients.createDefault();\n@@ -138,7 +149,7 @@ public void web() throws IOException {\n         get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n         CloseableHttpResponse response = httpclient.execute(get, context);\n \n-        ObjectNode headers = checkResponse(response, get.getURI().toASCIIString().replace(\"/public\", \"\"));\n+        ObjectNode headers = checkGetResponse(response, get.getURI().toASCIIString().replace(\"/public\", \"\"));\n         assertFalse(headers.has(HttpHeaders.COOKIE));\n \n         // 2. protected\n@@ -151,46 +162,21 @@ public void web() throws IOException {\n \n         // 2a. redirected to WA login screen\n         String responseBody = EntityUtils.toString(response.getEntity());\n-        int begin = responseBody.indexOf(\"name=\\\"execution\\\" value=\\\"\");\n-        assertNotEquals(-1, begin);\n-        int end = responseBody.indexOf(\"\\\"/><input type=\\\"hidden\\\" name=\\\"_eventId\\\"\");\n-        assertNotEquals(-1, end);\n-\n-        String execution = responseBody.substring(begin + 24, end);\n-        assertNotNull(execution);\n-\n-        List<NameValuePair> form = new ArrayList<>();\n-        form.add(new BasicNameValuePair(\"_eventId\", \"submit\"));\n-        form.add(new BasicNameValuePair(\"execution\", execution));\n-        form.add(new BasicNameValuePair(\"username\", \"bellini\"));\n-        form.add(new BasicNameValuePair(\"password\", \"password\"));\n-        form.add(new BasicNameValuePair(\"geolocation\", \"\"));\n-\n-        HttpPost post = new HttpPost(WA_ADDRESS + \"/login\");\n-        post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n-        post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n-        post.setEntity(new UrlEncodedFormEntity(form, Consts.UTF_8));\n-        response = httpclient.execute(post, context);\n+        response = authenticateToCas(responseBody, httpclient, context);\n \n         // 2b. WA attribute consent screen\n         if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n             responseBody = EntityUtils.toString(response.getEntity());\n-            begin = responseBody.indexOf(\"name=\\\"execution\\\" value=\\\"\");\n-            assertNotEquals(-1, begin);\n-            end = responseBody.indexOf(\"\\\"/><input type=\\\"hidden\\\" name=\\\"_eventId\\\"\");\n-            assertNotEquals(-1, end);\n-\n-            execution = responseBody.substring(begin + 24, end);\n-            assertNotNull(execution);\n+            String execution = extractCASExecution(responseBody);\n \n-            form = new ArrayList<>();\n+            List<NameValuePair> form = new ArrayList<>();\n             form.add(new BasicNameValuePair(\"_eventId\", \"confirm\"));\n             form.add(new BasicNameValuePair(\"execution\", execution));\n             form.add(new BasicNameValuePair(\"option\", \"1\"));\n             form.add(new BasicNameValuePair(\"reminder\", \"30\"));\n             form.add(new BasicNameValuePair(\"reminderTimeUnit\", \"days\"));\n \n-            post = new HttpPost(WA_ADDRESS + \"/login\");\n+            HttpPost post = new HttpPost(WA_ADDRESS + \"/login\");\n             post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n             post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n             post.setEntity(new UrlEncodedFormEntity(form, Consts.UTF_8));\n@@ -207,11 +193,11 @@ public void web() throws IOException {\n \n         responseBody = EntityUtils.toString(response.getEntity());\n \n-        begin = responseBody.indexOf(\"name=\\\"allow\\\"\");\n+        int begin = responseBody.indexOf(\"name=\\\"allow\\\"\");\n         assertNotEquals(-1, begin);\n         begin = responseBody.indexOf(\"href=\\\"\", begin);\n         assertNotEquals(-1, begin);\n-        end = responseBody.indexOf(\"\\\">\", begin);\n+        int end = responseBody.indexOf(\"\\\">\", begin);\n         assertNotEquals(-1, end);\n \n         String allow = responseBody.substring(begin + 6, end).replace(\"&amp;\", \"&\");\n@@ -223,7 +209,7 @@ public void web() throws IOException {\n         get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n         response = httpclient.execute(get, context);\n \n-        headers = checkResponse(response, originalRequestURI.replace(\"/protected\", \"\"));\n+        headers = checkGetResponse(response, originalRequestURI.replace(\"/protected\", \"\"));\n         assertTrue(headers.get(HttpHeaders.COOKIE).asText().contains(\"pac4jCsrfToken\"));\n \n         // 3. logout"},{"sha":"762f2b47929f30b9494a88b237ba74498f6b88f0","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/SAML2SRAITCase.java","status":"added","additions":282,"deletions":0,"changes":282,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,282 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.sra;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeoutException;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.commons.text.StringEscapeUtils;\n+import org.apache.http.Consts;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.SAML2SPNameId;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+public class SAML2SRAITCase extends AbstractITCase {\n+\n+    @BeforeAll\n+    public static void startSRA() throws IOException, InterruptedException, TimeoutException {\n+        assumeTrue(SAML2SRAITCase.class.equals(MethodHandles.lookup().lookupClass()));\n+\n+        doStartSRA(\"saml2\");\n+    }\n+\n+    @BeforeAll\n+    public static void clientAppSetup() {\n+        String appName = SAML2SRAITCase.class.getName();\n+        SAML2SPTO clientApp = clientAppService.list(ClientAppType.SAML2SP).stream().\n+                filter(app -> appName.equals(app.getName())).\n+                map(SAML2SPTO.class::cast).\n+                findFirst().\n+                orElseGet(() -> {\n+                    SAML2SPTO app = new SAML2SPTO();\n+                    app.setName(appName);\n+                    app.setClientAppId(3L);\n+                    app.setEntityId(\"http://localhost:8080\");\n+                    app.setMetadataLocation(\"http://localhost:8080/saml2/metadata\");\n+\n+                    Response response = clientAppService.create(ClientAppType.SAML2SP, app);\n+                    if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                        fail(\"Could not create SAML2 Client App\");\n+                    }\n+\n+                    return clientAppService.read(\n+                            ClientAppType.SAML2SP, response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                });\n+\n+        clientApp.setSignAssertions(true);\n+        clientApp.setSignResponses(true);\n+        clientApp.setRequiredNameIdFormat(SAML2SPNameId.PERSISTENT);\n+        clientApp.setAuthPolicy(getAuthPolicy().getKey());\n+\n+        clientAppService.update(ClientAppType.SAML2SP, clientApp);\n+        clientAppService.pushToWA();\n+    }\n+\n+    private Triple<String, String, String> parseSAMLRequestForm(final String responseBody) {\n+        int begin = responseBody.indexOf(\"name=\\\"RelayState\\\" value=\\\"\");\n+        assertNotEquals(-1, begin);\n+        int end = responseBody.indexOf(\"\\\"/>\", begin);\n+        assertNotEquals(-1, end);\n+        String relayState = responseBody.substring(begin + 25, end);\n+        assertNotNull(relayState);\n+\n+        begin = responseBody.indexOf(\"name=\\\"SAMLRequest\\\" value=\\\"\");\n+        assertNotEquals(-1, begin);\n+        end = responseBody.indexOf(\"\\\"/>\", begin);\n+        assertNotEquals(-1, end);\n+        String samlRequest = responseBody.substring(begin + 26, end);\n+        assertNotNull(samlRequest);\n+\n+        begin = responseBody.indexOf(\"<form action=\\\"\");\n+        assertNotEquals(-1, begin);\n+        end = responseBody.indexOf(\"\\\" method=\\\"post\\\">\");\n+        assertNotEquals(-1, end);\n+        String action = StringEscapeUtils.unescapeXml(responseBody.substring(begin + 14, end));\n+        assertNotNull(action);\n+\n+        return Triple.of(action, relayState, samlRequest);\n+    }\n+\n+    private Triple<String, String, String> parseSAMLResponseForm(final String responseBody) {\n+        int begin = responseBody.indexOf(\"name=\\\"RelayState\\\" value=\\\"\");\n+        assertNotEquals(-1, begin);\n+        int end = responseBody.indexOf(\"\\\"/>\");\n+        assertNotEquals(-1, end);\n+        String relayState = responseBody.substring(begin + 26, end);\n+        assertNotNull(relayState);\n+\n+        begin = responseBody.indexOf(\"name=\\\"SAMLResponse\\\" value=\\\"\");\n+        assertNotEquals(-1, begin);\n+        end = responseBody.indexOf(\"\\\"/>\", begin);\n+        assertNotEquals(-1, end);\n+        String samlResponse = responseBody.substring(begin + 27, end);\n+        assertNotNull(samlResponse);\n+\n+        begin = responseBody.indexOf(\"<form action=\\\"\");\n+        assertNotEquals(-1, begin);\n+        end = responseBody.indexOf(\"\\\" method=\\\"post\\\">\");\n+        assertNotEquals(-1, end);\n+        String action = StringEscapeUtils.unescapeXml(responseBody.substring(begin + 14, end));\n+        assertNotNull(action);\n+\n+        return Triple.of(action, relayState, samlResponse);\n+    }\n+\n+    @Test\n+    public void web() throws IOException {\n+        CloseableHttpClient httpclient = HttpClients.createDefault();\n+        HttpClientContext context = HttpClientContext.create();\n+        context.setCookieStore(new BasicCookieStore());\n+\n+        // 1. public\n+        HttpGet get = new HttpGet(SRA_ADDRESS + \"/public/get?key1=value1&key2=value2&key2=value3\");\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        CloseableHttpResponse response = httpclient.execute(get, context);\n+\n+        ObjectNode headers = checkGetResponse(response, get.getURI().toASCIIString().replace(\"/public\", \"\"));\n+        assertFalse(headers.has(HttpHeaders.COOKIE));\n+\n+        // 2. protected\n+        get = new HttpGet(SRA_ADDRESS + \"/protected/get?key1=value1&key2=value2&key2=value3\");\n+        String originalRequestURI = get.getURI().toASCIIString();\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        // 2a. post SAML request\n+        String responseBody = EntityUtils.toString(response.getEntity());\n+        Triple<String, String, String> parsed = parseSAMLRequestForm(responseBody);\n+\n+        HttpPost post = new HttpPost(parsed.getLeft());\n+        post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        post.setEntity(new UrlEncodedFormEntity(\n+                List.of(new BasicNameValuePair(\"RelayState\", parsed.getMiddle()),\n+                        new BasicNameValuePair(\"SAMLRequest\", parsed.getRight())), Consts.UTF_8));\n+        response = httpclient.execute(post, context);\n+        assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n+\n+        // 2b. authenticate\n+        get = new HttpGet(response.getFirstHeader(HttpHeaders.LOCATION).getValue());\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        responseBody = EntityUtils.toString(response.getEntity());\n+        response = authenticateToCas(responseBody, httpclient, context);\n+\n+        // 2c. WA attribute consent screen\n+        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n+            responseBody = EntityUtils.toString(response.getEntity());\n+            String execution = extractCASExecution(responseBody);\n+\n+            List<NameValuePair> form = new ArrayList<>();\n+            form.add(new BasicNameValuePair(\"_eventId\", \"confirm\"));\n+            form.add(new BasicNameValuePair(\"execution\", execution));\n+            form.add(new BasicNameValuePair(\"option\", \"1\"));\n+            form.add(new BasicNameValuePair(\"reminder\", \"30\"));\n+            form.add(new BasicNameValuePair(\"reminderTimeUnit\", \"days\"));\n+\n+            post = new HttpPost(WA_ADDRESS + \"/login\");\n+            post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+            post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+            post.setEntity(new UrlEncodedFormEntity(form, Consts.UTF_8));\n+            response = httpclient.execute(post, context);\n+        }\n+        assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n+\n+        get = new HttpGet(response.getFirstHeader(HttpHeaders.LOCATION).getValue());\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        // 2d. post SAML response\n+        responseBody = EntityUtils.toString(response.getEntity());\n+        parsed = parseSAMLResponseForm(responseBody);\n+\n+        post = new HttpPost(parsed.getLeft());\n+        post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        post.setEntity(new UrlEncodedFormEntity(\n+                List.of(new BasicNameValuePair(\"RelayState\", parsed.getMiddle()),\n+                        new BasicNameValuePair(\"SAMLResponse\", parsed.getRight())), Consts.UTF_8));\n+        response = httpclient.execute(post, context);\n+        assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n+\n+        // 2e. finally get requested content\n+        get = new HttpGet(response.getFirstHeader(HttpHeaders.LOCATION).getValue());\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+\n+        headers = checkGetResponse(response, originalRequestURI.replace(\"/protected\", \"\"));\n+        assertFalse(headers.get(HttpHeaders.COOKIE).asText().isBlank());\n+\n+        // 3. logout\n+        get = new HttpGet(SRA_ADDRESS + \"/protected/logout\");\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+\n+        // 3a. post SAML request\n+        responseBody = EntityUtils.toString(response.getEntity());\n+        parsed = parseSAMLRequestForm(responseBody);\n+\n+        post = new HttpPost(parsed.getLeft());\n+        post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        post.setEntity(new UrlEncodedFormEntity(\n+                List.of(new BasicNameValuePair(\"RelayState\", parsed.getMiddle()),\n+                        new BasicNameValuePair(\"SAMLRequest\", parsed.getRight())), Consts.UTF_8));\n+        response = httpclient.execute(post, context);\n+        assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n+\n+        get = new HttpGet(response.getFirstHeader(HttpHeaders.LOCATION).getValue());\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+\n+        // 3b. post SAML response\n+        // this is missing as currently WA does not responde with form for SP's SingleLogoutService\n+        checkLogout(response);\n+    }\n+\n+    @Override\n+    protected void checkLogout(final CloseableHttpResponse response) throws IOException {\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        String responseBody = EntityUtils.toString(response.getEntity());\n+        assertTrue(responseBody.contains(\"Logout successful\"));\n+        assertTrue(responseBody.contains(\"have successfully logged out of the Central Authentication Service\"));\n+    }\n+}"},{"sha":"fa9a8e4ed645efbeb1b5d7cb7294e17071228561","filename":"fit/wa-reference/src/test/resources/application-saml2.properties","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-saml2.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-saml2.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-saml2.properties?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,29 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+am.type=SAML2\n+am.saml2.sp.authnrequest.binding=POST\n+am.saml2.sp.logout.request.binding=POST\n+am.saml2.sp.logout.response.binding=POST\n+am.saml2.sp.entityId=http://localhost:8080\n+am.saml2.sp.skew=300\n+am.saml2.idp=http://localhost:9080/syncope-wa/idp/metadata\n+am.saml2.keystore=classpath:/saml.keystore.jks\n+am.saml2.keystore.type=jks\n+am.saml2.keystore.storepass=changeit\n+am.saml2.keystore.keypass=changeit\n+\n+global.postLogout=http://localhost:8080/logout"},{"sha":"26de67f66d8d73e1b79e9d3e0393ef1cf96abed9","filename":"pom.xml","status":"modified","additions":40,"deletions":72,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -431,7 +431,6 @@ under the License.\n     <camel.version>3.4.2</camel.version>\n \n     <slf4j.version>2.0.0-alpha1</slf4j.version>\n-    <opensaml.version>3.3.1</opensaml.version>\n \n     <elasticsearch.version>7.8.0</elasticsearch.version>\n \n@@ -446,6 +445,10 @@ under the License.\n     <commons-text.version>1.9</commons-text.version>\n     <commons-logging.version>1.1.3</commons-logging.version>\n     \n+    <modernizer-maven.version>2.1.0</modernizer-maven.version>\n+\n+    <pac4j.version>4.0.3</pac4j.version>\n+\n     <cas.version>6.3.0-SNAPSHOT</cas.version>\n \n     <h2.version>1.4.200</h2.version>\n@@ -771,67 +774,6 @@ under the License.\n       </dependency>\n       <!-- /Camel -->\n \n-      <!-- OpenSAML -->\n-      <dependency>\n-        <groupId>org.opensaml</groupId>\n-        <artifactId>opensaml-saml-api</artifactId>\n-        <version>${opensaml.version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>org.opensaml</groupId>\n-            <artifactId>opensaml-storage-api</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.opensaml</groupId>\n-            <artifactId>opensaml-messaging-api</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.apache.velocity</groupId>\n-            <artifactId>velocity</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.apache.httpcomponents</groupId>\n-            <artifactId>httpclient</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>com.google.code.findbugs</groupId>\n-            <artifactId>jsr305</artifactId>\n-          </exclusion>\n-        </exclusions>\n-      </dependency>\n-      <dependency>\n-        <groupId>org.opensaml</groupId>\n-        <artifactId>opensaml-saml-impl</artifactId>\n-        <version>${opensaml.version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>org.opensaml</groupId>\n-            <artifactId>opensaml-soap-impl</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.opensaml</groupId>\n-            <artifactId>opensaml-storage-api</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.opensaml</groupId>\n-            <artifactId>opensaml-messaging-api</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.apache.velocity</groupId>\n-            <artifactId>velocity</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>org.apache.httpcomponents</groupId>\n-            <artifactId>httpclient</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>com.google.code.findbugs</groupId>\n-            <artifactId>jsr305</artifactId>\n-          </exclusion>\n-        </exclusions>\n-      </dependency>\n-      <!-- /OpenSAML -->\n-\n       <dependency>\n         <groupId>org.elasticsearch.client</groupId>\n         <artifactId>elasticsearch-rest-high-level-client</artifactId>\n@@ -1188,6 +1130,12 @@ under the License.\n         <version>${commons-text.version}</version>\n       </dependency>\n \n+      <dependency>\n+        <groupId>org.gaul</groupId>\n+        <artifactId>modernizer-maven-annotations</artifactId>\n+        <version>${modernizer-maven.version}</version>\n+      </dependency>\n+\n       <dependency>\n         <groupId>org.apache.tika</groupId>\n         <artifactId>tika-core</artifactId>\n@@ -1421,6 +1369,19 @@ under the License.\n       </dependency>\n       <!-- /Flowable -->\n \n+      <!-- PAC4J -->\n+      <dependency>\n+        <groupId>org.pac4j</groupId>\n+        <artifactId>pac4j-saml</artifactId>\n+        <version>${pac4j.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.pac4j</groupId>\n+        <artifactId>pac4j-oidc</artifactId>\n+        <version>${pac4j.version}</version>\n+      </dependency>\n+      <!-- PAC4J -->\n+\n       <!-- CAS -->\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n@@ -2080,6 +2041,13 @@ under the License.\n         <enabled>true</enabled>\n       </snapshots>\n     </repository>\n+    <repository>\n+      <id>shibboleth</id>\n+      <url>https://build.shibboleth.net/nexus/content/groups/public</url>\n+      <releases>\n+        <enabled>true</enabled>\n+      </releases>\n+    </repository>\n   </repositories>\n \n   <pluginRepositories>\n@@ -2427,7 +2395,7 @@ under the License.\n       <plugin>\n         <groupId>org.gaul</groupId>\n         <artifactId>modernizer-maven-plugin</artifactId>\n-        <version>2.1.0</version>\n+        <version>${modernizer-maven.version}</version>\n         <configuration>\n           <javaVersion>${targetJdk}</javaVersion>\n           <ignorePackages>\n@@ -2691,24 +2659,24 @@ under the License.\n             <link>http://www.slf4j.org/api/</link>\n             <link>http://connid.tirasa.net/apidocs/1.5/</link>\n             <link>http://cxf.apache.org/javadoc/latest/</link>\n-            <link>http://fasterxml.github.io/jackson-core/javadoc/2.10/</link>\n-            <link>http://fasterxml.github.io/jackson-databind/javadoc/2.10/</link>\n-            <link>http://fasterxml.github.io/jackson-annotations/javadoc/2.10/</link>\n-            <link>http://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.10/</link>\n-            <link>http://fasterxml.github.io/jackson-dataformats-text/javadoc/yaml/2.10/</link>\n-            <link>http://fasterxml.github.io/jackson-dataformats-text/javadoc/csv/2.10/</link>\n+            <link>http://fasterxml.github.io/jackson-core/javadoc/2.11/</link>\n+            <link>http://fasterxml.github.io/jackson-databind/javadoc/2.11/</link>\n+            <link>http://fasterxml.github.io/jackson-annotations/javadoc/2.11/</link>\n+            <link>http://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.11/</link>\n+            <link>http://fasterxml.github.io/jackson-dataformats-text/javadoc/yaml/2.11/</link>\n+            <link>http://fasterxml.github.io/jackson-dataformats-text/javadoc/csv/2.11/</link>\n             <link>https://www.javadoc.io/doc/org.apache.camel/camel-core/latest/</link>\n             <link>https://www.javadoc.io/doc/org.apache.camel/camel-spring/latest/</link>\n-            <link>https://ci.apache.org/projects/wicket/apidocs/8.x/</link>\n+            <link>https://ci.apache.org/projects/wicket/apidocs/9.x/</link>\n             <link>https://commons.apache.org/proper/commons-lang/javadocs/api-release/</link>\n             <link>https://commons.apache.org/proper/commons-jexl/apidocs/</link>\n             <link>https://tika.apache.org/1.24/api/</link>\n             <link>https://docs.spring.io/spring-boot/docs/current/api/</link>\n             <link>https://docs.spring.io/spring/docs/current/javadoc-api/</link>\n             <link>https://docs.spring.io/spring-security/site/docs/current/api/</link>\n             <link>http://www.flowable.org/docs/javadocs/</link>\n-            <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/3.3.1/apidocs/</link>\n-            <link>http://docs.swagger.io/swagger-core/v2.1.1/apidocs/</link>\n+            <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/4.0.1/apidocs/</link>\n+            <link>http://docs.swagger.io/swagger-core/v2.1.3/apidocs/</link>\n           </links>\n         </configuration>\n         <reportSets>"},{"sha":"51a114eecdeddf30047a2631b9a4f7b2cd0759d0","filename":"sra/pom.xml","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fpom.xml?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -77,8 +77,13 @@ under the License.\n       <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.pac4j</groupId>\n+      <artifactId>pac4j-saml</artifactId>\n+    </dependency>\n+\n     <dependency> \n-      <groupId>org.springframework.session</groupId> \n+      <groupId>org.springframework.session</groupId>\n       <artifactId>spring-session-core</artifactId> \n     </dependency>\n \n@@ -109,6 +114,11 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.gaul</groupId>\n+      <artifactId>modernizer-maven-annotations</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>\n@@ -276,6 +286,16 @@ under the License.\n           <resource>\n             <directory>${basedir}/src/test/resources/debug</directory>\n             <filtering>true</filtering>\n+            <excludes>\n+              <exclude>saml.keystore.jks</exclude>\n+            </excludes>\n+          </resource>\n+          <resource>\n+            <directory>${basedir}/src/test/resources/debug</directory>\n+            <filtering>false</filtering>\n+            <includes>\n+              <include>saml.keystore.jks</include>\n+            </includes>\n           </resource>\n         </resources>\n       </build>"},{"sha":"89646f3ac20c3292084c66d9383c8be0092c152e","filename":"sra/src/main/java/org/apache/syncope/sra/SecurityConfig.java","status":"modified","additions":66,"deletions":7,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -19,15 +19,21 @@\n package org.apache.syncope.sra;\n \n import java.text.ParseException;\n-import java.util.Collections;\n import java.util.Map;\n import java.util.Objects;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.sra.security.CsrfRouteMatcher;\n import org.apache.syncope.sra.security.LogoutRouteMatcher;\n-import org.apache.syncope.sra.security.OAuth2SecurityConfigUtils;\n+import org.apache.syncope.sra.security.oauth2.OAuth2SecurityConfigUtils;\n import org.apache.syncope.sra.security.PublicRouteMatcher;\n+import org.apache.syncope.sra.security.saml2.SAML2BindingType;\n+import org.apache.syncope.sra.security.saml2.SAML2MetadataEndpoint;\n+import org.apache.syncope.sra.security.saml2.SAML2SecurityConfigUtils;\n+import org.apache.syncope.sra.security.saml2.SAML2WebSsoAuthenticationWebFilter;\n+import org.pac4j.core.http.callback.NoParameterCallbackUrlResolver;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.pac4j.saml.config.SAML2Configuration;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.autoconfigure.security.reactive.EndpointRequest;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -39,6 +45,8 @@\n import org.springframework.core.annotation.Order;\n import org.springframework.core.convert.converter.Converter;\n import org.springframework.core.env.Environment;\n+import org.springframework.core.io.support.ResourcePatternResolver;\n+import org.springframework.http.HttpMethod;\n import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\n import org.springframework.security.config.web.server.ServerHttpSecurity;\n import org.springframework.security.core.userdetails.MapReactiveUserDetailsService;\n@@ -57,27 +65,43 @@\n import org.springframework.security.web.server.SecurityWebFilterChain;\n import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\n import reactor.core.publisher.Mono;\n \n @EnableWebFluxSecurity\n @Configuration\n public class SecurityConfig {\n \n-    private static final String AM_TYPE = \"am.type\";\n+    public static final String AM_TYPE = \"am.type\";\n \n     public enum AMType {\n         OIDC,\n         OAUTH2,\n         SAML2,\n-        WA\n+        CAS\n \n     }\n \n+    @Autowired\n+    private ResourcePatternResolver resourceResolver;\n+\n     @Autowired\n     private Environment env;\n \n     @Bean\n     @Order(0)\n+    @ConditionalOnProperty(name = AM_TYPE, havingValue = \"SAML2\")\n+    public SecurityWebFilterChain saml2SecurityFilterChain(final ServerHttpSecurity http) {\n+        ServerWebExchangeMatcher metadataMatcher =\n+                ServerWebExchangeMatchers.pathMatchers(HttpMethod.GET, SAML2MetadataEndpoint.METADATA_URL);\n+        return http.securityMatcher(metadataMatcher).\n+                authorizeExchange().anyExchange().permitAll().\n+                and().csrf().requireCsrfProtectionMatcher(new NegatedServerWebExchangeMatcher(metadataMatcher)).\n+                and().build();\n+    }\n+\n+    @Bean\n+    @Order(1)\n     public SecurityWebFilterChain actuatorSecurityFilterChain(final ServerHttpSecurity http) {\n         ServerWebExchangeMatcher actuatorMatcher = EndpointRequest.toAnyEndpoint();\n         return http.securityMatcher(actuatorMatcher).\n@@ -118,7 +142,7 @@ public OAuth2TokenValidator<Jwt> oidcJWTValidator() {\n     @Bean\n     @ConditionalOnMissingBean\n     public Converter<Map<String, Object>, Map<String, Object>> jwtClaimSetConverter() {\n-        return MappedJwtClaimSetConverter.withDefaults(Collections.emptyMap());\n+        return MappedJwtClaimSetConverter.withDefaults(Map.of());\n     }\n \n     @Bean\n@@ -183,7 +207,39 @@ public ReactiveJwtDecoder oauth2JWTDecoder() {\n     }\n \n     @Bean\n-    @Order(1)\n+    @ConditionalOnProperty(name = AM_TYPE, havingValue = \"SAML2\")\n+    public SAML2Client saml2Client() {\n+        SAML2Configuration cfg = new SAML2Configuration(\n+                resourceResolver.getResource(env.getProperty(\"am.saml2.keystore\")),\n+                env.getProperty(\"am.saml2.keystore.storepass\"),\n+                env.getProperty(\"am.saml2.keystore.keypass\"),\n+                resourceResolver.getResource(env.getProperty(\"am.saml2.idp\")));\n+        cfg.setIdentityProviderMetadataResource(resourceResolver.getResource(env.getProperty(\"am.saml2.idp\")));\n+        cfg.setAuthnRequestBindingType(\n+                SAML2BindingType.valueOf(env.getProperty(\"am.saml2.sp.authnrequest.binding\")).getUri());\n+        cfg.setResponseBindingType(SAML2BindingType.POST.getUri());\n+        cfg.setSpLogoutRequestBindingType(\n+                SAML2BindingType.valueOf(env.getProperty(\"am.saml2.sp.logout.request.binding\")).getUri());\n+        cfg.setSpLogoutResponseBindingType(\n+                SAML2BindingType.valueOf(env.getProperty(\"am.saml2.sp.logout.response.binding\")).getUri());\n+        cfg.setServiceProviderEntityId(env.getProperty(\"am.saml2.sp.entityId\"));\n+        cfg.setWantsAssertionsSigned(true);\n+        cfg.setAuthnRequestSigned(true);\n+        cfg.setSpLogoutRequestSigned(true);\n+        cfg.setAcceptedSkew(env.getProperty(\"am.saml2.sp.skew\", int.class));\n+\n+        SAML2Client saml2Client = new SAML2Client(cfg);\n+        saml2Client.setName(AMType.SAML2.name());\n+        saml2Client.setCallbackUrl(env.getProperty(\"am.saml2.sp.entityId\")\n+                + SAML2WebSsoAuthenticationWebFilter.DEFAULT_FILTER_PROCESSES_URI);\n+        saml2Client.setCallbackUrlResolver(new NoParameterCallbackUrlResolver());\n+        saml2Client.init();\n+\n+        return saml2Client;\n+    }\n+\n+    @Bean\n+    @Order(2)\n     @ConditionalOnProperty(name = AM_TYPE)\n     public SecurityWebFilterChain routesSecurityFilterChain(\n             final ServerHttpSecurity http,\n@@ -208,9 +264,12 @@ public SecurityWebFilterChain routesSecurityFilterChain(\n                 break;\n \n             case SAML2:\n+                SAML2Client saml2Client = saml2Client();\n+                SAML2SecurityConfigUtils.forLogin(http, saml2Client, publicRouteMatcher);\n+                SAML2SecurityConfigUtils.forLogout(builder, saml2Client, logoutRouteMatcher, ctx);\n                 break;\n \n-            case WA:\n+            case CAS:\n             default:\n         }\n "},{"sha":"3133d39b785ac2aa65c2b21dcc0df6e0b47e649e","filename":"sra/src/main/java/org/apache/syncope/sra/security/AbstractServerLogoutSuccessHandler.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FAbstractServerLogoutSuccessHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FAbstractServerLogoutSuccessHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FAbstractServerLogoutSuccessHandler.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security;\n+\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n+import org.apache.syncope.sra.RouteProvider;\n+import org.apache.syncope.sra.security.web.server.DoNothingIfCommittedServerRedirectStrategy;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.cloud.gateway.event.RefreshRoutesEvent;\n+import org.springframework.cloud.gateway.support.ServerWebExchangeUtils;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.security.web.server.ServerRedirectStrategy;\n+import org.springframework.security.web.server.WebFilterExchange;\n+import org.springframework.security.web.server.authentication.logout.ServerLogoutSuccessHandler;\n+\n+public abstract class AbstractServerLogoutSuccessHandler\n+        implements ServerLogoutSuccessHandler, ApplicationListener<RefreshRoutesEvent> {\n+\n+    private static final Map<String, Optional<URI>> CACHE = new ConcurrentHashMap<>();\n+\n+    protected final ServerRedirectStrategy redirectStrategy = new DoNothingIfCommittedServerRedirectStrategy();\n+\n+    @Autowired\n+    private RouteProvider routeProvider;\n+\n+    @Value(\"${global.postLogout}\")\n+    private URI globalPostLogout;\n+\n+    @Override\n+    public void onApplicationEvent(final RefreshRoutesEvent event) {\n+        CACHE.clear();\n+    }\n+\n+    protected URI getPostLogout(final WebFilterExchange exchange) {\n+        URI postLogout = globalPostLogout;\n+        String routeId = exchange.getExchange().getAttribute(ServerWebExchangeUtils.GATEWAY_PREDICATE_ROUTE_ATTR);\n+        if (StringUtils.isNotBlank(routeId)) {\n+            Optional<URI> routePostLogout = Optional.ofNullable(CACHE.get(routeId)).orElseGet(() -> {\n+                URI uri = null;\n+                Optional<SRARouteTO> route = routeProvider.getRouteTOs().stream().\n+                        filter(r -> routeId.equals(r.getKey())).findFirst();\n+                if (route.isPresent()) {\n+                    uri = route.get().getPostLogout();\n+                }\n+\n+                CACHE.put(routeId, Optional.ofNullable(uri));\n+                return CACHE.get(routeId);\n+            });\n+            if (routePostLogout.isPresent()) {\n+                postLogout = routePostLogout.get();\n+            }\n+        }\n+        return postLogout;\n+    }\n+}"},{"sha":"cf6bbb410db05f2d9bb2c6671b29b96e82fda785","filename":"sra/src/main/java/org/apache/syncope/sra/security/oauth2/OAuth2SecurityConfigUtils.java","status":"renamed","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOAuth2SecurityConfigUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOAuth2SecurityConfigUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOAuth2SecurityConfigUtils.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -16,11 +16,13 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.sra.security;\n+package org.apache.syncope.sra.security.oauth2;\n \n-import java.util.Collections;\n+import java.util.Set;\n import org.apache.syncope.sra.ApplicationContextUtils;\n import org.apache.syncope.sra.SecurityConfig.AMType;\n+import org.apache.syncope.sra.security.LogoutRouteMatcher;\n+import org.apache.syncope.sra.security.SessionRemovalServerLogoutHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.cache.CacheManager;\n@@ -89,6 +91,7 @@ public static void forLogin(\n \n         OAuth2AuthorizationRequestRedirectWebFilter authRequestRedirectFilter =\n                 new OAuth2AuthorizationRequestRedirectWebFilter(clientRegistrationRepository);\n+        http.addFilterAt(authRequestRedirectFilter, SecurityWebFiltersOrder.HTTP_BASIC);\n \n         AuthenticationWebFilter authenticationFilter =\n                 new OAuth2LoginAuthenticationWebFilter(authenticationManager(amType), authorizedClientRepository);\n@@ -99,15 +102,13 @@ public static void forLogin(\n         authenticationFilter.setAuthenticationSuccessHandler(new RedirectServerAuthenticationSuccessHandler());\n         authenticationFilter.setAuthenticationFailureHandler((exchange, ex) -> Mono.error(ex));\n         authenticationFilter.setSecurityContextRepository(new WebSessionServerSecurityContextRepository());\n+        http.addFilterAt(authenticationFilter, SecurityWebFiltersOrder.AUTHENTICATION);\n \n         MediaTypeServerWebExchangeMatcher htmlMatcher = new MediaTypeServerWebExchangeMatcher(MediaType.TEXT_HTML);\n-        htmlMatcher.setIgnoredMediaTypes(Collections.singleton(MediaType.ALL));\n+        htmlMatcher.setIgnoredMediaTypes(Set.of(MediaType.ALL));\n         ServerAuthenticationEntryPoint entrypoint =\n                 new RedirectServerAuthenticationEntryPoint(\"/oauth2/authorization/\" + amType.name());\n         http.exceptionHandling().authenticationEntryPoint(new DelegateEntry(htmlMatcher, entrypoint).getEntryPoint());\n-\n-        http.addFilterAt(authRequestRedirectFilter, SecurityWebFiltersOrder.HTTP_BASIC);\n-        http.addFilterAt(authenticationFilter, SecurityWebFiltersOrder.AUTHENTICATION);\n     }\n \n     public static void forLogout(","previous_filename":"sra/src/main/java/org/apache/syncope/sra/security/OAuth2SecurityConfigUtils.java"},{"sha":"175ebd6056820dcc5a1981ac2283ab800143667b","filename":"sra/src/main/java/org/apache/syncope/sra/security/oauth2/OidcClientInitiatedServerLogoutSuccessHandler.java","status":"renamed","additions":14,"deletions":60,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOidcClientInitiatedServerLogoutSuccessHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOidcClientInitiatedServerLogoutSuccessHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOidcClientInitiatedServerLogoutSuccessHandler.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -16,33 +16,20 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.sra.security;\n+package org.apache.syncope.sra.security.oauth2;\n \n import java.net.URI;\n import java.nio.charset.StandardCharsets;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.concurrent.ConcurrentHashMap;\n import javax.annotation.Resource;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.to.SRARouteTO;\n-import org.apache.syncope.sra.RouteProvider;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.cloud.gateway.event.RefreshRoutesEvent;\n-import org.springframework.cloud.gateway.support.ServerWebExchangeUtils;\n-import org.springframework.context.ApplicationListener;\n+import org.apache.syncope.sra.security.AbstractServerLogoutSuccessHandler;\n import reactor.core.publisher.Mono;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;\n import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n-import org.springframework.security.web.server.DefaultServerRedirectStrategy;\n-import org.springframework.security.web.server.ServerRedirectStrategy;\n import org.springframework.security.web.server.WebFilterExchange;\n import org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler;\n-import org.springframework.security.web.server.authentication.logout.ServerLogoutSuccessHandler;\n import org.springframework.util.Assert;\n import org.springframework.web.util.UriComponentsBuilder;\n \n@@ -52,28 +39,22 @@\n  * @see <a href=\"https://openid.net/specs/openid-connect-session-1_0.html#RPLogout\">RP-Initiated Logout</a>\n  * @see org.springframework.security.web.server.authentication.logout.ServerLogoutSuccessHandler\n  */\n-public class OidcClientInitiatedServerLogoutSuccessHandler\n-        implements ServerLogoutSuccessHandler, ApplicationListener<RefreshRoutesEvent> {\n-\n-    private static final Map<String, Optional<URI>> CACHE = new ConcurrentHashMap<>();\n-\n-    private final ServerRedirectStrategy redirectStrategy = new DefaultServerRedirectStrategy();\n-\n-    private final RedirectServerLogoutSuccessHandler serverLogoutSuccessHandler =\n-            new RedirectServerLogoutSuccessHandler();\n+public class OidcClientInitiatedServerLogoutSuccessHandler extends AbstractServerLogoutSuccessHandler {\n \n     @Resource(name = \"oidcClientRegistrationRepository\")\n     private ReactiveClientRegistrationRepository clientRegistrationRepository;\n \n-    @Autowired\n-    private RouteProvider routeProvider;\n-\n-    @Value(\"${global.postLogout}\")\n-    private URI globalPostLogout;\n+    protected final RedirectServerLogoutSuccessHandler serverLogoutSuccessHandler =\n+            new RedirectServerLogoutSuccessHandler();\n \n-    @Override\n-    public void onApplicationEvent(final RefreshRoutesEvent event) {\n-        CACHE.clear();\n+    /**\n+     * The URL to redirect to after successfully logging out when not originally an OIDC login\n+     *\n+     * @param logoutSuccessUrl the url to redirect to. Default is \"/login?logout\".\n+     */\n+    public void setLogoutSuccessUrl(final URI logoutSuccessUrl) {\n+        Assert.notNull(logoutSuccessUrl, \"logoutSuccessUrl cannot be null\");\n+        this.serverLogoutSuccessHandler.setLogoutSuccessUrl(logoutSuccessUrl);\n     }\n \n     @Override\n@@ -106,24 +87,7 @@ private URI endpointUri(\n         UriComponentsBuilder builder = UriComponentsBuilder.fromUri(endSessionEndpoint);\n         builder.queryParam(\"id_token_hint\", idToken(authentication));\n \n-        URI postLogout = globalPostLogout;\n-        String routeId = exchange.getExchange().getAttribute(ServerWebExchangeUtils.GATEWAY_PREDICATE_ROUTE_ATTR);\n-        if (StringUtils.isNotBlank(routeId)) {\n-            Optional<URI> routePostLogout = Optional.ofNullable(CACHE.get(routeId)).orElseGet(() -> {\n-                URI uri = null;\n-                Optional<SRARouteTO> route = routeProvider.getRouteTOs().stream().\n-                        filter(r -> routeId.equals(r.getKey())).findFirst();\n-                if (route.isPresent()) {\n-                    uri = route.get().getPostLogout();\n-                }\n-\n-                CACHE.put(routeId, Optional.ofNullable(uri));\n-                return CACHE.get(routeId);\n-            });\n-            if (routePostLogout.isPresent()) {\n-                postLogout = routePostLogout.get();\n-            }\n-        }\n+        URI postLogout = getPostLogout(exchange);\n         builder.queryParam(\"post_logout_redirect_uri\", postLogout);\n \n         return builder.encode(StandardCharsets.UTF_8).build().toUri();\n@@ -132,14 +96,4 @@ private URI endpointUri(\n     private String idToken(final Authentication authentication) {\n         return ((OidcUser) authentication.getPrincipal()).getIdToken().getTokenValue();\n     }\n-\n-    /**\n-     * The URL to redirect to after successfully logging out when not originally an OIDC login\n-     *\n-     * @param logoutSuccessUrl the url to redirect to. Default is \"/login?logout\".\n-     */\n-    public void setLogoutSuccessUrl(final URI logoutSuccessUrl) {\n-        Assert.notNull(logoutSuccessUrl, \"logoutSuccessUrl cannot be null\");\n-        this.serverLogoutSuccessHandler.setLogoutSuccessUrl(logoutSuccessUrl);\n-    }\n }","previous_filename":"sra/src/main/java/org/apache/syncope/sra/security/OidcClientInitiatedServerLogoutSuccessHandler.java"},{"sha":"1e0b3abab26d41bf0cd11984c7e6189e5e4ddd04","filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/ServerHttpContext.java","status":"added","additions":226,"deletions":0,"changes":226,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerHttpContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerHttpContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerHttpContext.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,226 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.pac4j;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.pac4j.core.context.Cookie;\n+import org.pac4j.core.context.WebContext;\n+import org.pac4j.core.context.session.SessionStore;\n+import org.pac4j.core.util.CommonHelper;\n+import org.springframework.http.HttpCookie;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseCookie;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.WebSession;\n+import org.springframework.web.util.UriComponentsBuilder;\n+\n+public class ServerHttpContext implements WebContext {\n+\n+    private final ServerWebExchange exchange;\n+\n+    private ServerHttpSessionStore sessionStore;\n+\n+    private MultiValueMap<String, String> form;\n+\n+    private String body;\n+\n+    /**\n+     * Build a WebFlux context from the current exchange and web session.\n+     *\n+     * @param exchange the current exchange\n+     * @param webSession the current web session\n+     */\n+    public ServerHttpContext(final ServerWebExchange exchange, final WebSession webSession) {\n+        this(exchange, new ServerHttpSessionStore(webSession));\n+    }\n+\n+    /**\n+     * Build a WebFlux context from the current exhange and from a session store.\n+     *\n+     * @param exchange the current exchange\n+     * @param sessionStore the session store to use\n+     */\n+    public ServerHttpContext(\n+            final ServerWebExchange exchange,\n+            final ServerHttpSessionStore sessionStore) {\n+\n+        CommonHelper.assertNotNull(\"exchange\", exchange);\n+        CommonHelper.assertNotNull(\"sessionStore\", sessionStore);\n+        this.exchange = exchange;\n+        this.sessionStore = sessionStore;\n+    }\n+\n+    public ServerHttpSessionStore getNativeSessionStore() {\n+        return this.sessionStore;\n+    }\n+\n+    @Override\n+    public SessionStore<ServerHttpContext> getSessionStore() {\n+        return this.sessionStore;\n+    }\n+\n+    @Override\n+    public Optional<String> getRequestAttribute(final String name) {\n+        return Optional.ofNullable(exchange.getAttribute(name));\n+    }\n+\n+    @Override\n+    public void setRequestAttribute(final String name, final Object value) {\n+        exchange.getAttributes().put(name, value);\n+    }\n+\n+    @Override\n+    public Optional<String> getRequestParameter(final String name) {\n+        Map<String, String[]> params = getRequestParameters();\n+        if (params.containsKey(name)) {\n+            String[] values = params.get(name);\n+            if (!ArrayUtils.isEmpty(values)) {\n+                return Optional.of(values[0]);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    public ServerHttpContext setForm(final MultiValueMap<String, String> form) {\n+        this.form = form;\n+        return this;\n+    }\n+\n+    @Override\n+    public Map<String, String[]> getRequestParameters() {\n+        Map<String, String[]> params = new HashMap<>();\n+\n+        this.exchange.getRequest().getQueryParams().\n+                forEach((key, value) -> params.put(key, new String[] { value.toString() }));\n+\n+        if (this.form != null) {\n+            form.forEach((key, values) -> params.put(key, values.toArray(new String[0])));\n+        }\n+\n+        return params;\n+    }\n+\n+    @Override\n+    public Optional<String> getRequestHeader(final String name) {\n+        return Optional.ofNullable(exchange.getRequest().getHeaders().getFirst(name));\n+    }\n+\n+    @Override\n+    public String getRequestMethod() {\n+        return this.exchange.getRequest().getMethodValue();\n+    }\n+\n+    @Override\n+    public String getRemoteAddr() {\n+        return this.exchange.getRequest().getRemoteAddress().getHostString();\n+    }\n+\n+    /**\n+     * Return the native exchange.\n+     *\n+     * @return the native exchange\n+     */\n+    public ServerWebExchange getNative() {\n+        return this.exchange;\n+    }\n+\n+    @Override\n+    public void setResponseHeader(final String name, final String value) {\n+        this.exchange.getResponse().getHeaders().set(name, value);\n+    }\n+\n+    @Override\n+    public void setResponseContentType(final String content) {\n+        this.exchange.getResponse().getHeaders().set(HttpHeaders.CONTENT_TYPE, content);\n+    }\n+\n+    @Override\n+    public String getProtocol() {\n+        return isSecure() ? \"https\" : \"http\";\n+    }\n+\n+    @Override\n+    public String getServerName() {\n+        return UriComponentsBuilder.fromHttpRequest(exchange.getRequest()).build().getHost();\n+    }\n+\n+    @Override\n+    public int getServerPort() {\n+        return UriComponentsBuilder.fromHttpRequest(exchange.getRequest()).build().getPort();\n+    }\n+\n+    @Override\n+    public String getScheme() {\n+        return UriComponentsBuilder.fromHttpRequest(exchange.getRequest()).build().getScheme();\n+    }\n+\n+    @Override\n+    public boolean isSecure() {\n+        return this.exchange.getRequest().getSslInfo() != null;\n+    }\n+\n+    @Override\n+    public String getFullRequestURL() {\n+        return UriComponentsBuilder.fromHttpRequest(exchange.getRequest()).build().toUriString();\n+    }\n+\n+    @Override\n+    public Collection<Cookie> getRequestCookies() {\n+        MultiValueMap<String, HttpCookie> cookies = this.exchange.getRequest().getCookies();\n+\n+        Collection<Cookie> pac4jCookies = new LinkedHashSet<>();\n+        cookies.toSingleValueMap().values().forEach(c -> {\n+            Cookie cookie = new Cookie(c.getName(), c.getValue());\n+            pac4jCookies.add(cookie);\n+        });\n+        return pac4jCookies;\n+    }\n+\n+    @Override\n+    public void addResponseCookie(final Cookie cookie) {\n+        ResponseCookie.ResponseCookieBuilder c = ResponseCookie.from(cookie.getName(), cookie.getValue());\n+        c.secure(cookie.isSecure());\n+        c.path(cookie.getPath());\n+        c.maxAge(cookie.getMaxAge());\n+        c.httpOnly(cookie.isHttpOnly());\n+        c.domain(cookie.getDomain());\n+        this.exchange.getResponse().addCookie(c.build());\n+    }\n+\n+    @Override\n+    public String getPath() {\n+        return exchange.getRequest().getPath().value();\n+    }\n+\n+    public ServerHttpContext setBody(final String body) {\n+        this.body = body;\n+        return this;\n+    }\n+\n+    @Override\n+    public String getRequestContent() {\n+        return body;\n+    }\n+}"},{"sha":"622a92c5c4573c1e9ee63c3704a8850cb9118c6e","filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/ServerHttpSessionStore.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerHttpSessionStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerHttpSessionStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerHttpSessionStore.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.pac4j;\n+\n+import java.util.Optional;\n+import org.pac4j.core.context.session.SessionStore;\n+import org.springframework.web.server.WebSession;\n+\n+public class ServerHttpSessionStore implements SessionStore<ServerHttpContext> {\n+\n+    private final WebSession webSession;\n+\n+    public ServerHttpSessionStore(final WebSession webSession) {\n+        this.webSession = webSession;\n+    }\n+\n+    @Override\n+    public String getOrCreateSessionId(final ServerHttpContext context) {\n+        return this.webSession.getId();\n+    }\n+\n+    @Override\n+    public Optional<Object> get(final ServerHttpContext context, final String key) {\n+        return Optional.ofNullable(this.webSession.getAttribute(key));\n+    }\n+\n+    @Override\n+    public void set(final ServerHttpContext context, final String key, final Object value) {\n+    }\n+\n+    @Override\n+    public boolean destroySession(final ServerHttpContext context) {\n+        return false;\n+    }\n+\n+    @Override\n+    public Optional<WebSession> getTrackableSession(final ServerHttpContext context) {\n+        return Optional.ofNullable(this.webSession);\n+    }\n+\n+    @Override\n+    public Optional<SessionStore<ServerHttpContext>> buildFromTrackableSession(\n+            final ServerHttpContext context, final Object trackableSession) {\n+\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public boolean renewSession(final ServerHttpContext context) {\n+        return false;\n+    }\n+}"},{"sha":"29d0fa57f7894fafa943a40a71a211216ed970c5","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2AnonymousWebFilter.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AnonymousWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AnonymousWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AnonymousWebFilter.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.saml2;\n+\n+import java.net.URI;\n+import org.apache.syncope.sra.security.PublicRouteMatcher;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.web.server.context.WebSessionServerSecurityContextRepository;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.WebFilter;\n+import org.springframework.web.server.WebFilterChain;\n+import reactor.core.publisher.Mono;\n+\n+public class SAML2AnonymousWebFilter implements WebFilter {\n+\n+    public static final String INITIAL_REQUEST_URI = \"INITIAL_REQUEST_URI\";\n+\n+    private final PublicRouteMatcher publicRouteMatcher;\n+\n+    public SAML2AnonymousWebFilter(final PublicRouteMatcher publicRouteMatcher) {\n+        this.publicRouteMatcher = publicRouteMatcher;\n+    }\n+\n+    @Override\n+    public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain chain) {\n+        return publicRouteMatcher.matches(exchange).\n+                filter(matchResult -> !matchResult.isMatch()).\n+                flatMap(r -> exchange.getSession()).flatMap(r -> exchange.getSession()).\n+                filter(s -> !s.getAttributes().containsKey(\n+                WebSessionServerSecurityContextRepository.DEFAULT_SPRING_SECURITY_CONTEXT_ATTR_NAME)).\n+                switchIfEmpty(chain.filter(exchange).then(Mono.empty())).\n+                flatMap(session -> {\n+                    session.getAttributes().put(INITIAL_REQUEST_URI, exchange.getRequest().getURI());\n+\n+                    exchange.getResponse().setStatusCode(HttpStatus.SEE_OTHER);\n+                    exchange.getResponse().getHeaders().\n+                            setLocation(URI.create(SAML2WebSsoAuthenticationRequestWebFilter.AUTHENTICATE_URL));\n+                    return exchange.getResponse().setComplete();\n+                });\n+    }\n+}"},{"sha":"74e712eb26aec77090fd411113bc4e8487e67527","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2AuthenticationToken.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AuthenticationToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AuthenticationToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AuthenticationToken.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.saml2;\n+\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.pac4j.saml.credentials.SAML2Credentials;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+\n+public class SAML2AuthenticationToken extends AbstractAuthenticationToken {\n+\n+    private static final long serialVersionUID = 8322987617416135717L;\n+\n+    private final SAML2Credentials credentials;\n+\n+    public SAML2AuthenticationToken(final SAML2Credentials credentials) {\n+        super(credentials.getUserProfile().getRoles().stream().\n+                map(SimpleGrantedAuthority::new).collect(Collectors.toSet()));\n+        this.credentials = credentials;\n+        this.setAuthenticated(true);\n+    }\n+\n+    @Override\n+    public Object getCredentials() {\n+        return StringUtils.EMPTY;\n+    }\n+\n+    @Override\n+    public SAML2Credentials getPrincipal() {\n+        return credentials;\n+    }\n+}"},{"sha":"bf7895d7a7e899f828951cec946c624d0749df7b","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2BindingType.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2BindingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2BindingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2BindingType.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.saml2;\n+\n+import org.opensaml.saml.common.xml.SAMLConstants;\n+\n+public enum SAML2BindingType {\n+    POST(SAMLConstants.SAML2_POST_BINDING_URI),\n+    REDIRECT(SAMLConstants.SAML2_REDIRECT_BINDING_URI);\n+\n+    private final String uri;\n+\n+    SAML2BindingType(final String uri) {\n+        this.uri = uri;\n+    }\n+\n+    public String getUri() {\n+        return uri;\n+    }\n+}"},{"sha":"229d2320a9c8b37991371d7904e347f4e6aba040","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2MetadataEndpoint.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2MetadataEndpoint.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2MetadataEndpoint.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2MetadataEndpoint.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.saml2;\n+\n+import com.google.common.net.HttpHeaders;\n+import org.apache.syncope.sra.SecurityConfig;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+import reactor.core.publisher.Mono;\n+\n+@RestController\n+@RequestMapping(SAML2MetadataEndpoint.METADATA_URL)\n+@ConditionalOnProperty(name = SecurityConfig.AM_TYPE, havingValue = \"SAML2\")\n+public class SAML2MetadataEndpoint {\n+\n+    public static final String METADATA_URL = \"/saml2/metadata\";\n+\n+    private final SAML2Client saml2Client;\n+\n+    public SAML2MetadataEndpoint(final SAML2Client saml2Client) {\n+        this.saml2Client = saml2Client;\n+    }\n+\n+    @GetMapping(produces = { MediaType.APPLICATION_XML_VALUE })\n+    @ResponseBody\n+    public Mono<ResponseEntity<String>> metadata(final ServerHttpRequest request) {\n+        return Mono.just(ResponseEntity.ok().\n+                header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML_VALUE).\n+                body(saml2Client.getServiceProviderMetadataResolver().getMetadata()));\n+    }\n+}"},{"sha":"fd2a924c0c0dcf95fdf83ebb0f836f21da761524","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2RequestGenerator.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestGenerator.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.saml2;\n+\n+import org.apache.syncope.sra.security.pac4j.ServerHttpContext;\n+import java.net.URI;\n+import org.pac4j.core.exception.http.RedirectionAction;\n+import org.pac4j.core.exception.http.WithContentAction;\n+import org.pac4j.core.exception.http.WithLocationAction;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import reactor.core.publisher.Mono;\n+\n+abstract class SAML2RequestGenerator {\n+\n+    protected final SAML2Client saml2Client;\n+\n+    protected SAML2RequestGenerator(final SAML2Client saml2Client) {\n+        this.saml2Client = saml2Client;\n+    }\n+\n+    protected Mono<Void> handle(\n+            final RedirectionAction action,\n+            final ServerHttpContext shc) {\n+\n+        if (action instanceof WithLocationAction) {\n+            WithLocationAction withLocationAction = (WithLocationAction) action;\n+            shc.getNative().getResponse().setStatusCode(HttpStatus.FOUND);\n+            shc.getNative().getResponse().getHeaders().setLocation(URI.create(withLocationAction.getLocation()));\n+            return shc.getNative().getResponse().setComplete();\n+        } else if (action instanceof WithContentAction) {\n+            WithContentAction withContentAction = (WithContentAction) action;\n+            String content = withContentAction.getContent();\n+\n+            if (content == null) {\n+                throw new IllegalArgumentException(\"No content set for POST AuthnRequest\");\n+            }\n+\n+            return Mono.defer(() -> {\n+                shc.getNative().getResponse().getHeaders().setContentType(MediaType.TEXT_HTML);\n+                return shc.getNative().getResponse().\n+                        writeWith(Mono.just(shc.getNative().getResponse().bufferFactory().wrap(content.getBytes())));\n+            });\n+        } else {\n+            throw new IllegalArgumentException(\"Unsupported Action: \" + action.getClass().getName());\n+        }\n+    }\n+}"},{"sha":"4b711090ea64219eed898862188748122f30c157","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2SecurityConfigUtils.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2SecurityConfigUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2SecurityConfigUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2SecurityConfigUtils.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.saml2;\n+\n+import org.apache.syncope.sra.ApplicationContextUtils;\n+import org.apache.syncope.sra.security.LogoutRouteMatcher;\n+import org.apache.syncope.sra.security.PublicRouteMatcher;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.security.authentication.ReactiveAuthenticationManager;\n+import org.springframework.security.config.web.server.SecurityWebFiltersOrder;\n+import org.springframework.security.config.web.server.ServerHttpSecurity;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.web.server.authentication.AuthenticationWebFilter;\n+import org.springframework.security.web.server.authentication.logout.LogoutWebFilter;\n+import org.springframework.security.web.server.context.WebSessionServerSecurityContextRepository;\n+import org.springframework.web.server.WebFilter;\n+import reactor.core.publisher.Mono;\n+\n+public final class SAML2SecurityConfigUtils {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SAML2SecurityConfigUtils.class);\n+\n+    private static ReactiveAuthenticationManager authenticationManager() {\n+        return authentication -> Mono.just(authentication).\n+                filter(Authentication::isAuthenticated);\n+    }\n+\n+    public static void forLogin(\n+            final ServerHttpSecurity http,\n+            final SAML2Client saml2Client,\n+            final PublicRouteMatcher publicRouteMatcher) {\n+\n+        ReactiveAuthenticationManager authenticationManager = authenticationManager();\n+\n+        SAML2WebSsoAuthenticationRequestWebFilter authRequestFilter =\n+                new SAML2WebSsoAuthenticationRequestWebFilter(saml2Client);\n+        http.addFilterAt(authRequestFilter, SecurityWebFiltersOrder.HTTP_BASIC);\n+\n+        AuthenticationWebFilter authenticationFilter =\n+                new SAML2WebSsoAuthenticationWebFilter(authenticationManager, saml2Client);\n+        authenticationFilter.setAuthenticationFailureHandler((exchange, ex) -> Mono.error(ex));\n+        authenticationFilter.setSecurityContextRepository(new WebSessionServerSecurityContextRepository());\n+        http.addFilterAt(authenticationFilter, SecurityWebFiltersOrder.AUTHENTICATION);\n+\n+        WebFilter anonymousRedirectFilter = new SAML2AnonymousWebFilter(publicRouteMatcher);\n+        http.addFilterAt(anonymousRedirectFilter, SecurityWebFiltersOrder.AUTHENTICATION);\n+    }\n+\n+    public static void forLogout(\n+            final ServerHttpSecurity.AuthorizeExchangeSpec builder,\n+            final SAML2Client saml2Client,\n+            final LogoutRouteMatcher logoutRouteMatcher,\n+            final ConfigurableApplicationContext ctx) {\n+\n+        LogoutWebFilter logoutWebFilter = new LogoutWebFilter();\n+        logoutWebFilter.setRequiresLogoutMatcher(logoutRouteMatcher);\n+\n+        SAML2ServerLogoutHandler logoutHandler = new SAML2ServerLogoutHandler(saml2Client);\n+        logoutWebFilter.setLogoutHandler(logoutHandler);\n+\n+        try {\n+            SAML2ServerLogoutSuccessHandler handler = ApplicationContextUtils.getOrCreateBean(ctx,\n+                    SAML2ServerLogoutSuccessHandler.class.getName(),\n+                    SAML2ServerLogoutSuccessHandler.class);\n+            logoutWebFilter.setLogoutSuccessHandler(handler);\n+        } catch (ClassNotFoundException e) {\n+            LOG.error(\"While creating instance of {}\",\n+                    SAML2ServerLogoutSuccessHandler.class.getName(), e);\n+        }\n+\n+        builder.and().addFilterAt(logoutWebFilter, SecurityWebFiltersOrder.LOGOUT);\n+    }\n+\n+    private SAML2SecurityConfigUtils() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"0bcba311eb3af2e137c942f8863af27364eab5fd","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2ServerLogoutHandler.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2ServerLogoutHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2ServerLogoutHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2ServerLogoutHandler.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.saml2;\n+\n+import org.apache.syncope.sra.security.pac4j.ServerHttpContext;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.pac4j.saml.credentials.SAML2Credentials;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.web.server.WebFilterExchange;\n+import org.springframework.security.web.server.authentication.logout.ServerLogoutHandler;\n+import reactor.core.publisher.Mono;\n+\n+public class SAML2ServerLogoutHandler extends SAML2RequestGenerator implements ServerLogoutHandler {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SAML2ServerLogoutHandler.class);\n+\n+    public SAML2ServerLogoutHandler(final SAML2Client saml2Client) {\n+        super(saml2Client);\n+    }\n+\n+    @Override\n+    public Mono<Void> logout(final WebFilterExchange exchange, final Authentication authentication) {\n+        return exchange.getExchange().getSession().\n+                flatMap(session -> {\n+                    SAML2Credentials credentials = (SAML2Credentials) authentication.getPrincipal();\n+\n+                    LOG.debug(\"Creating SAML2 SP Logout Request for IDP[{}] and Profile[{}]\",\n+                            saml2Client.getIdentityProviderResolvedEntityId(), credentials.getUserProfile());\n+\n+                    ServerHttpContext shc = new ServerHttpContext(exchange.getExchange(), session);\n+\n+                    return session.invalidate().then(\n+                            saml2Client.getLogoutAction(shc, credentials.getUserProfile(), null).\n+                                    map(action -> handle(action, shc)).\n+                                    orElseThrow(() -> new IllegalStateException(\"No action generated\")));\n+                }).onErrorResume(Mono::error);\n+    }\n+}"},{"sha":"3557eb5a04116b71f76ab5a93af74f35e498d93b","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2ServerLogoutSuccessHandler.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2ServerLogoutSuccessHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2ServerLogoutSuccessHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2ServerLogoutSuccessHandler.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.saml2;\n+\n+import org.apache.syncope.sra.security.AbstractServerLogoutSuccessHandler;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.web.server.WebFilterExchange;\n+import reactor.core.publisher.Mono;\n+\n+public class SAML2ServerLogoutSuccessHandler extends AbstractServerLogoutSuccessHandler {\n+\n+    @Override\n+    public Mono<Void> onLogoutSuccess(final WebFilterExchange exchange, final Authentication authentication) {\n+        return Mono.just(authentication).\n+                flatMap(auth -> redirectStrategy.sendRedirect(exchange.getExchange(), getPostLogout(exchange)));\n+    }\n+}"},{"sha":"e57faad18ee70a238ef9d45d6666fd13844f4660","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2WebSsoAuthenticationRequestWebFilter.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.saml2;\n+\n+import org.apache.syncope.sra.security.pac4j.ServerHttpContext;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\n+import org.springframework.util.Assert;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.WebFilter;\n+import org.springframework.web.server.WebFilterChain;\n+import reactor.core.publisher.Mono;\n+\n+public class SAML2WebSsoAuthenticationRequestWebFilter extends SAML2RequestGenerator implements WebFilter {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SAML2WebSsoAuthenticationRequestWebFilter.class);\n+\n+    public static final String AUTHENTICATE_URL = \"/saml2/authenticate\";\n+\n+    private ServerWebExchangeMatcher redirectMatcher = ServerWebExchangeMatchers.pathMatchers(AUTHENTICATE_URL);\n+\n+    public SAML2WebSsoAuthenticationRequestWebFilter(final SAML2Client saml2Client) {\n+        super(saml2Client);\n+    }\n+\n+    public void setRedirectMatcher(final ServerWebExchangeMatcher redirectMatcher) {\n+        Assert.notNull(redirectMatcher, \"redirectMatcher cannot be null\");\n+        this.redirectMatcher = redirectMatcher;\n+    }\n+\n+    @Override\n+    public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain chain) {\n+        return redirectMatcher.matches(exchange).\n+                filter(matchResult -> matchResult.isMatch()).\n+                switchIfEmpty(chain.filter(exchange).then(Mono.empty())).\n+                flatMap(matchResult -> exchange.getSession()).\n+                flatMap(session -> {\n+                    LOG.debug(\"Creating SAML2 SP Authentication Request for IDP[{}]\",\n+                            saml2Client.getIdentityProviderResolvedEntityId());\n+\n+                    ServerHttpContext shc = new ServerHttpContext(exchange, session);\n+\n+                    return saml2Client.getRedirectionAction(shc).\n+                            map(action -> handle(action, shc)).\n+                            orElseThrow(() -> new IllegalStateException(\"No action generated\"));\n+                }).onErrorResume(Mono::error);\n+    }\n+}"},{"sha":"79ef94b31e50ac138ee95a55486b00b27cbb4184","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2WebSsoAuthenticationWebFilter.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.saml2;\n+\n+import org.apache.syncope.sra.security.pac4j.ServerHttpContext;\n+import java.net.URI;\n+import org.apache.syncope.sra.security.web.server.DoNothingIfCommittedServerRedirectStrategy;\n+import org.pac4j.core.util.Pac4jConstants;\n+import org.pac4j.saml.client.SAML2Client;\n+import org.pac4j.saml.credentials.SAML2Credentials;\n+import org.springframework.security.authentication.ReactiveAuthenticationManager;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.web.server.ServerRedirectStrategy;\n+import org.springframework.security.web.server.WebFilterExchange;\n+import org.springframework.security.web.server.authentication.AuthenticationWebFilter;\n+import org.springframework.security.web.server.authentication.ServerAuthenticationConverter;\n+import org.springframework.security.web.server.authentication.ServerAuthenticationSuccessHandler;\n+import org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.WebFilterChain;\n+import reactor.core.publisher.Mono;\n+\n+public class SAML2WebSsoAuthenticationWebFilter extends AuthenticationWebFilter {\n+\n+    public static final String DEFAULT_FILTER_PROCESSES_URI = \"/login/saml2/sso\";\n+\n+    private final SAML2Client saml2Client;\n+\n+    private ServerWebExchangeMatcher matcher = new AndServerWebExchangeMatcher(\n+            ServerWebExchangeMatchers.pathMatchers(DEFAULT_FILTER_PROCESSES_URI),\n+            exchange -> exchange.getRequest().getQueryParams().\n+                    containsKey(Pac4jConstants.LOGOUT_ENDPOINT_PARAMETER)\n+            ? ServerWebExchangeMatcher.MatchResult.notMatch()\n+            : ServerWebExchangeMatcher.MatchResult.match());\n+\n+    public SAML2WebSsoAuthenticationWebFilter(\n+            final ReactiveAuthenticationManager authenticationManager,\n+            final SAML2Client saml2Client) {\n+\n+        super(authenticationManager);\n+\n+        this.saml2Client = saml2Client;\n+\n+        setRequiresAuthenticationMatcher(matchSamlResponse());\n+\n+        setServerAuthenticationConverter(convertSamlResponse());\n+\n+        setAuthenticationSuccessHandler(redirectToInitialRequestURI());\n+    }\n+\n+    public void setMatcher(final ServerWebExchangeMatcher matcher) {\n+        this.matcher = matcher;\n+    }\n+\n+    @Override\n+    public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain chain) {\n+        return super.filter(exchange, chain).then(Mono.defer(exchange.getResponse()::setComplete));\n+    }\n+\n+    private ServerWebExchangeMatcher matchSamlResponse() {\n+        return exchange -> exchange.getFormData().\n+                filter(form -> form.containsKey(\"SAMLResponse\")).\n+                flatMap(form -> ServerWebExchangeMatcher.MatchResult.match()).\n+                switchIfEmpty(ServerWebExchangeMatcher.MatchResult.notMatch());\n+    }\n+\n+    private ServerAuthenticationConverter convertSamlResponse() {\n+        return exchange -> exchange.getFormData().\n+                flatMap(form -> this.matcher.matches(exchange).\n+                flatMap(matchResult -> exchange.getSession()).\n+                flatMap(session -> {\n+                    ServerHttpContext shc = new ServerHttpContext(exchange, session).setForm(form);\n+\n+                    SAML2Credentials credentials = saml2Client.getCredentialsExtractor().extract(shc).\n+                            orElseThrow(() -> new IllegalStateException(\"No AuthnResponse found\"));\n+\n+                    saml2Client.getAuthenticator().validate(credentials, shc);\n+\n+                    return Mono.just(new SAML2AuthenticationToken(credentials));\n+                }));\n+    }\n+\n+    private ServerAuthenticationSuccessHandler redirectToInitialRequestURI() {\n+        return new ServerAuthenticationSuccessHandler() {\n+\n+            private final ServerRedirectStrategy redirectStrategy = new DoNothingIfCommittedServerRedirectStrategy();\n+\n+            @Override\n+            public Mono<Void> onAuthenticationSuccess(\n+                    final WebFilterExchange webFilterExchange, final Authentication authentication) {\n+\n+                return webFilterExchange.getExchange().getSession().\n+                        flatMap(session -> this.redirectStrategy.sendRedirect(\n+                        webFilterExchange.getExchange(),\n+                        (URI) session.getRequiredAttribute(SAML2AnonymousWebFilter.INITIAL_REQUEST_URI)));\n+            }\n+        };\n+    }\n+}"},{"sha":"c78dc15c5aafa2df48058b58b70458e9cff76136","filename":"sra/src/main/java/org/apache/syncope/sra/security/web/server/DoNothingIfCommittedServerRedirectStrategy.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fweb%2Fserver%2FDoNothingIfCommittedServerRedirectStrategy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fweb%2Fserver%2FDoNothingIfCommittedServerRedirectStrategy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fweb%2Fserver%2FDoNothingIfCommittedServerRedirectStrategy.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.web.server;\n+\n+import java.net.URI;\n+import org.springframework.security.web.server.DefaultServerRedirectStrategy;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Mono;\n+\n+public class DoNothingIfCommittedServerRedirectStrategy extends DefaultServerRedirectStrategy {\n+\n+    @Override\n+    public Mono<Void> sendRedirect(final ServerWebExchange exchange, final URI location) {\n+        return exchange.getResponse().isCommitted()\n+                ? Mono.empty()\n+                : super.sendRedirect(exchange, location);\n+    }\n+}"},{"sha":"5af528f5a3229e347e0586ef5175fc0c73c758c3","filename":"sra/src/test/resources/debug/application-debug.properties","status":"modified","additions":22,"deletions":10,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -19,15 +19,27 @@\n #am.oidc.client.id=oidcTestClientId\n #am.oidc.client.secret=oidcTestClientSecret\n \n-am.type=OAUTH2\n-am.oauth2.tokenUri=http://localhost:9080/syncope-wa/oauth2.0/accessToken\n-am.oauth2.authorizationUri=http://localhost:9080/syncope-wa/oauth2.0/authorize\n-am.oauth2.userInfoUri=http://localhost:9080/syncope-wa/oauth2.0/profile\n-am.oauth2.userNameAttributeName=id\n-am.oauth2.scopes=\n-am.oauth2.jwkSetUri=\n-am.oauth2.issuer=http://localhost:9080/syncope-wa\n-am.oauth2.client.id=oauth2TestClientId\n-am.oauth2.client.secret=oauth2TestClientSecret\n+#am.type=OAUTH2\n+#am.oauth2.tokenUri=http://localhost:9080/syncope-wa/oauth2.0/accessToken\n+#am.oauth2.authorizationUri=http://localhost:9080/syncope-wa/oauth2.0/authorize\n+#am.oauth2.userInfoUri=http://localhost:9080/syncope-wa/oauth2.0/profile\n+#am.oauth2.userNameAttributeName=id\n+#am.oauth2.scopes=\n+#am.oauth2.jwkSetUri=\n+#am.oauth2.issuer=http://localhost:9080/syncope-wa\n+#am.oauth2.client.id=oauth2TestClientId\n+#am.oauth2.client.secret=oauth2TestClientSecret\n+\n+am.type=SAML2\n+am.saml2.sp.authnrequest.binding=POST\n+am.saml2.sp.logout.request.binding=POST\n+am.saml2.sp.logout.response.binding=POST\n+am.saml2.sp.entityId=http://localhost:8080\n+am.saml2.sp.skew=300\n+am.saml2.idp=http://localhost:9080/syncope-wa/idp/metadata\n+am.saml2.keystore=classpath:/saml.keystore.jks\n+am.saml2.keystore.type=jks\n+am.saml2.keystore.storepass=changeit\n+am.saml2.keystore.keypass=changeit\n \n global.postLogout=http://localhost:8080/logout"},{"sha":"e2a5238ff35955cb2138a9a08e0a5e8ffe229e88","filename":"sra/src/test/resources/debug/saml.keystore.jks","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fsaml.keystore.jks","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fsaml.keystore.jks","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fsaml.keystore.jks?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb"},{"sha":"0dd676a0b0e706dcdaa469ac429b4b5d4a4962a0","filename":"wa/pom.xml","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/wa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/wa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fpom.xml?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -33,8 +33,6 @@ under the License.\n   <packaging>pom</packaging>\n   \n   <properties>\n-    <opensaml.version>4.0.0</opensaml.version>\n-\n     <rootpom.basedir>${basedir}/..</rootpom.basedir>\n   </properties>\n \n@@ -77,13 +75,6 @@ under the License.\n     </profile>\n   </profiles>\n \n-  <repositories>\n-    <repository>\n-      <id>shibboleth</id>\n-      <url>https://build.shibboleth.net/nexus/content/groups/public</url>\n-    </repository>\n-  </repositories>\n-\n   <modules>\n     <module>bootstrap</module>\n     <module>starter</module>"},{"sha":"6323bf09cdff04ae24583fee4625babfb46f4cec","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataGenerator.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -37,8 +37,6 @@ public class RestfulSamlIdPMetadataGenerator extends BaseSamlIdPMetadataGenerato\n \n     private static final Logger LOG = LoggerFactory.getLogger(RestfulSamlIdPMetadataGenerator.class);\n \n-    public static final String DEFAULT_APPLIES_FOR = \"Syncope\";\n-\n     private final WARestClient restClient;\n \n     public RestfulSamlIdPMetadataGenerator(\n@@ -55,7 +53,7 @@ protected SamlIdPMetadataDocument finalizeMetadataDocument(\n             final Optional<SamlRegisteredService> registeredService) {\n \n         LOG.info(\"Generating new SAML2 IdP metadata document\");\n-        doc.setAppliesTo(DEFAULT_APPLIES_FOR);\n+        doc.setAppliesTo(WASAML2IdPMetadataService.DEFAULT_OWNER);\n         SAML2IdPMetadataTO metadataTO = new SAML2IdPMetadataTO.Builder().\n                 metadata(doc.getMetadata()).\n                 encryptionKey(doc.getEncryptionKey()).\n@@ -69,8 +67,8 @@ protected SamlIdPMetadataDocument finalizeMetadataDocument(\n         Response response = null;\n         try {\n             response = client.getService(WASAML2IdPMetadataService.class).set(metadataTO);\n-        } catch (Exception ex) {\n-            LOG.warn(\"While generating SAML2 IdP metadata document\", ex);\n+        } catch (Exception e) {\n+            LOG.warn(\"While generating SAML2 IdP metadata document\", e);\n         }\n \n         return response != null && HttpStatus.valueOf(response.getStatus()).is2xxSuccessful() ? doc : null;\n@@ -93,5 +91,4 @@ private SyncopeClient getSyncopeClient() {\n         }\n         return restClient.getSyncopeClient();\n     }\n-\n }"},{"sha":"0e12872b1de6f0f9d929824e03722ff3ee3d2597","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataLocator.java","status":"modified","additions":25,"deletions":18,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -46,24 +46,13 @@ public RestfulSamlIdPMetadataLocator(\n         this.restClient = restClient;\n     }\n \n-    private static String getAppliesToFor(final Optional<SamlRegisteredService> result) {\n-        if (result.isPresent()) {\n-            SamlRegisteredService registeredService = result.get();\n-            return registeredService.getName() + '-' + registeredService.getId();\n-        }\n-        return RestfulSamlIdPMetadataGenerator.DEFAULT_APPLIES_FOR;\n-    }\n-\n     @Override\n     public SamlIdPMetadataDocument fetchInternal(final Optional<SamlRegisteredService> registeredService) {\n         try {\n             LOG.info(\"Locating SAML2 IdP metadata document\");\n-            SAML2IdPMetadataTO saml2IdPMetadataTO = getSyncopeClient().getService(WASAML2IdPMetadataService.class).\n-                getByOwner(getAppliesToFor(registeredService));\n \n-            if (saml2IdPMetadataTO == null) {\n-                LOG.warn(\"No SAML2 IdP metadata document obtained from core\");\n-            } else {\n+            SAML2IdPMetadataTO saml2IdPMetadataTO = fetchFromCore(registeredService);\n+            if (saml2IdPMetadataTO != null) {\n                 SamlIdPMetadataDocument document = new SamlIdPMetadataDocument();\n                 document.setMetadata(saml2IdPMetadataTO.getMetadata());\n                 document.setEncryptionCertificate(saml2IdPMetadataTO.getEncryptionCertificate());\n@@ -75,18 +64,36 @@ public SamlIdPMetadataDocument fetchInternal(final Optional<SamlRegisteredServic\n                     LOG.debug(\"Found SAML2 IdP metadata document: {}\", document.getId());\n                     return document;\n                 }\n-                LOG.warn(\"Not a valid SAML2 IdP metadata document\");\n             }\n \n+            LOG.warn(\"Not a valid SAML2 IdP metadata document\");\n             return null;\n-        } catch (SyncopeClientException ex) {\n-            if (ex.getType() == ClientExceptionType.NotFound) {\n-                LOG.debug(\"No SAML2 IdP metadata document is available\");\n-            }\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"While fetching SAML2 IdP metadata\", e);\n         }\n+\n         return null;\n     }\n \n+    private SAML2IdPMetadataTO fetchFromCore(final Optional<SamlRegisteredService> registeredService) {\n+        SAML2IdPMetadataTO result = null;\n+\n+        String appliesToFor = registeredService.map(SamlRegisteredService::getName).\n+                orElse(WASAML2IdPMetadataService.DEFAULT_OWNER);\n+        try {\n+            result = getSyncopeClient().getService(WASAML2IdPMetadataService.class).getByOwner(appliesToFor);\n+        } catch (SyncopeClientException e) {\n+            if (e.getType() == ClientExceptionType.NotFound && registeredService.isPresent()) {\n+                result = getSyncopeClient().getService(WASAML2IdPMetadataService.class).\n+                        getByOwner(WASAML2IdPMetadataService.DEFAULT_OWNER);\n+            } else {\n+                throw e;\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     private SyncopeClient getSyncopeClient() {\n         if (!WARestClient.isReady()) {\n             LOG.info(\"Syncope client is not yet ready\");"},{"sha":"01534fdbc08e3da1a8c641d7e1556e37a1cd21a3","filename":"wa/starter/src/main/resources/wa.properties","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -27,9 +27,13 @@ cas.server.name=http://localhost:8080\n cas.server.prefix=${cas.server.name}/syncope-wa\n cas.server.scope=syncope.org\n \n+cas.tgc.secure=false\n cas.logout.follow-service-redirects=true\n \n-cas.authn.saml-idp.entity-id=https://syncope.apache.org/saml\n+cas.authn.saml-idp.entity-id=http://localhost:8080/saml\n+cas.authn.saml-idp.metadata.metadata-backup-location=file:${conf.directory}/saml\n+\n+cas.authn.oidc.issuer=http://localhost:8080/syncope-wa/oidc/\n \n # Disable access to the login endpoint\n # if no target application is specified."},{"sha":"29f53c3638b13ffffc1e2d8fce9eb8df1fb9b08e","filename":"wa/starter/src/test/resources/debug/wa.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cf524e9db6008c047c1b5668d6e5cc0cd58bbb/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fwa.properties?ref=80cf524e9db6008c047c1b5668d6e5cc0cd58bbb","patch":"@@ -31,7 +31,8 @@ cas.authn.syncope.url=http://localhost:9080/syncope/rest/\n cas.tgc.secure=false\n cas.logout.follow-service-redirects=true\n \n-cas.authn.saml-idp.entity-id=https://syncope.apache.org/saml\n+cas.authn.saml-idp.entity-id=http://localhost:8080/saml\n+cas.authn.saml-idp.metadata.metadata-backup-location=file:${conf.directory}/saml\n \n cas.authn.oidc.issuer=http://localhost:8080/syncope-wa/oidc/\n "}]}