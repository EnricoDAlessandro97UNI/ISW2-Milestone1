{"sha":"2035f6b4d7d9d3624e6c52a070f081dd54835606","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjIwMzVmNmI0ZDdkOWQzNjI0ZTZjNTJhMDcwZjA4MWRkNTQ4MzU2MDY=","commit":{"author":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-07-05T10:53:45Z"},"committer":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-07-05T10:53:45Z"},"message":"Adding some negative tests for JWT third party tokens","tree":{"sha":"fa4dafe5f5ccda8dc142ddba8bdaf6020b61e28c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/fa4dafe5f5ccda8dc142ddba8bdaf6020b61e28c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2035f6b4d7d9d3624e6c52a070f081dd54835606","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2035f6b4d7d9d3624e6c52a070f081dd54835606","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2035f6b4d7d9d3624e6c52a070f081dd54835606","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2035f6b4d7d9d3624e6c52a070f081dd54835606/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"ffb78c0871ca6b99b39d67c6998438b3e9f832fb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ffb78c0871ca6b99b39d67c6998438b3e9f832fb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ffb78c0871ca6b99b39d67c6998438b3e9f832fb"}],"stats":{"total":106,"additions":106,"deletions":0},"files":[{"sha":"4d9e0502a75ae706e1ce1b5f1947728877c10a42","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/JWTITCase.java","status":"modified","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2035f6b4d7d9d3624e6c52a070f081dd54835606/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2035f6b4d7d9d3624e6c52a070f081dd54835606/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java?ref=2035f6b4d7d9d3624e6c52a070f081dd54835606","patch":"@@ -420,4 +420,110 @@ public void thirdPartyToken() throws ParseException {\n         assertFalse(self.getLeft().isEmpty());\n         assertEquals(\"puccini\", self.getRight().getUsername());\n     }\n+\n+    @Test\n+    public void thirdPartyTokenUnknownUser() throws ParseException {\n+        // Create a new token\n+        Date now = new Date();\n+\n+        Calendar expiry = Calendar.getInstance();\n+        expiry.setTime(now);\n+        expiry.add(Calendar.MINUTE, 5);\n+\n+        JwtClaims jwtClaims = new JwtClaims();\n+        jwtClaims.setTokenId(UUID.randomUUID().toString());\n+        jwtClaims.setSubject(\"strauss@apache.org\");\n+        jwtClaims.setIssuedAt(now.getTime());\n+        jwtClaims.setIssuer(CustomJWTSSOProvider.ISSUER);\n+        jwtClaims.setExpiryTime(expiry.getTime().getTime());\n+        jwtClaims.setNotBefore(now.getTime());\n+\n+        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n+        JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n+        JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n+\n+        JwsSignatureProvider jwsSignatureProvider =\n+                new HmacJwsSignatureProvider(CustomJWTSSOProvider.CUSTOM_KEY.getBytes(), SignatureAlgorithm.HS512);\n+        String signed = producer.signWith(jwsSignatureProvider);\n+\n+        SyncopeClient jwtClient = clientFactory.create(signed);\n+\n+        try {\n+            jwtClient.self();\n+            fail(\"Failure expected on an unknown subject\");\n+        } catch (AccessControlException ex) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void thirdPartyTokenUnknownIssuer() throws ParseException {\n+        // Create a new token\n+        Date now = new Date();\n+\n+        Calendar expiry = Calendar.getInstance();\n+        expiry.setTime(now);\n+        expiry.add(Calendar.MINUTE, 5);\n+\n+        JwtClaims jwtClaims = new JwtClaims();\n+        jwtClaims.setTokenId(UUID.randomUUID().toString());\n+        jwtClaims.setSubject(\"puccini@apache.org\");\n+        jwtClaims.setIssuedAt(now.getTime());\n+        jwtClaims.setIssuer(CustomJWTSSOProvider.ISSUER + \"_\");\n+        jwtClaims.setExpiryTime(expiry.getTime().getTime());\n+        jwtClaims.setNotBefore(now.getTime());\n+\n+        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n+        JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n+        JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n+\n+        JwsSignatureProvider jwsSignatureProvider =\n+                new HmacJwsSignatureProvider(CustomJWTSSOProvider.CUSTOM_KEY.getBytes(), SignatureAlgorithm.HS512);\n+        String signed = producer.signWith(jwsSignatureProvider);\n+\n+        SyncopeClient jwtClient = clientFactory.create(signed);\n+\n+        try {\n+            jwtClient.self();\n+            fail(\"Failure expected on an unknown issuer\");\n+        } catch (AccessControlException ex) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void thirdPartyTokenBadSignature() throws ParseException {\n+        // Create a new token\n+        Date now = new Date();\n+\n+        Calendar expiry = Calendar.getInstance();\n+        expiry.setTime(now);\n+        expiry.add(Calendar.MINUTE, 5);\n+\n+        JwtClaims jwtClaims = new JwtClaims();\n+        jwtClaims.setTokenId(UUID.randomUUID().toString());\n+        jwtClaims.setSubject(\"puccini@apache.org\");\n+        jwtClaims.setIssuedAt(now.getTime());\n+        jwtClaims.setIssuer(CustomJWTSSOProvider.ISSUER);\n+        jwtClaims.setExpiryTime(expiry.getTime().getTime());\n+        jwtClaims.setNotBefore(now.getTime());\n+\n+        JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n+        JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n+        JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n+\n+        JwsSignatureProvider jwsSignatureProvider =\n+                new HmacJwsSignatureProvider((CustomJWTSSOProvider.CUSTOM_KEY + \"_\").getBytes(), SignatureAlgorithm.HS512);\n+        String signed = producer.signWith(jwsSignatureProvider);\n+\n+        SyncopeClient jwtClient = clientFactory.create(signed);\n+\n+        try {\n+            jwtClient.self();\n+            fail(\"Failure expected on a bad signature\");\n+        } catch (AccessControlException ex) {\n+            // expected\n+        }\n+    }\n+\n }"}]}