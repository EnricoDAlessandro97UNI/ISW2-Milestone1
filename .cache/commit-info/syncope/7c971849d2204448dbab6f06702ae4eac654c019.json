{"sha":"7c971849d2204448dbab6f06702ae4eac654c019","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdjOTcxODQ5ZDIyMDQ0NDhkYmFiNmYwNjcwMmFlNGVhYzY1NGMwMTk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-12-28T07:28:21Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-12-29T05:59:35Z"},"message":"Upgrading to latest Zookeeper","tree":{"sha":"71b214d9eae4516e40de39e84b31a248869e525e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/71b214d9eae4516e40de39e84b31a248869e525e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7c971849d2204448dbab6f06702ae4eac654c019","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7c971849d2204448dbab6f06702ae4eac654c019","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7c971849d2204448dbab6f06702ae4eac654c019","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7c971849d2204448dbab6f06702ae4eac654c019/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"bf1eb2d229f18c2f3e4547b06acd8b89a9c57a29","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bf1eb2d229f18c2f3e4547b06acd8b89a9c57a29","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bf1eb2d229f18c2f3e4547b06acd8b89a9c57a29"}],"stats":{"total":199,"additions":43,"deletions":156},"files":[{"sha":"0c84250f56596955268e2af9c1055790b938085f","filename":"pom.xml","status":"modified","additions":2,"deletions":14,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c971849d2204448dbab6f06702ae4eac654c019/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c971849d2204448dbab6f06702ae4eac654c019/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=7c971849d2204448dbab6f06702ae4eac654c019","patch":"@@ -492,7 +492,7 @@ under the License.\n     <antlr4.version>4.7.2</antlr4.version>\n \n     <curator.version>4.2.0</curator.version>\n-    <zookeeper.version>3.4.14</zookeeper.version>\n+    <zookeeper.version>3.5.6</zookeeper.version>\n \n     <testds.port>1389</testds.port>\n     <testdb.webport>9082</testdb.webport>\n@@ -1723,23 +1723,11 @@ under the License.\n         <groupId>org.apache.curator</groupId>\n         <artifactId>curator-framework</artifactId>\n         <version>${curator.version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>org.apache.zookeeper</groupId>\n-            <artifactId>zookeeper</artifactId>\n-          </exclusion>\n-        </exclusions>\n       </dependency>\n       <dependency>\n         <groupId>org.apache.curator</groupId>\n         <artifactId>curator-x-discovery</artifactId>\n         <version>${curator.version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>org.apache.zookeeper</groupId>\n-            <artifactId>zookeeper</artifactId>\n-          </exclusion>\n-        </exclusions>\n       </dependency>\n       <dependency>\n         <groupId>org.apache.zookeeper</groupId>\n@@ -1761,7 +1749,7 @@ under the License.\n       <dependency>\n         <groupId>org.apache.curator</groupId>\n         <artifactId>curator-test</artifactId>\n-        <version>2.13.0</version>\n+        <version>${curator.version}</version>\n         <scope>test</scope>\n       </dependency>\n       <dependency>"},{"sha":"1139819ec44db35903d64c61e323d64d5ec2dbe3","filename":"sra/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c971849d2204448dbab6f06702ae4eac654c019/sra%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c971849d2204448dbab6f06702ae4eac654c019/sra%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fpom.xml?ref=7c971849d2204448dbab6f06702ae4eac654c019","patch":"@@ -262,7 +262,7 @@ under the License.\n             <configuration>\n               <excludes>\n                 <exclude>**/org/apache/syncope/sra/**Test.java</exclude>\n-                <exclude>**/org/apache/syncope/sra/**Keymaster*.java</exclude>\n+                <exclude>**/org/apache/syncope/sra/**Zookeeper*.java</exclude>\n               </excludes>\n             </configuration>\n           </plugin>"},{"sha":"7d15556a90ed86c5edbdad30d7b3dd7bb317a225","filename":"sra/src/main/java/org/apache/syncope/sra/ManagementController.java","status":"removed","additions":0,"deletions":93,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf1eb2d229f18c2f3e4547b06acd8b89a9c57a29/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FManagementController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf1eb2d229f18c2f3e4547b06acd8b89a9c57a29/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FManagementController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FManagementController.java?ref=bf1eb2d229f18c2f3e4547b06acd8b89a9c57a29","patch":"@@ -1,93 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.sra;\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.cloud.gateway.route.Route;\n-import org.springframework.cloud.gateway.route.RouteDefinition;\n-import org.springframework.cloud.gateway.route.RouteDefinitionLocator;\n-import org.springframework.cloud.gateway.route.RouteLocator;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RestController;\n-import reactor.core.publisher.Mono;\n-\n-@RestController\n-@RequestMapping(path = \"/management\")\n-public class ManagementController {\n-\n-    @Autowired\n-    private RouteRefresher routeRefresher;\n-\n-    @Autowired\n-    private RouteDefinitionLocator routeDefinitionLocator;\n-\n-    @Autowired\n-    private RouteLocator routeLocator;\n-\n-    @PostMapping(\"/routes/refresh\")\n-    public Mono<Void> refresh() {\n-        routeRefresher.refresh();\n-        return Mono.empty();\n-    }\n-\n-    @GetMapping(\"/routes\")\n-    public Mono<List<Map<String, Object>>> routes() {\n-        Mono<Map<String, RouteDefinition>> routeDefs =\n-                routeDefinitionLocator.getRouteDefinitions().collectMap(RouteDefinition::getId);\n-        Mono<List<Route>> routes = routeLocator.getRoutes().collectList();\n-        return Mono.zip(routeDefs, routes).map(tuple -> {\n-            Map<String, RouteDefinition> defs = tuple.getT1();\n-            List<Route> routeList = tuple.getT2();\n-            List<Map<String, Object>> allRoutes = new ArrayList<>();\n-\n-            routeList.forEach(route -> {\n-                Map<String, Object> r = new HashMap<>();\n-                r.put(\"route_id\", route.getId());\n-                r.put(\"order\", route.getOrder());\n-\n-                if (defs.containsKey(route.getId())) {\n-                    r.put(\"route_definition\", defs.get(route.getId()));\n-                } else {\n-                    Map<String, Object> obj = new HashMap<>();\n-\n-                    obj.put(\"predicate\", route.getPredicate().toString());\n-\n-                    if (!route.getFilters().isEmpty()) {\n-                        obj.put(\"filters\",\n-                                route.getFilters().stream().map(Object::toString).collect(Collectors.toList()));\n-                    }\n-\n-                    if (!obj.isEmpty()) {\n-                        r.put(\"route_object\", obj);\n-                    }\n-                }\n-                allRoutes.add(r);\n-            });\n-\n-            return allRoutes;\n-        });\n-    }\n-}"},{"sha":"5a2e05ecee6f9a6c235cc146e5b91893f1fb92d2","filename":"sra/src/main/java/org/apache/syncope/sra/SyncopeSRAApplication.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c971849d2204448dbab6f06702ae4eac654c019/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c971849d2204448dbab6f06702ae4eac654c019/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java?ref=7c971849d2204448dbab6f06702ae4eac654c019","patch":"@@ -18,9 +18,11 @@\n  */\n package org.apache.syncope.sra;\n \n+import java.util.Objects;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.actuate.autoconfigure.security.reactive.EndpointRequest;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.cloud.gateway.route.Route;\n import org.springframework.cloud.gateway.route.RouteLocator;\n@@ -35,12 +37,10 @@\n import org.springframework.security.core.userdetails.User;\n import org.springframework.security.core.userdetails.UserDetails;\n import org.springframework.security.web.server.SecurityWebFilterChain;\n-import org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher;\n-import org.springframework.web.util.pattern.PathPatternParser;\n+import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n import reactor.core.publisher.Flux;\n \n-import java.util.Objects;\n-\n @PropertySource(\"classpath:sra.properties\")\n @PropertySource(value = \"file:${conf.directory}/sra.properties\", ignoreResourceNotFound = true)\n @EnableWebFluxSecurity\n@@ -67,11 +67,13 @@ public RouteLocator routes(final RouteLocatorBuilder builder) {\n     }\n \n     @Bean\n-    public SecurityWebFilterChain springSecurityFilterChain(final ServerHttpSecurity http) {\n-        http.csrf().disable().securityMatcher(\n-                new PathPatternParserServerWebExchangeMatcher(new PathPatternParser().parse(\"/management/**\"))).\n-                authorizeExchange().anyExchange().hasRole(IdRepoEntitlement.ANONYMOUS).and().httpBasic();\n-        return http.build();\n+    public SecurityWebFilterChain actuatorSecurityFilterChain(final ServerHttpSecurity http) {\n+        ServerWebExchangeMatcher actuatorMatcher = EndpointRequest.toAnyEndpoint();\n+        return http.securityMatcher(actuatorMatcher).\n+                authorizeExchange().anyExchange().authenticated().\n+                and().httpBasic().\n+                and().csrf().requireCsrfProtectionMatcher(new NegatedServerWebExchangeMatcher(actuatorMatcher)).\n+                and().build();\n     }\n \n     @Bean"},{"sha":"c77fcaa7fa7f98e8bdd0bd8d048130a391450357","filename":"sra/src/main/resources/application.properties","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c971849d2204448dbab6f06702ae4eac654c019/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c971849d2204448dbab6f06702ae4eac654c019/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=7c971849d2204448dbab6f06702ae4eac654c019","patch":"@@ -21,8 +21,11 @@ spring.main.banner-mode=log\n server.port=8080\n \n spring.cloud.gateway.metrics.enabled=true\n+ \n+management.security.enabled=true\n+management.endpoint.gateway.enabled=true\n+management.endpoints.web.exposure.include=health,loggers,metrics,prometheus,gateway\n+management.endpoint.health.show-details=always\n management.endpoint.metrics.enabled=true\n-management.endpoint.prometheus.enabled=true\n-management.metrics.export.prometheus.enabled=true\n \n service.discovery.address=http://localhost:8080/"},{"sha":"8d1996594281ac04b3d494a23978ad506f485af9","filename":"sra/src/test/java/org/apache/syncope/sra/RouteRefresher.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c971849d2204448dbab6f06702ae4eac654c019/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteRefresher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c971849d2204448dbab6f06702ae4eac654c019/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteRefresher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteRefresher.java?ref=7c971849d2204448dbab6f06702ae4eac654c019","previous_filename":"sra/src/main/java/org/apache/syncope/sra/RouteRefresher.java"},{"sha":"0d740e4641931d2c86c5c287f8673bd89b5e5f99","filename":"sra/src/test/java/org/apache/syncope/sra/SyncopeCoreTestingServer.java","status":"renamed","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c971849d2204448dbab6f06702ae4eac654c019/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeCoreTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c971849d2204448dbab6f06702ae4eac654c019/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeCoreTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeCoreTestingServer.java?ref=7c971849d2204448dbab6f06702ae4eac654c019","patch":"@@ -29,18 +29,17 @@\n import javax.ws.rs.core.Response;\n import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;\n import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.lib.to.GatewayRouteTO;\n import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.event.ContextRefreshedEvent;\n-import org.springframework.core.Ordered;\n import org.springframework.stereotype.Component;\n \n @Component\n-public class SyncopeSRATestCoreStartup extends SyncopeSRAStartStop\n-        implements ApplicationListener<ContextRefreshedEvent>, Ordered {\n+public class SyncopeCoreTestingServer implements ApplicationListener<ContextRefreshedEvent> {\n \n     public static final String ADDRESS = \"http://localhost:9080/syncope/rest\";\n \n@@ -49,10 +48,8 @@ public class SyncopeSRATestCoreStartup extends SyncopeSRAStartStop\n     @Autowired\n     private RouteRefresher routeRefresher;\n \n-    @Override\n-    public int getOrder() {\n-        return Ordered.LOWEST_PRECEDENCE;\n-    }\n+    @Autowired\n+    private ServiceOps serviceOps;\n \n     @Override\n     public void onApplicationEvent(final ContextRefreshedEvent event) {\n@@ -69,7 +66,7 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n         // 2. register Core in Keymaster\n         NetworkService core = new NetworkService();\n         core.setType(NetworkService.Type.CORE);\n-        core.setAddress(SyncopeSRATestCoreStartup.ADDRESS);\n+        core.setAddress(ADDRESS);\n         serviceOps.register(core);\n     }\n ","previous_filename":"sra/src/test/java/org/apache/syncope/sra/SyncopeSRATestCoreStartup.java"},{"sha":"e5caef81c44ae31c25b8fc244c83fcb36861a8df","filename":"sra/src/test/java/org/apache/syncope/sra/SyncopeSRATest.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c971849d2204448dbab6f06702ae4eac654c019/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c971849d2204448dbab6f06702ae4eac654c019/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATest.java?ref=7c971849d2204448dbab6f06702ae4eac654c019","patch":"@@ -46,10 +46,12 @@\n import org.springframework.cloud.contract.wiremock.AutoConfigureWireMock;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n+import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.web.reactive.server.WebTestClient;\n import org.springframework.web.reactive.function.BodyInserters;\n \n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ContextConfiguration(initializers = ZookeeperTestingServer.class)\n @AutoConfigureWireMock(port = 0)\n public class SyncopeSRATest {\n \n@@ -66,7 +68,7 @@ public class SyncopeSRATest {\n \n     @BeforeEach\n     public void clearRoutes() {\n-        SyncopeSRATestCoreStartup.ROUTES.clear();\n+        SyncopeCoreTestingServer.ROUTES.clear();\n     }\n \n     @Test\n@@ -94,7 +96,7 @@ public void getAddResponseHeader() {\n         routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n                 factory(FilterFactory.ADD_RESPONSE_HEADER).args(\"Hello,World\").build());\n \n-        SyncopeSRATestCoreStartup.ROUTES.put(routeTO.getKey(), routeTO);\n+        SyncopeCoreTestingServer.ROUTES.put(routeTO.getKey(), routeTO);\n \n         routeRefresher.refresh();\n \n@@ -147,7 +149,7 @@ public void hystrix() {\n         routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n                 factory(FilterFactory.HYSTRIX).args(\"fallbackcmd,forward:/fallback\").build());\n \n-        SyncopeSRATestCoreStartup.ROUTES.put(routeTO.getKey(), routeTO);\n+        SyncopeCoreTestingServer.ROUTES.put(routeTO.getKey(), routeTO);\n \n         routeRefresher.refresh();\n \n@@ -179,7 +181,7 @@ public void custom() {\n                 factory(FilterFactory.CUSTOM).\n                 args(BodyPropertyAddingGatewayFilterFactory.class.getName() + \";customized=true\").build());\n \n-        SyncopeSRATestCoreStartup.ROUTES.put(routeTO.getKey(), routeTO);\n+        SyncopeCoreTestingServer.ROUTES.put(routeTO.getKey(), routeTO);\n \n         routeRefresher.refresh();\n "},{"sha":"89fc3bcf2c78dfd595ac43cc523e56ed72d69214","filename":"sra/src/test/java/org/apache/syncope/sra/ZookeeperTestingServer.java","status":"renamed","additions":13,"deletions":25,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c971849d2204448dbab6f06702ae4eac654c019/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FZookeeperTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c971849d2204448dbab6f06702ae4eac654c019/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FZookeeperTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FZookeeperTestingServer.java?ref=7c971849d2204448dbab6f06702ae4eac654c019","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.sra;\n \n+import static org.junit.jupiter.api.Assertions.fail;\n+\n import java.io.InputStream;\n import java.util.HashMap;\n import java.util.Map;\n@@ -27,24 +29,15 @@\n import javax.security.auth.login.Configuration;\n import org.apache.curator.test.InstanceSpec;\n import org.apache.curator.test.TestingServer;\n-import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n-import org.springframework.context.ApplicationListener;\n-import org.springframework.context.event.ContextRefreshedEvent;\n-import org.springframework.core.Ordered;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class SyncopeSRATestKeymasterStartup extends SyncopeSRAStartStop\n-        implements ApplicationListener<ContextRefreshedEvent>, Ordered {\n+import org.apache.zookeeper.server.auth.DigestLoginModule;\n+import org.apache.zookeeper.server.auth.SASLAuthenticationProvider;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n \n-    @Override\n-    public int getOrder() {\n-        return Ordered.HIGHEST_PRECEDENCE;\n-    }\n+public class ZookeeperTestingServer implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n \n     @Override\n-    public void onApplicationEvent(final ContextRefreshedEvent event) {\n-        // 1. start Zookeeper for Keymaster\n+    public void initialize(final ConfigurableApplicationContext ctx) {\n         AtomicReference<String> username = new AtomicReference<>();\n         AtomicReference<String> password = new AtomicReference<>();\n         try (InputStream propStream = getClass().getResourceAsStream(\"/keymaster.properties\")) {\n@@ -61,7 +54,7 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n \n             private final AppConfigurationEntry[] entries = {\n                 new AppConfigurationEntry(\n-                \"org.apache.zookeeper.server.auth.DigestLoginModule\",\n+                DigestLoginModule.class.getName(),\n                 AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,\n                 Map.of(\n                 \"user_\" + username.get(), password.get()\n@@ -75,18 +68,13 @@ public AppConfigurationEntry[] getAppConfigurationEntry(final String name) {\n         });\n \n         Map<String, Object> customProperties = new HashMap<>();\n-        customProperties.put(\"authProvider.1\", \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n+        customProperties.put(\"authProvider.1\", SASLAuthenticationProvider.class.getName());\n         InstanceSpec spec = new InstanceSpec(null, 2181, -1, -1, true, 1, -1, -1, customProperties);\n+\n         try {\n-            new TestingServer(spec, true).start();\n+            new TestingServer(spec, true);\n         } catch (Exception e) {\n-            throw new IllegalStateException(\"Could not start Zookeeper\", e);\n+            fail(e);\n         }\n-\n-        // 2. register Core in Keymaster\n-        NetworkService core = new NetworkService();\n-        core.setType(NetworkService.Type.CORE);\n-        core.setAddress(SyncopeSRATestCoreStartup.ADDRESS);\n-        serviceOps.register(core);\n     }\n }","previous_filename":"sra/src/test/java/org/apache/syncope/sra/SyncopeSRATestKeymasterStartup.java"}]}