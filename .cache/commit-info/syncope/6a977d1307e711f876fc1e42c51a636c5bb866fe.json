{"sha":"6a977d1307e711f876fc1e42c51a636c5bb866fe","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZhOTc3ZDEzMDdlNzExZjg3NmZjMWU0MmM1MWE2MzZjNWJiODY2ZmU=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-13T14:52:23Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-13T14:52:23Z"},"message":"(Fixes issue #57)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246590 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bbc34e62c4b6d3804ced54ede5cf6f79aab0b849","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/bbc34e62c4b6d3804ced54ede5cf6f79aab0b849"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6a977d1307e711f876fc1e42c51a636c5bb866fe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6a977d1307e711f876fc1e42c51a636c5bb866fe","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6a977d1307e711f876fc1e42c51a636c5bb866fe","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6a977d1307e711f876fc1e42c51a636c5bb866fe/comments","author":null,"committer":null,"parents":[{"sha":"62e9aebe8962ba2e0ec5521a2ad47422c10eb883","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62e9aebe8962ba2e0ec5521a2ad47422c10eb883","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/62e9aebe8962ba2e0ec5521a2ad47422c10eb883"}],"stats":{"total":1040,"additions":604,"deletions":436},"files":[{"sha":"392c7f1f0273b05f10555597df2e60f1b614fd7c","filename":"client/src/main/java/org/syncope/client/to/SchemaMappingTO.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTO.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -20,14 +20,12 @@\n public class SchemaMappingTO extends AbstractBaseBean {\n \n     private Long id;\n-\n     /**\n      * Attribute schema to be mapped.\n      * Consider that we can associate tha same attribute schema more\n      * than once, with different aliases, to different resource attributes.\n      */\n     private String schemaName;\n-\n     /**\n      * Schema type to be mapped.\n      * Possible values are:\n@@ -38,26 +36,22 @@ public class SchemaMappingTO extends AbstractBaseBean {\n      * * MembershipSchema for a membership schema.\n      */\n     private SchemaType schemaType;\n-\n     /**\n      * Target resource's field to be mapped.\n      */\n     private String field;\n-\n     /**\n      * Specify if the mapped target resource's field is the key.\n      */\n     private boolean accountid;\n-\n     /**\n      * Specify if the mapped target resource's field is the password.\n      */\n     private boolean password;\n-\n     /**\n      * Specify if the mapped target resource's field is nullable.\n      */\n-    private boolean nullable;\n+    private String mandatoryCondition = \"false\";\n \n     public boolean isAccountid() {\n         return accountid;\n@@ -83,12 +77,12 @@ public void setId(Long id) {\n         this.id = id;\n     }\n \n-    public boolean isNullable() {\n-        return nullable;\n+    public String getMandatoryCondition() {\n+        return mandatoryCondition;\n     }\n \n-    public void setNullable(boolean nullable) {\n-        this.nullable = nullable;\n+    public void setMandatoryCondition(String mandatoryCondition) {\n+        this.mandatoryCondition = mandatoryCondition;\n     }\n \n     public boolean isPassword() {"},{"sha":"9a867cd579f514fdf64d34c23105e75e61063c29","filename":"client/src/main/java/org/syncope/client/to/SchemaTO.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -24,7 +24,7 @@ public class SchemaTO extends AbstractBaseBean {\n     private String name;\n     private SchemaValueType type;\n     private boolean virtual;\n-    private boolean mandatory;\n+    private String mandatoryCondition;\n     private boolean multivalue;\n     private boolean uniquevalue;\n     private boolean readonly;\n@@ -34,6 +34,7 @@ public class SchemaTO extends AbstractBaseBean {\n     private int attributes;\n \n     public SchemaTO() {\n+        mandatoryCondition = \"false\";\n         derivedSchemas = new HashSet<String>();\n     }\n \n@@ -53,12 +54,12 @@ public void setVirtual(boolean virtual) {\n         this.virtual = virtual;\n     }\n \n-    public boolean isMandatory() {\n-        return mandatory;\n+    public String getMandatoryCondition() {\n+        return mandatoryCondition;\n     }\n \n-    public void setMandatory(boolean mandatory) {\n-        this.mandatory = mandatory;\n+    public void setMandatoryCondition(String mandatoryCondition) {\n+        this.mandatoryCondition = mandatoryCondition;\n     }\n \n     public boolean isMultivalue() {"},{"sha":"d0f7a7a8eba31880d0b0c7f456da0aba4ca54111","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerivedAttribute.java","status":"modified","additions":23,"deletions":12,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedAttribute.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -24,21 +24,17 @@\n import org.apache.commons.jexl2.Expression;\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.JexlEngine;\n+import org.apache.commons.jexl2.JexlException;\n import org.apache.commons.jexl2.MapContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.syncope.core.persistence.util.ApplicationContextManager;\n \n /**\n  * @see http://commons.apache.org/jexl/reference/index.html\n  */\n @MappedSuperclass\n public abstract class AbstractDerivedAttribute extends AbstractBaseBean {\n \n-    private static final JexlEngine jexlEngine = new JexlEngine();\n-\n-    static {\n-        jexlEngine.setCache(512);\n-        jexlEngine.setLenient(true);\n-        jexlEngine.setSilent(false);\n-    }\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     protected Long id;\n@@ -49,11 +45,13 @@ public Long getId() {\n \n     /**\n      * @see http://commons.apache.org/jexl/reference/index.html\n-     * @return\n+     * @param attributes the set of attributes against which evaluate this\n+     * derived attribute\n+     * @return the value of this derived attribute\n      */\n-    public String getValue(Collection<? extends AbstractAttribute> attributes) {\n-        Expression jexlExpression = jexlEngine.createExpression(\n-                getDerivedSchema().getExpression());\n+    public String getValue(\n+            final Collection<? extends AbstractAttribute> attributes) {\n+\n         JexlContext jexlContext = new MapContext();\n \n         List<? extends AbstractAttributeValue> attributeValues = null;\n@@ -78,7 +76,20 @@ public String getValue(Collection<? extends AbstractAttribute> attributes) {\n             jexlContext.set(attribute.getSchema().getName(), expressionValue);\n         }\n \n-        return jexlExpression.evaluate(jexlContext).toString();\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+        JexlEngine jexlEngine = (JexlEngine) context.getBean(\"jexlEngine\");\n+        String result = null;\n+        try {\n+            Expression jexlExpression = jexlEngine.createExpression(\n+                    getDerivedSchema().getExpression());\n+            result = jexlExpression.evaluate(jexlContext).toString();\n+        } catch (JexlException e) {\n+            LOG.error(\"Invalid jexl expression: \"\n+                    + getDerivedSchema().getExpression(), e);\n+        }\n+\n+        return result;\n     }\n \n     public abstract <T extends AbstractAttributable> T getOwner();"},{"sha":"6059ed1b217414c0d890c49f1d881ff6c654d1ca","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerivedSchema.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedSchema.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -16,6 +16,7 @@\n \n import java.util.List;\n import java.util.Set;\n+import javax.persistence.Column;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n \n@@ -24,6 +25,7 @@ public abstract class AbstractDerivedSchema extends AbstractBaseBean {\n \n     @Id\n     private String name;\n+    @Column(nullable = false)\n     private String expression;\n \n     public String getName() {"},{"sha":"534c7d9d0437336e849e03715d7b15fe7b0e0fc8","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -44,8 +44,8 @@ public abstract class AbstractSchema extends AbstractBaseBean {\n      */\n     @Basic\n     private Character virtual;\n-    @Basic\n-    private Character mandatory;\n+    @Column(nullable = false)\n+    private String mandatoryCondition;\n     @Basic\n     private Character multivalue;\n     @Basic\n@@ -60,9 +60,11 @@ public abstract class AbstractSchema extends AbstractBaseBean {\n     private AbstractAttributeValidator validator;\n \n     public AbstractSchema() {\n+        super();\n+\n         type = SchemaValueType.String;\n         virtual = getBooleanAsCharacter(false);\n-        mandatory = getBooleanAsCharacter(false);\n+        mandatoryCondition = Boolean.FALSE.toString();\n         multivalue = getBooleanAsCharacter(false);\n         uniquevalue = getBooleanAsCharacter(false);\n         readonly = getBooleanAsCharacter(false);\n@@ -92,12 +94,12 @@ public void setVirtual(boolean virtual) {\n         this.virtual = getBooleanAsCharacter(virtual);\n     }\n \n-    public boolean isMandatory() {\n-        return isBooleanAsCharacter(mandatory);\n+    public String getMandatoryCondition() {\n+        return mandatoryCondition;\n     }\n \n-    public void setMandatory(boolean mandatory) {\n-        this.mandatory = getBooleanAsCharacter(mandatory);\n+    public void setMandatoryCondition(String mandatoryCondition) {\n+        this.mandatoryCondition = mandatoryCondition;\n     }\n \n     public boolean isMultivalue() {\n@@ -135,7 +137,8 @@ public AbstractAttributeValidator getValidator() {\n                         Class.forName(getValidatorClass()).getConstructor(\n                         new Class[]{getClass().getSuperclass()});\n                 validator =\n-                        (AbstractAttributeValidator) validatorConstructor.newInstance(\n+                        (AbstractAttributeValidator) validatorConstructor.\n+                        newInstance(\n                         this);\n             } catch (Exception e) {\n                 LOG.error(\"Could not instantiate validator of type \""},{"sha":"b4c5683e3ca98d437f198961ad91f03ce7a410a3","filename":"core/src/main/java/org/syncope/core/persistence/beans/SchemaMapping.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -70,15 +70,14 @@ public class SchemaMapping extends AbstractBaseBean {\n      * Specify if the mapped target resource's field is nullable.\n      */\n     @Column(nullable = false)\n-    @Basic\n-    private Character nullable;\n+    private String mandatoryCondition;\n \n     public SchemaMapping() {\n         super();\n \n         accountid = getBooleanAsCharacter(false);\n         password = getBooleanAsCharacter(false);\n-        nullable = getBooleanAsCharacter(true);\n+        mandatoryCondition = Boolean.FALSE.toString();\n     }\n \n     public Long getId() {\n@@ -101,12 +100,12 @@ public void setField(String field) {\n         this.field = field;\n     }\n \n-    public boolean isNullable() {\n-        return isBooleanAsCharacter(nullable);\n+    public String getMandatoryCondition() {\n+        return mandatoryCondition;\n     }\n \n-    public void setNullable(boolean nullable) {\n-        this.nullable = getBooleanAsCharacter(nullable);\n+    public void setMandatoryCondition(String mandatoryCondition) {\n+        this.mandatoryCondition = mandatoryCondition;\n     }\n \n     public boolean isPassword() {"},{"sha":"9f56572200ac7e880f9d72eca9e6f82930e67206","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -26,12 +26,39 @@\n import javax.persistence.Id;\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n import javax.persistence.OneToMany;\n+import javax.persistence.QueryHint;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n \n @Entity\n+@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n+@NamedQueries({\n+    @NamedQuery(name = \"TargetResource.find\",\n+    query = \"SELECT e FROM TargetResource e WHERE e.name = :name\",\n+    hints = {\n+        @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\")\n+    }),\n+    @NamedQuery(name = \"TargetResource.getMappings\",\n+    query = \"SELECT m FROM SchemaMapping m WHERE m.schemaName=:schemaName \"\n+    + \"AND m.schemaType=:schemaType\",\n+    hints = {\n+        @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\"),\n+        @QueryHint(name = \"org.hibernate.cacheMode\", value = \"refresh\")\n+    }),\n+    @NamedQuery(name = \"TargetResource.getMappingsByTargetResource\",\n+    query = \"SELECT m FROM SchemaMapping m WHERE m.schemaName=:schemaName \"\n+    + \"AND m.schemaType=:schemaType AND m.resource.name=:resourceName\",\n+    hints = {\n+        @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\"),\n+        @QueryHint(name = \"org.hibernate.cacheMode\", value = \"refresh\")\n+    })\n+})\n public class TargetResource extends AbstractBaseBean {\n \n     /**"},{"sha":"2731e4b0207f1fc40e77d4a0cdfb34899e5b395a","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipSchema.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -18,20 +18,32 @@\n import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.ManyToMany;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n import javax.persistence.OneToMany;\n+import javax.persistence.QueryHint;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n+@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n+@NamedQueries({\n+    @NamedQuery(name = \"MembershipSchema.findAll\",\n+    query = \"SELECT e FROM MembershipSchema e\",\n+    hints = {\n+        @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\")\n+    })\n+})\n public class MembershipSchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")\n     private List<MembershipAttribute> attributes;\n-\n     @ManyToMany(mappedBy = \"schemas\")\n     private List<MembershipDerivedSchema> derivedSchemas;\n-    \n+\n     public MembershipSchema() {\n         attributes = new ArrayList<MembershipAttribute>();\n         derivedSchemas = new ArrayList<MembershipDerivedSchema>();"},{"sha":"6d7ff369b4b4071685c41feb803f89d0159273dc","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleSchema.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -18,20 +18,32 @@\n import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.ManyToMany;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n import javax.persistence.OneToMany;\n+import javax.persistence.QueryHint;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n+@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n+@NamedQueries({\n+    @NamedQuery(name = \"RoleSchema.findAll\",\n+    query = \"SELECT e FROM RoleSchema e\",\n+    hints = {\n+        @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\")\n+    })\n+})\n public class RoleSchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")\n     private List<RoleAttribute> attributes;\n-\n     @ManyToMany(mappedBy = \"schemas\")\n     private List<RoleDerivedSchema> derivedSchemas;\n-    \n+\n     public RoleSchema() {\n         attributes = new ArrayList<RoleAttribute>();\n         derivedSchemas = new ArrayList<RoleDerivedSchema>();"},{"sha":"1fb31dace85ff0b5b0ba071bd6ab41a1e398e617","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserSchema.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -18,17 +18,29 @@\n import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.ManyToMany;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n import javax.persistence.OneToMany;\n+import javax.persistence.QueryHint;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n+@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n+@NamedQueries({\n+    @NamedQuery(name = \"UserSchema.findAll\",\n+    query = \"SELECT e FROM UserSchema e\",\n+    hints = {\n+        @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\")\n+    })\n+})\n public class UserSchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")\n     private List<UserAttribute> attributes;\n-\n     @ManyToMany(mappedBy = \"schemas\")\n     private List<UserDerivedSchema> derivedSchemas;\n "},{"sha":"021881231017b9b3026aa8b084327fceee36c112","filename":"core/src/main/java/org/syncope/core/persistence/dao/ResourceDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -29,6 +29,9 @@ public interface ResourceDAO extends DAO {\n \n     List<SchemaMapping> getMappings(String schemaName, SchemaType schemaType);\n \n+    List<SchemaMapping> getMappings(String schemaName, SchemaType schemaType,\n+            String resourceName);\n+\n     void deleteMappings(String schemaName, SchemaType schemaType);\n \n     void delete(String name);"},{"sha":"77ad5d05947f1dd83d081b2632a71a8d2b87a455","filename":"core/src/main/java/org/syncope/core/persistence/dao/SchemaDAO.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -15,9 +15,7 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n-import java.util.Set;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.validation.MultiUniqueValueException;\n \n public interface SchemaDAO extends DAO {\n@@ -27,13 +25,8 @@ public interface SchemaDAO extends DAO {\n     <T extends AbstractSchema> List<T> findAll(Class<T> reference);\n \n     <T extends AbstractSchema> T save(\n-            T schema) throws MultiUniqueValueException;\n+            T schema)\n+            throws MultiUniqueValueException;\n \n     <T extends AbstractSchema> void delete(String name, Class<T> reference);\n-\n-    boolean isMandatoryOnResource(\n-            AbstractSchema schema, TargetResource resource);\n-\n-    boolean isMandatoryOnResources(\n-            AbstractSchema schema, Set<TargetResource> resources);\n }"},{"sha":"3612831fa7820e552c418296fef223cbc3918c45","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":27,"deletions":6,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -14,8 +14,10 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n@@ -32,8 +34,15 @@ public class ResourceDAOImpl extends AbstractDAOImpl\n \n     @Override\n     @Transactional(readOnly = true)\n-    public TargetResource find(String name) {\n-        return entityManager.find(TargetResource.class, name);\n+    public TargetResource find(final String name) {\n+        Query query = entityManager.createNamedQuery(\"TargetResource.find\");\n+        query.setParameter(\"name\", name);\n+\n+        try {\n+            return (TargetResource) query.getSingleResult();\n+        } catch (NoResultException e) {\n+            return null;\n+        }\n     }\n \n     @Override\n@@ -65,12 +74,24 @@ public TargetResource save(final TargetResource resource) {\n     public List<SchemaMapping> getMappings(final String schemaName,\n             final SchemaType schemaType) {\n \n-        Query query = entityManager.createQuery(\"SELECT m FROM \"\n-                + SchemaMapping.class.getSimpleName()\n-                + \" m WHERE m.schemaName=:schemaName \"\n-                + \"AND m.schemaType=:schemaType\");\n+        Query query = entityManager.createNamedQuery(\n+                \"TargetResource.getMappings\");\n+        query.setParameter(\"schemaName\", schemaName);\n+        query.setParameter(\"schemaType\", schemaType);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<SchemaMapping> getMappings(final String schemaName,\n+            final SchemaType schemaType, final String resourceName) {\n+\n+        Query query = entityManager.createNamedQuery(\n+                \"TargetResource.getMappingsByTargetResource\");\n         query.setParameter(\"schemaName\", schemaName);\n         query.setParameter(\"schemaType\", schemaType);\n+        query.setParameter(\"resourceName\", resourceName);\n \n         return query.getResultList();\n     }"},{"sha":"ee5a1a3daefaf4a5616e86d51279335629ebe229","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":4,"deletions":50,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -16,15 +16,13 @@\n \n import java.util.Collections;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n@@ -53,13 +51,14 @@ public <T extends AbstractSchema> T find(final String name,\n     public <T extends AbstractSchema> List<T> findAll(\n             final Class<T> reference) {\n \n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n+        Query query = entityManager.createNamedQuery(\n+                reference.getSimpleName() + \".findAll\");\n+\n         return query.getResultList();\n     }\n \n     @Override\n-    public <T extends AbstractSchema> T save(T schema)\n+    public <T extends AbstractSchema> T save(final T schema)\n             throws MultiUniqueValueException {\n \n         if (schema.isMultivalue() && schema.isUniquevalue()) {\n@@ -94,49 +93,4 @@ public <T extends AbstractSchema> void delete(String name,\n \n         entityManager.remove(schema);\n     }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public boolean isMandatoryOnResource(\n-            AbstractSchema schema, TargetResource resource) {\n-\n-        Query query = entityManager.createQuery(\n-                \"SELECT e \"\n-                + \"FROM SchemaMapping e \"\n-                + \"WHERE e.schemaName='\" + schema.getName() + \"' \"\n-                + \"AND e.resource.name='\" + resource.getName() + \"' \"\n-                + \"AND e.nullable='F'\");\n-\n-        return resource.isForceMandatoryConstraint()\n-                && !query.getResultList().isEmpty();\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public boolean isMandatoryOnResources(\n-            AbstractSchema schema, Set<TargetResource> resources) {\n-\n-        StringBuilder queryBuilder = new StringBuilder();\n-\n-        for (TargetResource resource : resources) {\n-            if (resource.isForceMandatoryConstraint()) {\n-                queryBuilder.append(queryBuilder.length() > 0 ? \" OR \" : \"\");\n-                queryBuilder.append(\"e.resource.name='\");\n-                queryBuilder.append(resource.getName());\n-                queryBuilder.append(\"'\");\n-            }\n-        }\n-\n-        Query query = null;\n-        if (queryBuilder.length() > 0) {\n-            query = entityManager.createQuery(\n-                    \"SELECT e \"\n-                    + \"FROM SchemaMapping e \"\n-                    + \"WHERE e.schemaName='\" + schema.getName() + \"' \"\n-                    + \"AND (\" + queryBuilder.toString() + \") \"\n-                    + \"AND e.nullable='F'\");\n-        }\n-\n-        return query != null && !query.getResultList().isEmpty();\n-    }\n }"},{"sha":"2a440c1cec16336588b1d14f6566311a6106373b","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -366,7 +366,8 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                             + \"\\n* is accountId \" + mapping.isAccountid()\n                             + \"\\n* is password \" + (mapping.isPassword()\n                             || schemaType.equals(SchemaType.Password))\n-                            + \"\\n* is nullable \" + mapping.isNullable()\n+                            + \"\\n* nullable condition \"\n+                            + mapping.getMandatoryCondition()\n                             + \"\\n* Schema \" + schemaName\n                             + \"\\n* SchemaType \" + schemaType.toString()\n                             + \"\\n* ClassType \" + schemaValueType.getClassName()"},{"sha":"401c1bfde22a4c853e867b3e2048a2cb3f4af1cd","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":23,"deletions":25,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -26,6 +26,7 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.DerivedSchemaTO;\n import org.syncope.client.to.DerivedSchemaTOs;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.rest.data.DerivedSchemaDataBinder;\n@@ -40,15 +41,15 @@ public class DerivedSchemaController extends AbstractController {\n     private DerivedSchemaDataBinder derivedSchemaDataBinder;\n \n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n-    public DerivedSchemaTO create(HttpServletResponse response,\n-            @RequestBody DerivedSchemaTO derivedSchemaTO,\n-            @PathVariable(\"kind\") String kind) {\n+    public DerivedSchemaTO create(final HttpServletResponse response,\n+            @RequestBody final DerivedSchemaTO derivedSchemaTO,\n+            @PathVariable(\"kind\") final String kind)\n+            throws SyncopeClientCompositeErrorException {\n \n         AbstractDerivedSchema derivedSchema =\n-                getAttributableUtil(kind).newDerivedSchema();\n-        derivedSchema =\n-                derivedSchemaDataBinder.createDerivedSchema(\n-                derivedSchemaTO, derivedSchema,\n+                derivedSchemaDataBinder.create(\n+                derivedSchemaTO,\n+                getAttributableUtil(kind).newDerivedSchema(),\n                 getAttributableUtil(kind).getSchemaClass());\n \n         derivedSchema = derivedSchemaDAO.save(derivedSchema);\n@@ -60,8 +61,8 @@ public DerivedSchemaTO create(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/{kind}/delete/{schema}\")\n     public void delete(HttpServletResponse response,\n-            @PathVariable(\"kind\") String kind,\n-            @PathVariable(\"schema\") String derivedSchemaName)\n+            @PathVariable(\"kind\") final String kind,\n+            @PathVariable(\"schema\") final String derivedSchemaName)\n             throws NotFoundException {\n \n         Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n@@ -78,7 +79,7 @@ public void delete(HttpServletResponse response,\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public DerivedSchemaTOs list(@PathVariable(\"kind\") String kind) {\n+    public DerivedSchemaTOs list(@PathVariable(\"kind\") final String kind) {\n \n         Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n         List<AbstractDerivedSchema> derivedAttributeSchemas =\n@@ -99,9 +100,8 @@ public DerivedSchemaTOs list(@PathVariable(\"kind\") String kind) {\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{kind}/read/{derivedSchema}\")\n-    public DerivedSchemaTO read(HttpServletResponse response,\n-            @PathVariable(\"kind\") String kind,\n-            @PathVariable(\"derivedSchema\") String derivedSchemaName)\n+    public DerivedSchemaTO read(@PathVariable(\"kind\") final String kind,\n+            @PathVariable(\"derivedSchema\") final String derivedSchemaName)\n             throws NotFoundException {\n \n         Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n@@ -110,32 +110,30 @@ public DerivedSchemaTO read(HttpServletResponse response,\n         if (derivedSchema == null) {\n             LOG.error(\"Could not find derived schema '\"\n                     + derivedSchemaName + \"'\");\n-\n             throw new NotFoundException(derivedSchemaName);\n         }\n \n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }\n \n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n-    public DerivedSchemaTO update(HttpServletResponse response,\n-            @RequestBody DerivedSchemaTO derivedSchemaTO,\n-            @PathVariable(\"kind\") String kind)\n-            throws NotFoundException {\n+    public DerivedSchemaTO update(\n+            @RequestBody final DerivedSchemaTO derivedSchemaTO,\n+            @PathVariable(\"kind\") final String kind)\n+            throws SyncopeClientCompositeErrorException, NotFoundException {\n \n+        Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n         AbstractDerivedSchema derivedSchema =\n-                getAttributableUtil(kind).newDerivedSchema();\n-        derivedSchema =\n-                derivedSchemaDataBinder.createDerivedSchema(\n-                derivedSchemaTO, derivedSchema,\n-                getAttributableUtil(kind).getSchemaClass());\n+                derivedSchemaDAO.find(derivedSchemaTO.getName(), reference);\n         if (derivedSchema == null) {\n-            LOG.error(\"Could not find schema '\"\n+            LOG.error(\"Could not find derived schema '\"\n                     + derivedSchemaTO.getName() + \"'\");\n-\n             throw new NotFoundException(derivedSchemaTO.getName());\n         }\n \n+        derivedSchema = derivedSchemaDataBinder.update(derivedSchemaTO,\n+                derivedSchema, getAttributableUtil(kind).getSchemaClass());\n+\n         derivedSchema = derivedSchemaDAO.save(derivedSchema);\n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }"},{"sha":"d89f853979dc10b508871415c8b735044e53265b","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":42,"deletions":82,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -53,8 +53,8 @@ public class ResourceController extends AbstractController {\n \n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n-    public ResourceTO create(HttpServletResponse response,\n-            @RequestBody ResourceTO resourceTO)\n+    public ResourceTO create(final HttpServletResponse response,\n+            final @RequestBody ResourceTO resourceTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n \n         if (LOG.isDebugEnabled()) {\n@@ -71,42 +71,23 @@ public ResourceTO create(HttpServletResponse response,\n             throw new NotFoundException(\"Missing resource\");\n         }\n \n-        TargetResource resource = null;\n-\n-        try {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Verify that resource dosn't exist\");\n-            }\n-\n-            if (resourceDAO.find(resourceTO.getName()) != null) {\n-                SyncopeClientException ex = new SyncopeClientException(\n-                        SyncopeClientExceptionType.AlreadyExists);\n-\n-                ex.addElement(resourceTO.getName());\n-                compositeErrorException.addException(ex);\n-\n-                throw compositeErrorException;\n-            }\n-\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Resource data binder ..\");\n-            }\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Verify that resource dosn't exist\");\n+        }\n \n-            resource = binder.getResource(resourceTO);\n-            if (resource == null) {\n-                LOG.error(\"Resource creation failed\");\n+        if (resourceDAO.find(resourceTO.getName()) != null) {\n+            SyncopeClientException ex = new SyncopeClientException(\n+                    SyncopeClientExceptionType.AlreadyExists);\n \n-                SyncopeClientException ex = new SyncopeClientException(\n-                        SyncopeClientExceptionType.Unknown);\n+            ex.addElement(resourceTO.getName());\n+            compositeErrorException.addException(ex);\n \n-                compositeErrorException.addException(ex);\n+            throw compositeErrorException;\n+        }\n \n-                throw compositeErrorException;\n-            }\n-        } catch (Throwable t) {\n-            if (LOG.isErrorEnabled()) {\n-                LOG.error(\"Unknown exception\", t);\n-            }\n+        TargetResource resource = binder.getResource(resourceTO);\n+        if (resource == null) {\n+            LOG.error(\"Resource creation failed\");\n \n             SyncopeClientException ex = new SyncopeClientException(\n                     SyncopeClientExceptionType.Unknown);\n@@ -124,62 +105,46 @@ public ResourceTO create(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n-    public ResourceTO update(HttpServletResponse response,\n-            @RequestBody ResourceTO resourceTO)\n+    public ResourceTO update(final HttpServletResponse response,\n+            final @RequestBody ResourceTO resourceTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n \n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Update request received\");\n         }\n \n         TargetResource resource = null;\n-\n         if (resourceTO != null && resourceTO.getName() != null) {\n             resource = resourceDAO.find(resourceTO.getName());\n         }\n-\n         if (resource == null) {\n-            LOG.error(\"Missing resource\");\n-\n-            throw new NotFoundException(resourceTO.getName());\n+            LOG.error(\"Missing resource: \" + resourceTO.getName());\n+            throw new NotFoundException(\n+                    \"Resource '\" + resourceTO.getName() + \"'\");\n         }\n \n         SyncopeClientCompositeErrorException compositeErrorException =\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n \n-        try {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Remove old mappings ..\");\n-            }\n-\n-            // remove older mappings\n-            resource.getMappings().clear();\n-\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Resource data binder ..\");\n-            }\n-\n-            resource = binder.getResource(resource, resourceTO);\n-            if (resource == null) {\n-                if (LOG.isErrorEnabled()) {\n-                    LOG.error(\"Resource creation failed\");\n-                }\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Remove old mappings ..\");\n+        }\n+        // remove older mappings\n+        resource.getMappings().clear();\n \n-                SyncopeClientException ex = new SyncopeClientException(\n-                        SyncopeClientExceptionType.Unknown);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Resource data binder ..\");\n+        }\n \n-                compositeErrorException.addException(ex);\n-                throw compositeErrorException;\n-            }\n-        } catch (Throwable t) {\n-            LOG.error(\"Unknown exception\", t);\n+        resource = binder.getResource(resource, resourceTO);\n+        if (resource == null) {\n+            LOG.error(\"Resource update failed\");\n \n             SyncopeClientException ex = new SyncopeClientException(\n                     SyncopeClientExceptionType.Unknown);\n \n             compositeErrorException.addException(ex);\n-\n             throw compositeErrorException;\n         }\n \n@@ -189,34 +154,31 @@ public ResourceTO update(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{resourceName}\")\n-    public void delete(HttpServletResponse response,\n-            @PathVariable(\"resourceName\") String resourceName)\n+    public void delete(final HttpServletResponse response,\n+            final @PathVariable(\"resourceName\") String resourceName)\n             throws NotFoundException {\n \n         TargetResource resource = resourceDAO.find(resourceName);\n \n         if (resource == null) {\n-            if (LOG.isErrorEnabled()) {\n-                LOG.error(\"Could not find resource '\" + resourceName + \"'\");\n-            }\n-            throw new NotFoundException(resourceName);\n-        } else {\n-            resourceDAO.delete(resourceName);\n+            LOG.error(\"Could not find resource '\" + resourceName + \"'\");\n+            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n+\n+        resourceDAO.delete(resourceName);\n     }\n \n     @Transactional(readOnly = true)\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{resourceName}\")\n-    public ResourceTO read(HttpServletResponse response,\n-            @PathVariable(\"resourceName\") String resourceName)\n+    public ResourceTO read(final HttpServletResponse response,\n+            final @PathVariable(\"resourceName\") String resourceName)\n             throws NotFoundException {\n \n         TargetResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n             LOG.error(\"Could not find resource '\" + resourceName + \"'\");\n-\n-            throw new NotFoundException(resourceName);\n+            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n \n         return binder.getResourceTO(resource);\n@@ -229,11 +191,9 @@ public ResourceTOs list(HttpServletResponse response)\n             throws NotFoundException {\n \n         List<TargetResource> resources = resourceDAO.findAll();\n-\n         if (resources == null) {\n-            LOG.error(\"No resource found\");\n-\n-            throw new NotFoundException(\"No resource found\");\n+            LOG.error(\"No resources found\");\n+            throw new NotFoundException(\"No resources found\");\n         }\n \n         return binder.getResourceTOs(resources);"},{"sha":"3a76b709c221e8f2507e78ea7872778f3798836d","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":22,"deletions":32,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -42,13 +42,14 @@ public class SchemaController extends AbstractController {\n     private SchemaDataBinder schemaDataBinder;\n \n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n-    public SchemaTO create(HttpServletResponse response,\n-            @RequestBody SchemaTO schemaTO,\n-            @PathVariable(\"kind\") String kind)\n-            throws MultiUniqueValueException {\n-\n-        AbstractSchema schema = getAttributableUtil(kind).newSchema();\n-        schema = schemaDataBinder.createSchema(schemaTO, schema,\n+    public SchemaTO create(final HttpServletResponse response,\n+            @RequestBody final SchemaTO schemaTO,\n+            @PathVariable(\"kind\") final String kind)\n+            throws MultiUniqueValueException,\n+            SyncopeClientCompositeErrorException {\n+\n+        AbstractSchema schema = schemaDataBinder.create(schemaTO,\n+                getAttributableUtil(kind).newSchema(),\n                 getAttributableUtil(kind).getDerivedSchemaClass());\n \n         schema = schemaDAO.save(schema);\n@@ -59,9 +60,8 @@ public SchemaTO create(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/{kind}/delete/{schema}\")\n-    public void delete(HttpServletResponse response,\n-            @PathVariable(\"kind\") String kind,\n-            @PathVariable(\"schema\") String schemaName)\n+    public void delete(@PathVariable(\"kind\") final String kind,\n+            @PathVariable(\"schema\") final String schemaName)\n             throws NotFoundException {\n \n         Class reference = getAttributableUtil(kind).getSchemaClass();\n@@ -76,7 +76,7 @@ public void delete(HttpServletResponse response,\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public SchemaTOs list(@PathVariable(\"kind\") String kind) {\n+    public SchemaTOs list(@PathVariable(\"kind\") final String kind) {\n \n         Class reference = getAttributableUtil(kind).getSchemaClass();\n         List<AbstractSchema> schemas = schemaDAO.findAll(reference);\n@@ -93,45 +93,35 @@ public SchemaTOs list(@PathVariable(\"kind\") String kind) {\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{kind}/read/{schema}\")\n-    public SchemaTO read(HttpServletResponse response,\n-            @PathVariable(\"kind\") String kind,\n-            @PathVariable(\"schema\") String schemaName)\n+    public SchemaTO read(@PathVariable(\"kind\") final String kind,\n+            @PathVariable(\"schema\") final String schemaName)\n             throws NotFoundException {\n \n         Class reference = getAttributableUtil(kind).getSchemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n         if (schema == null) {\n             LOG.error(\"Could not find schema '\" + schemaName + \"'\");\n-\n-            throw new NotFoundException(schemaName);\n+            throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n         }\n \n         return schemaDataBinder.getSchemaTO(schema);\n     }\n \n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n-    public SchemaTO update(HttpServletResponse response,\n-            @RequestBody SchemaTO schemaTO, @PathVariable(\"kind\") String kind)\n+    public SchemaTO update(@RequestBody final SchemaTO schemaTO,\n+            @PathVariable(\"kind\") final String kind)\n             throws SyncopeClientCompositeErrorException,\n             MultiUniqueValueException, NotFoundException {\n \n         Class reference = getAttributableUtil(kind).getSchemaClass();\n-        AbstractSchema schema = null;\n-        try {\n-            schema = schemaDataBinder.updateSchema(schemaTO,\n-                    reference,\n-                    getAttributableUtil(kind).getDerivedSchemaClass());\n-            if (schema == null) {\n-                LOG.error(\"Could not find schema '\" + schemaTO.getName() + \"'\");\n-\n-                throw new NotFoundException(schemaTO.getName());\n-            }\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            LOG.error(\"Could not update for \" + schemaTO, e);\n-\n-            throw e;\n+        AbstractSchema schema = schemaDAO.find(schemaTO.getName(), reference);\n+        if (schema == null) {\n+            LOG.error(\"Could not find schema '\" + schemaTO.getName() + \"'\");\n+            throw new NotFoundException(\"Schema '\" + schemaTO.getName() + \"'\");\n         }\n \n+        schema = schemaDataBinder.update(schemaTO,\n+                schema, getAttributableUtil(kind).getDerivedSchemaClass());\n         schema = schemaDAO.save(schema);\n \n         return schemaDataBinder.getSchemaTO(schema);"},{"sha":"b6e91aba4575af929059f408b7d2473b0e6f47a0","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":103,"deletions":5,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -17,8 +17,14 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.jexl2.Expression;\n+import org.apache.commons.jexl2.JexlContext;\n+import org.apache.commons.jexl2.JexlEngine;\n+import org.apache.commons.jexl2.JexlException;\n+import org.apache.commons.jexl2.MapContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -83,6 +89,8 @@ public abstract class AbstractAttributableDataBinder {\n     protected ResourceDAO resourceDAO;\n     @Autowired\n     protected MembershipDAO membershipDAO;\n+    @Autowired\n+    private JexlEngine jexlEngine;\n \n     private <T extends AbstractSchema> T getSchema(\n             final String schemaName, final Class<T> reference) {\n@@ -170,9 +178,92 @@ private void fillAttribute(Set<String> values,\n         }\n     }\n \n+    private <T extends AbstractSchema> boolean evaluateMandatoryCondition(\n+            final String mandatoryCondition,\n+            final List<? extends AbstractAttribute> attributes,\n+            final Class<T> referenceSchema) {\n+\n+        JexlContext jexlContext = new MapContext();\n+\n+        List<T> allSchemas = schemaDAO.findAll(referenceSchema);\n+        for (AbstractAttribute attribute : attributes) {\n+            jexlContext.set(attribute.getSchema().getName(),\n+                    attribute.getValues().isEmpty()\n+                    ? null\n+                    : (!attribute.getSchema().isMultivalue()\n+                    ? attribute.getValuesAsStrings().iterator().next()\n+                    : attribute.getValuesAsStrings()));\n+\n+            allSchemas.remove((T) attribute.getSchema());\n+        }\n+        for (T schema : allSchemas) {\n+            jexlContext.set(schema.getName(), null);\n+        }\n+\n+        boolean result = false;\n+\n+        try {\n+            Expression jexlExpression = jexlEngine.createExpression(\n+                    mandatoryCondition);\n+            result = Boolean.parseBoolean(\n+                    jexlExpression.evaluate(jexlContext).toString());\n+        } catch (JexlException e) {\n+            LOG.error(\"Invalid jexl expression: \" + mandatoryCondition, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    private <T extends AbstractSchema> boolean evaluateMandatoryCondition(\n+            final String resourceName,\n+            final List<? extends AbstractAttribute> attributes,\n+            final String schemaName,\n+            final Class<T> referenceSchema) {\n+\n+        List<SchemaMapping> mappings = resourceDAO.getMappings(schemaName,\n+                SchemaType.byClass(referenceSchema), resourceName);\n+\n+        boolean result = mappings == null || mappings.isEmpty()\n+                ? false : true;\n+\n+        SchemaMapping mapping;\n+        for (Iterator<SchemaMapping> itor = mappings.iterator();\n+                itor.hasNext() && result;) {\n+\n+            mapping = itor.next();\n+            result &= evaluateMandatoryCondition(\n+                    mapping.getMandatoryCondition(),\n+                    attributes,\n+                    referenceSchema);\n+        }\n+\n+        return result;\n+    }\n+\n+    private <T extends AbstractSchema> boolean evaluateMandatoryCondition(\n+            final Set<TargetResource> resources,\n+            final List<? extends AbstractAttribute> attributes,\n+            final String schemaName,\n+            final Class<T> referenceSchema) {\n+\n+        boolean result = resources == null || resources.isEmpty()\n+                ? false : true;\n+\n+        TargetResource resource;\n+        for (Iterator<TargetResource> itor = resources.iterator();\n+                itor.hasNext() && result;) {\n+\n+            resource = itor.next();\n+            result &= evaluateMandatoryCondition(resource.getName(),\n+                    attributes, schemaName, referenceSchema);\n+        }\n+\n+        return result;\n+    }\n+\n     private <T extends AbstractSchema> SyncopeClientException checkMandatory(\n-            Class<T> referenceSchema,\n-            AbstractAttributable attributable) {\n+            final Class<T> referenceSchema,\n+            final AbstractAttributable attributable) {\n \n         SyncopeClientException requiredValuesMissing =\n                 new SyncopeClientException(\n@@ -193,9 +284,16 @@ private <T extends AbstractSchema> SyncopeClientException checkMandatory(\n \n         for (T schema : allSchemas) {\n             if (attributable.getAttribute(schema.getName()) == null\n-                    && !schema.isVirtual() && !schema.isReadonly()\n-                    && (schema.isMandatory()\n-                    || schemaDAO.isMandatoryOnResources(schema, resources))) {\n+                    && !schema.isVirtual()\n+                    && !schema.isReadonly()\n+                    && (evaluateMandatoryCondition(\n+                    schema.getMandatoryCondition(),\n+                    attributable.getAttributes(),\n+                    referenceSchema)\n+                    || evaluateMandatoryCondition(resources,\n+                    attributable.getAttributes(),\n+                    schema.getName(),\n+                    referenceSchema))) {\n \n                 LOG.error(\"Mandatory schema \" + schema.getName()\n                         + \" not provided with values\");"},{"sha":"78c308b9378fd54a5f8f4c7d37d67a692b34b5b8","filename":"core/src/main/java/org/syncope/core/rest/data/DerivedSchemaDataBinder.java","status":"modified","additions":57,"deletions":23,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -14,17 +14,23 @@\n  */\n package org.syncope.core.rest.data;\n \n+import org.apache.commons.jexl2.JexlEngine;\n+import org.apache.commons.jexl2.JexlException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.to.DerivedSchemaTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n @Transactional(rollbackFor = {Throwable.class})\n@@ -41,18 +47,49 @@ public class DerivedSchemaDataBinder {\n     private SchemaDAO schemaDAO;\n     @Autowired\n     private DerivedSchemaDAO derivedSchemaDAO;\n+    @Autowired\n+    private JexlEngine jexlEngine;\n+\n+    private <T extends AbstractSchema> AbstractDerivedSchema populate(\n+            AbstractDerivedSchema derivedSchema,\n+            final DerivedSchemaTO derivedSchemaTO,\n+            final Class<T> reference,\n+            final SyncopeClientCompositeErrorException scce)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        if (derivedSchemaTO.getExpression() == null) {\n+            SyncopeClientException requiredValuesMissing =\n+                    new SyncopeClientException(\n+                    SyncopeClientExceptionType.RequiredValuesMissing);\n+            requiredValuesMissing.addElement(\"expression\");\n+\n+            scce.addException(requiredValuesMissing);\n+        }\n+\n+        try {\n+            jexlEngine.createExpression(derivedSchemaTO.getExpression());\n+        } catch (JexlException e) {\n+            LOG.error(\"Invalid derived schema expression: \"\n+                    + derivedSchemaTO.getExpression(), e);\n+\n+            SyncopeClientException invalidMandatoryCondition =\n+                    new SyncopeClientException(\n+                    SyncopeClientExceptionType.InvalidValues);\n+            invalidMandatoryCondition.addElement(\n+                    derivedSchemaTO.getExpression());\n+\n+            scce.addException(invalidMandatoryCondition);\n+        }\n \n-    private <T extends AbstractDerivedSchema, K extends AbstractSchema> T populateDerivedSchema(\n-            T derivedSchema,\n-            DerivedSchemaTO derivedSchemaTO,\n-            Class<K> reference) {\n+        if (scce.hasExceptions()) {\n+            throw scce;\n+        }\n \n         BeanUtils.copyProperties(derivedSchemaTO, derivedSchema,\n                 ignoreDerivedSchemaProperties);\n \n         AbstractSchema abstractSchema = null;\n         for (String schema : derivedSchemaTO.getSchemas()) {\n-\n             abstractSchema = schemaDAO.find(schema, reference);\n             if (abstractSchema != null) {\n                 derivedSchema.addSchema(abstractSchema);\n@@ -64,31 +101,28 @@ private <T extends AbstractDerivedSchema, K extends AbstractSchema> T populateDe\n         return derivedSchema;\n     }\n \n-    public <T extends AbstractDerivedSchema, K extends AbstractSchema> T createDerivedSchema(\n-            DerivedSchemaTO derivedSchemaTO,\n-            T derivedSchema,\n-            Class<K> reference) {\n+    public <T extends AbstractSchema> AbstractDerivedSchema create(\n+            final DerivedSchemaTO derivedSchemaTO,\n+            AbstractDerivedSchema derivedSchema,\n+            final Class<T> reference) {\n \n-        return populateDerivedSchema(derivedSchema, derivedSchemaTO, reference);\n+        return populate(derivedSchema, derivedSchemaTO, reference,\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST));\n     }\n \n-    public <T extends AbstractDerivedSchema, K extends AbstractSchema> T updateDerivedSchema(\n-            DerivedSchemaTO derivedSchemaTO,\n-            Class<T> derivedReference,\n-            Class<K> reference) {\n-\n-        T derivedSchema = derivedSchemaDAO.find(derivedSchemaTO.getName(),\n-                derivedReference);\n-        if (derivedSchema != null) {\n-            return populateDerivedSchema(\n-                    derivedSchema, derivedSchemaTO, reference);\n-        }\n+    public <K extends AbstractSchema> AbstractDerivedSchema update(\n+            final DerivedSchemaTO derivedSchemaTO,\n+            AbstractDerivedSchema derivedSchema,\n+            final Class<K> reference) {\n \n-        return null;\n+        return populate(derivedSchema, derivedSchemaTO, reference,\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST));\n     }\n \n     public <T extends AbstractDerivedSchema> DerivedSchemaTO getDerivedSchemaTO(\n-            T derivedSchema) {\n+            final T derivedSchema) {\n \n         DerivedSchemaTO derivedSchemaTO = new DerivedSchemaTO();\n         BeanUtils.copyProperties(derivedSchema, derivedSchemaTO,"},{"sha":"649450666a1a4989668af1b7a717c1a66a533e37","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":34,"deletions":12,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -17,6 +17,8 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+import org.apache.commons.jexl2.JexlEngine;\n+import org.apache.commons.jexl2.JexlException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -40,12 +42,17 @@\n @Transactional(rollbackFor = {Throwable.class})\n public class ResourceDataBinder {\n \n+    /**\n+     * Logger.\n+     */\n     private static final Logger LOG = LoggerFactory.getLogger(\n             ResourceDataBinder.class);\n     private static final String[] ignoreMappingProperties = {\n         \"id\", \"resource\"};\n     @Autowired\n     private ConnectorInstanceDAO connectorInstanceDAO;\n+    @Autowired\n+    private JexlEngine jexlEngine;\n \n     public TargetResource getResource(ResourceTO resourceTO)\n             throws SyncopeClientCompositeErrorException {\n@@ -148,7 +155,7 @@ public ResourceTO getResourceTO(TargetResource resource) {\n         return resourceTO;\n     }\n \n-    public List<SchemaMapping> getSchemaMappings(\n+    private List<SchemaMapping> getSchemaMappings(\n             TargetResource resource,\n             SchemaMappingTOs mappings) {\n \n@@ -166,7 +173,7 @@ public List<SchemaMapping> getSchemaMappings(\n \n     private SchemaMapping getSchemaMapping(\n             TargetResource resource,\n-            SchemaMappingTO mapping)\n+            SchemaMappingTO mappingTO)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException compositeErrorException =\n@@ -177,23 +184,24 @@ private SchemaMapping getSchemaMapping(\n                 new SyncopeClientException(\n                 SyncopeClientExceptionType.RequiredValuesMissing);\n \n-        if (mapping == null) {\n-            LOG.error(\"Provided null mapping\");\n+        if (mappingTO == null) {\n+            LOG.error(\"Null mappingTO provided\");\n \n             return null;\n         }\n \n-        if (mapping.getSchemaName() == null) {\n+        if (mappingTO.getSchemaName() == null) {\n             requiredValuesMissing.addElement(\"schema\");\n         }\n-\n-        if (mapping.getField() == null) {\n+        if (mappingTO.getField() == null) {\n             requiredValuesMissing.addElement(\"field\");\n         }\n-\n-        if (mapping.getSchemaType() == null) {\n+        if (mappingTO.getSchemaType() == null) {\n             requiredValuesMissing.addElement(\"type\");\n         }\n+        if (mappingTO.getMandatoryCondition() == null) {\n+            requiredValuesMissing.addElement(\"mandatoryCondition\");\n+        }\n \n         // a resource must be provided\n         if (resource == null) {\n@@ -206,14 +214,29 @@ private SchemaMapping getSchemaMapping(\n             compositeErrorException.addException(requiredValuesMissing);\n         }\n \n+        try {\n+            jexlEngine.createExpression(mappingTO.getMandatoryCondition());\n+        } catch (JexlException e) {\n+            LOG.error(\"Invalid mandatory condition: \"\n+                    + mappingTO.getMandatoryCondition(), e);\n+\n+            SyncopeClientException invalidMandatoryCondition =\n+                    new SyncopeClientException(\n+                    SyncopeClientExceptionType.InvalidValues);\n+            invalidMandatoryCondition.addElement(\n+                    mappingTO.getMandatoryCondition());\n+\n+            compositeErrorException.addException(invalidMandatoryCondition);\n+        }\n+\n         if (compositeErrorException.hasExceptions()) {\n             throw compositeErrorException;\n         }\n \n         SchemaMapping schemaMapping = new SchemaMapping();\n \n         BeanUtils.copyProperties(\n-                mapping, schemaMapping, ignoreMappingProperties);\n+                mappingTO, schemaMapping, ignoreMappingProperties);\n \n         schemaMapping.setResource(resource);\n \n@@ -246,8 +269,7 @@ public SchemaMappingTOs getSchemaMappingTOs(\n         return schemaMappingTOs;\n     }\n \n-    public SchemaMappingTO getSchemaMappingTO(\n-            SchemaMapping schemaMapping) {\n+    public SchemaMappingTO getSchemaMappingTO(SchemaMapping schemaMapping) {\n         if (schemaMapping == null) {\n             LOG.error(\"Provided null mapping\");\n "},{"sha":"b8a5dbc69f41118ca4842b68064e213f77da2d17","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":87,"deletions":56,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -15,6 +15,8 @@\n package org.syncope.core.rest.data;\n \n import java.util.Iterator;\n+import org.apache.commons.jexl2.JexlEngine;\n+import org.apache.commons.jexl2.JexlException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -34,7 +36,9 @@\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n-@Transactional(rollbackFor = {Throwable.class})\n+@Transactional(rollbackFor = {\n+    Throwable.class\n+})\n public class SchemaDataBinder {\n \n     /**\n@@ -48,17 +52,48 @@ public class SchemaDataBinder {\n     private SchemaDAO schemaDAO;\n     @Autowired\n     private DerivedSchemaDAO derivedSchemaDAO;\n+    @Autowired\n+    private JexlEngine jexlEngine;\n+\n+    private <T extends AbstractDerivedSchema> AbstractSchema populate(\n+            final AbstractSchema schema,\n+            final SchemaTO schemaTO,\n+            final Class<T> derivedReference,\n+            final SyncopeClientCompositeErrorException scce)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        if (schemaTO.getMandatoryCondition() == null) {\n+            SyncopeClientException requiredValuesMissing =\n+                    new SyncopeClientException(\n+                    SyncopeClientExceptionType.RequiredValuesMissing);\n+            requiredValuesMissing.addElement(\"mandatoryCondition\");\n+\n+            scce.addException(requiredValuesMissing);\n+        }\n+\n+        try {\n+            jexlEngine.createExpression(schemaTO.getMandatoryCondition());\n+        } catch (JexlException e) {\n+            LOG.error(\"Invalid mandatory condition: \"\n+                    + schemaTO.getMandatoryCondition(), e);\n \n-    private <T extends AbstractSchema, K extends AbstractDerivedSchema> T populateSchema(\n-            T schema,\n-            SchemaTO schemaTO,\n-            Class<K> derivedReference) {\n+            SyncopeClientException invalidMandatoryCondition =\n+                    new SyncopeClientException(\n+                    SyncopeClientExceptionType.InvalidValues);\n+            invalidMandatoryCondition.addElement(\n+                    schemaTO.getMandatoryCondition());\n+\n+            scce.addException(invalidMandatoryCondition);\n+        }\n+\n+        if (scce.hasExceptions()) {\n+            throw scce;\n+        }\n \n         BeanUtils.copyProperties(schemaTO, schema, ignoreSchemaProperties);\n \n-        AbstractDerivedSchema abstractDerivedSchema = null;\n+        AbstractDerivedSchema abstractDerivedSchema;\n         for (String derivedSchema : schemaTO.getDerivedSchemas()) {\n-\n             abstractDerivedSchema =\n                     derivedSchemaDAO.find(derivedSchema, derivedReference);\n             if (abstractDerivedSchema != null) {\n@@ -71,66 +106,62 @@ private <T extends AbstractSchema, K extends AbstractDerivedSchema> T populateSc\n         return schema;\n     }\n \n-    public <T extends AbstractSchema, K extends AbstractDerivedSchema> T createSchema(\n-            SchemaTO schemaTO,\n-            T schema,\n-            Class<K> derivedReference) {\n+    public <T extends AbstractDerivedSchema> AbstractSchema create(\n+            final SchemaTO schemaTO,\n+            AbstractSchema schema,\n+            final Class<T> derivedReference)\n+            throws SyncopeClientCompositeErrorException {\n \n-        return populateSchema(schema, schemaTO, derivedReference);\n+        return populate(schema, schemaTO, derivedReference,\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST));\n     }\n \n-    public <T extends AbstractSchema, K extends AbstractDerivedSchema> T updateSchema(\n-            SchemaTO schemaTO,\n-            Class<T> reference,\n-            Class<K> derivedReference)\n+    public <T extends AbstractDerivedSchema> AbstractSchema update(\n+            final SchemaTO schemaTO,\n+            AbstractSchema schema,\n+            final Class<T> derivedReference)\n             throws SyncopeClientCompositeErrorException {\n \n-        T schema = schemaDAO.find(schemaTO.getName(), reference);\n-        if (schema != null) {\n-            schema = populateSchema(schema, schemaTO, derivedReference);\n-\n-            boolean validationExceptionFound = false;\n-            AbstractAttribute attribute = null;\n-            AbstractAttributeValue attributeValue = null;\n-            for (Iterator<? extends AbstractAttribute> attributeItor =\n-                    schema.getAttributes().iterator();\n-                    attributeItor.hasNext() && !validationExceptionFound;) {\n-\n-                attribute = attributeItor.next();\n-                for (Iterator<? extends AbstractAttributeValue> attributeValueItor =\n-                        attribute.getValues().iterator();\n-                        attributeValueItor.hasNext()\n-                        && !validationExceptionFound;) {\n-\n-                    attributeValue = attributeValueItor.next();\n-                    try {\n-                        schema.getValidator().getValue(\n-                                attributeValue.getValueAsString(),\n-                                attributeValue);\n-                    } catch (Exception e) {\n-                        validationExceptionFound = true;\n-                    }\n+        SyncopeClientCompositeErrorException scce =\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST);\n+\n+        schema = populate(schema, schemaTO, derivedReference, scce);\n+\n+        boolean validationExceptionFound = false;\n+        AbstractAttribute attribute;\n+        AbstractAttributeValue attributeValue;\n+        for (Iterator<? extends AbstractAttribute> aItor =\n+                schema.getAttributes().iterator();\n+                aItor.hasNext() && !validationExceptionFound;) {\n+\n+            attribute = aItor.next();\n+            for (Iterator<? extends AbstractAttributeValue> avItor =\n+                    attribute.getValues().iterator();\n+                    avItor.hasNext() && !validationExceptionFound;) {\n+\n+                attributeValue = avItor.next();\n+                try {\n+                    schema.getValidator().getValue(\n+                            attributeValue.getValueAsString(),\n+                            attributeValue);\n+                } catch (Exception e) {\n+                    validationExceptionFound = true;\n                 }\n             }\n+        }\n \n-            if (validationExceptionFound) {\n-                SyncopeClientCompositeErrorException sccee =\n-                        new SyncopeClientCompositeErrorException(\n-                        HttpStatus.BAD_REQUEST);\n-\n-                SyncopeClientException e = new SyncopeClientException(\n-                        SyncopeClientExceptionType.InvalidUpdate);\n-\n-                e.addElement(schema.getName());\n-                sccee.addException(e);\n-\n-                throw sccee;\n-            }\n+        if (validationExceptionFound) {\n+            SyncopeClientException e = new SyncopeClientException(\n+                    SyncopeClientExceptionType.InvalidUpdate);\n+            e.addElement(schema.getName());\n \n-            return schema;\n+            scce.addException(e);\n+            throw scce;\n         }\n \n-        return null;\n+        return schema;\n     }\n \n     public <T extends AbstractSchema> SchemaTO getSchemaTO(T schema) {"},{"sha":"1cf750c96fca137febe0da51398112828a0dedb5","filename":"core/src/main/resources/content.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -42,11 +42,11 @@\n                           confValue=\"/tmp/bundles\"/>\n \n     <UserSchema name=\"surname\" type=\"String\" virtual=\"F\"\n-                mandatory=\"T\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n+                mandatoryCondition=\"true\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n     <UserSchema name=\"firstname\" type=\"String\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n+                mandatoryCondition=\"false\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n     <UserSchema name=\"email\" type=\"String\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"T\" uniquevalue=\"F\" readonly='F'\n+                mandatoryCondition=\"false\" multivalue=\"T\" uniquevalue=\"F\" readonly='F'\n                 validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n                \n     <UserDerivedSchema name=\"username\" expression=\"firstname + '.' + surname\"/>"},{"sha":"18d1f1c6cd152ab0ae8ef48713383e6ab8f6d57f","filename":"core/src/main/resources/ehcache.xml","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fresources%2Fehcache.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fresources%2Fehcache.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fehcache.xml?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -2,9 +2,9 @@\n <ehcache xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:noNamespaceSchemaLocation=\"http://ehcache.org/ehcache.xsd\">\n   \n-  <diskStore path=\"java.io.tmpdir/syncope-cache\"/>\n+    <diskStore path=\"java.io.tmpdir/syncope-cache\"/>\n   \n-  <cacheManagerPeerProviderFactory\n+    <cacheManagerPeerProviderFactory\n       class=\"net.sf.ehcache.distribution.jgroups.JGroupsCacheManagerPeerProviderFactory\"\n       properties=\"connect=UDP(mcast_addr=231.12.21.132;mcast_port=45566;ip_ttl=32;\n \t\t  mcast_send_buf_size=150000;mcast_recv_buf_size=80000):\n@@ -15,21 +15,21 @@\n \t\t  UNICAST(timeout=5000):\n \t\t  pbcast.STABLE(desired_avg_gossip=20000):\n \t\t  FRAG:\n-\t\t  pbcast.GMS(join_timeout=5000;join_retry_timeout=2000;\n-\t\t  shun=false;print_local_addr=true)\"\n+\t\t  pbcast.GMS(join_timeout=5000;\n+                  shun=false;print_local_addr=true)\"\n       propertySeparator=\"::\"/>\n   \n-  <defaultCache\n+    <defaultCache\n       maxElementsInMemory=\"1000\"\n       eternal=\"false\"\n       timeToIdleSeconds=\"1000\"\n       timeToLiveSeconds=\"1000\"\n       overflowToDisk=\"false\">\n-    <cacheEventListenerFactory\n+        <cacheEventListenerFactory\n \tclass=\"net.sf.ehcache.distribution.jgroups.JGroupsCacheReplicatorFactory\"\n \tproperties=\"replicateAsynchronously=true, replicatePuts=true,\n \t\t    replicateUpdates=true, replicateUpdatesViaCopy=false,\n \t\t    replicateRemovals=true\" />\n-  </defaultCache>\n+    </defaultCache>\n   \n </ehcache>"},{"sha":"bd3394de9a068fadc82104dd5bce98f64c9307c1","filename":"core/src/main/resources/log4j.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -50,7 +50,7 @@\n         <param name=\"MaxFileSize\" value=\"10240KB\" />\n         <param name=\"MaxBackupIndex\" value=\"10\" />\n         <layout class=\"org.apache.log4j.PatternLayout\">\n-            <param name=\"ConversionPattern\" value=\"%-5p %d %C.%M:%L %m%n\"/>\n+            <param name=\"ConversionPattern\" value=\"%-5p %d %m%n\"/>\n         </layout>\n     </appender>\n "},{"sha":"7ae75ffdf262143c57b90ad9dc09c2ef64b0fdcf","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -126,7 +126,14 @@\n           class=\"org.syncope.core.persistence.transaction.SpringJTAWithJPAFallbackTransactionManager\">\n         <property name=\"jpaTransactionManager\" ref=\"jpaTransactionManager\"/>\n     </bean>\n-    \n+\n+    <bean id=\"jexlEngine\"\n+          class=\"org.apache.commons.jexl2.JexlEngine\">\n+        <property name=\"cache\" value=\"512\"/>\n+        <property name=\"lenient\" value=\"true\"/>\n+        <property name=\"silent\" value=\"false\"/>\n+    </bean>\n+\n     <bean id=\"propagationManager\"\n           class=\"org.syncope.core.persistence.propagation.PropagationManager\"/>\n </beans>"},{"sha":"15001de2b7d8a2057e258a642655cda87edafe3f","filename":"core/src/test/java/org/syncope/core/test/persistence/SchemaDAOTest.java","status":"modified","additions":1,"deletions":38,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -14,16 +14,12 @@\n  */\n package org.syncope.core.test.persistence;\n \n-import java.util.HashSet;\n import static org.junit.Assert.*;\n \n import java.util.List;\n-import java.util.Set;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.ResourceDAO;\n@@ -63,7 +59,7 @@ public final void save() {\n         attributeSchema.setType(SchemaValueType.String);\n         attributeSchema.setValidatorClass(\n                 \"org.syncope.core.validation.EmailAddressValidator\");\n-        attributeSchema.setMandatory(false);\n+        attributeSchema.setMandatoryCondition(\"false\");\n         attributeSchema.setMultivalue(true);\n \n         try {\n@@ -87,37 +83,4 @@ public final void delete() {\n         UserSchema actual = schemaDAO.find(\"username\", UserSchema.class);\n         assertNull(\"delete did not work\", actual);\n     }\n-\n-    @Test\n-    public final void checkForMandatoryOnResource() {\n-        TargetResource resource = resourceDAO.find(\"ws-target-resource-1\");\n-\n-        assertNotNull(resource);\n-\n-        AbstractSchema schema = schemaDAO.find(\"email\", UserSchema.class);\n-\n-        assertNotNull(schema);\n-\n-        // schema not mandatory but field onto the resource mandatory\n-        assertTrue(schemaDAO.isMandatoryOnResource(schema, resource));\n-\n-        resource = resourceDAO.find(\"ws-target-resource-update\");\n-\n-        // schema not mandatory and field onto the resource not mandatory\n-        assertFalse(schemaDAO.isMandatoryOnResource(schema, resource));\n-\n-        schema = schemaDAO.find(\"userId\", UserSchema.class);\n-\n-        // multi choice\n-        TargetResource resource1 =\n-                resourceDAO.find(\"ws-target-resource-list-mappings-2\");\n-        TargetResource resource2 =\n-                resourceDAO.find(\"ws-target-resource-update\");\n-\n-        Set<TargetResource> resources = new HashSet<TargetResource>();\n-        resources.add(resource1);\n-        resources.add(resource2);\n-\n-        assertTrue(schemaDAO.isMandatoryOnResources(schema, resources));\n-    }\n }"},{"sha":"6c3b711a5af89c497be379bf539d20e6bf4a7a83","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/ResourceTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -69,7 +69,7 @@ public final void issue42() {\n         schemaMappingTO.setField(\"campo1\");\n         schemaMappingTO.setAccountid(true);\n         schemaMappingTO.setPassword(false);\n-        schemaMappingTO.setNullable(false);\n+        schemaMappingTO.setMandatoryCondition(\"false\");\n \n         SchemaMappingTOs schemaMappingTOs = new SchemaMappingTOs();\n         schemaMappingTOs.addMapping(schemaMappingTO);\n@@ -122,6 +122,7 @@ public final void save() throws ClassNotFoundException {\n \n             mapping.setSchemaName(userSchema.getName());\n             mapping.setSchemaType(SchemaType.UserSchema);\n+            mapping.setMandatoryCondition(\"false\");\n \n             resource.addMapping(mapping);\n         }"},{"sha":"5de6a3bc0d5f66533fb376bcfbf09b505484f6e6","filename":"core/src/test/java/org/syncope/core/test/rest/SchemaTestITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -31,7 +31,7 @@ public class SchemaTestITCase extends AbstractTestITCase {\n     public void create() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"testAttribute\");\n-        schemaTO.setMandatory(true);\n+        schemaTO.setMandatoryCondition(\"true\");\n         schemaTO.setType(SchemaValueType.String);\n \n         SchemaTO newSchemaTO = restTemplate.postForObject(BASE_URL\n@@ -56,8 +56,8 @@ public void delete() {\n         }\n         assertNull(username);\n \n-        restTemplate.delete(BASE_URL +\n-                \"schema/membership/delete/subscriptionDate.json\");\n+        restTemplate.delete(BASE_URL\n+                + \"schema/membership/delete/subscriptionDate.json\");\n         SchemaTO subscriptionDate = null;\n         try {\n             subscriptionDate = restTemplate.getForObject(BASE_URL\n@@ -100,8 +100,8 @@ public void update() {\n         try {\n             restTemplate.postForObject(BASE_URL\n                     + \"schema/role/update\", updatedTO, SchemaTO.class);\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            syncopeClientException = e.getException(\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            syncopeClientException = scce.getException(\n                     SyncopeClientExceptionType.InvalidUpdate);\n         }\n         assertNotNull(syncopeClientException);"},{"sha":"18821fc151bd9d7c5921f702be50d810239f63dd","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":18,"deletions":4,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -167,13 +167,11 @@ public final void createWithRequiredValueMissing() {\n         UserTO userTO = getSampleTO(\"a.b@c.it\");\n \n         AttributeTO type = null;\n-\n         for (AttributeTO attr : userTO.getAttributes()) {\n             if (\"type\".equals(attr.getSchema())) {\n                 type = attr;\n             }\n         }\n-\n         assertNotNull(type);\n \n         userTO.removeAttribute(type);\n@@ -183,16 +181,32 @@ public final void createWithRequiredValueMissing() {\n         userTO.addMembership(membershipTO);\n \n         SyncopeClientCompositeErrorException ex = null;\n-\n         try {\n-            // 1. create user\n+            // 1. create user without type (mandatory by UserSchema)\n             restTemplate.postForObject(\n                     BASE_URL + \"user/create?syncRoles=8\",\n                     userTO, UserTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             ex = e;\n         }\n+        assertNotNull(ex);\n+        assertNotNull(ex.getException(\n+                SyncopeClientExceptionType.RequiredValuesMissing));\n+\n+        AttributeTO fType = new AttributeTO();\n+        fType.setSchema(\"type\");\n+        fType.addValue(\"F\");\n+        userTO.addAttribute(fType);\n \n+        ex = null;\n+        try {\n+            // 2. create user without firstname (mandatory when type == 'F')\n+            restTemplate.postForObject(\n+                    BASE_URL + \"user/create?syncRoles=8\",\n+                    userTO, UserTO.class);\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            ex = e;\n+        }\n         assertNotNull(ex);\n         assertNotNull(ex.getException(\n                 SyncopeClientExceptionType.RequiredValuesMissing));"},{"sha":"c6a560b1f130d022d5c7c193e595859bc838983b","filename":"core/src/test/resources/content.xml","status":"modified","additions":31,"deletions":26,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -61,35 +61,35 @@\n     <Membership id=\"5\" syncopeUser_id=\"1\" syncopeRole_id=\"8\"/>\n \n     <UserSchema name=\"username\" type=\"String\" virtual=\"F\"\n-                mandatory=\"T\" multivalue=\"F\" uniquevalue=\"T\" readonly='F'/>\n+                mandatoryCondition=\"true\" multivalue=\"F\" uniquevalue=\"T\" readonly='F'/>\n     <UserSchema name=\"userId\" type=\"String\" virtual=\"F\"\n-                mandatory=\"T\" multivalue=\"F\" uniquevalue=\"T\" readonly='F'\n+                mandatoryCondition=\"true\" multivalue=\"F\" uniquevalue=\"T\" readonly='F'\n                 validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n     <UserSchema name=\"loginDate\" type=\"Date\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"T\" uniquevalue=\"F\" readonly='F'\n+                mandatoryCondition=\"false\" multivalue=\"T\" uniquevalue=\"F\" readonly='F'\n                 conversionPattern=\"yyyy-MM-dd\"/>\n     <UserSchema name=\"firstname\" type=\"String\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n+                mandatoryCondition=\"false\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n     <UserSchema name=\"surname\" type=\"String\" virtual=\"F\"\n-                mandatory=\"T\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n+                mandatoryCondition=\"true\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n     <UserSchema name=\"type\" type=\"String\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n+                mandatoryCondition=\"false\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n     <UserSchema name=\"email\" type=\"String\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"T\" readonly='F'\n+                mandatoryCondition=\"false\" multivalue=\"F\" uniquevalue=\"T\" readonly='F'\n                 validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n     <UserSchema name=\"activationDate\" type=\"Date\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'\n+                mandatoryCondition=\"false\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'\n                 conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n     <UserSchema name=\"uselessReadonly\" type=\"String\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='T'/>\n+                mandatoryCondition=\"false\" multivalue=\"F\" uniquevalue=\"F\" readonly='T'/>\n \n     <RoleSchema name=\"icon\" type=\"String\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n+                mandatoryCondition=\"false\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n     <RoleSchema name=\"show\" type=\"Boolean\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n+                mandatoryCondition=\"false\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n \n     <MembershipSchema name=\"subscriptionDate\" type=\"Date\" virtual=\"F\"\n-                      mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'\n+                      mandatoryCondition=\"false\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'\n                       conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n \n     <UserAttribute id=\"100\" owner_id=\"1\" schema_name=\"username\"/>\n@@ -185,72 +185,77 @@\n \n     <SchemaMapping id=\"99\" field=\"userid\"\n                    resource_name=\"ws-target-resource-1\"\n-                   schemaName=\"AccountId\" schemaType=\"AccountId\" nullable=\"F\"\n+                   schemaName=\"AccountId\" schemaType=\"AccountId\" mandatoryCondition=\"true\"\n                    accountid=\"T\" password=\"F\"/>\n \n     <SchemaMapping id=\"100\" field=\"email\"\n                    resource_name=\"ws-target-resource-1\"\n-                   schemaName=\"email\" schemaType=\"UserSchema\" nullable=\"F\"\n+                   schemaName=\"email\" schemaType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"T\" password=\"F\"/>\n \n     <SchemaMapping id=\"101\" field=\"username\"\n                    resource_name=\"ws-target-resource-2\"\n-                   schemaName=\"username\" schemaType=\"UserSchema\" nullable=\"F\"\n+                   schemaName=\"username\" schemaType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"T\" password=\"F\"/>\n \n     <SchemaMapping id=\"102\" field=\"email\"\n                    resource_name=\"ws-target-resource-list-mappings-1\"\n-                   schemaName=\"email\" schemaType=\"UserSchema\" nullable=\"F\"\n+                   schemaName=\"email\" schemaType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"T\" password=\"F\"/>\n \n     <SchemaMapping id=\"103\" field=\"surname\"\n                    resource_name=\"ws-target-resource-list-mappings-1\"\n-                   schemaName=\"surname\" schemaType=\"UserSchema\" nullable=\"F\"\n+                   schemaName=\"surname\" schemaType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"F\" password=\"F\"/>\n \n     <SchemaMapping id=\"104\" field=\"userid\"\n                    resource_name=\"ws-target-resource-list-mappings-2\"\n-                   schemaName=\"userId\" schemaType=\"UserSchema\" nullable=\"F\"\n+                   schemaName=\"userId\" schemaType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"T\" password=\"F\"/>\n \n     <SchemaMapping id=\"105\" field=\"surname\"\n                    resource_name=\"ws-target-resource-1\"\n-                   schemaName=\"surname\" schemaType=\"UserSchema\" nullable=\"F\"\n+                   schemaName=\"surname\" schemaType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"F\" password=\"F\"/>\n \n     <SchemaMapping id=\"106\" field=\"password\"\n                    resource_name=\"ws-target-resource-1\"\n-                   schemaName=\"Password\" schemaType=\"Password\" nullable=\"F\"\n+                   schemaName=\"Password\" schemaType=\"Password\" mandatoryCondition=\"true\"\n                    accountid=\"F\" password=\"T\"/>\n \n     <SchemaMapping id=\"107\" field=\"password\"\n                    resource_name=\"ws-target-resource-2\"\n-                   schemaName=\"Password\" schemaType=\"Password\" nullable=\"F\"\n+                   schemaName=\"Password\" schemaType=\"Password\" mandatoryCondition=\"true\"\n                    accountid=\"F\" password=\"T\"/>\n \n     <SchemaMapping id=\"108\" field=\"type\"\n                    resource_name=\"ws-target-resource-2\"\n-                   schemaName=\"type\" schemaType=\"UserSchema\" nullable=\"F\"\n+                   schemaName=\"type\" schemaType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"F\" password=\"F\"/>\n \n     <SchemaMapping id=\"109\" field=\"surname\"\n                    resource_name=\"ws-target-resource-2\"\n-                   schemaName=\"surname\" schemaType=\"UserSchema\" nullable=\"F\"\n+                   schemaName=\"surname\" schemaType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"F\" password=\"F\"/>\n \n     <SchemaMapping id=\"110\" field=\"email\"\n                    resource_name=\"ws-target-resource-update\"\n-                   schemaName=\"email\" schemaType=\"UserSchema\" nullable=\"T\"\n+                   schemaName=\"email\" schemaType=\"UserSchema\" mandatoryCondition=\"false\"\n                    accountid=\"F\" password=\"F\"/>\n \n     <SchemaMapping id=\"111\" field=\"userId\"\n                    resource_name=\"ws-target-resource-update\"\n-                   schemaName=\"userId\" schemaType=\"UserSchema\" nullable=\"T\"\n+                   schemaName=\"userId\" schemaType=\"UserSchema\" mandatoryCondition=\"false\"\n                    accountid=\"F\" password=\"F\"/>\n     \n     <SchemaMapping id=\"112\" field=\"test3\"\n                    resource_name=\"ws-target-resource-update\"\n-                   schemaName=\"username\" schemaType=\"UserSchema\" nullable=\"T\"\n+                   schemaName=\"username\" schemaType=\"UserSchema\" mandatoryCondition=\"false\"\n+                   accountid=\"F\" password=\"F\"/>\n+\n+    <SchemaMapping id=\"113\" field=\"name\"\n+                   resource_name=\"ws-target-resource-2\"\n+                   schemaName=\"firstname\" schemaType=\"UserSchema\" mandatoryCondition=\"type == 'F'\"\n                    accountid=\"F\" password=\"F\"/>\n \n     <Entitlement name=\"base\"/>"},{"sha":"d23ce5fab6906a6ca47f9a044f29963cd28ff840","filename":"identityconnectors/bundles/staticws/staticwebservice/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/WebServiceConnector.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a977d1307e711f876fc1e42c51a636c5bb866fe/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a977d1307e711f876fc1e42c51a636c5bb866fe/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java?ref=6a977d1307e711f876fc1e42c51a636c5bb866fe","patch":"@@ -283,7 +283,7 @@ public Uid create(\n             if (value == null && !wsAttributeValue.isNullable()) {\n                 // TODO: provisioningexception\n                 throw new IllegalArgumentException(\n-                        \"Missing required parameter \" + attr.getName());\n+                        \"Missing required parameter '\" + attr.getName() + \"'\");\n             }\n \n             if (value instanceof GuardedString"}]}