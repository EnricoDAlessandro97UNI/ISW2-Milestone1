{"sha":"8683655c629421139ac81c641114153f7c01485f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg2ODM2NTVjNjI5NDIxMTM5YWM4MWM2NDExMTQxNTNmN2MwMTQ4NWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-09T07:53:54Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-09T07:54:04Z"},"message":"[SYNCOPE-1067] Fix test execution","tree":{"sha":"d6a99f9a1cf00c1f7d1623023abed414ac9b591e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d6a99f9a1cf00c1f7d1623023abed414ac9b591e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8683655c629421139ac81c641114153f7c01485f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8683655c629421139ac81c641114153f7c01485f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8683655c629421139ac81c641114153f7c01485f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8683655c629421139ac81c641114153f7c01485f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a1bb672317e9bbd605a19e89272456b3ca8066f6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a1bb672317e9bbd605a19e89272456b3ca8066f6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a1bb672317e9bbd605a19e89272456b3ca8066f6"}],"stats":{"total":35,"additions":17,"deletions":18},"files":[{"sha":"1ad59ea3fcef0cdea7125f08a8c69b7acbbed593","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DynRealmITCase.java","status":"modified","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8683655c629421139ac81c641114153f7c01485f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8683655c629421139ac81c641114153f7c01485f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java?ref=8683655c629421139ac81c641114153f7c01485f","patch":"@@ -113,13 +113,12 @@ public void delegatedAdmin() {\n             role = createRole(role);\n             assertNotNull(role);\n \n-            // 3. assign the new role to vivaldi\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\");\n-            userPatch.getRoles().add(new StringPatchItem.Builder().value(role.getKey()).build());\n-            UserTO vivaldi = updateUser(userPatch).getEntity();\n-            assertNotNull(vivaldi);\n-            assertTrue(vivaldi.getRoles().contains(role.getKey()));\n+            // 3. create new user and assign the new role\n+            UserTO dynRealmAdmin = UserITCase.getUniqueSampleTO(\"dynRealmAdmin@apache.org\");\n+            dynRealmAdmin.setPassword(\"password123\");\n+            dynRealmAdmin.getRoles().add(role.getKey());\n+            dynRealmAdmin = createUser(dynRealmAdmin).getEntity();\n+            assertNotNull(dynRealmAdmin);\n \n             // 4. create new user and group, assign resource-ldap\n             UserTO user = UserITCase.getUniqueSampleTO(\"dynRealmUser@apache.org\");\n@@ -158,20 +157,20 @@ public boolean evaluate(final GroupTO object) {\n                 }\n             }));\n \n-            // 6. perpare to act as vivaldi\n-            SyncopeClient vivaldiClient = clientFactory.create(\"vivaldi\", ADMIN_PWD);\n-            UserService vivaldiUserService = vivaldiClient.getService(UserService.class);\n-            GroupService vivaldiGroupService = vivaldiClient.getService(GroupService.class);\n+            // 6. prepare to act as delegated admin\n+            SyncopeClient delegatedClient = clientFactory.create(dynRealmAdmin.getUsername(), \"password123\");\n+            UserService delegatedUserService = delegatedClient.getService(UserService.class);\n+            GroupService delegatedGroupService = delegatedClient.getService(GroupService.class);\n \n             // 7. verify delegated administration\n             // USER_READ\n-            assertNotNull(vivaldiUserService.read(userKey));\n+            assertNotNull(delegatedUserService.read(userKey));\n \n             // GROUP_READ\n-            assertNotNull(vivaldiGroupService.read(groupKey));\n+            assertNotNull(delegatedGroupService.read(groupKey));\n \n             // USER_SEARCH\n-            matchingUsers = vivaldiUserService.search(new AnyQuery.Builder().realm(\"/\").build());\n+            matchingUsers = delegatedUserService.search(new AnyQuery.Builder().realm(\"/\").build());\n             assertTrue(IterableUtils.matchesAny(matchingUsers.getResult(), new Predicate<UserTO>() {\n \n                 @Override\n@@ -181,10 +180,10 @@ public boolean evaluate(final UserTO object) {\n             }));\n \n             // USER_UPDATE\n-            userPatch = new UserPatch();\n+            UserPatch userPatch = new UserPatch();\n             userPatch.setKey(userKey);\n             userPatch.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_NOPROPAGATION).build());\n-            user = vivaldiUserService.update(userPatch).\n+            user = delegatedUserService.update(userPatch).\n                     readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                     }).getEntity();\n             assertNotNull(user);\n@@ -194,7 +193,7 @@ public boolean evaluate(final UserTO object) {\n             GroupPatch groupPatch = new GroupPatch();\n             groupPatch.setKey(groupKey);\n             groupPatch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"icon\", \"modified\")).build());\n-            group = vivaldiGroupService.update(groupPatch).\n+            group = delegatedGroupService.update(groupPatch).\n                     readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n                     }).getEntity();\n             assertNotNull(group);"},{"sha":"0e6357ff77748819edea499b59d4f8bd21e5568f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ExceptionMapperITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8683655c629421139ac81c641114153f7c01485f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8683655c629421139ac81c641114153f7c01485f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java?ref=8683655c629421139ac81c641114153f7c01485f","patch":"@@ -125,7 +125,7 @@ public void sameGroupName() {\n             fail();\n         } catch (Exception e) {\n             String message = ERROR_MESSAGES.getProperty(\"errMessage.UniqueConstraintViolation\");\n-            assertEquals(\"EntityExists [\" + message + \"]\", e.getMessage());\n+            assertEquals(\"DataIntegrityViolation [\" + message + \"]\", e.getMessage());\n         }\n     }\n "}]}