{"sha":"1d482c225506ab3d348ec575c12038cfb2236df7","node_id":"C_kwDOJfYA1toAKDFkNDgyYzIyNTUwNmFiM2QzNDhlYzU3NWMxMjAzOGNmYjIyMzZkZjc","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-02-02T13:16:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-02-02T13:16:06Z"},"message":"Cleaning up saml2sp4ui and oidcc4ui","tree":{"sha":"685b5da3a2c92ac2bef60f0078cf6345543a4ec5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/685b5da3a2c92ac2bef60f0078cf6345543a4ec5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1d482c225506ab3d348ec575c12038cfb2236df7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1d482c225506ab3d348ec575c12038cfb2236df7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1d482c225506ab3d348ec575c12038cfb2236df7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1d482c225506ab3d348ec575c12038cfb2236df7/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8803086c39a58ea7372b82412c3009d0058465a6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8803086c39a58ea7372b82412c3009d0058465a6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8803086c39a58ea7372b82412c3009d0058465a6"}],"stats":{"total":298,"additions":151,"deletions":147},"files":[{"sha":"49002e9d6372cc933e686bf56d3566da2ca9d2ec","filename":"ext/oidcc4ui/client-console/src/main/java/org/apache/syncope/client/console/rest/OIDCProviderRestClient.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Foidcc4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FOIDCProviderRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Foidcc4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FOIDCProviderRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FOIDCProviderRestClient.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.rest;\n \n import java.util.List;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.common.lib.to.OIDCC4UIProviderTO;\n import org.apache.syncope.common.rest.api.service.OIDCC4UIProviderService;\n \n@@ -32,11 +31,11 @@ public static List<OIDCC4UIProviderTO> list() {\n     }\n \n     public static void create(final OIDCC4UIProviderTO op) {\n-        SyncopeConsoleSession.get().getService(OIDCC4UIProviderService.class).create(op);\n+        getService(OIDCC4UIProviderService.class).create(op);\n     }\n \n     public static void createFromDiscovery(final OIDCC4UIProviderTO op) {\n-        SyncopeConsoleSession.get().getService(OIDCC4UIProviderService.class).createFromDiscovery(op);\n+        getService(OIDCC4UIProviderService.class).createFromDiscovery(op);\n     }\n \n     public static OIDCC4UIProviderTO read(final String key) {"},{"sha":"aaea125970c512f57f677549b740f5b85095c8ee","filename":"ext/oidcc4ui/common-lib/src/main/java/org/apache/syncope/common/lib/to/OIDCC4UIProviderTO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Foidcc4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCC4UIProviderTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Foidcc4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCC4UIProviderTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCC4UIProviderTO.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -50,14 +50,14 @@ public class OIDCC4UIProviderTO extends ItemContainer implements EntityTO {\n \n     private boolean hasDiscovery;\n \n-    private UserTO userTemplate;\n-\n     private boolean createUnmatching;\n \n     private boolean updateMatching;\n \n     private boolean selfRegUnmatching;\n \n+    private UserTO userTemplate;\n+\n     private final List<String> actions = new ArrayList<>();\n \n     @Override"},{"sha":"4315ed76edde881cbf3d3678f06b6b177edffd46","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/OIDCC4UILogic.java","status":"modified","additions":12,"deletions":20,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -95,20 +95,14 @@ protected OidcClient getOidcClient(final OIDCC4UIProvider op, final String callb\n         return oidcClientCache.get(op.getName()).orElseGet(() -> oidcClientCache.add(op, callbackUrl));\n     }\n \n-    protected OidcClient getOidcClient(final String opName, final String callbackUrl) {\n-        OIDCC4UIProvider op = opDAO.findByName(opName);\n-        if (op == null) {\n-            throw new NotFoundException(\"OIDC Provider '\" + opName + '\\'');\n-        }\n-\n-        return getOidcClient(op, callbackUrl);\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public OIDCRequest createLoginRequest(final String redirectURI, final String opName) {\n+        // 0. look for OP\n+        OIDCC4UIProvider op = Optional.ofNullable(opDAO.findByName(opName)).\n+                orElseThrow(() -> new NotFoundException(\"OIDC Provider '\" + opName + '\\''));\n+\n         // 1. look for OidcClient\n-        OidcClient oidcClient = getOidcClient(opName, redirectURI);\n-        oidcClient.setCallbackUrl(redirectURI);\n+        OidcClient oidcClient = getOidcClient(op, redirectURI);\n \n         // 2. create OIDCRequest\n         WithLocationAction action = oidcClient.getRedirectionAction(\n@@ -128,14 +122,11 @@ public OIDCRequest createLoginRequest(final String redirectURI, final String opN\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public OIDCLoginResponse login(final String redirectURI, final String authorizationCode, final String opName) {\n         // 0. look for OP\n-        OIDCC4UIProvider op = opDAO.findByName(opName);\n-        if (op == null) {\n-            throw new NotFoundException(\"OIDC Provider '\" + opName + '\\'');\n-        }\n+        OIDCC4UIProvider op = Optional.ofNullable(opDAO.findByName(opName)).\n+                orElseThrow(() -> new NotFoundException(\"OIDC Provider '\" + opName + '\\''));\n \n         // 1. look for configured client\n-        OidcClient oidcClient = getOidcClient(opName, redirectURI);\n-        oidcClient.setCallbackUrl(redirectURI);\n+        OidcClient oidcClient = getOidcClient(op, redirectURI);\n \n         // 2. get OpenID Connect tokens\n         String idTokenHint;\n@@ -265,9 +256,10 @@ public OIDCRequest createLogoutRequest(final String accessToken, final String re\n         }\n \n         // 1. look for OidcClient\n-        OidcClient oidcClient =\n-                getOidcClient((String) claimsSet.getClaim(JWT_CLAIM_OP_NAME), redirectURI);\n-        oidcClient.setCallbackUrl(redirectURI);\n+        OIDCC4UIProvider op = Optional.ofNullable(opDAO.findByName((String) claimsSet.getClaim(JWT_CLAIM_OP_NAME))).\n+                orElseThrow(() -> new NotFoundException(\"\"\n+                + \"OIDC Provider '\" + claimsSet.getClaim(JWT_CLAIM_OP_NAME) + '\\''));\n+        OidcClient oidcClient = getOidcClient(op, redirectURI);\n \n         // 2. create OIDCRequest\n         OidcProfile profile = new OidcProfile();"},{"sha":"2071cb7c8debd9d427bf6a647179ff9d59b12f59","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/OIDCC4UILogicContext.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogicContext.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -75,21 +75,25 @@ public OIDCUserManager oidcUserManager(\n     @ConditionalOnMissingBean\n     @Bean\n     public OIDCC4UILogic oidcc4UILogic(\n-            final OIDCC4UIProviderDAO opDAO,\n             final OIDCClientCache oidcClientCache,\n             final AuthDataAccessor authDataAccessor,\n             final AccessTokenDataBinder accessTokenDataBinder,\n+            final OIDCC4UIProviderDAO opDAO,\n             final OIDCUserManager userManager) {\n \n-        return new OIDCC4UILogic(oidcClientCache, authDataAccessor,\n-                accessTokenDataBinder, opDAO, userManager);\n+        return new OIDCC4UILogic(\n+                oidcClientCache,\n+                authDataAccessor,\n+                accessTokenDataBinder,\n+                opDAO,\n+                userManager);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n     public OIDCC4UIProviderLogic oidcc4UIProviderLogic(\n-            final OIDCC4UIProviderDAO opDAO,\n             final OIDCClientCache oidcClientCache,\n+            final OIDCC4UIProviderDAO opDAO,\n             final OIDCC4UIProviderDataBinder binder) {\n \n         return new OIDCC4UIProviderLogic(oidcClientCache, opDAO, binder);"},{"sha":"b0e84c59d880515bf8b2ea0a6947ad22f919873f","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/OIDCC4UIProviderLogic.java","status":"modified","additions":29,"deletions":26,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UIProviderLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UIProviderLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UIProviderLogic.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -18,8 +18,11 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import com.nimbusds.oauth2.sdk.ParseException;\n+import java.io.IOException;\n import java.lang.reflect.Method;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -37,27 +40,34 @@\n \n public class OIDCC4UIProviderLogic extends AbstractTransactionalLogic<OIDCC4UIProviderTO> {\n \n-    protected final OIDCClientCache oidcClientClientCache;\n+    protected final OIDCClientCache oidcClientCache;\n \n     protected final OIDCC4UIProviderDAO opDAO;\n \n     protected final OIDCC4UIProviderDataBinder binder;\n \n     public OIDCC4UIProviderLogic(\n-            final OIDCClientCache oidcClientClientCache,\n+            final OIDCClientCache oidcClientCache,\n             final OIDCC4UIProviderDAO opDAO,\n             final OIDCC4UIProviderDataBinder binder) {\n \n-        this.oidcClientClientCache = oidcClientClientCache;\n+        this.oidcClientCache = oidcClientCache;\n         this.opDAO = opDAO;\n         this.binder = binder;\n     }\n \n     @PreAuthorize(\"hasRole('\" + OIDC4UIEntitlement.OP_CREATE + \"')\")\n     public String createFromDiscovery(final OIDCC4UIProviderTO opTO) {\n-        OIDCClientCache.importMetadata(opTO);\n-\n-        return create(opTO);\n+        try {\n+            OIDCClientCache.importMetadata(opTO);\n+\n+            return create(opTO);\n+        } catch (IOException | InterruptedException | ParseException e) {\n+            LOG.error(\"While getting the Discovery Document for {}\", opTO.getIssuer(), e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n     }\n \n     @PreAuthorize(\"hasRole('\" + OIDC4UIEntitlement.OP_CREATE + \"')\")\n@@ -83,19 +93,16 @@ public List<OIDCC4UIProviderTO> list() {\n     @PreAuthorize(\"hasRole('\" + OIDC4UIEntitlement.OP_READ + \"')\")\n     @Transactional(readOnly = true)\n     public OIDCC4UIProviderTO read(final String key) {\n-        OIDCC4UIProvider op = opDAO.find(key);\n-        if (op == null) {\n-            throw new NotFoundException(\"OIDC Provider '\" + key + '\\'');\n-        }\n+        OIDCC4UIProvider op = Optional.ofNullable(opDAO.find(key)).\n+                orElseThrow(() -> new NotFoundException(\"OIDC Provider '\" + key + '\\''));\n+\n         return binder.getOIDCProviderTO(op);\n     }\n \n     @PreAuthorize(\"hasRole('\" + OIDC4UIEntitlement.OP_UPDATE + \"')\")\n     public void update(final OIDCC4UIProviderTO opTO) {\n-        OIDCC4UIProvider op = opDAO.find(opTO.getKey());\n-        if (op == null) {\n-            throw new NotFoundException(\"OIDC Provider '\" + opTO.getKey() + '\\'');\n-        }\n+        OIDCC4UIProvider op = Optional.ofNullable(opDAO.find(opTO.getKey())).\n+                orElseThrow(() -> new NotFoundException(\"OIDC Provider '\" + opTO.getKey() + '\\''));\n \n         if (!op.getIssuer().equals(opTO.getIssuer())) {\n             LOG.error(\"Issuers do not match: expected {}, found {}\",\n@@ -104,22 +111,18 @@ public void update(final OIDCC4UIProviderTO opTO) {\n             sce.getElements().add(\"Issuers do not match\");\n             throw sce;\n         }\n-        String opName = op.getName();\n \n         binder.update(op, opTO);\n-        oidcClientClientCache.removeAll(opName);\n+        oidcClientCache.removeAll(op.getName());\n     }\n \n     @PreAuthorize(\"hasRole('\" + OIDC4UIEntitlement.OP_DELETE + \"')\")\n     public void delete(final String key) {\n-        OIDCC4UIProvider op = opDAO.find(key);\n-        if (op == null) {\n-            throw new NotFoundException(\"OIDC Provider '\" + key + '\\'');\n-        }\n-        String opName = op.getName();\n+        OIDCC4UIProvider op = Optional.ofNullable(opDAO.find(key)).\n+                orElseThrow(() -> new NotFoundException(\"OIDC Provider '\" + key + '\\''));\n \n         opDAO.delete(key);\n-        oidcClientClientCache.removeAll(opName);\n+        oidcClientCache.removeAll(op.getName());\n     }\n \n     @Override\n@@ -130,10 +133,10 @@ protected OIDCC4UIProviderTO resolveReference(\n \n         if (ArrayUtils.isNotEmpty(args)) {\n             for (int i = 0; key == null && i < args.length; i++) {\n-                if (args[i] instanceof String) {\n-                    key = (String) args[i];\n-                } else if (args[i] instanceof OIDCC4UIProviderTO) {\n-                    key = ((OIDCC4UIProviderTO) args[i]).getKey();\n+                if (args[i] instanceof String string) {\n+                    key = string;\n+                } else if (args[i] instanceof OIDCC4UIProviderTO oIDCC4UIProviderTO) {\n+                    key = oIDCC4UIProviderTO.getKey();\n                 }\n             }\n         }"},{"sha":"19472c8638ebcf024a89f9e668d813a6645798e5","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/oidc/OIDCClientCache.java","status":"modified","additions":11,"deletions":21,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCClientCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCClientCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCClientCache.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -33,9 +33,7 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.function.Function;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.OIDCC4UIProviderTO;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProvider;\n import org.pac4j.core.http.callback.NoParameterCallbackUrlResolver;\n import org.pac4j.oidc.client.OidcClient;\n@@ -54,27 +52,15 @@ public class OIDCClientCache {\n     protected static final Function<String, String> DISCOVERY_URI =\n             issuer -> issuer + \"/.well-known/openid-configuration\";\n \n-    protected final List<OidcClient> cache = Collections.synchronizedList(new ArrayList<>());\n-\n-    protected static OIDCProviderMetadata getDiscoveryDocument(final String issuer) {\n-        String discoveryDocumentURI = DISCOVERY_URI.apply(issuer);\n-        try {\n-            HttpResponse<String> response = HttpClient.newBuilder().build().send(\n-                    HttpRequest.newBuilder(URI.create(discoveryDocumentURI)).GET().build(),\n-                    HttpResponse.BodyHandlers.ofString());\n+    public static void importMetadata(final OIDCC4UIProviderTO opTO)\n+            throws IOException, InterruptedException, ParseException {\n \n-            return OIDCProviderMetadata.parse(response.body());\n-        } catch (IOException | InterruptedException | ParseException e) {\n-            LOG.error(\"While getting the Discovery Document at {}\", discoveryDocumentURI, e);\n-\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-            sce.getElements().add(e.getMessage());\n-            throw sce;\n-        }\n-    }\n+        String discoveryDocumentURI = DISCOVERY_URI.apply(opTO.getIssuer());\n+        HttpResponse<String> response = HttpClient.newBuilder().build().send(\n+                HttpRequest.newBuilder(URI.create(discoveryDocumentURI)).GET().build(),\n+                HttpResponse.BodyHandlers.ofString());\n \n-    public static void importMetadata(final OIDCC4UIProviderTO opTO) {\n-        OIDCProviderMetadata metadata = getDiscoveryDocument(opTO.getIssuer());\n+        OIDCProviderMetadata metadata = OIDCProviderMetadata.parse(response.body());\n \n         opTO.setIssuer(\n                 Optional.ofNullable(metadata.getIssuer()).map(Issuer::getValue).orElse(null));\n@@ -90,6 +76,8 @@ public static void importMetadata(final OIDCC4UIProviderTO opTO) {\n                 Optional.ofNullable(metadata.getEndSessionEndpointURI()).map(URI::toASCIIString).orElse(null));\n     }\n \n+    protected final List<OidcClient> cache = Collections.synchronizedList(new ArrayList<>());\n+\n     public Optional<OidcClient> get(final String opName) {\n         return cache.stream().filter(c -> opName.equals(c.getName())).findFirst();\n     }\n@@ -124,6 +112,8 @@ public OidcClient add(final OIDCC4UIProvider op, final String callbackUrl) {\n         client.setCallbackUrlResolver(new NoParameterCallbackUrlResolver());\n         client.setCallbackUrl(callbackUrl);\n         client.init();\n+\n+        cache.add(client);\n         return client;\n     }\n "},{"sha":"239040cc2a0e2dcb334ff4f7c1312ec332ced96a","filename":"ext/saml2sp4ui/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2SP4UIIdPTO.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SP4UIIdPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SP4UIIdPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SP4UIIdPTO.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -37,22 +37,22 @@ public class SAML2SP4UIIdPTO extends ItemContainer implements EntityTO {\n \n     private String metadata;\n \n+    private SAML2BindingType bindingType;\n+\n+    private boolean logoutSupported;\n+\n+    private String requestedAuthnContextProvider;\n+\n     private boolean createUnmatching;\n \n     private boolean updateMatching;\n \n     private boolean selfRegUnmatching;\n \n-    private SAML2BindingType bindingType;\n-\n-    private boolean logoutSupported;\n-\n     private UserTO userTemplate;\n \n     private final List<String> actions = new ArrayList<>();\n \n-    private String requestedAuthnContextProvider;\n-\n     @Override\n     public String getKey() {\n         return key;\n@@ -88,6 +88,30 @@ public void setMetadata(final String metadata) {\n         this.metadata = metadata;\n     }\n \n+    public SAML2BindingType getBindingType() {\n+        return bindingType;\n+    }\n+\n+    public void setBindingType(final SAML2BindingType bindingType) {\n+        this.bindingType = bindingType;\n+    }\n+\n+    public boolean isLogoutSupported() {\n+        return logoutSupported;\n+    }\n+\n+    public void setLogoutSupported(final boolean logoutSupported) {\n+        this.logoutSupported = logoutSupported;\n+    }\n+\n+    public String getRequestedAuthnContextProvider() {\n+        return requestedAuthnContextProvider;\n+    }\n+\n+    public void setRequestedAuthnContextProvider(final String requestedAuthnContextProvider) {\n+        this.requestedAuthnContextProvider = requestedAuthnContextProvider;\n+    }\n+\n     public boolean isCreateUnmatching() {\n         return createUnmatching;\n     }\n@@ -112,22 +136,6 @@ public void setUpdateMatching(final boolean updateMatching) {\n         this.updateMatching = updateMatching;\n     }\n \n-    public SAML2BindingType getBindingType() {\n-        return bindingType;\n-    }\n-\n-    public void setBindingType(final SAML2BindingType bindingType) {\n-        this.bindingType = bindingType;\n-    }\n-\n-    public boolean isLogoutSupported() {\n-        return logoutSupported;\n-    }\n-\n-    public void setLogoutSupported(final boolean logoutSupported) {\n-        this.logoutSupported = logoutSupported;\n-    }\n-\n     public UserTO getUserTemplate() {\n         return userTemplate;\n     }\n@@ -141,12 +149,4 @@ public void setUserTemplate(final UserTO userTemplate) {\n     public List<String> getActions() {\n         return actions;\n     }\n-\n-    public String getRequestedAuthnContextProvider() {\n-        return requestedAuthnContextProvider;\n-    }\n-\n-    public void setRequestedAuthnContextProvider(final String requestedAuthnContextProvider) {\n-        this.requestedAuthnContextProvider = requestedAuthnContextProvider;\n-    }\n }"},{"sha":"a4fe250bbfc4ffbb86a2fab7c115523896c82f73","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ClientCache.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -68,13 +68,6 @@ public static Optional<String> getSPMetadataPath(final String spEntityID) {\n         return Optional.ofNullable(METADATA_PATH).map(path -> path.resolve(entityIDPath).toAbsolutePath().toString());\n     }\n \n-    protected final List<SAML2Client> cache = Collections.synchronizedList(new ArrayList<>());\n-\n-    public Optional<SAML2Client> get(final String idpEntityID, final String spEntityID) {\n-        return cache.stream().filter(c -> idpEntityID.equals(c.getIdentityProviderResolvedEntityId())\n-                && spEntityID.equals(c.getConfiguration().getServiceProviderEntityId())).findFirst();\n-    }\n-\n     public static SAML2SP4UIIdPTO importMetadata(\n             final InputStream metadata, final SAML2Configuration cfg) throws IOException {\n \n@@ -123,6 +116,13 @@ public static SAML2SP4UIIdPTO importMetadata(\n         return idpTO;\n     }\n \n+    protected final List<SAML2Client> cache = Collections.synchronizedList(new ArrayList<>());\n+\n+    public Optional<SAML2Client> get(final String idpEntityID, final String spEntityID) {\n+        return cache.stream().filter(c -> idpEntityID.equals(c.getIdentityProviderResolvedEntityId())\n+                && spEntityID.equals(c.getConfiguration().getServiceProviderEntityId())).findFirst();\n+    }\n+\n     public SAML2Client add(\n             final SAML2SP4UIIdP idp, final SAML2Configuration cfg, final String spEntityID, final String callbackUrl) {\n "},{"sha":"67480923b939adf1f3831946eecc9a2059b69136","filename":"ext/saml2sp4ui/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2SP4UIIdP.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2SP4UIIdP.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -57,6 +57,10 @@ public interface SAML2SP4UIIdP extends Entity {\n \n     void setBindingType(SAML2BindingType bindingType);\n \n+    Implementation getRequestedAuthnContextProvider();\n+\n+    void setRequestedAuthnContextProvider(Implementation requestedAuthnContextProvider);\n+\n     SAML2SP4UIUserTemplate getUserTemplate();\n \n     void setUserTemplate(SAML2SP4UIUserTemplate userTemplate);\n@@ -70,8 +74,4 @@ public interface SAML2SP4UIIdP extends Entity {\n     boolean add(Implementation action);\n \n     List<? extends Implementation> getActions();\n-\n-    Implementation getRequestedAuthnContextProvider();\n-\n-    void setRequestedAuthnContextProvider(Implementation requestedAuthnContextProvider);\n }"},{"sha":"11faea6ffc674d9b3510c3b5887d7b814ec4f5d6","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2SP4UIIdP.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2SP4UIIdP.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -71,15 +71,12 @@ public class JPASAML2SP4UIIdP extends AbstractGeneratedKeyEntity implements SAML\n     @Basic(fetch = FetchType.EAGER)\n     private Byte[] metadata;\n \n+    @Column(nullable = false)\n+    private SAML2BindingType bindingType;\n+\n     @NotNull\n     private Boolean logoutSupported = false;\n \n-    @Lob\n-    private String items;\n-\n-    @Transient\n-    private final List<Item> itemList = new ArrayList<>();\n-\n     @NotNull\n     private Boolean createUnmatching = false;\n \n@@ -89,12 +86,15 @@ public class JPASAML2SP4UIIdP extends AbstractGeneratedKeyEntity implements SAML\n     @NotNull\n     private Boolean updateMatching = false;\n \n-    @Column(nullable = false)\n-    private SAML2BindingType bindingType;\n-\n     @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"idp\")\n     private JPASAML2SP4UIUserTemplate userTemplate;\n \n+    @Lob\n+    private String items;\n+\n+    @Transient\n+    private final List<Item> itemList = new ArrayList<>();\n+\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(name = \"SAML2IdP4UIAction\",\n             joinColumns ="},{"sha":"c42b205c80c5e1ea9c033ecb9f4caaaccdbadb51","filename":"ext/saml2sp4ui/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2SP4UIIdPDataBinderImpl.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SP4UIIdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SP4UIIdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SP4UIIdPDataBinderImpl.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -174,6 +174,18 @@ public SAML2SP4UIIdP update(final SAML2SP4UIIdP idp, final SAML2SP4UIIdPTO idpTO\n         idp.setUpdateMatching(idpTO.isUpdateMatching());\n         idp.setBindingType(idpTO.getBindingType());\n \n+        if (idpTO.getRequestedAuthnContextProvider() == null) {\n+            idp.setRequestedAuthnContextProvider(null);\n+        } else {\n+            Implementation implementation = implementationDAO.find(idpTO.getRequestedAuthnContextProvider());\n+            if (implementation == null) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n+                        idpTO.getRequestedAuthnContextProvider());\n+            } else {\n+                idp.setRequestedAuthnContextProvider(implementation);\n+            }\n+        }\n+\n         if (idpTO.getUserTemplate() == null) {\n             idp.setUserTemplate(null);\n         } else {\n@@ -201,18 +213,6 @@ public SAML2SP4UIIdP update(final SAML2SP4UIIdP idp, final SAML2SP4UIIdPTO idpTO\n         // remove all implementations not contained in the TO\n         idp.getActions().removeIf(impl -> !idpTO.getActions().contains(impl.getKey()));\n \n-        if (idpTO.getRequestedAuthnContextProvider() == null) {\n-            idp.setRequestedAuthnContextProvider(null);\n-        } else {\n-            Implementation implementation = implementationDAO.find(idpTO.getRequestedAuthnContextProvider());\n-            if (implementation == null) {\n-                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n-                        idpTO.getRequestedAuthnContextProvider());\n-            } else {\n-                idp.setRequestedAuthnContextProvider(implementation);\n-            }\n-        }\n-\n         return idapDAO.save(idp);\n     }\n \n@@ -251,18 +251,17 @@ public SAML2SP4UIIdPTO getIdPTO(final SAML2SP4UIIdP idp) {\n         idpTO.setSelfRegUnmatching(idp.isSelfRegUnmatching());\n         idpTO.setUpdateMatching(idp.isUpdateMatching());\n \n+        if (idp.getRequestedAuthnContextProvider() != null) {\n+            idpTO.setRequestedAuthnContextProvider(idp.getRequestedAuthnContextProvider().getKey());\n+        }\n+\n         if (idp.getUserTemplate() != null) {\n             idpTO.setUserTemplate((UserTO) idp.getUserTemplate().get());\n         }\n \n         populateItems(idp, idpTO);\n \n-        idpTO.getActions().addAll(\n-                idp.getActions().stream().map(Entity::getKey).collect(Collectors.toList()));\n-\n-        if (idp.getRequestedAuthnContextProvider() != null) {\n-            idpTO.setRequestedAuthnContextProvider(idp.getRequestedAuthnContextProvider().getKey());\n-        }\n+        idpTO.getActions().addAll(idp.getActions().stream().map(Entity::getKey).collect(Collectors.toList()));\n \n         return idpTO;\n     }"},{"sha":"632d86768645ebe96a4e9aeed3a21ee895ab09ed","filename":"ext/saml2sp4ui/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SP4UIIdPService.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Fsaml2sp4ui%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SP4UIIdPService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Fsaml2sp4ui%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SP4UIIdPService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SP4UIIdPService.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -20,6 +20,7 @@\n \n import io.swagger.v3.oas.annotations.Parameter;\n import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n import io.swagger.v3.oas.annotations.responses.ApiResponses;\n@@ -35,6 +36,7 @@\n import jakarta.ws.rs.Path;\n import jakarta.ws.rs.PathParam;\n import jakarta.ws.rs.Produces;\n+import jakarta.ws.rs.core.HttpHeaders;\n import jakarta.ws.rs.core.MediaType;\n import jakarta.ws.rs.core.Response;\n import java.io.InputStream;\n@@ -78,6 +80,15 @@ public interface SAML2SP4UIIdPService extends JAXRSService {\n      * @param input XML metadata\n      * @return the entityID values for all imported SAML 2.0 Identity Providers\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"SAML 2.0 Identity Provider successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\"),\n+                @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })"},{"sha":"a87738e08dfec33094e0cf66be1c74e668b83535","filename":"ext/saml2sp4ui/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SP4UIIdPServiceImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Fsaml2sp4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SP4UIIdPServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/ext%2Fsaml2sp4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SP4UIIdPServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SP4UIIdPServiceImpl.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -48,7 +48,8 @@ public SAML2SP4UIIdPTO read(final String key) {\n \n     @Override\n     public Response importFromMetadata(final InputStream input) {\n-        return Response.ok().header(RESTHeaders.RESOURCE_KEY, logic.importFromMetadata(input)).build();\n+        return Response.status(Response.Status.CREATED).\n+                header(RESTHeaders.RESOURCE_KEY, logic.importFromMetadata(input)).build();\n     }\n \n     @Override"},{"sha":"94dab905a214191135638b7ac4820127d7dc0896","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/OIDC4UIITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -29,6 +29,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n+import java.util.Set;\n import org.apache.http.Consts;\n import org.apache.http.HttpHeaders;\n import org.apache.http.HttpStatus;\n@@ -48,6 +49,7 @@\n import org.apache.syncope.common.lib.to.OIDCC4UIProviderTO;\n import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.jsoup.Jsoup;\n@@ -85,6 +87,8 @@ private static void clientAppSetup(final String appName, final String baseAddres\n         clientApp.setSignIdToken(true);\n         clientApp.setJwtAccessToken(true);\n         clientApp.setLogoutUri(baseAddress + OIDCC4UIConstants.URL_CONTEXT + \"/logout\");\n+        clientApp.getSupportedResponseTypes().addAll(\n+                Set.of(OIDCResponseType.CODE, OIDCResponseType.ID_TOKEN_TOKEN, OIDCResponseType.TOKEN));\n         clientApp.setAuthPolicy(getAuthPolicy().getKey());\n         clientApp.setAttrReleasePolicy(getAttrReleasePolicy().getKey());\n "},{"sha":"192b6a4b8affbf507025147a0b0e3e15d19047ab","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/SAML2SP4UIITCase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -124,6 +124,7 @@ public static void idpSetup() {\n         cas.setName(\"CAS\");\n         cas.setCreateUnmatching(true);\n         cas.setSelfRegUnmatching(false);\n+\n         cas.getItems().clear();\n \n         Item item = new Item();"},{"sha":"28b9ac863254465fcd9478e48def58c79d72312f","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/OIDCRPClientAppTOMapper.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d482c225506ab3d348ec575c12038cfb2236df7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d482c225506ab3d348ec575c12038cfb2236df7/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java?ref=1d482c225506ab3d348ec575c12038cfb2236df7","patch":"@@ -82,8 +82,8 @@ public RegisteredService map(\n         service.setLogoutUrl(rp.getLogoutUri());\n \n         ChainingAttributeReleasePolicy chain;\n-        if (attributeReleasePolicy instanceof ChainingAttributeReleasePolicy) {\n-            chain = (ChainingAttributeReleasePolicy) attributeReleasePolicy;\n+        if (attributeReleasePolicy instanceof ChainingAttributeReleasePolicy chainingAttributeReleasePolicy) {\n+            chain = chainingAttributeReleasePolicy;\n         } else {\n             chain = new ChainingAttributeReleasePolicy();\n             if (attributeReleasePolicy != null) {"}]}