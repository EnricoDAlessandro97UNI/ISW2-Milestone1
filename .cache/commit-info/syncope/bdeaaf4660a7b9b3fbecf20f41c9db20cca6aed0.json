{"sha":"bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0","node_id":"C_kwDOJfYA1toAKGJkZWFhZjQ2NjBhN2I5YjNmYmVjZjIwZjQxYzlkYjIwY2NhNmFlZDA","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2022-01-17T08:31:32Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-01-17T08:31:32Z"},"message":"[SYNCOPE-1656] remediation now is generated also on pull update failure (#303)\n\n* [SYNCOPE-1656] remediation now is generated also on pull update failure, made some refactoring","tree":{"sha":"dbee357382cf7fcba2fc19ceb4be139581ed6cf2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/dbee357382cf7fcba2fc19ceb4be139581ed6cf2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh5SlkCRBK7hj4Ov3rIwAA/9QIACx3uOmGKWT4YPmQ7DupkBhZ\nNLInn+maIZ8zhIwVaqhJmbTwj8dAwVGeTxJ8eRf4ENnV6Bp2y/ItxICXafbUG3EK\n4ljzITt+sc7jD/G+Ri41FsXFmEZI4Sp4+cCh/w2AkTCZKv4TbeYAATzYMcB6FtKk\ngEW+Fb+NWUEZwfXfHKL3UBjI8vNGBNZzcPcVcn25w/HPY//etpxrlE/xnngeHvGC\nJkLKSy4Q4ufXjvyecd5ZhCaLe05sPVVpnAt+07+KrYBx+F8qsvJ8guXgEOGQqsmf\ndbkGuBF55Cs6uiQLL2QjRqKwSBH4FlwErHZSh8C8BUUQpU9QtXmjESV6RegJz9U=\n=Oq/b\n-----END PGP SIGNATURE-----\n","payload":"tree dbee357382cf7fcba2fc19ceb4be139581ed6cf2\nparent c83cc6833eb647672f5d55125c517d25f7a24cc7\nauthor Andrea Patricelli <andreapatricelli@apache.org> 1642408292 +0100\ncommitter GitHub <noreply@github.com> 1642408292 +0100\n\n[SYNCOPE-1656] remediation now is generated also on pull update failure (#303)\n\n* [SYNCOPE-1656] remediation now is generated also on pull update failure, made some refactoring"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"c83cc6833eb647672f5d55125c517d25f7a24cc7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c83cc6833eb647672f5d55125c517d25f7a24cc7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c83cc6833eb647672f5d55125c517d25f7a24cc7"}],"stats":{"total":311,"additions":234,"deletions":77},"files":[{"sha":"6c8de99c6440f040271bad4ece942462dd0acc70","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":70,"deletions":33,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0","patch":"@@ -23,6 +23,7 @@\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.request.AnyCR;\n@@ -35,10 +36,12 @@\n import org.apache.syncope.common.lib.types.MatchType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -90,6 +93,9 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan\n     @Autowired\n     protected UserDAO userDAO;\n \n+    @Autowired\n+    protected AnyTypeDAO anyTypeDAO;\n+\n     @Autowired\n     protected TaskDAO taskDAO;\n \n@@ -254,18 +260,12 @@ protected List<ProvisioningReport> provision(\n                 if (profile.getTask().isRemediation()) {\n                     // set to SUCCESS to let the incremental flow go on in case of errors\n                     resultStatus = Result.SUCCESS;\n-                    Remediation entity = entityFactory.newEntity(Remediation.class);\n-                    entity.setAnyType(provision.getAnyType());\n-                    entity.setOperation(ResourceOperation.CREATE);\n-                    entity.setPayload(anyCR);\n-                    entity.setError(result.getMessage());\n-                    entity.setInstant(new Date());\n-                    entity.setRemoteName(delta.getObject().getName().getNameValue());\n-                    if (taskDAO.find(profile.getTask().getKey()) != null) {\n-                        entity.setPullTask(profile.getTask());\n-                    }\n-\n-                    remediationDAO.save(entity);\n+                    createRemediation(\n+                            provision.getAnyType(),\n+                            anyCR,\n+                            taskDAO.find(profile.getTask().getKey()) != null ? profile.getTask() : null,\n+                            result,\n+                            delta);\n                 } else {\n                     resultStatus = Result.FAILURE;\n                 }\n@@ -382,17 +382,7 @@ protected List<ProvisioningReport> update(\n                         if (profile.getTask().isRemediation()) {\n                             // set to SUCCESS to let the incremental flow go on in case of errors\n                             resultStatus = Result.SUCCESS;\n-\n-                            Remediation entity = entityFactory.newEntity(Remediation.class);\n-                            entity.setAnyType(provision.getAnyType());\n-                            entity.setOperation(ResourceOperation.UPDATE);\n-                            entity.setPayload(anyUR);\n-                            entity.setError(result.getMessage());\n-                            entity.setInstant(new Date());\n-                            entity.setRemoteName(delta.getObject().getName().getNameValue());\n-                            entity.setPullTask(profile.getTask());\n-\n-                            remediationDAO.save(entity);\n+                            createRemediation(provision.getAnyType(), anyUR, profile.getTask(), result, delta);\n                         } else {\n                             resultStatus = Result.FAILURE;\n                         }\n@@ -689,16 +679,8 @@ protected List<ProvisioningReport> delete(\n                         if (profile.getTask().isRemediation()) {\n                             // set to SUCCESS to let the incremental flow go on in case of errors\n                             resultStatus = Result.SUCCESS;\n-                            Remediation entity = entityFactory.newEntity(Remediation.class);\n-                            entity.setAnyType(provision.getAnyType());\n-                            entity.setOperation(ResourceOperation.DELETE);\n-                            entity.setPayload(match.getAny().getKey());\n-                            entity.setError(result.getMessage());\n-                            entity.setInstant(new Date());\n-                            entity.setRemoteName(delta.getObject().getName().getNameValue());\n-                            entity.setPullTask(profile.getTask());\n-\n-                            remediationDAO.save(entity);\n+                            createRemediation(\n+                                    provision.getAnyType(), match.getAny().getKey(), profile.getTask(), result, delta);\n                         }\n                     }\n \n@@ -955,4 +937,59 @@ protected void end(\n                 delta,\n                 furtherInput);\n     }\n+\n+    protected Remediation createRemediation(\n+            final AnyType anyType,\n+            final String anyKey,\n+            final PullTask pullTask,\n+            final ProvisioningReport result,\n+            final SyncDelta delta) {\n+        return createRemediation(anyType, anyKey, null, null, pullTask, result, delta);\n+    }\n+\n+    protected Remediation createRemediation(\n+            final AnyType anyType,\n+            final AnyCR anyCR,\n+            final PullTask pullTask,\n+            final ProvisioningReport result,\n+            final SyncDelta delta) {\n+        return createRemediation(anyType, null, anyCR, null, pullTask, result, delta);\n+    }\n+\n+    protected Remediation createRemediation(\n+            final AnyType anyType,\n+            final AnyUR anyUR,\n+            final PullTask pullTask,\n+            final ProvisioningReport result,\n+            final SyncDelta delta) {\n+        return createRemediation(anyType, null, null, anyUR, pullTask, result, delta);\n+    }\n+\n+    protected Remediation createRemediation(\n+            final AnyType anyType,\n+            final String anyKey,\n+            final AnyCR anyCR,\n+            final AnyUR anyUR,\n+            final PullTask pullTask,\n+            final ProvisioningReport result,\n+            final SyncDelta delta) {\n+        Remediation entity = entityFactory.newEntity(Remediation.class);\n+\n+        entity.setAnyType(anyType);\n+        entity.setOperation(anyUR == null ? ResourceOperation.CREATE : ResourceOperation.UPDATE);\n+        if (StringUtils.isNotBlank(anyKey)) {\n+            entity.setPayload(anyKey);\n+        } else if (anyCR != null) {\n+            entity.setPayload(anyCR);\n+        } else if (anyUR != null) {\n+            entity.setPayload(anyUR);\n+        }\n+        entity.setError(result.getMessage());\n+        entity.setInstant(new Date());\n+        entity.setRemoteName(delta.getObject().getName().getNameValue());\n+        entity.setPullTask(pullTask);\n+\n+        return remediationDAO.save(entity);\n+    }\n+\n }"},{"sha":"238acdd9de68fb1eb8120b12e86faaeeaf8f2e3a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPullResultHandler.java","status":"modified","additions":14,"deletions":39,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java?ref=bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -48,7 +47,6 @@\n import org.apache.syncope.core.persistence.api.dao.PullMatch;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.Remediation;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -138,6 +136,11 @@ protected AnyUR doUpdate(\n                 profile.getExecutor(),\n                 getContext());\n \n+        if (ProvisioningReport.Status.FAILURE == result.getStatus() && profile.getTask().isRemediation()) {\n+            createRemediation(anyTypeDAO.find(result.getAnyType()), anyUR, profile.getTask(), result,\n+                    delta);\n+        }\n+\n         return updated.getLeft();\n     }\n \n@@ -409,16 +412,7 @@ protected Optional<ProvisioningReport> provision(\n                 resultStatus = Result.FAILURE;\n \n                 if (profile.getTask().isRemediation()) {\n-                    Remediation entity = entityFactory.newEntity(Remediation.class);\n-                    entity.setAnyType(provision.getAnyType());\n-                    entity.setOperation(ResourceOperation.UPDATE);\n-                    entity.setPayload(req);\n-                    entity.setError(report.getMessage());\n-                    entity.setInstant(new Date());\n-                    entity.setRemoteName(delta.getObject().getName().getNameValue());\n-                    entity.setPullTask(profile.getTask());\n-\n-                    remediationDAO.save(entity);\n+                    createRemediation(provision.getAnyType(), req, profile.getTask(), report, delta);\n                 }\n             }\n \n@@ -486,21 +480,21 @@ protected Optional<ProvisioningReport> update(\n             });\n             update.getPlainAttrs().removeIf(attr -> attrsToRemove.contains(attr.getSchema()));\n \n-            UserUR patch = new UserUR();\n-            patch.setKey(account.getOwner().getKey());\n-            patch.getLinkedAccounts().add(new LinkedAccountUR.Builder().\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(account.getOwner().getKey());\n+            userUR.getLinkedAccounts().add(new LinkedAccountUR.Builder().\n                     operation(PatchOperation.ADD_REPLACE).linkedAccountTO(update).build());\n \n             for (PullActions action : profile.getActions()) {\n-                action.beforeUpdate(profile, delta, before, patch);\n+                action.beforeUpdate(profile, delta, before, userUR);\n             }\n \n             Result resultStatus;\n             Object output;\n \n             try {\n                 userProvisioningManager.update(\n-                        patch,\n+                        userUR,\n                         report,\n                         null,\n                         Set.of(profile.getTask().getResource().getKey()),\n@@ -509,12 +503,11 @@ protected Optional<ProvisioningReport> update(\n                         getContext());\n                 resultStatus = Result.SUCCESS;\n \n-                LinkedAccountTO updated = userDAO.find(patch.getKey()).\n+                LinkedAccountTO updated = userDAO.find(userUR.getKey()).\n                         getLinkedAccount(account.getResource().getKey(), account.getConnObjectKeyValue()).\n                         map(acct -> userDataBinder.getLinkedAccountTO(acct)).\n                         orElse(null);\n                 output = updated;\n-                resultStatus = Result.SUCCESS;\n \n                 for (PullActions action : profile.getActions()) {\n                     action.after(profile, delta, updated, report);\n@@ -537,16 +530,7 @@ protected Optional<ProvisioningReport> update(\n                 resultStatus = Result.FAILURE;\n \n                 if (profile.getTask().isRemediation()) {\n-                    Remediation entity = entityFactory.newEntity(Remediation.class);\n-                    entity.setAnyType(provision.getAnyType());\n-                    entity.setOperation(ResourceOperation.UPDATE);\n-                    entity.setPayload(patch);\n-                    entity.setError(report.getMessage());\n-                    entity.setInstant(new Date());\n-                    entity.setRemoteName(delta.getObject().getName().getNameValue());\n-                    entity.setPullTask(profile.getTask());\n-\n-                    remediationDAO.save(entity);\n+                    createRemediation(provision.getAnyType(), userUR, profile.getTask(), report, delta);\n                 }\n             }\n \n@@ -620,16 +604,7 @@ protected Optional<ProvisioningReport> delete(\n                     output = e;\n \n                     if (profile.getTask().isRemediation()) {\n-                        Remediation entity = entityFactory.newEntity(Remediation.class);\n-                        entity.setAnyType(provision.getAnyType());\n-                        entity.setOperation(ResourceOperation.UPDATE);\n-                        entity.setPayload(req);\n-                        entity.setError(report.getMessage());\n-                        entity.setInstant(new Date());\n-                        entity.setRemoteName(delta.getObject().getName().getNameValue());\n-                        entity.setPullTask(profile.getTask());\n-\n-                        remediationDAO.save(entity);\n+                        createRemediation(provision.getAnyType(), req, profile.getTask(), report, delta);\n                     }\n                 }\n "},{"sha":"a8760c4a988816b690f375f35d822e24ca1d8c70","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0","patch":"@@ -34,12 +34,15 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.Set;\n import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n import javax.naming.Context;\n import javax.naming.NamingException;\n+import javax.naming.directory.Attribute;\n import javax.naming.directory.BasicAttribute;\n+import javax.naming.directory.BasicAttributes;\n import javax.naming.directory.DirContext;\n import javax.naming.directory.InitialDirContext;\n import javax.naming.directory.ModificationItem;\n@@ -734,6 +737,34 @@ protected Object getLdapRemoteObject(final String bindDn, final String bindPwd,\n         }\n     }\n \n+    protected void createLdapRemoteObject(\n+            final String bindDn,\n+            final String bindPwd,\n+            final Pair<String, Set<Attribute>> entryAttrs) throws NamingException {\n+\n+        InitialDirContext ctx = null;\n+        try {\n+            ctx = getLdapResourceDirContext(bindDn, bindPwd);\n+\n+            BasicAttributes entry = new BasicAttributes();\n+            entryAttrs.getRight().forEach(item -> entry.put(item));\n+\n+            ctx.createSubcontext(entryAttrs.getLeft(), entry);\n+\n+        } catch (NamingException e) {\n+            LOG.error(\"While creating {} with {}\", entryAttrs.getLeft(), entryAttrs.getRight(), e);\n+            throw e;\n+        } finally {\n+            if (ctx != null) {\n+                try {\n+                    ctx.close();\n+                } catch (NamingException e) {\n+                    // ignore\n+                }\n+            }\n+        }\n+    }\n+\n     protected void updateLdapRemoteObject(\n             final String bindDn,\n             final String bindPwd,\n@@ -923,4 +954,5 @@ protected List<AuditEntry> query(final AuditQuery query, final int maxWaitSecond\n         } while (results.isEmpty() && i < maxWaitSeconds);\n         return results;\n     }\n+\n }"},{"sha":"f67a0b746e64af7500f960e2ace19b3a63896863","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":118,"deletions":5,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=bdeaaf4660a7b9b3fbecf20f41c9db20cca6aed0","patch":"@@ -42,12 +42,19 @@\n import java.util.Optional;\n import java.util.Properties;\n import java.util.Set;\n+import java.util.HashSet;\n import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n+import javax.naming.NamingException;\n+import javax.naming.directory.Attribute;\n+import javax.naming.directory.BasicAttribute;\n+import javax.sql.DataSource;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -380,7 +387,7 @@ public void reconcileFromLDAP() {\n \n         // 2. verify that pulled group is found\n         PagedResult<GroupTO> matchingGroups = groupService.search(new AnyQuery.Builder().realm(\n-                SyncopeConstants.ROOT_REALM).\n+                        SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query()).\n                 build());\n         assertNotNull(matchingGroups);\n@@ -780,7 +787,7 @@ public void remediation() {\n \n             // 3b. remediation was created\n             Optional<RemediationTO> remediation = remediationService.list(\n-                    new RemediationQuery.Builder().page(1).size(1000).build()).getResult().stream().\n+                            new RemediationQuery.Builder().page(1).size(1000).build()).getResult().stream().\n                     filter(r -> \"uid=pullFromLDAP,ou=People,o=isp\".equalsIgnoreCase(r.getRemoteName())).\n                     findFirst();\n             assertTrue(remediation.isPresent());\n@@ -854,7 +861,7 @@ public void remediationSinglePull() throws IOException {\n                 assertEquals(ClientExceptionType.Reconciliation, sce.getType());\n             }\n             Optional<RemediationTO> remediation = remediationService.list(\n-                    new RemediationQuery.Builder().page(1).size(1000).build()).getResult().stream().\n+                            new RemediationQuery.Builder().page(1).size(1000).build()).getResult().stream().\n                     filter(r -> \"uid=pullFromLDAP,ou=People,o=isp\".equalsIgnoreCase(r.getRemoteName())).\n                     findFirst();\n             assertTrue(remediation.isPresent());\n@@ -867,8 +874,7 @@ public void remediationSinglePull() throws IOException {\n                     \"SyncopeClientCompositeException: {[RequiredValuesMissing [userId]]}\"));\n         } finally {\n             resourceService.delete(ldap.getKey());\n-            remediationService.list(new RemediationQuery.Builder().page(1).size(10).build()).getResult().forEach(\n-                    r -> remediationService.delete(r.getKey()));\n+            cleanUpRemediations();\n         }\n     }\n \n@@ -1390,4 +1396,111 @@ public void issueSYNCOPE1062() {\n             }\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1656() throws NamingException {\n+        // preliminary create a new LDAP object\n+        createLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, prepareLdapAttributes(\n+                \"pullFromLDAP_issue1656\",\n+                \"pullFromLDAP_issue1656@syncope.apache.org\",\n+                \"Active\",\n+                \"pullFromLDAP_issue1656\",\n+                \"Surname\",\n+                \"5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8\",\n+                \"odd\",\n+                \"password\"));\n+        try {\n+            // 1. Pull from resource-ldap\n+            PullTaskTO pullTask = new PullTaskTO();\n+            pullTask.setDestinationRealm(SyncopeConstants.ROOT_REALM);\n+            pullTask.setName(\"SYNCOPE1656\");\n+            pullTask.setActive(true);\n+            pullTask.setPerformCreate(true);\n+            pullTask.setPerformUpdate(true);\n+            pullTask.setRemediation(true);\n+            pullTask.setPullMode(PullMode.FULL_RECONCILIATION);\n+            pullTask.setResource(RESOURCE_NAME_LDAP);\n+\n+            Response taskResponse = taskService.create(TaskType.PULL, pullTask);\n+            pullTask = getObject(taskResponse.getLocation(), TaskService.class, PullTaskTO.class);\n+            assertNotNull(pullTask);\n+\n+            ExecTO execution = execProvisioningTask(\n+                    taskService, TaskType.PULL, pullTask.getKey(), MAX_WAIT_SECONDS, false);\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n+\n+            UserTO pullFromLDAP_issue1656 = userService.read(\"pullFromLDAP_issue1656\");\n+            assertEquals(\"pullFromLDAP_issue1656@syncope.apache.org\",\n+                    pullFromLDAP_issue1656.getPlainAttr(\"email\").get().getValues().get(0));\n+            // 2. Edit mail attribute directly on the resource in order to have a not valid email\n+            ConnObjectTO connObject =\n+                    resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(),\n+                            pullFromLDAP_issue1656.getKey());\n+            assertNotNull(connObject);\n+            assertEquals(\"pullFromLDAP_issue1656@syncope.apache.org\",\n+                    connObject.getAttr(\"mail\").get().getValues().get(0));\n+            Attr userDn = connObject.getAttr(Name.NAME).get();\n+            assertNotNull(userDn);\n+            assertEquals(1, userDn.getValues().size());\n+            updateLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD,\n+                    userDn.getValues().get(0), Collections.singletonMap(\"mail\", \"pullFromLDAP_issue1656@\"));\n+            // 3. Pull again from resource-ldap\n+            execution = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), MAX_WAIT_SECONDS, false);\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n+            assertTrue(execution.getMessage().contains(\"UPDATE FAILURE\"));\n+            pullFromLDAP_issue1656 = userService.read(\"pullFromLDAP_issue1656\");\n+            assertEquals(\"pullFromLDAP_issue1656@syncope.apache.org\",\n+                    pullFromLDAP_issue1656.getPlainAttr(\"email\").get().getValues().get(0));\n+            final String pullFromLDAP_issue1656_key = pullFromLDAP_issue1656.getKey();\n+            // a remediation for pullFromLDAP_issue1656 email should have been created\n+            PagedResult<RemediationTO> remediations =\n+                    remediationService.list(new RemediationQuery.Builder().page(1).size(10).build());\n+            assertTrue(remediations.getResult().stream().filter(r -> r.getAnyURPayload() != null).anyMatch(\n+                    r -> pullFromLDAP_issue1656_key.equals(r.getAnyURPayload().getKey())));\n+            assertTrue(remediations.getResult().stream().anyMatch(r -> StringUtils.contains(r.getError(),\n+                    \"\\\"pullFromLDAP_issue1656@\\\" is not a valid email address\")));\n+        } finally {\n+            // remove test entity\n+            removeLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD,\n+                    \"uid=pullFromLDAP_issue1656,ou=People,o=isp\");\n+            cleanUpRemediations();\n+        }\n+    }\n+\n+    private void cleanUpRemediations() {\n+        remediationService.list(new RemediationQuery.Builder().page(1).size(100).build()).getResult().forEach(\n+                r -> remediationService.delete(r.getKey()));\n+    }\n+\n+    private Pair<String, Set<Attribute>> prepareLdapAttributes(\n+            final String uid,\n+            final String email,\n+            final String description,\n+            final String givenName,\n+            final String sn,\n+            final String registeredAddress,\n+            final String title,\n+            final String password) {\n+        String entryDn = \"uid=\" + uid + \",ou=People,o=isp\";\n+        Set<Attribute> attributes = new HashSet<>();\n+\n+        attributes.add(new BasicAttribute(\"description\", description));\n+        attributes.add(new BasicAttribute(\"givenName\", givenName));\n+        attributes.add(new BasicAttribute(\"mail\", email));\n+        attributes.add(new BasicAttribute(\"sn\", sn));\n+        attributes.add(new BasicAttribute(\"cn\", uid));\n+        attributes.add(new BasicAttribute(\"uid\", uid));\n+        attributes.add(new BasicAttribute(\"registeredaddress\", registeredAddress));\n+        attributes.add(new BasicAttribute(\"title\", title));\n+        attributes.add(new BasicAttribute(\"userpassword\", password));\n+\n+        Attribute oc = new BasicAttribute(\"objectClass\");\n+        oc.add(\"top\");\n+        oc.add(\"person\");\n+        oc.add(\"inetOrgPerson\");\n+        oc.add(\"organizationalPerson\");\n+        attributes.add(oc);\n+\n+        return Pair.of(entryDn, attributes);\n+    }\n }"}]}