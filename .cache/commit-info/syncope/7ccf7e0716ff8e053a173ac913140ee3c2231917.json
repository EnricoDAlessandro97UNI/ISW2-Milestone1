{"sha":"7ccf7e0716ff8e053a173ac913140ee3c2231917","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdjY2Y3ZTA3MTZmZjhlMDUzYTE3M2FjOTEzMTQwZWUzYzIyMzE5MTc=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-05-29T11:39:29Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-05-29T11:39:29Z"},"message":"SYNCOPE-76 #comment provided order and confidential properties management\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1343681 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4623fbbe1e8babb624ac926dddcc5fa9d49eae9e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4623fbbe1e8babb624ac926dddcc5fa9d49eae9e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7ccf7e0716ff8e053a173ac913140ee3c2231917","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7ccf7e0716ff8e053a173ac913140ee3c2231917","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7ccf7e0716ff8e053a173ac913140ee3c2231917","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7ccf7e0716ff8e053a173ac913140ee3c2231917/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"22680b992f1b181d59567458d60c7c1398dccfff","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/22680b992f1b181d59567458d60c7c1398dccfff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/22680b992f1b181d59567458d60c7c1398dccfff"}],"stats":{"total":164,"additions":92,"deletions":72},"files":[{"sha":"e43ac67fa1414faf9adf28921c57db34e1b49d7f","filename":"client/src/main/java/org/apache/syncope/types/ConnConfPropSchema.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ccf7e0716ff8e053a173ac913140ee3c2231917/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FConnConfPropSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ccf7e0716ff8e053a173ac913140ee3c2231917/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FConnConfPropSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FConnConfPropSchema.java?ref=7ccf7e0716ff8e053a173ac913140ee3c2231917","patch":"@@ -36,6 +36,8 @@ public class ConnConfPropSchema extends AbstractBaseBean implements Comparable<C\n \n     private int order;\n \n+    private boolean confidential;\n+\n     public String getName() {\n         return name;\n     }\n@@ -84,6 +86,14 @@ public void setOrder(int order) {\n         this.order = order;\n     }\n \n+    public boolean isConfidential() {\n+        return confidential;\n+    }\n+\n+    public void setConfidential(boolean confidential) {\n+        this.confidential = confidential;\n+    }\n+\n     @Override\n     public int compareTo(final ConnConfPropSchema connConfPropSchema) {\n         if (this.getOrder() > connConfPropSchema.getOrder()) {"},{"sha":"fd9787eb2f7ce69854d19193f709532ce759c00d","filename":"console/src/main/java/org/apache/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":25,"deletions":18,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ccf7e0716ff8e053a173ac913140ee3c2231917/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ccf7e0716ff8e053a173ac913140ee3c2231917/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=7ccf7e0716ff8e053a173ac913140ee3c2231917","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.EnumSet;\n import java.util.HashSet;\n import java.util.List;\n@@ -78,8 +79,8 @@ public class ConnectorModalPage extends BaseModalPage {\n     // GuardedByteArray is not in classpath\n     private static final String GUARDED_BYTE_ARRAY = \"org.identityconnectors.common.security.GuardedByteArray\";\n \n-    private static final List<Class> NUMBER = Arrays.asList(new Class[] { Integer.class, Double.class, Long.class,\n-            Float.class, Number.class, Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE });\n+    private static final List<Class> NUMBER = Arrays.asList(new Class[]{Integer.class, Double.class, Long.class,\n+                Float.class, Number.class, Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE});\n \n     @SpringBean\n     private ConnectorRestClient restClient;\n@@ -126,23 +127,23 @@ protected List<ConnBundleTO> load() {\n         bundleTO = getSelectedBundleTO(bundles.getObject(), connectorTO);\n         properties = fillProperties(bundleTO, connectorTO);\n \n-        final AjaxTextFieldPanel connectorName = new AjaxTextFieldPanel(\"connectorName\", \"connector name\",\n-                new PropertyModel<String>(connectorTO, \"connectorName\"));\n+        final AjaxTextFieldPanel connectorName = new AjaxTextFieldPanel(\n+                \"connectorName\", \"connector name\", new PropertyModel<String>(connectorTO, \"connectorName\"));\n         connectorName.setOutputMarkupId(true);\n         connectorName.setEnabled(false);\n \n-        final AjaxTextFieldPanel displayName = new AjaxTextFieldPanel(\"displayName\", \"display name\",\n-                new PropertyModel<String>(connectorTO, \"displayName\"));\n+        final AjaxTextFieldPanel displayName = new AjaxTextFieldPanel(\n+                \"displayName\", \"display name\", new PropertyModel<String>(connectorTO, \"displayName\"));\n         displayName.setOutputMarkupId(true);\n         displayName.addRequiredLabel();\n \n-        final AjaxTextFieldPanel version = new AjaxTextFieldPanel(\"version\", \"version\", new PropertyModel<String>(\n-                connectorTO, \"version\"));\n+        final AjaxTextFieldPanel version = new AjaxTextFieldPanel(\n+                \"version\", \"version\", new PropertyModel<String>(connectorTO, \"version\"));\n         displayName.setOutputMarkupId(true);\n         version.setEnabled(false);\n \n-        final AjaxDropDownChoicePanel<ConnBundleTO> bundle = new AjaxDropDownChoicePanel<ConnBundleTO>(\"bundle\",\n-                \"bundle\", new Model<ConnBundleTO>(bundleTO));\n+        final AjaxDropDownChoicePanel<ConnBundleTO> bundle =\n+                new AjaxDropDownChoicePanel<ConnBundleTO>(\"bundle\", \"bundle\", new Model<ConnBundleTO>(bundleTO));\n         bundle.setStyleShet(\"long_dynamicsize\");\n         bundle.setChoices(bundles.getObject());\n         bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>() {\n@@ -161,6 +162,7 @@ public String getIdValue(final ConnBundleTO object, final int index) {\n                 return object.getBundleName() + \"#\" + object.getVersion();\n             }\n         });\n+\n         ((DropDownChoice) bundle.getField()).setNullValid(true);\n         bundle.setRequired(true);\n         bundle.getField().add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n@@ -208,8 +210,8 @@ public void detach() {\n         bundle.addRequiredLabel();\n         bundle.setEnabled(connectorTO.getId() == 0);\n \n-        final ListView<ConnConfProperty> view = new ListView<ConnConfProperty>(\"connectorProperties\",\n-                new PropertyModel(this, \"properties\")) {\n+        final ListView<ConnConfProperty> view = new ListView<ConnConfProperty>(\n+                \"connectorProperties\", new PropertyModel(this, \"properties\")) {\n \n             private static final long serialVersionUID = 9101744072914090143L;\n \n@@ -230,7 +232,8 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n \n                 boolean isArray = false;\n \n-                if (GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())\n+                if (property.getSchema().isConfidential()\n+                        || GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())\n                         || GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {\n \n                     field = new AjaxPasswordFieldPanel(\"panel\", label.getDefaultModelObjectAsString(), new Model());\n@@ -243,8 +246,8 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n                     Class propertySchemaClass;\n \n                     try {\n-                        propertySchemaClass = ClassUtils.forName(property.getSchema().getType(), ClassUtils\n-                                .getDefaultClassLoader());\n+                        propertySchemaClass =\n+                                ClassUtils.forName(property.getSchema().getType(), ClassUtils.getDefaultClassLoader());\n                     } catch (Exception e) {\n                         LOG.error(\"Error parsing attribute type\", e);\n                         propertySchemaClass = String.class;\n@@ -277,8 +280,8 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n                         property.getValues().add(null);\n                     }\n \n-                    item.add(new MultiValueSelectorPanel<String>(\"panel\", new PropertyModel<List<String>>(property,\n-                            \"values\"), field));\n+                    item.add(new MultiValueSelectorPanel<String>(\n+                            \"panel\", new PropertyModel<List<String>>(property, \"values\"), field));\n                 } else {\n                     if (required) {\n                         field.addRequiredLabel();\n@@ -292,7 +295,7 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n                         \"connPropAttrOverridable\", new PropertyModel(property, \"overridable\"));\n \n                 item.add(overridable);\n-                connectorTO.getConfiguration().add(property);\n+                connectorTO.addConfiguration(property);\n             }\n         };\n \n@@ -346,6 +349,7 @@ protected void onSubmit(final AjaxRequestTarget target, final Form form) {\n                         ? EnumSet.noneOf(ConnectorCapability.class)\n                         : EnumSet.copyOf(selectedCapabilities));\n                 try {\n+\n                     if (connectorTO.getId() == 0) {\n                         restClient.create(conn);\n                     } else {\n@@ -425,6 +429,9 @@ private List<ConnConfProperty> fillProperties(final ConnBundleTO bundleTO, final\n         } else {\n             props.addAll(connTO.getConfiguration());\n         }\n+\n+        // re-order properties\n+        Collections.sort(props);\n         // -------------------------------------\n \n         return props;"},{"sha":"5a56171967bca0a96c16ab2b47df1478832efcfa","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceConnConfPanel.java","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ccf7e0716ff8e053a173ac913140ee3c2231917/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ccf7e0716ff8e053a173ac913140ee3c2231917/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java?ref=7ccf7e0716ff8e053a173ac913140ee3c2231917","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n@@ -78,8 +79,8 @@ public class ResourceConnConfPanel extends Panel {\n     /**\n      * Number java types.\n      */\n-    private static final List<Class> NUMBER = Arrays.asList(new Class[] { Integer.class, Double.class, Long.class,\n-            Float.class, Number.class, Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE });\n+    private static final List<Class> NUMBER = Arrays.asList(new Class[]{Integer.class, Double.class, Long.class,\n+                Float.class, Number.class, Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE});\n \n     @SpringBean\n     private ConnectorRestClient connRestClient;\n@@ -117,9 +118,9 @@ public void onClick(final AjaxRequestTarget target) {\n \n                 ConnInstanceTO connectorTO = connRestClient.read(resourceTO.getConnectorId());\n \n-                connectorTO.setConfiguration(ConnConfPropUtils.joinConnInstanceProperties(connectorTO\n-                        .getConfigurationMap(), ConnConfPropUtils.getConnConfPropertyMap(resourceTO\n-                        .getConnConfProperties())));\n+                connectorTO.setConfiguration(ConnConfPropUtils.joinConnInstanceProperties(connectorTO.\n+                        getConfigurationMap(),\n+                        ConnConfPropUtils.getConnConfPropertyMap(resourceTO.getConnConfProperties())));\n \n                 if (connRestClient.check(connectorTO).booleanValue()) {\n                     info(getString(\"success_connection\"));\n@@ -171,8 +172,8 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n                     Class propertySchemaClass;\n \n                     try {\n-                        propertySchemaClass = ClassUtils.forName(property.getSchema().getType(), ClassUtils\n-                                .getDefaultClassLoader());\n+                        propertySchemaClass = ClassUtils.forName(property.getSchema().getType(), ClassUtils.\n+                                getDefaultClassLoader());\n                     } catch (Exception e) {\n                         LOG.error(\"Error parsing attribute type\", e);\n                         propertySchemaClass = String.class;\n@@ -259,6 +260,9 @@ private List<ConnConfProperty> getConnConfProperties() {\n             }\n         }\n \n+        // re-order properties\n+        Collections.sort(props);\n+\n         return props;\n     }\n "},{"sha":"122b7258cbd51774bef7c818c6582cc31afbbcb0","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceMappingPanel.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ccf7e0716ff8e053a173ac913140ee3c2231917/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ccf7e0716ff8e053a173ac913140ee3c2231917/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java?ref=7ccf7e0716ff8e053a173ac913140ee3c2231917","patch":"@@ -387,14 +387,7 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n      */\n     private void initResourceSchemaNames() {\n         if (resourceTO != null && resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0) {\n-\n-            final ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n-            connInstanceTO.setId(resourceTO.getConnectorId());\n-\n-            connInstanceTO.setConfiguration(resourceTO.getConnConfProperties());\n-\n             schemaNames = getResourceSchemaNames(resourceTO.getConnectorId(), resourceTO.getConnConfProperties());\n-\n         } else {\n             schemaNames = Collections.EMPTY_LIST;\n         }"},{"sha":"37690eebc83b263051d3472fd83fdf2fcdd64f1a","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ccf7e0716ff8e053a173ac913140ee3c2231917/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ccf7e0716ff8e053a173ac913140ee3c2231917/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=7ccf7e0716ff8e053a173ac913140ee3c2231917","patch":"@@ -83,8 +83,8 @@ public void update(final ConnInstanceTO connectorTO) {\n     }\n \n     public ConnInstanceTO delete(Long id) {\n-        return restTemplate.getForObject(baseURL + \"connector/delete/{connectorId}.json\", \n-                                         ConnInstanceTO.class, id.toString());\n+        return restTemplate.getForObject(baseURL + \"connector/delete/{connectorId}.json\",\n+                ConnInstanceTO.class, id.toString());\n     }\n \n     public List<ConnBundleTO> getAllBundles() {\n@@ -112,6 +112,7 @@ public List<ConnConfProperty> getConnectorProperties(final Long connectorId) {\n         try {\n             properties = Arrays.asList(restTemplate.getForObject(baseURL\n                     + \"connector/{connectorId}/configurationProperty/list\", ConnConfProperty[].class, connectorId));\n+\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting connector configuration properties\", e);\n         }\n@@ -155,7 +156,6 @@ public Boolean check(final ConnInstanceTO connectorTO) {\n \n         try {\n             return restTemplate.postForObject(baseURL + \"connector/check.json\", connector, Boolean.class);\n-\n         } catch (Exception e) {\n             LOG.error(\"Connector not found {}\", connector, e);\n             return false;"},{"sha":"798d156b433c3406bdf8f68c5de7673e6f014deb","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":24,"deletions":17,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ccf7e0716ff8e053a173ac913140ee3c2231917/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ccf7e0716ff8e053a173ac913140ee3c2231917/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=7ccf7e0716ff8e053a173ac913140ee3c2231917","patch":"@@ -29,7 +29,6 @@\n import org.apache.commons.lang.StringUtils;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n-import org.identityconnectors.framework.api.ConfigurationProperty;\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorInfoManager;\n import org.identityconnectors.framework.api.ConnectorKey;\n@@ -64,6 +63,7 @@\n import org.apache.syncope.types.ConnConfPropSchema;\n import org.apache.syncope.types.ConnConfProperty;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n+import org.identityconnectors.framework.impl.api.ConfigurationPropertyImpl;\n \n @Controller\n @RequestMapping(\"/connector\")\n@@ -150,7 +150,8 @@ public ConnInstanceTO update(@RequestBody final ConnInstanceTO connectorTO)\n \n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{connectorId}\")\n-    public ConnInstanceTO delete(@PathVariable(\"connectorId\") Long connectorId) throws NotFoundException {\n+    public ConnInstanceTO delete(@PathVariable(\"connectorId\") Long connectorId)\n+            throws NotFoundException {\n \n         ConnInstance connInstance = connInstanceDAO.find(connectorId);\n         if (connInstance == null) {\n@@ -169,13 +170,13 @@ public ConnInstanceTO delete(@PathVariable(\"connectorId\") Long connectorId) thro\n             scce.addException(invalidConnInstance);\n             throw scce;\n         }\n-        \n+\n         ConnInstanceTO connToDelete = binder.getConnInstanceTO(connInstance);\n \n         connInstanceDAO.delete(connectorId);\n         auditManager.audit(Category.connector, ConnectorSubCategory.delete, Result.success,\n                 \"Successfully deleted connector instance: \" + connectorId);\n-        \n+\n         return connToDelete;\n     }\n \n@@ -210,7 +211,8 @@ public List<ConnInstanceTO> list(@RequestParam(value = \"lang\", required = false)\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{connectorId}\")\n     @Transactional(readOnly = true)\n-    public ConnInstanceTO read(@PathVariable(\"connectorId\") Long connectorId) throws NotFoundException {\n+    public ConnInstanceTO read(@PathVariable(\"connectorId\") Long connectorId)\n+            throws NotFoundException {\n \n         ConnInstance connInstance = connInstanceDAO.find(connectorId);\n         if (connInstance == null) {\n@@ -255,22 +257,20 @@ public List<ConnBundleTO> getBundles(@RequestParam(value = \"lang\", required = fa\n \n                 ConnectorKey key = bundle.getConnectorKey();\n \n-                LOG.debug(\"\\nBundle name: {}\" + \"\\nBundle version: {}\" + \"\\nBundle class: {}\", new Object[] {\n-                        key.getBundleName(), key.getBundleVersion(), key.getConnectorName() });\n+                LOG.debug(\"\\nBundle name: {}\" + \"\\nBundle version: {}\" + \"\\nBundle class: {}\", new Object[]{\n+                            key.getBundleName(), key.getBundleVersion(), key.getConnectorName()});\n \n                 connectorBundleTO.setBundleName(key.getBundleName());\n                 connectorBundleTO.setConnectorName(key.getConnectorName());\n                 connectorBundleTO.setVersion(key.getBundleVersion());\n \n                 ConfigurationProperties properties = bundleManager.getConfigurationProperties(bundle);\n \n-                ConnConfPropSchema connConfPropSchema;\n-                ConfigurationProperty configurationProperty;\n-\n                 for (String propName : properties.getPropertyNames()) {\n-                    connConfPropSchema = new ConnConfPropSchema();\n+                    ConnConfPropSchema connConfPropSchema = new ConnConfPropSchema();\n \n-                    configurationProperty = properties.getProperty(propName);\n+                    ConfigurationPropertyImpl configurationProperty =\n+                            (ConfigurationPropertyImpl) properties.getProperty(propName);\n \n                     // set name\n                     connConfPropSchema.setName(configurationProperty.getName());\n@@ -287,6 +287,12 @@ public List<ConnBundleTO> getBundles(@RequestParam(value = \"lang\", required = fa\n                     // set type\n                     connConfPropSchema.setType(configurationProperty.getType().getName());\n \n+                    // set order\n+                    connConfPropSchema.setOrder(configurationProperty.getOrder());\n+\n+                    // set confidential\n+                    connConfPropSchema.setConfidential(configurationProperty.isConfidential());\n+\n                     connectorBundleTO.addProperty(connConfPropSchema);\n                 }\n \n@@ -316,8 +322,8 @@ public List<String> getSchemaNames(final HttpServletResponse response,\n         }\n \n         // consider the possibility to receive overridden properties only\n-        final Set<ConnConfProperty> conf = mergeConnConfProperties(connectorTO.getConfiguration(), connInstance\n-                .getConfiguration());\n+        final Set<ConnConfProperty> conf = mergeConnConfProperties(connectorTO.getConfiguration(), connInstance.\n+                getConfiguration());\n \n         // We cannot use Spring bean because this method could be used during\n         // resource definition or modification: bean couldn't exist or bean\n@@ -332,7 +338,7 @@ public List<String> getSchemaNames(final HttpServletResponse response,\n \n         auditManager.audit(Category.connector, ConnectorSubCategory.getSchemaNames, Result.success,\n                 \"Successfully listed all schema names (\" + result.size() + \") for connector \"\n-                        + connInstance.getDisplayName());\n+                + connInstance.getDisplayName());\n \n         return result;\n     }\n@@ -352,7 +358,7 @@ public List<ConnConfProperty> getConfigurationProperties(@PathVariable(\"connecto\n \n         auditManager.audit(Category.connector, ConnectorSubCategory.getConfigurationProperties, Result.success,\n                 \"Successfully listed all conf properties (\" + result.size() + \") for connector \"\n-                        + connInstance.getDisplayName());\n+                + connInstance.getDisplayName());\n \n         return result;\n     }\n@@ -421,7 +427,8 @@ private Set<ConnConfProperty> mergeConnConfProperties(final Set<ConnConfProperty\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/{resourceName}/connectorBean\")\n     @Transactional(readOnly = true)\n-    public ConnInstanceTO readConnectorBean(@PathVariable(\"resourceName\") String resourceName) throws NotFoundException {\n+    public ConnInstanceTO readConnectorBean(@PathVariable(\"resourceName\") String resourceName)\n+            throws NotFoundException {\n \n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {"},{"sha":"209fd4cbdaedfba36c1179d183704803f7759afe","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ConnInstanceDataBinder.java","status":"modified","additions":19,"deletions":20,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ccf7e0716ff8e053a173ac913140ee3c2231917/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ccf7e0716ff8e053a173ac913140ee3c2231917/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java?ref=7ccf7e0716ff8e053a173ac913140ee3c2231917","patch":"@@ -21,7 +21,6 @@\n import java.util.Map;\n import javassist.NotFoundException;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n-import org.identityconnectors.framework.api.ConfigurationProperty;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n@@ -35,19 +34,20 @@\n import org.apache.syncope.types.ConnConfPropSchema;\n import org.apache.syncope.types.ConnConfProperty;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n+import org.identityconnectors.framework.impl.api.ConfigurationPropertyImpl;\n \n @Component\n public class ConnInstanceDataBinder {\n \n-    private static final String[] IGNORE_PROPERTIES = { \"id\", \"resources\" };\n+    private static final String[] IGNORE_PROPERTIES = {\"id\", \"resources\"};\n \n     @Autowired\n     private ConnInstanceDAO connectorInstanceDAO;\n \n     @Autowired\n     private ConnBundleManager connBundleManager;\n \n-    public ConnInstance getConnInstance(final ConnInstanceTO connectorInstanceTO)\n+    public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException compositeErrorException = new SyncopeClientCompositeErrorException(\n@@ -56,25 +56,25 @@ public ConnInstance getConnInstance(final ConnInstanceTO connectorInstanceTO)\n         SyncopeClientException requiredValuesMissing = new SyncopeClientException(\n                 SyncopeClientExceptionType.RequiredValuesMissing);\n \n-        if (connectorInstanceTO.getBundleName() == null) {\n+        if (connInstanceTO.getBundleName() == null) {\n             requiredValuesMissing.addElement(\"bundlename\");\n         }\n \n-        if (connectorInstanceTO.getVersion() == null) {\n+        if (connInstanceTO.getVersion() == null) {\n             requiredValuesMissing.addElement(\"bundleversion\");\n         }\n \n-        if (connectorInstanceTO.getConnectorName() == null) {\n+        if (connInstanceTO.getConnectorName() == null) {\n             requiredValuesMissing.addElement(\"connectorname\");\n         }\n \n-        if (connectorInstanceTO.getConfiguration() == null || connectorInstanceTO.getConfiguration().isEmpty()) {\n+        if (connInstanceTO.getConfiguration() == null || connInstanceTO.getConfiguration().isEmpty()) {\n             requiredValuesMissing.addElement(\"configuration\");\n         }\n \n         ConnInstance connectorInstance = new ConnInstance();\n \n-        BeanUtils.copyProperties(connectorInstanceTO, connectorInstance, IGNORE_PROPERTIES);\n+        BeanUtils.copyProperties(connInstanceTO, connectorInstance, IGNORE_PROPERTIES);\n \n         // Throw composite exception if there is at least one element set\n         // in the composing exceptions\n@@ -118,7 +118,6 @@ public ConnInstance updateConnInstance(final long connInstanceId, final ConnInst\n         }\n \n         if (connInstanceTO.getConfiguration() != null && !connInstanceTO.getConfiguration().isEmpty()) {\n-\n             connInstance.setConfiguration(connInstanceTO.getConfiguration());\n         }\n \n@@ -141,33 +140,33 @@ public ConnInstance updateConnInstance(final long connInstanceId, final ConnInst\n         return connInstance;\n     }\n \n-    public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) throws NotFoundException {\n+    public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance)\n+            throws NotFoundException {\n \n         ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n-        connInstanceTO.setId(connInstance.getId() != null\n-                ? connInstance.getId().longValue()\n-                : 0L);\n+        connInstanceTO.setId(connInstance.getId() != null ? connInstance.getId().longValue() : 0L);\n \n         // retrieve the ConfigurationProperties.\n-        ConfigurationProperties properties = connBundleManager.getConfigurationProperties(connInstance.getBundleName(),\n-                connInstance.getVersion(), connInstance.getConnectorName());\n+        ConfigurationProperties properties = connBundleManager.getConfigurationProperties(\n+                connInstance.getBundleName(), connInstance.getVersion(), connInstance.getConnectorName());\n \n         BeanUtils.copyProperties(connInstance, connInstanceTO, IGNORE_PROPERTIES);\n \n-        ConnConfPropSchema connConfPropSchema;\n-        ConfigurationProperty configurationProperty;\n+        final Map<String, ConnConfProperty> connInstanceToConfMap = connInstanceTO.getConfigurationMap();\n \n-        Map<String, ConnConfProperty> connInstanceToConfMap = connInstanceTO.getConfigurationMap();\n         for (String propName : properties.getPropertyNames()) {\n-            configurationProperty = properties.getProperty(propName);\n+            ConfigurationPropertyImpl configurationProperty =\n+                    (ConfigurationPropertyImpl) properties.getProperty(propName);\n \n             if (!connInstanceToConfMap.containsKey(propName)) {\n-                connConfPropSchema = new ConnConfPropSchema();\n+                ConnConfPropSchema connConfPropSchema = new ConnConfPropSchema();\n                 connConfPropSchema.setName(configurationProperty.getName());\n                 connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));\n                 connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));\n                 connConfPropSchema.setRequired(configurationProperty.isRequired());\n                 connConfPropSchema.setType(configurationProperty.getType().getName());\n+                connConfPropSchema.setConfidential(configurationProperty.isConfidential());\n+                connConfPropSchema.setOrder(configurationProperty.getOrder());\n \n                 ConnConfProperty property = new ConnConfProperty();\n                 property.setSchema(connConfPropSchema);"}]}