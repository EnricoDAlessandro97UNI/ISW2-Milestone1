{"sha":"176506ffdb82806d01a1a5b1793faaa1e9b1f454","node_id":"C_kwDOJfYA1toAKDE3NjUwNmZmZGI4MjgwNmQwMWExYTViMTc5M2ZhYWExZTliMWY0NTQ","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-06-08T16:06:54Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-06-08T16:06:54Z"},"message":"[SYNCOPE-1681] Handle LDAP backend conf for Google Authenticator MFA in subclass (#350)","tree":{"sha":"8b9dea2b779b014b34672817050093d6dc8ac91e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8b9dea2b779b014b34672817050093d6dc8ac91e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/176506ffdb82806d01a1a5b1793faaa1e9b1f454","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJioMkeCRBK7hj4Ov3rIwAA2tsIAGX51GbVy/RVUSeNbAEsdbt/\nCOd2Af8zjrO0OWnCeVjsjmysVziyUDK23VtYMdve2xUdk04ulNYpnGLzWyXNR4tg\nHhdUhiejwOINprdoZP5BsEL0LHYqaaA1bFmvBos64HL1t+oLiJ8UqHvg/Zr4V9WW\n5Nwwbzy538muWyxJ55qtjIBUjQQt4b14Xs9EofdYinAm8F4eaGcpBXbaa2cHZdSa\ncmbBrCgS7MO4k5ZfF5bEGkpz+LmhkUxt601ZXBeAm5bq8ElP2QW/cqbn+6xyrqhC\n8VussVmpdDLrGBsmmwlalzP3JfYDf4eXtTIjfIKU+y+/OGA2GVKcBktbi3wauaU=\n=jt2C\n-----END PGP SIGNATURE-----\n","payload":"tree 8b9dea2b779b014b34672817050093d6dc8ac91e\nparent fd2646ff0c67fd4c2f06db9c171c275dcc19cdd4\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1654704414 +0200\ncommitter GitHub <noreply@github.com> 1654704414 +0200\n\n[SYNCOPE-1681] Handle LDAP backend conf for Google Authenticator MFA in subclass (#350)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/176506ffdb82806d01a1a5b1793faaa1e9b1f454","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/176506ffdb82806d01a1a5b1793faaa1e9b1f454","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/176506ffdb82806d01a1a5b1793faaa1e9b1f454/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"fd2646ff0c67fd4c2f06db9c171c275dcc19cdd4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fd2646ff0c67fd4c2f06db9c171c275dcc19cdd4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fd2646ff0c67fd4c2f06db9c171c275dcc19cdd4"}],"stats":{"total":763,"additions":485,"deletions":278},"files":[{"sha":"5f40a7f9d551d9640674486441fd1b92a03309ff","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/pages/WA.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -62,12 +62,12 @@ public class WA extends BasePage {\n \n     private static final long serialVersionUID = 9200112197134882164L;\n \n-    private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n+    protected static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n     @SpringBean\n-    private ServiceOps serviceOps;\n+    protected ServiceOps serviceOps;\n \n-    private String waPrefix = \"\";\n+    protected String waPrefix = \"\";\n \n     public WA(final PageParameters parameters) {\n         super(parameters);\n@@ -139,7 +139,7 @@ public void onClick(final AjaxRequestTarget target) {\n         }\n     }\n \n-    private List<ITab> buildTabList(final List<NetworkService> instances) {\n+    protected List<ITab> buildTabList(final List<NetworkService> instances) {\n         List<ITab> tabs = new ArrayList<>();\n \n         if (SyncopeConsoleSession.get().owns(AMEntitlement.AUTH_MODULE_LIST)) {"},{"sha":"ca8054b4b604d38066e68b3f78d1545d2e0bbfbc","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/AuthModuleDirectoryPanel.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.java?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -56,7 +56,7 @@\n public class AuthModuleDirectoryPanel\n         extends DirectoryPanel<AuthModuleTO, AuthModuleTO, AuthModuleProvider, AuthModuleRestClient> {\n \n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 1005345990563741296L;\n \n     public AuthModuleDirectoryPanel(final String id, final PageReference pageRef) {\n         super(id, pageRef);\n@@ -100,14 +100,14 @@ protected List<IColumn<AuthModuleTO, String>> getColumns() {\n \n             @Override\n             public void populateItem(\n-                final Item<ICellPopulator<AuthModuleTO>> item,\n-                final String componentId,\n-                final IModel<AuthModuleTO> rowModel) {\n+                    final Item<ICellPopulator<AuthModuleTO>> item,\n+                    final String componentId,\n+                    final IModel<AuthModuleTO> rowModel) {\n \n                 item.add(new Label(componentId, rowModel.getObject().getConf() == null\n-                    ? StringUtils.EMPTY\n-                    : StringUtils.substringBefore(\n-                    rowModel.getObject().getConf().getClass().getSimpleName(), \"AuthModuleConf\")));\n+                        ? StringUtils.EMPTY\n+                        : StringUtils.substringBefore(\n+                                rowModel.getObject().getConf().getClass().getSimpleName(), \"AuthModuleConf\")));\n             }\n         });\n         return columns;\n@@ -124,7 +124,7 @@ public ActionsPanel<AuthModuleTO> getActions(final IModel<AuthModuleTO> model) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final AuthModuleTO ignore) {\n                 send(AuthModuleDirectoryPanel.this, Broadcast.EXACT, new AjaxWizard.EditItemActionEvent<>(\n-                    AuthModuleRestClient.read(model.getObject().getKey()), target));\n+                        AuthModuleRestClient.read(model.getObject().getKey()), target));\n             }\n         }, ActionLink.ActionType.EDIT, AMEntitlement.AUTH_MODULE_UPDATE);\n "},{"sha":"9ee91caf197727ee0e82056ec3baaade0ae69e7e","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder.java","status":"modified","additions":57,"deletions":6,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -27,26 +27,30 @@\n import org.apache.syncope.client.console.rest.AuthModuleRestClient;\n import org.apache.syncope.client.console.wizards.mapping.AuthModuleMappingPanel;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxEventBehavior;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.wizard.WizardModel;\n import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.springframework.util.ClassUtils;\n \n public class AuthModuleWizardBuilder extends BaseAjaxWizardBuilder<AuthModuleTO> {\n \n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = -6163230263062920394L;\n \n-    private final LoadableDetachableModel<List<String>> authModuleConfs;\n+    protected final LoadableDetachableModel<List<String>> authModuleConfs;\n \n     public AuthModuleWizardBuilder(final AuthModuleTO defaultItem, final PageReference pageRef) {\n \n@@ -59,7 +63,7 @@ public AuthModuleWizardBuilder(final AuthModuleTO defaultItem, final PageReferen\n             @Override\n             protected List<String> load() {\n                 return SyncopeWebApplication.get().getLookup().getClasses(AuthModuleConf.class).stream().\n-                    map(Class::getName).sorted().collect(Collectors.toList());\n+                        map(Class::getName).sorted().collect(Collectors.toList());\n             }\n         };\n     }\n@@ -78,6 +82,11 @@ protected Serializable onApplyInternal(final AuthModuleTO modelObject) {\n     protected WizardModel buildModelSteps(final AuthModuleTO modelObject, final WizardModel wizardModel) {\n         wizardModel.add(new Profile(modelObject, authModuleConfs));\n         wizardModel.add(new Configuration(modelObject));\n+\n+        if (modelObject.getConf() instanceof GoogleMfaAuthModuleConf) {\n+            wizardModel.add(new GoogleMfaAuthModuleConfLDAP((GoogleMfaAuthModuleConf) modelObject.getConf()));\n+        }\n+\n         wizardModel.add(new Mapping(modelObject));\n         return wizardModel;\n     }\n@@ -130,16 +139,58 @@ protected void onEvent(final AjaxRequestTarget target) {\n         }\n     }\n \n-    private static class Configuration extends WizardStep {\n+    protected static class Configuration extends WizardStep {\n \n         private static final long serialVersionUID = -785981096328637758L;\n \n         Configuration(final AuthModuleTO authModule) {\n-            add(new BeanPanel<>(\"bean\", new PropertyModel<>(authModule, \"conf\")).setRenderBodyOnly(true));\n+            add(new BeanPanel<>(\"bean\", new PropertyModel<>(authModule, \"conf\"), \"ldap\").setRenderBodyOnly(true));\n+        }\n+    }\n+\n+    protected static class GoogleMfaAuthModuleConfLDAP extends WizardStep {\n+\n+        private static final long serialVersionUID = 5328049907748683944L;\n+\n+        GoogleMfaAuthModuleConfLDAP(final GoogleMfaAuthModuleConf authModuleConf) {\n+            PropertyModel<GoogleMfaAuthModuleConf.LDAP> beanPanelModel = new PropertyModel<>(authModuleConf, \"ldap\");\n+\n+            AjaxCheckBoxPanel enable = new AjaxCheckBoxPanel(\"enable\", \"enableLDAP\", new IModel<Boolean>() {\n+\n+                private static final long serialVersionUID = -7126718045816207110L;\n+\n+                @Override\n+                public Boolean getObject() {\n+                    return beanPanelModel.getObject() != null;\n+                }\n+\n+                @Override\n+                public void setObject(final Boolean object) {\n+                    // nothing to do\n+                }\n+            });\n+            enable.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                private static final long serialVersionUID = -1107858522700306810L;\n+\n+                @Override\n+                protected void onUpdate(final AjaxRequestTarget target) {\n+                    if (beanPanelModel.getObject() == null) {\n+                        beanPanelModel.setObject(new GoogleMfaAuthModuleConf.LDAP());\n+                    } else {\n+                        beanPanelModel.setObject(null);\n+                    }\n+                    target.add(GoogleMfaAuthModuleConfLDAP.this);\n+                }\n+            });\n+            add(enable);\n+\n+            add(new BeanPanel<>(\"bean\", beanPanelModel).setRenderBodyOnly(true));\n+            setOutputMarkupId(true);\n         }\n     }\n \n-    private static final class Mapping extends WizardStep {\n+    protected static final class Mapping extends WizardStep {\n \n         private static final long serialVersionUID = 3454904947720856253L;\n "},{"sha":"7972709600647c9137bfd390fa2df5b673cc75ac","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder$GoogleMfaAuthModuleConfLDAP.html","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP.html?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -0,0 +1,24 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <span wicket:id=\"enable\"/>\n+    <span wicket:id=\"bean\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"3fb808182928fafb06475f43830ad1072bccac93","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder$GoogleMfaAuthModuleConfLDAP.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP.properties?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+enableLDAP=Enable LDAP?"},{"sha":"3fb808182928fafb06475f43830ad1072bccac93","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder$GoogleMfaAuthModuleConfLDAP_fr_CA.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_fr_CA.properties?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+enableLDAP=Enable LDAP?"},{"sha":"083f98e1b1433859a4add4b281ea77ec3e216253","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder$GoogleMfaAuthModuleConfLDAP_it.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_it.properties?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+enableLDAP=Abilitare LDAP?"},{"sha":"3fb808182928fafb06475f43830ad1072bccac93","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder$GoogleMfaAuthModuleConfLDAP_ja.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_ja.properties?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+enableLDAP=Enable LDAP?"},{"sha":"3fb808182928fafb06475f43830ad1072bccac93","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder$GoogleMfaAuthModuleConfLDAP_pt_BR.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_pt_BR.properties?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+enableLDAP=Enable LDAP?"},{"sha":"b03775c05568b618653fc63e9bbbeec2540e3562","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder$GoogleMfaAuthModuleConfLDAP_ru.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder%24GoogleMfaAuthModuleConfLDAP_ru.properties?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+enableLDAP=Enable LDAP?"},{"sha":"b38f2c22d66180d9f64bbc7445a6f00c06517408","filename":"client/idrepo/console/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fidrepo%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fidrepo%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fpom.xml?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -276,6 +276,7 @@ under the License.\n             <artifactId>spring-boot-maven-plugin</artifactId>\n             <configuration>\n               <jvmArguments>\n+                -Djavax.net.ssl.trustStore=${basedir}/../../../fit/wa-reference/src/test/resources/keystore.jks -Djavax.net.ssl.trustStorePassword=password\n                 -Dwicket.core.settings.general.configuration-type=development\n                 -XX:HotswapAgent=fatjar\n                 -Xdebug -Xrunjdwp:transport=dt_socket,address=8003,server=y,suspend=n"},{"sha":"d41b7337e0c8e5fc1448e1ccb01e20b279c9a64d","filename":"client/idrepo/console/src/test/resources/console-debug.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fresources%2Fconsole-debug.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fresources%2Fconsole-debug.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fresources%2Fconsole-debug.properties?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -14,7 +14,8 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-keymaster.address=http://localhost:9080/syncope/rest/keymaster\n+#keymaster.address=http://localhost:9080/syncope/rest/keymaster\n+keymaster.address=https://localhost:9443/syncope/rest/keymaster\n keymaster.username=${anonymousUser}\n keymaster.password=${anonymousKey}\n "},{"sha":"61fb55255484b5d397a46ab28af9bb814b4ec98c","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/GoogleMfaAuthModuleConf.java","status":"modified","additions":109,"deletions":92,"changes":201,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FGoogleMfaAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FGoogleMfaAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FGoogleMfaAuthModuleConf.java?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -18,10 +18,110 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n+import java.io.Serializable;\n+\n public class GoogleMfaAuthModuleConf implements AuthModuleConf {\n \n     private static final long serialVersionUID = -7883257599139312426L;\n \n+    public static class LDAP implements Serializable {\n+\n+        private static final long serialVersionUID = -7274446267090678730L;\n+\n+        /**\n+         * Name of LDAP attribute that holds GAuth account/credential as JSON.\n+         */\n+        private String accountAttributeName = \"casGAuthRecord\";\n+\n+        /**\n+         * Base DN to use. There may be scenarios where different parts of a single LDAP tree\n+         * could be considered as base-dns. Each entry can be specified\n+         * and joined together using a special delimiter character.\n+         */\n+        private String baseDn;\n+\n+        /**\n+         * The bind credential to use when connecting to LDAP.\n+         */\n+        private String bindCredential;\n+\n+        /**\n+         * The bind DN to use when connecting to LDAP.\n+         */\n+        private String bindDn;\n+\n+        /**\n+         * The LDAP url to the server. More than one may be specified, separated by space and/or comma.\n+         */\n+        private String url;\n+\n+        /**\n+         * User filter to use for searching. Syntax is i.e. cn={user} or cn={0}.\n+         */\n+        private String searchFilter;\n+\n+        /**\n+         * Whether subtree searching is allowed.\n+         */\n+        private boolean subtreeSearch = true;\n+\n+        public String getAccountAttributeName() {\n+            return accountAttributeName;\n+        }\n+\n+        public void setAccountAttributeName(final String accountAttributeName) {\n+            this.accountAttributeName = accountAttributeName;\n+        }\n+\n+        public String getBaseDn() {\n+            return baseDn;\n+        }\n+\n+        public void setBaseDn(final String baseDn) {\n+            this.baseDn = baseDn;\n+        }\n+\n+        public String getBindCredential() {\n+            return bindCredential;\n+        }\n+\n+        public void setBindCredential(final String bindCredential) {\n+            this.bindCredential = bindCredential;\n+        }\n+\n+        public String getBindDn() {\n+            return bindDn;\n+        }\n+\n+        public void setBindDn(final String bindDn) {\n+            this.bindDn = bindDn;\n+        }\n+\n+        public String getUrl() {\n+            return url;\n+        }\n+\n+        public void setUrl(final String url) {\n+            this.url = url;\n+        }\n+\n+        public String getSearchFilter() {\n+            return searchFilter;\n+        }\n+\n+        public void setSearchFilter(final String searchFilter) {\n+            this.searchFilter = searchFilter;\n+        }\n+\n+        public boolean isSubtreeSearch() {\n+            return subtreeSearch;\n+        }\n+\n+        public void setSubtreeSearch(final boolean subtreeSearch) {\n+            this.subtreeSearch = subtreeSearch;\n+        }\n+    }\n+\n     /**\n      * Issuer used in the barcode when dealing with device registration events.\n      * Used in the registration URL to identify CAS.\n@@ -52,98 +152,7 @@ public class GoogleMfaAuthModuleConf implements AuthModuleConf {\n      */\n     private int windowSize = 3;\n \n-    /**\n-     * Name of LDAP attribute that holds GAuth account/credential as JSON.\n-     */\n-    private String ldapAccountAttributeName = \"casGAuthRecord\";\n-\n-    /**\n-     * Base DN to use. There may be scenarios where different parts of a single LDAP tree\n-     * could be considered as base-dns. Each entry can be specified\n-     * and joined together using a special delimiter character.\n-     */\n-    private String ldapBaseDn;\n-\n-    /**\n-     * The bind credential to use when connecting to LDAP.\n-     */\n-    private String ldapBindCredential;\n-\n-    /**\n-     * The bind DN to use when connecting to LDAP.\n-     */\n-    private String ldapBindDn;\n-\n-    /**\n-     * The LDAP url to the server. More than one may be specified, separated by space and/or comma.\n-     */\n-    private String ldapUrl;\n-\n-    /**\n-     * User filter to use for searching. Syntax is i.e.  cn={user} or cn={0}.\n-     */\n-    private String ldapSearchFilter;\n-\n-    /**\n-     * Whether subtree searching is allowed.\n-     */\n-    private boolean ldapSubtreeSearch = true;\n-\n-    public String getLdapAccountAttributeName() {\n-        return ldapAccountAttributeName;\n-    }\n-\n-    public void setLdapAccountAttributeName(final String ldapAccountAttributeName) {\n-        this.ldapAccountAttributeName = ldapAccountAttributeName;\n-    }\n-\n-    public String getLdapBaseDn() {\n-        return ldapBaseDn;\n-    }\n-\n-    public void setLdapBaseDn(final String ldapBaseDn) {\n-        this.ldapBaseDn = ldapBaseDn;\n-    }\n-\n-    public String getLdapBindCredential() {\n-        return ldapBindCredential;\n-    }\n-\n-    public void setLdapBindCredential(final String ldapBindCredential) {\n-        this.ldapBindCredential = ldapBindCredential;\n-    }\n-\n-    public String getLdapBindDn() {\n-        return ldapBindDn;\n-    }\n-\n-    public void setLdapBindDn(final String ldapBindDn) {\n-        this.ldapBindDn = ldapBindDn;\n-    }\n-\n-    public String getLdapUrl() {\n-        return ldapUrl;\n-    }\n-\n-    public void setLdapUrl(final String ldapUrl) {\n-        this.ldapUrl = ldapUrl;\n-    }\n-\n-    public String getLdapSearchFilter() {\n-        return ldapSearchFilter;\n-    }\n-\n-    public void setLdapSearchFilter(final String ldapSearchFilter) {\n-        this.ldapSearchFilter = ldapSearchFilter;\n-    }\n-\n-    public boolean isLdapSubtreeSearch() {\n-        return ldapSubtreeSearch;\n-    }\n-\n-    public void setLdapSubtreeSearch(final boolean ldapSubtreeSearch) {\n-        this.ldapSubtreeSearch = ldapSubtreeSearch;\n-    }\n+    private LDAP ldap;\n \n     public String getIssuer() {\n         return issuer;\n@@ -184,4 +193,12 @@ public int getWindowSize() {\n     public void setWindowSize(final int windowSize) {\n         this.windowSize = windowSize;\n     }\n+\n+    public LDAP getLdap() {\n+        return ldap;\n+    }\n+\n+    public void setLdap(final LDAP ldap) {\n+        this.ldap = ldap;\n+    }\n }"},{"sha":"059af19a500aec697139687c0c20527a663e62c8","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":155,"deletions":153,"changes":308,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -74,35 +74,35 @@\n @Order\n public class SyncopeWAPropertySourceLocator implements PropertySourceLocator {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAPropertySourceLocator.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeWAPropertySourceLocator.class);\n \n-    private final WARestClient waRestClient;\n+    protected final WARestClient waRestClient;\n \n     public SyncopeWAPropertySourceLocator(final WARestClient waRestClient) {\n         this.waRestClient = waRestClient;\n     }\n \n-    private static SimpleFilterProvider getParentCasFilterProvider() {\n+    protected SimpleFilterProvider getParentCasFilterProvider() {\n         return new SimpleFilterProvider().\n-            setFailOnUnknownId(false).\n-            addFilter(CasConfigurationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        CasConfigurationProperties.class,\n-                        CasConfigurationProperties::getAuthn)));\n+                setFailOnUnknownId(false).\n+                addFilter(CasConfigurationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(\n+                                        CasConfigurationProperties.class,\n+                                        CasConfigurationProperties::getAuthn)));\n     }\n \n-    private static Map<String, Object> filterCasProperties(\n-        final CasConfigurationProperties casProperties,\n-        final SimpleFilterProvider filters) {\n+    protected Map<String, Object> filterCasProperties(\n+            final CasConfigurationProperties casProperties,\n+            final SimpleFilterProvider filters) {\n \n         return CasCoreConfigurationUtils.asMap(casProperties.withHolder(), filters);\n     }\n \n-    private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final SyncopeAuthModuleConf conf,\n-        final String address) {\n+    protected Map<String, Object> mapAuthModule(\n+            final String authModule,\n+            final SyncopeAuthModuleConf conf,\n+            final String address) {\n \n         SyncopeAuthenticationProperties syncopeProps = new SyncopeAuthenticationProperties();\n         syncopeProps.setName(authModule);\n@@ -114,39 +114,39 @@ private static Map<String, Object> mapAuthModule(\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n-            SimpleBeanPropertyFilter.filterOutAllExcept(\n-                CasCoreConfigurationUtils.getPropertyName(\n-                    AuthenticationProperties.class,\n-                    AuthenticationProperties::getSyncope)));\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                        CasCoreConfigurationUtils.getPropertyName(\n+                                AuthenticationProperties.class,\n+                                AuthenticationProperties::getSyncope)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final StaticAuthModuleConf conf) {\n+    protected Map<String, Object> mapAuthModule(\n+            final String authModule,\n+            final StaticAuthModuleConf conf) {\n \n         AcceptAuthenticationProperties staticProps = new AcceptAuthenticationProperties();\n         staticProps.setName(authModule);\n         String users = conf.getUsers().entrySet().stream().\n-            map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n-            collect(Collectors.joining(\",\"));\n+                map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n+                collect(Collectors.joining(\",\"));\n         staticProps.setUsers(users);\n \n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n         casProperties.getAuthn().setAccept(staticProps);\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n-            SimpleBeanPropertyFilter.filterOutAllExcept(\n-                CasCoreConfigurationUtils.getPropertyName(\n-                    AuthenticationProperties.class,\n-                    AuthenticationProperties::getAccept)));\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                        CasCoreConfigurationUtils.getPropertyName(\n+                                AuthenticationProperties.class,\n+                                AuthenticationProperties::getAccept)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final LDAPAuthModuleConf conf) {\n+    protected Map<String, Object> mapAuthModule(\n+            final String authModule,\n+            final LDAPAuthModuleConf conf) {\n \n         LdapAuthenticationProperties ldapProps = new LdapAuthenticationProperties();\n         ldapProps.setName(authModule);\n@@ -167,19 +167,18 @@ private static Map<String, Object> mapAuthModule(\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.addFilter(\n-            AuthenticationProperties.class.getSimpleName(),\n-            SimpleBeanPropertyFilter.filterOutAllExcept(\n-                CasCoreConfigurationUtils.getPropertyName(\n-                    AuthenticationProperties.class,\n-                    AuthenticationProperties::getLdap)));\n+                AuthenticationProperties.class.getSimpleName(),\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                        CasCoreConfigurationUtils.getPropertyName(\n+                                AuthenticationProperties.class,\n+                                AuthenticationProperties::getLdap)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n-\n     @SuppressWarnings(\"deprecation\")\n-    private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final DuoMfaAuthModuleConf conf) {\n+    protected Map<String, Object> mapAuthModule(\n+            final String authModule,\n+            final DuoMfaAuthModuleConf conf) {\n \n         DuoSecurityMultifactorAuthenticationProperties props = new DuoSecurityMultifactorAuthenticationProperties();\n         props.setName(authModule);\n@@ -193,23 +192,25 @@ private static Map<String, Object> mapAuthModule(\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.\n-            addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        AuthenticationProperties.class,\n-                        AuthenticationProperties::getMfa))).\n-            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        MultifactorAuthenticationProperties.class,\n-                        MultifactorAuthenticationProperties::getDuo)));\n+                addFilter(AuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(\n+                                        AuthenticationProperties.class,\n+                                        AuthenticationProperties::getMfa))).\n+                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(\n+                                        MultifactorAuthenticationProperties.class,\n+                                        MultifactorAuthenticationProperties::getDuo)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static Map<String, Object> mapAuthModule(final String authModule,\n-                                                     final SimpleMfaAuthModuleConf conf) {\n+    protected Map<String, Object> mapAuthModule(\n+            final String authModule,\n+            final SimpleMfaAuthModuleConf conf) {\n+\n         CasSimpleMultifactorAuthenticationProperties props =\n-            new CasSimpleMultifactorAuthenticationProperties();\n+                new CasSimpleMultifactorAuthenticationProperties();\n \n         props.setName(authModule);\n         props.setTokenLength(conf.getTokenLength());\n@@ -219,53 +220,54 @@ private static Map<String, Object> mapAuthModule(final String authModule,\n         props.getMail().setSubject(conf.getEmailSubject());\n         props.getMail().setText(conf.getEmailText());\n \n-        try {\n-            if (StringUtils.isNotBlank(conf.getBypassGroovyScript())) {\n+        if (StringUtils.isNotBlank(conf.getBypassGroovyScript())) {\n+            try {\n                 props.getBypass().getGroovy().setLocation(ResourceUtils.getResourceFrom(conf.getBypassGroovyScript()));\n+            } catch (Exception e) {\n+                LOG.error(\"Unable to load groovy script for bypass\", e);\n+                throw new IllegalArgumentException(e);\n             }\n-        } catch (final Exception e) {\n-            LOG.error(\"Unable to load groovy script for bypass\", e);\n-            throw new IllegalArgumentException(e);\n         }\n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n         casProperties.getAuthn().getMfa().setSimple(props);\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.\n-            addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        AuthenticationProperties.class,\n-                        AuthenticationProperties::getMfa))).\n-            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        MultifactorAuthenticationProperties.class,\n-                        MultifactorAuthenticationProperties::getSimple)));\n+                addFilter(AuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(\n+                                        AuthenticationProperties.class,\n+                                        AuthenticationProperties::getMfa))).\n+                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(\n+                                        MultifactorAuthenticationProperties.class,\n+                                        MultifactorAuthenticationProperties::getSimple)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final GoogleMfaAuthModuleConf conf) {\n+    protected Map<String, Object> mapAuthModule(\n+            final String authModule,\n+            final GoogleMfaAuthModuleConf conf) {\n \n-        GoogleAuthenticatorMultifactorProperties gauthProps =\n-            new GoogleAuthenticatorMultifactorProperties();\n+        GoogleAuthenticatorMultifactorProperties gauthProps = new GoogleAuthenticatorMultifactorProperties();\n         gauthProps.setName(authModule);\n         gauthProps.getCore().setIssuer(conf.getIssuer());\n         gauthProps.getCore().setCodeDigits(conf.getCodeDigits());\n         gauthProps.getCore().setLabel(conf.getLabel());\n         gauthProps.getCore().setTimeStepSize(conf.getTimeStepSize());\n         gauthProps.getCore().setWindowSize(conf.getWindowSize());\n \n-        LdapGoogleAuthenticatorMultifactorProperties ldapProps = new LdapGoogleAuthenticatorMultifactorProperties();\n-        ldapProps.setAccountAttributeName(conf.getLdapAccountAttributeName());\n-        ldapProps.setBaseDn(conf.getLdapBaseDn());\n-        ldapProps.setBindCredential(conf.getLdapBindCredential());\n-        ldapProps.setBindDn(conf.getLdapBindDn());\n-        ldapProps.setSearchFilter(conf.getLdapSearchFilter());\n-        ldapProps.setLdapUrl(conf.getLdapUrl());\n-        gauthProps.setLdap(ldapProps);\n+        if (conf.getLdap() != null) {\n+            LdapGoogleAuthenticatorMultifactorProperties ldapProps = new LdapGoogleAuthenticatorMultifactorProperties();\n+            ldapProps.setAccountAttributeName(conf.getLdap().getAccountAttributeName());\n+            ldapProps.setBaseDn(conf.getLdap().getBaseDn());\n+            ldapProps.setBindCredential(conf.getLdap().getBindCredential());\n+            ldapProps.setBindDn(conf.getLdap().getBindDn());\n+            ldapProps.setSearchFilter(conf.getLdap().getSearchFilter());\n+            ldapProps.setLdapUrl(conf.getLdap().getUrl());\n+            gauthProps.setLdap(ldapProps);\n+        }\n \n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n         casProperties.getAuthn().getMfa().setGauth(gauthProps);\n@@ -274,20 +276,20 @@ private static Map<String, Object> mapAuthModule(\n         filterProvider.addFilter(\n                 AuthenticationProperties.class.getSimpleName(),\n                 SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        AuthenticationProperties.class,\n-                        AuthenticationProperties::getMfa))).\n-            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        MultifactorAuthenticationProperties.class,\n-                        MultifactorAuthenticationProperties::getGauth)));\n+                        CasCoreConfigurationUtils.getPropertyName(\n+                                AuthenticationProperties.class,\n+                                AuthenticationProperties::getMfa))).\n+                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(\n+                                        MultifactorAuthenticationProperties.class,\n+                                        MultifactorAuthenticationProperties::getGauth)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final U2FAuthModuleConf conf) {\n+    protected Map<String, Object> mapAuthModule(\n+            final String authModule,\n+            final U2FAuthModuleConf conf) {\n \n         U2FMultifactorAuthenticationProperties props = new U2FMultifactorAuthenticationProperties();\n         props.setName(authModule);\n@@ -301,22 +303,22 @@ private static Map<String, Object> mapAuthModule(\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.\n-            addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        AuthenticationProperties.class,\n-                        AuthenticationProperties::getMfa))).\n-            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        MultifactorAuthenticationProperties.class,\n-                        MultifactorAuthenticationProperties::getU2f)));\n+                addFilter(AuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(\n+                                        AuthenticationProperties.class,\n+                                        AuthenticationProperties::getMfa))).\n+                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(\n+                                        MultifactorAuthenticationProperties.class,\n+                                        MultifactorAuthenticationProperties::getU2f)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final JaasAuthModuleConf conf) {\n+    protected Map<String, Object> mapAuthModule(\n+            final String authModule,\n+            final JaasAuthModuleConf conf) {\n \n         JaasAuthenticationProperties props = new JaasAuthenticationProperties();\n         props.setName(authModule);\n@@ -331,16 +333,16 @@ private static Map<String, Object> mapAuthModule(\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.addFilter(AuthenticationProperties.class.getSimpleName(),\n-            SimpleBeanPropertyFilter.filterOutAllExcept(\n-                CasCoreConfigurationUtils.getPropertyName(\n-                    AuthenticationProperties.class,\n-                    AuthenticationProperties::getJaas)));\n+                SimpleBeanPropertyFilter.filterOutAllExcept(\n+                        CasCoreConfigurationUtils.getPropertyName(\n+                                AuthenticationProperties.class,\n+                                AuthenticationProperties::getJaas)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final JDBCAuthModuleConf conf) {\n+    protected Map<String, Object> mapAuthModule(\n+            final String authModule,\n+            final JDBCAuthModuleConf conf) {\n \n         QueryJdbcAuthenticationProperties props = new QueryJdbcAuthenticationProperties();\n         props.setName(authModule);\n@@ -360,22 +362,22 @@ private static Map<String, Object> mapAuthModule(\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.\n-            addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        AuthenticationProperties.class,\n-                        AuthenticationProperties::getJdbc))).\n-            addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        JdbcAuthenticationProperties.class,\n-                        JdbcAuthenticationProperties::getQuery)));\n+                addFilter(AuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(\n+                                        AuthenticationProperties.class,\n+                                        AuthenticationProperties::getJdbc))).\n+                addFilter(MultifactorAuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(\n+                                        JdbcAuthenticationProperties.class,\n+                                        JdbcAuthenticationProperties::getQuery)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final OIDCAuthModuleConf conf) {\n+    protected Map<String, Object> mapAuthModule(\n+            final String authModule,\n+            final OIDCAuthModuleConf conf) {\n \n         Pac4jGenericOidcClientProperties props = new Pac4jGenericOidcClientProperties();\n         props.setId(conf.getId());\n@@ -397,22 +399,22 @@ private static Map<String, Object> mapAuthModule(\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.\n-            addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        AuthenticationProperties.class,\n-                        AuthenticationProperties::getPac4j))).\n-            addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        Pac4jDelegatedAuthenticationProperties.class,\n-                        Pac4jDelegatedAuthenticationProperties::getOidc)));\n+                addFilter(AuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(\n+                                        AuthenticationProperties.class,\n+                                        AuthenticationProperties::getPac4j))).\n+                addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(\n+                                        Pac4jDelegatedAuthenticationProperties.class,\n+                                        Pac4jDelegatedAuthenticationProperties::getOidc)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n-    private static Map<String, Object> mapAuthModule(\n-        final String authModule,\n-        final SAML2IdPAuthModuleConf conf) {\n+    protected Map<String, Object> mapAuthModule(\n+            final String authModule,\n+            final SAML2IdPAuthModuleConf conf) {\n \n         Pac4jSamlClientProperties props = new Pac4jSamlClientProperties();\n         props.setClientName(authModule);\n@@ -436,24 +438,24 @@ private static Map<String, Object> mapAuthModule(\n         props.setSignatureReferenceDigestMethods(conf.getSignatureReferenceDigestMethods());\n         props.setPrincipalAttributeId(conf.getUserIdAttribute());\n         props.setNameIdPolicyAllowCreate(StringUtils.isBlank(conf.getNameIdPolicyAllowCreate())\n-            ? TriStateBoolean.UNDEFINED\n-            : TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n+                ? TriStateBoolean.UNDEFINED\n+                : TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n \n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n         casProperties.getAuthn().getPac4j().getSaml().add(props);\n \n         SimpleFilterProvider filterProvider = getParentCasFilterProvider();\n         filterProvider.\n-            addFilter(AuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        AuthenticationProperties.class,\n-                        AuthenticationProperties::getPac4j))).\n-            addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n-                SimpleBeanPropertyFilter.filterOutAllExcept(\n-                    CasCoreConfigurationUtils.getPropertyName(\n-                        Pac4jDelegatedAuthenticationProperties.class,\n-                        Pac4jDelegatedAuthenticationProperties::getSaml)));\n+                addFilter(AuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(\n+                                        AuthenticationProperties.class,\n+                                        AuthenticationProperties::getPac4j))).\n+                addFilter(Pac4jDelegatedAuthenticationProperties.class.getSimpleName(),\n+                        SimpleBeanPropertyFilter.filterOutAllExcept(\n+                                CasCoreConfigurationUtils.getPropertyName(\n+                                        Pac4jDelegatedAuthenticationProperties.class,\n+                                        Pac4jDelegatedAuthenticationProperties::getSaml)));\n         return filterCasProperties(casProperties, filterProvider);\n     }\n \n@@ -478,7 +480,7 @@ public PropertySource<?> locate(final Environment environment) {\n                 properties.putAll(mapAuthModule(authModuleTO.getKey(), (StaticAuthModuleConf) authConf));\n             } else if (authConf instanceof SyncopeAuthModuleConf) {\n                 properties.putAll(mapAuthModule(authModuleTO.getKey(),\n-                    (SyncopeAuthModuleConf) authConf, syncopeClient.getAddress()));\n+                        (SyncopeAuthModuleConf) authConf, syncopeClient.getAddress()));\n             } else if (authConf instanceof GoogleMfaAuthModuleConf) {\n                 properties.putAll(mapAuthModule(authModuleTO.getKey(), (GoogleMfaAuthModuleConf) authConf));\n             } else if (authConf instanceof SimpleMfaAuthModuleConf) {\n@@ -499,7 +501,7 @@ public PropertySource<?> locate(final Environment environment) {\n         });\n \n         syncopeClient.getService(WAConfigService.class).list().\n-            forEach(attr -> properties.put(attr.getSchema(), attr.getValues()));\n+                forEach(attr -> properties.put(attr.getSchema(), attr.getValues()));\n         LOG.debug(\"Collected WA properties: {}\", properties);\n         return new MapPropertySource(getClass().getName(), properties);\n     }"},{"sha":"2d8e595166fbc991e1de43f26d9afa5e549cf38d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":21,"deletions":13,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -89,7 +89,6 @@\n import org.apereo.cas.util.LdapUtils;\n import org.apereo.cas.util.crypto.CipherExecutor;\n import org.apereo.cas.webauthn.storage.WebAuthnCredentialRepository;\n-\n import org.ldaptive.ConnectionFactory;\n import org.pac4j.core.client.Client;\n import org.springframework.beans.factory.ObjectProvider;\n@@ -246,9 +245,11 @@ public CasEventRepositoryFilter syncopeWAEventRepositoryFilter() {\n     }\n \n     @Bean\n-    public CasEventRepository casEventRepository(final WARestClient restClient,\n+    public CasEventRepository casEventRepository(\n+            final WARestClient restClient,\n             @Qualifier(\"syncopeWAEventRepositoryFilter\")\n             final CasEventRepositoryFilter syncopeWAEventRepositoryFilter) {\n+\n         return new SyncopeWAEventRepository(syncopeWAEventRepositoryFilter, restClient);\n     }\n \n@@ -261,6 +262,7 @@ public DelegatedClientFactoryCustomizer<Client> delegatedClientCustomizer(final\n     public OneTimeTokenRepository oneTimeTokenAuthenticatorTokenRepository(\n             final CasConfigurationProperties casProperties,\n             final WARestClient restClient) {\n+\n         return new SyncopeWAGoogleMfaAuthTokenRepository(\n                 restClient, casProperties.getAuthn().getMfa().getGauth().getCore().getTimeStepSize());\n     }\n@@ -269,22 +271,26 @@ public OneTimeTokenRepository oneTimeTokenAuthenticatorTokenRepository(\n     @Bean\n     public OneTimeTokenCredentialRepository googleAuthenticatorAccountRegistry(\n             final CasConfigurationProperties casProperties,\n-            @Qualifier(\"googleAuthenticatorAccountCipherExecutor\") final CipherExecutor cipherExecutor,\n-            final IGoogleAuthenticator googleAuthenticatorInstance, final WARestClient restClient) {\n+            @Qualifier(\"googleAuthenticatorAccountCipherExecutor\")\n+            final CipherExecutor<String, String> cipherExecutor,\n+            final IGoogleAuthenticator googleAuthenticatorInstance,\n+            final WARestClient restClient) {\n \n         /*\n-        Declaring the LDAP-based repository as a Spring bean that would be conditionally activated\n-        via properties using annotations is not possible; conditionally-created spring beans cannot be\n-        refreshed, which means the settings ever change and the context is refreshed, the repository\n-        option can not be re-created. This could be revisited later in CAS 6.6.x using the {@code BeanSupplier}\n-        API construct to recreate the same bean in a more conventional way.\n+         * Declaring the LDAP-based repository as a Spring bean that would be conditionally activated\n+         * via properties using annotations is not possible; conditionally-created spring beans cannot be\n+         * refreshed, which means the settings ever change and the context is refreshed, the repository\n+         * option can not be re-created. This could be revisited later in CAS 6.6.x using the {@code BeanSupplier}\n+         * API construct to recreate the same bean in a more conventional way.\n          */\n         LdapGoogleAuthenticatorMultifactorProperties ldap = casProperties.getAuthn().getMfa().getGauth().getLdap();\n-        if (StringUtils.isNotBlank(ldap.getBaseDn()) && StringUtils.isNotBlank(ldap.getLdapUrl())\n-            && StringUtils.isNotBlank(ldap.getSearchFilter())) {\n+        if (StringUtils.isNotBlank(ldap.getBaseDn())\n+                && StringUtils.isNotBlank(ldap.getLdapUrl())\n+                && StringUtils.isNotBlank(ldap.getSearchFilter())) {\n+\n             ConnectionFactory connectionFactory = LdapUtils.newLdaptiveConnectionFactory(ldap);\n-            return new LdapGoogleAuthenticatorTokenCredentialRepository(cipherExecutor,\n-                googleAuthenticatorInstance, connectionFactory, ldap);\n+            return new LdapGoogleAuthenticatorTokenCredentialRepository(\n+                    cipherExecutor, googleAuthenticatorInstance, connectionFactory, ldap);\n         }\n         return new SyncopeWAGoogleMfaAuthCredentialRepository(restClient, googleAuthenticatorInstance);\n     }\n@@ -293,6 +299,7 @@ public OneTimeTokenCredentialRepository googleAuthenticatorAccountRegistry(\n     public OidcJsonWebKeystoreGeneratorService oidcJsonWebKeystoreGeneratorService(\n             final ConfigurableApplicationContext ctx,\n             final WARestClient restClient) {\n+\n         int size = ctx.getEnvironment().\n                 getProperty(\"cas.authn.oidc.jwks.size\", int.class, 2048);\n         JWSAlgorithm algorithm = ctx.getEnvironment().\n@@ -304,6 +311,7 @@ public OidcJsonWebKeystoreGeneratorService oidcJsonWebKeystoreGeneratorService(\n     public WebAuthnCredentialRepository webAuthnCredentialRepository(\n             final CasConfigurationProperties casProperties,\n             final WARestClient restClient) {\n+\n         return new SyncopeWAWebAuthnCredentialRepository(casProperties, restClient);\n     }\n "},{"sha":"c45f82a3769b09ebbd7c28502172f1468e152115","filename":"wa/starter/src/main/resources/wa.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/176506ffdb82806d01a1a5b1793faaa1e9b1f454/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/176506ffdb82806d01a1a5b1793faaa1e9b1f454/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=176506ffdb82806d01a1a5b1793faaa1e9b1f454","patch":"@@ -37,7 +37,7 @@ spring.web.resources.static-locations=classpath:/thymeleaf/static,classpath:/syn\n \n cas.monitor.endpoints.endpoint.defaults.access=AUTHENTICATED\n management.endpoints.enabled-by-default=true\n-management.endpoints.web.exposure.include=info,health,env,loggers,ssoSessions,registeredServices,refresh\n+management.endpoints.web.exposure.include=info,health,env,loggers,ssoSessions,registeredServices,refresh,authenticationHandlers,authenticationPolicies\n management.endpoint.health.show-details=ALWAYS\n spring.cloud.discovery.client.health-indicator.enabled=false\n "}]}