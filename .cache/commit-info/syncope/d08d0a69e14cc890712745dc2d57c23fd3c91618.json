{"sha":"d08d0a69e14cc890712745dc2d57c23fd3c91618","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQwOGQwYTY5ZTE0Y2M4OTA3MTI3NDVkYzJkNTdjMjNmZDNjOTE2MTg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-05-18T12:01:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-05-19T13:20:39Z"},"message":"[SYNCOPE-1564] Fixing YAML support","tree":{"sha":"987e3d6a956a5256c8205ac941b46f889015d9f5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/987e3d6a956a5256c8205ac941b46f889015d9f5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d08d0a69e14cc890712745dc2d57c23fd3c91618","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d08d0a69e14cc890712745dc2d57c23fd3c91618","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d08d0a69e14cc890712745dc2d57c23fd3c91618","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d08d0a69e14cc890712745dc2d57c23fd3c91618/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"02824d269ad4674873513d58b270e8cdb473c739","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/02824d269ad4674873513d58b270e8cdb473c739","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/02824d269ad4674873513d58b270e8cdb473c739"}],"stats":{"total":695,"additions":621,"deletions":74},"files":[{"sha":"52dc00d8125f5948173d5f326ae084b5834aea34","filename":"client/idrepo/lib/pom.xml","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/client%2Fidrepo%2Flib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/client%2Fidrepo%2Flib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fpom.xml?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -54,8 +54,12 @@ under the License.\n     <dependency>\n       <groupId>com.fasterxml.jackson.jaxrs</groupId>\n       <artifactId>jackson-jaxrs-json-provider</artifactId>\n-    </dependency>  \n- \n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.jaxrs</groupId>\n+      <artifactId>jackson-jaxrs-yaml-provider</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>joda-time</groupId>\n       <artifactId>joda-time</artifactId>"},{"sha":"ee1fdf4075b197564abad4a95f35cf576023156b","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":30,"deletions":13,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -19,19 +19,19 @@\n package org.apache.syncope.client.lib;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n import com.fasterxml.jackson.datatype.joda.JodaModule;\n import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;\n-import java.util.ArrayList;\n+import com.fasterxml.jackson.jaxrs.yaml.JacksonJaxbYAMLProvider;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n-\n import javax.ws.rs.core.MediaType;\n import javax.xml.bind.Marshaller;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.configuration.jsse.TLSClientParameters;\n-import org.apache.cxf.feature.Feature;\n import org.apache.cxf.ext.logging.LoggingFeature;\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n import org.apache.cxf.jaxrs.provider.JAXBElementProvider;\n@@ -75,6 +75,8 @@ public static ContentType fromString(final String value) {\n \n     private JAXBElementProvider<?> jaxbProvider;\n \n+    private JacksonJaxbYAMLProvider yamlProvider;\n+\n     private RestClientExceptionMapper exceptionMapper;\n \n     private String address;\n@@ -92,7 +94,7 @@ public static ContentType fromString(final String value) {\n     protected static JacksonJaxbJsonProvider defaultJsonProvider() {\n         ObjectMapper objectMapper = new ObjectMapper();\n         objectMapper.registerModule(new JodaModule());\n-        objectMapper.configure(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n+        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n         return new JacksonJaxbJsonProvider(objectMapper, JacksonJaxbJsonProvider.DEFAULT_ANNOTATIONS);\n     }\n \n@@ -115,6 +117,13 @@ protected static JAXBElementProvider<?> defaultJAXBProvider() {\n         return defaultJAXBProvider;\n     }\n \n+    protected static JacksonJaxbYAMLProvider defaultYamlProvider() {\n+        YAMLMapper yamlMapper = new YAMLMapper();\n+        yamlMapper.registerModule(new JodaModule());\n+        yamlMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n+        return new JacksonJaxbYAMLProvider(yamlMapper, JacksonJaxbJsonProvider.DEFAULT_ANNOTATIONS);\n+    }\n+\n     protected static RestClientExceptionMapper defaultExceptionMapper() {\n         return new RestClientExceptionMapper();\n     }\n@@ -135,16 +144,14 @@ protected JAXRSClientFactoryBean defaultRestClientFactoryBean() {\n         defaultRestClientFactoryBean.setThreadSafe(true);\n         defaultRestClientFactoryBean.setInheritHeaders(true);\n \n-        List<Feature> features = new ArrayList<>();\n-        features.add(new LoggingFeature());\n-        defaultRestClientFactoryBean.setFeatures(features);\n+        defaultRestClientFactoryBean.setFeatures(List.of(new LoggingFeature()));\n \n-        List<Object> providers = new ArrayList<>(4);\n-        providers.add(new DateParamConverterProvider());\n-        providers.add(getJaxbProvider());\n-        providers.add(getJsonProvider());\n-        providers.add(getExceptionMapper());\n-        defaultRestClientFactoryBean.setProviders(providers);\n+        defaultRestClientFactoryBean.setProviders(List.of(\n+                new DateParamConverterProvider(),\n+                getJsonProvider(),\n+                getJaxbProvider(),\n+                getYamlProvider(),\n+                getExceptionMapper()));\n \n         return defaultRestClientFactoryBean;\n     }\n@@ -168,6 +175,16 @@ public SyncopeClientFactoryBean setJaxbProvider(final JAXBElementProvider<?> jax\n         return this;\n     }\n \n+    public JacksonJaxbYAMLProvider getYamlProvider() {\n+        return yamlProvider == null\n+                ? defaultYamlProvider()\n+                : yamlProvider;\n+    }\n+\n+    public void setYamlProvider(final JacksonJaxbYAMLProvider yamlProvider) {\n+        this.yamlProvider = yamlProvider;\n+    }\n+\n     public RestClientExceptionMapper getExceptionMapper() {\n         return Optional.ofNullable(exceptionMapper).orElseGet(SyncopeClientFactoryBean::defaultExceptionMapper);\n     }"},{"sha":"465b9e73d6d47d8275daa0b0739b039fb69e96b2","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/client/ClientAppTO.java","status":"modified","additions":20,"deletions":9,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FClientAppTO.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -18,27 +18,33 @@\n  */\n package org.apache.syncope.common.lib.to.client;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import io.swagger.v3.oas.annotations.media.Schema;\n-import org.apache.commons.lang3.builder.EqualsBuilder;\n-import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.syncope.common.lib.BaseBean;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.to.EntityTO;\n \n @XmlRootElement(name = \"clientApp\")\n @XmlType\n @XmlSeeAlso({ OIDCRPTO.class, SAML2SPTO.class })\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"@class\")\n-@JsonPropertyOrder(value = { \"@class\", \"key\", \"name\", \"description\", \"authPolicy\", \"accessPolicy\", \"attReleasePolicy\" })\n+@JsonPropertyOrder(value = { \"@class\", \"key\", \"description\" })\n @Schema(subTypes = { OIDCRPTO.class, SAML2SPTO.class }, discriminatorProperty = \"@class\")\n-public abstract class ClientAppTO extends BaseBean implements EntityTO {\n+public abstract class ClientAppTO implements EntityTO {\n \n     private static final long serialVersionUID = 6577639976115661357L;\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    private String discriminator;\n+\n     private String key;\n \n     private String name;\n@@ -53,6 +59,13 @@ public abstract class ClientAppTO extends BaseBean implements EntityTO {\n \n     private String attrReleasePolicy;\n \n+    @Schema(name = \"@class\", required = true)\n+    public abstract String getDiscriminator();\n+\n+    public void setDiscriminator(final String discriminator) {\n+        // do nothing\n+    }\n+\n     public String getAttrReleasePolicy() {\n         return attrReleasePolicy;\n     }\n@@ -82,6 +95,7 @@ public String getKey() {\n         return key;\n     }\n \n+    @PathParam(\"key\")\n     @Override\n     public void setKey(final String key) {\n         this.key = key;\n@@ -111,9 +125,6 @@ public void setDescription(final String description) {\n         this.description = description;\n     }\n \n-    @Schema(name = \"@class\", required = true)\n-    public abstract String getDiscriminator();\n-\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder()"},{"sha":"e5e92ee4655eaae599969804fabad8f25f7f9dcd","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/client/OIDCRPTO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FOIDCRPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FOIDCRPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FOIDCRPTO.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -58,8 +58,7 @@ public class OIDCRPTO extends ClientAppTO {\n \n     @XmlTransient\n     @JsonProperty(\"@class\")\n-    @Schema(name = \"@class\", required = true,\n-            example = \"org.apache.syncope.common.lib.to.client.OIDCRPTO\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.client.OIDCRPTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"955222aa769286414c44b4d2c87b5d39cf253cb8","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/client/SAML2SPTO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FSAML2SPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FSAML2SPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FSAML2SPTO.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -62,8 +62,7 @@ public class SAML2SPTO extends ClientAppTO {\n \n     @XmlTransient\n     @JsonProperty(\"@class\")\n-    @Schema(name = \"@class\", required = true,\n-            example = \"org.apache.syncope.common.lib.to.client.SAML2SPTO\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.client.SAML2SPTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"6057ed387a010605cfbd01da8cf2e041ef686632","filename":"common/idrepo/lib/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/common%2Fidrepo%2Flib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/common%2Fidrepo%2Flib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fpom.xml?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -53,6 +53,12 @@ under the License.\n       <artifactId>jackson-annotations</artifactId>\n     </dependency>\n     \n+    <dependency>\n+      <groupId>com.fasterxml.jackson.dataformat</groupId>\n+      <artifactId>jackson-dataformat-yaml</artifactId>\n+      <version>${jackson.version}</version>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>"},{"sha":"f3d603bf9dde551814a8015c44e15c40c1cbc071","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/BaseBean.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FBaseBean.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -19,7 +19,16 @@\n package org.apache.syncope.common.lib;\n \n import java.io.Serializable;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.to.AbstractStartEndBean;\n+import org.apache.syncope.common.lib.to.AccessTokenTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n \n+@XmlType\n+@XmlSeeAlso({ AbstractStartEndBean.class, AccessTokenTO.class, AuditEntry.class, AnyTO.class, RealmTO.class })\n public abstract class BaseBean implements Serializable {\n \n     private static final long serialVersionUID = 8243277089603485380L;"},{"sha":"aad8578d1767cb9b168f7b721de7c85862d4f285","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractStartEndBean.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -21,13 +21,14 @@\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.Date;\n import java.util.Optional;\n-\n+import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.BaseBean;\n \n @XmlType\n+@XmlSeeAlso({ ExecTO.class, ReportTO.class, TaskTO.class })\n public class AbstractStartEndBean extends BaseBean {\n \n     private static final long serialVersionUID = 2399577415544539917L;"},{"sha":"f1028e6c94d3372018adae0e74cf30b4649f0c6f","filename":"core/idrepo/rest-cxf/pom.xml","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fpom.xml?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -135,6 +135,45 @@ under the License.\n       <groupId>org.webjars</groupId>\n       <artifactId>highlightjs</artifactId>\n     </dependency>\n+\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-transports-local</artifactId>\n+      <version>${cxf.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.bval</groupId>\n+      <artifactId>bval-jsr</artifactId>\n+      <scope>test</scope>\n+    </dependency>      \n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-simple</artifactId>\n+      <version>${slf4j.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"5b3062dd07679d181f78f13ec442993b7c9e137a","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/CheckDomainFilter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCheckDomainFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCheckDomainFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCheckDomainFilter.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -45,7 +45,7 @@ public class CheckDomainFilter implements ContainerRequestFilter {\n \n     @Override\n     public void filter(final ContainerRequestContext reqContext) throws IOException {\n-        final String domain = reqContext.getHeaderString(RESTHeaders.DOMAIN);\n+        String domain = reqContext.getHeaderString(RESTHeaders.DOMAIN);\n         if (domain != null && !SyncopeConstants.MASTER_DOMAIN.equals(domain)) {\n             if (!domainHolder.getDomains().containsKey(domain)) {\n                 String message = \"Domain '\" + domain + \"' not available\";"},{"sha":"eb2f55df83b0bb702a6c13b30dcbc68fb57c85f7","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RESTCXFContext.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRESTCXFContext.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -91,22 +91,23 @@ public JAXBElementProvider<?> jaxbProvider() {\n         documentDepthProperties.setInnerElementCountThreshold(500);\n         jaxbProvider.setDepthProperties(documentDepthProperties);\n \n-        jaxbProvider.setCollectionWrapperMap(\n-                Map.of(\"org.apache.syncope.common.lib.policy.PolicyTO\", \"policies\"));\n+        jaxbProvider.setCollectionWrapperMap(Map.of(\"org.apache.syncope.common.lib.policy.PolicyTO\", \"policies\"));\n \n         return jaxbProvider;\n     }\n \n     @Bean\n     public JacksonJaxbJsonProvider jsonProvider() {\n         JacksonJaxbJsonProvider jsonProvider = new JacksonJaxbJsonProvider();\n-        jsonProvider.setMapper(new UnwrappedObjectMapper());\n+        jsonProvider.setMapper(new SyncopeObjectMapper());\n         return jsonProvider;\n     }\n \n     @Bean\n     public JacksonJaxbYAMLProvider yamlProvider() {\n-        return new JacksonJaxbYAMLProvider();\n+        JacksonJaxbYAMLProvider yamlProvider = new JacksonJaxbYAMLProvider();\n+        yamlProvider.setMapper(new SyncopeYAMLMapper());\n+        return yamlProvider;\n     }\n \n     @Bean"},{"sha":"42d121d56aa4a44ab9c84b70bad41d1b8c27d939","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeObjectMapper.java","status":"renamed","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeObjectMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeObjectMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeObjectMapper.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -21,6 +21,7 @@\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.datatype.joda.JodaModule;\n import java.io.File;\n import java.io.IOException;\n@@ -32,15 +33,15 @@\n  * Jackson ObjectMapper that unwraps singleton map values and enable default\n  * typing for handling abstract types serialization.\n  */\n-public class UnwrappedObjectMapper extends ObjectMapper {\n+public class SyncopeObjectMapper extends ObjectMapper {\n \n     private static final long serialVersionUID = -317191546835195103L;\n \n-    public UnwrappedObjectMapper() {\n+    public SyncopeObjectMapper() {\n         super();\n \n         registerModule(new JodaModule());\n-        configure(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n+        configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n     }\n \n     /**\n@@ -50,7 +51,7 @@ public UnwrappedObjectMapper() {\n      * @param value the potential Map to unwrap\n      * @return the unwrapped map or the original value\n      */\n-    private static Object unwrapMap(final Object value) {\n+    private Object unwrapMap(final Object value) {\n         if (value instanceof Map) {\n             Map<?, ?> map = (Map<?, ?>) value;\n             if (map.size() == 1) {","previous_filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/UnwrappedObjectMapper.java"},{"sha":"b9f2ba3316f4a64446382c1e1b26811dfbba638e","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeYAMLMapper.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeYAMLMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeYAMLMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeYAMLMapper.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf;\n+\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import com.fasterxml.jackson.datatype.joda.JodaModule;\n+\n+public class SyncopeYAMLMapper extends YAMLMapper {\n+\n+    private static final long serialVersionUID = 1022020055828974308L;\n+\n+    public SyncopeYAMLMapper() {\n+        super();\n+\n+        registerModule(new JodaModule());\n+        configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n+    }\n+}"},{"sha":"e6426fd808fc6d3163de8b98a99433911a619eaa","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchProcess.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchProcess.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -92,7 +92,7 @@ public void run() {\n \n         List<BatchResponseItem> batchResponseItems = new ArrayList<>(batchRequestItems.size());\n \n-        batchRequestItems.forEach((BatchRequestItem reqItem) -> {\n+        batchRequestItems.forEach(reqItem -> {\n             LOG.debug(\"Batch item:\\n{}\", reqItem);\n \n             AbstractHTTPDestination dest = destinationRegistry.getDestinationForPath(reqItem.getRequestURI(), true);"},{"sha":"ae3c90396bf0b1ab630f1f5a3917ffb46a706b62","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -243,5 +243,4 @@ protected <T extends BaseBean> PagedResult<T> buildPagedResult(\n \n         return result;\n     }\n-\n }"},{"sha":"16d309ca06535d507484c9be5179eb2e9c4cae34","filename":"core/idrepo/rest-cxf/src/test/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceTest.java","status":"added","additions":293,"deletions":0,"changes":293,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -0,0 +1,293 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n+import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;\n+import com.fasterxml.jackson.jaxrs.yaml.JacksonJaxbYAMLProvider;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.UUID;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Request;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriInfo;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.endpoint.Server;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n+import org.apache.cxf.jaxrs.ext.search.SearchContext;\n+import org.apache.cxf.jaxrs.ext.search.SearchContextProvider;\n+import org.apache.cxf.jaxrs.impl.MetadataMap;\n+import org.apache.cxf.jaxrs.impl.UriBuilderImpl;\n+import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;\n+import org.apache.cxf.jaxrs.provider.JAXBElementProvider;\n+import org.apache.cxf.jaxrs.validation.JAXRSBeanValidationInInterceptor;\n+import org.apache.cxf.transport.common.gzip.GZIPInInterceptor;\n+import org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;\n+import org.apache.cxf.transport.local.LocalConduit;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.rest.api.DateParamConverterProvider;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.AnyObjectService;\n+import org.apache.syncope.core.logic.AnyObjectLogic;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n+import org.apache.syncope.core.rest.cxf.AddETagFilter;\n+import org.apache.syncope.core.rest.cxf.RestServiceExceptionMapper;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+//@SpringJUnitConfig(locations = { \"classpath:restCXFTest.xml\" })\n+@SpringJUnitConfig(classes = { RESTCXFTestContext.class })\n+public class AnyObjectServiceTest {\n+\n+    private static final String LOCAL_ADDRESS = \"local://anyObjects\";\n+\n+    private static Server SERVER;\n+\n+    @Autowired\n+    private JAXBElementProvider<?> jaxbProvider;\n+\n+    @Autowired\n+    private DateParamConverterProvider dateParamConverterProvider;\n+\n+    @Autowired\n+    private JacksonJaxbJsonProvider jsonProvider;\n+\n+    @Autowired\n+    private JacksonJaxbYAMLProvider yamlProvider;\n+\n+    @Autowired\n+    private RestServiceExceptionMapper exceptionMapper;\n+\n+    @Autowired\n+    private JAXRSBeanValidationInInterceptor validationInInterceptor;\n+\n+    @Autowired\n+    private GZIPInInterceptor gzipInInterceptor;\n+\n+    @Autowired\n+    private GZIPOutInterceptor gzipOutInterceptor;\n+\n+    @Autowired\n+    private SearchContextProvider searchContextProvider;\n+\n+    @Autowired\n+    private AddETagFilter addETagFilter;\n+\n+    @BeforeEach\n+    public void setup() {\n+        if (SERVER == null) {\n+            AnyObjectDAO anyObjectDAO = mock(AnyObjectDAO.class);\n+\n+            AnyObjectLogic logic = mock(AnyObjectLogic.class);\n+            when(logic.search(any(SearchCond.class), anyInt(), anyInt(), anyList(), anyString(), anyBoolean())).\n+                    thenAnswer(ic -> {\n+                        AnyObjectTO printer1 = new AnyObjectTO();\n+                        printer1.setKey(UUID.randomUUID().toString());\n+                        printer1.setName(\"printer1\");\n+                        printer1.setType(\"PRINTER\");\n+                        printer1.getPlainAttrs().add(new Attr.Builder(\"location\").value(\"here\").build());\n+\n+                        AnyObjectTO printer2 = new AnyObjectTO();\n+                        printer2.setKey(UUID.randomUUID().toString());\n+                        printer2.setName(\"printer2\");\n+                        printer2.setType(\"PRINTER\");\n+                        printer2.getPlainAttrs().add(new Attr.Builder(\"location\").value(\"there\").build());\n+\n+                        return Pair.of(2, Arrays.asList(printer1, printer2));\n+                    });\n+            when(logic.create(any(AnyObjectCR.class), anyBoolean())).thenAnswer(ic -> {\n+                AnyObjectTO anyObjectTO = new AnyObjectTO();\n+                EntityTOUtils.toAnyTO(ic.getArgument(0), anyObjectTO);\n+                anyObjectTO.setKey(UUID.randomUUID().toString());\n+\n+                ProvisioningResult<AnyObjectTO> result = new ProvisioningResult<>();\n+                result.setEntity(anyObjectTO);\n+                return result;\n+            });\n+\n+            SearchCondVisitor searchCondVisitor = mock(SearchCondVisitor.class);\n+            when(searchCondVisitor.getQuery()).thenReturn(new SearchCond());\n+\n+            @SuppressWarnings(\"unchecked\")\n+            SearchCondition<SearchBean> sc = mock(SearchCondition.class);\n+            doNothing().when(sc).accept(any());\n+            SearchContext searchContext = mock(SearchContext.class);\n+            when(searchContext.getCondition(anyString(), eq(SearchBean.class))).thenReturn(sc);\n+\n+            UriInfo uriInfo = mock(UriInfo.class);\n+            when(uriInfo.getAbsolutePathBuilder()).thenReturn(new UriBuilderImpl());\n+            when(uriInfo.getQueryParameters()).thenReturn(new MetadataMap<>());\n+\n+            MessageContext messageContext = mock(MessageContext.class);\n+            MockHttpServletRequest httpRequest = new MockHttpServletRequest();\n+            httpRequest.addHeader(RESTHeaders.NULL_PRIORITY_ASYNC, \"false\");\n+            when(messageContext.getHttpServletRequest()).thenReturn(httpRequest);\n+            when(messageContext.getHttpServletResponse()).thenReturn(new MockHttpServletResponse());\n+\n+            Request request = mock(Request.class);\n+            when(request.evaluatePreconditions(any(Date.class))).thenReturn(Response.notModified());\n+            when(messageContext.getRequest()).thenReturn(request);\n+\n+            AnyObjectServiceImpl service = new AnyObjectServiceImpl();\n+            ReflectionTestUtils.setField(service, \"anyObjectDAO\", anyObjectDAO);\n+            ReflectionTestUtils.setField(service, \"logic\", logic);\n+            ReflectionTestUtils.setField(service, \"searchCondVisitor\", searchCondVisitor);\n+            ReflectionTestUtils.setField(service, \"searchContext\", searchContext);\n+            ReflectionTestUtils.setField(service, \"uriInfo\", uriInfo);\n+            ReflectionTestUtils.setField(service, \"messageContext\", messageContext);\n+\n+            JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean();\n+            sf.setAddress(LOCAL_ADDRESS);\n+            sf.setResourceClasses(AnyObjectService.class);\n+            sf.setResourceProvider(\n+                    AnyObjectService.class,\n+                    new SingletonResourceProvider(service, true));\n+\n+            sf.setInInterceptors(Arrays.asList(gzipInInterceptor, validationInInterceptor));\n+            sf.setOutInterceptors(Arrays.asList(gzipOutInterceptor));\n+\n+            sf.setProviders(Arrays.asList(dateParamConverterProvider, jaxbProvider, jsonProvider, yamlProvider,\n+                    exceptionMapper, searchContextProvider, addETagFilter));\n+\n+            SERVER = sf.create();\n+        }\n+\n+        assertNotNull(SERVER);\n+    }\n+\n+    private WebClient client(final MediaType mediaType) {\n+        WebClient client = WebClient.create(LOCAL_ADDRESS, Arrays.asList(\n+                dateParamConverterProvider, jsonProvider, jaxbProvider, yamlProvider));\n+        WebClient.getConfig(client).getRequestContext().put(LocalConduit.DIRECT_DISPATCH, Boolean.TRUE);\n+        return client.accept(mediaType).type(mediaType).path(\"anyObjects\");\n+    }\n+\n+    private InputStream list(final MediaType mediaType) {\n+        Response response = client(mediaType).\n+                query(\"fiql\", \"$type==PRINTER\").\n+                query(\"page\", \"1\").\n+                query(\"size\", \"10\").\n+                get();\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        return (InputStream) response.getEntity();\n+    }\n+\n+    private void checkList(final PagedResult<AnyObjectTO> list) {\n+        assertEquals(2, list.getTotalCount());\n+        assertEquals(2, list.getResult().size());\n+\n+        assertEquals(\"printer1\", list.getResult().get(0).getName());\n+        assertEquals(\"PRINTER\", list.getResult().get(0).getType());\n+\n+        assertEquals(\"there\", list.getResult().get(1).getPlainAttr(\"location\").get().getValues().get(0));\n+    }\n+\n+    @Test\n+    public void jsonList() throws IOException {\n+        InputStream in = list(MediaType.APPLICATION_JSON_TYPE);\n+\n+        PagedResult<AnyObjectTO> list = new ObjectMapper().\n+                readValue(IOUtils.toString(in), new TypeReference<PagedResult<AnyObjectTO>>() {\n+                });\n+        checkList(list);\n+    }\n+\n+    @Test\n+    public void xmlList() throws IOException, JAXBException {\n+        InputStream in = list(MediaType.APPLICATION_XML_TYPE);\n+\n+        JAXBContext context = JAXBContext.newInstance(PagedResult.class, AnyObjectTO.class);\n+        @SuppressWarnings(\"unchecked\")\n+        PagedResult<AnyObjectTO> list = (PagedResult<AnyObjectTO>) context.createUnmarshaller().unmarshal(in);\n+        checkList(list);\n+    }\n+\n+    @Test\n+    public void yamlList() throws IOException {\n+        InputStream in = list(RESTHeaders.APPLICATION_YAML_TYPE);\n+\n+        PagedResult<AnyObjectTO> list = new YAMLMapper().\n+                readValue(IOUtils.toString(in), new TypeReference<PagedResult<AnyObjectTO>>() {\n+                });\n+        checkList(list);\n+    }\n+\n+    private void create(final MediaType mediaType) {\n+        AnyObjectCR newPrinter = new AnyObjectCR();\n+        newPrinter.setName(\"newPrinter\");\n+        newPrinter.setType(\"PRINTER\");\n+        newPrinter.getPlainAttrs().add(new Attr.Builder(\"location\").value(\"new\").build());\n+\n+        Response response = client(mediaType).post(newPrinter);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+        assertNotNull(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+    }\n+\n+    @Test\n+    public void jsonCreate() {\n+        create(MediaType.APPLICATION_JSON_TYPE);\n+    }\n+\n+    @Test\n+    public void xmlCreate() {\n+        create(MediaType.APPLICATION_XML_TYPE);\n+    }\n+\n+    @Test\n+    public void yamlCreate() {\n+        create(RESTHeaders.APPLICATION_YAML_TYPE);\n+    }\n+}"},{"sha":"2fa4ba1ba117f2c02b580b252e3a65902e1d78d1","filename":"core/idrepo/rest-cxf/src/test/java/org/apache/syncope/core/rest/cxf/service/RESTCXFTestContext.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRESTCXFTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRESTCXFTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRESTCXFTestContext.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;\n+import com.fasterxml.jackson.jaxrs.yaml.JacksonJaxbYAMLProvider;\n+import java.util.Map;\n+import org.apache.cxf.jaxrs.ext.search.SearchContextProvider;\n+import org.apache.cxf.jaxrs.provider.JAXBElementProvider;\n+import org.apache.cxf.jaxrs.validation.JAXRSBeanValidationInInterceptor;\n+import org.apache.cxf.staxutils.DocumentDepthProperties;\n+import org.apache.cxf.transport.common.gzip.GZIPInInterceptor;\n+import org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;\n+import org.apache.cxf.validation.BeanValidationProvider;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.rest.api.DateParamConverterProvider;\n+import org.apache.syncope.core.rest.cxf.AddETagFilter;\n+import org.apache.syncope.core.rest.cxf.RestServiceExceptionMapper;\n+import org.apache.syncope.core.rest.cxf.SyncopeObjectMapper;\n+import org.apache.syncope.core.rest.cxf.SyncopeYAMLMapper;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class RESTCXFTestContext {\n+\n+    @Bean\n+    public DateParamConverterProvider dateParamConverterProvider() {\n+        return new DateParamConverterProvider();\n+    }\n+\n+    @Bean\n+    public JAXBElementProvider<?> jaxbProvider() {\n+        JAXBElementProvider<?> jaxbProvider = new JAXBElementProvider<>();\n+        jaxbProvider.setNamespacePrefixes(Map.of(SyncopeConstants.NS, SyncopeConstants.NS_PREFIX));\n+\n+        DocumentDepthProperties documentDepthProperties = new DocumentDepthProperties();\n+        documentDepthProperties.setInnerElementCountThreshold(500);\n+        jaxbProvider.setDepthProperties(documentDepthProperties);\n+\n+        jaxbProvider.setCollectionWrapperMap(Map.of(\"org.apache.syncope.common.lib.policy.PolicyTO\", \"policies\"));\n+\n+        return jaxbProvider;\n+    }\n+\n+    @Bean\n+    public JacksonJaxbJsonProvider jsonProvider() {\n+        JacksonJaxbJsonProvider jsonProvider = new JacksonJaxbJsonProvider();\n+        jsonProvider.setMapper(new SyncopeObjectMapper());\n+        return jsonProvider;\n+    }\n+\n+    @Bean\n+    public JacksonJaxbYAMLProvider yamlProvider() {\n+        JacksonJaxbYAMLProvider yamlProvider = new JacksonJaxbYAMLProvider();\n+        yamlProvider.setMapper(new SyncopeYAMLMapper());\n+        return yamlProvider;\n+    }\n+\n+    @Bean\n+    public BeanValidationProvider validationProvider() {\n+        return new BeanValidationProvider();\n+    }\n+\n+    @Bean\n+    public JAXRSBeanValidationInInterceptor validationInInterceptor() {\n+        JAXRSBeanValidationInInterceptor validationInInterceptor = new JAXRSBeanValidationInInterceptor();\n+        validationInInterceptor.setProvider(validationProvider());\n+        return validationInInterceptor;\n+    }\n+\n+    @Bean\n+    public GZIPInInterceptor gzipInInterceptor() {\n+        return new GZIPInInterceptor();\n+    }\n+\n+    @Bean\n+    public GZIPOutInterceptor gzipOutInterceptor() {\n+        GZIPOutInterceptor gzipOutInterceptor = new GZIPOutInterceptor();\n+        gzipOutInterceptor.setThreshold(0);\n+        gzipOutInterceptor.setForce(true);\n+        return gzipOutInterceptor;\n+    }\n+\n+    @Bean\n+    public RestServiceExceptionMapper restServiceExceptionMapper() {\n+        return new RestServiceExceptionMapper();\n+    }\n+\n+    @Bean\n+    public SearchContextProvider searchContextProvider() {\n+        return new SearchContextProvider();\n+    }\n+\n+    @Bean\n+    public AddETagFilter addETagFilter() {\n+        return new AddETagFilter();\n+    }\n+}"},{"sha":"731446506d7e753d12aab66314d8e5ab44343e4f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/CSVStreamConnector.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FCSVStreamConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FCSVStreamConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FCSVStreamConnector.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -21,6 +21,7 @@\n import com.fasterxml.jackson.databind.MappingIterator;\n import com.fasterxml.jackson.databind.SequenceWriter;\n import com.fasterxml.jackson.dataformat.csv.CsvMapper;\n+import com.fasterxml.jackson.dataformat.csv.CsvParser;\n import com.fasterxml.jackson.dataformat.csv.CsvSchema;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -104,7 +105,9 @@ public void close() throws IOException {\n     public MappingIterator<Map<String, String>> reader() throws IOException {\n         synchronized (this) {\n             if (reader == null) {\n-                reader = new CsvMapper().readerFor(Map.class).with(schemaBuilder.build()).readValues(in);\n+                reader = new CsvMapper().\n+                        enable(CsvParser.Feature.SKIP_EMPTY_LINES).\n+                        readerFor(Map.class).with(schemaBuilder.build()).readValues(in);\n             }\n         }\n         return reader;"},{"sha":"ca562eb83ecf90ecc4be17a8520a256087d9d095","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -23,6 +23,7 @@\n import static org.junit.jupiter.api.Assertions.fail;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.URI;\n@@ -158,7 +159,9 @@ public abstract class AbstractITCase {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractITCase.class);\n \n-    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    protected static final YAMLMapper YAML_MAPPER = new YAMLMapper();\n \n     protected static final String ADMIN_UNAME = \"admin\";\n "},{"sha":"a3362bfe11f317c5d05da2ae0cb352c09138d627","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuditITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -225,7 +225,7 @@ public void findByConnector() throws JsonProcessingException {\n         entries = query(query, MAX_WAIT_SECONDS);\n         assertEquals(pre + 1, entries.size());\n \n-        ConnInstanceTO restore = MAPPER.readValue(entries.get(0).getBefore(), ConnInstanceTO.class);\n+        ConnInstanceTO restore = OBJECT_MAPPER.readValue(entries.get(0).getBefore(), ConnInstanceTO.class);\n         connectorService.update(restore);\n \n         ldapConn = connectorService.read(connectorKey, null);"},{"sha":"57bba9842c7d43329921f18db444d8647e0543df","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/BatchITCase.java","status":"modified","additions":13,"deletions":10,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -72,17 +72,17 @@ public class BatchITCase extends AbstractITCase {\n     private static String requestBody(final String boundary) throws JsonProcessingException, JAXBException {\n         List<BatchRequestItem> reqItems = new ArrayList<>();\n \n-        // 1. create user as JSON\n+        // 1. create user as YAML\n         UserCR userCR = UserITCase.getUniqueSample(\"batch@syncope.apache.org\");\n         assertNotEquals(\"/odd\", userCR.getRealm());\n-        String createUserPayload = MAPPER.writeValueAsString(userCR);\n+        String createUserPayload = YAML_MAPPER.writeValueAsString(userCR);\n \n         BatchRequestItem createUser = new BatchRequestItem();\n         createUser.setMethod(HttpMethod.POST);\n         createUser.setRequestURI(\"/users\");\n         createUser.setHeaders(new HashMap<>());\n-        createUser.getHeaders().put(HttpHeaders.ACCEPT, List.of(MediaType.APPLICATION_JSON));\n-        createUser.getHeaders().put(HttpHeaders.CONTENT_TYPE, List.of(MediaType.APPLICATION_JSON));\n+        createUser.getHeaders().put(HttpHeaders.ACCEPT, List.of(RESTHeaders.APPLICATION_YAML));\n+        createUser.getHeaders().put(HttpHeaders.CONTENT_TYPE, List.of(RESTHeaders.APPLICATION_YAML));\n         createUser.getHeaders().put(HttpHeaders.CONTENT_LENGTH, List.of(createUserPayload.length()));\n         createUser.setContent(createUserPayload);\n         reqItems.add(createUser);\n@@ -109,7 +109,7 @@ private static String requestBody(final String boundary) throws JsonProcessingEx\n         UserUR userUR = new UserUR();\n         userUR.setKey(userCR.getUsername());\n         userUR.setRealm(new StringReplacePatchItem.Builder().value(\"/odd\").build());\n-        String updateUserPayload = MAPPER.writeValueAsString(userUR);\n+        String updateUserPayload = OBJECT_MAPPER.writeValueAsString(userUR);\n \n         BatchRequestItem updateUser = new BatchRequestItem();\n         updateUser.setMethod(HttpMethod.PATCH);\n@@ -154,8 +154,8 @@ private static void check(final List<BatchResponseItem> resItems) throws IOExcep\n         assertNotNull(resItems.get(0).getHeaders().get(HttpHeaders.ETAG));\n         assertNotNull(resItems.get(0).getHeaders().get(RESTHeaders.DOMAIN));\n         assertNotNull(resItems.get(0).getHeaders().get(RESTHeaders.RESOURCE_KEY));\n-        assertEquals(MediaType.APPLICATION_JSON, resItems.get(0).getHeaders().get(HttpHeaders.CONTENT_TYPE).get(0));\n-        ProvisioningResult<UserTO> user = MAPPER.readValue(\n+        assertEquals(RESTHeaders.APPLICATION_YAML, resItems.get(0).getHeaders().get(HttpHeaders.CONTENT_TYPE).get(0));\n+        ProvisioningResult<UserTO> user = YAML_MAPPER.readValue(\n                 resItems.get(0).getContent(), new TypeReference<ProvisioningResult<UserTO>>() {\n         });\n         assertNotNull(user.getEntity().getKey());\n@@ -191,7 +191,8 @@ private static void check(final List<BatchResponseItem> resItems) throws IOExcep\n         assertEquals(Response.Status.OK.getStatusCode(), resItems.get(5).getStatus());\n         assertNotNull(resItems.get(5).getHeaders().get(RESTHeaders.DOMAIN));\n         assertEquals(MediaType.APPLICATION_JSON, resItems.get(5).getHeaders().get(HttpHeaders.CONTENT_TYPE).get(0));\n-        group = MAPPER.readValue(resItems.get(5).getContent(), new TypeReference<ProvisioningResult<GroupTO>>() {\n+        group = OBJECT_MAPPER.readValue(\n+                resItems.get(5).getContent(), new TypeReference<ProvisioningResult<GroupTO>>() {\n         });\n         assertNotNull(group);\n     }\n@@ -268,15 +269,17 @@ public void webClientAsync() throws IOException, JAXBException {\n     private static BatchRequest batchRequest() {\n         BatchRequest batchRequest = adminClient.batch();\n \n-        // 1. create user as JSON\n+        // 1. create user as YAML\n         UserService batchUserService = batchRequest.getService(UserService.class);\n+        Client client = WebClient.client(batchUserService).reset();\n+        client.type(RESTHeaders.APPLICATION_YAML).accept(RESTHeaders.APPLICATION_YAML);\n         UserCR userCR = UserITCase.getUniqueSample(\"batch@syncope.apache.org\");\n         assertNotEquals(\"/odd\", userCR.getRealm());\n         batchUserService.create(userCR);\n \n         // 2. create group as XML\n         GroupService batchGroupService = batchRequest.getService(GroupService.class);\n-        Client client = WebClient.client(batchGroupService).reset();\n+        client = WebClient.client(batchGroupService).reset();\n         client.type(MediaType.APPLICATION_XML).accept(MediaType.APPLICATION_XML);\n         GroupCR groupCR = GroupITCase.getBasicSample(\"batch\");\n         batchGroupService.create(groupCR);"},{"sha":"ddcd22e3ae11124ece663d2c0c45467bd07ec662","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/BpmnProcessITCase.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -21,13 +21,15 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assumptions.assumeFalse;\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.FlowableDetector;\n@@ -41,7 +43,9 @@ public class BpmnProcessITCase extends AbstractITCase {\n \n     @BeforeAll\n     public static void findDefault() {\n+        assumeFalse(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.YAML);\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+\n         bpmnProcessService.list().stream().\n                 filter(BpmnProcess::isUserWorkflow).findAny().\n                 ifPresent(process -> userWorkflowKey = process.getKey());\n@@ -50,6 +54,7 @@ public static void findDefault() {\n \n     @BeforeEach\n     public void check() {\n+        assumeFalse(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.YAML);\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n     }\n "},{"sha":"10a019456080d800d832c4aa7b12c930ecb8498b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ClientAppITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -151,5 +151,4 @@ public void delete() {\n             assertNotNull(e);\n         }\n     }\n-\n }"},{"sha":"fe31d97e70b008374bc150a132018178e1f2fe5a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DynRealmITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -239,7 +239,7 @@ private static ArrayNode fetchDynRealmsFromElasticsearch(final String userKey) t\n                 send();\n         assertEquals(HttpStatus.OK_200, response.getStatus());\n \n-        return (ArrayNode) MAPPER.readTree(response.getContent()).\n+        return (ArrayNode) OBJECT_MAPPER.readTree(response.getContent()).\n                 get(\"hits\").get(\"hits\").get(0).get(\"_source\").get(\"dynRealms\");\n     }\n "},{"sha":"29b8f5a6b03d367dcb70134a9da4466ceeb3c68e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LinkedAccountITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -459,7 +459,7 @@ public void pull() {\n         WebClient webClient = WebClient.create(BUILD_TOOLS_ADDRESS + \"/rest/users\").\n                 accept(MediaType.APPLICATION_JSON_TYPE).type(MediaType.APPLICATION_JSON_TYPE);\n \n-        ObjectNode user = MAPPER.createObjectNode();\n+        ObjectNode user = OBJECT_MAPPER.createObjectNode();\n         user.put(\"username\", \"linkedaccount1\");\n         user.put(\"password\", \"Password123\");\n         user.put(\"firstName\", \"Pasquale\");\n@@ -471,7 +471,7 @@ public void pull() {\n         String user1Key = StringUtils.substringAfterLast(response.getHeaderString(HttpHeaders.LOCATION), \"/\");\n         assertNotNull(user1Key);\n \n-        user = MAPPER.createObjectNode();\n+        user = OBJECT_MAPPER.createObjectNode();\n         user.put(\"username\", \"vivaldi\");\n         user.put(\"password\", \"Password123\");\n         user.put(\"firstName\", \"Giovannino\");\n@@ -483,7 +483,7 @@ public void pull() {\n         String user2Key = StringUtils.substringAfterLast(response.getHeaderString(HttpHeaders.LOCATION), \"/\");\n         assertNotNull(user2Key);\n \n-        user = MAPPER.createObjectNode();\n+        user = OBJECT_MAPPER.createObjectNode();\n         user.put(\"username\", \"not.vivaldi\");\n         user.put(\"password\", \"Password123\");\n         user.put(\"email\", \"not.vivaldi@syncope.org\");\n@@ -537,12 +537,12 @@ public void pull() {\n             response = webClient.path(user1Key).delete();\n             assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n \n-            user = MAPPER.createObjectNode();\n+            user = OBJECT_MAPPER.createObjectNode();\n             user.put(\"username\", \"linkedaccount2\");\n             response = webClient.replacePath(user2Key).put(user.toString());\n             assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n \n-            user = MAPPER.createObjectNode();\n+            user = OBJECT_MAPPER.createObjectNode();\n             user.put(\"status\", \"INACTIVE\");\n             response = webClient.replacePath(user3Key).put(user.toString());\n             assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());"},{"sha":"f810b4d8d37b27bc99ab3f7f47b441552b8749eb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/OpenAPIITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOpenAPIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOpenAPIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOpenAPIITCase.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -39,7 +39,7 @@ public void openapi() throws IOException {\n         Response response = webClient.get();\n         assertEquals(200, response.getStatus());\n \n-        JsonNode tree = MAPPER.readTree((InputStream) response.getEntity());\n+        JsonNode tree = OBJECT_MAPPER.readTree((InputStream) response.getEntity());\n         assertNotNull(tree);\n \n         JsonNode info = tree.get(\"info\");"},{"sha":"0f845b1157df77207311fb6c955a9be8f513229b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserRequestITCase.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -22,6 +22,7 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeFalse;\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n import java.io.IOException;\n@@ -30,6 +31,7 @@\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n@@ -42,12 +44,14 @@\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.FlowableDetector;\n import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n public class UserRequestITCase extends AbstractITCase {\n \n     @BeforeAll\n     public static void loadBpmnProcesses() throws IOException {\n+        assumeFalse(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.YAML);\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n         WebClient.client(bpmnProcessService).type(MediaType.APPLICATION_XML_TYPE);\n@@ -59,10 +63,14 @@ public static void loadBpmnProcesses() throws IOException {\n                 IOUtils.toString(UserRequestITCase.class.getResourceAsStream(\"/verifyAddedVariables.bpmn20.xml\")));\n     }\n \n-    @Test\n-    public void twoLevelsApproval() {\n+    @BeforeEach\n+    public void check() {\n+        assumeFalse(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.YAML);\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+    }\n \n+    @Test\n+    public void twoLevelsApproval() {\n         UserTO user = createUser(UserITCase.getUniqueSample(\"twoLevelsApproval@tirasa.net\")).getEntity();\n         assertNotNull(user);\n         assertFalse(user.getMembership(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").isPresent());\n@@ -141,8 +149,6 @@ public void twoLevelsApproval() {\n \n     @Test\n     public void cancel() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n-\n         PagedResult<UserRequestForm> forms =\n                 userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n@@ -175,8 +181,6 @@ public void cancel() {\n \n     @Test\n     public void userSelection() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n-\n         PagedResult<UserRequestForm> forms =\n                 userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n@@ -247,11 +251,9 @@ public void userSelection() {\n         assertTrue(relationships.stream().\n                 anyMatch(relationship -> \"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\".equals(relationship.getOtherEndKey())));\n     }\n-    \n+\n     @Test\n     public void addVariablesToUserRequestAtStart() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n-\n         PagedResult<UserRequestForm> forms =\n                 userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n@@ -263,7 +265,7 @@ public void addVariablesToUserRequestAtStart() {\n \n         WorkflowTaskExecInput testInput = new WorkflowTaskExecInput();\n         testInput.getVariables().put(\"providedVariable\", \"test\");\n-        \n+\n         // start request as user\n         UserRequest req = client.getService(UserRequestService.class).start(\"verifyAddedVariables\", null, testInput);\n         assertNotNull(req);\n@@ -280,10 +282,10 @@ public void addVariablesToUserRequestAtStart() {\n         UserRequestForm form = userForms.getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         assertEquals(form.getProperty(\"providedVariable\").get().getValue(), \"test\");\n-        \n+\n         // cancel request\n         userRequestService.cancel(req.getExecutionId(), \"nothing in particular\");\n-       \n+\n         // no more forms available\n         forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         assertEquals(preForms, forms.getTotalCount());"},{"sha":"4078360a08bf39848f34bdb738547da5789c891d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/WAClientAppITCase.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d08d0a69e14cc890712745dc2d57c23fd3c91618/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java?ref=d08d0a69e14cc890712745dc2d57c23fd3c91618","patch":"@@ -22,10 +22,12 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n import java.util.List;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n@@ -47,6 +49,8 @@ public class WAClientAppITCase extends AbstractITCase {\n \n     @BeforeAll\n     public static void setup() {\n+        assumeTrue(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.JSON);\n+\n         SyncopeClient anonymous = clientFactory.create(\n                 new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n         waClientAppService = anonymous.getService(WAClientAppService.class);\n@@ -154,5 +158,4 @@ private void removeItems() {\n         authModuleTO = authModuleService.read(\"be456831-593d-4003-b273-4c3fb61700df\");\n         assertTrue(authModuleTO.getItems().isEmpty());\n     }\n-\n }"}]}