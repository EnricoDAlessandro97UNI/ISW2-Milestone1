{"sha":"e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b","node_id":"C_kwDOJfYA1toAKGU2ZGM1ZThkNzliNThkNTBhNzYwYzcwZjU1ZjljNmU0YWUwYjdhOGI","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-11-29T09:38:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-11-29T09:50:05Z"},"message":"[SYNCOPE-1654] Allowing to search realm by key or full path","tree":{"sha":"afcfef72c2883d166e1d5d660519af315e92ad25","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/afcfef72c2883d166e1d5d660519af315e92ad25"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4814ebf2b88ad6312d9f0771eb3eef15f8e952b5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4814ebf2b88ad6312d9f0771eb3eef15f8e952b5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4814ebf2b88ad6312d9f0771eb3eef15f8e952b5"}],"stats":{"total":68,"additions":68,"deletions":0},"files":[{"sha":"514b4364f5b43700da48ffbc7a4bf45fdb853a1e","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b","patch":"@@ -28,8 +28,10 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -605,6 +607,17 @@ protected String getQuery(\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n+        if (JAXRSService.PARAM_REALM.equals(cond.getSchema())\n+                && !SyncopeConstants.UUID_PATTERN.matcher(cond.getExpression()).matches()) {\n+\n+            Realm realm = realmDAO.findByFullPath(cond.getExpression());\n+            if (realm == null) {\n+                LOG.warn(\"Invalid Realm full path: {}\", cond.getExpression());\n+                return EMPTY_QUERY;\n+            }\n+            cond.setExpression(realm.getKey());\n+        }\n+\n         Triple<PlainSchema, PlainAttrValue, AnyCond> checked;\n         try {\n             checked = check(cond, svs.anyTypeKind);"},{"sha":"7b048079a402673c609c2d2edd257fe801057f56","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b","patch":"@@ -32,9 +32,11 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -1111,6 +1113,17 @@ protected String getQuery(\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n+        if (JAXRSService.PARAM_REALM.equals(cond.getSchema())\n+                && !SyncopeConstants.UUID_PATTERN.matcher(cond.getExpression()).matches()) {\n+\n+            Realm realm = realmDAO.findByFullPath(cond.getExpression());\n+            if (realm == null) {\n+                LOG.warn(\"Invalid Realm full path: {}\", cond.getExpression());\n+                return EMPTY_QUERY;\n+            }\n+            cond.setExpression(realm.getKey());\n+        }\n+\n         Triple<PlainSchema, PlainAttrValue, AnyCond> checked;\n         try {\n             checked = check(cond, svs.anyTypeKind);"},{"sha":"963177c56c7e8cb5f64f087671f453f6a347b4c7","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b","patch":"@@ -234,6 +234,24 @@ public void searchByBoolean() {\n         assertEquals(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", users.get(0).getKey());\n     }\n \n+    @Test\n+    public void searchByRealm() {\n+        AnyCond anyCond = new AnyCond(AttrCond.Type.EQ);\n+        anyCond.setSchema(\"realm\");\n+        anyCond.setExpression(\"c5b75db1-fce7-470f-b780-3b9934d82a9d\");\n+\n+        List<User> users = searchDAO.search(SearchCond.getLeaf(anyCond), AnyTypeKind.USER);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+        assertEquals(\"rossini\", users.get(0).getUsername());\n+\n+        anyCond.setExpression(\"/even\");\n+        users = searchDAO.search(SearchCond.getLeaf(anyCond), AnyTypeKind.USER);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+        assertEquals(\"rossini\", users.get(0).getUsername());\n+    }\n+\n     @Test\n     public void searchByPageAndSize() {\n         AttrCond fullnameLeafCond = new AttrCond(AttrCond.Type.LIKE);"},{"sha":"c2aaa9b99de73584d2c050bc5f0802a8e4fe370c","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -547,6 +548,17 @@ protected QueryBuilder getQueryBuilder(final AttrCond cond, final AnyTypeKind ki\n     }\n \n     protected QueryBuilder getQueryBuilder(final AnyCond cond, final AnyTypeKind kind) {\n+        if (JAXRSService.PARAM_REALM.equals(cond.getSchema())\n+                && SyncopeConstants.UUID_PATTERN.matcher(cond.getExpression()).matches()) {\n+\n+            Realm realm = realmDAO.find(cond.getExpression());\n+            if (realm == null) {\n+                LOG.warn(\"Invalid Realm key: {}\", cond.getExpression());\n+                return MATCH_NONE_QUERY_BUILDER;\n+            }\n+            cond.setExpression(realm.getFullPath());\n+        }\n+\n         Triple<PlainSchema, PlainAttrValue, AnyCond> checked;\n         try {\n             checked = check(cond, kind);"},{"sha":"c9f0e79472068c9052afece8344623e17fb6fbae","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=e6dc5e8d79b58d50a760c70f55f9c6e4ae0b7a8b","patch":"@@ -286,6 +286,18 @@ public void paginatedSearch() {\n         assertFalse(matchingUsers.getResult().isEmpty());\n     }\n \n+    @Test\n+    public void searchByRealm() {\n+        PagedResult<UserTO> users = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"realm\").\n+                        equalTo(\"c5b75db1-fce7-470f-b780-3b9934d82a9d\").query()).build());\n+        assertTrue(users.getResult().stream().anyMatch(user -> \"rossini\".equals(user.getUsername())));\n+\n+        users = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"realm\").equalTo(\"/even\").query()).build());\n+        assertTrue(users.getResult().stream().anyMatch(user -> \"rossini\".equals(user.getUsername())));\n+    }\n+\n     @Test\n     public void searchByBooleanAnyCond() {\n         PagedResult<GroupTO> groups = groupService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM)."}]}